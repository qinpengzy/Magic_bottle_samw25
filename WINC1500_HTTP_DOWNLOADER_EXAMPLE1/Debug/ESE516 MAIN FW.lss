
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002907c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0002907c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005a34  20000300  00029380  00040300  2**4
                  ALLOC
  3 .stack        00002004  20005d34  0002edb4  00040300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00040300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
  6 .debug_info   00124c56  00000000  00000000  00040381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011090  00000000  00000000  00164fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00013ec5  00000000  00000000  00176067  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000036b0  00000000  00000000  00189f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000032b8  00000000  00000000  0018d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00041c6e  00000000  00000000  00190894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005c48d  00000000  00000000  001d2502  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c3b35  00000000  00000000  0022e98f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000cd60  00000000  00000000  002f24c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 7d 00 20 3d 8a 01 00 35 8b 01 00 35 8b 01 00     8}. =...5...5...
	...
      2c:	69 7b 00 00 00 00 00 00 00 00 00 00 91 7c 00 00     i{...........|..
      3c:	d9 7c 00 00 35 8b 01 00 35 8b 01 00 35 8b 01 00     .|..5...5...5...
      4c:	8d 4b 01 00 b9 40 01 00 35 8b 01 00 81 17 00 00     .K...@..5.......
      5c:	35 8b 01 00 c5 18 00 00 31 52 01 00 49 52 01 00     5.......1R..IR..
      6c:	61 52 01 00 79 52 01 00 91 52 01 00 a9 52 01 00     aR..yR...R...R..
      7c:	85 89 01 00 99 89 01 00 ad 89 01 00 55 58 00 00     ............UX..
      8c:	69 58 00 00 7d 58 00 00 00 00 00 00 00 00 00 00     iX..}X..........
      9c:	09 16 00 00 35 8b 01 00 45 17 00 00 35 8b 01 00     ....5...E...5...
      ac:	35 8b 01 00 00 00 00 00                             5.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000300 	.word	0x20000300
      d4:	00000000 	.word	0x00000000
      d8:	0002907c 	.word	0x0002907c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000304 	.word	0x20000304
     108:	0002907c 	.word	0x0002907c
     10c:	0002907c 	.word	0x0002907c
     110:	00000000 	.word	0x00000000

00000114 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
     114:	b580      	push	{r7, lr}
     116:	b086      	sub	sp, #24
     118:	af00      	add	r7, sp, #0
     11a:	60f8      	str	r0, [r7, #12]
     11c:	0008      	movs	r0, r1
     11e:	607a      	str	r2, [r7, #4]
     120:	0019      	movs	r1, r3
     122:	230b      	movs	r3, #11
     124:	18fb      	adds	r3, r7, r3
     126:	1c02      	adds	r2, r0, #0
     128:	701a      	strb	r2, [r3, #0]
     12a:	2308      	movs	r3, #8
     12c:	18fb      	adds	r3, r7, r3
     12e:	1c0a      	adds	r2, r1, #0
     130:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "AccData" to send to the device
	//TIP: Check the structure "AccData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?


	// read to sensor
	int32_t error = 0;
     132:	2300      	movs	r3, #0
     134:	617b      	str	r3, [r7, #20]
	
	//AccData is I2C_Data struct
	AccData.address = 0x19;
     136:	4b0f      	ldr	r3, [pc, #60]	; (174 <platform_read+0x60>)
     138:	2219      	movs	r2, #25
     13a:	701a      	strb	r2, [r3, #0]
	//&bufp is the address of data
	AccData.msgIn = bufp;
     13c:	4b0d      	ldr	r3, [pc, #52]	; (174 <platform_read+0x60>)
     13e:	687a      	ldr	r2, [r7, #4]
     140:	609a      	str	r2, [r3, #8]
	AccData.lenIn = len;
     142:	4b0c      	ldr	r3, [pc, #48]	; (174 <platform_read+0x60>)
     144:	2208      	movs	r2, #8
     146:	18ba      	adds	r2, r7, r2
     148:	8812      	ldrh	r2, [r2, #0]
     14a:	819a      	strh	r2, [r3, #12]

	AccData.msgOut = &reg;
     14c:	4b09      	ldr	r3, [pc, #36]	; (174 <platform_read+0x60>)
     14e:	220b      	movs	r2, #11
     150:	18ba      	adds	r2, r7, r2
     152:	605a      	str	r2, [r3, #4]
	AccData.lenOut = 1;
     154:	4b07      	ldr	r3, [pc, #28]	; (174 <platform_read+0x60>)
     156:	2201      	movs	r2, #1
     158:	81da      	strh	r2, [r3, #14]
    //AccData out
	// AccData.lenOut = 1;
	// AccData.msgOut = &reg;
	
	//&AccData is pointer of AccData
	error = I2cReadDataWait(&AccData, 50, 100);
     15a:	4b06      	ldr	r3, [pc, #24]	; (174 <platform_read+0x60>)
     15c:	2264      	movs	r2, #100	; 0x64
     15e:	2132      	movs	r1, #50	; 0x32
     160:	0018      	movs	r0, r3
     162:	4b05      	ldr	r3, [pc, #20]	; (178 <platform_read+0x64>)
     164:	4798      	blx	r3
     166:	0003      	movs	r3, r0
     168:	617b      	str	r3, [r7, #20]
	return error;
     16a:	697b      	ldr	r3, [r7, #20]


}
     16c:	0018      	movs	r0, r3
     16e:	46bd      	mov	sp, r7
     170:	b006      	add	sp, #24
     172:	bd80      	pop	{r7, pc}
     174:	200047bc 	.word	0x200047bc
     178:	00002e2d 	.word	0x00002e2d

0000017c <platform_write>:
*****************************************************************************/
//len is the length of bufp
//reg is the register
//mesOutImu is the data we copy
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
     17c:	b580      	push	{r7, lr}
     17e:	b096      	sub	sp, #88	; 0x58
     180:	af00      	add	r7, sp, #0
     182:	60f8      	str	r0, [r7, #12]
     184:	0008      	movs	r0, r1
     186:	607a      	str	r2, [r7, #4]
     188:	0019      	movs	r1, r3
     18a:	230b      	movs	r3, #11
     18c:	18fb      	adds	r3, r7, r3
     18e:	1c02      	adds	r2, r0, #0
     190:	701a      	strb	r2, [r3, #0]
     192:	2308      	movs	r3, #8
     194:	18fb      	adds	r3, r7, r3
     196:	1c0a      	adds	r2, r1, #0
     198:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "AccData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly

    // write from sensor
	int32_t error = 0;
     19a:	2300      	movs	r3, #0
     19c:	653b      	str	r3, [r7, #80]	; 0x50
	
	uint8_t msgOutImu[64]; ///<USE ME AS A BUFFER FOR platform_write and platform_read
	
	msgOutImu[0] = reg;
     19e:	2310      	movs	r3, #16
     1a0:	18fb      	adds	r3, r7, r3
     1a2:	220b      	movs	r2, #11
     1a4:	18ba      	adds	r2, r7, r2
     1a6:	7812      	ldrb	r2, [r2, #0]
     1a8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<len; i++){
     1aa:	2300      	movs	r3, #0
     1ac:	657b      	str	r3, [r7, #84]	; 0x54
     1ae:	e00b      	b.n	1c8 <platform_write+0x4c>
		msgOutImu[i+1] = bufp[i];
     1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     1b2:	3301      	adds	r3, #1
     1b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     1b6:	6879      	ldr	r1, [r7, #4]
     1b8:	188a      	adds	r2, r1, r2
     1ba:	7811      	ldrb	r1, [r2, #0]
     1bc:	2210      	movs	r2, #16
     1be:	18ba      	adds	r2, r7, r2
     1c0:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<len; i++){
     1c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     1c4:	3301      	adds	r3, #1
     1c6:	657b      	str	r3, [r7, #84]	; 0x54
     1c8:	2308      	movs	r3, #8
     1ca:	18fb      	adds	r3, r7, r3
     1cc:	881a      	ldrh	r2, [r3, #0]
     1ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     1d0:	429a      	cmp	r2, r3
     1d2:	dced      	bgt.n	1b0 <platform_write+0x34>
	}
	
	//AccData is I2C_Data
	AccData.address = 0x19;
     1d4:	4b0c      	ldr	r3, [pc, #48]	; (208 <platform_write+0x8c>)
     1d6:	2219      	movs	r2, #25
     1d8:	701a      	strb	r2, [r3, #0]
	//msgOutImu is the address
	AccData.msgOut = msgOutImu;
     1da:	4b0b      	ldr	r3, [pc, #44]	; (208 <platform_write+0x8c>)
     1dc:	2210      	movs	r2, #16
     1de:	18ba      	adds	r2, r7, r2
     1e0:	605a      	str	r2, [r3, #4]
	AccData.lenOut = len+1;
     1e2:	2308      	movs	r3, #8
     1e4:	18fb      	adds	r3, r7, r3
     1e6:	881b      	ldrh	r3, [r3, #0]
     1e8:	3301      	adds	r3, #1
     1ea:	b29a      	uxth	r2, r3
     1ec:	4b06      	ldr	r3, [pc, #24]	; (208 <platform_write+0x8c>)
     1ee:	81da      	strh	r2, [r3, #14]


	//&AccData is pointer of AccData
	error = I2cWriteDataWait(&AccData, 100);
     1f0:	4b05      	ldr	r3, [pc, #20]	; (208 <platform_write+0x8c>)
     1f2:	2164      	movs	r1, #100	; 0x64
     1f4:	0018      	movs	r0, r3
     1f6:	4b05      	ldr	r3, [pc, #20]	; (20c <platform_write+0x90>)
     1f8:	4798      	blx	r3
     1fa:	0003      	movs	r3, r0
     1fc:	653b      	str	r3, [r7, #80]	; 0x50
	return error;
     1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
     200:	0018      	movs	r0, r3
     202:	46bd      	mov	sp, r7
     204:	b016      	add	sp, #88	; 0x58
     206:	bd80      	pop	{r7, pc}
     208:	200047bc 	.word	0x200047bc
     20c:	00002d55 	.word	0x00002d55

00000210 <Acc_init>:
stmdev_ctx_t * GetAccStruct(void)
{
	return &dev_ctx_acc;
}

int Acc_init(void){
     210:	b580      	push	{r7, lr}
     212:	b082      	sub	sp, #8
     214:	af00      	add	r7, sp, #0
	int status = 1;
     216:	2301      	movs	r3, #1
     218:	607b      	str	r3, [r7, #4]
	uint8_t whoamI = 0;
     21a:	1cfb      	adds	r3, r7, #3
     21c:	2200      	movs	r2, #0
     21e:	701a      	strb	r2, [r3, #0]

	lis2dh12_device_id_get(&dev_ctx_acc, &whoamI);
     220:	1cfa      	adds	r2, r7, #3
     222:	4b17      	ldr	r3, [pc, #92]	; (280 <Acc_init+0x70>)
     224:	0011      	movs	r1, r2
     226:	0018      	movs	r0, r3
     228:	4b16      	ldr	r3, [pc, #88]	; (284 <Acc_init+0x74>)
     22a:	4798      	blx	r3
	if (whoamI != LIS2DH12_ID) {
     22c:	1cfb      	adds	r3, r7, #3
     22e:	781b      	ldrb	r3, [r3, #0]
     230:	2b33      	cmp	r3, #51	; 0x33
     232:	d004      	beq.n	23e <Acc_init+0x2e>
		SerialConsoleWriteString("Cannot find IMU!\r\n");
     234:	4b14      	ldr	r3, [pc, #80]	; (288 <Acc_init+0x78>)
     236:	0018      	movs	r0, r3
     238:	4b14      	ldr	r3, [pc, #80]	; (28c <Acc_init+0x7c>)
     23a:	4798      	blx	r3
     23c:	e003      	b.n	246 <Acc_init+0x36>
		} else {
		SerialConsoleWriteString("IMU found!\r\n");
     23e:	4b14      	ldr	r3, [pc, #80]	; (290 <Acc_init+0x80>)
     240:	0018      	movs	r0, r3
     242:	4b12      	ldr	r3, [pc, #72]	; (28c <Acc_init+0x7c>)
     244:	4798      	blx	r3
	}
	  
	/* Enable Block Data Update. */
	lis2dh12_block_data_update_set(&dev_ctx_acc, PROPERTY_ENABLE);
     246:	4b0e      	ldr	r3, [pc, #56]	; (280 <Acc_init+0x70>)
     248:	2101      	movs	r1, #1
     24a:	0018      	movs	r0, r3
     24c:	4b11      	ldr	r3, [pc, #68]	; (294 <Acc_init+0x84>)
     24e:	4798      	blx	r3
	/* Set Output Data Rate to 1Hz. */
	lis2dh12_data_rate_set(&dev_ctx_acc, LIS2DH12_ODR_1Hz);
     250:	4b0b      	ldr	r3, [pc, #44]	; (280 <Acc_init+0x70>)
     252:	2101      	movs	r1, #1
     254:	0018      	movs	r0, r3
     256:	4b10      	ldr	r3, [pc, #64]	; (298 <Acc_init+0x88>)
     258:	4798      	blx	r3
	/* Set full scale to 2g. */
	lis2dh12_full_scale_set(&dev_ctx_acc, LIS2DH12_2g);
     25a:	4b09      	ldr	r3, [pc, #36]	; (280 <Acc_init+0x70>)
     25c:	2100      	movs	r1, #0
     25e:	0018      	movs	r0, r3
     260:	4b0e      	ldr	r3, [pc, #56]	; (29c <Acc_init+0x8c>)
     262:	4798      	blx	r3
	/* Enable temperature sensor. */
	//lis2dh12_temperature_meas_set(&dev_ctx_acc, LIS2DH12_TEMP_ENABLE);
	/* Set device in continuous mode with 12 bit resol. */
	lis2dh12_operating_mode_set(&dev_ctx_acc, LIS2DH12_HR_12bit);
     264:	4b06      	ldr	r3, [pc, #24]	; (280 <Acc_init+0x70>)
     266:	2100      	movs	r1, #0
     268:	0018      	movs	r0, r3
     26a:	4b0d      	ldr	r3, [pc, #52]	; (2a0 <Acc_init+0x90>)
     26c:	4798      	blx	r3
	
	SerialConsoleWriteString("Initialized IMU!\r\n");
     26e:	4b0d      	ldr	r3, [pc, #52]	; (2a4 <Acc_init+0x94>)
     270:	0018      	movs	r0, r3
     272:	4b06      	ldr	r3, [pc, #24]	; (28c <Acc_init+0x7c>)
     274:	4798      	blx	r3
	return status;
     276:	687b      	ldr	r3, [r7, #4]
}
     278:	0018      	movs	r0, r3
     27a:	46bd      	mov	sp, r7
     27c:	b002      	add	sp, #8
     27e:	bd80      	pop	{r7, pc}
     280:	20000000 	.word	0x20000000
     284:	00000a61 	.word	0x00000a61
     288:	0002417c 	.word	0x0002417c
     28c:	0000b875 	.word	0x0000b875
     290:	00024190 	.word	0x00024190
     294:	000009bd 	.word	0x000009bd
     298:	000008e9 	.word	0x000008e9
     29c:	00000951 	.word	0x00000951
     2a0:	0000080d 	.word	0x0000080d
     2a4:	000241a0 	.word	0x000241a0

000002a8 <is_deviation_large>:

int data_array[ARRAY_SIZE] = {0};
int oldest_index = 0;
int new_data;

int is_deviation_large(void) {
     2a8:	b580      	push	{r7, lr}
     2aa:	b082      	sub	sp, #8
     2ac:	af00      	add	r7, sp, #0
	int sum = 0;
     2ae:	2300      	movs	r3, #0
     2b0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < ARRAY_SIZE; ++i) {
     2b2:	2300      	movs	r3, #0
     2b4:	603b      	str	r3, [r7, #0]
     2b6:	e00f      	b.n	2d8 <is_deviation_large+0x30>
		sum += abs(data_array[i] - new_data);
     2b8:	4b19      	ldr	r3, [pc, #100]	; (320 <is_deviation_large+0x78>)
     2ba:	683a      	ldr	r2, [r7, #0]
     2bc:	0092      	lsls	r2, r2, #2
     2be:	58d2      	ldr	r2, [r2, r3]
     2c0:	4b18      	ldr	r3, [pc, #96]	; (324 <is_deviation_large+0x7c>)
     2c2:	681b      	ldr	r3, [r3, #0]
     2c4:	1ad3      	subs	r3, r2, r3
     2c6:	17da      	asrs	r2, r3, #31
     2c8:	189b      	adds	r3, r3, r2
     2ca:	4053      	eors	r3, r2
     2cc:	687a      	ldr	r2, [r7, #4]
     2ce:	18d3      	adds	r3, r2, r3
     2d0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < ARRAY_SIZE; ++i) {
     2d2:	683b      	ldr	r3, [r7, #0]
     2d4:	3301      	adds	r3, #1
     2d6:	603b      	str	r3, [r7, #0]
     2d8:	683b      	ldr	r3, [r7, #0]
     2da:	2b03      	cmp	r3, #3
     2dc:	ddec      	ble.n	2b8 <is_deviation_large+0x10>
	}
	data_array[oldest_index] = new_data;
     2de:	4b12      	ldr	r3, [pc, #72]	; (328 <is_deviation_large+0x80>)
     2e0:	681a      	ldr	r2, [r3, #0]
     2e2:	4b10      	ldr	r3, [pc, #64]	; (324 <is_deviation_large+0x7c>)
     2e4:	6819      	ldr	r1, [r3, #0]
     2e6:	4b0e      	ldr	r3, [pc, #56]	; (320 <is_deviation_large+0x78>)
     2e8:	0092      	lsls	r2, r2, #2
     2ea:	50d1      	str	r1, [r2, r3]
	oldest_index = (oldest_index + 1) % ARRAY_SIZE;
     2ec:	4b0e      	ldr	r3, [pc, #56]	; (328 <is_deviation_large+0x80>)
     2ee:	681b      	ldr	r3, [r3, #0]
     2f0:	3301      	adds	r3, #1
     2f2:	4a0e      	ldr	r2, [pc, #56]	; (32c <is_deviation_large+0x84>)
     2f4:	4013      	ands	r3, r2
     2f6:	d504      	bpl.n	302 <is_deviation_large+0x5a>
     2f8:	3b01      	subs	r3, #1
     2fa:	2204      	movs	r2, #4
     2fc:	4252      	negs	r2, r2
     2fe:	4313      	orrs	r3, r2
     300:	3301      	adds	r3, #1
     302:	001a      	movs	r2, r3
     304:	4b08      	ldr	r3, [pc, #32]	; (328 <is_deviation_large+0x80>)
     306:	601a      	str	r2, [r3, #0]
	return sum / (ARRAY_SIZE) > THRESHOLD;
     308:	2301      	movs	r3, #1
     30a:	1c1a      	adds	r2, r3, #0
     30c:	687b      	ldr	r3, [r7, #4]
     30e:	2b53      	cmp	r3, #83	; 0x53
     310:	dc01      	bgt.n	316 <is_deviation_large+0x6e>
     312:	2300      	movs	r3, #0
     314:	1c1a      	adds	r2, r3, #0
     316:	b2d3      	uxtb	r3, r2
}
     318:	0018      	movs	r0, r3
     31a:	46bd      	mov	sp, r7
     31c:	b002      	add	sp, #8
     31e:	bd80      	pop	{r7, pc}
     320:	2000031c 	.word	0x2000031c
     324:	200047cc 	.word	0x200047cc
     328:	2000032c 	.word	0x2000032c
     32c:	80000003 	.word	0x80000003

00000330 <Acc_read>:

static int16_t data_raw_acceleration[3];
static float acceleration_mg[3];

int Acc_read(void)
{
     330:	b5b0      	push	{r4, r5, r7, lr}
     332:	b08a      	sub	sp, #40	; 0x28
     334:	af02      	add	r7, sp, #8
	lis2dh12_reg_t reg;
	/* Read output only if new value available */
	lis2dh12_xl_data_ready_get(&dev_ctx_acc, &reg.byte);
     336:	2314      	movs	r3, #20
     338:	18fa      	adds	r2, r7, r3
     33a:	4b7d      	ldr	r3, [pc, #500]	; (530 <Acc_read+0x200>)
     33c:	0011      	movs	r1, r2
     33e:	0018      	movs	r0, r3
     340:	4b7c      	ldr	r3, [pc, #496]	; (534 <Acc_read+0x204>)
     342:	4798      	blx	r3
	int dev = 0;
     344:	2300      	movs	r3, #0
     346:	61fb      	str	r3, [r7, #28]

	if (reg.byte) {
     348:	2314      	movs	r3, #20
     34a:	18fb      	adds	r3, r7, r3
     34c:	781b      	ldrb	r3, [r3, #0]
     34e:	2b00      	cmp	r3, #0
     350:	d100      	bne.n	354 <Acc_read+0x24>
     352:	e0e8      	b.n	526 <Acc_read+0x1f6>
		uint8_t buff2;
		uint8_t buff3;
		uint8_t buff4;
		uint8_t buff5;
		
		int32_t ret = platform_read(NULL, LIS2DH12_OUT_X_L, &buff0, 1);
     354:	2313      	movs	r3, #19
     356:	18fa      	adds	r2, r7, r3
     358:	2301      	movs	r3, #1
     35a:	2128      	movs	r1, #40	; 0x28
     35c:	2000      	movs	r0, #0
     35e:	4c76      	ldr	r4, [pc, #472]	; (538 <Acc_read+0x208>)
     360:	47a0      	blx	r4
     362:	0003      	movs	r3, r0
     364:	61bb      	str	r3, [r7, #24]
		ret = platform_read(NULL, LIS2DH12_OUT_X_H, &buff1, 1);
     366:	2312      	movs	r3, #18
     368:	18fa      	adds	r2, r7, r3
     36a:	2301      	movs	r3, #1
     36c:	2129      	movs	r1, #41	; 0x29
     36e:	2000      	movs	r0, #0
     370:	4c71      	ldr	r4, [pc, #452]	; (538 <Acc_read+0x208>)
     372:	47a0      	blx	r4
     374:	0003      	movs	r3, r0
     376:	61bb      	str	r3, [r7, #24]
		ret = platform_read(NULL, LIS2DH12_OUT_Y_L, &buff2, 1);
     378:	2311      	movs	r3, #17
     37a:	18fa      	adds	r2, r7, r3
     37c:	2301      	movs	r3, #1
     37e:	212a      	movs	r1, #42	; 0x2a
     380:	2000      	movs	r0, #0
     382:	4c6d      	ldr	r4, [pc, #436]	; (538 <Acc_read+0x208>)
     384:	47a0      	blx	r4
     386:	0003      	movs	r3, r0
     388:	61bb      	str	r3, [r7, #24]
		ret = platform_read(NULL, LIS2DH12_OUT_Y_H, &buff3, 1);
     38a:	2310      	movs	r3, #16
     38c:	18fa      	adds	r2, r7, r3
     38e:	2301      	movs	r3, #1
     390:	212b      	movs	r1, #43	; 0x2b
     392:	2000      	movs	r0, #0
     394:	4c68      	ldr	r4, [pc, #416]	; (538 <Acc_read+0x208>)
     396:	47a0      	blx	r4
     398:	0003      	movs	r3, r0
     39a:	61bb      	str	r3, [r7, #24]
		ret = platform_read(NULL, LIS2DH12_OUT_Z_L, &buff4, 1);
     39c:	230f      	movs	r3, #15
     39e:	18fa      	adds	r2, r7, r3
     3a0:	2301      	movs	r3, #1
     3a2:	212c      	movs	r1, #44	; 0x2c
     3a4:	2000      	movs	r0, #0
     3a6:	4c64      	ldr	r4, [pc, #400]	; (538 <Acc_read+0x208>)
     3a8:	47a0      	blx	r4
     3aa:	0003      	movs	r3, r0
     3ac:	61bb      	str	r3, [r7, #24]
		ret = platform_read(NULL, LIS2DH12_OUT_Z_H, &buff5, 1);
     3ae:	230e      	movs	r3, #14
     3b0:	18fa      	adds	r2, r7, r3
     3b2:	2301      	movs	r3, #1
     3b4:	212d      	movs	r1, #45	; 0x2d
     3b6:	2000      	movs	r0, #0
     3b8:	4c5f      	ldr	r4, [pc, #380]	; (538 <Acc_read+0x208>)
     3ba:	47a0      	blx	r4
     3bc:	0003      	movs	r3, r0
     3be:	61bb      	str	r3, [r7, #24]
		
		data_raw_acceleration[0] = (int16_t)buff1;
     3c0:	2312      	movs	r3, #18
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	b21a      	sxth	r2, r3
     3c8:	4b5c      	ldr	r3, [pc, #368]	; (53c <Acc_read+0x20c>)
     3ca:	801a      	strh	r2, [r3, #0]
        data_raw_acceleration[0] = (data_raw_acceleration[0] * 256) + (int16_t)buff0;
     3cc:	4b5b      	ldr	r3, [pc, #364]	; (53c <Acc_read+0x20c>)
     3ce:	2200      	movs	r2, #0
     3d0:	5e9b      	ldrsh	r3, [r3, r2]
     3d2:	b29b      	uxth	r3, r3
     3d4:	021b      	lsls	r3, r3, #8
     3d6:	b29a      	uxth	r2, r3
     3d8:	2313      	movs	r3, #19
     3da:	18fb      	adds	r3, r7, r3
     3dc:	781b      	ldrb	r3, [r3, #0]
     3de:	b29b      	uxth	r3, r3
     3e0:	18d3      	adds	r3, r2, r3
     3e2:	b29b      	uxth	r3, r3
     3e4:	b21a      	sxth	r2, r3
     3e6:	4b55      	ldr	r3, [pc, #340]	; (53c <Acc_read+0x20c>)
     3e8:	801a      	strh	r2, [r3, #0]
  		data_raw_acceleration[1] = (int16_t)buff3;
     3ea:	2310      	movs	r3, #16
     3ec:	18fb      	adds	r3, r7, r3
     3ee:	781b      	ldrb	r3, [r3, #0]
     3f0:	b21a      	sxth	r2, r3
     3f2:	4b52      	ldr	r3, [pc, #328]	; (53c <Acc_read+0x20c>)
     3f4:	805a      	strh	r2, [r3, #2]
  		data_raw_acceleration[1] = (data_raw_acceleration[1] * 256) + (int16_t)buff2;
     3f6:	4b51      	ldr	r3, [pc, #324]	; (53c <Acc_read+0x20c>)
     3f8:	2202      	movs	r2, #2
     3fa:	5e9b      	ldrsh	r3, [r3, r2]
     3fc:	b29b      	uxth	r3, r3
     3fe:	021b      	lsls	r3, r3, #8
     400:	b29a      	uxth	r2, r3
     402:	2311      	movs	r3, #17
     404:	18fb      	adds	r3, r7, r3
     406:	781b      	ldrb	r3, [r3, #0]
     408:	b29b      	uxth	r3, r3
     40a:	18d3      	adds	r3, r2, r3
     40c:	b29b      	uxth	r3, r3
     40e:	b21a      	sxth	r2, r3
     410:	4b4a      	ldr	r3, [pc, #296]	; (53c <Acc_read+0x20c>)
     412:	805a      	strh	r2, [r3, #2]
  		data_raw_acceleration[2] = (int16_t)buff5;
     414:	230e      	movs	r3, #14
     416:	18fb      	adds	r3, r7, r3
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	b21a      	sxth	r2, r3
     41c:	4b47      	ldr	r3, [pc, #284]	; (53c <Acc_read+0x20c>)
     41e:	809a      	strh	r2, [r3, #4]
  		data_raw_acceleration[2] = (data_raw_acceleration[2] * 256) + (int16_t)buff4;
     420:	4b46      	ldr	r3, [pc, #280]	; (53c <Acc_read+0x20c>)
     422:	2204      	movs	r2, #4
     424:	5e9b      	ldrsh	r3, [r3, r2]
     426:	b29b      	uxth	r3, r3
     428:	021b      	lsls	r3, r3, #8
     42a:	b29a      	uxth	r2, r3
     42c:	230f      	movs	r3, #15
     42e:	18fb      	adds	r3, r7, r3
     430:	781b      	ldrb	r3, [r3, #0]
     432:	b29b      	uxth	r3, r3
     434:	18d3      	adds	r3, r2, r3
     436:	b29b      	uxth	r3, r3
     438:	b21a      	sxth	r2, r3
     43a:	4b40      	ldr	r3, [pc, #256]	; (53c <Acc_read+0x20c>)
     43c:	809a      	strh	r2, [r3, #4]

		acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
     43e:	4b3f      	ldr	r3, [pc, #252]	; (53c <Acc_read+0x20c>)
     440:	2200      	movs	r2, #0
     442:	5e9b      	ldrsh	r3, [r3, r2]
     444:	0018      	movs	r0, r3
     446:	4b3e      	ldr	r3, [pc, #248]	; (540 <Acc_read+0x210>)
     448:	4798      	blx	r3
     44a:	1c02      	adds	r2, r0, #0
     44c:	4b3d      	ldr	r3, [pc, #244]	; (544 <Acc_read+0x214>)
     44e:	601a      	str	r2, [r3, #0]
		acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
     450:	4b3a      	ldr	r3, [pc, #232]	; (53c <Acc_read+0x20c>)
     452:	2202      	movs	r2, #2
     454:	5e9b      	ldrsh	r3, [r3, r2]
     456:	0018      	movs	r0, r3
     458:	4b39      	ldr	r3, [pc, #228]	; (540 <Acc_read+0x210>)
     45a:	4798      	blx	r3
     45c:	1c02      	adds	r2, r0, #0
     45e:	4b39      	ldr	r3, [pc, #228]	; (544 <Acc_read+0x214>)
     460:	605a      	str	r2, [r3, #4]
		acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
     462:	4b36      	ldr	r3, [pc, #216]	; (53c <Acc_read+0x20c>)
     464:	2204      	movs	r2, #4
     466:	5e9b      	ldrsh	r3, [r3, r2]
     468:	0018      	movs	r0, r3
     46a:	4b35      	ldr	r3, [pc, #212]	; (540 <Acc_read+0x210>)
     46c:	4798      	blx	r3
     46e:	1c02      	adds	r2, r0, #0
     470:	4b34      	ldr	r3, [pc, #208]	; (544 <Acc_read+0x214>)
     472:	609a      	str	r2, [r3, #8]

		
		snprintf(bufferPrint, 64, "Acceleration [mg]:%d %d %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
     474:	4b33      	ldr	r3, [pc, #204]	; (544 <Acc_read+0x214>)
     476:	681a      	ldr	r2, [r3, #0]
     478:	4b33      	ldr	r3, [pc, #204]	; (548 <Acc_read+0x218>)
     47a:	1c10      	adds	r0, r2, #0
     47c:	4798      	blx	r3
     47e:	0005      	movs	r5, r0
     480:	4b30      	ldr	r3, [pc, #192]	; (544 <Acc_read+0x214>)
     482:	685a      	ldr	r2, [r3, #4]
     484:	4b30      	ldr	r3, [pc, #192]	; (548 <Acc_read+0x218>)
     486:	1c10      	adds	r0, r2, #0
     488:	4798      	blx	r3
     48a:	0004      	movs	r4, r0
     48c:	4b2d      	ldr	r3, [pc, #180]	; (544 <Acc_read+0x214>)
     48e:	689a      	ldr	r2, [r3, #8]
     490:	4b2d      	ldr	r3, [pc, #180]	; (548 <Acc_read+0x218>)
     492:	1c10      	adds	r0, r2, #0
     494:	4798      	blx	r3
     496:	0003      	movs	r3, r0
     498:	4a2c      	ldr	r2, [pc, #176]	; (54c <Acc_read+0x21c>)
     49a:	482d      	ldr	r0, [pc, #180]	; (550 <Acc_read+0x220>)
     49c:	9301      	str	r3, [sp, #4]
     49e:	9400      	str	r4, [sp, #0]
     4a0:	002b      	movs	r3, r5
     4a2:	2140      	movs	r1, #64	; 0x40
     4a4:	4c2b      	ldr	r4, [pc, #172]	; (554 <Acc_read+0x224>)
     4a6:	47a0      	blx	r4
		SerialConsoleWriteString(bufferPrint);
     4a8:	4b29      	ldr	r3, [pc, #164]	; (550 <Acc_read+0x220>)
     4aa:	0018      	movs	r0, r3
     4ac:	4b2a      	ldr	r3, [pc, #168]	; (558 <Acc_read+0x228>)
     4ae:	4798      	blx	r3
		struct ImuDataPacket imuPacket;
		imuPacket.xmg = (int)acceleration_mg[0];
     4b0:	4b24      	ldr	r3, [pc, #144]	; (544 <Acc_read+0x214>)
     4b2:	681a      	ldr	r2, [r3, #0]
     4b4:	4b24      	ldr	r3, [pc, #144]	; (548 <Acc_read+0x218>)
     4b6:	1c10      	adds	r0, r2, #0
     4b8:	4798      	blx	r3
     4ba:	0003      	movs	r3, r0
     4bc:	b21a      	sxth	r2, r3
     4be:	1d3b      	adds	r3, r7, #4
     4c0:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
     4c2:	4b20      	ldr	r3, [pc, #128]	; (544 <Acc_read+0x214>)
     4c4:	685a      	ldr	r2, [r3, #4]
     4c6:	4b20      	ldr	r3, [pc, #128]	; (548 <Acc_read+0x218>)
     4c8:	1c10      	adds	r0, r2, #0
     4ca:	4798      	blx	r3
     4cc:	0003      	movs	r3, r0
     4ce:	b21a      	sxth	r2, r3
     4d0:	1d3b      	adds	r3, r7, #4
     4d2:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
     4d4:	4b1b      	ldr	r3, [pc, #108]	; (544 <Acc_read+0x214>)
     4d6:	689a      	ldr	r2, [r3, #8]
     4d8:	4b1b      	ldr	r3, [pc, #108]	; (548 <Acc_read+0x218>)
     4da:	1c10      	adds	r0, r2, #0
     4dc:	4798      	blx	r3
     4de:	0003      	movs	r3, r0
     4e0:	b21a      	sxth	r2, r3
     4e2:	1d3b      	adds	r3, r7, #4
     4e4:	809a      	strh	r2, [r3, #4]
		new_data = (int)acceleration_mg[0];
     4e6:	4b17      	ldr	r3, [pc, #92]	; (544 <Acc_read+0x214>)
     4e8:	681a      	ldr	r2, [r3, #0]
     4ea:	4b17      	ldr	r3, [pc, #92]	; (548 <Acc_read+0x218>)
     4ec:	1c10      	adds	r0, r2, #0
     4ee:	4798      	blx	r3
     4f0:	0002      	movs	r2, r0
     4f2:	4b1a      	ldr	r3, [pc, #104]	; (55c <Acc_read+0x22c>)
     4f4:	601a      	str	r2, [r3, #0]
		
		imuPacket.is_dev = is_deviation_large();
     4f6:	4b1a      	ldr	r3, [pc, #104]	; (560 <Acc_read+0x230>)
     4f8:	4798      	blx	r3
     4fa:	0003      	movs	r3, r0
     4fc:	b29a      	uxth	r2, r3
     4fe:	1d3b      	adds	r3, r7, #4
     500:	80da      	strh	r2, [r3, #6]
		dev = (int)imuPacket.is_dev;
     502:	1d3b      	adds	r3, r7, #4
     504:	88db      	ldrh	r3, [r3, #6]
     506:	61fb      	str	r3, [r7, #28]
		if (WifiAddImuDataToQueue(&imuPacket)){
     508:	1d3b      	adds	r3, r7, #4
     50a:	0018      	movs	r0, r3
     50c:	4b15      	ldr	r3, [pc, #84]	; (564 <Acc_read+0x234>)
     50e:	4798      	blx	r3
     510:	1e03      	subs	r3, r0, #0
     512:	d004      	beq.n	51e <Acc_read+0x1ee>
					SerialConsoleWriteString("send imu ok\r\n");
     514:	4b14      	ldr	r3, [pc, #80]	; (568 <Acc_read+0x238>)
     516:	0018      	movs	r0, r3
     518:	4b0f      	ldr	r3, [pc, #60]	; (558 <Acc_read+0x228>)
     51a:	4798      	blx	r3
     51c:	e003      	b.n	526 <Acc_read+0x1f6>
				} else {
					SerialConsoleWriteString("send imu fail\r\n");
     51e:	4b13      	ldr	r3, [pc, #76]	; (56c <Acc_read+0x23c>)
     520:	0018      	movs	r0, r3
     522:	4b0d      	ldr	r3, [pc, #52]	; (558 <Acc_read+0x228>)
     524:	4798      	blx	r3
				}
	}
	return dev;
     526:	69fb      	ldr	r3, [r7, #28]
}
     528:	0018      	movs	r0, r3
     52a:	46bd      	mov	sp, r7
     52c:	b008      	add	sp, #32
     52e:	bdb0      	pop	{r4, r5, r7, pc}
     530:	20000000 	.word	0x20000000
     534:	00000a25 	.word	0x00000a25
     538:	00000115 	.word	0x00000115
     53c:	20000330 	.word	0x20000330
     540:	000007d5 	.word	0x000007d5
     544:	20000338 	.word	0x20000338
     548:	000212dd 	.word	0x000212dd
     54c:	000241b4 	.word	0x000241b4
     550:	200047d0 	.word	0x200047d0
     554:	00023015 	.word	0x00023015
     558:	0000b875 	.word	0x0000b875
     55c:	200047cc 	.word	0x200047cc
     560:	000002a9 	.word	0x000002a9
     564:	00004f8d 	.word	0x00004f8d
     568:	000241d4 	.word	0x000241d4
     56c:	000241e4 	.word	0x000241e4

00000570 <Acc_read_four>:

int Acc_read_four(void)
{
     570:	b5b0      	push	{r4, r5, r7, lr}
     572:	b088      	sub	sp, #32
     574:	af02      	add	r7, sp, #8
	lis2dh12_reg_t reg;
	/* Read output only if new value available */
	lis2dh12_xl_data_ready_get(&dev_ctx_acc, &reg.byte);
     576:	230c      	movs	r3, #12
     578:	18fa      	adds	r2, r7, r3
     57a:	4b66      	ldr	r3, [pc, #408]	; (714 <Acc_read_four+0x1a4>)
     57c:	0011      	movs	r1, r2
     57e:	0018      	movs	r0, r3
     580:	4b65      	ldr	r3, [pc, #404]	; (718 <Acc_read_four+0x1a8>)
     582:	4798      	blx	r3
	int dev = 0;
     584:	2300      	movs	r3, #0
     586:	617b      	str	r3, [r7, #20]
	

	if (reg.byte) {
     588:	230c      	movs	r3, #12
     58a:	18fb      	adds	r3, r7, r3
     58c:	781b      	ldrb	r3, [r3, #0]
     58e:	2b00      	cmp	r3, #0
     590:	d100      	bne.n	594 <Acc_read_four+0x24>
     592:	e0b9      	b.n	708 <Acc_read_four+0x198>
		uint8_t buff2;
		uint8_t buff3;
		uint8_t buff4;
		uint8_t buff5;
		
		int32_t ret = platform_read(NULL, LIS2DH12_OUT_X_L, &buff0, 1);
     594:	230b      	movs	r3, #11
     596:	18fa      	adds	r2, r7, r3
     598:	2301      	movs	r3, #1
     59a:	2128      	movs	r1, #40	; 0x28
     59c:	2000      	movs	r0, #0
     59e:	4c5f      	ldr	r4, [pc, #380]	; (71c <Acc_read_four+0x1ac>)
     5a0:	47a0      	blx	r4
     5a2:	0003      	movs	r3, r0
     5a4:	613b      	str	r3, [r7, #16]
		ret = platform_read(NULL, LIS2DH12_OUT_X_H, &buff1, 1);
     5a6:	230a      	movs	r3, #10
     5a8:	18fa      	adds	r2, r7, r3
     5aa:	2301      	movs	r3, #1
     5ac:	2129      	movs	r1, #41	; 0x29
     5ae:	2000      	movs	r0, #0
     5b0:	4c5a      	ldr	r4, [pc, #360]	; (71c <Acc_read_four+0x1ac>)
     5b2:	47a0      	blx	r4
     5b4:	0003      	movs	r3, r0
     5b6:	613b      	str	r3, [r7, #16]
		ret = platform_read(NULL, LIS2DH12_OUT_Y_L, &buff2, 1);
     5b8:	2309      	movs	r3, #9
     5ba:	18fa      	adds	r2, r7, r3
     5bc:	2301      	movs	r3, #1
     5be:	212a      	movs	r1, #42	; 0x2a
     5c0:	2000      	movs	r0, #0
     5c2:	4c56      	ldr	r4, [pc, #344]	; (71c <Acc_read_four+0x1ac>)
     5c4:	47a0      	blx	r4
     5c6:	0003      	movs	r3, r0
     5c8:	613b      	str	r3, [r7, #16]
		ret = platform_read(NULL, LIS2DH12_OUT_Y_H, &buff3, 1);
     5ca:	2308      	movs	r3, #8
     5cc:	18fa      	adds	r2, r7, r3
     5ce:	2301      	movs	r3, #1
     5d0:	212b      	movs	r1, #43	; 0x2b
     5d2:	2000      	movs	r0, #0
     5d4:	4c51      	ldr	r4, [pc, #324]	; (71c <Acc_read_four+0x1ac>)
     5d6:	47a0      	blx	r4
     5d8:	0003      	movs	r3, r0
     5da:	613b      	str	r3, [r7, #16]
		ret = platform_read(NULL, LIS2DH12_OUT_Z_L, &buff4, 1);
     5dc:	1dfa      	adds	r2, r7, #7
     5de:	2301      	movs	r3, #1
     5e0:	212c      	movs	r1, #44	; 0x2c
     5e2:	2000      	movs	r0, #0
     5e4:	4c4d      	ldr	r4, [pc, #308]	; (71c <Acc_read_four+0x1ac>)
     5e6:	47a0      	blx	r4
     5e8:	0003      	movs	r3, r0
     5ea:	613b      	str	r3, [r7, #16]
		ret = platform_read(NULL, LIS2DH12_OUT_Z_H, &buff5, 1);
     5ec:	1dba      	adds	r2, r7, #6
     5ee:	2301      	movs	r3, #1
     5f0:	212d      	movs	r1, #45	; 0x2d
     5f2:	2000      	movs	r0, #0
     5f4:	4c49      	ldr	r4, [pc, #292]	; (71c <Acc_read_four+0x1ac>)
     5f6:	47a0      	blx	r4
     5f8:	0003      	movs	r3, r0
     5fa:	613b      	str	r3, [r7, #16]
		
		data_raw_acceleration[0] = (int16_t)buff1;
     5fc:	230a      	movs	r3, #10
     5fe:	18fb      	adds	r3, r7, r3
     600:	781b      	ldrb	r3, [r3, #0]
     602:	b21a      	sxth	r2, r3
     604:	4b46      	ldr	r3, [pc, #280]	; (720 <Acc_read_four+0x1b0>)
     606:	801a      	strh	r2, [r3, #0]
		data_raw_acceleration[0] = (data_raw_acceleration[0] * 256) + (int16_t)buff0;
     608:	4b45      	ldr	r3, [pc, #276]	; (720 <Acc_read_four+0x1b0>)
     60a:	2200      	movs	r2, #0
     60c:	5e9b      	ldrsh	r3, [r3, r2]
     60e:	b29b      	uxth	r3, r3
     610:	021b      	lsls	r3, r3, #8
     612:	b29a      	uxth	r2, r3
     614:	230b      	movs	r3, #11
     616:	18fb      	adds	r3, r7, r3
     618:	781b      	ldrb	r3, [r3, #0]
     61a:	b29b      	uxth	r3, r3
     61c:	18d3      	adds	r3, r2, r3
     61e:	b29b      	uxth	r3, r3
     620:	b21a      	sxth	r2, r3
     622:	4b3f      	ldr	r3, [pc, #252]	; (720 <Acc_read_four+0x1b0>)
     624:	801a      	strh	r2, [r3, #0]
		data_raw_acceleration[1] = (int16_t)buff3;
     626:	2308      	movs	r3, #8
     628:	18fb      	adds	r3, r7, r3
     62a:	781b      	ldrb	r3, [r3, #0]
     62c:	b21a      	sxth	r2, r3
     62e:	4b3c      	ldr	r3, [pc, #240]	; (720 <Acc_read_four+0x1b0>)
     630:	805a      	strh	r2, [r3, #2]
		data_raw_acceleration[1] = (data_raw_acceleration[1] * 256) + (int16_t)buff2;
     632:	4b3b      	ldr	r3, [pc, #236]	; (720 <Acc_read_four+0x1b0>)
     634:	2202      	movs	r2, #2
     636:	5e9b      	ldrsh	r3, [r3, r2]
     638:	b29b      	uxth	r3, r3
     63a:	021b      	lsls	r3, r3, #8
     63c:	b29a      	uxth	r2, r3
     63e:	2309      	movs	r3, #9
     640:	18fb      	adds	r3, r7, r3
     642:	781b      	ldrb	r3, [r3, #0]
     644:	b29b      	uxth	r3, r3
     646:	18d3      	adds	r3, r2, r3
     648:	b29b      	uxth	r3, r3
     64a:	b21a      	sxth	r2, r3
     64c:	4b34      	ldr	r3, [pc, #208]	; (720 <Acc_read_four+0x1b0>)
     64e:	805a      	strh	r2, [r3, #2]
		data_raw_acceleration[2] = (int16_t)buff5;
     650:	1dbb      	adds	r3, r7, #6
     652:	781b      	ldrb	r3, [r3, #0]
     654:	b21a      	sxth	r2, r3
     656:	4b32      	ldr	r3, [pc, #200]	; (720 <Acc_read_four+0x1b0>)
     658:	809a      	strh	r2, [r3, #4]
		data_raw_acceleration[2] = (data_raw_acceleration[2] * 256) + (int16_t)buff4;
     65a:	4b31      	ldr	r3, [pc, #196]	; (720 <Acc_read_four+0x1b0>)
     65c:	2204      	movs	r2, #4
     65e:	5e9b      	ldrsh	r3, [r3, r2]
     660:	b29b      	uxth	r3, r3
     662:	021b      	lsls	r3, r3, #8
     664:	b29a      	uxth	r2, r3
     666:	1dfb      	adds	r3, r7, #7
     668:	781b      	ldrb	r3, [r3, #0]
     66a:	b29b      	uxth	r3, r3
     66c:	18d3      	adds	r3, r2, r3
     66e:	b29b      	uxth	r3, r3
     670:	b21a      	sxth	r2, r3
     672:	4b2b      	ldr	r3, [pc, #172]	; (720 <Acc_read_four+0x1b0>)
     674:	809a      	strh	r2, [r3, #4]

		acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
     676:	4b2a      	ldr	r3, [pc, #168]	; (720 <Acc_read_four+0x1b0>)
     678:	2200      	movs	r2, #0
     67a:	5e9b      	ldrsh	r3, [r3, r2]
     67c:	0018      	movs	r0, r3
     67e:	4b29      	ldr	r3, [pc, #164]	; (724 <Acc_read_four+0x1b4>)
     680:	4798      	blx	r3
     682:	1c02      	adds	r2, r0, #0
     684:	4b28      	ldr	r3, [pc, #160]	; (728 <Acc_read_four+0x1b8>)
     686:	601a      	str	r2, [r3, #0]
		acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
     688:	4b25      	ldr	r3, [pc, #148]	; (720 <Acc_read_four+0x1b0>)
     68a:	2202      	movs	r2, #2
     68c:	5e9b      	ldrsh	r3, [r3, r2]
     68e:	0018      	movs	r0, r3
     690:	4b24      	ldr	r3, [pc, #144]	; (724 <Acc_read_four+0x1b4>)
     692:	4798      	blx	r3
     694:	1c02      	adds	r2, r0, #0
     696:	4b24      	ldr	r3, [pc, #144]	; (728 <Acc_read_four+0x1b8>)
     698:	605a      	str	r2, [r3, #4]
		acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
     69a:	4b21      	ldr	r3, [pc, #132]	; (720 <Acc_read_four+0x1b0>)
     69c:	2204      	movs	r2, #4
     69e:	5e9b      	ldrsh	r3, [r3, r2]
     6a0:	0018      	movs	r0, r3
     6a2:	4b20      	ldr	r3, [pc, #128]	; (724 <Acc_read_four+0x1b4>)
     6a4:	4798      	blx	r3
     6a6:	1c02      	adds	r2, r0, #0
     6a8:	4b1f      	ldr	r3, [pc, #124]	; (728 <Acc_read_four+0x1b8>)
     6aa:	609a      	str	r2, [r3, #8]

		
		snprintf(bufferPrint, 64, "Acceleration [mg]:%d %d %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
     6ac:	4b1e      	ldr	r3, [pc, #120]	; (728 <Acc_read_four+0x1b8>)
     6ae:	681a      	ldr	r2, [r3, #0]
     6b0:	4b1e      	ldr	r3, [pc, #120]	; (72c <Acc_read_four+0x1bc>)
     6b2:	1c10      	adds	r0, r2, #0
     6b4:	4798      	blx	r3
     6b6:	0005      	movs	r5, r0
     6b8:	4b1b      	ldr	r3, [pc, #108]	; (728 <Acc_read_four+0x1b8>)
     6ba:	685a      	ldr	r2, [r3, #4]
     6bc:	4b1b      	ldr	r3, [pc, #108]	; (72c <Acc_read_four+0x1bc>)
     6be:	1c10      	adds	r0, r2, #0
     6c0:	4798      	blx	r3
     6c2:	0004      	movs	r4, r0
     6c4:	4b18      	ldr	r3, [pc, #96]	; (728 <Acc_read_four+0x1b8>)
     6c6:	689a      	ldr	r2, [r3, #8]
     6c8:	4b18      	ldr	r3, [pc, #96]	; (72c <Acc_read_four+0x1bc>)
     6ca:	1c10      	adds	r0, r2, #0
     6cc:	4798      	blx	r3
     6ce:	0003      	movs	r3, r0
     6d0:	4a17      	ldr	r2, [pc, #92]	; (730 <Acc_read_four+0x1c0>)
     6d2:	4818      	ldr	r0, [pc, #96]	; (734 <Acc_read_four+0x1c4>)
     6d4:	9301      	str	r3, [sp, #4]
     6d6:	9400      	str	r4, [sp, #0]
     6d8:	002b      	movs	r3, r5
     6da:	2140      	movs	r1, #64	; 0x40
     6dc:	4c16      	ldr	r4, [pc, #88]	; (738 <Acc_read_four+0x1c8>)
     6de:	47a0      	blx	r4
		SerialConsoleWriteString(bufferPrint);
     6e0:	4b14      	ldr	r3, [pc, #80]	; (734 <Acc_read_four+0x1c4>)
     6e2:	0018      	movs	r0, r3
     6e4:	4b15      	ldr	r3, [pc, #84]	; (73c <Acc_read_four+0x1cc>)
     6e6:	4798      	blx	r3
		new_data = (int)acceleration_mg[0];
     6e8:	4b0f      	ldr	r3, [pc, #60]	; (728 <Acc_read_four+0x1b8>)
     6ea:	681a      	ldr	r2, [r3, #0]
     6ec:	4b0f      	ldr	r3, [pc, #60]	; (72c <Acc_read_four+0x1bc>)
     6ee:	1c10      	adds	r0, r2, #0
     6f0:	4798      	blx	r3
     6f2:	0002      	movs	r2, r0
     6f4:	4b12      	ldr	r3, [pc, #72]	; (740 <Acc_read_four+0x1d0>)
     6f6:	601a      	str	r2, [r3, #0]
		is_deviation_large();
     6f8:	4b12      	ldr	r3, [pc, #72]	; (744 <Acc_read_four+0x1d4>)
     6fa:	4798      	blx	r3
		is_deviation_large();
     6fc:	4b11      	ldr	r3, [pc, #68]	; (744 <Acc_read_four+0x1d4>)
     6fe:	4798      	blx	r3
		is_deviation_large();
     700:	4b10      	ldr	r3, [pc, #64]	; (744 <Acc_read_four+0x1d4>)
     702:	4798      	blx	r3
		is_deviation_large();
     704:	4b0f      	ldr	r3, [pc, #60]	; (744 <Acc_read_four+0x1d4>)
     706:	4798      	blx	r3
	}
	return 0;
     708:	2300      	movs	r3, #0
}
     70a:	0018      	movs	r0, r3
     70c:	46bd      	mov	sp, r7
     70e:	b006      	add	sp, #24
     710:	bdb0      	pop	{r4, r5, r7, pc}
     712:	46c0      	nop			; (mov r8, r8)
     714:	20000000 	.word	0x20000000
     718:	00000a25 	.word	0x00000a25
     71c:	00000115 	.word	0x00000115
     720:	20000330 	.word	0x20000330
     724:	000007d5 	.word	0x000007d5
     728:	20000338 	.word	0x20000338
     72c:	000212dd 	.word	0x000212dd
     730:	000241b4 	.word	0x000241b4
     734:	200047d0 	.word	0x200047d0
     738:	00023015 	.word	0x00023015
     73c:	0000b875 	.word	0x0000b875
     740:	200047cc 	.word	0x200047cc
     744:	000002a9 	.word	0x000002a9

00000748 <lis2dh12_read_reg>:
  *
  */
int32_t __weak lis2dh12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
     748:	b5b0      	push	{r4, r5, r7, lr}
     74a:	b086      	sub	sp, #24
     74c:	af00      	add	r7, sp, #0
     74e:	60f8      	str	r0, [r7, #12]
     750:	0008      	movs	r0, r1
     752:	607a      	str	r2, [r7, #4]
     754:	0019      	movs	r1, r3
     756:	230b      	movs	r3, #11
     758:	18fb      	adds	r3, r7, r3
     75a:	1c02      	adds	r2, r0, #0
     75c:	701a      	strb	r2, [r3, #0]
     75e:	2308      	movs	r3, #8
     760:	18fb      	adds	r3, r7, r3
     762:	1c0a      	adds	r2, r1, #0
     764:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
     766:	68fb      	ldr	r3, [r7, #12]
     768:	685c      	ldr	r4, [r3, #4]
     76a:	68fb      	ldr	r3, [r7, #12]
     76c:	68d8      	ldr	r0, [r3, #12]
     76e:	2308      	movs	r3, #8
     770:	18fb      	adds	r3, r7, r3
     772:	881d      	ldrh	r5, [r3, #0]
     774:	687a      	ldr	r2, [r7, #4]
     776:	230b      	movs	r3, #11
     778:	18fb      	adds	r3, r7, r3
     77a:	7819      	ldrb	r1, [r3, #0]
     77c:	002b      	movs	r3, r5
     77e:	47a0      	blx	r4
     780:	0003      	movs	r3, r0
     782:	617b      	str	r3, [r7, #20]

  return ret;
     784:	697b      	ldr	r3, [r7, #20]
}
     786:	0018      	movs	r0, r3
     788:	46bd      	mov	sp, r7
     78a:	b006      	add	sp, #24
     78c:	bdb0      	pop	{r4, r5, r7, pc}

0000078e <lis2dh12_write_reg>:
  *
  */
int32_t __weak lis2dh12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
     78e:	b5b0      	push	{r4, r5, r7, lr}
     790:	b086      	sub	sp, #24
     792:	af00      	add	r7, sp, #0
     794:	60f8      	str	r0, [r7, #12]
     796:	0008      	movs	r0, r1
     798:	607a      	str	r2, [r7, #4]
     79a:	0019      	movs	r1, r3
     79c:	230b      	movs	r3, #11
     79e:	18fb      	adds	r3, r7, r3
     7a0:	1c02      	adds	r2, r0, #0
     7a2:	701a      	strb	r2, [r3, #0]
     7a4:	2308      	movs	r3, #8
     7a6:	18fb      	adds	r3, r7, r3
     7a8:	1c0a      	adds	r2, r1, #0
     7aa:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
     7ac:	68fb      	ldr	r3, [r7, #12]
     7ae:	681c      	ldr	r4, [r3, #0]
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	68d8      	ldr	r0, [r3, #12]
     7b4:	2308      	movs	r3, #8
     7b6:	18fb      	adds	r3, r7, r3
     7b8:	881d      	ldrh	r5, [r3, #0]
     7ba:	687a      	ldr	r2, [r7, #4]
     7bc:	230b      	movs	r3, #11
     7be:	18fb      	adds	r3, r7, r3
     7c0:	7819      	ldrb	r1, [r3, #0]
     7c2:	002b      	movs	r3, r5
     7c4:	47a0      	blx	r4
     7c6:	0003      	movs	r3, r0
     7c8:	617b      	str	r3, [r7, #20]

  return ret;
     7ca:	697b      	ldr	r3, [r7, #20]
}
     7cc:	0018      	movs	r0, r3
     7ce:	46bd      	mov	sp, r7
     7d0:	b006      	add	sp, #24
     7d2:	bdb0      	pop	{r4, r5, r7, pc}

000007d4 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
     7d4:	b580      	push	{r7, lr}
     7d6:	b082      	sub	sp, #8
     7d8:	af00      	add	r7, sp, #0
     7da:	0002      	movs	r2, r0
     7dc:	1dbb      	adds	r3, r7, #6
     7de:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
     7e0:	1dbb      	adds	r3, r7, #6
     7e2:	2200      	movs	r2, #0
     7e4:	5e9a      	ldrsh	r2, [r3, r2]
     7e6:	4b07      	ldr	r3, [pc, #28]	; (804 <lis2dh12_from_fs2_hr_to_mg+0x30>)
     7e8:	0010      	movs	r0, r2
     7ea:	4798      	blx	r3
     7ec:	1c02      	adds	r2, r0, #0
     7ee:	4b06      	ldr	r3, [pc, #24]	; (808 <lis2dh12_from_fs2_hr_to_mg+0x34>)
     7f0:	2183      	movs	r1, #131	; 0x83
     7f2:	05c9      	lsls	r1, r1, #23
     7f4:	1c10      	adds	r0, r2, #0
     7f6:	4798      	blx	r3
     7f8:	1c03      	adds	r3, r0, #0
}
     7fa:	1c18      	adds	r0, r3, #0
     7fc:	46bd      	mov	sp, r7
     7fe:	b002      	add	sp, #8
     800:	bd80      	pop	{r7, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	0002131d 	.word	0x0002131d
     808:	00020ad5 	.word	0x00020ad5

0000080c <lis2dh12_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(stmdev_ctx_t *ctx,
                                    lis2dh12_op_md_t val)
{
     80c:	b590      	push	{r4, r7, lr}
     80e:	b087      	sub	sp, #28
     810:	af00      	add	r7, sp, #0
     812:	6078      	str	r0, [r7, #4]
     814:	000a      	movs	r2, r1
     816:	1cfb      	adds	r3, r7, #3
     818:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
     81a:	2310      	movs	r3, #16
     81c:	18fa      	adds	r2, r7, r3
     81e:	6878      	ldr	r0, [r7, #4]
     820:	2301      	movs	r3, #1
     822:	2120      	movs	r1, #32
     824:	4c2e      	ldr	r4, [pc, #184]	; (8e0 <lis2dh12_operating_mode_set+0xd4>)
     826:	47a0      	blx	r4
     828:	0003      	movs	r3, r0
     82a:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
     82c:	697b      	ldr	r3, [r7, #20]
     82e:	2b00      	cmp	r3, #0
     830:	d108      	bne.n	844 <lis2dh12_operating_mode_set+0x38>
  {
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
     832:	230c      	movs	r3, #12
     834:	18fa      	adds	r2, r7, r3
     836:	6878      	ldr	r0, [r7, #4]
     838:	2301      	movs	r3, #1
     83a:	2123      	movs	r1, #35	; 0x23
     83c:	4c28      	ldr	r4, [pc, #160]	; (8e0 <lis2dh12_operating_mode_set+0xd4>)
     83e:	47a0      	blx	r4
     840:	0003      	movs	r3, r0
     842:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
     844:	697b      	ldr	r3, [r7, #20]
     846:	2b00      	cmp	r3, #0
     848:	d138      	bne.n	8bc <lis2dh12_operating_mode_set+0xb0>
  {
    if (val == LIS2DH12_HR_12bit)
     84a:	1cfb      	adds	r3, r7, #3
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	2b00      	cmp	r3, #0
     850:	d10b      	bne.n	86a <lis2dh12_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
     852:	2310      	movs	r3, #16
     854:	18fb      	adds	r3, r7, r3
     856:	781a      	ldrb	r2, [r3, #0]
     858:	2108      	movs	r1, #8
     85a:	438a      	bics	r2, r1
     85c:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
     85e:	230c      	movs	r3, #12
     860:	18fb      	adds	r3, r7, r3
     862:	781a      	ldrb	r2, [r3, #0]
     864:	2108      	movs	r1, #8
     866:	430a      	orrs	r2, r1
     868:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS2DH12_NM_10bit)
     86a:	1cfb      	adds	r3, r7, #3
     86c:	781b      	ldrb	r3, [r3, #0]
     86e:	2b01      	cmp	r3, #1
     870:	d10b      	bne.n	88a <lis2dh12_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
     872:	2310      	movs	r3, #16
     874:	18fb      	adds	r3, r7, r3
     876:	781a      	ldrb	r2, [r3, #0]
     878:	2108      	movs	r1, #8
     87a:	438a      	bics	r2, r1
     87c:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
     87e:	230c      	movs	r3, #12
     880:	18fb      	adds	r3, r7, r3
     882:	781a      	ldrb	r2, [r3, #0]
     884:	2108      	movs	r1, #8
     886:	438a      	bics	r2, r1
     888:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS2DH12_LP_8bit)
     88a:	1cfb      	adds	r3, r7, #3
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	2b02      	cmp	r3, #2
     890:	d10b      	bne.n	8aa <lis2dh12_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
     892:	2310      	movs	r3, #16
     894:	18fb      	adds	r3, r7, r3
     896:	781a      	ldrb	r2, [r3, #0]
     898:	2108      	movs	r1, #8
     89a:	430a      	orrs	r2, r1
     89c:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
     89e:	230c      	movs	r3, #12
     8a0:	18fb      	adds	r3, r7, r3
     8a2:	781a      	ldrb	r2, [r3, #0]
     8a4:	2108      	movs	r1, #8
     8a6:	438a      	bics	r2, r1
     8a8:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
     8aa:	2310      	movs	r3, #16
     8ac:	18fa      	adds	r2, r7, r3
     8ae:	6878      	ldr	r0, [r7, #4]
     8b0:	2301      	movs	r3, #1
     8b2:	2120      	movs	r1, #32
     8b4:	4c0b      	ldr	r4, [pc, #44]	; (8e4 <lis2dh12_operating_mode_set+0xd8>)
     8b6:	47a0      	blx	r4
     8b8:	0003      	movs	r3, r0
     8ba:	617b      	str	r3, [r7, #20]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  if (ret == 0)
     8bc:	697b      	ldr	r3, [r7, #20]
     8be:	2b00      	cmp	r3, #0
     8c0:	d108      	bne.n	8d4 <lis2dh12_operating_mode_set+0xc8>
  {
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
     8c2:	230c      	movs	r3, #12
     8c4:	18fa      	adds	r2, r7, r3
     8c6:	6878      	ldr	r0, [r7, #4]
     8c8:	2301      	movs	r3, #1
     8ca:	2123      	movs	r1, #35	; 0x23
     8cc:	4c05      	ldr	r4, [pc, #20]	; (8e4 <lis2dh12_operating_mode_set+0xd8>)
     8ce:	47a0      	blx	r4
     8d0:	0003      	movs	r3, r0
     8d2:	617b      	str	r3, [r7, #20]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
     8d4:	697b      	ldr	r3, [r7, #20]
}
     8d6:	0018      	movs	r0, r3
     8d8:	46bd      	mov	sp, r7
     8da:	b007      	add	sp, #28
     8dc:	bd90      	pop	{r4, r7, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	00000749 	.word	0x00000749
     8e4:	0000078f 	.word	0x0000078f

000008e8 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(stmdev_ctx_t *ctx, lis2dh12_odr_t val)
{
     8e8:	b590      	push	{r4, r7, lr}
     8ea:	b085      	sub	sp, #20
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
     8f0:	000a      	movs	r2, r1
     8f2:	1cfb      	adds	r3, r7, #3
     8f4:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
     8f6:	2308      	movs	r3, #8
     8f8:	18fa      	adds	r2, r7, r3
     8fa:	6878      	ldr	r0, [r7, #4]
     8fc:	2301      	movs	r3, #1
     8fe:	2120      	movs	r1, #32
     900:	4c11      	ldr	r4, [pc, #68]	; (948 <lis2dh12_data_rate_set+0x60>)
     902:	47a0      	blx	r4
     904:	0003      	movs	r3, r0
     906:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
     908:	68fb      	ldr	r3, [r7, #12]
     90a:	2b00      	cmp	r3, #0
     90c:	d117      	bne.n	93e <lis2dh12_data_rate_set+0x56>
  {
    ctrl_reg1.odr = (uint8_t)val;
     90e:	1cfb      	adds	r3, r7, #3
     910:	781b      	ldrb	r3, [r3, #0]
     912:	220f      	movs	r2, #15
     914:	4013      	ands	r3, r2
     916:	b2da      	uxtb	r2, r3
     918:	2308      	movs	r3, #8
     91a:	18fb      	adds	r3, r7, r3
     91c:	0110      	lsls	r0, r2, #4
     91e:	781a      	ldrb	r2, [r3, #0]
     920:	210f      	movs	r1, #15
     922:	400a      	ands	r2, r1
     924:	1c11      	adds	r1, r2, #0
     926:	1c02      	adds	r2, r0, #0
     928:	430a      	orrs	r2, r1
     92a:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
     92c:	2308      	movs	r3, #8
     92e:	18fa      	adds	r2, r7, r3
     930:	6878      	ldr	r0, [r7, #4]
     932:	2301      	movs	r3, #1
     934:	2120      	movs	r1, #32
     936:	4c05      	ldr	r4, [pc, #20]	; (94c <lis2dh12_data_rate_set+0x64>)
     938:	47a0      	blx	r4
     93a:	0003      	movs	r3, r0
     93c:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
     93e:	68fb      	ldr	r3, [r7, #12]
}
     940:	0018      	movs	r0, r3
     942:	46bd      	mov	sp, r7
     944:	b005      	add	sp, #20
     946:	bd90      	pop	{r4, r7, pc}
     948:	00000749 	.word	0x00000749
     94c:	0000078f 	.word	0x0000078f

00000950 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(stmdev_ctx_t *ctx, lis2dh12_fs_t val)
{
     950:	b590      	push	{r4, r7, lr}
     952:	b085      	sub	sp, #20
     954:	af00      	add	r7, sp, #0
     956:	6078      	str	r0, [r7, #4]
     958:	000a      	movs	r2, r1
     95a:	1cfb      	adds	r3, r7, #3
     95c:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
     95e:	2308      	movs	r3, #8
     960:	18fa      	adds	r2, r7, r3
     962:	6878      	ldr	r0, [r7, #4]
     964:	2301      	movs	r3, #1
     966:	2123      	movs	r1, #35	; 0x23
     968:	4c12      	ldr	r4, [pc, #72]	; (9b4 <lis2dh12_full_scale_set+0x64>)
     96a:	47a0      	blx	r4
     96c:	0003      	movs	r3, r0
     96e:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
     970:	68fb      	ldr	r3, [r7, #12]
     972:	2b00      	cmp	r3, #0
     974:	d119      	bne.n	9aa <lis2dh12_full_scale_set+0x5a>
  {
    ctrl_reg4.fs = (uint8_t)val;
     976:	1cfb      	adds	r3, r7, #3
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	2203      	movs	r2, #3
     97c:	4013      	ands	r3, r2
     97e:	b2da      	uxtb	r2, r3
     980:	2308      	movs	r3, #8
     982:	18fb      	adds	r3, r7, r3
     984:	2103      	movs	r1, #3
     986:	400a      	ands	r2, r1
     988:	0110      	lsls	r0, r2, #4
     98a:	781a      	ldrb	r2, [r3, #0]
     98c:	2130      	movs	r1, #48	; 0x30
     98e:	438a      	bics	r2, r1
     990:	1c11      	adds	r1, r2, #0
     992:	1c02      	adds	r2, r0, #0
     994:	430a      	orrs	r2, r1
     996:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
     998:	2308      	movs	r3, #8
     99a:	18fa      	adds	r2, r7, r3
     99c:	6878      	ldr	r0, [r7, #4]
     99e:	2301      	movs	r3, #1
     9a0:	2123      	movs	r1, #35	; 0x23
     9a2:	4c05      	ldr	r4, [pc, #20]	; (9b8 <lis2dh12_full_scale_set+0x68>)
     9a4:	47a0      	blx	r4
     9a6:	0003      	movs	r3, r0
     9a8:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
     9aa:	68fb      	ldr	r3, [r7, #12]
}
     9ac:	0018      	movs	r0, r3
     9ae:	46bd      	mov	sp, r7
     9b0:	b005      	add	sp, #20
     9b2:	bd90      	pop	{r4, r7, pc}
     9b4:	00000749 	.word	0x00000749
     9b8:	0000078f 	.word	0x0000078f

000009bc <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
     9bc:	b590      	push	{r4, r7, lr}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
     9c4:	000a      	movs	r2, r1
     9c6:	1cfb      	adds	r3, r7, #3
     9c8:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
     9ca:	2308      	movs	r3, #8
     9cc:	18fa      	adds	r2, r7, r3
     9ce:	6878      	ldr	r0, [r7, #4]
     9d0:	2301      	movs	r3, #1
     9d2:	2123      	movs	r1, #35	; 0x23
     9d4:	4c11      	ldr	r4, [pc, #68]	; (a1c <lis2dh12_block_data_update_set+0x60>)
     9d6:	47a0      	blx	r4
     9d8:	0003      	movs	r3, r0
     9da:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
     9dc:	68fb      	ldr	r3, [r7, #12]
     9de:	2b00      	cmp	r3, #0
     9e0:	d117      	bne.n	a12 <lis2dh12_block_data_update_set+0x56>
  {
    ctrl_reg4.bdu = val;
     9e2:	1cfb      	adds	r3, r7, #3
     9e4:	781b      	ldrb	r3, [r3, #0]
     9e6:	2201      	movs	r2, #1
     9e8:	4013      	ands	r3, r2
     9ea:	b2da      	uxtb	r2, r3
     9ec:	2308      	movs	r3, #8
     9ee:	18fb      	adds	r3, r7, r3
     9f0:	01d0      	lsls	r0, r2, #7
     9f2:	781a      	ldrb	r2, [r3, #0]
     9f4:	217f      	movs	r1, #127	; 0x7f
     9f6:	400a      	ands	r2, r1
     9f8:	1c11      	adds	r1, r2, #0
     9fa:	1c02      	adds	r2, r0, #0
     9fc:	430a      	orrs	r2, r1
     9fe:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
     a00:	2308      	movs	r3, #8
     a02:	18fa      	adds	r2, r7, r3
     a04:	6878      	ldr	r0, [r7, #4]
     a06:	2301      	movs	r3, #1
     a08:	2123      	movs	r1, #35	; 0x23
     a0a:	4c05      	ldr	r4, [pc, #20]	; (a20 <lis2dh12_block_data_update_set+0x64>)
     a0c:	47a0      	blx	r4
     a0e:	0003      	movs	r3, r0
     a10:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
     a12:	68fb      	ldr	r3, [r7, #12]
}
     a14:	0018      	movs	r0, r3
     a16:	46bd      	mov	sp, r7
     a18:	b005      	add	sp, #20
     a1a:	bd90      	pop	{r4, r7, pc}
     a1c:	00000749 	.word	0x00000749
     a20:	0000078f 	.word	0x0000078f

00000a24 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
     a24:	b590      	push	{r4, r7, lr}
     a26:	b085      	sub	sp, #20
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
     a2c:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG,
     a2e:	2308      	movs	r3, #8
     a30:	18fa      	adds	r2, r7, r3
     a32:	6878      	ldr	r0, [r7, #4]
     a34:	2301      	movs	r3, #1
     a36:	2127      	movs	r1, #39	; 0x27
     a38:	4c08      	ldr	r4, [pc, #32]	; (a5c <lis2dh12_xl_data_ready_get+0x38>)
     a3a:	47a0      	blx	r4
     a3c:	0003      	movs	r3, r0
     a3e:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&status_reg, 1);
  *val = status_reg.zyxda;
     a40:	2308      	movs	r3, #8
     a42:	18fb      	adds	r3, r7, r3
     a44:	781b      	ldrb	r3, [r3, #0]
     a46:	071b      	lsls	r3, r3, #28
     a48:	0fdb      	lsrs	r3, r3, #31
     a4a:	b2db      	uxtb	r3, r3
     a4c:	001a      	movs	r2, r3
     a4e:	683b      	ldr	r3, [r7, #0]
     a50:	701a      	strb	r2, [r3, #0]

  return ret;
     a52:	68fb      	ldr	r3, [r7, #12]
}
     a54:	0018      	movs	r0, r3
     a56:	46bd      	mov	sp, r7
     a58:	b005      	add	sp, #20
     a5a:	bd90      	pop	{r4, r7, pc}
     a5c:	00000749 	.word	0x00000749

00000a60 <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
     a60:	b590      	push	{r4, r7, lr}
     a62:	b085      	sub	sp, #20
     a64:	af00      	add	r7, sp, #0
     a66:	6078      	str	r0, [r7, #4]
     a68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
     a6a:	683a      	ldr	r2, [r7, #0]
     a6c:	6878      	ldr	r0, [r7, #4]
     a6e:	2301      	movs	r3, #1
     a70:	210f      	movs	r1, #15
     a72:	4c04      	ldr	r4, [pc, #16]	; (a84 <lis2dh12_device_id_get+0x24>)
     a74:	47a0      	blx	r4
     a76:	0003      	movs	r3, r0
     a78:	60fb      	str	r3, [r7, #12]

  return ret;
     a7a:	68fb      	ldr	r3, [r7, #12]
}
     a7c:	0018      	movs	r0, r3
     a7e:	46bd      	mov	sp, r7
     a80:	b005      	add	sp, #20
     a82:	bd90      	pop	{r4, r7, pc}
     a84:	00000749 	.word	0x00000749

00000a88 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
     a88:	b580      	push	{r7, lr}
     a8a:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
     a8c:	46c0      	nop			; (mov r8, r8)
     a8e:	46bd      	mov	sp, r7
     a90:	bd80      	pop	{r7, pc}

00000a92 <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
     a92:	b580      	push	{r7, lr}
     a94:	af00      	add	r7, sp, #0

}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	46bd      	mov	sp, r7
     a9a:	bd80      	pop	{r7, pc}

00000a9c <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
     a9c:	b580      	push	{r7, lr}
     a9e:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
     aa0:	4b25      	ldr	r3, [pc, #148]	; (b38 <ssd1306_init+0x9c>)
     aa2:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
     aa4:	4b25      	ldr	r3, [pc, #148]	; (b3c <ssd1306_init+0xa0>)
     aa6:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
     aa8:	20ae      	movs	r0, #174	; 0xae
     aaa:	4b25      	ldr	r3, [pc, #148]	; (b40 <ssd1306_init+0xa4>)
     aac:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
     aae:	20d5      	movs	r0, #213	; 0xd5
     ab0:	4b23      	ldr	r3, [pc, #140]	; (b40 <ssd1306_init+0xa4>)
     ab2:	4798      	blx	r3
	ssd1306_write_command(0x80);
     ab4:	2080      	movs	r0, #128	; 0x80
     ab6:	4b22      	ldr	r3, [pc, #136]	; (b40 <ssd1306_init+0xa4>)
     ab8:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
     aba:	20a8      	movs	r0, #168	; 0xa8
     abc:	4b20      	ldr	r3, [pc, #128]	; (b40 <ssd1306_init+0xa4>)
     abe:	4798      	blx	r3
	ssd1306_write_command(0x3F); //2F
     ac0:	203f      	movs	r0, #63	; 0x3f
     ac2:	4b1f      	ldr	r3, [pc, #124]	; (b40 <ssd1306_init+0xa4>)
     ac4:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
     ac6:	20d3      	movs	r0, #211	; 0xd3
     ac8:	4b1d      	ldr	r3, [pc, #116]	; (b40 <ssd1306_init+0xa4>)
     aca:	4798      	blx	r3
	ssd1306_write_command(0x00);
     acc:	2000      	movs	r0, #0
     ace:	4b1c      	ldr	r3, [pc, #112]	; (b40 <ssd1306_init+0xa4>)
     ad0:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
     ad2:	2040      	movs	r0, #64	; 0x40
     ad4:	4b1a      	ldr	r3, [pc, #104]	; (b40 <ssd1306_init+0xa4>)
     ad6:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
     ad8:	208d      	movs	r0, #141	; 0x8d
     ada:	4b19      	ldr	r3, [pc, #100]	; (b40 <ssd1306_init+0xa4>)
     adc:	4798      	blx	r3
	ssd1306_write_command(0x14);
     ade:	2014      	movs	r0, #20
     ae0:	4b17      	ldr	r3, [pc, #92]	; (b40 <ssd1306_init+0xa4>)
     ae2:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
     ae4:	20a6      	movs	r0, #166	; 0xa6
     ae6:	4b16      	ldr	r3, [pc, #88]	; (b40 <ssd1306_init+0xa4>)
     ae8:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
     aea:	20a4      	movs	r0, #164	; 0xa4
     aec:	4b14      	ldr	r3, [pc, #80]	; (b40 <ssd1306_init+0xa4>)
     aee:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
     af0:	20a1      	movs	r0, #161	; 0xa1
     af2:	4b13      	ldr	r3, [pc, #76]	; (b40 <ssd1306_init+0xa4>)
     af4:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
     af6:	20c8      	movs	r0, #200	; 0xc8
     af8:	4b11      	ldr	r3, [pc, #68]	; (b40 <ssd1306_init+0xa4>)
     afa:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
     afc:	20da      	movs	r0, #218	; 0xda
     afe:	4b10      	ldr	r3, [pc, #64]	; (b40 <ssd1306_init+0xa4>)
     b00:	4798      	blx	r3
	ssd1306_write_command(0x12);
     b02:	2012      	movs	r0, #18
     b04:	4b0e      	ldr	r3, [pc, #56]	; (b40 <ssd1306_init+0xa4>)
     b06:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
     b08:	2081      	movs	r0, #129	; 0x81
     b0a:	4b0d      	ldr	r3, [pc, #52]	; (b40 <ssd1306_init+0xa4>)
     b0c:	4798      	blx	r3
	ssd1306_write_command(0x8F);
     b0e:	208f      	movs	r0, #143	; 0x8f
     b10:	4b0b      	ldr	r3, [pc, #44]	; (b40 <ssd1306_init+0xa4>)
     b12:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
     b14:	20d9      	movs	r0, #217	; 0xd9
     b16:	4b0a      	ldr	r3, [pc, #40]	; (b40 <ssd1306_init+0xa4>)
     b18:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
     b1a:	20f1      	movs	r0, #241	; 0xf1
     b1c:	4b08      	ldr	r3, [pc, #32]	; (b40 <ssd1306_init+0xa4>)
     b1e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
     b20:	20db      	movs	r0, #219	; 0xdb
     b22:	4b07      	ldr	r3, [pc, #28]	; (b40 <ssd1306_init+0xa4>)
     b24:	4798      	blx	r3
	ssd1306_write_command(0x40);
     b26:	2040      	movs	r0, #64	; 0x40
     b28:	4b05      	ldr	r3, [pc, #20]	; (b40 <ssd1306_init+0xa4>)
     b2a:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     b2c:	20af      	movs	r0, #175	; 0xaf
     b2e:	4b04      	ldr	r3, [pc, #16]	; (b40 <ssd1306_init+0xa4>)
     b30:	4798      	blx	r3

}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	46bd      	mov	sp, r7
     b36:	bd80      	pop	{r7, pc}
     b38:	00000a93 	.word	0x00000a93
     b3c:	00000a89 	.word	0x00000a89
     b40:	00000b45 	.word	0x00000b45

00000b44 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
     b44:	b580      	push	{r7, lr}
     b46:	b084      	sub	sp, #16
     b48:	af00      	add	r7, sp, #0
     b4a:	0002      	movs	r2, r0
     b4c:	1dfb      	adds	r3, r7, #7
     b4e:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
     b50:	230c      	movs	r3, #12
     b52:	18fb      	adds	r3, r7, r3
     b54:	2200      	movs	r2, #0
     b56:	701a      	strb	r2, [r3, #0]
	data[1] = command;
     b58:	230c      	movs	r3, #12
     b5a:	18fb      	adds	r3, r7, r3
     b5c:	1dfa      	adds	r2, r7, #7
     b5e:	7812      	ldrb	r2, [r2, #0]
     b60:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
     b62:	4b0c      	ldr	r3, [pc, #48]	; (b94 <ssd1306_write_command+0x50>)
     b64:	223c      	movs	r2, #60	; 0x3c
     b66:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
     b68:	4b0a      	ldr	r3, [pc, #40]	; (b94 <ssd1306_write_command+0x50>)
     b6a:	220c      	movs	r2, #12
     b6c:	18ba      	adds	r2, r7, r2
     b6e:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
     b70:	4b08      	ldr	r3, [pc, #32]	; (b94 <ssd1306_write_command+0x50>)
     b72:	2202      	movs	r2, #2
     b74:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
     b76:	4b07      	ldr	r3, [pc, #28]	; (b94 <ssd1306_write_command+0x50>)
     b78:	2200      	movs	r2, #0
     b7a:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
     b7c:	4b05      	ldr	r3, [pc, #20]	; (b94 <ssd1306_write_command+0x50>)
     b7e:	2200      	movs	r2, #0
     b80:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
     b82:	4b04      	ldr	r3, [pc, #16]	; (b94 <ssd1306_write_command+0x50>)
     b84:	2164      	movs	r1, #100	; 0x64
     b86:	0018      	movs	r0, r3
     b88:	4b03      	ldr	r3, [pc, #12]	; (b98 <ssd1306_write_command+0x54>)
     b8a:	4798      	blx	r3
}
     b8c:	46c0      	nop			; (mov r8, r8)
     b8e:	46bd      	mov	sp, r7
     b90:	b004      	add	sp, #16
     b92:	bd80      	pop	{r7, pc}
     b94:	2000484c 	.word	0x2000484c
     b98:	00002d55 	.word	0x00002d55

00000b9c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     b9c:	b580      	push	{r7, lr}
     b9e:	b084      	sub	sp, #16
     ba0:	af00      	add	r7, sp, #0
     ba2:	0002      	movs	r2, r0
     ba4:	1dfb      	adds	r3, r7, #7
     ba6:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
     ba8:	230c      	movs	r3, #12
     baa:	18fb      	adds	r3, r7, r3
     bac:	2240      	movs	r2, #64	; 0x40
     bae:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
     bb0:	230c      	movs	r3, #12
     bb2:	18fb      	adds	r3, r7, r3
     bb4:	1dfa      	adds	r2, r7, #7
     bb6:	7812      	ldrb	r2, [r2, #0]
     bb8:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
     bba:	4b0c      	ldr	r3, [pc, #48]	; (bec <ssd1306_write_data+0x50>)
     bbc:	223c      	movs	r2, #60	; 0x3c
     bbe:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
     bc0:	4b0a      	ldr	r3, [pc, #40]	; (bec <ssd1306_write_data+0x50>)
     bc2:	220c      	movs	r2, #12
     bc4:	18ba      	adds	r2, r7, r2
     bc6:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
     bc8:	4b08      	ldr	r3, [pc, #32]	; (bec <ssd1306_write_data+0x50>)
     bca:	2202      	movs	r2, #2
     bcc:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
     bce:	4b07      	ldr	r3, [pc, #28]	; (bec <ssd1306_write_data+0x50>)
     bd0:	2200      	movs	r2, #0
     bd2:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
     bd4:	4b05      	ldr	r3, [pc, #20]	; (bec <ssd1306_write_data+0x50>)
     bd6:	2200      	movs	r2, #0
     bd8:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
     bda:	4b04      	ldr	r3, [pc, #16]	; (bec <ssd1306_write_data+0x50>)
     bdc:	2164      	movs	r1, #100	; 0x64
     bde:	0018      	movs	r0, r3
     be0:	4b03      	ldr	r3, [pc, #12]	; (bf0 <ssd1306_write_data+0x54>)
     be2:	4798      	blx	r3
}
     be4:	46c0      	nop			; (mov r8, r8)
     be6:	46bd      	mov	sp, r7
     be8:	b004      	add	sp, #16
     bea:	bd80      	pop	{r7, pc}
     bec:	2000484c 	.word	0x2000484c
     bf0:	00002d55 	.word	0x00002d55

00000bf4 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
     bf4:	b580      	push	{r7, lr}
     bf6:	b082      	sub	sp, #8
     bf8:	af00      	add	r7, sp, #0
     bfa:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
     bfc:	4b03      	ldr	r3, [pc, #12]	; (c0c <gfx_mono_set_framebuffer+0x18>)
     bfe:	687a      	ldr	r2, [r7, #4]
     c00:	601a      	str	r2, [r3, #0]
}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	46bd      	mov	sp, r7
     c06:	b002      	add	sp, #8
     c08:	bd80      	pop	{r7, pc}
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	20000344 	.word	0x20000344

00000c10 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     c10:	b590      	push	{r4, r7, lr}
     c12:	b083      	sub	sp, #12
     c14:	af00      	add	r7, sp, #0
     c16:	0004      	movs	r4, r0
     c18:	0008      	movs	r0, r1
     c1a:	0011      	movs	r1, r2
     c1c:	1dfb      	adds	r3, r7, #7
     c1e:	1c22      	adds	r2, r4, #0
     c20:	701a      	strb	r2, [r3, #0]
     c22:	1dbb      	adds	r3, r7, #6
     c24:	1c02      	adds	r2, r0, #0
     c26:	701a      	strb	r2, [r3, #0]
     c28:	1d7b      	adds	r3, r7, #5
     c2a:	1c0a      	adds	r2, r1, #0
     c2c:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     c2e:	4b08      	ldr	r3, [pc, #32]	; (c50 <gfx_mono_framebuffer_put_byte+0x40>)
     c30:	681a      	ldr	r2, [r3, #0]
     c32:	1dfb      	adds	r3, r7, #7
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	01db      	lsls	r3, r3, #7
     c38:	0019      	movs	r1, r3
     c3a:	1dbb      	adds	r3, r7, #6
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	18cb      	adds	r3, r1, r3
     c40:	18d3      	adds	r3, r2, r3
     c42:	1d7a      	adds	r2, r7, #5
     c44:	7812      	ldrb	r2, [r2, #0]
     c46:	701a      	strb	r2, [r3, #0]
}
     c48:	46c0      	nop			; (mov r8, r8)
     c4a:	46bd      	mov	sp, r7
     c4c:	b003      	add	sp, #12
     c4e:	bd90      	pop	{r4, r7, pc}
     c50:	20000344 	.word	0x20000344

00000c54 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     c54:	b580      	push	{r7, lr}
     c56:	b082      	sub	sp, #8
     c58:	af00      	add	r7, sp, #0
     c5a:	0002      	movs	r2, r0
     c5c:	1dfb      	adds	r3, r7, #7
     c5e:	701a      	strb	r2, [r3, #0]
     c60:	1dbb      	adds	r3, r7, #6
     c62:	1c0a      	adds	r2, r1, #0
     c64:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     c66:	4b07      	ldr	r3, [pc, #28]	; (c84 <gfx_mono_framebuffer_get_byte+0x30>)
     c68:	681a      	ldr	r2, [r3, #0]
     c6a:	1dfb      	adds	r3, r7, #7
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	01db      	lsls	r3, r3, #7
     c70:	0019      	movs	r1, r3
     c72:	1dbb      	adds	r3, r7, #6
     c74:	781b      	ldrb	r3, [r3, #0]
     c76:	18cb      	adds	r3, r1, r3
     c78:	18d3      	adds	r3, r2, r3
     c7a:	781b      	ldrb	r3, [r3, #0]
}
     c7c:	0018      	movs	r0, r3
     c7e:	46bd      	mov	sp, r7
     c80:	b002      	add	sp, #8
     c82:	bd80      	pop	{r7, pc}
     c84:	20000344 	.word	0x20000344

00000c88 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     c88:	b5b0      	push	{r4, r5, r7, lr}
     c8a:	b084      	sub	sp, #16
     c8c:	af00      	add	r7, sp, #0
     c8e:	0005      	movs	r5, r0
     c90:	000c      	movs	r4, r1
     c92:	0010      	movs	r0, r2
     c94:	0019      	movs	r1, r3
     c96:	1dfb      	adds	r3, r7, #7
     c98:	1c2a      	adds	r2, r5, #0
     c9a:	701a      	strb	r2, [r3, #0]
     c9c:	1dbb      	adds	r3, r7, #6
     c9e:	1c22      	adds	r2, r4, #0
     ca0:	701a      	strb	r2, [r3, #0]
     ca2:	1d7b      	adds	r3, r7, #5
     ca4:	1c02      	adds	r2, r0, #0
     ca6:	701a      	strb	r2, [r3, #0]
     ca8:	1d3b      	adds	r3, r7, #4
     caa:	1c0a      	adds	r2, r1, #0
     cac:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     cae:	1dfb      	adds	r3, r7, #7
     cb0:	781a      	ldrb	r2, [r3, #0]
     cb2:	1d7b      	adds	r3, r7, #5
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	18d3      	adds	r3, r2, r3
     cb8:	2b80      	cmp	r3, #128	; 0x80
     cba:	dd06      	ble.n	cca <gfx_mono_generic_draw_horizontal_line+0x42>
		length = GFX_MONO_LCD_WIDTH - x;
     cbc:	1d7b      	adds	r3, r7, #5
     cbe:	1dfa      	adds	r2, r7, #7
     cc0:	7812      	ldrb	r2, [r2, #0]
     cc2:	2180      	movs	r1, #128	; 0x80
     cc4:	4249      	negs	r1, r1
     cc6:	1a8a      	subs	r2, r1, r2
     cc8:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
     cca:	230f      	movs	r3, #15
     ccc:	18fb      	adds	r3, r7, r3
     cce:	1dba      	adds	r2, r7, #6
     cd0:	7812      	ldrb	r2, [r2, #0]
     cd2:	08d2      	lsrs	r2, r2, #3
     cd4:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
     cd6:	1dbb      	adds	r3, r7, #6
     cd8:	781a      	ldrb	r2, [r3, #0]
     cda:	230f      	movs	r3, #15
     cdc:	18fb      	adds	r3, r7, r3
     cde:	781b      	ldrb	r3, [r3, #0]
     ce0:	00db      	lsls	r3, r3, #3
     ce2:	1ad3      	subs	r3, r2, r3
     ce4:	2201      	movs	r2, #1
     ce6:	409a      	lsls	r2, r3
     ce8:	230e      	movs	r3, #14
     cea:	18fb      	adds	r3, r7, r3
     cec:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
     cee:	1d7b      	adds	r3, r7, #5
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d100      	bne.n	cf8 <gfx_mono_generic_draw_horizontal_line+0x70>
     cf6:	e0a4      	b.n	e42 <gfx_mono_generic_draw_horizontal_line+0x1ba>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     cf8:	1d3b      	adds	r3, r7, #4
     cfa:	781b      	ldrb	r3, [r3, #0]
     cfc:	2b01      	cmp	r3, #1
     cfe:	d02f      	beq.n	d60 <gfx_mono_generic_draw_horizontal_line+0xd8>
     d00:	2b02      	cmp	r3, #2
     d02:	d100      	bne.n	d06 <gfx_mono_generic_draw_horizontal_line+0x7e>
     d04:	e095      	b.n	e32 <gfx_mono_generic_draw_horizontal_line+0x1aa>
     d06:	2b00      	cmp	r3, #0
     d08:	d061      	beq.n	dce <gfx_mono_generic_draw_horizontal_line+0x146>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
     d0a:	e09b      	b.n	e44 <gfx_mono_generic_draw_horizontal_line+0x1bc>
			temp = gfx_mono_get_byte(page, x + length);
     d0c:	1dfa      	adds	r2, r7, #7
     d0e:	1d7b      	adds	r3, r7, #5
     d10:	7812      	ldrb	r2, [r2, #0]
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	18d3      	adds	r3, r2, r3
     d16:	b2da      	uxtb	r2, r3
     d18:	230d      	movs	r3, #13
     d1a:	18fc      	adds	r4, r7, r3
     d1c:	230f      	movs	r3, #15
     d1e:	18fb      	adds	r3, r7, r3
     d20:	781b      	ldrb	r3, [r3, #0]
     d22:	0011      	movs	r1, r2
     d24:	0018      	movs	r0, r3
     d26:	4b49      	ldr	r3, [pc, #292]	; (e4c <gfx_mono_generic_draw_horizontal_line+0x1c4>)
     d28:	4798      	blx	r3
     d2a:	0003      	movs	r3, r0
     d2c:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
     d2e:	230d      	movs	r3, #13
     d30:	18fb      	adds	r3, r7, r3
     d32:	220d      	movs	r2, #13
     d34:	18b9      	adds	r1, r7, r2
     d36:	220e      	movs	r2, #14
     d38:	18ba      	adds	r2, r7, r2
     d3a:	7809      	ldrb	r1, [r1, #0]
     d3c:	7812      	ldrb	r2, [r2, #0]
     d3e:	430a      	orrs	r2, r1
     d40:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
     d42:	1dfa      	adds	r2, r7, #7
     d44:	1d7b      	adds	r3, r7, #5
     d46:	7812      	ldrb	r2, [r2, #0]
     d48:	781b      	ldrb	r3, [r3, #0]
     d4a:	18d3      	adds	r3, r2, r3
     d4c:	b2d9      	uxtb	r1, r3
     d4e:	230d      	movs	r3, #13
     d50:	18fb      	adds	r3, r7, r3
     d52:	781a      	ldrb	r2, [r3, #0]
     d54:	230f      	movs	r3, #15
     d56:	18fb      	adds	r3, r7, r3
     d58:	7818      	ldrb	r0, [r3, #0]
     d5a:	2300      	movs	r3, #0
     d5c:	4c3c      	ldr	r4, [pc, #240]	; (e50 <gfx_mono_generic_draw_horizontal_line+0x1c8>)
     d5e:	47a0      	blx	r4
		while (length-- > 0) {
     d60:	1d7b      	adds	r3, r7, #5
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	1d7a      	adds	r2, r7, #5
     d66:	1e59      	subs	r1, r3, #1
     d68:	7011      	strb	r1, [r2, #0]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d1ce      	bne.n	d0c <gfx_mono_generic_draw_horizontal_line+0x84>
		break;
     d6e:	e069      	b.n	e44 <gfx_mono_generic_draw_horizontal_line+0x1bc>
			temp = gfx_mono_get_byte(page, x + length);
     d70:	1dfa      	adds	r2, r7, #7
     d72:	1d7b      	adds	r3, r7, #5
     d74:	7812      	ldrb	r2, [r2, #0]
     d76:	781b      	ldrb	r3, [r3, #0]
     d78:	18d3      	adds	r3, r2, r3
     d7a:	b2da      	uxtb	r2, r3
     d7c:	230d      	movs	r3, #13
     d7e:	18fc      	adds	r4, r7, r3
     d80:	230f      	movs	r3, #15
     d82:	18fb      	adds	r3, r7, r3
     d84:	781b      	ldrb	r3, [r3, #0]
     d86:	0011      	movs	r1, r2
     d88:	0018      	movs	r0, r3
     d8a:	4b30      	ldr	r3, [pc, #192]	; (e4c <gfx_mono_generic_draw_horizontal_line+0x1c4>)
     d8c:	4798      	blx	r3
     d8e:	0003      	movs	r3, r0
     d90:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
     d92:	230e      	movs	r3, #14
     d94:	18fb      	adds	r3, r7, r3
     d96:	781b      	ldrb	r3, [r3, #0]
     d98:	b25b      	sxtb	r3, r3
     d9a:	43db      	mvns	r3, r3
     d9c:	b25b      	sxtb	r3, r3
     d9e:	220d      	movs	r2, #13
     da0:	18ba      	adds	r2, r7, r2
     da2:	7812      	ldrb	r2, [r2, #0]
     da4:	b252      	sxtb	r2, r2
     da6:	4013      	ands	r3, r2
     da8:	b25a      	sxtb	r2, r3
     daa:	230d      	movs	r3, #13
     dac:	18fb      	adds	r3, r7, r3
     dae:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
     db0:	1dfa      	adds	r2, r7, #7
     db2:	1d7b      	adds	r3, r7, #5
     db4:	7812      	ldrb	r2, [r2, #0]
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	18d3      	adds	r3, r2, r3
     dba:	b2d9      	uxtb	r1, r3
     dbc:	230d      	movs	r3, #13
     dbe:	18fb      	adds	r3, r7, r3
     dc0:	781a      	ldrb	r2, [r3, #0]
     dc2:	230f      	movs	r3, #15
     dc4:	18fb      	adds	r3, r7, r3
     dc6:	7818      	ldrb	r0, [r3, #0]
     dc8:	2300      	movs	r3, #0
     dca:	4c21      	ldr	r4, [pc, #132]	; (e50 <gfx_mono_generic_draw_horizontal_line+0x1c8>)
     dcc:	47a0      	blx	r4
		while (length-- > 0) {
     dce:	1d7b      	adds	r3, r7, #5
     dd0:	781b      	ldrb	r3, [r3, #0]
     dd2:	1d7a      	adds	r2, r7, #5
     dd4:	1e59      	subs	r1, r3, #1
     dd6:	7011      	strb	r1, [r2, #0]
     dd8:	2b00      	cmp	r3, #0
     dda:	d1c9      	bne.n	d70 <gfx_mono_generic_draw_horizontal_line+0xe8>
		break;
     ddc:	e032      	b.n	e44 <gfx_mono_generic_draw_horizontal_line+0x1bc>
			temp = gfx_mono_get_byte(page, x + length);
     dde:	1dfa      	adds	r2, r7, #7
     de0:	1d7b      	adds	r3, r7, #5
     de2:	7812      	ldrb	r2, [r2, #0]
     de4:	781b      	ldrb	r3, [r3, #0]
     de6:	18d3      	adds	r3, r2, r3
     de8:	b2da      	uxtb	r2, r3
     dea:	230d      	movs	r3, #13
     dec:	18fc      	adds	r4, r7, r3
     dee:	230f      	movs	r3, #15
     df0:	18fb      	adds	r3, r7, r3
     df2:	781b      	ldrb	r3, [r3, #0]
     df4:	0011      	movs	r1, r2
     df6:	0018      	movs	r0, r3
     df8:	4b14      	ldr	r3, [pc, #80]	; (e4c <gfx_mono_generic_draw_horizontal_line+0x1c4>)
     dfa:	4798      	blx	r3
     dfc:	0003      	movs	r3, r0
     dfe:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
     e00:	230d      	movs	r3, #13
     e02:	18fb      	adds	r3, r7, r3
     e04:	220d      	movs	r2, #13
     e06:	18b9      	adds	r1, r7, r2
     e08:	220e      	movs	r2, #14
     e0a:	18ba      	adds	r2, r7, r2
     e0c:	7809      	ldrb	r1, [r1, #0]
     e0e:	7812      	ldrb	r2, [r2, #0]
     e10:	404a      	eors	r2, r1
     e12:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
     e14:	1dfa      	adds	r2, r7, #7
     e16:	1d7b      	adds	r3, r7, #5
     e18:	7812      	ldrb	r2, [r2, #0]
     e1a:	781b      	ldrb	r3, [r3, #0]
     e1c:	18d3      	adds	r3, r2, r3
     e1e:	b2d9      	uxtb	r1, r3
     e20:	230d      	movs	r3, #13
     e22:	18fb      	adds	r3, r7, r3
     e24:	781a      	ldrb	r2, [r3, #0]
     e26:	230f      	movs	r3, #15
     e28:	18fb      	adds	r3, r7, r3
     e2a:	7818      	ldrb	r0, [r3, #0]
     e2c:	2300      	movs	r3, #0
     e2e:	4c08      	ldr	r4, [pc, #32]	; (e50 <gfx_mono_generic_draw_horizontal_line+0x1c8>)
     e30:	47a0      	blx	r4
		while (length-- > 0) {
     e32:	1d7b      	adds	r3, r7, #5
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	1d7a      	adds	r2, r7, #5
     e38:	1e59      	subs	r1, r3, #1
     e3a:	7011      	strb	r1, [r2, #0]
     e3c:	2b00      	cmp	r3, #0
     e3e:	d1ce      	bne.n	dde <gfx_mono_generic_draw_horizontal_line+0x156>
		break;
     e40:	e000      	b.n	e44 <gfx_mono_generic_draw_horizontal_line+0x1bc>
		return;
     e42:	46c0      	nop			; (mov r8, r8)
	}
}
     e44:	46bd      	mov	sp, r7
     e46:	b004      	add	sp, #16
     e48:	bdb0      	pop	{r4, r5, r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	00001405 	.word	0x00001405
     e50:	00001365 	.word	0x00001365

00000e54 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     e54:	b5b0      	push	{r4, r5, r7, lr}
     e56:	b082      	sub	sp, #8
     e58:	af00      	add	r7, sp, #0
     e5a:	0005      	movs	r5, r0
     e5c:	000c      	movs	r4, r1
     e5e:	0010      	movs	r0, r2
     e60:	0019      	movs	r1, r3
     e62:	1dfb      	adds	r3, r7, #7
     e64:	1c2a      	adds	r2, r5, #0
     e66:	701a      	strb	r2, [r3, #0]
     e68:	1dbb      	adds	r3, r7, #6
     e6a:	1c22      	adds	r2, r4, #0
     e6c:	701a      	strb	r2, [r3, #0]
     e6e:	1d7b      	adds	r3, r7, #5
     e70:	1c02      	adds	r2, r0, #0
     e72:	701a      	strb	r2, [r3, #0]
     e74:	1d3b      	adds	r3, r7, #4
     e76:	1c0a      	adds	r2, r1, #0
     e78:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
     e7a:	1d3b      	adds	r3, r7, #4
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	2b00      	cmp	r3, #0
     e80:	d018      	beq.n	eb4 <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     e82:	e00f      	b.n	ea4 <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     e84:	1dba      	adds	r2, r7, #6
     e86:	1d3b      	adds	r3, r7, #4
     e88:	7812      	ldrb	r2, [r2, #0]
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	18d3      	adds	r3, r2, r3
     e8e:	b2d9      	uxtb	r1, r3
     e90:	2318      	movs	r3, #24
     e92:	18fb      	adds	r3, r7, r3
     e94:	781c      	ldrb	r4, [r3, #0]
     e96:	1d7b      	adds	r3, r7, #5
     e98:	781a      	ldrb	r2, [r3, #0]
     e9a:	1dfb      	adds	r3, r7, #7
     e9c:	7818      	ldrb	r0, [r3, #0]
     e9e:	0023      	movs	r3, r4
     ea0:	4c06      	ldr	r4, [pc, #24]	; (ebc <gfx_mono_generic_draw_filled_rect+0x68>)
     ea2:	47a0      	blx	r4
	while (height-- > 0) {
     ea4:	1d3b      	adds	r3, r7, #4
     ea6:	781b      	ldrb	r3, [r3, #0]
     ea8:	1d3a      	adds	r2, r7, #4
     eaa:	1e59      	subs	r1, r3, #1
     eac:	7011      	strb	r1, [r2, #0]
     eae:	2b00      	cmp	r3, #0
     eb0:	d1e8      	bne.n	e84 <gfx_mono_generic_draw_filled_rect+0x30>
     eb2:	e000      	b.n	eb6 <gfx_mono_generic_draw_filled_rect+0x62>
		return;
     eb4:	46c0      	nop			; (mov r8, r8)
	}
}
     eb6:	46bd      	mov	sp, r7
     eb8:	b002      	add	sp, #8
     eba:	bdb0      	pop	{r4, r5, r7, pc}
     ebc:	00000c89 	.word	0x00000c89

00000ec0 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
     ec0:	b590      	push	{r4, r7, lr}
     ec2:	b087      	sub	sp, #28
     ec4:	af00      	add	r7, sp, #0
     ec6:	0004      	movs	r4, r0
     ec8:	0008      	movs	r0, r1
     eca:	0011      	movs	r1, r2
     ecc:	603b      	str	r3, [r7, #0]
     ece:	1dfb      	adds	r3, r7, #7
     ed0:	1c22      	adds	r2, r4, #0
     ed2:	701a      	strb	r2, [r3, #0]
     ed4:	1dbb      	adds	r3, r7, #6
     ed6:	1c02      	adds	r2, r0, #0
     ed8:	701a      	strb	r2, [r3, #0]
     eda:	1d7b      	adds	r3, r7, #5
     edc:	1c0a      	adds	r2, r1, #0
     ede:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
     ee0:	2310      	movs	r3, #16
     ee2:	18fb      	adds	r3, r7, r3
     ee4:	1dba      	adds	r2, r7, #6
     ee6:	7812      	ldrb	r2, [r2, #0]
     ee8:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
     eea:	230f      	movs	r3, #15
     eec:	18fb      	adds	r3, r7, r3
     eee:	1d7a      	adds	r2, r7, #5
     ef0:	7812      	ldrb	r2, [r2, #0]
     ef2:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     ef4:	683b      	ldr	r3, [r7, #0]
     ef6:	7a1a      	ldrb	r2, [r3, #8]
     ef8:	2313      	movs	r3, #19
     efa:	18fb      	adds	r3, r7, r3
     efc:	08d2      	lsrs	r2, r2, #3
     efe:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     f00:	683b      	ldr	r3, [r7, #0]
     f02:	7a1b      	ldrb	r3, [r3, #8]
     f04:	2207      	movs	r2, #7
     f06:	4013      	ands	r3, r2
     f08:	b2db      	uxtb	r3, r3
     f0a:	2b00      	cmp	r3, #0
     f0c:	d006      	beq.n	f1c <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
     f0e:	2313      	movs	r3, #19
     f10:	18fb      	adds	r3, r7, r3
     f12:	781a      	ldrb	r2, [r3, #0]
     f14:	2313      	movs	r3, #19
     f16:	18fb      	adds	r3, r7, r3
     f18:	3201      	adds	r2, #1
     f1a:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
     f1c:	2313      	movs	r3, #19
     f1e:	18fb      	adds	r3, r7, r3
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	b29b      	uxth	r3, r3
     f24:	683a      	ldr	r2, [r7, #0]
     f26:	7a52      	ldrb	r2, [r2, #9]
     f28:	b292      	uxth	r2, r2
     f2a:	4353      	muls	r3, r2
     f2c:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
     f2e:	1dfb      	adds	r3, r7, #7
     f30:	781b      	ldrb	r3, [r3, #0]
     f32:	6839      	ldr	r1, [r7, #0]
     f34:	7a89      	ldrb	r1, [r1, #10]
     f36:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
     f38:	b299      	uxth	r1, r3
     f3a:	230c      	movs	r3, #12
     f3c:	18fb      	adds	r3, r7, r3
     f3e:	434a      	muls	r2, r1
     f40:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
     f42:	683b      	ldr	r3, [r7, #0]
     f44:	685a      	ldr	r2, [r3, #4]
     f46:	230c      	movs	r3, #12
     f48:	18fb      	adds	r3, r7, r3
     f4a:	881b      	ldrh	r3, [r3, #0]
     f4c:	18d3      	adds	r3, r2, r3
     f4e:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
     f50:	2312      	movs	r3, #18
     f52:	18fb      	adds	r3, r7, r3
     f54:	683a      	ldr	r2, [r7, #0]
     f56:	7a52      	ldrb	r2, [r2, #9]
     f58:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
     f5a:	230e      	movs	r3, #14
     f5c:	18fb      	adds	r3, r7, r3
     f5e:	2200      	movs	r2, #0
     f60:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
     f62:	230b      	movs	r3, #11
     f64:	18fb      	adds	r3, r7, r3
     f66:	683a      	ldr	r2, [r7, #0]
     f68:	7a12      	ldrb	r2, [r2, #8]
     f6a:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
     f6c:	2311      	movs	r3, #17
     f6e:	18fb      	adds	r3, r7, r3
     f70:	2200      	movs	r2, #0
     f72:	701a      	strb	r2, [r3, #0]
     f74:	e034      	b.n	fe0 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     f76:	2311      	movs	r3, #17
     f78:	18fb      	adds	r3, r7, r3
     f7a:	781b      	ldrb	r3, [r3, #0]
     f7c:	2207      	movs	r2, #7
     f7e:	4013      	ands	r3, r2
     f80:	b2db      	uxtb	r3, r3
     f82:	2b00      	cmp	r3, #0
     f84:	d107      	bne.n	f96 <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     f86:	230e      	movs	r3, #14
     f88:	18fb      	adds	r3, r7, r3
     f8a:	697a      	ldr	r2, [r7, #20]
     f8c:	7812      	ldrb	r2, [r2, #0]
     f8e:	701a      	strb	r2, [r3, #0]
				glyph_data++;
     f90:	697b      	ldr	r3, [r7, #20]
     f92:	3301      	adds	r3, #1
     f94:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
     f96:	230e      	movs	r3, #14
     f98:	18fb      	adds	r3, r7, r3
     f9a:	781b      	ldrb	r3, [r3, #0]
     f9c:	b25b      	sxtb	r3, r3
     f9e:	2b00      	cmp	r3, #0
     fa0:	da09      	bge.n	fb6 <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
     fa2:	230f      	movs	r3, #15
     fa4:	18fb      	adds	r3, r7, r3
     fa6:	7819      	ldrb	r1, [r3, #0]
     fa8:	2310      	movs	r3, #16
     faa:	18fb      	adds	r3, r7, r3
     fac:	781b      	ldrb	r3, [r3, #0]
     fae:	2201      	movs	r2, #1
     fb0:	0018      	movs	r0, r3
     fb2:	4b1d      	ldr	r3, [pc, #116]	; (1028 <gfx_mono_draw_char_progmem+0x168>)
     fb4:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
     fb6:	2310      	movs	r3, #16
     fb8:	18fb      	adds	r3, r7, r3
     fba:	2210      	movs	r2, #16
     fbc:	18ba      	adds	r2, r7, r2
     fbe:	7812      	ldrb	r2, [r2, #0]
     fc0:	3201      	adds	r2, #1
     fc2:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
     fc4:	230e      	movs	r3, #14
     fc6:	18fa      	adds	r2, r7, r3
     fc8:	230e      	movs	r3, #14
     fca:	18fb      	adds	r3, r7, r3
     fcc:	781b      	ldrb	r3, [r3, #0]
     fce:	18db      	adds	r3, r3, r3
     fd0:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
     fd2:	2311      	movs	r3, #17
     fd4:	18fb      	adds	r3, r7, r3
     fd6:	781a      	ldrb	r2, [r3, #0]
     fd8:	2311      	movs	r3, #17
     fda:	18fb      	adds	r3, r7, r3
     fdc:	3201      	adds	r2, #1
     fde:	701a      	strb	r2, [r3, #0]
     fe0:	2311      	movs	r3, #17
     fe2:	18fa      	adds	r2, r7, r3
     fe4:	230b      	movs	r3, #11
     fe6:	18fb      	adds	r3, r7, r3
     fe8:	7812      	ldrb	r2, [r2, #0]
     fea:	781b      	ldrb	r3, [r3, #0]
     fec:	429a      	cmp	r2, r3
     fee:	d3c2      	bcc.n	f76 <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
     ff0:	230f      	movs	r3, #15
     ff2:	18fb      	adds	r3, r7, r3
     ff4:	220f      	movs	r2, #15
     ff6:	18ba      	adds	r2, r7, r2
     ff8:	7812      	ldrb	r2, [r2, #0]
     ffa:	3201      	adds	r2, #1
     ffc:	701a      	strb	r2, [r3, #0]
		inc_x = x;
     ffe:	2310      	movs	r3, #16
    1000:	18fb      	adds	r3, r7, r3
    1002:	1dba      	adds	r2, r7, #6
    1004:	7812      	ldrb	r2, [r2, #0]
    1006:	701a      	strb	r2, [r3, #0]
		rows_left--;
    1008:	2312      	movs	r3, #18
    100a:	18fb      	adds	r3, r7, r3
    100c:	781a      	ldrb	r2, [r3, #0]
    100e:	2312      	movs	r3, #18
    1010:	18fb      	adds	r3, r7, r3
    1012:	3a01      	subs	r2, #1
    1014:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
    1016:	2312      	movs	r3, #18
    1018:	18fb      	adds	r3, r7, r3
    101a:	781b      	ldrb	r3, [r3, #0]
    101c:	2b00      	cmp	r3, #0
    101e:	d19c      	bne.n	f5a <gfx_mono_draw_char_progmem+0x9a>
}
    1020:	46c0      	nop			; (mov r8, r8)
    1022:	46bd      	mov	sp, r7
    1024:	b007      	add	sp, #28
    1026:	bd90      	pop	{r4, r7, pc}
    1028:	00001271 	.word	0x00001271

0000102c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    102c:	b590      	push	{r4, r7, lr}
    102e:	b085      	sub	sp, #20
    1030:	af02      	add	r7, sp, #8
    1032:	0004      	movs	r4, r0
    1034:	0008      	movs	r0, r1
    1036:	0011      	movs	r1, r2
    1038:	603b      	str	r3, [r7, #0]
    103a:	1dfb      	adds	r3, r7, #7
    103c:	1c22      	adds	r2, r4, #0
    103e:	701a      	strb	r2, [r3, #0]
    1040:	1dbb      	adds	r3, r7, #6
    1042:	1c02      	adds	r2, r0, #0
    1044:	701a      	strb	r2, [r3, #0]
    1046:	1d7b      	adds	r3, r7, #5
    1048:	1c0a      	adds	r2, r1, #0
    104a:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    104c:	683b      	ldr	r3, [r7, #0]
    104e:	7a1a      	ldrb	r2, [r3, #8]
    1050:	683b      	ldr	r3, [r7, #0]
    1052:	7a5c      	ldrb	r4, [r3, #9]
    1054:	1d7b      	adds	r3, r7, #5
    1056:	7819      	ldrb	r1, [r3, #0]
    1058:	1dbb      	adds	r3, r7, #6
    105a:	7818      	ldrb	r0, [r3, #0]
    105c:	2300      	movs	r3, #0
    105e:	9300      	str	r3, [sp, #0]
    1060:	0023      	movs	r3, r4
    1062:	4c0b      	ldr	r4, [pc, #44]	; (1090 <gfx_mono_draw_char+0x64>)
    1064:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
    1066:	683b      	ldr	r3, [r7, #0]
    1068:	781b      	ldrb	r3, [r3, #0]
    106a:	2b00      	cmp	r3, #0
    106c:	d000      	beq.n	1070 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
    106e:	e00a      	b.n	1086 <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
    1070:	683c      	ldr	r4, [r7, #0]
    1072:	1d7b      	adds	r3, r7, #5
    1074:	781a      	ldrb	r2, [r3, #0]
    1076:	1dbb      	adds	r3, r7, #6
    1078:	7819      	ldrb	r1, [r3, #0]
    107a:	1dfb      	adds	r3, r7, #7
    107c:	7818      	ldrb	r0, [r3, #0]
    107e:	0023      	movs	r3, r4
    1080:	4c04      	ldr	r4, [pc, #16]	; (1094 <gfx_mono_draw_char+0x68>)
    1082:	47a0      	blx	r4
		break;
    1084:	46c0      	nop			; (mov r8, r8)
	}
}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	46bd      	mov	sp, r7
    108a:	b003      	add	sp, #12
    108c:	bd90      	pop	{r4, r7, pc}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	00000e55 	.word	0x00000e55
    1094:	00000ec1 	.word	0x00000ec1

00001098 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1098:	b590      	push	{r4, r7, lr}
    109a:	b087      	sub	sp, #28
    109c:	af00      	add	r7, sp, #0
    109e:	60f8      	str	r0, [r7, #12]
    10a0:	0008      	movs	r0, r1
    10a2:	0011      	movs	r1, r2
    10a4:	607b      	str	r3, [r7, #4]
    10a6:	230b      	movs	r3, #11
    10a8:	18fb      	adds	r3, r7, r3
    10aa:	1c02      	adds	r2, r0, #0
    10ac:	701a      	strb	r2, [r3, #0]
    10ae:	230a      	movs	r3, #10
    10b0:	18fb      	adds	r3, r7, r3
    10b2:	1c0a      	adds	r2, r1, #0
    10b4:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
    10b6:	2317      	movs	r3, #23
    10b8:	18fb      	adds	r3, r7, r3
    10ba:	220b      	movs	r2, #11
    10bc:	18ba      	adds	r2, r7, r2
    10be:	7812      	ldrb	r2, [r2, #0]
    10c0:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    10c2:	68fb      	ldr	r3, [r7, #12]
    10c4:	781b      	ldrb	r3, [r3, #0]
    10c6:	2b0a      	cmp	r3, #10
    10c8:	d111      	bne.n	10ee <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
    10ca:	230b      	movs	r3, #11
    10cc:	18fb      	adds	r3, r7, r3
    10ce:	2217      	movs	r2, #23
    10d0:	18ba      	adds	r2, r7, r2
    10d2:	7812      	ldrb	r2, [r2, #0]
    10d4:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	7a5a      	ldrb	r2, [r3, #9]
    10da:	230a      	movs	r3, #10
    10dc:	18fb      	adds	r3, r7, r3
    10de:	781b      	ldrb	r3, [r3, #0]
    10e0:	18d3      	adds	r3, r2, r3
    10e2:	b2da      	uxtb	r2, r3
    10e4:	230a      	movs	r3, #10
    10e6:	18fb      	adds	r3, r7, r3
    10e8:	3201      	adds	r2, #1
    10ea:	701a      	strb	r2, [r3, #0]
    10ec:	e018      	b.n	1120 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
    10ee:	68fb      	ldr	r3, [r7, #12]
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	2b0d      	cmp	r3, #13
    10f4:	d014      	beq.n	1120 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    10f6:	68fb      	ldr	r3, [r7, #12]
    10f8:	7818      	ldrb	r0, [r3, #0]
    10fa:	687c      	ldr	r4, [r7, #4]
    10fc:	230a      	movs	r3, #10
    10fe:	18fb      	adds	r3, r7, r3
    1100:	781a      	ldrb	r2, [r3, #0]
    1102:	230b      	movs	r3, #11
    1104:	18fb      	adds	r3, r7, r3
    1106:	7819      	ldrb	r1, [r3, #0]
    1108:	0023      	movs	r3, r4
    110a:	4c0b      	ldr	r4, [pc, #44]	; (1138 <gfx_mono_draw_string+0xa0>)
    110c:	47a0      	blx	r4
			x += font->width;
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	7a19      	ldrb	r1, [r3, #8]
    1112:	230b      	movs	r3, #11
    1114:	18fb      	adds	r3, r7, r3
    1116:	220b      	movs	r2, #11
    1118:	18ba      	adds	r2, r7, r2
    111a:	7812      	ldrb	r2, [r2, #0]
    111c:	188a      	adds	r2, r1, r2
    111e:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
    1120:	68fb      	ldr	r3, [r7, #12]
    1122:	3301      	adds	r3, #1
    1124:	60fb      	str	r3, [r7, #12]
    1126:	68fb      	ldr	r3, [r7, #12]
    1128:	781b      	ldrb	r3, [r3, #0]
    112a:	2b00      	cmp	r3, #0
    112c:	d1c9      	bne.n	10c2 <gfx_mono_draw_string+0x2a>
}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	46bd      	mov	sp, r7
    1132:	b007      	add	sp, #28
    1134:	bd90      	pop	{r4, r7, pc}
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	0000102d 	.word	0x0000102d

0000113c <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
    113c:	b580      	push	{r7, lr}
    113e:	b082      	sub	sp, #8
    1140:	af00      	add	r7, sp, #0
    1142:	0002      	movs	r2, r0
    1144:	1dfb      	adds	r3, r7, #7
    1146:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    1148:	1dfb      	adds	r3, r7, #7
    114a:	1dfa      	adds	r2, r7, #7
    114c:	7812      	ldrb	r2, [r2, #0]
    114e:	210f      	movs	r1, #15
    1150:	400a      	ands	r2, r1
    1152:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    1154:	1dfb      	adds	r3, r7, #7
    1156:	781b      	ldrb	r3, [r3, #0]
    1158:	2250      	movs	r2, #80	; 0x50
    115a:	4252      	negs	r2, r2
    115c:	4313      	orrs	r3, r2
    115e:	b2db      	uxtb	r3, r3
    1160:	0018      	movs	r0, r3
    1162:	4b03      	ldr	r3, [pc, #12]	; (1170 <ssd1306_set_page_address+0x34>)
    1164:	4798      	blx	r3
}
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	46bd      	mov	sp, r7
    116a:	b002      	add	sp, #8
    116c:	bd80      	pop	{r7, pc}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	00000b45 	.word	0x00000b45

00001174 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
    1174:	b580      	push	{r7, lr}
    1176:	b082      	sub	sp, #8
    1178:	af00      	add	r7, sp, #0
    117a:	0002      	movs	r2, r0
    117c:	1dfb      	adds	r3, r7, #7
    117e:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
    1180:	1dfb      	adds	r3, r7, #7
    1182:	1dfa      	adds	r2, r7, #7
    1184:	7812      	ldrb	r2, [r2, #0]
    1186:	217f      	movs	r1, #127	; 0x7f
    1188:	400a      	ands	r2, r1
    118a:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
    118c:	1dfb      	adds	r3, r7, #7
    118e:	781b      	ldrb	r3, [r3, #0]
    1190:	091b      	lsrs	r3, r3, #4
    1192:	b2db      	uxtb	r3, r3
    1194:	2210      	movs	r2, #16
    1196:	4313      	orrs	r3, r2
    1198:	b2db      	uxtb	r3, r3
    119a:	3302      	adds	r3, #2
    119c:	b2db      	uxtb	r3, r3
    119e:	0018      	movs	r0, r3
    11a0:	4b06      	ldr	r3, [pc, #24]	; (11bc <ssd1306_set_column_address+0x48>)
    11a2:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    11a4:	1dfb      	adds	r3, r7, #7
    11a6:	781b      	ldrb	r3, [r3, #0]
    11a8:	220f      	movs	r2, #15
    11aa:	4013      	ands	r3, r2
    11ac:	b2db      	uxtb	r3, r3
    11ae:	0018      	movs	r0, r3
    11b0:	4b02      	ldr	r3, [pc, #8]	; (11bc <ssd1306_set_column_address+0x48>)
    11b2:	4798      	blx	r3
}
    11b4:	46c0      	nop			; (mov r8, r8)
    11b6:	46bd      	mov	sp, r7
    11b8:	b002      	add	sp, #8
    11ba:	bd80      	pop	{r7, pc}
    11bc:	00000b45 	.word	0x00000b45

000011c0 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
    11c0:	b580      	push	{r7, lr}
    11c2:	b082      	sub	sp, #8
    11c4:	af00      	add	r7, sp, #0
    11c6:	0002      	movs	r2, r0
    11c8:	1dfb      	adds	r3, r7, #7
    11ca:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
    11cc:	1dfb      	adds	r3, r7, #7
    11ce:	1dfa      	adds	r2, r7, #7
    11d0:	7812      	ldrb	r2, [r2, #0]
    11d2:	213f      	movs	r1, #63	; 0x3f
    11d4:	400a      	ands	r2, r1
    11d6:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
    11d8:	1dfb      	adds	r3, r7, #7
    11da:	781b      	ldrb	r3, [r3, #0]
    11dc:	2240      	movs	r2, #64	; 0x40
    11de:	4313      	orrs	r3, r2
    11e0:	b2db      	uxtb	r3, r3
    11e2:	0018      	movs	r0, r3
    11e4:	4b02      	ldr	r3, [pc, #8]	; (11f0 <ssd1306_set_display_start_line_address+0x30>)
    11e6:	4798      	blx	r3
}
    11e8:	46c0      	nop			; (mov r8, r8)
    11ea:	46bd      	mov	sp, r7
    11ec:	b002      	add	sp, #8
    11ee:	bd80      	pop	{r7, pc}
    11f0:	00000b45 	.word	0x00000b45

000011f4 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
    11f4:	b590      	push	{r4, r7, lr}
    11f6:	b083      	sub	sp, #12
    11f8:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
    11fa:	4b18      	ldr	r3, [pc, #96]	; (125c <gfx_mono_ssd1306_init+0x68>)
    11fc:	0018      	movs	r0, r3
    11fe:	4b18      	ldr	r3, [pc, #96]	; (1260 <gfx_mono_ssd1306_init+0x6c>)
    1200:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
    1202:	4b18      	ldr	r3, [pc, #96]	; (1264 <gfx_mono_ssd1306_init+0x70>)
    1204:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
    1206:	2000      	movs	r0, #0
    1208:	4b17      	ldr	r3, [pc, #92]	; (1268 <gfx_mono_ssd1306_init+0x74>)
    120a:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    120c:	1dfb      	adds	r3, r7, #7
    120e:	2200      	movs	r2, #0
    1210:	701a      	strb	r2, [r3, #0]
    1212:	e01a      	b.n	124a <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
    1214:	1dbb      	adds	r3, r7, #6
    1216:	2200      	movs	r2, #0
    1218:	701a      	strb	r2, [r3, #0]
    121a:	e00c      	b.n	1236 <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    121c:	1dbb      	adds	r3, r7, #6
    121e:	7819      	ldrb	r1, [r3, #0]
    1220:	1dfb      	adds	r3, r7, #7
    1222:	7818      	ldrb	r0, [r3, #0]
    1224:	2301      	movs	r3, #1
    1226:	2200      	movs	r2, #0
    1228:	4c10      	ldr	r4, [pc, #64]	; (126c <gfx_mono_ssd1306_init+0x78>)
    122a:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
    122c:	1dbb      	adds	r3, r7, #6
    122e:	781a      	ldrb	r2, [r3, #0]
    1230:	1dbb      	adds	r3, r7, #6
    1232:	3201      	adds	r2, #1
    1234:	701a      	strb	r2, [r3, #0]
    1236:	1dbb      	adds	r3, r7, #6
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	b25b      	sxtb	r3, r3
    123c:	2b00      	cmp	r3, #0
    123e:	daed      	bge.n	121c <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    1240:	1dfb      	adds	r3, r7, #7
    1242:	781a      	ldrb	r2, [r3, #0]
    1244:	1dfb      	adds	r3, r7, #7
    1246:	3201      	adds	r2, #1
    1248:	701a      	strb	r2, [r3, #0]
    124a:	1dfb      	adds	r3, r7, #7
    124c:	781b      	ldrb	r3, [r3, #0]
    124e:	2b07      	cmp	r3, #7
    1250:	d9e0      	bls.n	1214 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	46bd      	mov	sp, r7
    1256:	b003      	add	sp, #12
    1258:	bd90      	pop	{r4, r7, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	20000348 	.word	0x20000348
    1260:	00000bf5 	.word	0x00000bf5
    1264:	00000a9d 	.word	0x00000a9d
    1268:	000011c1 	.word	0x000011c1
    126c:	00001365 	.word	0x00001365

00001270 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    1270:	b590      	push	{r4, r7, lr}
    1272:	b085      	sub	sp, #20
    1274:	af00      	add	r7, sp, #0
    1276:	0004      	movs	r4, r0
    1278:	0008      	movs	r0, r1
    127a:	0011      	movs	r1, r2
    127c:	1dfb      	adds	r3, r7, #7
    127e:	1c22      	adds	r2, r4, #0
    1280:	701a      	strb	r2, [r3, #0]
    1282:	1dbb      	adds	r3, r7, #6
    1284:	1c02      	adds	r2, r0, #0
    1286:	701a      	strb	r2, [r3, #0]
    1288:	1d7b      	adds	r3, r7, #5
    128a:	1c0a      	adds	r2, r1, #0
    128c:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    128e:	1dfb      	adds	r3, r7, #7
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	b25b      	sxtb	r3, r3
    1294:	2b00      	cmp	r3, #0
    1296:	db5d      	blt.n	1354 <gfx_mono_ssd1306_draw_pixel+0xe4>
    1298:	1dbb      	adds	r3, r7, #6
    129a:	781b      	ldrb	r3, [r3, #0]
    129c:	2b3f      	cmp	r3, #63	; 0x3f
    129e:	d859      	bhi.n	1354 <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    12a0:	230e      	movs	r3, #14
    12a2:	18fb      	adds	r3, r7, r3
    12a4:	1dba      	adds	r2, r7, #6
    12a6:	7812      	ldrb	r2, [r2, #0]
    12a8:	08d2      	lsrs	r2, r2, #3
    12aa:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
    12ac:	1dbb      	adds	r3, r7, #6
    12ae:	781a      	ldrb	r2, [r3, #0]
    12b0:	230e      	movs	r3, #14
    12b2:	18fb      	adds	r3, r7, r3
    12b4:	781b      	ldrb	r3, [r3, #0]
    12b6:	00db      	lsls	r3, r3, #3
    12b8:	1ad3      	subs	r3, r2, r3
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	230d      	movs	r3, #13
    12c0:	18fb      	adds	r3, r7, r3
    12c2:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
    12c4:	230f      	movs	r3, #15
    12c6:	18fc      	adds	r4, r7, r3
    12c8:	1dfb      	adds	r3, r7, #7
    12ca:	781a      	ldrb	r2, [r3, #0]
    12cc:	230e      	movs	r3, #14
    12ce:	18fb      	adds	r3, r7, r3
    12d0:	781b      	ldrb	r3, [r3, #0]
    12d2:	0011      	movs	r1, r2
    12d4:	0018      	movs	r0, r3
    12d6:	4b21      	ldr	r3, [pc, #132]	; (135c <gfx_mono_ssd1306_draw_pixel+0xec>)
    12d8:	4798      	blx	r3
    12da:	0003      	movs	r3, r0
    12dc:	7023      	strb	r3, [r4, #0]

	switch (color) {
    12de:	1d7b      	adds	r3, r7, #5
    12e0:	781b      	ldrb	r3, [r3, #0]
    12e2:	2b01      	cmp	r3, #1
    12e4:	d004      	beq.n	12f0 <gfx_mono_ssd1306_draw_pixel+0x80>
    12e6:	2b02      	cmp	r3, #2
    12e8:	d01d      	beq.n	1326 <gfx_mono_ssd1306_draw_pixel+0xb6>
    12ea:	2b00      	cmp	r3, #0
    12ec:	d00b      	beq.n	1306 <gfx_mono_ssd1306_draw_pixel+0x96>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
    12ee:	e025      	b.n	133c <gfx_mono_ssd1306_draw_pixel+0xcc>
		pixel_value |= pixel_mask;
    12f0:	230f      	movs	r3, #15
    12f2:	18fb      	adds	r3, r7, r3
    12f4:	220f      	movs	r2, #15
    12f6:	18b9      	adds	r1, r7, r2
    12f8:	220d      	movs	r2, #13
    12fa:	18ba      	adds	r2, r7, r2
    12fc:	7809      	ldrb	r1, [r1, #0]
    12fe:	7812      	ldrb	r2, [r2, #0]
    1300:	430a      	orrs	r2, r1
    1302:	701a      	strb	r2, [r3, #0]
		break;
    1304:	e01a      	b.n	133c <gfx_mono_ssd1306_draw_pixel+0xcc>
		pixel_value &= ~pixel_mask;
    1306:	230d      	movs	r3, #13
    1308:	18fb      	adds	r3, r7, r3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	b25b      	sxtb	r3, r3
    130e:	43db      	mvns	r3, r3
    1310:	b25b      	sxtb	r3, r3
    1312:	220f      	movs	r2, #15
    1314:	18ba      	adds	r2, r7, r2
    1316:	7812      	ldrb	r2, [r2, #0]
    1318:	b252      	sxtb	r2, r2
    131a:	4013      	ands	r3, r2
    131c:	b25a      	sxtb	r2, r3
    131e:	230f      	movs	r3, #15
    1320:	18fb      	adds	r3, r7, r3
    1322:	701a      	strb	r2, [r3, #0]
		break;
    1324:	e00a      	b.n	133c <gfx_mono_ssd1306_draw_pixel+0xcc>
		pixel_value ^= pixel_mask;
    1326:	230f      	movs	r3, #15
    1328:	18fb      	adds	r3, r7, r3
    132a:	220f      	movs	r2, #15
    132c:	18b9      	adds	r1, r7, r2
    132e:	220d      	movs	r2, #13
    1330:	18ba      	adds	r2, r7, r2
    1332:	7809      	ldrb	r1, [r1, #0]
    1334:	7812      	ldrb	r2, [r2, #0]
    1336:	404a      	eors	r2, r1
    1338:	701a      	strb	r2, [r3, #0]
		break;
    133a:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
    133c:	230f      	movs	r3, #15
    133e:	18fb      	adds	r3, r7, r3
    1340:	781a      	ldrb	r2, [r3, #0]
    1342:	1dfb      	adds	r3, r7, #7
    1344:	7819      	ldrb	r1, [r3, #0]
    1346:	230e      	movs	r3, #14
    1348:	18fb      	adds	r3, r7, r3
    134a:	7818      	ldrb	r0, [r3, #0]
    134c:	2300      	movs	r3, #0
    134e:	4c04      	ldr	r4, [pc, #16]	; (1360 <gfx_mono_ssd1306_draw_pixel+0xf0>)
    1350:	47a0      	blx	r4
    1352:	e000      	b.n	1356 <gfx_mono_ssd1306_draw_pixel+0xe6>
		return;
    1354:	46c0      	nop			; (mov r8, r8)
}
    1356:	46bd      	mov	sp, r7
    1358:	b005      	add	sp, #20
    135a:	bd90      	pop	{r4, r7, pc}
    135c:	00001405 	.word	0x00001405
    1360:	00001365 	.word	0x00001365

00001364 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
    1364:	b5b0      	push	{r4, r5, r7, lr}
    1366:	b082      	sub	sp, #8
    1368:	af00      	add	r7, sp, #0
    136a:	0005      	movs	r5, r0
    136c:	000c      	movs	r4, r1
    136e:	0010      	movs	r0, r2
    1370:	0019      	movs	r1, r3
    1372:	1dfb      	adds	r3, r7, #7
    1374:	1c2a      	adds	r2, r5, #0
    1376:	701a      	strb	r2, [r3, #0]
    1378:	1dbb      	adds	r3, r7, #6
    137a:	1c22      	adds	r2, r4, #0
    137c:	701a      	strb	r2, [r3, #0]
    137e:	1d7b      	adds	r3, r7, #5
    1380:	1c02      	adds	r2, r0, #0
    1382:	701a      	strb	r2, [r3, #0]
    1384:	1d3b      	adds	r3, r7, #4
    1386:	1c0a      	adds	r2, r1, #0
    1388:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
    138a:	1d3b      	adds	r3, r7, #4
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	2201      	movs	r2, #1
    1390:	4053      	eors	r3, r2
    1392:	b2db      	uxtb	r3, r3
    1394:	2b00      	cmp	r3, #0
    1396:	d00d      	beq.n	13b4 <gfx_mono_ssd1306_put_byte+0x50>
    1398:	1dbb      	adds	r3, r7, #6
    139a:	781a      	ldrb	r2, [r3, #0]
    139c:	1dfb      	adds	r3, r7, #7
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	0011      	movs	r1, r2
    13a2:	0018      	movs	r0, r3
    13a4:	4b12      	ldr	r3, [pc, #72]	; (13f0 <gfx_mono_ssd1306_put_byte+0x8c>)
    13a6:	4798      	blx	r3
    13a8:	0003      	movs	r3, r0
    13aa:	001a      	movs	r2, r3
    13ac:	1d7b      	adds	r3, r7, #5
    13ae:	781b      	ldrb	r3, [r3, #0]
    13b0:	4293      	cmp	r3, r2
    13b2:	d018      	beq.n	13e6 <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
    13b4:	1d7b      	adds	r3, r7, #5
    13b6:	781a      	ldrb	r2, [r3, #0]
    13b8:	1dbb      	adds	r3, r7, #6
    13ba:	7819      	ldrb	r1, [r3, #0]
    13bc:	1dfb      	adds	r3, r7, #7
    13be:	781b      	ldrb	r3, [r3, #0]
    13c0:	0018      	movs	r0, r3
    13c2:	4b0c      	ldr	r3, [pc, #48]	; (13f4 <gfx_mono_ssd1306_put_byte+0x90>)
    13c4:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
    13c6:	1dfb      	adds	r3, r7, #7
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	0018      	movs	r0, r3
    13cc:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <gfx_mono_ssd1306_put_byte+0x94>)
    13ce:	4798      	blx	r3
	ssd1306_set_column_address(column);
    13d0:	1dbb      	adds	r3, r7, #6
    13d2:	781b      	ldrb	r3, [r3, #0]
    13d4:	0018      	movs	r0, r3
    13d6:	4b09      	ldr	r3, [pc, #36]	; (13fc <gfx_mono_ssd1306_put_byte+0x98>)
    13d8:	4798      	blx	r3

	ssd1306_write_data(data);
    13da:	1d7b      	adds	r3, r7, #5
    13dc:	781b      	ldrb	r3, [r3, #0]
    13de:	0018      	movs	r0, r3
    13e0:	4b07      	ldr	r3, [pc, #28]	; (1400 <gfx_mono_ssd1306_put_byte+0x9c>)
    13e2:	4798      	blx	r3
    13e4:	e000      	b.n	13e8 <gfx_mono_ssd1306_put_byte+0x84>
		return;
    13e6:	46c0      	nop			; (mov r8, r8)
}
    13e8:	46bd      	mov	sp, r7
    13ea:	b002      	add	sp, #8
    13ec:	bdb0      	pop	{r4, r5, r7, pc}
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	00000c55 	.word	0x00000c55
    13f4:	00000c11 	.word	0x00000c11
    13f8:	0000113d 	.word	0x0000113d
    13fc:	00001175 	.word	0x00001175
    1400:	00000b9d 	.word	0x00000b9d

00001404 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
    1404:	b580      	push	{r7, lr}
    1406:	b082      	sub	sp, #8
    1408:	af00      	add	r7, sp, #0
    140a:	0002      	movs	r2, r0
    140c:	1dfb      	adds	r3, r7, #7
    140e:	701a      	strb	r2, [r3, #0]
    1410:	1dbb      	adds	r3, r7, #6
    1412:	1c0a      	adds	r2, r1, #0
    1414:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    1416:	1dbb      	adds	r3, r7, #6
    1418:	781a      	ldrb	r2, [r3, #0]
    141a:	1dfb      	adds	r3, r7, #7
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	0011      	movs	r1, r2
    1420:	0018      	movs	r0, r3
    1422:	4b03      	ldr	r3, [pc, #12]	; (1430 <gfx_mono_ssd1306_get_byte+0x2c>)
    1424:	4798      	blx	r3
    1426:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
    1428:	0018      	movs	r0, r3
    142a:	46bd      	mov	sp, r7
    142c:	b002      	add	sp, #8
    142e:	bd80      	pop	{r7, pc}
    1430:	00000c55 	.word	0x00000c55

00001434 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    1434:	b580      	push	{r7, lr}
    1436:	b084      	sub	sp, #16
    1438:	af00      	add	r7, sp, #0
    143a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1442:	68fb      	ldr	r3, [r7, #12]
    1444:	7e5b      	ldrb	r3, [r3, #25]
    1446:	b2db      	uxtb	r3, r3
    1448:	b25b      	sxtb	r3, r3
    144a:	2b00      	cmp	r3, #0
    144c:	da01      	bge.n	1452 <adc_is_syncing+0x1e>
		return true;
    144e:	2301      	movs	r3, #1
    1450:	e000      	b.n	1454 <adc_is_syncing+0x20>
	}

	return false;
    1452:	2300      	movs	r3, #0
}
    1454:	0018      	movs	r0, r3
    1456:	46bd      	mov	sp, r7
    1458:	b004      	add	sp, #16
    145a:	bd80      	pop	{r7, pc}

0000145c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    145c:	b580      	push	{r7, lr}
    145e:	b084      	sub	sp, #16
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	681b      	ldr	r3, [r3, #0]
    1468:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	0018      	movs	r0, r3
    1470:	4b0b      	ldr	r3, [pc, #44]	; (14a0 <adc_start_conversion+0x44>)
    1472:	4798      	blx	r3
    1474:	1e03      	subs	r3, r0, #0
    1476:	d1f9      	bne.n	146c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1478:	68fb      	ldr	r3, [r7, #12]
    147a:	7b1b      	ldrb	r3, [r3, #12]
    147c:	b2db      	uxtb	r3, r3
    147e:	2202      	movs	r2, #2
    1480:	4313      	orrs	r3, r2
    1482:	b2da      	uxtb	r2, r3
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    1488:	46c0      	nop			; (mov r8, r8)
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	0018      	movs	r0, r3
    148e:	4b04      	ldr	r3, [pc, #16]	; (14a0 <adc_start_conversion+0x44>)
    1490:	4798      	blx	r3
    1492:	1e03      	subs	r3, r0, #0
    1494:	d1f9      	bne.n	148a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	46bd      	mov	sp, r7
    149a:	b004      	add	sp, #16
    149c:	bd80      	pop	{r7, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	00001435 	.word	0x00001435

000014a4 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b084      	sub	sp, #16
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
    14ac:	000a      	movs	r2, r1
    14ae:	1cfb      	adds	r3, r7, #3
    14b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    14b2:	687b      	ldr	r3, [r7, #4]
    14b4:	681b      	ldr	r3, [r3, #0]
    14b6:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    14b8:	68fb      	ldr	r3, [r7, #12]
    14ba:	1cfa      	adds	r2, r7, #3
    14bc:	7812      	ldrb	r2, [r2, #0]
    14be:	759a      	strb	r2, [r3, #22]
}
    14c0:	46c0      	nop			; (mov r8, r8)
    14c2:	46bd      	mov	sp, r7
    14c4:	b004      	add	sp, #16
    14c6:	bd80      	pop	{r7, pc}

000014c8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b084      	sub	sp, #16
    14cc:	af00      	add	r7, sp, #0
    14ce:	0002      	movs	r2, r0
    14d0:	1dfb      	adds	r3, r7, #7
    14d2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    14d4:	1dfb      	adds	r3, r7, #7
    14d6:	781a      	ldrb	r2, [r3, #0]
    14d8:	4b47      	ldr	r3, [pc, #284]	; (15f8 <_adc_interrupt_handler+0x130>)
    14da:	0092      	lsls	r2, r2, #2
    14dc:	58d3      	ldr	r3, [r2, r3]
    14de:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    14e0:	68fb      	ldr	r3, [r7, #12]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	7e1b      	ldrb	r3, [r3, #24]
    14e6:	b2da      	uxtb	r2, r3
    14e8:	68fb      	ldr	r3, [r7, #12]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	7ddb      	ldrb	r3, [r3, #23]
    14ee:	b2db      	uxtb	r3, r3
    14f0:	4013      	ands	r3, r2
    14f2:	b2db      	uxtb	r3, r3
    14f4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    14f6:	68bb      	ldr	r3, [r7, #8]
    14f8:	2201      	movs	r2, #1
    14fa:	4013      	ands	r3, r2
    14fc:	d045      	beq.n	158a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    14fe:	68fb      	ldr	r3, [r7, #12]
    1500:	681b      	ldr	r3, [r3, #0]
    1502:	2201      	movs	r2, #1
    1504:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	68fb      	ldr	r3, [r7, #12]
    150a:	0018      	movs	r0, r3
    150c:	4b3b      	ldr	r3, [pc, #236]	; (15fc <_adc_interrupt_handler+0x134>)
    150e:	4798      	blx	r3
    1510:	1e03      	subs	r3, r0, #0
    1512:	d1f9      	bne.n	1508 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    1514:	68fb      	ldr	r3, [r7, #12]
    1516:	695b      	ldr	r3, [r3, #20]
    1518:	1c99      	adds	r1, r3, #2
    151a:	68fa      	ldr	r2, [r7, #12]
    151c:	6151      	str	r1, [r2, #20]
    151e:	68fa      	ldr	r2, [r7, #12]
    1520:	6812      	ldr	r2, [r2, #0]
    1522:	8b52      	ldrh	r2, [r2, #26]
    1524:	b292      	uxth	r2, r2
    1526:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
    1528:	68fb      	ldr	r3, [r7, #12]
    152a:	8b1b      	ldrh	r3, [r3, #24]
    152c:	b29b      	uxth	r3, r3
    152e:	3b01      	subs	r3, #1
    1530:	b29b      	uxth	r3, r3
    1532:	68fa      	ldr	r2, [r7, #12]
    1534:	1c19      	adds	r1, r3, #0
    1536:	8311      	strh	r1, [r2, #24]
    1538:	2b00      	cmp	r3, #0
    153a:	d008      	beq.n	154e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	7f5b      	ldrb	r3, [r3, #29]
    1540:	2b00      	cmp	r3, #0
    1542:	d022      	beq.n	158a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
    1544:	68fb      	ldr	r3, [r7, #12]
    1546:	0018      	movs	r0, r3
    1548:	4b2d      	ldr	r3, [pc, #180]	; (1600 <_adc_interrupt_handler+0x138>)
    154a:	4798      	blx	r3
    154c:	e01d      	b.n	158a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	2101      	movs	r1, #1
    1552:	0018      	movs	r0, r3
    1554:	4b2b      	ldr	r3, [pc, #172]	; (1604 <_adc_interrupt_handler+0x13c>)
    1556:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	7f1b      	ldrb	r3, [r3, #28]
    155c:	b2db      	uxtb	r3, r3
    155e:	2b05      	cmp	r3, #5
    1560:	d113      	bne.n	158a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	2200      	movs	r2, #0
    1566:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	7edb      	ldrb	r3, [r3, #27]
    156c:	001a      	movs	r2, r3
    156e:	2301      	movs	r3, #1
    1570:	4013      	ands	r3, r2
    1572:	d00a      	beq.n	158a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
    1574:	68fb      	ldr	r3, [r7, #12]
    1576:	7e9b      	ldrb	r3, [r3, #26]
    1578:	001a      	movs	r2, r3
    157a:	2301      	movs	r3, #1
    157c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    157e:	d004      	beq.n	158a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1580:	68fb      	ldr	r3, [r7, #12]
    1582:	689b      	ldr	r3, [r3, #8]
    1584:	68fa      	ldr	r2, [r7, #12]
    1586:	0010      	movs	r0, r2
    1588:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    158a:	68bb      	ldr	r3, [r7, #8]
    158c:	2204      	movs	r2, #4
    158e:	4013      	ands	r3, r2
    1590:	d014      	beq.n	15bc <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1592:	68fb      	ldr	r3, [r7, #12]
    1594:	681b      	ldr	r3, [r3, #0]
    1596:	2204      	movs	r2, #4
    1598:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	7edb      	ldrb	r3, [r3, #27]
    159e:	001a      	movs	r2, r3
    15a0:	2302      	movs	r3, #2
    15a2:	4013      	ands	r3, r2
    15a4:	d00a      	beq.n	15bc <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    15a6:	68fb      	ldr	r3, [r7, #12]
    15a8:	7e9b      	ldrb	r3, [r3, #26]
    15aa:	001a      	movs	r2, r3
    15ac:	2302      	movs	r3, #2
    15ae:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    15b0:	d004      	beq.n	15bc <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	68db      	ldr	r3, [r3, #12]
    15b6:	68fa      	ldr	r2, [r7, #12]
    15b8:	0010      	movs	r0, r2
    15ba:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    15bc:	68bb      	ldr	r3, [r7, #8]
    15be:	2202      	movs	r2, #2
    15c0:	4013      	ands	r3, r2
    15c2:	d014      	beq.n	15ee <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    15c4:	68fb      	ldr	r3, [r7, #12]
    15c6:	681b      	ldr	r3, [r3, #0]
    15c8:	2202      	movs	r2, #2
    15ca:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	7edb      	ldrb	r3, [r3, #27]
    15d0:	001a      	movs	r2, r3
    15d2:	2304      	movs	r3, #4
    15d4:	4013      	ands	r3, r2
    15d6:	d00a      	beq.n	15ee <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    15d8:	68fb      	ldr	r3, [r7, #12]
    15da:	7e9b      	ldrb	r3, [r3, #26]
    15dc:	001a      	movs	r2, r3
    15de:	2304      	movs	r3, #4
    15e0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    15e2:	d004      	beq.n	15ee <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    15e4:	68fb      	ldr	r3, [r7, #12]
    15e6:	691b      	ldr	r3, [r3, #16]
    15e8:	68fa      	ldr	r2, [r7, #12]
    15ea:	0010      	movs	r0, r2
    15ec:	4798      	blx	r3
		}
	}
}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	46bd      	mov	sp, r7
    15f2:	b004      	add	sp, #16
    15f4:	bd80      	pop	{r7, pc}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	20004860 	.word	0x20004860
    15fc:	00001435 	.word	0x00001435
    1600:	0000145d 	.word	0x0000145d
    1604:	000014a5 	.word	0x000014a5

00001608 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1608:	b580      	push	{r7, lr}
    160a:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    160c:	2000      	movs	r0, #0
    160e:	4b02      	ldr	r3, [pc, #8]	; (1618 <ADC_Handler+0x10>)
    1610:	4798      	blx	r3
}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	46bd      	mov	sp, r7
    1616:	bd80      	pop	{r7, pc}
    1618:	000014c9 	.word	0x000014c9

0000161c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    161c:	b580      	push	{r7, lr}
    161e:	b082      	sub	sp, #8
    1620:	af00      	add	r7, sp, #0
    1622:	0002      	movs	r2, r0
    1624:	1dfb      	adds	r3, r7, #7
    1626:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1628:	4a07      	ldr	r2, [pc, #28]	; (1648 <system_interrupt_disable+0x2c>)
    162a:	1dfb      	adds	r3, r7, #7
    162c:	781b      	ldrb	r3, [r3, #0]
    162e:	0019      	movs	r1, r3
    1630:	231f      	movs	r3, #31
    1632:	400b      	ands	r3, r1
    1634:	2101      	movs	r1, #1
    1636:	4099      	lsls	r1, r3
    1638:	000b      	movs	r3, r1
    163a:	0019      	movs	r1, r3
    163c:	2380      	movs	r3, #128	; 0x80
    163e:	50d1      	str	r1, [r2, r3]
}
    1640:	46c0      	nop			; (mov r8, r8)
    1642:	46bd      	mov	sp, r7
    1644:	b002      	add	sp, #8
    1646:	bd80      	pop	{r7, pc}
    1648:	e000e100 	.word	0xe000e100

0000164c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    164c:	b580      	push	{r7, lr}
    164e:	b084      	sub	sp, #16
    1650:	af00      	add	r7, sp, #0
    1652:	0002      	movs	r2, r0
    1654:	1dfb      	adds	r3, r7, #7
    1656:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    1658:	1dfb      	adds	r3, r7, #7
    165a:	781a      	ldrb	r2, [r3, #0]
    165c:	4b37      	ldr	r3, [pc, #220]	; (173c <_dac_interrupt_handler+0xf0>)
    165e:	0092      	lsls	r2, r2, #2
    1660:	58d3      	ldr	r3, [r2, r3]
    1662:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    1664:	68fb      	ldr	r3, [r7, #12]
    1666:	681b      	ldr	r3, [r3, #0]
    1668:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    166a:	68bb      	ldr	r3, [r7, #8]
    166c:	799b      	ldrb	r3, [r3, #6]
    166e:	b2db      	uxtb	r3, r3
    1670:	001a      	movs	r2, r3
    1672:	2301      	movs	r3, #1
    1674:	4013      	ands	r3, r2
    1676:	d00e      	beq.n	1696 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    1678:	68bb      	ldr	r3, [r7, #8]
    167a:	2201      	movs	r2, #1
    167c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    167e:	68fb      	ldr	r3, [r7, #12]
    1680:	3314      	adds	r3, #20
    1682:	2b00      	cmp	r3, #0
    1684:	d007      	beq.n	1696 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    1686:	68fb      	ldr	r3, [r7, #12]
    1688:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    168a:	2b00      	cmp	r3, #0
    168c:	d003      	beq.n	1696 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    168e:	68fb      	ldr	r3, [r7, #12]
    1690:	699b      	ldr	r3, [r3, #24]
    1692:	2000      	movs	r0, #0
    1694:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    1696:	68bb      	ldr	r3, [r7, #8]
    1698:	799b      	ldrb	r3, [r3, #6]
    169a:	b2db      	uxtb	r3, r3
    169c:	001a      	movs	r2, r3
    169e:	2302      	movs	r3, #2
    16a0:	4013      	ands	r3, r2
    16a2:	d047      	beq.n	1734 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    16a4:	68bb      	ldr	r3, [r7, #8]
    16a6:	2202      	movs	r2, #2
    16a8:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    16aa:	68fb      	ldr	r3, [r7, #12]
    16ac:	899b      	ldrh	r3, [r3, #12]
    16ae:	b29b      	uxth	r3, r3
    16b0:	2b00      	cmp	r3, #0
    16b2:	d033      	beq.n	171c <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    16b4:	68fb      	ldr	r3, [r7, #12]
    16b6:	689a      	ldr	r2, [r3, #8]
    16b8:	68fb      	ldr	r3, [r7, #12]
    16ba:	89db      	ldrh	r3, [r3, #14]
    16bc:	b29b      	uxth	r3, r3
    16be:	1c59      	adds	r1, r3, #1
    16c0:	b288      	uxth	r0, r1
    16c2:	68f9      	ldr	r1, [r7, #12]
    16c4:	81c8      	strh	r0, [r1, #14]
    16c6:	005b      	lsls	r3, r3, #1
    16c8:	18d3      	adds	r3, r2, r3
    16ca:	881b      	ldrh	r3, [r3, #0]
    16cc:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    16ce:	68bb      	ldr	r3, [r7, #8]
    16d0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    16d2:	68fb      	ldr	r3, [r7, #12]
    16d4:	899b      	ldrh	r3, [r3, #12]
    16d6:	b29b      	uxth	r3, r3
    16d8:	3b01      	subs	r3, #1
    16da:	b29a      	uxth	r2, r3
    16dc:	68fb      	ldr	r3, [r7, #12]
    16de:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    16e0:	68fb      	ldr	r3, [r7, #12]
    16e2:	899b      	ldrh	r3, [r3, #12]
    16e4:	b29b      	uxth	r3, r3
    16e6:	2b00      	cmp	r3, #0
    16e8:	d118      	bne.n	171c <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    16ea:	68fb      	ldr	r3, [r7, #12]
    16ec:	2220      	movs	r2, #32
    16ee:	2100      	movs	r1, #0
    16f0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    16f2:	68bb      	ldr	r3, [r7, #8]
    16f4:	2202      	movs	r2, #2
    16f6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    16f8:	68bb      	ldr	r3, [r7, #8]
    16fa:	2202      	movs	r2, #2
    16fc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    16fe:	2019      	movs	r0, #25
    1700:	4b0f      	ldr	r3, [pc, #60]	; (1740 <_dac_interrupt_handler+0xf4>)
    1702:	4798      	blx	r3

				if ((module->callback) &&
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	3314      	adds	r3, #20
    1708:	2b00      	cmp	r3, #0
    170a:	d007      	beq.n	171c <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    170c:	68fb      	ldr	r3, [r7, #12]
    170e:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    1710:	2b00      	cmp	r3, #0
    1712:	d003      	beq.n	171c <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    1714:	68fb      	ldr	r3, [r7, #12]
    1716:	69db      	ldr	r3, [r3, #28]
    1718:	2000      	movs	r0, #0
    171a:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	3314      	adds	r3, #20
    1720:	2b00      	cmp	r3, #0
    1722:	d007      	beq.n	1734 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    1724:	68fb      	ldr	r3, [r7, #12]
    1726:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    1728:	2b00      	cmp	r3, #0
    172a:	d003      	beq.n	1734 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    172c:	68fb      	ldr	r3, [r7, #12]
    172e:	695b      	ldr	r3, [r3, #20]
    1730:	2000      	movs	r0, #0
    1732:	4798      	blx	r3
		}
	}
}
    1734:	46c0      	nop			; (mov r8, r8)
    1736:	46bd      	mov	sp, r7
    1738:	b004      	add	sp, #16
    173a:	bd80      	pop	{r7, pc}
    173c:	20004864 	.word	0x20004864
    1740:	0000161d 	.word	0x0000161d

00001744 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    1744:	b580      	push	{r7, lr}
    1746:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    1748:	2000      	movs	r0, #0
    174a:	4b02      	ldr	r3, [pc, #8]	; (1754 <DAC_Handler+0x10>)
    174c:	4798      	blx	r3
}
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	46bd      	mov	sp, r7
    1752:	bd80      	pop	{r7, pc}
    1754:	0000164d 	.word	0x0000164d

00001758 <system_interrupt_enter_critical_section>:
{
    1758:	b580      	push	{r7, lr}
    175a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    175c:	4b02      	ldr	r3, [pc, #8]	; (1768 <system_interrupt_enter_critical_section+0x10>)
    175e:	4798      	blx	r3
}
    1760:	46c0      	nop			; (mov r8, r8)
    1762:	46bd      	mov	sp, r7
    1764:	bd80      	pop	{r7, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	00013d19 	.word	0x00013d19

0000176c <system_interrupt_leave_critical_section>:
{
    176c:	b580      	push	{r7, lr}
    176e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1770:	4b02      	ldr	r3, [pc, #8]	; (177c <system_interrupt_leave_critical_section+0x10>)
    1772:	4798      	blx	r3
}
    1774:	46c0      	nop			; (mov r8, r8)
    1776:	46bd      	mov	sp, r7
    1778:	bd80      	pop	{r7, pc}
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	00013d6d 	.word	0x00013d6d

00001780 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    1780:	b580      	push	{r7, lr}
    1782:	b086      	sub	sp, #24
    1784:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    1786:	4b49      	ldr	r3, [pc, #292]	; (18ac <DMAC_Handler+0x12c>)
    1788:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    178a:	4b49      	ldr	r3, [pc, #292]	; (18b0 <DMAC_Handler+0x130>)
    178c:	8c1b      	ldrh	r3, [r3, #32]
    178e:	b29b      	uxth	r3, r3
    1790:	b2da      	uxtb	r2, r3
    1792:	2317      	movs	r3, #23
    1794:	18fb      	adds	r3, r7, r3
    1796:	210f      	movs	r1, #15
    1798:	400a      	ands	r2, r1
    179a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    179c:	2317      	movs	r3, #23
    179e:	18fb      	adds	r3, r7, r3
    17a0:	781a      	ldrb	r2, [r3, #0]
    17a2:	4b44      	ldr	r3, [pc, #272]	; (18b4 <DMAC_Handler+0x134>)
    17a4:	0092      	lsls	r2, r2, #2
    17a6:	58d3      	ldr	r3, [r2, r3]
    17a8:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    17aa:	4a41      	ldr	r2, [pc, #260]	; (18b0 <DMAC_Handler+0x130>)
    17ac:	693b      	ldr	r3, [r7, #16]
    17ae:	781b      	ldrb	r3, [r3, #0]
    17b0:	210f      	movs	r1, #15
    17b2:	400b      	ands	r3, r1
    17b4:	b2d9      	uxtb	r1, r3
    17b6:	233f      	movs	r3, #63	; 0x3f
    17b8:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    17ba:	493d      	ldr	r1, [pc, #244]	; (18b0 <DMAC_Handler+0x130>)
    17bc:	230f      	movs	r3, #15
    17be:	18fb      	adds	r3, r7, r3
    17c0:	224e      	movs	r2, #78	; 0x4e
    17c2:	5c8a      	ldrb	r2, [r1, r2]
    17c4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    17c6:	693b      	ldr	r3, [r7, #16]
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	4a3b      	ldr	r2, [pc, #236]	; (18b8 <DMAC_Handler+0x138>)
    17cc:	011b      	lsls	r3, r3, #4
    17ce:	18d3      	adds	r3, r2, r3
    17d0:	3302      	adds	r3, #2
    17d2:	881b      	ldrh	r3, [r3, #0]
    17d4:	b29b      	uxth	r3, r3
    17d6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    17d8:	693b      	ldr	r3, [r7, #16]
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	4a37      	ldr	r2, [pc, #220]	; (18bc <DMAC_Handler+0x13c>)
    17de:	011b      	lsls	r3, r3, #4
    17e0:	18d3      	adds	r3, r2, r3
    17e2:	3302      	adds	r3, #2
    17e4:	881b      	ldrh	r3, [r3, #0]
    17e6:	b29b      	uxth	r3, r3
    17e8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    17ea:	68ba      	ldr	r2, [r7, #8]
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	1ad2      	subs	r2, r2, r3
    17f0:	693b      	ldr	r3, [r7, #16]
    17f2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    17f4:	230f      	movs	r3, #15
    17f6:	18fb      	adds	r3, r7, r3
    17f8:	781b      	ldrb	r3, [r3, #0]
    17fa:	2201      	movs	r2, #1
    17fc:	4013      	ands	r3, r2
    17fe:	d016      	beq.n	182e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    1800:	4a2b      	ldr	r2, [pc, #172]	; (18b0 <DMAC_Handler+0x130>)
    1802:	234e      	movs	r3, #78	; 0x4e
    1804:	2101      	movs	r1, #1
    1806:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    1808:	693b      	ldr	r3, [r7, #16]
    180a:	2210      	movs	r2, #16
    180c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    180e:	693b      	ldr	r3, [r7, #16]
    1810:	7c1b      	ldrb	r3, [r3, #16]
    1812:	001a      	movs	r2, r3
    1814:	2301      	movs	r3, #1
    1816:	4013      	ands	r3, r2
    1818:	d042      	beq.n	18a0 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    181a:	693b      	ldr	r3, [r7, #16]
    181c:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    181e:	2b00      	cmp	r3, #0
    1820:	d03e      	beq.n	18a0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    1822:	693b      	ldr	r3, [r7, #16]
    1824:	685b      	ldr	r3, [r3, #4]
    1826:	693a      	ldr	r2, [r7, #16]
    1828:	0010      	movs	r0, r2
    182a:	4798      	blx	r3
    182c:	e038      	b.n	18a0 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    182e:	230f      	movs	r3, #15
    1830:	18fb      	adds	r3, r7, r3
    1832:	781b      	ldrb	r3, [r3, #0]
    1834:	2202      	movs	r2, #2
    1836:	4013      	ands	r3, r2
    1838:	d016      	beq.n	1868 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    183a:	4a1d      	ldr	r2, [pc, #116]	; (18b0 <DMAC_Handler+0x130>)
    183c:	234e      	movs	r3, #78	; 0x4e
    183e:	2102      	movs	r1, #2
    1840:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    1842:	693b      	ldr	r3, [r7, #16]
    1844:	2200      	movs	r2, #0
    1846:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    1848:	693b      	ldr	r3, [r7, #16]
    184a:	7c1b      	ldrb	r3, [r3, #16]
    184c:	001a      	movs	r2, r3
    184e:	2302      	movs	r3, #2
    1850:	4013      	ands	r3, r2
    1852:	d025      	beq.n	18a0 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    1854:	693b      	ldr	r3, [r7, #16]
    1856:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    1858:	2b00      	cmp	r3, #0
    185a:	d021      	beq.n	18a0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    185c:	693b      	ldr	r3, [r7, #16]
    185e:	689b      	ldr	r3, [r3, #8]
    1860:	693a      	ldr	r2, [r7, #16]
    1862:	0010      	movs	r0, r2
    1864:	4798      	blx	r3
    1866:	e01b      	b.n	18a0 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    1868:	230f      	movs	r3, #15
    186a:	18fb      	adds	r3, r7, r3
    186c:	781b      	ldrb	r3, [r3, #0]
    186e:	2204      	movs	r2, #4
    1870:	4013      	ands	r3, r2
    1872:	d015      	beq.n	18a0 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    1874:	4a0e      	ldr	r2, [pc, #56]	; (18b0 <DMAC_Handler+0x130>)
    1876:	234e      	movs	r3, #78	; 0x4e
    1878:	2104      	movs	r1, #4
    187a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    187c:	693b      	ldr	r3, [r7, #16]
    187e:	2206      	movs	r2, #6
    1880:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    1882:	693b      	ldr	r3, [r7, #16]
    1884:	7c1b      	ldrb	r3, [r3, #16]
    1886:	001a      	movs	r2, r3
    1888:	2304      	movs	r3, #4
    188a:	4013      	ands	r3, r2
    188c:	d008      	beq.n	18a0 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    188e:	693b      	ldr	r3, [r7, #16]
    1890:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    1892:	2b00      	cmp	r3, #0
    1894:	d004      	beq.n	18a0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    1896:	693b      	ldr	r3, [r7, #16]
    1898:	68db      	ldr	r3, [r3, #12]
    189a:	693a      	ldr	r2, [r7, #16]
    189c:	0010      	movs	r0, r2
    189e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    18a0:	4b07      	ldr	r3, [pc, #28]	; (18c0 <DMAC_Handler+0x140>)
    18a2:	4798      	blx	r3
}
    18a4:	46c0      	nop			; (mov r8, r8)
    18a6:	46bd      	mov	sp, r7
    18a8:	b006      	add	sp, #24
    18aa:	bd80      	pop	{r7, pc}
    18ac:	00001759 	.word	0x00001759
    18b0:	41004800 	.word	0x41004800
    18b4:	200007a0 	.word	0x200007a0
    18b8:	20004870 	.word	0x20004870
    18bc:	20000750 	.word	0x20000750
    18c0:	0000176d 	.word	0x0000176d

000018c4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
    18c4:	b580      	push	{r7, lr}
    18c6:	b082      	sub	sp, #8
    18c8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
    18ca:	4b15      	ldr	r3, [pc, #84]	; (1920 <EVSYS_Handler+0x5c>)
    18cc:	691b      	ldr	r3, [r3, #16]
    18ce:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    18d0:	4b14      	ldr	r3, [pc, #80]	; (1924 <EVSYS_Handler+0x60>)
    18d2:	699b      	ldr	r3, [r3, #24]
    18d4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
    18d6:	4b12      	ldr	r3, [pc, #72]	; (1920 <EVSYS_Handler+0x5c>)
    18d8:	689a      	ldr	r2, [r3, #8]
    18da:	683b      	ldr	r3, [r7, #0]
    18dc:	431a      	orrs	r2, r3
    18de:	4b10      	ldr	r3, [pc, #64]	; (1920 <EVSYS_Handler+0x5c>)
    18e0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    18e2:	4b10      	ldr	r3, [pc, #64]	; (1924 <EVSYS_Handler+0x60>)
    18e4:	4a10      	ldr	r2, [pc, #64]	; (1928 <EVSYS_Handler+0x64>)
    18e6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    18e8:	e008      	b.n	18fc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	685a      	ldr	r2, [r3, #4]
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	0018      	movs	r0, r3
    18f4:	4790      	blx	r2
		current_hook = current_hook->next;
    18f6:	687b      	ldr	r3, [r7, #4]
    18f8:	689b      	ldr	r3, [r3, #8]
    18fa:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
    18fc:	687b      	ldr	r3, [r7, #4]
    18fe:	2b00      	cmp	r3, #0
    1900:	d1f3      	bne.n	18ea <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    1902:	4b07      	ldr	r3, [pc, #28]	; (1920 <EVSYS_Handler+0x5c>)
    1904:	68db      	ldr	r3, [r3, #12]
    1906:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
    1908:	4b05      	ldr	r3, [pc, #20]	; (1920 <EVSYS_Handler+0x5c>)
    190a:	689b      	ldr	r3, [r3, #8]
    190c:	683a      	ldr	r2, [r7, #0]
    190e:	43d2      	mvns	r2, r2
    1910:	401a      	ands	r2, r3
    1912:	4b03      	ldr	r3, [pc, #12]	; (1920 <EVSYS_Handler+0x5c>)
    1914:	609a      	str	r2, [r3, #8]
}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	46bd      	mov	sp, r7
    191a:	b002      	add	sp, #8
    191c:	bd80      	pop	{r7, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	2000001c 	.word	0x2000001c
    1924:	42000400 	.word	0x42000400
    1928:	0f0fffff 	.word	0x0f0fffff

0000192c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    192c:	b580      	push	{r7, lr}
    192e:	b082      	sub	sp, #8
    1930:	af00      	add	r7, sp, #0
    1932:	0002      	movs	r2, r0
    1934:	6039      	str	r1, [r7, #0]
    1936:	1dfb      	adds	r3, r7, #7
    1938:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    193a:	1dfb      	adds	r3, r7, #7
    193c:	781b      	ldrb	r3, [r3, #0]
    193e:	2b01      	cmp	r3, #1
    1940:	d00a      	beq.n	1958 <system_apb_clock_set_mask+0x2c>
    1942:	2b02      	cmp	r3, #2
    1944:	d00f      	beq.n	1966 <system_apb_clock_set_mask+0x3a>
    1946:	2b00      	cmp	r3, #0
    1948:	d114      	bne.n	1974 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    194a:	4b0e      	ldr	r3, [pc, #56]	; (1984 <system_apb_clock_set_mask+0x58>)
    194c:	4a0d      	ldr	r2, [pc, #52]	; (1984 <system_apb_clock_set_mask+0x58>)
    194e:	6991      	ldr	r1, [r2, #24]
    1950:	683a      	ldr	r2, [r7, #0]
    1952:	430a      	orrs	r2, r1
    1954:	619a      	str	r2, [r3, #24]
			break;
    1956:	e00f      	b.n	1978 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1958:	4b0a      	ldr	r3, [pc, #40]	; (1984 <system_apb_clock_set_mask+0x58>)
    195a:	4a0a      	ldr	r2, [pc, #40]	; (1984 <system_apb_clock_set_mask+0x58>)
    195c:	69d1      	ldr	r1, [r2, #28]
    195e:	683a      	ldr	r2, [r7, #0]
    1960:	430a      	orrs	r2, r1
    1962:	61da      	str	r2, [r3, #28]
			break;
    1964:	e008      	b.n	1978 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1966:	4b07      	ldr	r3, [pc, #28]	; (1984 <system_apb_clock_set_mask+0x58>)
    1968:	4a06      	ldr	r2, [pc, #24]	; (1984 <system_apb_clock_set_mask+0x58>)
    196a:	6a11      	ldr	r1, [r2, #32]
    196c:	683a      	ldr	r2, [r7, #0]
    196e:	430a      	orrs	r2, r1
    1970:	621a      	str	r2, [r3, #32]
			break;
    1972:	e001      	b.n	1978 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1974:	2317      	movs	r3, #23
    1976:	e000      	b.n	197a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1978:	2300      	movs	r3, #0
}
    197a:	0018      	movs	r0, r3
    197c:	46bd      	mov	sp, r7
    197e:	b002      	add	sp, #8
    1980:	bd80      	pop	{r7, pc}
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	40000400 	.word	0x40000400

00001988 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
    1988:	b580      	push	{r7, lr}
    198a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
    198c:	2102      	movs	r1, #2
    198e:	2002      	movs	r0, #2
    1990:	4b07      	ldr	r3, [pc, #28]	; (19b0 <_system_events_init+0x28>)
    1992:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    1994:	4b07      	ldr	r3, [pc, #28]	; (19b4 <_system_events_init+0x2c>)
    1996:	2201      	movs	r2, #1
    1998:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	4b05      	ldr	r3, [pc, #20]	; (19b4 <_system_events_init+0x2c>)
    199e:	781b      	ldrb	r3, [r3, #0]
    19a0:	b2db      	uxtb	r3, r3
    19a2:	001a      	movs	r2, r3
    19a4:	2301      	movs	r3, #1
    19a6:	4013      	ands	r3, r2
    19a8:	d1f8      	bne.n	199c <_system_events_init+0x14>
	}
}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	46bd      	mov	sp, r7
    19ae:	bd80      	pop	{r7, pc}
    19b0:	0000192d 	.word	0x0000192d
    19b4:	42000400 	.word	0x42000400

000019b8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    19b8:	b580      	push	{r7, lr}
    19ba:	b084      	sub	sp, #16
    19bc:	af00      	add	r7, sp, #0
    19be:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	681b      	ldr	r3, [r3, #0]
    19c4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    19c6:	68fb      	ldr	r3, [r7, #12]
    19c8:	69db      	ldr	r3, [r3, #28]
    19ca:	2207      	movs	r2, #7
    19cc:	4013      	ands	r3, r2
    19ce:	1e5a      	subs	r2, r3, #1
    19d0:	4193      	sbcs	r3, r2
    19d2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    19d4:	0018      	movs	r0, r3
    19d6:	46bd      	mov	sp, r7
    19d8:	b004      	add	sp, #16
    19da:	bd80      	pop	{r7, pc}

000019dc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    19dc:	b580      	push	{r7, lr}
    19de:	b082      	sub	sp, #8
    19e0:	af00      	add	r7, sp, #0
    19e2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	0018      	movs	r0, r3
    19ea:	4b04      	ldr	r3, [pc, #16]	; (19fc <_i2c_master_wait_for_sync+0x20>)
    19ec:	4798      	blx	r3
    19ee:	1e03      	subs	r3, r0, #0
    19f0:	d1f9      	bne.n	19e6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	46bd      	mov	sp, r7
    19f6:	b002      	add	sp, #8
    19f8:	bd80      	pop	{r7, pc}
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	000019b9 	.word	0x000019b9

00001a00 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1a00:	b580      	push	{r7, lr}
    1a02:	b084      	sub	sp, #16
    1a04:	af00      	add	r7, sp, #0
    1a06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1a0e:	68fb      	ldr	r3, [r7, #12]
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	011b      	lsls	r3, r3, #4
    1a14:	0fdb      	lsrs	r3, r3, #31
    1a16:	b2db      	uxtb	r3, r3
    1a18:	001a      	movs	r2, r3
    1a1a:	230b      	movs	r3, #11
    1a1c:	18fb      	adds	r3, r7, r3
    1a1e:	1e51      	subs	r1, r2, #1
    1a20:	418a      	sbcs	r2, r1
    1a22:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1a24:	2308      	movs	r3, #8
    1a26:	18fb      	adds	r3, r7, r3
    1a28:	687a      	ldr	r2, [r7, #4]
    1a2a:	8b52      	ldrh	r2, [r2, #26]
    1a2c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1a2e:	687b      	ldr	r3, [r7, #4]
    1a30:	8b9b      	ldrh	r3, [r3, #28]
    1a32:	b29a      	uxth	r2, r3
    1a34:	2308      	movs	r3, #8
    1a36:	18fb      	adds	r3, r7, r3
    1a38:	2108      	movs	r1, #8
    1a3a:	1879      	adds	r1, r7, r1
    1a3c:	8809      	ldrh	r1, [r1, #0]
    1a3e:	1a8a      	subs	r2, r1, r2
    1a40:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	8b9b      	ldrh	r3, [r3, #28]
    1a46:	b29b      	uxth	r3, r3
    1a48:	3b01      	subs	r3, #1
    1a4a:	b29a      	uxth	r2, r3
    1a4c:	687b      	ldr	r3, [r7, #4]
    1a4e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1a50:	230b      	movs	r3, #11
    1a52:	18fb      	adds	r3, r7, r3
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d010      	beq.n	1a7c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	7adb      	ldrb	r3, [r3, #11]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d01c      	beq.n	1a9c <_i2c_master_read+0x9c>
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	8b9b      	ldrh	r3, [r3, #28]
    1a66:	b29b      	uxth	r3, r3
    1a68:	2b01      	cmp	r3, #1
    1a6a:	d117      	bne.n	1a9c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a6c:	68fb      	ldr	r3, [r7, #12]
    1a6e:	685b      	ldr	r3, [r3, #4]
    1a70:	2280      	movs	r2, #128	; 0x80
    1a72:	02d2      	lsls	r2, r2, #11
    1a74:	431a      	orrs	r2, r3
    1a76:	68fb      	ldr	r3, [r7, #12]
    1a78:	605a      	str	r2, [r3, #4]
    1a7a:	e00f      	b.n	1a9c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	7adb      	ldrb	r3, [r3, #11]
    1a80:	2b00      	cmp	r3, #0
    1a82:	d00b      	beq.n	1a9c <_i2c_master_read+0x9c>
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	8b9b      	ldrh	r3, [r3, #28]
    1a88:	b29b      	uxth	r3, r3
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d106      	bne.n	1a9c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	685b      	ldr	r3, [r3, #4]
    1a92:	2280      	movs	r2, #128	; 0x80
    1a94:	02d2      	lsls	r2, r2, #11
    1a96:	431a      	orrs	r2, r3
    1a98:	68fb      	ldr	r3, [r7, #12]
    1a9a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1a9c:	687b      	ldr	r3, [r7, #4]
    1a9e:	8b9b      	ldrh	r3, [r3, #28]
    1aa0:	b29b      	uxth	r3, r3
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d10e      	bne.n	1ac4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	7a9b      	ldrb	r3, [r3, #10]
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d00a      	beq.n	1ac4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1aae:	687b      	ldr	r3, [r7, #4]
    1ab0:	0018      	movs	r0, r3
    1ab2:	4b0e      	ldr	r3, [pc, #56]	; (1aec <_i2c_master_read+0xec>)
    1ab4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1ab6:	68fb      	ldr	r3, [r7, #12]
    1ab8:	685b      	ldr	r3, [r3, #4]
    1aba:	22c0      	movs	r2, #192	; 0xc0
    1abc:	0292      	lsls	r2, r2, #10
    1abe:	431a      	orrs	r2, r3
    1ac0:	68fb      	ldr	r3, [r7, #12]
    1ac2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	0018      	movs	r0, r3
    1ac8:	4b08      	ldr	r3, [pc, #32]	; (1aec <_i2c_master_read+0xec>)
    1aca:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	6a1a      	ldr	r2, [r3, #32]
    1ad0:	2308      	movs	r3, #8
    1ad2:	18fb      	adds	r3, r7, r3
    1ad4:	881b      	ldrh	r3, [r3, #0]
    1ad6:	18d3      	adds	r3, r2, r3
    1ad8:	68fa      	ldr	r2, [r7, #12]
    1ada:	2128      	movs	r1, #40	; 0x28
    1adc:	5c52      	ldrb	r2, [r2, r1]
    1ade:	b2d2      	uxtb	r2, r2
    1ae0:	701a      	strb	r2, [r3, #0]
}
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	46bd      	mov	sp, r7
    1ae6:	b004      	add	sp, #16
    1ae8:	bd80      	pop	{r7, pc}
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	000019dd 	.word	0x000019dd

00001af0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	b084      	sub	sp, #16
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1afe:	68fb      	ldr	r3, [r7, #12]
    1b00:	8b5b      	ldrh	r3, [r3, #26]
    1b02:	b29b      	uxth	r3, r3
    1b04:	001a      	movs	r2, r3
    1b06:	2304      	movs	r3, #4
    1b08:	4013      	ands	r3, r2
    1b0a:	d004      	beq.n	1b16 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	2225      	movs	r2, #37	; 0x25
    1b10:	211e      	movs	r1, #30
    1b12:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1b14:	e024      	b.n	1b60 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1b16:	230a      	movs	r3, #10
    1b18:	18fb      	adds	r3, r7, r3
    1b1a:	687a      	ldr	r2, [r7, #4]
    1b1c:	8b52      	ldrh	r2, [r2, #26]
    1b1e:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	8b9b      	ldrh	r3, [r3, #28]
    1b24:	b29a      	uxth	r2, r3
    1b26:	230a      	movs	r3, #10
    1b28:	18fb      	adds	r3, r7, r3
    1b2a:	210a      	movs	r1, #10
    1b2c:	1879      	adds	r1, r7, r1
    1b2e:	8809      	ldrh	r1, [r1, #0]
    1b30:	1a8a      	subs	r2, r1, r2
    1b32:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	8b9b      	ldrh	r3, [r3, #28]
    1b38:	b29b      	uxth	r3, r3
    1b3a:	3b01      	subs	r3, #1
    1b3c:	b29a      	uxth	r2, r3
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	0018      	movs	r0, r3
    1b46:	4b08      	ldr	r3, [pc, #32]	; (1b68 <_i2c_master_write+0x78>)
    1b48:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1b4a:	687b      	ldr	r3, [r7, #4]
    1b4c:	6a1a      	ldr	r2, [r3, #32]
    1b4e:	230a      	movs	r3, #10
    1b50:	18fb      	adds	r3, r7, r3
    1b52:	881b      	ldrh	r3, [r3, #0]
    1b54:	18d3      	adds	r3, r2, r3
    1b56:	781b      	ldrb	r3, [r3, #0]
    1b58:	b2d9      	uxtb	r1, r3
    1b5a:	68fb      	ldr	r3, [r7, #12]
    1b5c:	2228      	movs	r2, #40	; 0x28
    1b5e:	5499      	strb	r1, [r3, r2]
}
    1b60:	46bd      	mov	sp, r7
    1b62:	b004      	add	sp, #16
    1b64:	bd80      	pop	{r7, pc}
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	000019dd 	.word	0x000019dd

00001b6c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1b6c:	b580      	push	{r7, lr}
    1b6e:	b084      	sub	sp, #16
    1b70:	af00      	add	r7, sp, #0
    1b72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1b7a:	68fb      	ldr	r3, [r7, #12]
    1b7c:	7e1b      	ldrb	r3, [r3, #24]
    1b7e:	b2db      	uxtb	r3, r3
    1b80:	001a      	movs	r2, r3
    1b82:	2301      	movs	r3, #1
    1b84:	4013      	ands	r3, r2
    1b86:	d02b      	beq.n	1be0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1b88:	68fb      	ldr	r3, [r7, #12]
    1b8a:	2201      	movs	r2, #1
    1b8c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	8b5b      	ldrh	r3, [r3, #26]
    1b92:	b29b      	uxth	r3, r3
    1b94:	001a      	movs	r2, r3
    1b96:	2302      	movs	r3, #2
    1b98:	4013      	ands	r3, r2
    1b9a:	d004      	beq.n	1ba6 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	2225      	movs	r2, #37	; 0x25
    1ba0:	2141      	movs	r1, #65	; 0x41
    1ba2:	5499      	strb	r1, [r3, r2]
    1ba4:	e01c      	b.n	1be0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1ba6:	68fb      	ldr	r3, [r7, #12]
    1ba8:	8b5b      	ldrh	r3, [r3, #26]
    1baa:	b29b      	uxth	r3, r3
    1bac:	001a      	movs	r2, r3
    1bae:	2304      	movs	r3, #4
    1bb0:	4013      	ands	r3, r2
    1bb2:	d015      	beq.n	1be0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	2225      	movs	r2, #37	; 0x25
    1bb8:	2118      	movs	r1, #24
    1bba:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	2200      	movs	r2, #0
    1bc0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1bc2:	687b      	ldr	r3, [r7, #4]
    1bc4:	7a9b      	ldrb	r3, [r3, #10]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d00a      	beq.n	1be0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	0018      	movs	r0, r3
    1bce:	4b13      	ldr	r3, [pc, #76]	; (1c1c <_i2c_master_async_address_response+0xb0>)
    1bd0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1bd2:	68fb      	ldr	r3, [r7, #12]
    1bd4:	685b      	ldr	r3, [r3, #4]
    1bd6:	22c0      	movs	r2, #192	; 0xc0
    1bd8:	0292      	lsls	r2, r2, #10
    1bda:	431a      	orrs	r2, r3
    1bdc:	68fb      	ldr	r3, [r7, #12]
    1bde:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	8b9b      	ldrh	r3, [r3, #28]
    1be4:	b29a      	uxth	r2, r3
    1be6:	687b      	ldr	r3, [r7, #4]
    1be8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	2225      	movs	r2, #37	; 0x25
    1bee:	5c9b      	ldrb	r3, [r3, r2]
    1bf0:	b2db      	uxtb	r3, r3
    1bf2:	2b05      	cmp	r3, #5
    1bf4:	d10e      	bne.n	1c14 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1bf6:	687b      	ldr	r3, [r7, #4]
    1bf8:	2224      	movs	r2, #36	; 0x24
    1bfa:	5c9b      	ldrb	r3, [r3, r2]
    1bfc:	b2db      	uxtb	r3, r3
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d104      	bne.n	1c0c <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1c02:	687b      	ldr	r3, [r7, #4]
    1c04:	0018      	movs	r0, r3
    1c06:	4b06      	ldr	r3, [pc, #24]	; (1c20 <_i2c_master_async_address_response+0xb4>)
    1c08:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1c0a:	e003      	b.n	1c14 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	0018      	movs	r0, r3
    1c10:	4b04      	ldr	r3, [pc, #16]	; (1c24 <_i2c_master_async_address_response+0xb8>)
    1c12:	4798      	blx	r3
}
    1c14:	46c0      	nop			; (mov r8, r8)
    1c16:	46bd      	mov	sp, r7
    1c18:	b004      	add	sp, #16
    1c1a:	bd80      	pop	{r7, pc}
    1c1c:	000019dd 	.word	0x000019dd
    1c20:	00001af1 	.word	0x00001af1
    1c24:	00001a01 	.word	0x00001a01

00001c28 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    1c28:	b580      	push	{r7, lr}
    1c2a:	b084      	sub	sp, #16
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	60f8      	str	r0, [r7, #12]
    1c30:	60b9      	str	r1, [r7, #8]
    1c32:	1dfb      	adds	r3, r7, #7
    1c34:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    1c36:	1dfb      	adds	r3, r7, #7
    1c38:	781b      	ldrb	r3, [r3, #0]
    1c3a:	68fa      	ldr	r2, [r7, #12]
    1c3c:	3302      	adds	r3, #2
    1c3e:	009b      	lsls	r3, r3, #2
    1c40:	18d3      	adds	r3, r2, r3
    1c42:	3304      	adds	r3, #4
    1c44:	68ba      	ldr	r2, [r7, #8]
    1c46:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    1c48:	68fb      	ldr	r3, [r7, #12]
    1c4a:	7e1b      	ldrb	r3, [r3, #24]
    1c4c:	b2db      	uxtb	r3, r3
    1c4e:	b25a      	sxtb	r2, r3
    1c50:	1dfb      	adds	r3, r7, #7
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	2101      	movs	r1, #1
    1c56:	4099      	lsls	r1, r3
    1c58:	000b      	movs	r3, r1
    1c5a:	b25b      	sxtb	r3, r3
    1c5c:	4313      	orrs	r3, r2
    1c5e:	b25b      	sxtb	r3, r3
    1c60:	b2da      	uxtb	r2, r3
    1c62:	68fb      	ldr	r3, [r7, #12]
    1c64:	761a      	strb	r2, [r3, #24]
}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	46bd      	mov	sp, r7
    1c6a:	b004      	add	sp, #16
    1c6c:	bd80      	pop	{r7, pc}
	...

00001c70 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1c70:	b590      	push	{r4, r7, lr}
    1c72:	b087      	sub	sp, #28
    1c74:	af00      	add	r7, sp, #0
    1c76:	6078      	str	r0, [r7, #4]
    1c78:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	681b      	ldr	r3, [r3, #0]
    1c7e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    1c80:	683b      	ldr	r3, [r7, #0]
    1c82:	685a      	ldr	r2, [r3, #4]
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    1c88:	683b      	ldr	r3, [r7, #0]
    1c8a:	885a      	ldrh	r2, [r3, #2]
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    1c90:	687b      	ldr	r3, [r7, #4]
    1c92:	2224      	movs	r2, #36	; 0x24
    1c94:	2101      	movs	r1, #1
    1c96:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	2225      	movs	r2, #37	; 0x25
    1c9c:	2105      	movs	r1, #5
    1c9e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1ca0:	693b      	ldr	r3, [r7, #16]
    1ca2:	681b      	ldr	r3, [r3, #0]
    1ca4:	011b      	lsls	r3, r3, #4
    1ca6:	0fdb      	lsrs	r3, r3, #31
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	001a      	movs	r2, r3
    1cac:	230f      	movs	r3, #15
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	1e51      	subs	r1, r2, #1
    1cb2:	418a      	sbcs	r2, r1
    1cb4:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1cb6:	683b      	ldr	r3, [r7, #0]
    1cb8:	7a5b      	ldrb	r3, [r3, #9]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d006      	beq.n	1ccc <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1cbe:	683b      	ldr	r3, [r7, #0]
    1cc0:	7a9a      	ldrb	r2, [r3, #10]
    1cc2:	687b      	ldr	r3, [r7, #4]
    1cc4:	0011      	movs	r1, r2
    1cc6:	0018      	movs	r0, r3
    1cc8:	4b3b      	ldr	r3, [pc, #236]	; (1db8 <_i2c_master_read_packet+0x148>)
    1cca:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1ccc:	230f      	movs	r3, #15
    1cce:	18fb      	adds	r3, r7, r3
    1cd0:	781b      	ldrb	r3, [r3, #0]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d00b      	beq.n	1cee <_i2c_master_read_packet+0x7e>
    1cd6:	683b      	ldr	r3, [r7, #0]
    1cd8:	885b      	ldrh	r3, [r3, #2]
    1cda:	2b01      	cmp	r3, #1
    1cdc:	d107      	bne.n	1cee <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1cde:	693b      	ldr	r3, [r7, #16]
    1ce0:	685b      	ldr	r3, [r3, #4]
    1ce2:	2280      	movs	r2, #128	; 0x80
    1ce4:	02d2      	lsls	r2, r2, #11
    1ce6:	431a      	orrs	r2, r3
    1ce8:	693b      	ldr	r3, [r7, #16]
    1cea:	605a      	str	r2, [r3, #4]
    1cec:	e005      	b.n	1cfa <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1cee:	693b      	ldr	r3, [r7, #16]
    1cf0:	685b      	ldr	r3, [r3, #4]
    1cf2:	4a32      	ldr	r2, [pc, #200]	; (1dbc <_i2c_master_read_packet+0x14c>)
    1cf4:	401a      	ands	r2, r3
    1cf6:	693b      	ldr	r3, [r7, #16]
    1cf8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    1cfa:	683b      	ldr	r3, [r7, #0]
    1cfc:	7a1b      	ldrb	r3, [r3, #8]
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d045      	beq.n	1d8e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1d02:	683b      	ldr	r3, [r7, #0]
    1d04:	881b      	ldrh	r3, [r3, #0]
    1d06:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1d08:	683b      	ldr	r3, [r7, #0]
    1d0a:	7a5b      	ldrb	r3, [r3, #9]
    1d0c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1d0e:	4313      	orrs	r3, r2
    1d10:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1d12:	2380      	movs	r3, #128	; 0x80
    1d14:	021b      	lsls	r3, r3, #8
    1d16:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1d18:	693b      	ldr	r3, [r7, #16]
    1d1a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1d1c:	2317      	movs	r3, #23
    1d1e:	18fc      	adds	r4, r7, r3
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	0018      	movs	r0, r3
    1d24:	4b26      	ldr	r3, [pc, #152]	; (1dc0 <_i2c_master_read_packet+0x150>)
    1d26:	4798      	blx	r3
    1d28:	0003      	movs	r3, r0
    1d2a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1d2c:	693b      	ldr	r3, [r7, #16]
    1d2e:	685b      	ldr	r3, [r3, #4]
    1d30:	4a22      	ldr	r2, [pc, #136]	; (1dbc <_i2c_master_read_packet+0x14c>)
    1d32:	401a      	ands	r2, r3
    1d34:	693b      	ldr	r3, [r7, #16]
    1d36:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1d38:	2317      	movs	r3, #23
    1d3a:	18fb      	adds	r3, r7, r3
    1d3c:	781b      	ldrb	r3, [r3, #0]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d107      	bne.n	1d52 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    1d42:	2317      	movs	r3, #23
    1d44:	18fc      	adds	r4, r7, r3
    1d46:	687b      	ldr	r3, [r7, #4]
    1d48:	0018      	movs	r0, r3
    1d4a:	4b1e      	ldr	r3, [pc, #120]	; (1dc4 <_i2c_master_read_packet+0x154>)
    1d4c:	4798      	blx	r3
    1d4e:	0003      	movs	r3, r0
    1d50:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    1d52:	2317      	movs	r3, #23
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d114      	bne.n	1d86 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    1d5c:	693b      	ldr	r3, [r7, #16]
    1d5e:	2203      	movs	r2, #3
    1d60:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1d62:	683b      	ldr	r3, [r7, #0]
    1d64:	881b      	ldrh	r3, [r3, #0]
    1d66:	0a1b      	lsrs	r3, r3, #8
    1d68:	b29b      	uxth	r3, r3
    1d6a:	2278      	movs	r2, #120	; 0x78
    1d6c:	4313      	orrs	r3, r2
    1d6e:	b29b      	uxth	r3, r3
    1d70:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1d72:	683b      	ldr	r3, [r7, #0]
    1d74:	7a5b      	ldrb	r3, [r3, #9]
    1d76:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1d78:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1d7a:	2201      	movs	r2, #1
    1d7c:	4313      	orrs	r3, r2
    1d7e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1d80:	693b      	ldr	r3, [r7, #16]
    1d82:	625a      	str	r2, [r3, #36]	; 0x24
    1d84:	e012      	b.n	1dac <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1d86:	2317      	movs	r3, #23
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	e00f      	b.n	1dae <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    1d8e:	693b      	ldr	r3, [r7, #16]
    1d90:	2203      	movs	r2, #3
    1d92:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1d94:	683b      	ldr	r3, [r7, #0]
    1d96:	881b      	ldrh	r3, [r3, #0]
    1d98:	005b      	lsls	r3, r3, #1
    1d9a:	2201      	movs	r2, #1
    1d9c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1d9e:	683b      	ldr	r3, [r7, #0]
    1da0:	7a5b      	ldrb	r3, [r3, #9]
    1da2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1da4:	4313      	orrs	r3, r2
    1da6:	001a      	movs	r2, r3
    1da8:	693b      	ldr	r3, [r7, #16]
    1daa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    1dac:	2300      	movs	r3, #0
}
    1dae:	0018      	movs	r0, r3
    1db0:	46bd      	mov	sp, r7
    1db2:	b007      	add	sp, #28
    1db4:	bd90      	pop	{r4, r7, pc}
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	00005801 	.word	0x00005801
    1dbc:	fffbffff 	.word	0xfffbffff
    1dc0:	000057a3 	.word	0x000057a3
    1dc4:	00005745 	.word	0x00005745

00001dc8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1dc8:	b580      	push	{r7, lr}
    1dca:	b082      	sub	sp, #8
    1dcc:	af00      	add	r7, sp, #0
    1dce:	6078      	str	r0, [r7, #4]
    1dd0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	8b9b      	ldrh	r3, [r3, #28]
    1dd6:	b29b      	uxth	r3, r3
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d001      	beq.n	1de0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    1ddc:	2305      	movs	r3, #5
    1dde:	e00c      	b.n	1dfa <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	2201      	movs	r2, #1
    1de4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	2201      	movs	r2, #1
    1dea:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    1dec:	683a      	ldr	r2, [r7, #0]
    1dee:	687b      	ldr	r3, [r7, #4]
    1df0:	0011      	movs	r1, r2
    1df2:	0018      	movs	r0, r3
    1df4:	4b03      	ldr	r3, [pc, #12]	; (1e04 <i2c_master_read_packet_job+0x3c>)
    1df6:	4798      	blx	r3
    1df8:	0003      	movs	r3, r0
}
    1dfa:	0018      	movs	r0, r3
    1dfc:	46bd      	mov	sp, r7
    1dfe:	b002      	add	sp, #8
    1e00:	bd80      	pop	{r7, pc}
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	00001c71 	.word	0x00001c71

00001e08 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1e08:	b580      	push	{r7, lr}
    1e0a:	b084      	sub	sp, #16
    1e0c:	af00      	add	r7, sp, #0
    1e0e:	6078      	str	r0, [r7, #4]
    1e10:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	681b      	ldr	r3, [r3, #0]
    1e16:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1e18:	683b      	ldr	r3, [r7, #0]
    1e1a:	7a5b      	ldrb	r3, [r3, #9]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	d006      	beq.n	1e2e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1e20:	683b      	ldr	r3, [r7, #0]
    1e22:	7a9a      	ldrb	r2, [r3, #10]
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	0011      	movs	r1, r2
    1e28:	0018      	movs	r0, r3
    1e2a:	4b1e      	ldr	r3, [pc, #120]	; (1ea4 <_i2c_master_write_packet+0x9c>)
    1e2c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1e2e:	68fb      	ldr	r3, [r7, #12]
    1e30:	685b      	ldr	r3, [r3, #4]
    1e32:	4a1d      	ldr	r2, [pc, #116]	; (1ea8 <_i2c_master_write_packet+0xa0>)
    1e34:	401a      	ands	r2, r3
    1e36:	68fb      	ldr	r3, [r7, #12]
    1e38:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    1e3a:	683b      	ldr	r3, [r7, #0]
    1e3c:	685a      	ldr	r2, [r3, #4]
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    1e42:	683b      	ldr	r3, [r7, #0]
    1e44:	885a      	ldrh	r2, [r3, #2]
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	2224      	movs	r2, #36	; 0x24
    1e4e:	2100      	movs	r1, #0
    1e50:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    1e52:	687b      	ldr	r3, [r7, #4]
    1e54:	2225      	movs	r2, #37	; 0x25
    1e56:	2105      	movs	r1, #5
    1e58:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    1e5a:	68fb      	ldr	r3, [r7, #12]
    1e5c:	2203      	movs	r2, #3
    1e5e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    1e60:	683b      	ldr	r3, [r7, #0]
    1e62:	7a1b      	ldrb	r3, [r3, #8]
    1e64:	2b00      	cmp	r3, #0
    1e66:	d00d      	beq.n	1e84 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e68:	683b      	ldr	r3, [r7, #0]
    1e6a:	881b      	ldrh	r3, [r3, #0]
    1e6c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1e6e:	683b      	ldr	r3, [r7, #0]
    1e70:	7a5b      	ldrb	r3, [r3, #9]
    1e72:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e74:	4313      	orrs	r3, r2
    1e76:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1e78:	2380      	movs	r3, #128	; 0x80
    1e7a:	021b      	lsls	r3, r3, #8
    1e7c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e7e:	68fb      	ldr	r3, [r7, #12]
    1e80:	625a      	str	r2, [r3, #36]	; 0x24
    1e82:	e009      	b.n	1e98 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e84:	683b      	ldr	r3, [r7, #0]
    1e86:	881b      	ldrh	r3, [r3, #0]
    1e88:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1e8a:	683b      	ldr	r3, [r7, #0]
    1e8c:	7a5b      	ldrb	r3, [r3, #9]
    1e8e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1e90:	4313      	orrs	r3, r2
    1e92:	001a      	movs	r2, r3
    1e94:	68fb      	ldr	r3, [r7, #12]
    1e96:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    1e98:	2300      	movs	r3, #0
}
    1e9a:	0018      	movs	r0, r3
    1e9c:	46bd      	mov	sp, r7
    1e9e:	b004      	add	sp, #16
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	00005801 	.word	0x00005801
    1ea8:	fffbffff 	.word	0xfffbffff

00001eac <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b082      	sub	sp, #8
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]
    1eb4:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	8b9b      	ldrh	r3, [r3, #28]
    1eba:	b29b      	uxth	r3, r3
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d001      	beq.n	1ec4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
    1ec0:	2305      	movs	r3, #5
    1ec2:	e00c      	b.n	1ede <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	2201      	movs	r2, #1
    1ec8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1eca:	687b      	ldr	r3, [r7, #4]
    1ecc:	2201      	movs	r2, #1
    1ece:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
    1ed0:	683a      	ldr	r2, [r7, #0]
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	0011      	movs	r1, r2
    1ed6:	0018      	movs	r0, r3
    1ed8:	4b03      	ldr	r3, [pc, #12]	; (1ee8 <i2c_master_write_packet_job+0x3c>)
    1eda:	4798      	blx	r3
    1edc:	0003      	movs	r3, r0
}
    1ede:	0018      	movs	r0, r3
    1ee0:	46bd      	mov	sp, r7
    1ee2:	b002      	add	sp, #8
    1ee4:	bd80      	pop	{r7, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	00001e09 	.word	0x00001e09

00001eec <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b086      	sub	sp, #24
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	0002      	movs	r2, r0
    1ef4:	1dfb      	adds	r3, r7, #7
    1ef6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1ef8:	1dfb      	adds	r3, r7, #7
    1efa:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1efc:	4b93      	ldr	r3, [pc, #588]	; (214c <STACK_SIZE+0x14c>)
    1efe:	0092      	lsls	r2, r2, #2
    1f00:	58d3      	ldr	r3, [r2, r3]
    1f02:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1f04:	697b      	ldr	r3, [r7, #20]
    1f06:	681b      	ldr	r3, [r3, #0]
    1f08:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1f0a:	693b      	ldr	r3, [r7, #16]
    1f0c:	681b      	ldr	r3, [r3, #0]
    1f0e:	011b      	lsls	r3, r3, #4
    1f10:	0fdb      	lsrs	r3, r3, #31
    1f12:	b2db      	uxtb	r3, r3
    1f14:	001a      	movs	r2, r3
    1f16:	230f      	movs	r3, #15
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	1e51      	subs	r1, r2, #1
    1f1c:	418a      	sbcs	r2, r1
    1f1e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1f20:	230e      	movs	r3, #14
    1f22:	18fb      	adds	r3, r7, r3
    1f24:	697a      	ldr	r2, [r7, #20]
    1f26:	7e52      	ldrb	r2, [r2, #25]
    1f28:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1f2a:	697b      	ldr	r3, [r7, #20]
    1f2c:	7e1b      	ldrb	r3, [r3, #24]
    1f2e:	b2da      	uxtb	r2, r3
    1f30:	230e      	movs	r3, #14
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	210e      	movs	r1, #14
    1f36:	1879      	adds	r1, r7, r1
    1f38:	7809      	ldrb	r1, [r1, #0]
    1f3a:	400a      	ands	r2, r1
    1f3c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1f3e:	697b      	ldr	r3, [r7, #20]
    1f40:	8b5b      	ldrh	r3, [r3, #26]
    1f42:	b29b      	uxth	r3, r3
    1f44:	2b00      	cmp	r3, #0
    1f46:	d109      	bne.n	1f5c <_i2c_master_interrupt_handler+0x70>
    1f48:	697b      	ldr	r3, [r7, #20]
    1f4a:	8b9b      	ldrh	r3, [r3, #28]
    1f4c:	b29b      	uxth	r3, r3
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d004      	beq.n	1f5c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1f52:	697b      	ldr	r3, [r7, #20]
    1f54:	0018      	movs	r0, r3
    1f56:	4b7e      	ldr	r3, [pc, #504]	; (2150 <STACK_SIZE+0x150>)
    1f58:	4798      	blx	r3
    1f5a:	e070      	b.n	203e <STACK_SIZE+0x3e>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f5c:	697b      	ldr	r3, [r7, #20]
    1f5e:	8b5b      	ldrh	r3, [r3, #26]
    1f60:	b29b      	uxth	r3, r3
    1f62:	2b00      	cmp	r3, #0
    1f64:	d039      	beq.n	1fda <_i2c_master_interrupt_handler+0xee>
    1f66:	697b      	ldr	r3, [r7, #20]
    1f68:	8b9b      	ldrh	r3, [r3, #28]
    1f6a:	b29b      	uxth	r3, r3
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d134      	bne.n	1fda <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1f70:	697b      	ldr	r3, [r7, #20]
    1f72:	2225      	movs	r2, #37	; 0x25
    1f74:	5c9b      	ldrb	r3, [r3, r2]
    1f76:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f78:	2b05      	cmp	r3, #5
    1f7a:	d12e      	bne.n	1fda <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1f7c:	697b      	ldr	r3, [r7, #20]
    1f7e:	2224      	movs	r2, #36	; 0x24
    1f80:	5c9b      	ldrb	r3, [r3, r2]
    1f82:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1f84:	2b00      	cmp	r3, #0
    1f86:	d128      	bne.n	1fda <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1f88:	693b      	ldr	r3, [r7, #16]
    1f8a:	2203      	movs	r2, #3
    1f8c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1f8e:	697b      	ldr	r3, [r7, #20]
    1f90:	2200      	movs	r2, #0
    1f92:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1f94:	697b      	ldr	r3, [r7, #20]
    1f96:	2225      	movs	r2, #37	; 0x25
    1f98:	2100      	movs	r1, #0
    1f9a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1f9c:	697b      	ldr	r3, [r7, #20]
    1f9e:	7a9b      	ldrb	r3, [r3, #10]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d00b      	beq.n	1fbc <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1fa4:	697b      	ldr	r3, [r7, #20]
    1fa6:	0018      	movs	r0, r3
    1fa8:	4b6a      	ldr	r3, [pc, #424]	; (2154 <STACK_SIZE+0x154>)
    1faa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1fac:	693b      	ldr	r3, [r7, #16]
    1fae:	685b      	ldr	r3, [r3, #4]
    1fb0:	22c0      	movs	r2, #192	; 0xc0
    1fb2:	0292      	lsls	r2, r2, #10
    1fb4:	431a      	orrs	r2, r3
    1fb6:	693b      	ldr	r3, [r7, #16]
    1fb8:	605a      	str	r2, [r3, #4]
    1fba:	e002      	b.n	1fc2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1fbc:	693b      	ldr	r3, [r7, #16]
    1fbe:	2201      	movs	r2, #1
    1fc0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1fc2:	230e      	movs	r3, #14
    1fc4:	18fb      	adds	r3, r7, r3
    1fc6:	781b      	ldrb	r3, [r3, #0]
    1fc8:	2201      	movs	r2, #1
    1fca:	4013      	ands	r3, r2
    1fcc:	d037      	beq.n	203e <STACK_SIZE+0x3e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1fce:	697b      	ldr	r3, [r7, #20]
    1fd0:	68db      	ldr	r3, [r3, #12]
    1fd2:	697a      	ldr	r2, [r7, #20]
    1fd4:	0010      	movs	r0, r2
    1fd6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1fd8:	e031      	b.n	203e <STACK_SIZE+0x3e>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1fda:	697b      	ldr	r3, [r7, #20]
    1fdc:	8b5b      	ldrh	r3, [r3, #26]
    1fde:	b29b      	uxth	r3, r3
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d02c      	beq.n	203e <STACK_SIZE+0x3e>
    1fe4:	697b      	ldr	r3, [r7, #20]
    1fe6:	8b9b      	ldrh	r3, [r3, #28]
    1fe8:	b29b      	uxth	r3, r3
    1fea:	2b00      	cmp	r3, #0
    1fec:	d027      	beq.n	203e <STACK_SIZE+0x3e>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1fee:	693b      	ldr	r3, [r7, #16]
    1ff0:	8b5b      	ldrh	r3, [r3, #26]
    1ff2:	b29b      	uxth	r3, r3
    1ff4:	001a      	movs	r2, r3
    1ff6:	2320      	movs	r3, #32
    1ff8:	4013      	ands	r3, r2
    1ffa:	d111      	bne.n	2020 <STACK_SIZE+0x20>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1ffc:	230f      	movs	r3, #15
    1ffe:	18fb      	adds	r3, r7, r3
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	2201      	movs	r2, #1
    2004:	4053      	eors	r3, r2
    2006:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    2008:	2b00      	cmp	r3, #0
    200a:	d104      	bne.n	2016 <STACK_SIZE+0x16>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    200c:	697b      	ldr	r3, [r7, #20]
    200e:	8b9b      	ldrh	r3, [r3, #28]
    2010:	b29b      	uxth	r3, r3
    2012:	2b01      	cmp	r3, #1
    2014:	d004      	beq.n	2020 <STACK_SIZE+0x20>
			module->status = STATUS_ERR_PACKET_COLLISION;
    2016:	697b      	ldr	r3, [r7, #20]
    2018:	2225      	movs	r2, #37	; 0x25
    201a:	2141      	movs	r1, #65	; 0x41
    201c:	5499      	strb	r1, [r3, r2]
    201e:	e00e      	b.n	203e <STACK_SIZE+0x3e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    2020:	697b      	ldr	r3, [r7, #20]
    2022:	2224      	movs	r2, #36	; 0x24
    2024:	5c9b      	ldrb	r3, [r3, r2]
    2026:	b2db      	uxtb	r3, r3
    2028:	2b00      	cmp	r3, #0
    202a:	d104      	bne.n	2036 <STACK_SIZE+0x36>
			_i2c_master_write(module);
    202c:	697b      	ldr	r3, [r7, #20]
    202e:	0018      	movs	r0, r3
    2030:	4b49      	ldr	r3, [pc, #292]	; (2158 <STACK_SIZE+0x158>)
    2032:	4798      	blx	r3
    2034:	e003      	b.n	203e <STACK_SIZE+0x3e>
		} else {
			_i2c_master_read(module);
    2036:	697b      	ldr	r3, [r7, #20]
    2038:	0018      	movs	r0, r3
    203a:	4b48      	ldr	r3, [pc, #288]	; (215c <STACK_SIZE+0x15c>)
    203c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    203e:	697b      	ldr	r3, [r7, #20]
    2040:	8b5b      	ldrh	r3, [r3, #26]
    2042:	b29b      	uxth	r3, r3
    2044:	2b00      	cmp	r3, #0
    2046:	d047      	beq.n	20d8 <STACK_SIZE+0xd8>
    2048:	697b      	ldr	r3, [r7, #20]
    204a:	8b9b      	ldrh	r3, [r3, #28]
    204c:	b29b      	uxth	r3, r3
    204e:	2b00      	cmp	r3, #0
    2050:	d142      	bne.n	20d8 <STACK_SIZE+0xd8>
			(module->status == STATUS_BUSY) &&
    2052:	697b      	ldr	r3, [r7, #20]
    2054:	2225      	movs	r2, #37	; 0x25
    2056:	5c9b      	ldrb	r3, [r3, r2]
    2058:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    205a:	2b05      	cmp	r3, #5
    205c:	d13c      	bne.n	20d8 <STACK_SIZE+0xd8>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    205e:	697b      	ldr	r3, [r7, #20]
    2060:	2224      	movs	r2, #36	; 0x24
    2062:	5c9b      	ldrb	r3, [r3, r2]
    2064:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    2066:	2b01      	cmp	r3, #1
    2068:	d136      	bne.n	20d8 <STACK_SIZE+0xd8>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    206a:	693b      	ldr	r3, [r7, #16]
    206c:	7e1b      	ldrb	r3, [r3, #24]
    206e:	b2db      	uxtb	r3, r3
    2070:	001a      	movs	r2, r3
    2072:	2302      	movs	r3, #2
    2074:	4013      	ands	r3, r2
    2076:	d002      	beq.n	207e <STACK_SIZE+0x7e>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2078:	693b      	ldr	r3, [r7, #16]
    207a:	2202      	movs	r2, #2
    207c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    207e:	693b      	ldr	r3, [r7, #16]
    2080:	2203      	movs	r2, #3
    2082:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    2084:	697b      	ldr	r3, [r7, #20]
    2086:	2200      	movs	r2, #0
    2088:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    208a:	697b      	ldr	r3, [r7, #20]
    208c:	2225      	movs	r2, #37	; 0x25
    208e:	2100      	movs	r1, #0
    2090:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    2092:	230e      	movs	r3, #14
    2094:	18fb      	adds	r3, r7, r3
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	2202      	movs	r2, #2
    209a:	4013      	ands	r3, r2
    209c:	d00b      	beq.n	20b6 <STACK_SIZE+0xb6>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    209e:	697b      	ldr	r3, [r7, #20]
    20a0:	2224      	movs	r2, #36	; 0x24
    20a2:	5c9b      	ldrb	r3, [r3, r2]
    20a4:	b2db      	uxtb	r3, r3
    20a6:	2b01      	cmp	r3, #1
    20a8:	d105      	bne.n	20b6 <STACK_SIZE+0xb6>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    20aa:	697b      	ldr	r3, [r7, #20]
    20ac:	691b      	ldr	r3, [r3, #16]
    20ae:	697a      	ldr	r2, [r7, #20]
    20b0:	0010      	movs	r0, r2
    20b2:	4798      	blx	r3
    20b4:	e010      	b.n	20d8 <STACK_SIZE+0xd8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    20b6:	230e      	movs	r3, #14
    20b8:	18fb      	adds	r3, r7, r3
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	2201      	movs	r2, #1
    20be:	4013      	ands	r3, r2
    20c0:	d00a      	beq.n	20d8 <STACK_SIZE+0xd8>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    20c2:	697b      	ldr	r3, [r7, #20]
    20c4:	2224      	movs	r2, #36	; 0x24
    20c6:	5c9b      	ldrb	r3, [r3, r2]
    20c8:	b2db      	uxtb	r3, r3
    20ca:	2b00      	cmp	r3, #0
    20cc:	d104      	bne.n	20d8 <STACK_SIZE+0xd8>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    20ce:	697b      	ldr	r3, [r7, #20]
    20d0:	68db      	ldr	r3, [r3, #12]
    20d2:	697a      	ldr	r2, [r7, #20]
    20d4:	0010      	movs	r0, r2
    20d6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    20d8:	697b      	ldr	r3, [r7, #20]
    20da:	2225      	movs	r2, #37	; 0x25
    20dc:	5c9b      	ldrb	r3, [r3, r2]
    20de:	b2db      	uxtb	r3, r3
    20e0:	2b05      	cmp	r3, #5
    20e2:	d02e      	beq.n	2142 <STACK_SIZE+0x142>
    20e4:	697b      	ldr	r3, [r7, #20]
    20e6:	2225      	movs	r2, #37	; 0x25
    20e8:	5c9b      	ldrb	r3, [r3, r2]
    20ea:	b2db      	uxtb	r3, r3
    20ec:	2b00      	cmp	r3, #0
    20ee:	d028      	beq.n	2142 <STACK_SIZE+0x142>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    20f0:	693b      	ldr	r3, [r7, #16]
    20f2:	2203      	movs	r2, #3
    20f4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    20f6:	697b      	ldr	r3, [r7, #20]
    20f8:	2200      	movs	r2, #0
    20fa:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    20fc:	697b      	ldr	r3, [r7, #20]
    20fe:	2200      	movs	r2, #0
    2100:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    2102:	697b      	ldr	r3, [r7, #20]
    2104:	2225      	movs	r2, #37	; 0x25
    2106:	5c9b      	ldrb	r3, [r3, r2]
    2108:	b2db      	uxtb	r3, r3
    210a:	2b41      	cmp	r3, #65	; 0x41
    210c:	d00e      	beq.n	212c <STACK_SIZE+0x12c>
				module->send_stop) {
    210e:	697b      	ldr	r3, [r7, #20]
    2110:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    2112:	2b00      	cmp	r3, #0
    2114:	d00a      	beq.n	212c <STACK_SIZE+0x12c>
			_i2c_master_wait_for_sync(module);
    2116:	697b      	ldr	r3, [r7, #20]
    2118:	0018      	movs	r0, r3
    211a:	4b0e      	ldr	r3, [pc, #56]	; (2154 <STACK_SIZE+0x154>)
    211c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    211e:	693b      	ldr	r3, [r7, #16]
    2120:	685b      	ldr	r3, [r3, #4]
    2122:	22e0      	movs	r2, #224	; 0xe0
    2124:	02d2      	lsls	r2, r2, #11
    2126:	431a      	orrs	r2, r3
    2128:	693b      	ldr	r3, [r7, #16]
    212a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    212c:	230e      	movs	r3, #14
    212e:	18fb      	adds	r3, r7, r3
    2130:	781b      	ldrb	r3, [r3, #0]
    2132:	2204      	movs	r2, #4
    2134:	4013      	ands	r3, r2
    2136:	d004      	beq.n	2142 <STACK_SIZE+0x142>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    2138:	697b      	ldr	r3, [r7, #20]
    213a:	695b      	ldr	r3, [r3, #20]
    213c:	697a      	ldr	r2, [r7, #20]
    213e:	0010      	movs	r0, r2
    2140:	4798      	blx	r3
		}
	}
}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	46bd      	mov	sp, r7
    2146:	b006      	add	sp, #24
    2148:	bd80      	pop	{r7, pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	20005ce8 	.word	0x20005ce8
    2150:	00001b6d 	.word	0x00001b6d
    2154:	000019dd 	.word	0x000019dd
    2158:	00001af1 	.word	0x00001af1
    215c:	00001a01 	.word	0x00001a01

00002160 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    2160:	b580      	push	{r7, lr}
    2162:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2164:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    2168:	4b02      	ldr	r3, [pc, #8]	; (2174 <NVIC_SystemReset+0x14>)
    216a:	4a03      	ldr	r2, [pc, #12]	; (2178 <NVIC_SystemReset+0x18>)
    216c:	60da      	str	r2, [r3, #12]
    216e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    2172:	e7fe      	b.n	2172 <NVIC_SystemReset+0x12>
    2174:	e000ed00 	.word	0xe000ed00
    2178:	05fa0004 	.word	0x05fa0004

0000217c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    217c:	b580      	push	{r7, lr}
    217e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    2180:	4b02      	ldr	r3, [pc, #8]	; (218c <system_reset+0x10>)
    2182:	4798      	blx	r3
}
    2184:	46c0      	nop			; (mov r8, r8)
    2186:	46bd      	mov	sp, r7
    2188:	bd80      	pop	{r7, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	00002161 	.word	0x00002161

00002190 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
    2190:	b580      	push	{r7, lr}
    2192:	b086      	sub	sp, #24
    2194:	af00      	add	r7, sp, #0
    2196:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
    2198:	4b9e      	ldr	r3, [pc, #632]	; (2414 <vCommandConsoleTask+0x284>)
    219a:	0018      	movs	r0, r3
    219c:	4b9e      	ldr	r3, [pc, #632]	; (2418 <vCommandConsoleTask+0x288>)
    219e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
    21a0:	4b9e      	ldr	r3, [pc, #632]	; (241c <vCommandConsoleTask+0x28c>)
    21a2:	0018      	movs	r0, r3
    21a4:	4b9c      	ldr	r3, [pc, #624]	; (2418 <vCommandConsoleTask+0x288>)
    21a6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
    21a8:	4b9d      	ldr	r3, [pc, #628]	; (2420 <vCommandConsoleTask+0x290>)
    21aa:	0018      	movs	r0, r3
    21ac:	4b9a      	ldr	r3, [pc, #616]	; (2418 <vCommandConsoleTask+0x288>)
    21ae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
    21b0:	4b9c      	ldr	r3, [pc, #624]	; (2424 <vCommandConsoleTask+0x294>)
    21b2:	0018      	movs	r0, r3
    21b4:	4b98      	ldr	r3, [pc, #608]	; (2418 <vCommandConsoleTask+0x288>)
    21b6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    21b8:	4b9b      	ldr	r3, [pc, #620]	; (2428 <vCommandConsoleTask+0x298>)
    21ba:	0018      	movs	r0, r3
    21bc:	4b96      	ldr	r3, [pc, #600]	; (2418 <vCommandConsoleTask+0x288>)
    21be:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    21c0:	4b9a      	ldr	r3, [pc, #616]	; (242c <vCommandConsoleTask+0x29c>)
    21c2:	0018      	movs	r0, r3
    21c4:	4b94      	ldr	r3, [pc, #592]	; (2418 <vCommandConsoleTask+0x288>)
    21c6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    21c8:	4b99      	ldr	r3, [pc, #612]	; (2430 <vCommandConsoleTask+0x2a0>)
    21ca:	0018      	movs	r0, r3
    21cc:	4b92      	ldr	r3, [pc, #584]	; (2418 <vCommandConsoleTask+0x288>)
    21ce:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
    21d0:	4b98      	ldr	r3, [pc, #608]	; (2434 <vCommandConsoleTask+0x2a4>)
    21d2:	0018      	movs	r0, r3
    21d4:	4b90      	ldr	r3, [pc, #576]	; (2418 <vCommandConsoleTask+0x288>)
    21d6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
    21d8:	4b97      	ldr	r3, [pc, #604]	; (2438 <vCommandConsoleTask+0x2a8>)
    21da:	0018      	movs	r0, r3
    21dc:	4b8e      	ldr	r3, [pc, #568]	; (2418 <vCommandConsoleTask+0x288>)
    21de:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
    21e0:	2317      	movs	r3, #23
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	2200      	movs	r2, #0
    21e6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
    21e8:	4b94      	ldr	r3, [pc, #592]	; (243c <vCommandConsoleTask+0x2ac>)
    21ea:	0018      	movs	r0, r3
    21ec:	4b94      	ldr	r3, [pc, #592]	; (2440 <vCommandConsoleTask+0x2b0>)
    21ee:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
    21f0:	2203      	movs	r2, #3
    21f2:	2100      	movs	r1, #0
    21f4:	2001      	movs	r0, #1
    21f6:	4b93      	ldr	r3, [pc, #588]	; (2444 <vCommandConsoleTask+0x2b4>)
    21f8:	4798      	blx	r3
    21fa:	0002      	movs	r2, r0
    21fc:	4b92      	ldr	r3, [pc, #584]	; (2448 <vCommandConsoleTask+0x2b8>)
    21fe:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
    2200:	4b91      	ldr	r3, [pc, #580]	; (2448 <vCommandConsoleTask+0x2b8>)
    2202:	681b      	ldr	r3, [r3, #0]
    2204:	2b00      	cmp	r3, #0
    2206:	d107      	bne.n	2218 <vCommandConsoleTask+0x88>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
    2208:	4b90      	ldr	r3, [pc, #576]	; (244c <vCommandConsoleTask+0x2bc>)
    220a:	0019      	movs	r1, r3
    220c:	2003      	movs	r0, #3
    220e:	4b90      	ldr	r3, [pc, #576]	; (2450 <vCommandConsoleTask+0x2c0>)
    2210:	4798      	blx	r3
        vTaskSuspend(NULL);
    2212:	2000      	movs	r0, #0
    2214:	4b8f      	ldr	r3, [pc, #572]	; (2454 <vCommandConsoleTask+0x2c4>)
    2216:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
    2218:	230c      	movs	r3, #12
    221a:	18fb      	adds	r3, r7, r3
    221c:	0018      	movs	r0, r3
    221e:	4b8e      	ldr	r3, [pc, #568]	; (2458 <vCommandConsoleTask+0x2c8>)
    2220:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
    2222:	230c      	movs	r3, #12
    2224:	18fb      	adds	r3, r7, r3
    2226:	781b      	ldrb	r3, [r3, #0]
    2228:	2b0a      	cmp	r3, #10
    222a:	d004      	beq.n	2236 <vCommandConsoleTask+0xa6>
    222c:	230c      	movs	r3, #12
    222e:	18fb      	adds	r3, r7, r3
    2230:	781b      	ldrb	r3, [r3, #0]
    2232:	2b0d      	cmp	r3, #13
    2234:	d137      	bne.n	22a6 <vCommandConsoleTask+0x116>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
    2236:	4b89      	ldr	r3, [pc, #548]	; (245c <vCommandConsoleTask+0x2cc>)
    2238:	0018      	movs	r0, r3
    223a:	4b81      	ldr	r3, [pc, #516]	; (2440 <vCommandConsoleTask+0x2b0>)
    223c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
    223e:	4b88      	ldr	r3, [pc, #544]	; (2460 <vCommandConsoleTask+0x2d0>)
    2240:	2200      	movs	r2, #0
    2242:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
    2244:	4b87      	ldr	r3, [pc, #540]	; (2464 <vCommandConsoleTask+0x2d4>)
    2246:	2200      	movs	r2, #0
    2248:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
    224a:	4987      	ldr	r1, [pc, #540]	; (2468 <vCommandConsoleTask+0x2d8>)
    224c:	4b87      	ldr	r3, [pc, #540]	; (246c <vCommandConsoleTask+0x2dc>)
    224e:	2231      	movs	r2, #49	; 0x31
    2250:	0018      	movs	r0, r3
    2252:	4b87      	ldr	r3, [pc, #540]	; (2470 <vCommandConsoleTask+0x2e0>)
    2254:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
    2256:	4b85      	ldr	r3, [pc, #532]	; (246c <vCommandConsoleTask+0x2dc>)
    2258:	2231      	movs	r2, #49	; 0x31
    225a:	2100      	movs	r1, #0
    225c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
    225e:	4985      	ldr	r1, [pc, #532]	; (2474 <vCommandConsoleTask+0x2e4>)
    2260:	4b81      	ldr	r3, [pc, #516]	; (2468 <vCommandConsoleTask+0x2d8>)
    2262:	2264      	movs	r2, #100	; 0x64
    2264:	0018      	movs	r0, r3
    2266:	4b84      	ldr	r3, [pc, #528]	; (2478 <vCommandConsoleTask+0x2e8>)
    2268:	4798      	blx	r3
    226a:	0003      	movs	r3, r0
    226c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    226e:	4b81      	ldr	r3, [pc, #516]	; (2474 <vCommandConsoleTask+0x2e4>)
    2270:	2263      	movs	r2, #99	; 0x63
    2272:	2100      	movs	r1, #0
    2274:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
    2276:	4b7f      	ldr	r3, [pc, #508]	; (2474 <vCommandConsoleTask+0x2e4>)
    2278:	0018      	movs	r0, r3
    227a:	4b71      	ldr	r3, [pc, #452]	; (2440 <vCommandConsoleTask+0x2b0>)
    227c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
    227e:	693b      	ldr	r3, [r7, #16]
    2280:	2b00      	cmp	r3, #0
    2282:	d1ec      	bne.n	225e <vCommandConsoleTask+0xce>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
    2284:	2317      	movs	r3, #23
    2286:	18fb      	adds	r3, r7, r3
    2288:	2200      	movs	r2, #0
    228a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
    228c:	4b76      	ldr	r3, [pc, #472]	; (2468 <vCommandConsoleTask+0x2d8>)
    228e:	2232      	movs	r2, #50	; 0x32
    2290:	2100      	movs	r1, #0
    2292:	0018      	movs	r0, r3
    2294:	4b79      	ldr	r3, [pc, #484]	; (247c <vCommandConsoleTask+0x2ec>)
    2296:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
    2298:	4b76      	ldr	r3, [pc, #472]	; (2474 <vCommandConsoleTask+0x2e4>)
    229a:	2264      	movs	r2, #100	; 0x64
    229c:	2100      	movs	r1, #0
    229e:	0018      	movs	r0, r3
    22a0:	4b76      	ldr	r3, [pc, #472]	; (247c <vCommandConsoleTask+0x2ec>)
    22a2:	4798      	blx	r3
    22a4:	e0b5      	b.n	2412 <vCommandConsoleTask+0x282>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
    22a6:	4b6e      	ldr	r3, [pc, #440]	; (2460 <vCommandConsoleTask+0x2d0>)
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d059      	beq.n	2362 <vCommandConsoleTask+0x1d2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    22ae:	4b6d      	ldr	r3, [pc, #436]	; (2464 <vCommandConsoleTask+0x2d4>)
    22b0:	781b      	ldrb	r3, [r3, #0]
    22b2:	2b03      	cmp	r3, #3
    22b4:	d80c      	bhi.n	22d0 <vCommandConsoleTask+0x140>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    22b6:	4b6b      	ldr	r3, [pc, #428]	; (2464 <vCommandConsoleTask+0x2d4>)
    22b8:	781b      	ldrb	r3, [r3, #0]
    22ba:	1c5a      	adds	r2, r3, #1
    22bc:	b2d1      	uxtb	r1, r2
    22be:	4a69      	ldr	r2, [pc, #420]	; (2464 <vCommandConsoleTask+0x2d4>)
    22c0:	7011      	strb	r1, [r2, #0]
    22c2:	001a      	movs	r2, r3
    22c4:	230c      	movs	r3, #12
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	7819      	ldrb	r1, [r3, #0]
    22ca:	4b6d      	ldr	r3, [pc, #436]	; (2480 <vCommandConsoleTask+0x2f0>)
    22cc:	5499      	strb	r1, [r3, r2]
    22ce:	e005      	b.n	22dc <vCommandConsoleTask+0x14c>
                } else {
                    isEscapeCode = false;
    22d0:	4b63      	ldr	r3, [pc, #396]	; (2460 <vCommandConsoleTask+0x2d0>)
    22d2:	2200      	movs	r2, #0
    22d4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    22d6:	4b63      	ldr	r3, [pc, #396]	; (2464 <vCommandConsoleTask+0x2d4>)
    22d8:	2200      	movs	r2, #0
    22da:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    22dc:	4b61      	ldr	r3, [pc, #388]	; (2464 <vCommandConsoleTask+0x2d4>)
    22de:	781b      	ldrb	r3, [r3, #0]
    22e0:	2b01      	cmp	r3, #1
    22e2:	d999      	bls.n	2218 <vCommandConsoleTask+0x88>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
    22e4:	4a67      	ldr	r2, [pc, #412]	; (2484 <vCommandConsoleTask+0x2f4>)
    22e6:	4b66      	ldr	r3, [pc, #408]	; (2480 <vCommandConsoleTask+0x2f0>)
    22e8:	0011      	movs	r1, r2
    22ea:	0018      	movs	r0, r3
    22ec:	4b66      	ldr	r3, [pc, #408]	; (2488 <vCommandConsoleTask+0x2f8>)
    22ee:	4798      	blx	r3
    22f0:	1e03      	subs	r3, r0, #0
    22f2:	d02f      	beq.n	2354 <vCommandConsoleTask+0x1c4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
    22f4:	4965      	ldr	r1, [pc, #404]	; (248c <vCommandConsoleTask+0x2fc>)
    22f6:	4b5c      	ldr	r3, [pc, #368]	; (2468 <vCommandConsoleTask+0x2d8>)
    22f8:	221b      	movs	r2, #27
    22fa:	0018      	movs	r0, r3
    22fc:	4b64      	ldr	r3, [pc, #400]	; (2490 <vCommandConsoleTask+0x300>)
    22fe:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
    2300:	4b59      	ldr	r3, [pc, #356]	; (2468 <vCommandConsoleTask+0x2d8>)
    2302:	0018      	movs	r0, r3
    2304:	4b4e      	ldr	r3, [pc, #312]	; (2440 <vCommandConsoleTask+0x2b0>)
    2306:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
    2308:	2317      	movs	r3, #23
    230a:	18fb      	adds	r3, r7, r3
    230c:	2200      	movs	r2, #0
    230e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
    2310:	4b55      	ldr	r3, [pc, #340]	; (2468 <vCommandConsoleTask+0x2d8>)
    2312:	2232      	movs	r2, #50	; 0x32
    2314:	2100      	movs	r1, #0
    2316:	0018      	movs	r0, r3
    2318:	4b58      	ldr	r3, [pc, #352]	; (247c <vCommandConsoleTask+0x2ec>)
    231a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
    231c:	4953      	ldr	r1, [pc, #332]	; (246c <vCommandConsoleTask+0x2dc>)
    231e:	4b52      	ldr	r3, [pc, #328]	; (2468 <vCommandConsoleTask+0x2d8>)
    2320:	2231      	movs	r2, #49	; 0x31
    2322:	0018      	movs	r0, r3
    2324:	4b52      	ldr	r3, [pc, #328]	; (2470 <vCommandConsoleTask+0x2e0>)
    2326:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    2328:	4b4f      	ldr	r3, [pc, #316]	; (2468 <vCommandConsoleTask+0x2d8>)
    232a:	0018      	movs	r0, r3
    232c:	4b59      	ldr	r3, [pc, #356]	; (2494 <vCommandConsoleTask+0x304>)
    232e:	4798      	blx	r3
    2330:	0003      	movs	r3, r0
    2332:	2b30      	cmp	r3, #48	; 0x30
    2334:	d806      	bhi.n	2344 <vCommandConsoleTask+0x1b4>
    2336:	4b4d      	ldr	r3, [pc, #308]	; (246c <vCommandConsoleTask+0x2dc>)
    2338:	0018      	movs	r0, r3
    233a:	4b56      	ldr	r3, [pc, #344]	; (2494 <vCommandConsoleTask+0x304>)
    233c:	4798      	blx	r3
    233e:	0003      	movs	r3, r0
    2340:	b2da      	uxtb	r2, r3
    2342:	e000      	b.n	2346 <vCommandConsoleTask+0x1b6>
    2344:	2231      	movs	r2, #49	; 0x31
    2346:	2317      	movs	r3, #23
    2348:	18fb      	adds	r3, r7, r3
    234a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
    234c:	4b46      	ldr	r3, [pc, #280]	; (2468 <vCommandConsoleTask+0x2d8>)
    234e:	0018      	movs	r0, r3
    2350:	4b3b      	ldr	r3, [pc, #236]	; (2440 <vCommandConsoleTask+0x2b0>)
    2352:	4798      	blx	r3
                    }

                    isEscapeCode = false;
    2354:	4b42      	ldr	r3, [pc, #264]	; (2460 <vCommandConsoleTask+0x2d0>)
    2356:	2200      	movs	r2, #0
    2358:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    235a:	4b42      	ldr	r3, [pc, #264]	; (2464 <vCommandConsoleTask+0x2d4>)
    235c:	2200      	movs	r2, #0
    235e:	701a      	strb	r2, [r3, #0]
    2360:	e75a      	b.n	2218 <vCommandConsoleTask+0x88>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
    2362:	230c      	movs	r3, #12
    2364:	18fb      	adds	r3, r7, r3
    2366:	781b      	ldrb	r3, [r3, #0]
    2368:	2b0d      	cmp	r3, #13
    236a:	d100      	bne.n	236e <vCommandConsoleTask+0x1de>
    236c:	e754      	b.n	2218 <vCommandConsoleTask+0x88>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    236e:	230c      	movs	r3, #12
    2370:	18fb      	adds	r3, r7, r3
    2372:	781b      	ldrb	r3, [r3, #0]
    2374:	2b08      	cmp	r3, #8
    2376:	d004      	beq.n	2382 <vCommandConsoleTask+0x1f2>
    2378:	230c      	movs	r3, #12
    237a:	18fb      	adds	r3, r7, r3
    237c:	781b      	ldrb	r3, [r3, #0]
    237e:	2b7f      	cmp	r3, #127	; 0x7f
    2380:	d11c      	bne.n	23bc <vCommandConsoleTask+0x22c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
    2382:	2308      	movs	r3, #8
    2384:	18fb      	adds	r3, r7, r3
    2386:	4a44      	ldr	r2, [pc, #272]	; (2498 <vCommandConsoleTask+0x308>)
    2388:	6812      	ldr	r2, [r2, #0]
    238a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
    238c:	2308      	movs	r3, #8
    238e:	18fb      	adds	r3, r7, r3
    2390:	0018      	movs	r0, r3
    2392:	4b2b      	ldr	r3, [pc, #172]	; (2440 <vCommandConsoleTask+0x2b0>)
    2394:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
    2396:	2317      	movs	r3, #23
    2398:	18fb      	adds	r3, r7, r3
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	2b00      	cmp	r3, #0
    239e:	d037      	beq.n	2410 <vCommandConsoleTask+0x280>
                    cInputIndex--;
    23a0:	2317      	movs	r3, #23
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	781a      	ldrb	r2, [r3, #0]
    23a6:	2317      	movs	r3, #23
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	3a01      	subs	r2, #1
    23ac:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
    23ae:	2317      	movs	r3, #23
    23b0:	18fb      	adds	r3, r7, r3
    23b2:	781b      	ldrb	r3, [r3, #0]
    23b4:	4a2c      	ldr	r2, [pc, #176]	; (2468 <vCommandConsoleTask+0x2d8>)
    23b6:	2100      	movs	r1, #0
    23b8:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    23ba:	e029      	b.n	2410 <vCommandConsoleTask+0x280>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
    23bc:	230c      	movs	r3, #12
    23be:	18fb      	adds	r3, r7, r3
    23c0:	781b      	ldrb	r3, [r3, #0]
    23c2:	2b1b      	cmp	r3, #27
    23c4:	d106      	bne.n	23d4 <vCommandConsoleTask+0x244>
                isEscapeCode = true;  // Next characters will be code arguments
    23c6:	4b26      	ldr	r3, [pc, #152]	; (2460 <vCommandConsoleTask+0x2d0>)
    23c8:	2201      	movs	r2, #1
    23ca:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
    23cc:	4b25      	ldr	r3, [pc, #148]	; (2464 <vCommandConsoleTask+0x2d4>)
    23ce:	2200      	movs	r2, #0
    23d0:	701a      	strb	r2, [r3, #0]
    23d2:	e721      	b.n	2218 <vCommandConsoleTask+0x88>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
    23d4:	2317      	movs	r3, #23
    23d6:	18fb      	adds	r3, r7, r3
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	2b31      	cmp	r3, #49	; 0x31
    23dc:	d80e      	bhi.n	23fc <vCommandConsoleTask+0x26c>
                    pcInputString[cInputIndex] = cRxedChar[0];
    23de:	2317      	movs	r3, #23
    23e0:	18fb      	adds	r3, r7, r3
    23e2:	781b      	ldrb	r3, [r3, #0]
    23e4:	220c      	movs	r2, #12
    23e6:	18ba      	adds	r2, r7, r2
    23e8:	7811      	ldrb	r1, [r2, #0]
    23ea:	4a1f      	ldr	r2, [pc, #124]	; (2468 <vCommandConsoleTask+0x2d8>)
    23ec:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
    23ee:	2317      	movs	r3, #23
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	781a      	ldrb	r2, [r3, #0]
    23f4:	2317      	movs	r3, #23
    23f6:	18fb      	adds	r3, r7, r3
    23f8:	3201      	adds	r2, #1
    23fa:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
    23fc:	230c      	movs	r3, #12
    23fe:	18fb      	adds	r3, r7, r3
    2400:	2200      	movs	r2, #0
    2402:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
    2404:	230c      	movs	r3, #12
    2406:	18fb      	adds	r3, r7, r3
    2408:	0018      	movs	r0, r3
    240a:	4b0d      	ldr	r3, [pc, #52]	; (2440 <vCommandConsoleTask+0x2b0>)
    240c:	4798      	blx	r3
    240e:	e703      	b.n	2218 <vCommandConsoleTask+0x88>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    2410:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
    2412:	e701      	b.n	2218 <vCommandConsoleTask+0x88>
    2414:	00025078 	.word	0x00025078
    2418:	00005949 	.word	0x00005949
    241c:	00025068 	.word	0x00025068
    2420:	000250e8 	.word	0x000250e8
    2424:	00025088 	.word	0x00025088
    2428:	00025098 	.word	0x00025098
    242c:	000250a8 	.word	0x000250a8
    2430:	000250b8 	.word	0x000250b8
    2434:	000250c8 	.word	0x000250c8
    2438:	000250d8 	.word	0x000250d8
    243c:	00024db4 	.word	0x00024db4
    2440:	0000b875 	.word	0x0000b875
    2444:	00007f15 	.word	0x00007f15
    2448:	200048c0 	.word	0x200048c0
    244c:	00024fd0 	.word	0x00024fd0
    2450:	0000b961 	.word	0x0000b961
    2454:	00009d01 	.word	0x00009d01
    2458:	0000249d 	.word	0x0000249d
    245c:	00024ff0 	.word	0x00024ff0
    2460:	200007c4 	.word	0x200007c4
    2464:	200007c5 	.word	0x200007c5
    2468:	200007fc 	.word	0x200007fc
    246c:	200007c8 	.word	0x200007c8
    2470:	00023187 	.word	0x00023187
    2474:	20000830 	.word	0x20000830
    2478:	000059b9 	.word	0x000059b9
    247c:	00022dbb 	.word	0x00022dbb
    2480:	20000894 	.word	0x20000894
    2484:	00024ff4 	.word	0x00024ff4
    2488:	000230bd 	.word	0x000230bd
    248c:	00024ff8 	.word	0x00024ff8
    2490:	00023079 	.word	0x00023079
    2494:	00023157 	.word	0x00023157
    2498:	00025000 	.word	0x00025000

0000249c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
    249c:	b580      	push	{r7, lr}
    249e:	b084      	sub	sp, #16
    24a0:	af00      	add	r7, sp, #0
    24a2:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	0018      	movs	r0, r3
    24a8:	4b0c      	ldr	r3, [pc, #48]	; (24dc <FreeRTOS_read+0x40>)
    24aa:	4798      	blx	r3
    24ac:	0003      	movs	r3, r0
    24ae:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
    24b0:	e00d      	b.n	24ce <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
    24b2:	4b0b      	ldr	r3, [pc, #44]	; (24e0 <FreeRTOS_read+0x44>)
    24b4:	681a      	ldr	r2, [r3, #0]
    24b6:	2301      	movs	r3, #1
    24b8:	425b      	negs	r3, r3
    24ba:	0019      	movs	r1, r3
    24bc:	0010      	movs	r0, r2
    24be:	4b09      	ldr	r3, [pc, #36]	; (24e4 <FreeRTOS_read+0x48>)
    24c0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
    24c2:	687b      	ldr	r3, [r7, #4]
    24c4:	0018      	movs	r0, r3
    24c6:	4b05      	ldr	r3, [pc, #20]	; (24dc <FreeRTOS_read+0x40>)
    24c8:	4798      	blx	r3
    24ca:	0003      	movs	r3, r0
    24cc:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
    24ce:	68fb      	ldr	r3, [r7, #12]
    24d0:	3301      	adds	r3, #1
    24d2:	d0ee      	beq.n	24b2 <FreeRTOS_read+0x16>
    }
}
    24d4:	46c0      	nop			; (mov r8, r8)
    24d6:	46bd      	mov	sp, r7
    24d8:	b004      	add	sp, #16
    24da:	bd80      	pop	{r7, pc}
    24dc:	0000b911 	.word	0x0000b911
    24e0:	200048c0 	.word	0x200048c0
    24e4:	00008ecd 	.word	0x00008ecd

000024e8 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
    24e8:	b580      	push	{r7, lr}
    24ea:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
    24ec:	4b0a      	ldr	r3, [pc, #40]	; (2518 <CliCharReadySemaphoreGiveFromISR+0x30>)
    24ee:	2200      	movs	r2, #0
    24f0:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
    24f2:	4b0a      	ldr	r3, [pc, #40]	; (251c <CliCharReadySemaphoreGiveFromISR+0x34>)
    24f4:	681b      	ldr	r3, [r3, #0]
    24f6:	4a08      	ldr	r2, [pc, #32]	; (2518 <CliCharReadySemaphoreGiveFromISR+0x30>)
    24f8:	0011      	movs	r1, r2
    24fa:	0018      	movs	r0, r3
    24fc:	4b08      	ldr	r3, [pc, #32]	; (2520 <CliCharReadySemaphoreGiveFromISR+0x38>)
    24fe:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2500:	4b05      	ldr	r3, [pc, #20]	; (2518 <CliCharReadySemaphoreGiveFromISR+0x30>)
    2502:	681b      	ldr	r3, [r3, #0]
    2504:	2b00      	cmp	r3, #0
    2506:	d003      	beq.n	2510 <CliCharReadySemaphoreGiveFromISR+0x28>
    2508:	4b06      	ldr	r3, [pc, #24]	; (2524 <CliCharReadySemaphoreGiveFromISR+0x3c>)
    250a:	2280      	movs	r2, #128	; 0x80
    250c:	0552      	lsls	r2, r2, #21
    250e:	601a      	str	r2, [r3, #0]
}
    2510:	46c0      	nop			; (mov r8, r8)
    2512:	46bd      	mov	sp, r7
    2514:	bd80      	pop	{r7, pc}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	20000898 	.word	0x20000898
    251c:	200048c0 	.word	0x200048c0
    2520:	00008845 	.word	0x00008845
    2524:	e000ed04 	.word	0xe000ed04

00002528 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2528:	b580      	push	{r7, lr}
    252a:	b084      	sub	sp, #16
    252c:	af00      	add	r7, sp, #0
    252e:	60f8      	str	r0, [r7, #12]
    2530:	60b9      	str	r1, [r7, #8]
    2532:	607a      	str	r2, [r7, #4]

    return pdFALSE;
    2534:	2300      	movs	r3, #0
}
    2536:	0018      	movs	r0, r3
    2538:	46bd      	mov	sp, r7
    253a:	b004      	add	sp, #16
    253c:	bd80      	pop	{r7, pc}
	...

00002540 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2540:	b590      	push	{r4, r7, lr}
    2542:	b087      	sub	sp, #28
    2544:	af00      	add	r7, sp, #0
    2546:	60f8      	str	r0, [r7, #12]
    2548:	60b9      	str	r1, [r7, #8]
    254a:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
    254c:	2317      	movs	r3, #23
    254e:	18fb      	adds	r3, r7, r3
    2550:	221b      	movs	r2, #27
    2552:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    2554:	2317      	movs	r3, #23
    2556:	18fb      	adds	r3, r7, r3
    2558:	781b      	ldrb	r3, [r3, #0]
    255a:	4a08      	ldr	r2, [pc, #32]	; (257c <xCliClearTerminalScreen+0x3c>)
    255c:	4808      	ldr	r0, [pc, #32]	; (2580 <xCliClearTerminalScreen+0x40>)
    255e:	210f      	movs	r1, #15
    2560:	4c08      	ldr	r4, [pc, #32]	; (2584 <xCliClearTerminalScreen+0x44>)
    2562:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    2564:	4a06      	ldr	r2, [pc, #24]	; (2580 <xCliClearTerminalScreen+0x40>)
    2566:	68b9      	ldr	r1, [r7, #8]
    2568:	68fb      	ldr	r3, [r7, #12]
    256a:	0018      	movs	r0, r3
    256c:	4b05      	ldr	r3, [pc, #20]	; (2584 <xCliClearTerminalScreen+0x44>)
    256e:	4798      	blx	r3
    return pdFALSE;
    2570:	2300      	movs	r3, #0
}
    2572:	0018      	movs	r0, r3
    2574:	46bd      	mov	sp, r7
    2576:	b007      	add	sp, #28
    2578:	bd90      	pop	{r4, r7, pc}
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	00025004 	.word	0x00025004
    2580:	200007b4 	.word	0x200007b4
    2584:	00023015 	.word	0x00023015

00002588 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2588:	b580      	push	{r7, lr}
    258a:	b084      	sub	sp, #16
    258c:	af00      	add	r7, sp, #0
    258e:	60f8      	str	r0, [r7, #12]
    2590:	60b9      	str	r1, [r7, #8]
    2592:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
    2594:	2002      	movs	r0, #2
    2596:	4b03      	ldr	r3, [pc, #12]	; (25a4 <CLI_OTAU+0x1c>)
    2598:	4798      	blx	r3

    return pdFALSE;
    259a:	2300      	movs	r3, #0
}
    259c:	0018      	movs	r0, r3
    259e:	46bd      	mov	sp, r7
    25a0:	b004      	add	sp, #16
    25a2:	bd80      	pop	{r7, pc}
    25a4:	00004f59 	.word	0x00004f59

000025a8 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    25a8:	b580      	push	{r7, lr}
    25aa:	b084      	sub	sp, #16
    25ac:	af00      	add	r7, sp, #0
    25ae:	60f8      	str	r0, [r7, #12]
    25b0:	60b9      	str	r1, [r7, #8]
    25b2:	607a      	str	r2, [r7, #4]
    system_reset();
    25b4:	4b03      	ldr	r3, [pc, #12]	; (25c4 <CLI_ResetDevice+0x1c>)
    25b6:	4798      	blx	r3
    return pdFALSE;
    25b8:	2300      	movs	r3, #0
}
    25ba:	0018      	movs	r0, r3
    25bc:	46bd      	mov	sp, r7
    25be:	b004      	add	sp, #16
    25c0:	bd80      	pop	{r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	0000217d 	.word	0x0000217d

000025c8 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b084      	sub	sp, #16
    25cc:	af00      	add	r7, sp, #0
    25ce:	60f8      	str	r0, [r7, #12]
    25d0:	60b9      	str	r1, [r7, #8]
    25d2:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
    25d4:	4a05      	ldr	r2, [pc, #20]	; (25ec <CLI_NeotrellisSetLed+0x24>)
    25d6:	68b9      	ldr	r1, [r7, #8]
    25d8:	68fb      	ldr	r3, [r7, #12]
    25da:	0018      	movs	r0, r3
    25dc:	4b04      	ldr	r3, [pc, #16]	; (25f0 <CLI_NeotrellisSetLed+0x28>)
    25de:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
    25e0:	2300      	movs	r3, #0
}
    25e2:	0018      	movs	r0, r3
    25e4:	46bd      	mov	sp, r7
    25e6:	b004      	add	sp, #16
    25e8:	bd80      	pop	{r7, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	0002500c 	.word	0x0002500c
    25f0:	00023015 	.word	0x00023015

000025f4 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b084      	sub	sp, #16
    25f8:	af00      	add	r7, sp, #0
    25fa:	60f8      	str	r0, [r7, #12]
    25fc:	60b9      	str	r1, [r7, #8]
    25fe:	607a      	str	r2, [r7, #4]
	return pdTRUE;
    2600:	2301      	movs	r3, #1
}
    2602:	0018      	movs	r0, r3
    2604:	46bd      	mov	sp, r7
    2606:	b004      	add	sp, #16
    2608:	bd80      	pop	{r7, pc}

0000260a <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    260a:	b580      	push	{r7, lr}
    260c:	b084      	sub	sp, #16
    260e:	af00      	add	r7, sp, #0
    2610:	60f8      	str	r0, [r7, #12]
    2612:	60b9      	str	r1, [r7, #8]
    2614:	607a      	str	r2, [r7, #4]
    return pdFALSE;
    2616:	2300      	movs	r3, #0
}
    2618:	0018      	movs	r0, r3
    261a:	46bd      	mov	sp, r7
    261c:	b004      	add	sp, #16
    261e:	bd80      	pop	{r7, pc}

00002620 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2620:	b580      	push	{r7, lr}
    2622:	b084      	sub	sp, #16
    2624:	af00      	add	r7, sp, #0
    2626:	60f8      	str	r0, [r7, #12]
    2628:	60b9      	str	r1, [r7, #8]
    262a:	607a      	str	r2, [r7, #4]
    return pdFALSE;
    262c:	2300      	movs	r3, #0
}
    262e:	0018      	movs	r0, r3
    2630:	46bd      	mov	sp, r7
    2632:	b004      	add	sp, #16
    2634:	bd80      	pop	{r7, pc}
	...

00002638 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2638:	b590      	push	{r4, r7, lr}
    263a:	b08f      	sub	sp, #60	; 0x3c
    263c:	af00      	add	r7, sp, #0
    263e:	60f8      	str	r0, [r7, #12]
    2640:	60b9      	str	r1, [r7, #8]
    2642:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
    2644:	2318      	movs	r3, #24
    2646:	18fb      	adds	r3, r7, r3
    2648:	2200      	movs	r2, #0
    264a:	701a      	strb	r2, [r3, #0]
    264c:	2318      	movs	r3, #24
    264e:	18fb      	adds	r3, r7, r3
    2650:	2200      	movs	r2, #0
    2652:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
    2654:	2318      	movs	r3, #24
    2656:	18fb      	adds	r3, r7, r3
    2658:	2200      	movs	r2, #0
    265a:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
    265c:	2318      	movs	r3, #24
    265e:	18fb      	adds	r3, r7, r3
    2660:	2200      	movs	r2, #0
    2662:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
    2664:	231c      	movs	r3, #28
    2666:	18fb      	adds	r3, r7, r3
    2668:	2200      	movs	r2, #0
    266a:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
    266c:	231c      	movs	r3, #28
    266e:	18fb      	adds	r3, r7, r3
    2670:	2214      	movs	r2, #20
    2672:	18ba      	adds	r2, r7, r2
    2674:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
    2676:	231c      	movs	r3, #28
    2678:	18fb      	adds	r3, r7, r3
    267a:	2201      	movs	r2, #1
    267c:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
    267e:	231c      	movs	r3, #28
    2680:	18fb      	adds	r3, r7, r3
    2682:	2218      	movs	r2, #24
    2684:	18ba      	adds	r2, r7, r2
    2686:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
    2688:	231c      	movs	r3, #28
    268a:	18fb      	adds	r3, r7, r3
    268c:	2201      	movs	r2, #1
    268e:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
    2690:	4b2a      	ldr	r3, [pc, #168]	; (273c <CLI_i2cScan+0x104>)
    2692:	0018      	movs	r0, r3
    2694:	4b2a      	ldr	r3, [pc, #168]	; (2740 <CLI_i2cScan+0x108>)
    2696:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
    2698:	2300      	movs	r3, #0
    269a:	637b      	str	r3, [r7, #52]	; 0x34
    269c:	e042      	b.n	2724 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
    269e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    26a0:	4a28      	ldr	r2, [pc, #160]	; (2744 <CLI_i2cScan+0x10c>)
    26a2:	4829      	ldr	r0, [pc, #164]	; (2748 <CLI_i2cScan+0x110>)
    26a4:	210f      	movs	r1, #15
    26a6:	4c29      	ldr	r4, [pc, #164]	; (274c <CLI_i2cScan+0x114>)
    26a8:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
    26aa:	4b27      	ldr	r3, [pc, #156]	; (2748 <CLI_i2cScan+0x110>)
    26ac:	0018      	movs	r0, r3
    26ae:	4b24      	ldr	r3, [pc, #144]	; (2740 <CLI_i2cScan+0x108>)
    26b0:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
    26b2:	2300      	movs	r3, #0
    26b4:	633b      	str	r3, [r7, #48]	; 0x30
    26b6:	e02b      	b.n	2710 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
    26b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    26ba:	b2da      	uxtb	r2, r3
    26bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    26be:	b2db      	uxtb	r3, r3
    26c0:	18d3      	adds	r3, r2, r3
    26c2:	b2da      	uxtb	r2, r3
    26c4:	231c      	movs	r3, #28
    26c6:	18fb      	adds	r3, r7, r3
    26c8:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
    26ca:	231c      	movs	r3, #28
    26cc:	18fb      	adds	r3, r7, r3
    26ce:	2264      	movs	r2, #100	; 0x64
    26d0:	2164      	movs	r1, #100	; 0x64
    26d2:	0018      	movs	r0, r3
    26d4:	4b1e      	ldr	r3, [pc, #120]	; (2750 <CLI_i2cScan+0x118>)
    26d6:	4798      	blx	r3
    26d8:	0003      	movs	r3, r0
    26da:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
    26dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    26de:	2b00      	cmp	r3, #0
    26e0:	d10c      	bne.n	26fc <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
    26e2:	231c      	movs	r3, #28
    26e4:	18fb      	adds	r3, r7, r3
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	4a1a      	ldr	r2, [pc, #104]	; (2754 <CLI_i2cScan+0x11c>)
    26ea:	4817      	ldr	r0, [pc, #92]	; (2748 <CLI_i2cScan+0x110>)
    26ec:	210f      	movs	r1, #15
    26ee:	4c17      	ldr	r4, [pc, #92]	; (274c <CLI_i2cScan+0x114>)
    26f0:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
    26f2:	4b15      	ldr	r3, [pc, #84]	; (2748 <CLI_i2cScan+0x110>)
    26f4:	0018      	movs	r0, r3
    26f6:	4b12      	ldr	r3, [pc, #72]	; (2740 <CLI_i2cScan+0x108>)
    26f8:	4798      	blx	r3
    26fa:	e006      	b.n	270a <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
    26fc:	4b12      	ldr	r3, [pc, #72]	; (2748 <CLI_i2cScan+0x110>)
    26fe:	4a16      	ldr	r2, [pc, #88]	; (2758 <CLI_i2cScan+0x120>)
    2700:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
    2702:	4b11      	ldr	r3, [pc, #68]	; (2748 <CLI_i2cScan+0x110>)
    2704:	0018      	movs	r0, r3
    2706:	4b0e      	ldr	r3, [pc, #56]	; (2740 <CLI_i2cScan+0x108>)
    2708:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
    270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    270c:	3301      	adds	r3, #1
    270e:	633b      	str	r3, [r7, #48]	; 0x30
    2710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2712:	2b0f      	cmp	r3, #15
    2714:	ddd0      	ble.n	26b8 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
    2716:	4b11      	ldr	r3, [pc, #68]	; (275c <CLI_i2cScan+0x124>)
    2718:	0018      	movs	r0, r3
    271a:	4b09      	ldr	r3, [pc, #36]	; (2740 <CLI_i2cScan+0x108>)
    271c:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
    271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2720:	3310      	adds	r3, #16
    2722:	637b      	str	r3, [r7, #52]	; 0x34
    2724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2726:	2b7f      	cmp	r3, #127	; 0x7f
    2728:	ddb9      	ble.n	269e <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
    272a:	4b0c      	ldr	r3, [pc, #48]	; (275c <CLI_i2cScan+0x124>)
    272c:	0018      	movs	r0, r3
    272e:	4b04      	ldr	r3, [pc, #16]	; (2740 <CLI_i2cScan+0x108>)
    2730:	4798      	blx	r3
			return pdFALSE;
    2732:	2300      	movs	r3, #0

}
    2734:	0018      	movs	r0, r3
    2736:	46bd      	mov	sp, r7
    2738:	b00f      	add	sp, #60	; 0x3c
    273a:	bd90      	pop	{r4, r7, pc}
    273c:	00025024 	.word	0x00025024
    2740:	0000b875 	.word	0x0000b875
    2744:	00025058 	.word	0x00025058
    2748:	200007b4 	.word	0x200007b4
    274c:	00023015 	.word	0x00023015
    2750:	00002f41 	.word	0x00002f41
    2754:	00025060 	.word	0x00025060
    2758:	00202058 	.word	0x00202058
    275c:	00024ff0 	.word	0x00024ff0

00002760 <system_interrupt_enable>:
{
    2760:	b580      	push	{r7, lr}
    2762:	b082      	sub	sp, #8
    2764:	af00      	add	r7, sp, #0
    2766:	0002      	movs	r2, r0
    2768:	1dfb      	adds	r3, r7, #7
    276a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    276c:	4b06      	ldr	r3, [pc, #24]	; (2788 <system_interrupt_enable+0x28>)
    276e:	1dfa      	adds	r2, r7, #7
    2770:	7812      	ldrb	r2, [r2, #0]
    2772:	0011      	movs	r1, r2
    2774:	221f      	movs	r2, #31
    2776:	400a      	ands	r2, r1
    2778:	2101      	movs	r1, #1
    277a:	4091      	lsls	r1, r2
    277c:	000a      	movs	r2, r1
    277e:	601a      	str	r2, [r3, #0]
}
    2780:	46c0      	nop			; (mov r8, r8)
    2782:	46bd      	mov	sp, r7
    2784:	b002      	add	sp, #8
    2786:	bd80      	pop	{r7, pc}
    2788:	e000e100 	.word	0xe000e100

0000278c <i2c_master_is_syncing>:
{
    278c:	b580      	push	{r7, lr}
    278e:	b084      	sub	sp, #16
    2790:	af00      	add	r7, sp, #0
    2792:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2794:	687b      	ldr	r3, [r7, #4]
    2796:	681b      	ldr	r3, [r3, #0]
    2798:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	69db      	ldr	r3, [r3, #28]
    279e:	2207      	movs	r2, #7
    27a0:	4013      	ands	r3, r2
    27a2:	1e5a      	subs	r2, r3, #1
    27a4:	4193      	sbcs	r3, r2
    27a6:	b2db      	uxtb	r3, r3
}
    27a8:	0018      	movs	r0, r3
    27aa:	46bd      	mov	sp, r7
    27ac:	b004      	add	sp, #16
    27ae:	bd80      	pop	{r7, pc}

000027b0 <_i2c_master_wait_for_sync>:
{
    27b0:	b580      	push	{r7, lr}
    27b2:	b082      	sub	sp, #8
    27b4:	af00      	add	r7, sp, #0
    27b6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    27b8:	46c0      	nop			; (mov r8, r8)
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	0018      	movs	r0, r3
    27be:	4b04      	ldr	r3, [pc, #16]	; (27d0 <_i2c_master_wait_for_sync+0x20>)
    27c0:	4798      	blx	r3
    27c2:	1e03      	subs	r3, r0, #0
    27c4:	d1f9      	bne.n	27ba <_i2c_master_wait_for_sync+0xa>
}
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	46bd      	mov	sp, r7
    27ca:	b002      	add	sp, #8
    27cc:	bd80      	pop	{r7, pc}
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	0000278d 	.word	0x0000278d

000027d4 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b082      	sub	sp, #8
    27d8:	af00      	add	r7, sp, #0
    27da:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	2264      	movs	r2, #100	; 0x64
    27e0:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	4a1b      	ldr	r2, [pc, #108]	; (2854 <i2c_master_get_config_defaults+0x80>)
    27e6:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	2200      	movs	r2, #0
    27ec:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	2200      	movs	r2, #0
    27f2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	2200      	movs	r2, #0
    27f8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	2280      	movs	r2, #128	; 0x80
    27fe:	0392      	lsls	r2, r2, #14
    2800:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	2201      	movs	r2, #1
    2806:	4252      	negs	r2, r2
    2808:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	2201      	movs	r2, #1
    280e:	4252      	negs	r2, r2
    2810:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	2200      	movs	r2, #0
    2816:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	2200      	movs	r2, #0
    281c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	2224      	movs	r2, #36	; 0x24
    2822:	2100      	movs	r1, #0
    2824:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	2200      	movs	r2, #0
    282a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	222c      	movs	r2, #44	; 0x2c
    2830:	2100      	movs	r1, #0
    2832:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	222d      	movs	r2, #45	; 0x2d
    2838:	2100      	movs	r1, #0
    283a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	222e      	movs	r2, #46	; 0x2e
    2840:	2100      	movs	r1, #0
    2842:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	22d7      	movs	r2, #215	; 0xd7
    2848:	861a      	strh	r2, [r3, #48]	; 0x30
}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	46bd      	mov	sp, r7
    284e:	b002      	add	sp, #8
    2850:	bd80      	pop	{r7, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	00000d48 	.word	0x00000d48

00002858 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    2858:	b580      	push	{r7, lr}
    285a:	b084      	sub	sp, #16
    285c:	af00      	add	r7, sp, #0
    285e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	681b      	ldr	r3, [r3, #0]
    2864:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    2866:	2300      	movs	r3, #0
    2868:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	0018      	movs	r0, r3
    286e:	4b14      	ldr	r3, [pc, #80]	; (28c0 <i2c_master_enable+0x68>)
    2870:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2872:	68bb      	ldr	r3, [r7, #8]
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	2202      	movs	r2, #2
    2878:	431a      	orrs	r2, r3
    287a:	68bb      	ldr	r3, [r7, #8]
    287c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	681b      	ldr	r3, [r3, #0]
    2882:	0018      	movs	r0, r3
    2884:	4b0f      	ldr	r3, [pc, #60]	; (28c4 <i2c_master_enable+0x6c>)
    2886:	4798      	blx	r3
    2888:	0003      	movs	r3, r0
    288a:	0018      	movs	r0, r3
    288c:	4b0e      	ldr	r3, [pc, #56]	; (28c8 <i2c_master_enable+0x70>)
    288e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2890:	e00c      	b.n	28ac <i2c_master_enable+0x54>
		timeout_counter++;
    2892:	68fb      	ldr	r3, [r7, #12]
    2894:	3301      	adds	r3, #1
    2896:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2898:	687b      	ldr	r3, [r7, #4]
    289a:	88db      	ldrh	r3, [r3, #6]
    289c:	001a      	movs	r2, r3
    289e:	68fb      	ldr	r3, [r7, #12]
    28a0:	429a      	cmp	r2, r3
    28a2:	d803      	bhi.n	28ac <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    28a4:	68bb      	ldr	r3, [r7, #8]
    28a6:	2210      	movs	r2, #16
    28a8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    28aa:	e006      	b.n	28ba <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    28ac:	68bb      	ldr	r3, [r7, #8]
    28ae:	8b5b      	ldrh	r3, [r3, #26]
    28b0:	b29b      	uxth	r3, r3
    28b2:	001a      	movs	r2, r3
    28b4:	2310      	movs	r3, #16
    28b6:	4013      	ands	r3, r2
    28b8:	d0eb      	beq.n	2892 <i2c_master_enable+0x3a>
		}
	}
}
    28ba:	46bd      	mov	sp, r7
    28bc:	b004      	add	sp, #16
    28be:	bd80      	pop	{r7, pc}
    28c0:	000027b1 	.word	0x000027b1
    28c4:	000151ed 	.word	0x000151ed
    28c8:	00002761 	.word	0x00002761

000028cc <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	000a      	movs	r2, r1
    28d6:	1cfb      	adds	r3, r7, #3
    28d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	7e5b      	ldrb	r3, [r3, #25]
    28de:	b2db      	uxtb	r3, r3
    28e0:	b25a      	sxtb	r2, r3
    28e2:	1cfb      	adds	r3, r7, #3
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	2101      	movs	r1, #1
    28e8:	4099      	lsls	r1, r3
    28ea:	000b      	movs	r3, r1
    28ec:	b25b      	sxtb	r3, r3
    28ee:	4313      	orrs	r3, r2
    28f0:	b25b      	sxtb	r3, r3
    28f2:	b2da      	uxtb	r2, r3
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	765a      	strb	r2, [r3, #25]
}
    28f8:	46c0      	nop			; (mov r8, r8)
    28fa:	46bd      	mov	sp, r7
    28fc:	b002      	add	sp, #8
    28fe:	bd80      	pop	{r7, pc}

00002900 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
    2900:	b590      	push	{r4, r7, lr}
    2902:	b091      	sub	sp, #68	; 0x44
    2904:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    2906:	2300      	movs	r3, #0
    2908:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
    290a:	233a      	movs	r3, #58	; 0x3a
    290c:	18fb      	adds	r3, r7, r3
    290e:	2200      	movs	r2, #0
    2910:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
    2912:	1d3b      	adds	r3, r7, #4
    2914:	0018      	movs	r0, r3
    2916:	4b21      	ldr	r3, [pc, #132]	; (299c <I2cDriverConfigureSensorBus+0x9c>)
    2918:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    291a:	1d3b      	adds	r3, r7, #4
    291c:	4a20      	ldr	r2, [pc, #128]	; (29a0 <I2cDriverConfigureSensorBus+0xa0>)
    291e:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    2920:	1d3b      	adds	r3, r7, #4
    2922:	4a20      	ldr	r2, [pc, #128]	; (29a4 <I2cDriverConfigureSensorBus+0xa4>)
    2924:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
    2926:	1d3b      	adds	r3, r7, #4
    2928:	22fa      	movs	r2, #250	; 0xfa
    292a:	0092      	lsls	r2, r2, #2
    292c:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    292e:	233b      	movs	r3, #59	; 0x3b
    2930:	18fb      	adds	r3, r7, r3
    2932:	2203      	movs	r2, #3
    2934:	701a      	strb	r2, [r3, #0]
    2936:	e01e      	b.n	2976 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    2938:	233a      	movs	r3, #58	; 0x3a
    293a:	18fc      	adds	r4, r7, r3
    293c:	1d3a      	adds	r2, r7, #4
    293e:	491a      	ldr	r1, [pc, #104]	; (29a8 <I2cDriverConfigureSensorBus+0xa8>)
    2940:	4b1a      	ldr	r3, [pc, #104]	; (29ac <I2cDriverConfigureSensorBus+0xac>)
    2942:	0018      	movs	r0, r3
    2944:	4b1a      	ldr	r3, [pc, #104]	; (29b0 <I2cDriverConfigureSensorBus+0xb0>)
    2946:	4798      	blx	r3
    2948:	0003      	movs	r3, r0
    294a:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
    294c:	233a      	movs	r3, #58	; 0x3a
    294e:	18fb      	adds	r3, r7, r3
    2950:	781b      	ldrb	r3, [r3, #0]
    2952:	2b00      	cmp	r3, #0
    2954:	d104      	bne.n	2960 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
    2956:	233a      	movs	r3, #58	; 0x3a
    2958:	18fb      	adds	r3, r7, r3
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
    295e:	e00f      	b.n	2980 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
    2960:	4b12      	ldr	r3, [pc, #72]	; (29ac <I2cDriverConfigureSensorBus+0xac>)
    2962:	0018      	movs	r0, r3
    2964:	4b13      	ldr	r3, [pc, #76]	; (29b4 <I2cDriverConfigureSensorBus+0xb4>)
    2966:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    2968:	233b      	movs	r3, #59	; 0x3b
    296a:	18fb      	adds	r3, r7, r3
    296c:	781a      	ldrb	r2, [r3, #0]
    296e:	233b      	movs	r3, #59	; 0x3b
    2970:	18fb      	adds	r3, r7, r3
    2972:	3a01      	subs	r2, #1
    2974:	701a      	strb	r2, [r3, #0]
    2976:	233b      	movs	r3, #59	; 0x3b
    2978:	18fb      	adds	r3, r7, r3
    297a:	781b      	ldrb	r3, [r3, #0]
    297c:	2b00      	cmp	r3, #0
    297e:	d1db      	bne.n	2938 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
    2980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2982:	2b00      	cmp	r3, #0
    2984:	d104      	bne.n	2990 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
    2986:	4b09      	ldr	r3, [pc, #36]	; (29ac <I2cDriverConfigureSensorBus+0xac>)
    2988:	0018      	movs	r0, r3
    298a:	4b0b      	ldr	r3, [pc, #44]	; (29b8 <I2cDriverConfigureSensorBus+0xb8>)
    298c:	4798      	blx	r3
    298e:	e000      	b.n	2992 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
    2990:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
    2992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    2994:	0018      	movs	r0, r3
    2996:	46bd      	mov	sp, r7
    2998:	b011      	add	sp, #68	; 0x44
    299a:	bd90      	pop	{r4, r7, pc}
    299c:	000027d5 	.word	0x000027d5
    29a0:	00080002 	.word	0x00080002
    29a4:	00090002 	.word	0x00090002
    29a8:	42000800 	.word	0x42000800
    29ac:	200048c8 	.word	0x200048c8
    29b0:	000055a9 	.word	0x000055a9
    29b4:	000056dd 	.word	0x000056dd
    29b8:	00002859 	.word	0x00002859

000029bc <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
    29bc:	b580      	push	{r7, lr}
    29be:	b084      	sub	sp, #16
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    29c4:	4b0e      	ldr	r3, [pc, #56]	; (2a00 <I2cSensorsTxComplete+0x44>)
    29c6:	2200      	movs	r2, #0
    29c8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    29ca:	4b0d      	ldr	r3, [pc, #52]	; (2a00 <I2cSensorsTxComplete+0x44>)
    29cc:	2201      	movs	r2, #1
    29ce:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    29d0:	2300      	movs	r3, #0
    29d2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    29d4:	4b0b      	ldr	r3, [pc, #44]	; (2a04 <I2cSensorsTxComplete+0x48>)
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	220c      	movs	r2, #12
    29da:	18ba      	adds	r2, r7, r2
    29dc:	0011      	movs	r1, r2
    29de:	0018      	movs	r0, r3
    29e0:	4b09      	ldr	r3, [pc, #36]	; (2a08 <I2cSensorsTxComplete+0x4c>)
    29e2:	4798      	blx	r3
    sensorTransmitError = false;
    29e4:	4b09      	ldr	r3, [pc, #36]	; (2a0c <I2cSensorsTxComplete+0x50>)
    29e6:	2200      	movs	r2, #0
    29e8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	2b00      	cmp	r3, #0
    29ee:	d003      	beq.n	29f8 <I2cSensorsTxComplete+0x3c>
    29f0:	4b07      	ldr	r3, [pc, #28]	; (2a10 <I2cSensorsTxComplete+0x54>)
    29f2:	2280      	movs	r2, #128	; 0x80
    29f4:	0552      	lsls	r2, r2, #21
    29f6:	601a      	str	r2, [r3, #0]
}
    29f8:	46c0      	nop			; (mov r8, r8)
    29fa:	46bd      	mov	sp, r7
    29fc:	b004      	add	sp, #16
    29fe:	bd80      	pop	{r7, pc}
    2a00:	200008a0 	.word	0x200008a0
    2a04:	200048f0 	.word	0x200048f0
    2a08:	00008845 	.word	0x00008845
    2a0c:	2000089c 	.word	0x2000089c
    2a10:	e000ed04 	.word	0xe000ed04

00002a14 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
    2a14:	b580      	push	{r7, lr}
    2a16:	b084      	sub	sp, #16
    2a18:	af00      	add	r7, sp, #0
    2a1a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    2a1c:	4b0e      	ldr	r3, [pc, #56]	; (2a58 <I2cSensorsRxComplete+0x44>)
    2a1e:	2200      	movs	r2, #0
    2a20:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    2a22:	4b0d      	ldr	r3, [pc, #52]	; (2a58 <I2cSensorsRxComplete+0x44>)
    2a24:	2201      	movs	r2, #1
    2a26:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    2a28:	2300      	movs	r3, #0
    2a2a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    2a2c:	4b0b      	ldr	r3, [pc, #44]	; (2a5c <I2cSensorsRxComplete+0x48>)
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	220c      	movs	r2, #12
    2a32:	18ba      	adds	r2, r7, r2
    2a34:	0011      	movs	r1, r2
    2a36:	0018      	movs	r0, r3
    2a38:	4b09      	ldr	r3, [pc, #36]	; (2a60 <I2cSensorsRxComplete+0x4c>)
    2a3a:	4798      	blx	r3
    sensorTransmitError = false;
    2a3c:	4b09      	ldr	r3, [pc, #36]	; (2a64 <I2cSensorsRxComplete+0x50>)
    2a3e:	2200      	movs	r2, #0
    2a40:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d003      	beq.n	2a50 <I2cSensorsRxComplete+0x3c>
    2a48:	4b07      	ldr	r3, [pc, #28]	; (2a68 <I2cSensorsRxComplete+0x54>)
    2a4a:	2280      	movs	r2, #128	; 0x80
    2a4c:	0552      	lsls	r2, r2, #21
    2a4e:	601a      	str	r2, [r3, #0]
}
    2a50:	46c0      	nop			; (mov r8, r8)
    2a52:	46bd      	mov	sp, r7
    2a54:	b004      	add	sp, #16
    2a56:	bd80      	pop	{r7, pc}
    2a58:	200008a0 	.word	0x200008a0
    2a5c:	200048f0 	.word	0x200048f0
    2a60:	00008845 	.word	0x00008845
    2a64:	2000089c 	.word	0x2000089c
    2a68:	e000ed04 	.word	0xe000ed04

00002a6c <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
    2a6c:	b580      	push	{r7, lr}
    2a6e:	b084      	sub	sp, #16
    2a70:	af00      	add	r7, sp, #0
    2a72:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    2a74:	4b0e      	ldr	r3, [pc, #56]	; (2ab0 <I2cSensorsError+0x44>)
    2a76:	2200      	movs	r2, #0
    2a78:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
    2a7a:	4b0d      	ldr	r3, [pc, #52]	; (2ab0 <I2cSensorsError+0x44>)
    2a7c:	2201      	movs	r2, #1
    2a7e:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    2a80:	2300      	movs	r3, #0
    2a82:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    2a84:	4b0b      	ldr	r3, [pc, #44]	; (2ab4 <I2cSensorsError+0x48>)
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	220c      	movs	r2, #12
    2a8a:	18ba      	adds	r2, r7, r2
    2a8c:	0011      	movs	r1, r2
    2a8e:	0018      	movs	r0, r3
    2a90:	4b09      	ldr	r3, [pc, #36]	; (2ab8 <I2cSensorsError+0x4c>)
    2a92:	4798      	blx	r3
    sensorTransmitError = true;
    2a94:	4b09      	ldr	r3, [pc, #36]	; (2abc <I2cSensorsError+0x50>)
    2a96:	2201      	movs	r2, #1
    2a98:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2a9a:	68fb      	ldr	r3, [r7, #12]
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d003      	beq.n	2aa8 <I2cSensorsError+0x3c>
    2aa0:	4b07      	ldr	r3, [pc, #28]	; (2ac0 <I2cSensorsError+0x54>)
    2aa2:	2280      	movs	r2, #128	; 0x80
    2aa4:	0552      	lsls	r2, r2, #21
    2aa6:	601a      	str	r2, [r3, #0]
}
    2aa8:	46c0      	nop			; (mov r8, r8)
    2aaa:	46bd      	mov	sp, r7
    2aac:	b004      	add	sp, #16
    2aae:	bd80      	pop	{r7, pc}
    2ab0:	200008a0 	.word	0x200008a0
    2ab4:	200048f0 	.word	0x200048f0
    2ab8:	00008845 	.word	0x00008845
    2abc:	2000089c 	.word	0x2000089c
    2ac0:	e000ed04 	.word	0xe000ed04

00002ac4 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    2ac8:	4911      	ldr	r1, [pc, #68]	; (2b10 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
    2aca:	4b12      	ldr	r3, [pc, #72]	; (2b14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2acc:	2200      	movs	r2, #0
    2ace:	0018      	movs	r0, r3
    2ad0:	4b11      	ldr	r3, [pc, #68]	; (2b18 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    2ad2:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    2ad4:	4b0f      	ldr	r3, [pc, #60]	; (2b14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2ad6:	2100      	movs	r1, #0
    2ad8:	0018      	movs	r0, r3
    2ada:	4b10      	ldr	r3, [pc, #64]	; (2b1c <I2cDriverRegisterSensorBusCallbacks+0x58>)
    2adc:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    2ade:	4910      	ldr	r1, [pc, #64]	; (2b20 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
    2ae0:	4b0c      	ldr	r3, [pc, #48]	; (2b14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2ae2:	2201      	movs	r2, #1
    2ae4:	0018      	movs	r0, r3
    2ae6:	4b0c      	ldr	r3, [pc, #48]	; (2b18 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    2ae8:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
    2aea:	4b0a      	ldr	r3, [pc, #40]	; (2b14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2aec:	2101      	movs	r1, #1
    2aee:	0018      	movs	r0, r3
    2af0:	4b0a      	ldr	r3, [pc, #40]	; (2b1c <I2cDriverRegisterSensorBusCallbacks+0x58>)
    2af2:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
    2af4:	490b      	ldr	r1, [pc, #44]	; (2b24 <I2cDriverRegisterSensorBusCallbacks+0x60>)
    2af6:	4b07      	ldr	r3, [pc, #28]	; (2b14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2af8:	2202      	movs	r2, #2
    2afa:	0018      	movs	r0, r3
    2afc:	4b06      	ldr	r3, [pc, #24]	; (2b18 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    2afe:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
    2b00:	4b04      	ldr	r3, [pc, #16]	; (2b14 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    2b02:	2102      	movs	r1, #2
    2b04:	0018      	movs	r0, r3
    2b06:	4b05      	ldr	r3, [pc, #20]	; (2b1c <I2cDriverRegisterSensorBusCallbacks+0x58>)
    2b08:	4798      	blx	r3
}
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	46bd      	mov	sp, r7
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	000029bd 	.word	0x000029bd
    2b14:	200048c8 	.word	0x200048c8
    2b18:	00001c29 	.word	0x00001c29
    2b1c:	000028cd 	.word	0x000028cd
    2b20:	00002a15 	.word	0x00002a15
    2b24:	00002a6d 	.word	0x00002a6d

00002b28 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	b082      	sub	sp, #8
    2b2c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    2b2e:	2300      	movs	r3, #0
    2b30:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
    2b32:	4b14      	ldr	r3, [pc, #80]	; (2b84 <I2cInitializeDriver+0x5c>)
    2b34:	4798      	blx	r3
    2b36:	0003      	movs	r3, r0
    2b38:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d11a      	bne.n	2b76 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
    2b40:	4b11      	ldr	r3, [pc, #68]	; (2b88 <I2cInitializeDriver+0x60>)
    2b42:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
    2b44:	2001      	movs	r0, #1
    2b46:	4b11      	ldr	r3, [pc, #68]	; (2b8c <I2cInitializeDriver+0x64>)
    2b48:	4798      	blx	r3
    2b4a:	0002      	movs	r2, r0
    2b4c:	4b10      	ldr	r3, [pc, #64]	; (2b90 <I2cInitializeDriver+0x68>)
    2b4e:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    2b50:	2203      	movs	r2, #3
    2b52:	2100      	movs	r1, #0
    2b54:	2001      	movs	r0, #1
    2b56:	4b0f      	ldr	r3, [pc, #60]	; (2b94 <I2cInitializeDriver+0x6c>)
    2b58:	4798      	blx	r3
    2b5a:	0002      	movs	r2, r0
    2b5c:	4b0e      	ldr	r3, [pc, #56]	; (2b98 <I2cInitializeDriver+0x70>)
    2b5e:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
    2b60:	4b0b      	ldr	r3, [pc, #44]	; (2b90 <I2cInitializeDriver+0x68>)
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	2b00      	cmp	r3, #0
    2b66:	d003      	beq.n	2b70 <I2cInitializeDriver+0x48>
    2b68:	4b0b      	ldr	r3, [pc, #44]	; (2b98 <I2cInitializeDriver+0x70>)
    2b6a:	681b      	ldr	r3, [r3, #0]
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d103      	bne.n	2b78 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
    2b70:	2306      	movs	r3, #6
    2b72:	607b      	str	r3, [r7, #4]
        goto exit;
    2b74:	e000      	b.n	2b78 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
    2b76:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    2b78:	687b      	ldr	r3, [r7, #4]
}
    2b7a:	0018      	movs	r0, r3
    2b7c:	46bd      	mov	sp, r7
    2b7e:	b002      	add	sp, #8
    2b80:	bd80      	pop	{r7, pc}
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	00002901 	.word	0x00002901
    2b88:	00002ac5 	.word	0x00002ac5
    2b8c:	0000817d 	.word	0x0000817d
    2b90:	200048c4 	.word	0x200048c4
    2b94:	00007f15 	.word	0x00007f15
    2b98:	200048f0 	.word	0x200048f0

00002b9c <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
    2b9c:	b590      	push	{r4, r7, lr}
    2b9e:	b085      	sub	sp, #20
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    2ba4:	2300      	movs	r3, #0
    2ba6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	2b00      	cmp	r3, #0
    2bac:	d003      	beq.n	2bb6 <I2cWriteData+0x1a>
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	685b      	ldr	r3, [r3, #4]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d103      	bne.n	2bbe <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
    2bb6:	2308      	movs	r3, #8
    2bb8:	425b      	negs	r3, r3
    2bba:	60fb      	str	r3, [r7, #12]
        goto exit;
    2bbc:	e01f      	b.n	2bfe <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	781b      	ldrb	r3, [r3, #0]
    2bc2:	b29a      	uxth	r2, r3
    2bc4:	4b10      	ldr	r3, [pc, #64]	; (2c08 <I2cWriteData+0x6c>)
    2bc6:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	685a      	ldr	r2, [r3, #4]
    2bcc:	4b0e      	ldr	r3, [pc, #56]	; (2c08 <I2cWriteData+0x6c>)
    2bce:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	89da      	ldrh	r2, [r3, #14]
    2bd4:	4b0c      	ldr	r3, [pc, #48]	; (2c08 <I2cWriteData+0x6c>)
    2bd6:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    2bd8:	230b      	movs	r3, #11
    2bda:	18fc      	adds	r4, r7, r3
    2bdc:	4a0a      	ldr	r2, [pc, #40]	; (2c08 <I2cWriteData+0x6c>)
    2bde:	4b0b      	ldr	r3, [pc, #44]	; (2c0c <I2cWriteData+0x70>)
    2be0:	0011      	movs	r1, r2
    2be2:	0018      	movs	r0, r3
    2be4:	4b0a      	ldr	r3, [pc, #40]	; (2c10 <I2cWriteData+0x74>)
    2be6:	4798      	blx	r3
    2be8:	0003      	movs	r3, r0
    2bea:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    2bec:	230b      	movs	r3, #11
    2bee:	18fb      	adds	r3, r7, r3
    2bf0:	781b      	ldrb	r3, [r3, #0]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d003      	beq.n	2bfe <I2cWriteData+0x62>
        error = ERROR_IO;
    2bf6:	2306      	movs	r3, #6
    2bf8:	425b      	negs	r3, r3
    2bfa:	60fb      	str	r3, [r7, #12]
        goto exit;
    2bfc:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    2bfe:	68fb      	ldr	r3, [r7, #12]
}
    2c00:	0018      	movs	r0, r3
    2c02:	46bd      	mov	sp, r7
    2c04:	b005      	add	sp, #20
    2c06:	bd90      	pop	{r4, r7, pc}
    2c08:	200048f4 	.word	0x200048f4
    2c0c:	200048c8 	.word	0x200048c8
    2c10:	00001ead 	.word	0x00001ead

00002c14 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
    2c14:	b590      	push	{r4, r7, lr}
    2c16:	b085      	sub	sp, #20
    2c18:	af00      	add	r7, sp, #0
    2c1a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    2c1c:	2300      	movs	r3, #0
    2c1e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d003      	beq.n	2c2e <I2cReadData+0x1a>
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	685b      	ldr	r3, [r3, #4]
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d103      	bne.n	2c36 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
    2c2e:	2308      	movs	r3, #8
    2c30:	425b      	negs	r3, r3
    2c32:	60fb      	str	r3, [r7, #12]
        goto exit;
    2c34:	e01f      	b.n	2c76 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	781b      	ldrb	r3, [r3, #0]
    2c3a:	b29a      	uxth	r2, r3
    2c3c:	4b10      	ldr	r3, [pc, #64]	; (2c80 <I2cReadData+0x6c>)
    2c3e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
    2c40:	687b      	ldr	r3, [r7, #4]
    2c42:	689a      	ldr	r2, [r3, #8]
    2c44:	4b0e      	ldr	r3, [pc, #56]	; (2c80 <I2cReadData+0x6c>)
    2c46:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	899a      	ldrh	r2, [r3, #12]
    2c4c:	4b0c      	ldr	r3, [pc, #48]	; (2c80 <I2cReadData+0x6c>)
    2c4e:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    2c50:	230b      	movs	r3, #11
    2c52:	18fc      	adds	r4, r7, r3
    2c54:	4a0a      	ldr	r2, [pc, #40]	; (2c80 <I2cReadData+0x6c>)
    2c56:	4b0b      	ldr	r3, [pc, #44]	; (2c84 <I2cReadData+0x70>)
    2c58:	0011      	movs	r1, r2
    2c5a:	0018      	movs	r0, r3
    2c5c:	4b0a      	ldr	r3, [pc, #40]	; (2c88 <I2cReadData+0x74>)
    2c5e:	4798      	blx	r3
    2c60:	0003      	movs	r3, r0
    2c62:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    2c64:	230b      	movs	r3, #11
    2c66:	18fb      	adds	r3, r7, r3
    2c68:	781b      	ldrb	r3, [r3, #0]
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d003      	beq.n	2c76 <I2cReadData+0x62>
        error = ERROR_IO;
    2c6e:	2306      	movs	r3, #6
    2c70:	425b      	negs	r3, r3
    2c72:	60fb      	str	r3, [r7, #12]
        goto exit;
    2c74:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    2c76:	68fb      	ldr	r3, [r7, #12]
}
    2c78:	0018      	movs	r0, r3
    2c7a:	46bd      	mov	sp, r7
    2c7c:	b005      	add	sp, #20
    2c7e:	bd90      	pop	{r4, r7, pc}
    2c80:	200048f4 	.word	0x200048f4
    2c84:	200048c8 	.word	0x200048c8
    2c88:	00001dc9 	.word	0x00001dc9

00002c8c <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
    2c8c:	b590      	push	{r4, r7, lr}
    2c8e:	b083      	sub	sp, #12
    2c90:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
    2c92:	2300      	movs	r3, #0
    2c94:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
    2c96:	4b09      	ldr	r3, [pc, #36]	; (2cbc <I2cFreeMutex+0x30>)
    2c98:	6818      	ldr	r0, [r3, #0]
    2c9a:	2300      	movs	r3, #0
    2c9c:	2200      	movs	r2, #0
    2c9e:	2100      	movs	r1, #0
    2ca0:	4c07      	ldr	r4, [pc, #28]	; (2cc0 <I2cFreeMutex+0x34>)
    2ca2:	47a0      	blx	r4
    2ca4:	0003      	movs	r3, r0
    2ca6:	2b01      	cmp	r3, #1
    2ca8:	d002      	beq.n	2cb0 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
    2caa:	2314      	movs	r3, #20
    2cac:	425b      	negs	r3, r3
    2cae:	607b      	str	r3, [r7, #4]
    }
    return error;
    2cb0:	687b      	ldr	r3, [r7, #4]
}
    2cb2:	0018      	movs	r0, r3
    2cb4:	46bd      	mov	sp, r7
    2cb6:	b003      	add	sp, #12
    2cb8:	bd90      	pop	{r4, r7, pc}
    2cba:	46c0      	nop			; (mov r8, r8)
    2cbc:	200048c4 	.word	0x200048c4
    2cc0:	000081bd 	.word	0x000081bd

00002cc4 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b084      	sub	sp, #16
    2cc8:	af00      	add	r7, sp, #0
    2cca:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    2ccc:	2300      	movs	r3, #0
    2cce:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
    2cd0:	4b08      	ldr	r3, [pc, #32]	; (2cf4 <I2cGetMutex+0x30>)
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	687a      	ldr	r2, [r7, #4]
    2cd6:	0011      	movs	r1, r2
    2cd8:	0018      	movs	r0, r3
    2cda:	4b07      	ldr	r3, [pc, #28]	; (2cf8 <I2cGetMutex+0x34>)
    2cdc:	4798      	blx	r3
    2cde:	0003      	movs	r3, r0
    2ce0:	2b01      	cmp	r3, #1
    2ce2:	d002      	beq.n	2cea <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
    2ce4:	231d      	movs	r3, #29
    2ce6:	425b      	negs	r3, r3
    2ce8:	60fb      	str	r3, [r7, #12]
    }
    return error;
    2cea:	68fb      	ldr	r3, [r7, #12]
}
    2cec:	0018      	movs	r0, r3
    2cee:	46bd      	mov	sp, r7
    2cf0:	b004      	add	sp, #16
    2cf2:	bd80      	pop	{r7, pc}
    2cf4:	200048c4 	.word	0x200048c4
    2cf8:	00008ecd 	.word	0x00008ecd

00002cfc <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b084      	sub	sp, #16
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    2d04:	2300      	movs	r3, #0
    2d06:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
    2d08:	4b04      	ldr	r3, [pc, #16]	; (2d1c <I2cGetSemaphoreHandle+0x20>)
    2d0a:	681a      	ldr	r2, [r3, #0]
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	601a      	str	r2, [r3, #0]
    return error;
    2d10:	68fb      	ldr	r3, [r7, #12]
}
    2d12:	0018      	movs	r0, r3
    2d14:	46bd      	mov	sp, r7
    2d16:	b004      	add	sp, #16
    2d18:	bd80      	pop	{r7, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	200048f0 	.word	0x200048f0

00002d20 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
    2d20:	b580      	push	{r7, lr}
    2d22:	af00      	add	r7, sp, #0
    return sensorTransmitError;
    2d24:	4b02      	ldr	r3, [pc, #8]	; (2d30 <I2cGetTaskErrorStatus+0x10>)
    2d26:	781b      	ldrb	r3, [r3, #0]
}
    2d28:	0018      	movs	r0, r3
    2d2a:	46bd      	mov	sp, r7
    2d2c:	bd80      	pop	{r7, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	2000089c 	.word	0x2000089c

00002d34 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b082      	sub	sp, #8
    2d38:	af00      	add	r7, sp, #0
    2d3a:	0002      	movs	r2, r0
    2d3c:	1dfb      	adds	r3, r7, #7
    2d3e:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
    2d40:	4b03      	ldr	r3, [pc, #12]	; (2d50 <I2cSetTaskErrorStatus+0x1c>)
    2d42:	1dfa      	adds	r2, r7, #7
    2d44:	7812      	ldrb	r2, [r2, #0]
    2d46:	701a      	strb	r2, [r3, #0]
}
    2d48:	46c0      	nop			; (mov r8, r8)
    2d4a:	46bd      	mov	sp, r7
    2d4c:	b002      	add	sp, #8
    2d4e:	bd80      	pop	{r7, pc}
    2d50:	2000089c 	.word	0x2000089c

00002d54 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b084      	sub	sp, #16
    2d58:	af00      	add	r7, sp, #0
    2d5a:	6078      	str	r0, [r7, #4]
    2d5c:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
    2d5e:	2300      	movs	r3, #0
    2d60:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
    2d62:	2300      	movs	r3, #0
    2d64:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    2d66:	2396      	movs	r3, #150	; 0x96
    2d68:	005b      	lsls	r3, r3, #1
    2d6a:	0018      	movs	r0, r3
    2d6c:	4b28      	ldr	r3, [pc, #160]	; (2e10 <I2cWriteDataWait+0xbc>)
    2d6e:	4798      	blx	r3
    2d70:	0003      	movs	r3, r0
    2d72:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    2d74:	68fb      	ldr	r3, [r7, #12]
    2d76:	2b00      	cmp	r3, #0
    2d78:	d138      	bne.n	2dec <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    2d7a:	2308      	movs	r3, #8
    2d7c:	18fb      	adds	r3, r7, r3
    2d7e:	0018      	movs	r0, r3
    2d80:	4b24      	ldr	r3, [pc, #144]	; (2e14 <I2cWriteDataWait+0xc0>)
    2d82:	4798      	blx	r3
    2d84:	0003      	movs	r3, r0
    2d86:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d130      	bne.n	2df0 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	0018      	movs	r0, r3
    2d92:	4b21      	ldr	r3, [pc, #132]	; (2e18 <I2cWriteDataWait+0xc4>)
    2d94:	4798      	blx	r3
    2d96:	0003      	movs	r3, r0
    2d98:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d12a      	bne.n	2df6 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    2da0:	68bb      	ldr	r3, [r7, #8]
    2da2:	683a      	ldr	r2, [r7, #0]
    2da4:	0011      	movs	r1, r2
    2da6:	0018      	movs	r0, r3
    2da8:	4b1c      	ldr	r3, [pc, #112]	; (2e1c <I2cWriteDataWait+0xc8>)
    2daa:	4798      	blx	r3
    2dac:	0003      	movs	r3, r0
    2dae:	2b01      	cmp	r3, #1
    2db0:	d111      	bne.n	2dd6 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    2db2:	4b1b      	ldr	r3, [pc, #108]	; (2e20 <I2cWriteDataWait+0xcc>)
    2db4:	4798      	blx	r3
    2db6:	1e03      	subs	r3, r0, #0
    2db8:	d011      	beq.n	2dde <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
    2dba:	2000      	movs	r0, #0
    2dbc:	4b19      	ldr	r3, [pc, #100]	; (2e24 <I2cWriteDataWait+0xd0>)
    2dbe:	4798      	blx	r3
            if (error != ERROR_NONE) {
    2dc0:	68fb      	ldr	r3, [r7, #12]
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d003      	beq.n	2dce <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
    2dc6:	2321      	movs	r3, #33	; 0x21
    2dc8:	425b      	negs	r3, r3
    2dca:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
    2dcc:	e014      	b.n	2df8 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
    2dce:	2303      	movs	r3, #3
    2dd0:	425b      	negs	r3, r3
    2dd2:	60fb      	str	r3, [r7, #12]
            goto exitError0;
    2dd4:	e010      	b.n	2df8 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    2dd6:	2303      	movs	r3, #3
    2dd8:	425b      	negs	r3, r3
    2dda:	60fb      	str	r3, [r7, #12]
        goto exitError0;
    2ddc:	e00c      	b.n	2df8 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
    2dde:	4b12      	ldr	r3, [pc, #72]	; (2e28 <I2cWriteDataWait+0xd4>)
    2de0:	4798      	blx	r3
    2de2:	0002      	movs	r2, r0
    2de4:	68fb      	ldr	r3, [r7, #12]
    2de6:	4313      	orrs	r3, r2
    2de8:	60fb      	str	r3, [r7, #12]
    2dea:	e002      	b.n	2df2 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    2dec:	46c0      	nop			; (mov r8, r8)
    2dee:	e000      	b.n	2df2 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    2df0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    2df2:	68fb      	ldr	r3, [r7, #12]
    2df4:	e007      	b.n	2e06 <I2cWriteDataWait+0xb2>
        goto exitError0;
    2df6:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
    2df8:	4b0b      	ldr	r3, [pc, #44]	; (2e28 <I2cWriteDataWait+0xd4>)
    2dfa:	4798      	blx	r3
    2dfc:	0002      	movs	r2, r0
    2dfe:	68fb      	ldr	r3, [r7, #12]
    2e00:	4313      	orrs	r3, r2
    2e02:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
    2e04:	68fb      	ldr	r3, [r7, #12]
}
    2e06:	0018      	movs	r0, r3
    2e08:	46bd      	mov	sp, r7
    2e0a:	b004      	add	sp, #16
    2e0c:	bd80      	pop	{r7, pc}
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	00002cc5 	.word	0x00002cc5
    2e14:	00002cfd 	.word	0x00002cfd
    2e18:	00002b9d 	.word	0x00002b9d
    2e1c:	00008ecd 	.word	0x00008ecd
    2e20:	00002d21 	.word	0x00002d21
    2e24:	00002d35 	.word	0x00002d35
    2e28:	00002c8d 	.word	0x00002c8d

00002e2c <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
    2e2c:	b580      	push	{r7, lr}
    2e2e:	b086      	sub	sp, #24
    2e30:	af00      	add	r7, sp, #0
    2e32:	60f8      	str	r0, [r7, #12]
    2e34:	60b9      	str	r1, [r7, #8]
    2e36:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
    2e38:	2300      	movs	r3, #0
    2e3a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
    2e3c:	2300      	movs	r3, #0
    2e3e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    2e40:	2396      	movs	r3, #150	; 0x96
    2e42:	005b      	lsls	r3, r3, #1
    2e44:	0018      	movs	r0, r3
    2e46:	4b35      	ldr	r3, [pc, #212]	; (2f1c <I2cReadDataWait+0xf0>)
    2e48:	4798      	blx	r3
    2e4a:	0003      	movs	r3, r0
    2e4c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    2e4e:	697b      	ldr	r3, [r7, #20]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d155      	bne.n	2f00 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    2e54:	2310      	movs	r3, #16
    2e56:	18fb      	adds	r3, r7, r3
    2e58:	0018      	movs	r0, r3
    2e5a:	4b31      	ldr	r3, [pc, #196]	; (2f20 <I2cReadDataWait+0xf4>)
    2e5c:	4798      	blx	r3
    2e5e:	0003      	movs	r3, r0
    2e60:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    2e62:	697b      	ldr	r3, [r7, #20]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d14d      	bne.n	2f04 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    2e68:	68fb      	ldr	r3, [r7, #12]
    2e6a:	0018      	movs	r0, r3
    2e6c:	4b2d      	ldr	r3, [pc, #180]	; (2f24 <I2cReadDataWait+0xf8>)
    2e6e:	4798      	blx	r3
    2e70:	0003      	movs	r3, r0
    2e72:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    2e74:	697b      	ldr	r3, [r7, #20]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d147      	bne.n	2f0a <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    2e7a:	693b      	ldr	r3, [r7, #16]
    2e7c:	687a      	ldr	r2, [r7, #4]
    2e7e:	0011      	movs	r1, r2
    2e80:	0018      	movs	r0, r3
    2e82:	4b29      	ldr	r3, [pc, #164]	; (2f28 <I2cReadDataWait+0xfc>)
    2e84:	4798      	blx	r3
    2e86:	0003      	movs	r3, r0
    2e88:	2b01      	cmp	r3, #1
    2e8a:	d118      	bne.n	2ebe <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    2e8c:	4b27      	ldr	r3, [pc, #156]	; (2f2c <I2cReadDataWait+0x100>)
    2e8e:	4798      	blx	r3
    2e90:	1e03      	subs	r3, r0, #0
    2e92:	d006      	beq.n	2ea2 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
    2e94:	2000      	movs	r0, #0
    2e96:	4b26      	ldr	r3, [pc, #152]	; (2f30 <I2cReadDataWait+0x104>)
    2e98:	4798      	blx	r3
            error = ERROR_ABORTED;
    2e9a:	2303      	movs	r3, #3
    2e9c:	425b      	negs	r3, r3
    2e9e:	617b      	str	r3, [r7, #20]
            goto exitError0;
    2ea0:	e034      	b.n	2f0c <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
    2ea2:	68bb      	ldr	r3, [r7, #8]
    2ea4:	0018      	movs	r0, r3
    2ea6:	4b23      	ldr	r3, [pc, #140]	; (2f34 <I2cReadDataWait+0x108>)
    2ea8:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
    2eaa:	68fb      	ldr	r3, [r7, #12]
    2eac:	0018      	movs	r0, r3
    2eae:	4b22      	ldr	r3, [pc, #136]	; (2f38 <I2cReadDataWait+0x10c>)
    2eb0:	4798      	blx	r3
    2eb2:	0003      	movs	r3, r0
    2eb4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    2eb6:	697b      	ldr	r3, [r7, #20]
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d004      	beq.n	2ec6 <I2cReadDataWait+0x9a>
        goto exitError0;
    2ebc:	e026      	b.n	2f0c <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
    2ebe:	2303      	movs	r3, #3
    2ec0:	425b      	negs	r3, r3
    2ec2:	617b      	str	r3, [r7, #20]
        goto exitError0;
    2ec4:	e022      	b.n	2f0c <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    2ec6:	693b      	ldr	r3, [r7, #16]
    2ec8:	687a      	ldr	r2, [r7, #4]
    2eca:	0011      	movs	r1, r2
    2ecc:	0018      	movs	r0, r3
    2ece:	4b16      	ldr	r3, [pc, #88]	; (2f28 <I2cReadDataWait+0xfc>)
    2ed0:	4798      	blx	r3
    2ed2:	0003      	movs	r3, r0
    2ed4:	2b01      	cmp	r3, #1
    2ed6:	d10a      	bne.n	2eee <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    2ed8:	4b14      	ldr	r3, [pc, #80]	; (2f2c <I2cReadDataWait+0x100>)
    2eda:	4798      	blx	r3
    2edc:	1e03      	subs	r3, r0, #0
    2ede:	d00a      	beq.n	2ef6 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
    2ee0:	2000      	movs	r0, #0
    2ee2:	4b13      	ldr	r3, [pc, #76]	; (2f30 <I2cReadDataWait+0x104>)
    2ee4:	4798      	blx	r3
            error = ERROR_ABORTED;
    2ee6:	2303      	movs	r3, #3
    2ee8:	425b      	negs	r3, r3
    2eea:	617b      	str	r3, [r7, #20]
            goto exitError0;
    2eec:	e00e      	b.n	2f0c <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    2eee:	2303      	movs	r3, #3
    2ef0:	425b      	negs	r3, r3
    2ef2:	617b      	str	r3, [r7, #20]
        goto exitError0;
    2ef4:	e00a      	b.n	2f0c <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
    2ef6:	4b11      	ldr	r3, [pc, #68]	; (2f3c <I2cReadDataWait+0x110>)
    2ef8:	4798      	blx	r3
    2efa:	0003      	movs	r3, r0
    2efc:	617b      	str	r3, [r7, #20]
    2efe:	e002      	b.n	2f06 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
    2f00:	46c0      	nop			; (mov r8, r8)
    2f02:	e000      	b.n	2f06 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
    2f04:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    2f06:	697b      	ldr	r3, [r7, #20]
    2f08:	e003      	b.n	2f12 <I2cReadDataWait+0xe6>
        goto exitError0;
    2f0a:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
    2f0c:	4b0b      	ldr	r3, [pc, #44]	; (2f3c <I2cReadDataWait+0x110>)
    2f0e:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
    2f10:	697b      	ldr	r3, [r7, #20]
}
    2f12:	0018      	movs	r0, r3
    2f14:	46bd      	mov	sp, r7
    2f16:	b006      	add	sp, #24
    2f18:	bd80      	pop	{r7, pc}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	00002cc5 	.word	0x00002cc5
    2f20:	00002cfd 	.word	0x00002cfd
    2f24:	00002b9d 	.word	0x00002b9d
    2f28:	00008ecd 	.word	0x00008ecd
    2f2c:	00002d21 	.word	0x00002d21
    2f30:	00002d35 	.word	0x00002d35
    2f34:	00009c21 	.word	0x00009c21
    2f38:	00002c15 	.word	0x00002c15
    2f3c:	00002c8d 	.word	0x00002c8d

00002f40 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
    2f40:	b580      	push	{r7, lr}
    2f42:	b086      	sub	sp, #24
    2f44:	af00      	add	r7, sp, #0
    2f46:	60f8      	str	r0, [r7, #12]
    2f48:	60b9      	str	r1, [r7, #8]
    2f4a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
    2f4c:	2300      	movs	r3, #0
    2f4e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
    2f50:	2300      	movs	r3, #0
    2f52:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    2f54:	2396      	movs	r3, #150	; 0x96
    2f56:	005b      	lsls	r3, r3, #1
    2f58:	0018      	movs	r0, r3
    2f5a:	4b24      	ldr	r3, [pc, #144]	; (2fec <I2cPingAddressWait+0xac>)
    2f5c:	4798      	blx	r3
    2f5e:	0003      	movs	r3, r0
    2f60:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    2f62:	697b      	ldr	r3, [r7, #20]
    2f64:	2b00      	cmp	r3, #0
    2f66:	d133      	bne.n	2fd0 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    2f68:	2310      	movs	r3, #16
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	0018      	movs	r0, r3
    2f6e:	4b20      	ldr	r3, [pc, #128]	; (2ff0 <I2cPingAddressWait+0xb0>)
    2f70:	4798      	blx	r3
    2f72:	0003      	movs	r3, r0
    2f74:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    2f76:	697b      	ldr	r3, [r7, #20]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d12b      	bne.n	2fd4 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    2f7c:	68fb      	ldr	r3, [r7, #12]
    2f7e:	0018      	movs	r0, r3
    2f80:	4b1c      	ldr	r3, [pc, #112]	; (2ff4 <I2cPingAddressWait+0xb4>)
    2f82:	4798      	blx	r3
    2f84:	0003      	movs	r3, r0
    2f86:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    2f88:	697b      	ldr	r3, [r7, #20]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d125      	bne.n	2fda <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    2f8e:	693b      	ldr	r3, [r7, #16]
    2f90:	687a      	ldr	r2, [r7, #4]
    2f92:	0011      	movs	r1, r2
    2f94:	0018      	movs	r0, r3
    2f96:	4b18      	ldr	r3, [pc, #96]	; (2ff8 <I2cPingAddressWait+0xb8>)
    2f98:	4798      	blx	r3
    2f9a:	0003      	movs	r3, r0
    2f9c:	2b01      	cmp	r3, #1
    2f9e:	d113      	bne.n	2fc8 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    2fa0:	4b16      	ldr	r3, [pc, #88]	; (2ffc <I2cPingAddressWait+0xbc>)
    2fa2:	4798      	blx	r3
    2fa4:	1e03      	subs	r3, r0, #0
    2fa6:	d006      	beq.n	2fb6 <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
    2fa8:	2000      	movs	r0, #0
    2faa:	4b15      	ldr	r3, [pc, #84]	; (3000 <I2cPingAddressWait+0xc0>)
    2fac:	4798      	blx	r3
            error = ERROR_ABORTED;
    2fae:	2303      	movs	r3, #3
    2fb0:	425b      	negs	r3, r3
    2fb2:	617b      	str	r3, [r7, #20]
            goto exitError0;
    2fb4:	e012      	b.n	2fdc <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
    2fb6:	68bb      	ldr	r3, [r7, #8]
    2fb8:	0018      	movs	r0, r3
    2fba:	4b12      	ldr	r3, [pc, #72]	; (3004 <I2cPingAddressWait+0xc4>)
    2fbc:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
    2fbe:	4b12      	ldr	r3, [pc, #72]	; (3008 <I2cPingAddressWait+0xc8>)
    2fc0:	4798      	blx	r3
    2fc2:	0003      	movs	r3, r0
    2fc4:	617b      	str	r3, [r7, #20]
    2fc6:	e006      	b.n	2fd6 <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
    2fc8:	2303      	movs	r3, #3
    2fca:	425b      	negs	r3, r3
    2fcc:	617b      	str	r3, [r7, #20]
        goto exitError0;
    2fce:	e005      	b.n	2fdc <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
    2fd0:	46c0      	nop			; (mov r8, r8)
    2fd2:	e000      	b.n	2fd6 <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
    2fd4:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
    2fd6:	697b      	ldr	r3, [r7, #20]
    2fd8:	e003      	b.n	2fe2 <I2cPingAddressWait+0xa2>
        goto exitError0;
    2fda:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
    2fdc:	4b0a      	ldr	r3, [pc, #40]	; (3008 <I2cPingAddressWait+0xc8>)
    2fde:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
    2fe0:	697b      	ldr	r3, [r7, #20]
}
    2fe2:	0018      	movs	r0, r3
    2fe4:	46bd      	mov	sp, r7
    2fe6:	b006      	add	sp, #24
    2fe8:	bd80      	pop	{r7, pc}
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	00002cc5 	.word	0x00002cc5
    2ff0:	00002cfd 	.word	0x00002cfd
    2ff4:	00002b9d 	.word	0x00002b9d
    2ff8:	00008ecd 	.word	0x00008ecd
    2ffc:	00002d21 	.word	0x00002d21
    3000:	00002d35 	.word	0x00002d35
    3004:	00009c21 	.word	0x00009c21
    3008:	00002c8d 	.word	0x00002c8d

0000300c <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
    300c:	b580      	push	{r7, lr}
    300e:	b086      	sub	sp, #24
    3010:	af00      	add	r7, sp, #0
    3012:	60f8      	str	r0, [r7, #12]
    3014:	0008      	movs	r0, r1
    3016:	607a      	str	r2, [r7, #4]
    3018:	0019      	movs	r1, r3
    301a:	230b      	movs	r3, #11
    301c:	18fb      	adds	r3, r7, r3
    301e:	1c02      	adds	r2, r0, #0
    3020:	701a      	strb	r2, [r3, #0]
    3022:	2308      	movs	r3, #8
    3024:	18fb      	adds	r3, r7, r3
    3026:	1c0a      	adds	r2, r1, #0
    3028:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
    302a:	2300      	movs	r3, #0
    302c:	613b      	str	r3, [r7, #16]
	msgOut[0]=reg;
    302e:	4b19      	ldr	r3, [pc, #100]	; (3094 <reg_write+0x88>)
    3030:	220b      	movs	r2, #11
    3032:	18ba      	adds	r2, r7, r2
    3034:	7812      	ldrb	r2, [r2, #0]
    3036:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
    3038:	2300      	movs	r3, #0
    303a:	617b      	str	r3, [r7, #20]
    303c:	e00a      	b.n	3054 <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
    303e:	697b      	ldr	r3, [r7, #20]
    3040:	3301      	adds	r3, #1
    3042:	697a      	ldr	r2, [r7, #20]
    3044:	6879      	ldr	r1, [r7, #4]
    3046:	188a      	adds	r2, r1, r2
    3048:	7811      	ldrb	r1, [r2, #0]
    304a:	4a12      	ldr	r2, [pc, #72]	; (3094 <reg_write+0x88>)
    304c:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
    304e:	697b      	ldr	r3, [r7, #20]
    3050:	3301      	adds	r3, #1
    3052:	617b      	str	r3, [r7, #20]
    3054:	2308      	movs	r3, #8
    3056:	18fb      	adds	r3, r7, r3
    3058:	881a      	ldrh	r2, [r3, #0]
    305a:	697b      	ldr	r3, [r7, #20]
    305c:	429a      	cmp	r2, r3
    305e:	dcee      	bgt.n	303e <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
    3060:	4b0d      	ldr	r3, [pc, #52]	; (3098 <reg_write+0x8c>)
    3062:	222a      	movs	r2, #42	; 0x2a
    3064:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
    3066:	4b0c      	ldr	r3, [pc, #48]	; (3098 <reg_write+0x8c>)
    3068:	4a0a      	ldr	r2, [pc, #40]	; (3094 <reg_write+0x88>)
    306a:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
    306c:	2308      	movs	r3, #8
    306e:	18fb      	adds	r3, r7, r3
    3070:	881b      	ldrh	r3, [r3, #0]
    3072:	3301      	adds	r3, #1
    3074:	b29a      	uxth	r2, r3
    3076:	4b08      	ldr	r3, [pc, #32]	; (3098 <reg_write+0x8c>)
    3078:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
    307a:	4b07      	ldr	r3, [pc, #28]	; (3098 <reg_write+0x8c>)
    307c:	2164      	movs	r1, #100	; 0x64
    307e:	0018      	movs	r0, r3
    3080:	4b06      	ldr	r3, [pc, #24]	; (309c <reg_write+0x90>)
    3082:	4798      	blx	r3
    3084:	0003      	movs	r3, r0
    3086:	613b      	str	r3, [r7, #16]
		//char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
    3088:	693b      	ldr	r3, [r7, #16]

}
    308a:	0018      	movs	r0, r3
    308c:	46bd      	mov	sp, r7
    308e:	b006      	add	sp, #24
    3090:	bd80      	pop	{r7, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	20004904 	.word	0x20004904
    3098:	20004944 	.word	0x20004944
    309c:	00002d55 	.word	0x00002d55

000030a0 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b086      	sub	sp, #24
    30a4:	af00      	add	r7, sp, #0
    30a6:	60f8      	str	r0, [r7, #12]
    30a8:	0008      	movs	r0, r1
    30aa:	607a      	str	r2, [r7, #4]
    30ac:	0019      	movs	r1, r3
    30ae:	230b      	movs	r3, #11
    30b0:	18fb      	adds	r3, r7, r3
    30b2:	1c02      	adds	r2, r0, #0
    30b4:	701a      	strb	r2, [r3, #0]
    30b6:	2308      	movs	r3, #8
    30b8:	18fb      	adds	r3, r7, r3
    30ba:	1c0a      	adds	r2, r1, #0
    30bc:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
    30be:	2300      	movs	r3, #0
    30c0:	617b      	str	r3, [r7, #20]
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
    30c2:	4b13      	ldr	r3, [pc, #76]	; (3110 <reg_read+0x70>)
    30c4:	222a      	movs	r2, #42	; 0x2a
    30c6:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
    30c8:	4b11      	ldr	r3, [pc, #68]	; (3110 <reg_read+0x70>)
    30ca:	2208      	movs	r2, #8
    30cc:	18ba      	adds	r2, r7, r2
    30ce:	8812      	ldrh	r2, [r2, #0]
    30d0:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
    30d2:	4b0f      	ldr	r3, [pc, #60]	; (3110 <reg_read+0x70>)
    30d4:	687a      	ldr	r2, [r7, #4]
    30d6:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
    30d8:	4b0e      	ldr	r3, [pc, #56]	; (3114 <reg_read+0x74>)
    30da:	220b      	movs	r2, #11
    30dc:	18ba      	adds	r2, r7, r2
    30de:	7812      	ldrb	r2, [r2, #0]
    30e0:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
    30e2:	4b0c      	ldr	r3, [pc, #48]	; (3114 <reg_read+0x74>)
    30e4:	2200      	movs	r2, #0
    30e6:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
    30e8:	4b09      	ldr	r3, [pc, #36]	; (3110 <reg_read+0x70>)
    30ea:	4a0a      	ldr	r2, [pc, #40]	; (3114 <reg_read+0x74>)
    30ec:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
    30ee:	4b08      	ldr	r3, [pc, #32]	; (3110 <reg_read+0x70>)
    30f0:	2201      	movs	r2, #1
    30f2:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
    30f4:	4b06      	ldr	r3, [pc, #24]	; (3110 <reg_read+0x70>)
    30f6:	2264      	movs	r2, #100	; 0x64
    30f8:	2105      	movs	r1, #5
    30fa:	0018      	movs	r0, r3
    30fc:	4b06      	ldr	r3, [pc, #24]	; (3118 <reg_read+0x78>)
    30fe:	4798      	blx	r3
    3100:	0003      	movs	r3, r0
    3102:	617b      	str	r3, [r7, #20]
	
	//char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	return error;
    3104:	697b      	ldr	r3, [r7, #20]
}
    3106:	0018      	movs	r0, r3
    3108:	46bd      	mov	sp, r7
    310a:	b006      	add	sp, #24
    310c:	bd80      	pop	{r7, pc}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	20004944 	.word	0x20004944
    3114:	20004904 	.word	0x20004904
    3118:	00002e2d 	.word	0x00002e2d

0000311c <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
    311c:	b590      	push	{r4, r7, lr}
    311e:	b085      	sub	sp, #20
    3120:	af00      	add	r7, sp, #0
    3122:	0002      	movs	r2, r0
    3124:	1dfb      	adds	r3, r7, #7
    3126:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
    3128:	4b07      	ldr	r3, [pc, #28]	; (3148 <ADC_ReadReg+0x2c>)
    312a:	6818      	ldr	r0, [r3, #0]
    312c:	4a07      	ldr	r2, [pc, #28]	; (314c <ADC_ReadReg+0x30>)
    312e:	1dfb      	adds	r3, r7, #7
    3130:	7819      	ldrb	r1, [r3, #0]
    3132:	2301      	movs	r3, #1
    3134:	4c06      	ldr	r4, [pc, #24]	; (3150 <ADC_ReadReg+0x34>)
    3136:	47a0      	blx	r4
    3138:	0003      	movs	r3, r0
    313a:	60fb      	str	r3, [r7, #12]
	return read_bytes;
    313c:	4b03      	ldr	r3, [pc, #12]	; (314c <ADC_ReadReg+0x30>)
    313e:	781b      	ldrb	r3, [r3, #0]
	
}
    3140:	0018      	movs	r0, r3
    3142:	46bd      	mov	sp, r7
    3144:	b005      	add	sp, #20
    3146:	bd90      	pop	{r4, r7, pc}
    3148:	20004900 	.word	0x20004900
    314c:	200008b4 	.word	0x200008b4
    3150:	000030a1 	.word	0x000030a1

00003154 <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
    3154:	b590      	push	{r4, r7, lr}
    3156:	b085      	sub	sp, #20
    3158:	af00      	add	r7, sp, #0
    315a:	0002      	movs	r2, r0
    315c:	1dfb      	adds	r3, r7, #7
    315e:	701a      	strb	r2, [r3, #0]
    3160:	1dbb      	adds	r3, r7, #6
    3162:	1c0a      	adds	r2, r1, #0
    3164:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
    3166:	4b08      	ldr	r3, [pc, #32]	; (3188 <ADC_WriteReg+0x34>)
    3168:	6818      	ldr	r0, [r3, #0]
    316a:	1dba      	adds	r2, r7, #6
    316c:	1dfb      	adds	r3, r7, #7
    316e:	7819      	ldrb	r1, [r3, #0]
    3170:	2301      	movs	r3, #1
    3172:	4c06      	ldr	r4, [pc, #24]	; (318c <ADC_WriteReg+0x38>)
    3174:	47a0      	blx	r4
    3176:	0003      	movs	r3, r0
    3178:	60fb      	str	r3, [r7, #12]
	return err;
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	b2db      	uxtb	r3, r3
}
    317e:	0018      	movs	r0, r3
    3180:	46bd      	mov	sp, r7
    3182:	b005      	add	sp, #20
    3184:	bd90      	pop	{r4, r7, pc}
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	20004900 	.word	0x20004900
    318c:	0000300d 	.word	0x0000300d

00003190 <ADC_Calibration>:
// 
// 	ADC_WriteReg(CTRL1_ADDR, reg);
// }

void ADC_Calibration(void)
{
    3190:	b590      	push	{r4, r7, lr}
    3192:	b083      	sub	sp, #12
    3194:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
    3196:	1dfb      	adds	r3, r7, #7
    3198:	2200      	movs	r2, #0
    319a:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
    319c:	1dfc      	adds	r4, r7, #7
    319e:	2002      	movs	r0, #2
    31a0:	4b21      	ldr	r3, [pc, #132]	; (3228 <ADC_Calibration+0x98>)
    31a2:	4798      	blx	r3
    31a4:	0003      	movs	r3, r0
    31a6:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
    31a8:	1dfb      	adds	r3, r7, #7
    31aa:	1dfa      	adds	r2, r7, #7
    31ac:	7812      	ldrb	r2, [r2, #0]
    31ae:	2107      	movs	r1, #7
    31b0:	438a      	bics	r2, r1
    31b2:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
    31b4:	1dfb      	adds	r3, r7, #7
    31b6:	1dfa      	adds	r2, r7, #7
    31b8:	7812      	ldrb	r2, [r2, #0]
    31ba:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
    31bc:	1dfb      	adds	r3, r7, #7
    31be:	781b      	ldrb	r3, [r3, #0]
    31c0:	0019      	movs	r1, r3
    31c2:	2002      	movs	r0, #2
    31c4:	4b19      	ldr	r3, [pc, #100]	; (322c <ADC_Calibration+0x9c>)
    31c6:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
    31c8:	1dfb      	adds	r3, r7, #7
    31ca:	1dfa      	adds	r2, r7, #7
    31cc:	7812      	ldrb	r2, [r2, #0]
    31ce:	2104      	movs	r1, #4
    31d0:	430a      	orrs	r2, r1
    31d2:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
    31d4:	1dfb      	adds	r3, r7, #7
    31d6:	781b      	ldrb	r3, [r3, #0]
    31d8:	0019      	movs	r1, r3
    31da:	2002      	movs	r0, #2
    31dc:	4b13      	ldr	r3, [pc, #76]	; (322c <ADC_Calibration+0x9c>)
    31de:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
    31e0:	2032      	movs	r0, #50	; 0x32
    31e2:	4b13      	ldr	r3, [pc, #76]	; (3230 <ADC_Calibration+0xa0>)
    31e4:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
    31e6:	1dfc      	adds	r4, r7, #7
    31e8:	2002      	movs	r0, #2
    31ea:	4b0f      	ldr	r3, [pc, #60]	; (3228 <ADC_Calibration+0x98>)
    31ec:	4798      	blx	r3
    31ee:	0003      	movs	r3, r0
    31f0:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
    31f2:	1dfb      	adds	r3, r7, #7
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	2204      	movs	r2, #4
    31f8:	4013      	ands	r3, r2
    31fa:	d000      	beq.n	31fe <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
    31fc:	e7f0      	b.n	31e0 <ADC_Calibration+0x50>
			break;
    31fe:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
    3200:	1dfb      	adds	r3, r7, #7
    3202:	1dfa      	adds	r2, r7, #7
    3204:	7812      	ldrb	r2, [r2, #0]
    3206:	2108      	movs	r1, #8
    3208:	400a      	ands	r2, r1
    320a:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
    320c:	1dfb      	adds	r3, r7, #7
    320e:	781b      	ldrb	r3, [r3, #0]
    3210:	2208      	movs	r2, #8
    3212:	4013      	ands	r3, r2
    3214:	d000      	beq.n	3218 <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
    3216:	e7c1      	b.n	319c <ADC_Calibration+0xc>
		break;
    3218:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
    321a:	2001      	movs	r0, #1
    321c:	4b04      	ldr	r3, [pc, #16]	; (3230 <ADC_Calibration+0xa0>)
    321e:	4798      	blx	r3

}
    3220:	46c0      	nop			; (mov r8, r8)
    3222:	46bd      	mov	sp, r7
    3224:	b003      	add	sp, #12
    3226:	bd90      	pop	{r4, r7, pc}
    3228:	0000311d 	.word	0x0000311d
    322c:	00003155 	.word	0x00003155
    3230:	0000dc2d 	.word	0x0000dc2d

00003234 <ADCchip_Init>:

void  ADCchip_Init(void)
{
    3234:	b580      	push	{r7, lr}
    3236:	b082      	sub	sp, #8
    3238:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
    323a:	1dfb      	adds	r3, r7, #7
    323c:	2200      	movs	r2, #0
    323e:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
    3240:	1dfb      	adds	r3, r7, #7
    3242:	2201      	movs	r2, #1
    3244:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
    3246:	1dfb      	adds	r3, r7, #7
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	0019      	movs	r1, r3
    324c:	2000      	movs	r0, #0
    324e:	4b1d      	ldr	r3, [pc, #116]	; (32c4 <ADCchip_Init+0x90>)
    3250:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
    3252:	2001      	movs	r0, #1
    3254:	4b1c      	ldr	r3, [pc, #112]	; (32c8 <ADCchip_Init+0x94>)
    3256:	4798      	blx	r3

	reg =  0x02 ;                  /* Enter Noraml mode */
    3258:	1dfb      	adds	r3, r7, #7
    325a:	2202      	movs	r2, #2
    325c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
    325e:	1dfb      	adds	r3, r7, #7
    3260:	781b      	ldrb	r3, [r3, #0]
    3262:	0019      	movs	r1, r3
    3264:	2000      	movs	r0, #0
    3266:	4b17      	ldr	r3, [pc, #92]	; (32c4 <ADCchip_Init+0x90>)
    3268:	4798      	blx	r3
	delay_ms(50);         /* Wait 50 ms */
    326a:	2032      	movs	r0, #50	; 0x32
    326c:	4b16      	ldr	r3, [pc, #88]	; (32c8 <ADCchip_Init+0x94>)
    326e:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
    3270:	1dfb      	adds	r3, r7, #7
    3272:	2227      	movs	r2, #39	; 0x27
    3274:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
    3276:	1dfb      	adds	r3, r7, #7
    3278:	781b      	ldrb	r3, [r3, #0]
    327a:	0019      	movs	r1, r3
    327c:	2001      	movs	r0, #1
    327e:	4b11      	ldr	r3, [pc, #68]	; (32c4 <ADCchip_Init+0x90>)
    3280:	4798      	blx	r3
	delay_ms(1);
    3282:	2001      	movs	r0, #1
    3284:	4b10      	ldr	r3, [pc, #64]	; (32c8 <ADCchip_Init+0x94>)
    3286:	4798      	blx	r3
	
	reg=0x86;
    3288:	1dfb      	adds	r3, r7, #7
    328a:	2286      	movs	r2, #134	; 0x86
    328c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
    328e:	1dfb      	adds	r3, r7, #7
    3290:	781b      	ldrb	r3, [r3, #0]
    3292:	0019      	movs	r1, r3
    3294:	2000      	movs	r0, #0
    3296:	4b0b      	ldr	r3, [pc, #44]	; (32c4 <ADCchip_Init+0x90>)
    3298:	4798      	blx	r3
	delay_ms(1);
    329a:	2001      	movs	r0, #1
    329c:	4b0a      	ldr	r3, [pc, #40]	; (32c8 <ADCchip_Init+0x94>)
    329e:	4798      	blx	r3
	
	reg=0x30;
    32a0:	1dfb      	adds	r3, r7, #7
    32a2:	2230      	movs	r2, #48	; 0x30
    32a4:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
    32a6:	1dfb      	adds	r3, r7, #7
    32a8:	781b      	ldrb	r3, [r3, #0]
    32aa:	0019      	movs	r1, r3
    32ac:	2015      	movs	r0, #21
    32ae:	4b05      	ldr	r3, [pc, #20]	; (32c4 <ADCchip_Init+0x90>)
    32b0:	4798      	blx	r3
	delay_ms(1);
    32b2:	2001      	movs	r0, #1
    32b4:	4b04      	ldr	r3, [pc, #16]	; (32c8 <ADCchip_Init+0x94>)
    32b6:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
    32b8:	4b04      	ldr	r3, [pc, #16]	; (32cc <ADCchip_Init+0x98>)
    32ba:	4798      	blx	r3
}
    32bc:	46c0      	nop			; (mov r8, r8)
    32be:	46bd      	mov	sp, r7
    32c0:	b002      	add	sp, #8
    32c2:	bd80      	pop	{r7, pc}
    32c4:	00003155 	.word	0x00003155
    32c8:	0000dc2d 	.word	0x0000dc2d
    32cc:	00003191 	.word	0x00003191

000032d0 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
    32d0:	b590      	push	{r4, r7, lr}
    32d2:	b083      	sub	sp, #12
    32d4:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
    32d6:	1dfb      	adds	r3, r7, #7
    32d8:	2200      	movs	r2, #0
    32da:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
    32dc:	1dfc      	adds	r4, r7, #7
    32de:	2000      	movs	r0, #0
    32e0:	4b09      	ldr	r3, [pc, #36]	; (3308 <ADC_StartConversion+0x38>)
    32e2:	4798      	blx	r3
    32e4:	0003      	movs	r3, r0
    32e6:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
    32e8:	1dfb      	adds	r3, r7, #7
    32ea:	1dfa      	adds	r2, r7, #7
    32ec:	7812      	ldrb	r2, [r2, #0]
    32ee:	2110      	movs	r1, #16
    32f0:	430a      	orrs	r2, r1
    32f2:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
    32f4:	1dfb      	adds	r3, r7, #7
    32f6:	781b      	ldrb	r3, [r3, #0]
    32f8:	0019      	movs	r1, r3
    32fa:	2000      	movs	r0, #0
    32fc:	4b03      	ldr	r3, [pc, #12]	; (330c <ADC_StartConversion+0x3c>)
    32fe:	4798      	blx	r3
}
    3300:	46c0      	nop			; (mov r8, r8)
    3302:	46bd      	mov	sp, r7
    3304:	b003      	add	sp, #12
    3306:	bd90      	pop	{r4, r7, pc}
    3308:	0000311d 	.word	0x0000311d
    330c:	00003155 	.word	0x00003155

00003310 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
    3310:	b580      	push	{r7, lr}
    3312:	b088      	sub	sp, #32
    3314:	af00      	add	r7, sp, #0
    3316:	60ba      	str	r2, [r7, #8]
    3318:	607b      	str	r3, [r7, #4]
    331a:	230f      	movs	r3, #15
    331c:	18fb      	adds	r3, r7, r3
    331e:	1c02      	adds	r2, r0, #0
    3320:	701a      	strb	r2, [r3, #0]
    3322:	230e      	movs	r3, #14
    3324:	18fb      	adds	r3, r7, r3
    3326:	1c0a      	adds	r2, r1, #0
    3328:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
    332a:	2002      	movs	r0, #2
    332c:	4b14      	ldr	r3, [pc, #80]	; (3380 <I2C_ReadMultiBytesOneReg+0x70>)
    332e:	4798      	blx	r3
    3330:	0003      	movs	r3, r0
    3332:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
    3334:	69fb      	ldr	r3, [r7, #28]
    3336:	b2db      	uxtb	r3, r3
    3338:	0019      	movs	r1, r3
    333a:	2002      	movs	r0, #2
    333c:	4b11      	ldr	r3, [pc, #68]	; (3384 <I2C_ReadMultiBytesOneReg+0x74>)
    333e:	4798      	blx	r3
	vTaskDelay(10);
    3340:	200a      	movs	r0, #10
    3342:	4b11      	ldr	r3, [pc, #68]	; (3388 <I2C_ReadMultiBytesOneReg+0x78>)
    3344:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
    3346:	2012      	movs	r0, #18
    3348:	4b0d      	ldr	r3, [pc, #52]	; (3380 <I2C_ReadMultiBytesOneReg+0x70>)
    334a:	4798      	blx	r3
    334c:	0003      	movs	r3, r0
    334e:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
    3350:	2013      	movs	r0, #19
    3352:	4b0b      	ldr	r3, [pc, #44]	; (3380 <I2C_ReadMultiBytesOneReg+0x70>)
    3354:	4798      	blx	r3
    3356:	0003      	movs	r3, r0
    3358:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
    335a:	2014      	movs	r0, #20
    335c:	4b08      	ldr	r3, [pc, #32]	; (3380 <I2C_ReadMultiBytesOneReg+0x70>)
    335e:	4798      	blx	r3
    3360:	0003      	movs	r3, r0
    3362:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
    3364:	69fb      	ldr	r3, [r7, #28]
    3366:	041a      	lsls	r2, r3, #16
    3368:	69bb      	ldr	r3, [r7, #24]
    336a:	021b      	lsls	r3, r3, #8
    336c:	431a      	orrs	r2, r3
    336e:	697b      	ldr	r3, [r7, #20]
    3370:	4313      	orrs	r3, r2
    3372:	613b      	str	r3, [r7, #16]
	return x;
    3374:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
    3376:	0018      	movs	r0, r3
    3378:	46bd      	mov	sp, r7
    337a:	b008      	add	sp, #32
    337c:	bd80      	pop	{r7, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	0000311d 	.word	0x0000311d
    3384:	00003155 	.word	0x00003155
    3388:	00009c21 	.word	0x00009c21

0000338c <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
    338c:	b590      	push	{r4, r7, lr}
    338e:	b083      	sub	sp, #12
    3390:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
    3392:	003a      	movs	r2, r7
    3394:	2303      	movs	r3, #3
    3396:	2112      	movs	r1, #18
    3398:	202a      	movs	r0, #42	; 0x2a
    339a:	4c04      	ldr	r4, [pc, #16]	; (33ac <ADC_Read_Conversion_Data+0x20>)
    339c:	47a0      	blx	r4
    339e:	0003      	movs	r3, r0
    33a0:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
    33a2:	687b      	ldr	r3, [r7, #4]
}
    33a4:	0018      	movs	r0, r3
    33a6:	46bd      	mov	sp, r7
    33a8:	b003      	add	sp, #12
    33aa:	bd90      	pop	{r4, r7, pc}
    33ac:	00003311 	.word	0x00003311

000033b0 <Value_conversion>:

void Value_conversion(int value,int final[2]){
    33b0:	b5b0      	push	{r4, r5, r7, lr}
    33b2:	b092      	sub	sp, #72	; 0x48
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
    33b8:	6039      	str	r1, [r7, #0]
	float gain;
	float offset;
	uint8_t gain_reg[4];
	uint8_t offset_reg[3];

	gain_reg[0]=ADC_ReadReg(GCAL1_B3_ADDR);
    33ba:	2006      	movs	r0, #6
    33bc:	4b77      	ldr	r3, [pc, #476]	; (359c <Value_conversion+0x1ec>)
    33be:	4798      	blx	r3
    33c0:	0003      	movs	r3, r0
    33c2:	001a      	movs	r2, r3
    33c4:	2330      	movs	r3, #48	; 0x30
    33c6:	18fb      	adds	r3, r7, r3
    33c8:	701a      	strb	r2, [r3, #0]
	gain_reg[1]=ADC_ReadReg(GCAL1_B2_ADDR);
    33ca:	2007      	movs	r0, #7
    33cc:	4b73      	ldr	r3, [pc, #460]	; (359c <Value_conversion+0x1ec>)
    33ce:	4798      	blx	r3
    33d0:	0003      	movs	r3, r0
    33d2:	001a      	movs	r2, r3
    33d4:	2330      	movs	r3, #48	; 0x30
    33d6:	18fb      	adds	r3, r7, r3
    33d8:	705a      	strb	r2, [r3, #1]
	gain_reg[2]=ADC_ReadReg(GCAL1_B1_ADDR);
    33da:	2008      	movs	r0, #8
    33dc:	4b6f      	ldr	r3, [pc, #444]	; (359c <Value_conversion+0x1ec>)
    33de:	4798      	blx	r3
    33e0:	0003      	movs	r3, r0
    33e2:	001a      	movs	r2, r3
    33e4:	2330      	movs	r3, #48	; 0x30
    33e6:	18fb      	adds	r3, r7, r3
    33e8:	709a      	strb	r2, [r3, #2]
	gain_reg[3]=ADC_ReadReg(GCAL1_B0_ADDR);
    33ea:	2009      	movs	r0, #9
    33ec:	4b6b      	ldr	r3, [pc, #428]	; (359c <Value_conversion+0x1ec>)
    33ee:	4798      	blx	r3
    33f0:	0003      	movs	r3, r0
    33f2:	001a      	movs	r2, r3
    33f4:	2330      	movs	r3, #48	; 0x30
    33f6:	18fb      	adds	r3, r7, r3
    33f8:	70da      	strb	r2, [r3, #3]
	offset_reg[0]=ADC_ReadReg(OCAL1_B2_ADDR);
    33fa:	2003      	movs	r0, #3
    33fc:	4b67      	ldr	r3, [pc, #412]	; (359c <Value_conversion+0x1ec>)
    33fe:	4798      	blx	r3
    3400:	0003      	movs	r3, r0
    3402:	001a      	movs	r2, r3
    3404:	232c      	movs	r3, #44	; 0x2c
    3406:	18fb      	adds	r3, r7, r3
    3408:	701a      	strb	r2, [r3, #0]
	offset_reg[1]=ADC_ReadReg(OCAL1_B1_ADDR);
    340a:	2004      	movs	r0, #4
    340c:	4b63      	ldr	r3, [pc, #396]	; (359c <Value_conversion+0x1ec>)
    340e:	4798      	blx	r3
    3410:	0003      	movs	r3, r0
    3412:	001a      	movs	r2, r3
    3414:	232c      	movs	r3, #44	; 0x2c
    3416:	18fb      	adds	r3, r7, r3
    3418:	705a      	strb	r2, [r3, #1]
	offset_reg[2]=ADC_ReadReg(OCAL1_B0_ADDR);
    341a:	2005      	movs	r0, #5
    341c:	4b5f      	ldr	r3, [pc, #380]	; (359c <Value_conversion+0x1ec>)
    341e:	4798      	blx	r3
    3420:	0003      	movs	r3, r0
    3422:	001a      	movs	r2, r3
    3424:	232c      	movs	r3, #44	; 0x2c
    3426:	18fb      	adds	r3, r7, r3
    3428:	709a      	strb	r2, [r3, #2]
// 			SerialConsoleWriteString(help);
// 			snprintf(help, 32, "offset_reg [%d]= %d\r\n",j%4,offset_reg[j%4]);
// 		    SerialConsoleWriteString(help);
// 	}

	for(int i=31;i>=0;i--){
    342a:	231f      	movs	r3, #31
    342c:	63fb      	str	r3, [r7, #60]	; 0x3c
    342e:	e02c      	b.n	348a <Value_conversion+0xda>
		gain+=(float)(((gain_reg[3-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
    3430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3432:	2b00      	cmp	r3, #0
    3434:	da00      	bge.n	3438 <Value_conversion+0x88>
    3436:	3307      	adds	r3, #7
    3438:	10db      	asrs	r3, r3, #3
    343a:	425b      	negs	r3, r3
    343c:	3303      	adds	r3, #3
    343e:	2230      	movs	r2, #48	; 0x30
    3440:	18ba      	adds	r2, r7, r2
    3442:	5cd3      	ldrb	r3, [r2, r3]
    3444:	0019      	movs	r1, r3
    3446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3448:	4a55      	ldr	r2, [pc, #340]	; (35a0 <Value_conversion+0x1f0>)
    344a:	4013      	ands	r3, r2
    344c:	d504      	bpl.n	3458 <Value_conversion+0xa8>
    344e:	3b01      	subs	r3, #1
    3450:	2208      	movs	r2, #8
    3452:	4252      	negs	r2, r2
    3454:	4313      	orrs	r3, r2
    3456:	3301      	adds	r3, #1
    3458:	4119      	asrs	r1, r3
    345a:	000b      	movs	r3, r1
    345c:	2201      	movs	r2, #1
    345e:	4013      	ands	r3, r2
    3460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3462:	3a17      	subs	r2, #23
    3464:	494f      	ldr	r1, [pc, #316]	; (35a4 <Value_conversion+0x1f4>)
    3466:	434a      	muls	r2, r1
    3468:	2102      	movs	r1, #2
    346a:	4091      	lsls	r1, r2
    346c:	000a      	movs	r2, r1
    346e:	435a      	muls	r2, r3
    3470:	4b4d      	ldr	r3, [pc, #308]	; (35a8 <Value_conversion+0x1f8>)
    3472:	0010      	movs	r0, r2
    3474:	4798      	blx	r3
    3476:	1c02      	adds	r2, r0, #0
    3478:	4b4c      	ldr	r3, [pc, #304]	; (35ac <Value_conversion+0x1fc>)
    347a:	1c11      	adds	r1, r2, #0
    347c:	6c78      	ldr	r0, [r7, #68]	; 0x44
    347e:	4798      	blx	r3
    3480:	1c03      	adds	r3, r0, #0
    3482:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=31;i>=0;i--){
    3484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3486:	3b01      	subs	r3, #1
    3488:	63fb      	str	r3, [r7, #60]	; 0x3c
    348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    348c:	2b00      	cmp	r3, #0
    348e:	dacf      	bge.n	3430 <Value_conversion+0x80>
	}
	for(int i=22;i>=0;i--){
    3490:	2316      	movs	r3, #22
    3492:	63bb      	str	r3, [r7, #56]	; 0x38
    3494:	e02c      	b.n	34f0 <Value_conversion+0x140>
		offset+=(float)(((offset_reg[2-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
    3496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3498:	2b00      	cmp	r3, #0
    349a:	da00      	bge.n	349e <Value_conversion+0xee>
    349c:	3307      	adds	r3, #7
    349e:	10db      	asrs	r3, r3, #3
    34a0:	425b      	negs	r3, r3
    34a2:	3302      	adds	r3, #2
    34a4:	222c      	movs	r2, #44	; 0x2c
    34a6:	18ba      	adds	r2, r7, r2
    34a8:	5cd3      	ldrb	r3, [r2, r3]
    34aa:	0019      	movs	r1, r3
    34ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34ae:	4a3c      	ldr	r2, [pc, #240]	; (35a0 <Value_conversion+0x1f0>)
    34b0:	4013      	ands	r3, r2
    34b2:	d504      	bpl.n	34be <Value_conversion+0x10e>
    34b4:	3b01      	subs	r3, #1
    34b6:	2208      	movs	r2, #8
    34b8:	4252      	negs	r2, r2
    34ba:	4313      	orrs	r3, r2
    34bc:	3301      	adds	r3, #1
    34be:	4119      	asrs	r1, r3
    34c0:	000b      	movs	r3, r1
    34c2:	2201      	movs	r2, #1
    34c4:	4013      	ands	r3, r2
    34c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    34c8:	3a17      	subs	r2, #23
    34ca:	4936      	ldr	r1, [pc, #216]	; (35a4 <Value_conversion+0x1f4>)
    34cc:	434a      	muls	r2, r1
    34ce:	2102      	movs	r1, #2
    34d0:	4091      	lsls	r1, r2
    34d2:	000a      	movs	r2, r1
    34d4:	435a      	muls	r2, r3
    34d6:	4b34      	ldr	r3, [pc, #208]	; (35a8 <Value_conversion+0x1f8>)
    34d8:	0010      	movs	r0, r2
    34da:	4798      	blx	r3
    34dc:	1c02      	adds	r2, r0, #0
    34de:	4b33      	ldr	r3, [pc, #204]	; (35ac <Value_conversion+0x1fc>)
    34e0:	1c11      	adds	r1, r2, #0
    34e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
    34e4:	4798      	blx	r3
    34e6:	1c03      	adds	r3, r0, #0
    34e8:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=22;i>=0;i--){
    34ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34ec:	3b01      	subs	r3, #1
    34ee:	63bb      	str	r3, [r7, #56]	; 0x38
    34f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34f2:	2b00      	cmp	r3, #0
    34f4:	dacf      	bge.n	3496 <Value_conversion+0xe6>
	}
	offset*=(float)(1-(offset_reg[0]>>7)&0x01);
    34f6:	232c      	movs	r3, #44	; 0x2c
    34f8:	18fb      	adds	r3, r7, r3
    34fa:	781b      	ldrb	r3, [r3, #0]
    34fc:	09db      	lsrs	r3, r3, #7
    34fe:	b2db      	uxtb	r3, r3
    3500:	001a      	movs	r2, r3
    3502:	2301      	movs	r3, #1
    3504:	1a9b      	subs	r3, r3, r2
    3506:	2201      	movs	r2, #1
    3508:	401a      	ands	r2, r3
    350a:	4b27      	ldr	r3, [pc, #156]	; (35a8 <Value_conversion+0x1f8>)
    350c:	0010      	movs	r0, r2
    350e:	4798      	blx	r3
    3510:	1c02      	adds	r2, r0, #0
    3512:	4b27      	ldr	r3, [pc, #156]	; (35b0 <Value_conversion+0x200>)
    3514:	1c11      	adds	r1, r2, #0
    3516:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3518:	4798      	blx	r3
    351a:	1c03      	adds	r3, r0, #0
    351c:	643b      	str	r3, [r7, #64]	; 0x40
	//snprintf(help, 32, " gain= %d\r\n",gain);
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final offset= %d\r\n",offset);
	//SerialConsoleWriteString(help);
	
	calibrate_adc=(float)gain/10000*((float)value-(float)offset/10000);
    351e:	4b25      	ldr	r3, [pc, #148]	; (35b4 <Value_conversion+0x204>)
    3520:	4925      	ldr	r1, [pc, #148]	; (35b8 <Value_conversion+0x208>)
    3522:	6c78      	ldr	r0, [r7, #68]	; 0x44
    3524:	4798      	blx	r3
    3526:	1c03      	adds	r3, r0, #0
    3528:	1c1c      	adds	r4, r3, #0
    352a:	4b1f      	ldr	r3, [pc, #124]	; (35a8 <Value_conversion+0x1f8>)
    352c:	6878      	ldr	r0, [r7, #4]
    352e:	4798      	blx	r3
    3530:	1c05      	adds	r5, r0, #0
    3532:	4b20      	ldr	r3, [pc, #128]	; (35b4 <Value_conversion+0x204>)
    3534:	4920      	ldr	r1, [pc, #128]	; (35b8 <Value_conversion+0x208>)
    3536:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3538:	4798      	blx	r3
    353a:	1c03      	adds	r3, r0, #0
    353c:	1c1a      	adds	r2, r3, #0
    353e:	4b1f      	ldr	r3, [pc, #124]	; (35bc <Value_conversion+0x20c>)
    3540:	1c11      	adds	r1, r2, #0
    3542:	1c28      	adds	r0, r5, #0
    3544:	4798      	blx	r3
    3546:	1c03      	adds	r3, r0, #0
    3548:	1c1a      	adds	r2, r3, #0
    354a:	4b19      	ldr	r3, [pc, #100]	; (35b0 <Value_conversion+0x200>)
    354c:	1c11      	adds	r1, r2, #0
    354e:	1c20      	adds	r0, r4, #0
    3550:	4798      	blx	r3
    3552:	1c03      	adds	r3, r0, #0
    3554:	637b      	str	r3, [r7, #52]	; 0x34
	
	final[0]=(int)calibrate_adc; //CALI
    3556:	4b1a      	ldr	r3, [pc, #104]	; (35c0 <Value_conversion+0x210>)
    3558:	6b78      	ldr	r0, [r7, #52]	; 0x34
    355a:	4798      	blx	r3
    355c:	0002      	movs	r2, r0
    355e:	683b      	ldr	r3, [r7, #0]
    3560:	601a      	str	r2, [r3, #0]
	final[1]=10000*(calibrate_adc-final[0]);
    3562:	683b      	ldr	r3, [r7, #0]
    3564:	1d1c      	adds	r4, r3, #4
    3566:	683b      	ldr	r3, [r7, #0]
    3568:	681a      	ldr	r2, [r3, #0]
    356a:	4b0f      	ldr	r3, [pc, #60]	; (35a8 <Value_conversion+0x1f8>)
    356c:	0010      	movs	r0, r2
    356e:	4798      	blx	r3
    3570:	1c02      	adds	r2, r0, #0
    3572:	4b12      	ldr	r3, [pc, #72]	; (35bc <Value_conversion+0x20c>)
    3574:	1c11      	adds	r1, r2, #0
    3576:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3578:	4798      	blx	r3
    357a:	1c03      	adds	r3, r0, #0
    357c:	1c1a      	adds	r2, r3, #0
    357e:	4b0c      	ldr	r3, [pc, #48]	; (35b0 <Value_conversion+0x200>)
    3580:	490d      	ldr	r1, [pc, #52]	; (35b8 <Value_conversion+0x208>)
    3582:	1c10      	adds	r0, r2, #0
    3584:	4798      	blx	r3
    3586:	1c03      	adds	r3, r0, #0
    3588:	1c1a      	adds	r2, r3, #0
    358a:	4b0d      	ldr	r3, [pc, #52]	; (35c0 <Value_conversion+0x210>)
    358c:	1c10      	adds	r0, r2, #0
    358e:	4798      	blx	r3
    3590:	0003      	movs	r3, r0
    3592:	6023      	str	r3, [r4, #0]
//  	snprintf(help, 32, "final_int= %d\r\n",final[0]);
//  	SerialConsoleWriteString(help);
// 	snprintf(help, 32, "final_decimal= %d\r\n",final[1]);
// 	SerialConsoleWriteString(help);
}
    3594:	46c0      	nop			; (mov r8, r8)
    3596:	46bd      	mov	sp, r7
    3598:	b012      	add	sp, #72	; 0x48
    359a:	bdb0      	pop	{r4, r5, r7, pc}
    359c:	0000311d 	.word	0x0000311d
    35a0:	80000007 	.word	0x80000007
    35a4:	00002710 	.word	0x00002710
    35a8:	0002131d 	.word	0x0002131d
    35ac:	000207b1 	.word	0x000207b1
    35b0:	00020d65 	.word	0x00020d65
    35b4:	00020ad5 	.word	0x00020ad5
    35b8:	461c4000 	.word	0x461c4000
    35bc:	00020fa5 	.word	0x00020fa5
    35c0:	000212dd 	.word	0x000212dd

000035c4 <Get_Weight>:
void Get_Weight(int final_adc[2])
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b084      	sub	sp, #16
    35c8:	af00      	add	r7, sp, #0
    35ca:	6078      	str	r0, [r7, #4]
	    ADC_StartConversion();
    35cc:	4b0c      	ldr	r3, [pc, #48]	; (3600 <Get_Weight+0x3c>)
    35ce:	4798      	blx	r3
	    while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
    35d0:	46c0      	nop			; (mov r8, r8)
    35d2:	2000      	movs	r0, #0
    35d4:	4b0b      	ldr	r3, [pc, #44]	; (3604 <Get_Weight+0x40>)
    35d6:	4798      	blx	r3
    35d8:	0003      	movs	r3, r0
    35da:	001a      	movs	r2, r3
    35dc:	2320      	movs	r3, #32
    35de:	4013      	ands	r3, r2
    35e0:	2b20      	cmp	r3, #32
    35e2:	d1f6      	bne.n	35d2 <Get_Weight+0xe>
	    uint32_t ADC_value=ADC_Read_Conversion_Data();
    35e4:	4b08      	ldr	r3, [pc, #32]	; (3608 <Get_Weight+0x44>)
    35e6:	4798      	blx	r3
    35e8:	0003      	movs	r3, r0
    35ea:	60fb      	str	r3, [r7, #12]
	    Value_conversion(ADC_value,final_adc);
    35ec:	68fb      	ldr	r3, [r7, #12]
    35ee:	687a      	ldr	r2, [r7, #4]
    35f0:	0011      	movs	r1, r2
    35f2:	0018      	movs	r0, r3
    35f4:	4b05      	ldr	r3, [pc, #20]	; (360c <Get_Weight+0x48>)
    35f6:	4798      	blx	r3
    35f8:	46c0      	nop			; (mov r8, r8)
    35fa:	46bd      	mov	sp, r7
    35fc:	b004      	add	sp, #16
    35fe:	bd80      	pop	{r7, pc}
    3600:	000032d1 	.word	0x000032d1
    3604:	0000311d 	.word	0x0000311d
    3608:	0000338d 	.word	0x0000338d
    360c:	000033b1 	.word	0x000033b1

00003610 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
    3610:	b590      	push	{r4, r7, lr}
    3612:	b093      	sub	sp, #76	; 0x4c
    3614:	af00      	add	r7, sp, #0
    3616:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
    3618:	4b76      	ldr	r3, [pc, #472]	; (37f4 <vUiHandlerTask+0x1e4>)
    361a:	0018      	movs	r0, r3
    361c:	4b76      	ldr	r3, [pc, #472]	; (37f8 <vUiHandlerTask+0x1e8>)
    361e:	4798      	blx	r3
    uiState = UI_STATE_START;  // Initial state
    3620:	4b76      	ldr	r3, [pc, #472]	; (37fc <vUiHandlerTask+0x1ec>)
    3622:	2205      	movs	r2, #5
    3624:	701a      	strb	r2, [r3, #0]
	
	char help[32];
	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
    3626:	4b76      	ldr	r3, [pc, #472]	; (3800 <vUiHandlerTask+0x1f0>)
    3628:	4798      	blx	r3
	gfx_mono_draw_string("Loading..",0,8, &sysfont);
    362a:	4b76      	ldr	r3, [pc, #472]	; (3804 <vUiHandlerTask+0x1f4>)
    362c:	4876      	ldr	r0, [pc, #472]	; (3808 <vUiHandlerTask+0x1f8>)
    362e:	2208      	movs	r2, #8
    3630:	2100      	movs	r1, #0
    3632:	4c76      	ldr	r4, [pc, #472]	; (380c <vUiHandlerTask+0x1fc>)
    3634:	47a0      	blx	r4
    /*
	gfx_mono_draw_line(0, 0, 64, 48, GFX_PIXEL_SET);
    gfx_mono_draw_filled_circle(54, 24, 10, GFX_PIXEL_SET, GFX_WHOLE);
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
	*/
	TickType_t xtime = pdMS_TO_TICKS(200);
    3636:	23c8      	movs	r3, #200	; 0xc8
    3638:	643b      	str	r3, [r7, #64]	; 0x40
	int is_dev;

	bool is_fluctuating = false;
    363a:	2347      	movs	r3, #71	; 0x47
    363c:	18fb      	adds	r3, r7, r3
    363e:	2200      	movs	r2, #0
    3640:	701a      	strb	r2, [r3, #0]
	uint32_t ADC_value;
	int final[2];

	// Here we start the loop for the UI State Machine
	while (1) {
		vTaskDelay(200);
    3642:	20c8      	movs	r0, #200	; 0xc8
    3644:	4b72      	ldr	r3, [pc, #456]	; (3810 <vUiHandlerTask+0x200>)
    3646:	4798      	blx	r3
		switch (uiState) {
    3648:	4b6c      	ldr	r3, [pc, #432]	; (37fc <vUiHandlerTask+0x1ec>)
    364a:	781b      	ldrb	r3, [r3, #0]
    364c:	2b05      	cmp	r3, #5
    364e:	d005      	beq.n	365c <vUiHandlerTask+0x4c>
    3650:	2b06      	cmp	r3, #6
    3652:	d100      	bne.n	3656 <vUiHandlerTask+0x46>
    3654:	e0cb      	b.n	37ee <vUiHandlerTask+0x1de>
    3656:	2b04      	cmp	r3, #4
    3658:	d01f      	beq.n	369a <vUiHandlerTask+0x8a>
    365a:	e0c4      	b.n	37e6 <vUiHandlerTask+0x1d6>
			case (UI_STATE_START): {
				uiState = UI_STATE_READY;
    365c:	4b67      	ldr	r3, [pc, #412]	; (37fc <vUiHandlerTask+0x1ec>)
    365e:	2204      	movs	r2, #4
    3660:	701a      	strb	r2, [r3, #0]
				LoadDataVar.diff = 0;
    3662:	2310      	movs	r3, #16
    3664:	18fb      	adds	r3, r7, r3
    3666:	2200      	movs	r2, #0
    3668:	605a      	str	r2, [r3, #4]
				LoadDataVar.total = 0;
    366a:	2310      	movs	r3, #16
    366c:	18fb      	adds	r3, r7, r3
    366e:	2200      	movs	r2, #0
    3670:	811a      	strh	r2, [r3, #8]
				LoadDataVar.weight = 0;
    3672:	2310      	movs	r3, #16
    3674:	18fb      	adds	r3, r7, r3
    3676:	2200      	movs	r2, #0
    3678:	801a      	strh	r2, [r3, #0]
				ADCchip_Init();
    367a:	4b66      	ldr	r3, [pc, #408]	; (3814 <vUiHandlerTask+0x204>)
    367c:	4798      	blx	r3
				Get_Weight(final);
    367e:	2308      	movs	r3, #8
    3680:	18fb      	adds	r3, r7, r3
    3682:	0018      	movs	r0, r3
    3684:	4b64      	ldr	r3, [pc, #400]	; (3818 <vUiHandlerTask+0x208>)
    3686:	4798      	blx	r3
				
				Acc_read_four();
    3688:	4b64      	ldr	r3, [pc, #400]	; (381c <vUiHandlerTask+0x20c>)
    368a:	4798      	blx	r3
				gfx_mono_draw_string("gic bottle Ma", 0,8, &sysfont);
    368c:	4b5d      	ldr	r3, [pc, #372]	; (3804 <vUiHandlerTask+0x1f4>)
    368e:	4864      	ldr	r0, [pc, #400]	; (3820 <vUiHandlerTask+0x210>)
    3690:	2208      	movs	r2, #8
    3692:	2100      	movs	r1, #0
    3694:	4c5d      	ldr	r4, [pc, #372]	; (380c <vUiHandlerTask+0x1fc>)
    3696:	47a0      	blx	r4
				break;
    3698:	e0aa      	b.n	37f0 <vUiHandlerTask+0x1e0>
			}

			case (UI_STATE_READY): {
				if (load_reset == true)
    369a:	4b62      	ldr	r3, [pc, #392]	; (3824 <vUiHandlerTask+0x214>)
    369c:	781b      	ldrb	r3, [r3, #0]
    369e:	2b00      	cmp	r3, #0
    36a0:	d006      	beq.n	36b0 <vUiHandlerTask+0xa0>
				{
					LoadDataVar.total = 0;
    36a2:	2310      	movs	r3, #16
    36a4:	18fb      	adds	r3, r7, r3
    36a6:	2200      	movs	r2, #0
    36a8:	811a      	strh	r2, [r3, #8]
					load_reset = false;
    36aa:	4b5e      	ldr	r3, [pc, #376]	; (3824 <vUiHandlerTask+0x214>)
    36ac:	2200      	movs	r2, #0
    36ae:	701a      	strb	r2, [r3, #0]
				}
				ADCchip_Init();
    36b0:	4b58      	ldr	r3, [pc, #352]	; (3814 <vUiHandlerTask+0x204>)
    36b2:	4798      	blx	r3
				Get_Weight(final);
    36b4:	2308      	movs	r3, #8
    36b6:	18fb      	adds	r3, r7, r3
    36b8:	0018      	movs	r0, r3
    36ba:	4b57      	ldr	r3, [pc, #348]	; (3818 <vUiHandlerTask+0x208>)
    36bc:	4798      	blx	r3
				LoadDataVar.weight = (int)((final[0] - cali) * 4.85);
    36be:	2308      	movs	r3, #8
    36c0:	18fb      	adds	r3, r7, r3
    36c2:	681b      	ldr	r3, [r3, #0]
    36c4:	4a58      	ldr	r2, [pc, #352]	; (3828 <vUiHandlerTask+0x218>)
    36c6:	7812      	ldrb	r2, [r2, #0]
    36c8:	1a9a      	subs	r2, r3, r2
    36ca:	4b58      	ldr	r3, [pc, #352]	; (382c <vUiHandlerTask+0x21c>)
    36cc:	0010      	movs	r0, r2
    36ce:	4798      	blx	r3
    36d0:	4c57      	ldr	r4, [pc, #348]	; (3830 <vUiHandlerTask+0x220>)
    36d2:	4a58      	ldr	r2, [pc, #352]	; (3834 <vUiHandlerTask+0x224>)
    36d4:	4b58      	ldr	r3, [pc, #352]	; (3838 <vUiHandlerTask+0x228>)
    36d6:	47a0      	blx	r4
    36d8:	0003      	movs	r3, r0
    36da:	000c      	movs	r4, r1
    36dc:	0019      	movs	r1, r3
    36de:	0022      	movs	r2, r4
    36e0:	4b56      	ldr	r3, [pc, #344]	; (383c <vUiHandlerTask+0x22c>)
    36e2:	0008      	movs	r0, r1
    36e4:	0011      	movs	r1, r2
    36e6:	4798      	blx	r3
    36e8:	0003      	movs	r3, r0
    36ea:	b29a      	uxth	r2, r3
    36ec:	2310      	movs	r3, #16
    36ee:	18fb      	adds	r3, r7, r3
    36f0:	801a      	strh	r2, [r3, #0]
				snprintf(help, 32, "final_int= %d\r\n",LoadDataVar.weight);
    36f2:	2310      	movs	r3, #16
    36f4:	18fb      	adds	r3, r7, r3
    36f6:	881b      	ldrh	r3, [r3, #0]
    36f8:	4a51      	ldr	r2, [pc, #324]	; (3840 <vUiHandlerTask+0x230>)
    36fa:	211c      	movs	r1, #28
    36fc:	1878      	adds	r0, r7, r1
    36fe:	2120      	movs	r1, #32
    3700:	4c50      	ldr	r4, [pc, #320]	; (3844 <vUiHandlerTask+0x234>)
    3702:	47a0      	blx	r4
				SerialConsoleWriteString(help);
    3704:	231c      	movs	r3, #28
    3706:	18fb      	adds	r3, r7, r3
    3708:	0018      	movs	r0, r3
    370a:	4b3b      	ldr	r3, [pc, #236]	; (37f8 <vUiHandlerTask+0x1e8>)
    370c:	4798      	blx	r3
				/*gfx_mono_draw_string("Total:", 0,25, &sysfont);*/
				snprintf(help, 32, "Total:%3d", LoadDataVar.total);
    370e:	2310      	movs	r3, #16
    3710:	18fb      	adds	r3, r7, r3
    3712:	891b      	ldrh	r3, [r3, #8]
    3714:	4a4c      	ldr	r2, [pc, #304]	; (3848 <vUiHandlerTask+0x238>)
    3716:	211c      	movs	r1, #28
    3718:	1878      	adds	r0, r7, r1
    371a:	2120      	movs	r1, #32
    371c:	4c49      	ldr	r4, [pc, #292]	; (3844 <vUiHandlerTask+0x234>)
    371e:	47a0      	blx	r4
				
				gfx_mono_draw_string(help, 0,25, &sysfont);
    3720:	4b38      	ldr	r3, [pc, #224]	; (3804 <vUiHandlerTask+0x1f4>)
    3722:	221c      	movs	r2, #28
    3724:	18b8      	adds	r0, r7, r2
    3726:	2219      	movs	r2, #25
    3728:	2100      	movs	r1, #0
    372a:	4c38      	ldr	r4, [pc, #224]	; (380c <vUiHandlerTask+0x1fc>)
    372c:	47a0      	blx	r4
				is_dev = Acc_read(); //accelerate or not
    372e:	4b47      	ldr	r3, [pc, #284]	; (384c <vUiHandlerTask+0x23c>)
    3730:	4798      	blx	r3
    3732:	0003      	movs	r3, r0
    3734:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (is_dev) {
    3736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3738:	2b00      	cmp	r3, #0
    373a:	d010      	beq.n	375e <vUiHandlerTask+0x14e>
					//start of dev
					if (!is_fluctuating) {
    373c:	2347      	movs	r3, #71	; 0x47
    373e:	18fb      	adds	r3, r7, r3
    3740:	781b      	ldrb	r3, [r3, #0]
    3742:	2201      	movs	r2, #1
    3744:	4053      	eors	r3, r2
    3746:	b2db      	uxtb	r3, r3
    3748:	2b00      	cmp	r3, #0
    374a:	d003      	beq.n	3754 <vUiHandlerTask+0x144>
						is_fluctuating = true;
    374c:	2347      	movs	r3, #71	; 0x47
    374e:	18fb      	adds	r3, r7, r3
    3750:	2201      	movs	r2, #1
    3752:	701a      	strb	r2, [r3, #0]
					}
					SerialConsoleWriteString("start\r\n");
    3754:	4b3e      	ldr	r3, [pc, #248]	; (3850 <vUiHandlerTask+0x240>)
    3756:	0018      	movs	r0, r3
    3758:	4b27      	ldr	r3, [pc, #156]	; (37f8 <vUiHandlerTask+0x1e8>)
    375a:	4798      	blx	r3
    375c:	e032      	b.n	37c4 <vUiHandlerTask+0x1b4>
				}
				else {
					if (is_fluctuating) {
    375e:	2347      	movs	r3, #71	; 0x47
    3760:	18fb      	adds	r3, r7, r3
    3762:	781b      	ldrb	r3, [r3, #0]
    3764:	2b00      	cmp	r3, #0
    3766:	d023      	beq.n	37b0 <vUiHandlerTask+0x1a0>
						//end of dev
						LoadDataVar.diff = pre_fluctuation_value - LoadDataVar.weight;
    3768:	2344      	movs	r3, #68	; 0x44
    376a:	18fb      	adds	r3, r7, r3
    376c:	881b      	ldrh	r3, [r3, #0]
    376e:	2210      	movs	r2, #16
    3770:	18ba      	adds	r2, r7, r2
    3772:	8812      	ldrh	r2, [r2, #0]
    3774:	1a9a      	subs	r2, r3, r2
    3776:	2310      	movs	r3, #16
    3778:	18fb      	adds	r3, r7, r3
    377a:	605a      	str	r2, [r3, #4]
						is_fluctuating = false;
    377c:	2347      	movs	r3, #71	; 0x47
    377e:	18fb      	adds	r3, r7, r3
    3780:	2200      	movs	r2, #0
    3782:	701a      	strb	r2, [r3, #0]
						if (LoadDataVar.diff > 0)
    3784:	2310      	movs	r3, #16
    3786:	18fb      	adds	r3, r7, r3
    3788:	685b      	ldr	r3, [r3, #4]
    378a:	2b00      	cmp	r3, #0
    378c:	dd0b      	ble.n	37a6 <vUiHandlerTask+0x196>
						{
							LoadDataVar.total += LoadDataVar.diff;
    378e:	2310      	movs	r3, #16
    3790:	18fb      	adds	r3, r7, r3
    3792:	891a      	ldrh	r2, [r3, #8]
    3794:	2310      	movs	r3, #16
    3796:	18fb      	adds	r3, r7, r3
    3798:	685b      	ldr	r3, [r3, #4]
    379a:	b29b      	uxth	r3, r3
    379c:	18d3      	adds	r3, r2, r3
    379e:	b29a      	uxth	r2, r3
    37a0:	2310      	movs	r3, #16
    37a2:	18fb      	adds	r3, r7, r3
    37a4:	811a      	strh	r2, [r3, #8]
						}
						SerialConsoleWriteString("end\r\n");
    37a6:	4b2b      	ldr	r3, [pc, #172]	; (3854 <vUiHandlerTask+0x244>)
    37a8:	0018      	movs	r0, r3
    37aa:	4b13      	ldr	r3, [pc, #76]	; (37f8 <vUiHandlerTask+0x1e8>)
    37ac:	4798      	blx	r3
    37ae:	e009      	b.n	37c4 <vUiHandlerTask+0x1b4>
					} else {
					//not dev 
						pre_fluctuation_value = LoadDataVar.weight;
    37b0:	2344      	movs	r3, #68	; 0x44
    37b2:	18fb      	adds	r3, r7, r3
    37b4:	2210      	movs	r2, #16
    37b6:	18ba      	adds	r2, r7, r2
    37b8:	8812      	ldrh	r2, [r2, #0]
    37ba:	801a      	strh	r2, [r3, #0]
						SerialConsoleWriteString("normal\r\n");
    37bc:	4b26      	ldr	r3, [pc, #152]	; (3858 <vUiHandlerTask+0x248>)
    37be:	0018      	movs	r0, r3
    37c0:	4b0d      	ldr	r3, [pc, #52]	; (37f8 <vUiHandlerTask+0x1e8>)
    37c2:	4798      	blx	r3
					}
				}
				if (WifiAddWeightDataToQueue(&LoadDataVar)){
    37c4:	2310      	movs	r3, #16
    37c6:	18fb      	adds	r3, r7, r3
    37c8:	0018      	movs	r0, r3
    37ca:	4b24      	ldr	r3, [pc, #144]	; (385c <vUiHandlerTask+0x24c>)
    37cc:	4798      	blx	r3
    37ce:	1e03      	subs	r3, r0, #0
    37d0:	d004      	beq.n	37dc <vUiHandlerTask+0x1cc>
					SerialConsoleWriteString("send load ok\r\n");
    37d2:	4b23      	ldr	r3, [pc, #140]	; (3860 <vUiHandlerTask+0x250>)
    37d4:	0018      	movs	r0, r3
    37d6:	4b08      	ldr	r3, [pc, #32]	; (37f8 <vUiHandlerTask+0x1e8>)
    37d8:	4798      	blx	r3
					SerialConsoleWriteString("send load fail\r\n");
				}
				//WifiAddwatervolumeDataToQueue(&LoadDataVar);
				
			
				break;
    37da:	e009      	b.n	37f0 <vUiHandlerTask+0x1e0>
					SerialConsoleWriteString("send load fail\r\n");
    37dc:	4b21      	ldr	r3, [pc, #132]	; (3864 <vUiHandlerTask+0x254>)
    37de:	0018      	movs	r0, r3
    37e0:	4b05      	ldr	r3, [pc, #20]	; (37f8 <vUiHandlerTask+0x1e8>)
    37e2:	4798      	blx	r3
				break;
    37e4:	e004      	b.n	37f0 <vUiHandlerTask+0x1e0>
				break;
			}

			default:  // In case of unforseen error, it is always good to sent state
			// machine to an initial state.
			uiState = UI_STATE_START;
    37e6:	4b05      	ldr	r3, [pc, #20]	; (37fc <vUiHandlerTask+0x1ec>)
    37e8:	2205      	movs	r2, #5
    37ea:	701a      	strb	r2, [r3, #0]
			break;
    37ec:	e000      	b.n	37f0 <vUiHandlerTask+0x1e0>
				break;
    37ee:	46c0      	nop			; (mov r8, r8)
		vTaskDelay(200);
    37f0:	e727      	b.n	3642 <vUiHandlerTask+0x32>
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	000250f8 	.word	0x000250f8
    37f8:	0000b875 	.word	0x0000b875
    37fc:	2000498c 	.word	0x2000498c
    3800:	000011f5 	.word	0x000011f5
    3804:	20000010 	.word	0x20000010
    3808:	0002510c 	.word	0x0002510c
    380c:	00001099 	.word	0x00001099
    3810:	00009c21 	.word	0x00009c21
    3814:	00003235 	.word	0x00003235
    3818:	000035c5 	.word	0x000035c5
    381c:	00000571 	.word	0x00000571
    3820:	00025118 	.word	0x00025118
    3824:	200008b5 	.word	0x200008b5
    3828:	200008b6 	.word	0x200008b6
    382c:	00022bd9 	.word	0x00022bd9
    3830:	00022045 	.word	0x00022045
    3834:	66666666 	.word	0x66666666
    3838:	40136666 	.word	0x40136666
    383c:	00022b71 	.word	0x00022b71
    3840:	00025128 	.word	0x00025128
    3844:	00023015 	.word	0x00023015
    3848:	00025138 	.word	0x00025138
    384c:	00000331 	.word	0x00000331
    3850:	00025144 	.word	0x00025144
    3854:	0002514c 	.word	0x0002514c
    3858:	00025154 	.word	0x00025154
    385c:	00004fb9 	.word	0x00004fb9
    3860:	00025160 	.word	0x00025160
    3864:	00025170 	.word	0x00025170

00003868 <reset_total>:
	
}
}

void reset_total(void)
{
    3868:	b580      	push	{r7, lr}
    386a:	af00      	add	r7, sp, #0
	load_reset = true;
    386c:	4b02      	ldr	r3, [pc, #8]	; (3878 <reset_total+0x10>)
    386e:	2201      	movs	r2, #1
    3870:	701a      	strb	r2, [r3, #0]
}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	46bd      	mov	sp, r7
    3876:	bd80      	pop	{r7, pc}
    3878:	200008b5 	.word	0x200008b5

0000387c <cali_load>:


void cali_load(void)
{
    387c:	b580      	push	{r7, lr}
    387e:	b082      	sub	sp, #8
    3880:	af00      	add	r7, sp, #0
	int final[2];
	ADCchip_Init();
    3882:	4b07      	ldr	r3, [pc, #28]	; (38a0 <cali_load+0x24>)
    3884:	4798      	blx	r3
	Get_Weight(final);
    3886:	003b      	movs	r3, r7
    3888:	0018      	movs	r0, r3
    388a:	4b06      	ldr	r3, [pc, #24]	; (38a4 <cali_load+0x28>)
    388c:	4798      	blx	r3
	cali = final[0];
    388e:	003b      	movs	r3, r7
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	b2da      	uxtb	r2, r3
    3894:	4b04      	ldr	r3, [pc, #16]	; (38a8 <cali_load+0x2c>)
    3896:	701a      	strb	r2, [r3, #0]
}
    3898:	46c0      	nop			; (mov r8, r8)
    389a:	46bd      	mov	sp, r7
    389c:	b002      	add	sp, #8
    389e:	bd80      	pop	{r7, pc}
    38a0:	00003235 	.word	0x00003235
    38a4:	000035c5 	.word	0x000035c5
    38a8:	200008b6 	.word	0x200008b6

000038ac <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    38ac:	b580      	push	{r7, lr}
    38ae:	b084      	sub	sp, #16
    38b0:	af00      	add	r7, sp, #0
    38b2:	0002      	movs	r2, r0
    38b4:	1dfb      	adds	r3, r7, #7
    38b6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    38b8:	230f      	movs	r3, #15
    38ba:	18fb      	adds	r3, r7, r3
    38bc:	1dfa      	adds	r2, r7, #7
    38be:	7812      	ldrb	r2, [r2, #0]
    38c0:	09d2      	lsrs	r2, r2, #7
    38c2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    38c4:	230e      	movs	r3, #14
    38c6:	18fb      	adds	r3, r7, r3
    38c8:	1dfa      	adds	r2, r7, #7
    38ca:	7812      	ldrb	r2, [r2, #0]
    38cc:	0952      	lsrs	r2, r2, #5
    38ce:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    38d0:	4b0d      	ldr	r3, [pc, #52]	; (3908 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    38d2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    38d4:	230f      	movs	r3, #15
    38d6:	18fb      	adds	r3, r7, r3
    38d8:	781b      	ldrb	r3, [r3, #0]
    38da:	2b00      	cmp	r3, #0
    38dc:	d10f      	bne.n	38fe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    38de:	230f      	movs	r3, #15
    38e0:	18fb      	adds	r3, r7, r3
    38e2:	781b      	ldrb	r3, [r3, #0]
    38e4:	009b      	lsls	r3, r3, #2
    38e6:	2210      	movs	r2, #16
    38e8:	4694      	mov	ip, r2
    38ea:	44bc      	add	ip, r7
    38ec:	4463      	add	r3, ip
    38ee:	3b08      	subs	r3, #8
    38f0:	681a      	ldr	r2, [r3, #0]
    38f2:	230e      	movs	r3, #14
    38f4:	18fb      	adds	r3, r7, r3
    38f6:	781b      	ldrb	r3, [r3, #0]
    38f8:	01db      	lsls	r3, r3, #7
    38fa:	18d3      	adds	r3, r2, r3
    38fc:	e000      	b.n	3900 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    38fe:	2300      	movs	r3, #0
	}
}
    3900:	0018      	movs	r0, r3
    3902:	46bd      	mov	sp, r7
    3904:	b004      	add	sp, #16
    3906:	bd80      	pop	{r7, pc}
    3908:	41004400 	.word	0x41004400

0000390c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    390c:	b580      	push	{r7, lr}
    390e:	b082      	sub	sp, #8
    3910:	af00      	add	r7, sp, #0
    3912:	0002      	movs	r2, r0
    3914:	1dfb      	adds	r3, r7, #7
    3916:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3918:	1dfb      	adds	r3, r7, #7
    391a:	781b      	ldrb	r3, [r3, #0]
    391c:	0018      	movs	r0, r3
    391e:	4b03      	ldr	r3, [pc, #12]	; (392c <port_get_group_from_gpio_pin+0x20>)
    3920:	4798      	blx	r3
    3922:	0003      	movs	r3, r0
}
    3924:	0018      	movs	r0, r3
    3926:	46bd      	mov	sp, r7
    3928:	b002      	add	sp, #8
    392a:	bd80      	pop	{r7, pc}
    392c:	000038ad 	.word	0x000038ad

00003930 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3930:	b580      	push	{r7, lr}
    3932:	b084      	sub	sp, #16
    3934:	af00      	add	r7, sp, #0
    3936:	0002      	movs	r2, r0
    3938:	1dfb      	adds	r3, r7, #7
    393a:	701a      	strb	r2, [r3, #0]
    393c:	1dbb      	adds	r3, r7, #6
    393e:	1c0a      	adds	r2, r1, #0
    3940:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3942:	1dfb      	adds	r3, r7, #7
    3944:	781b      	ldrb	r3, [r3, #0]
    3946:	0018      	movs	r0, r3
    3948:	4b0d      	ldr	r3, [pc, #52]	; (3980 <port_pin_set_output_level+0x50>)
    394a:	4798      	blx	r3
    394c:	0003      	movs	r3, r0
    394e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3950:	1dfb      	adds	r3, r7, #7
    3952:	781b      	ldrb	r3, [r3, #0]
    3954:	221f      	movs	r2, #31
    3956:	4013      	ands	r3, r2
    3958:	2201      	movs	r2, #1
    395a:	409a      	lsls	r2, r3
    395c:	0013      	movs	r3, r2
    395e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3960:	1dbb      	adds	r3, r7, #6
    3962:	781b      	ldrb	r3, [r3, #0]
    3964:	2b00      	cmp	r3, #0
    3966:	d003      	beq.n	3970 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3968:	68fb      	ldr	r3, [r7, #12]
    396a:	68ba      	ldr	r2, [r7, #8]
    396c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    396e:	e002      	b.n	3976 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3970:	68fb      	ldr	r3, [r7, #12]
    3972:	68ba      	ldr	r2, [r7, #8]
    3974:	615a      	str	r2, [r3, #20]
}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	46bd      	mov	sp, r7
    397a:	b004      	add	sp, #16
    397c:	bd80      	pop	{r7, pc}
    397e:	46c0      	nop			; (mov r8, r8)
    3980:	0000390d 	.word	0x0000390d

00003984 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
    3984:	b580      	push	{r7, lr}
    3986:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
    3988:	4b02      	ldr	r3, [pc, #8]	; (3994 <init_state+0x10>)
    398a:	2200      	movs	r2, #0
    398c:	701a      	strb	r2, [r3, #0]
}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	46bd      	mov	sp, r7
    3992:	bd80      	pop	{r7, pc}
    3994:	200008c9 	.word	0x200008c9

00003998 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
    3998:	b580      	push	{r7, lr}
    399a:	b082      	sub	sp, #8
    399c:	af00      	add	r7, sp, #0
    399e:	0002      	movs	r2, r0
    39a0:	1dfb      	adds	r3, r7, #7
    39a2:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
    39a4:	1dfb      	adds	r3, r7, #7
    39a6:	781b      	ldrb	r3, [r3, #0]
    39a8:	b25b      	sxtb	r3, r3
    39aa:	43db      	mvns	r3, r3
    39ac:	b25b      	sxtb	r3, r3
    39ae:	4a06      	ldr	r2, [pc, #24]	; (39c8 <clear_state+0x30>)
    39b0:	7812      	ldrb	r2, [r2, #0]
    39b2:	b252      	sxtb	r2, r2
    39b4:	4013      	ands	r3, r2
    39b6:	b25b      	sxtb	r3, r3
    39b8:	b2da      	uxtb	r2, r3
    39ba:	4b03      	ldr	r3, [pc, #12]	; (39c8 <clear_state+0x30>)
    39bc:	701a      	strb	r2, [r3, #0]
}
    39be:	46c0      	nop			; (mov r8, r8)
    39c0:	46bd      	mov	sp, r7
    39c2:	b002      	add	sp, #8
    39c4:	bd80      	pop	{r7, pc}
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	200008c9 	.word	0x200008c9

000039cc <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
    39cc:	b580      	push	{r7, lr}
    39ce:	b082      	sub	sp, #8
    39d0:	af00      	add	r7, sp, #0
    39d2:	0002      	movs	r2, r0
    39d4:	1dfb      	adds	r3, r7, #7
    39d6:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
    39d8:	4b05      	ldr	r3, [pc, #20]	; (39f0 <add_state+0x24>)
    39da:	781a      	ldrb	r2, [r3, #0]
    39dc:	1dfb      	adds	r3, r7, #7
    39de:	781b      	ldrb	r3, [r3, #0]
    39e0:	4313      	orrs	r3, r2
    39e2:	b2da      	uxtb	r2, r3
    39e4:	4b02      	ldr	r3, [pc, #8]	; (39f0 <add_state+0x24>)
    39e6:	701a      	strb	r2, [r3, #0]
}
    39e8:	46c0      	nop			; (mov r8, r8)
    39ea:	46bd      	mov	sp, r7
    39ec:	b002      	add	sp, #8
    39ee:	bd80      	pop	{r7, pc}
    39f0:	200008c9 	.word	0x200008c9

000039f4 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
    39f4:	b580      	push	{r7, lr}
    39f6:	b082      	sub	sp, #8
    39f8:	af00      	add	r7, sp, #0
    39fa:	0002      	movs	r2, r0
    39fc:	1dfb      	adds	r3, r7, #7
    39fe:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
    3a00:	4b06      	ldr	r3, [pc, #24]	; (3a1c <is_state_set+0x28>)
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	1dfa      	adds	r2, r7, #7
    3a06:	7812      	ldrb	r2, [r2, #0]
    3a08:	4013      	ands	r3, r2
    3a0a:	b2db      	uxtb	r3, r3
    3a0c:	1e5a      	subs	r2, r3, #1
    3a0e:	4193      	sbcs	r3, r2
    3a10:	b2db      	uxtb	r3, r3
}
    3a12:	0018      	movs	r0, r3
    3a14:	46bd      	mov	sp, r7
    3a16:	b002      	add	sp, #8
    3a18:	bd80      	pop	{r7, pc}
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	200008c9 	.word	0x200008c9

00003a20 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
    3a20:	b590      	push	{r4, r7, lr}
    3a22:	b085      	sub	sp, #20
    3a24:	af00      	add	r7, sp, #0
    3a26:	6078      	str	r0, [r7, #4]
    3a28:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d002      	beq.n	3a36 <is_exist_file+0x16>
    3a30:	683b      	ldr	r3, [r7, #0]
    3a32:	2b00      	cmp	r3, #0
    3a34:	d101      	bne.n	3a3a <is_exist_file+0x1a>
        return false;
    3a36:	2300      	movs	r3, #0
    3a38:	e013      	b.n	3a62 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    3a3a:	230f      	movs	r3, #15
    3a3c:	18fc      	adds	r4, r7, r3
    3a3e:	6839      	ldr	r1, [r7, #0]
    3a40:	4b0a      	ldr	r3, [pc, #40]	; (3a6c <is_exist_file+0x4c>)
    3a42:	2200      	movs	r2, #0
    3a44:	0018      	movs	r0, r3
    3a46:	4b0a      	ldr	r3, [pc, #40]	; (3a70 <is_exist_file+0x50>)
    3a48:	4798      	blx	r3
    3a4a:	0003      	movs	r3, r0
    3a4c:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
    3a4e:	4b07      	ldr	r3, [pc, #28]	; (3a6c <is_exist_file+0x4c>)
    3a50:	0018      	movs	r0, r3
    3a52:	4b08      	ldr	r3, [pc, #32]	; (3a74 <is_exist_file+0x54>)
    3a54:	4798      	blx	r3
    return (ret == FR_OK);
    3a56:	230f      	movs	r3, #15
    3a58:	18fb      	adds	r3, r7, r3
    3a5a:	781b      	ldrb	r3, [r3, #0]
    3a5c:	425a      	negs	r2, r3
    3a5e:	4153      	adcs	r3, r2
    3a60:	b2db      	uxtb	r3, r3
}
    3a62:	0018      	movs	r0, r3
    3a64:	46bd      	mov	sp, r7
    3a66:	b005      	add	sp, #20
    3a68:	bd90      	pop	{r4, r7, pc}
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	20000afc 	.word	0x20000afc
    3a70:	0001b471 	.word	0x0001b471
    3a74:	0001be71 	.word	0x0001be71

00003a78 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
    3a78:	b580      	push	{r7, lr}
    3a7a:	b09e      	sub	sp, #120	; 0x78
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	60f8      	str	r0, [r7, #12]
    3a80:	60b9      	str	r1, [r7, #8]
    3a82:	1dfb      	adds	r3, r7, #7
    3a84:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
    3a86:	2376      	movs	r3, #118	; 0x76
    3a88:	18fb      	adds	r3, r7, r3
    3a8a:	2201      	movs	r2, #1
    3a8c:	801a      	strh	r2, [r3, #0]
    3a8e:	2374      	movs	r3, #116	; 0x74
    3a90:	18fb      	adds	r3, r7, r3
    3a92:	2200      	movs	r2, #0
    3a94:	801a      	strh	r2, [r3, #0]
    3a96:	236e      	movs	r3, #110	; 0x6e
    3a98:	18fb      	adds	r3, r7, r3
    3a9a:	2200      	movs	r2, #0
    3a9c:	801a      	strh	r2, [r3, #0]
    3a9e:	2372      	movs	r3, #114	; 0x72
    3aa0:	18fb      	adds	r3, r7, r3
    3aa2:	2200      	movs	r2, #0
    3aa4:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    3aa6:	2324      	movs	r3, #36	; 0x24
    3aa8:	18fb      	adds	r3, r7, r3
    3aaa:	0018      	movs	r0, r3
    3aac:	2341      	movs	r3, #65	; 0x41
    3aae:	001a      	movs	r2, r3
    3ab0:	2100      	movs	r1, #0
    3ab2:	4b92      	ldr	r3, [pc, #584]	; (3cfc <rename_to_unique+0x284>)
    3ab4:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    3ab6:	2318      	movs	r3, #24
    3ab8:	18fb      	adds	r3, r7, r3
    3aba:	0018      	movs	r0, r3
    3abc:	2309      	movs	r3, #9
    3abe:	001a      	movs	r2, r3
    3ac0:	2100      	movs	r1, #0
    3ac2:	4b8e      	ldr	r3, [pc, #568]	; (3cfc <rename_to_unique+0x284>)
    3ac4:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
    3ac6:	2314      	movs	r3, #20
    3ac8:	18fb      	adds	r3, r7, r3
    3aca:	2200      	movs	r2, #0
    3acc:	601a      	str	r2, [r3, #0]
    char *p = NULL;
    3ace:	2300      	movs	r3, #0
    3ad0:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
    3ad2:	2371      	movs	r3, #113	; 0x71
    3ad4:	18fb      	adds	r3, r7, r3
    3ad6:	2200      	movs	r2, #0
    3ad8:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
    3ada:	68bb      	ldr	r3, [r7, #8]
    3adc:	2b00      	cmp	r3, #0
    3ade:	d101      	bne.n	3ae4 <rename_to_unique+0x6c>
        return false;
    3ae0:	2300      	movs	r3, #0
    3ae2:	e106      	b.n	3cf2 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
    3ae4:	68ba      	ldr	r2, [r7, #8]
    3ae6:	68fb      	ldr	r3, [r7, #12]
    3ae8:	0011      	movs	r1, r2
    3aea:	0018      	movs	r0, r3
    3aec:	4b84      	ldr	r3, [pc, #528]	; (3d00 <rename_to_unique+0x288>)
    3aee:	4798      	blx	r3
    3af0:	0003      	movs	r3, r0
    3af2:	001a      	movs	r2, r3
    3af4:	2301      	movs	r3, #1
    3af6:	4053      	eors	r3, r2
    3af8:	b2db      	uxtb	r3, r3
    3afa:	2b00      	cmp	r3, #0
    3afc:	d001      	beq.n	3b02 <rename_to_unique+0x8a>
        return true;
    3afe:	2301      	movs	r3, #1
    3b00:	e0f7      	b.n	3cf2 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    3b02:	68bb      	ldr	r3, [r7, #8]
    3b04:	0018      	movs	r0, r3
    3b06:	4b7f      	ldr	r3, [pc, #508]	; (3d04 <rename_to_unique+0x28c>)
    3b08:	4798      	blx	r3
    3b0a:	0003      	movs	r3, r0
    3b0c:	2b40      	cmp	r3, #64	; 0x40
    3b0e:	d901      	bls.n	3b14 <rename_to_unique+0x9c>
        return false;
    3b10:	2300      	movs	r3, #0
    3b12:	e0ee      	b.n	3cf2 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
    3b14:	68bb      	ldr	r3, [r7, #8]
    3b16:	212e      	movs	r1, #46	; 0x2e
    3b18:	0018      	movs	r0, r3
    3b1a:	4b7b      	ldr	r3, [pc, #492]	; (3d08 <rename_to_unique+0x290>)
    3b1c:	4798      	blx	r3
    3b1e:	0003      	movs	r3, r0
    3b20:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
    3b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b24:	2b00      	cmp	r3, #0
    3b26:	d052      	beq.n	3bce <rename_to_unique+0x156>
        ext_len = strlen(p);
    3b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b2a:	0018      	movs	r0, r3
    3b2c:	4b75      	ldr	r3, [pc, #468]	; (3d04 <rename_to_unique+0x28c>)
    3b2e:	4798      	blx	r3
    3b30:	0002      	movs	r2, r0
    3b32:	236e      	movs	r3, #110	; 0x6e
    3b34:	18fb      	adds	r3, r7, r3
    3b36:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    3b38:	236e      	movs	r3, #110	; 0x6e
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	881b      	ldrh	r3, [r3, #0]
    3b3e:	2b07      	cmp	r3, #7
    3b40:	d837      	bhi.n	3bb2 <rename_to_unique+0x13a>
            valid_ext = true;
    3b42:	2371      	movs	r3, #113	; 0x71
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	2201      	movs	r2, #1
    3b48:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
    3b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
    3b4c:	2318      	movs	r3, #24
    3b4e:	18fb      	adds	r3, r7, r3
    3b50:	0011      	movs	r1, r2
    3b52:	0018      	movs	r0, r3
    3b54:	4b6d      	ldr	r3, [pc, #436]	; (3d0c <rename_to_unique+0x294>)
    3b56:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    3b58:	68bb      	ldr	r3, [r7, #8]
    3b5a:	0018      	movs	r0, r3
    3b5c:	4b69      	ldr	r3, [pc, #420]	; (3d04 <rename_to_unique+0x28c>)
    3b5e:	4798      	blx	r3
    3b60:	0002      	movs	r2, r0
    3b62:	236e      	movs	r3, #110	; 0x6e
    3b64:	18fb      	adds	r3, r7, r3
    3b66:	881b      	ldrh	r3, [r3, #0]
    3b68:	1ad3      	subs	r3, r2, r3
    3b6a:	2b3c      	cmp	r3, #60	; 0x3c
    3b6c:	d911      	bls.n	3b92 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    3b6e:	2374      	movs	r3, #116	; 0x74
    3b70:	18fb      	adds	r3, r7, r3
    3b72:	226e      	movs	r2, #110	; 0x6e
    3b74:	18ba      	adds	r2, r7, r2
    3b76:	8812      	ldrh	r2, [r2, #0]
    3b78:	213c      	movs	r1, #60	; 0x3c
    3b7a:	1a8a      	subs	r2, r1, r2
    3b7c:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    3b7e:	2374      	movs	r3, #116	; 0x74
    3b80:	18fb      	adds	r3, r7, r3
    3b82:	881a      	ldrh	r2, [r3, #0]
    3b84:	68b9      	ldr	r1, [r7, #8]
    3b86:	2324      	movs	r3, #36	; 0x24
    3b88:	18fb      	adds	r3, r7, r3
    3b8a:	0018      	movs	r0, r3
    3b8c:	4b60      	ldr	r3, [pc, #384]	; (3d10 <rename_to_unique+0x298>)
    3b8e:	4798      	blx	r3
    3b90:	e02a      	b.n	3be8 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
    3b92:	6eba      	ldr	r2, [r7, #104]	; 0x68
    3b94:	68bb      	ldr	r3, [r7, #8]
    3b96:	1ad2      	subs	r2, r2, r3
    3b98:	2374      	movs	r3, #116	; 0x74
    3b9a:	18fb      	adds	r3, r7, r3
    3b9c:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    3b9e:	2374      	movs	r3, #116	; 0x74
    3ba0:	18fb      	adds	r3, r7, r3
    3ba2:	881a      	ldrh	r2, [r3, #0]
    3ba4:	68b9      	ldr	r1, [r7, #8]
    3ba6:	2324      	movs	r3, #36	; 0x24
    3ba8:	18fb      	adds	r3, r7, r3
    3baa:	0018      	movs	r0, r3
    3bac:	4b58      	ldr	r3, [pc, #352]	; (3d10 <rename_to_unique+0x298>)
    3bae:	4798      	blx	r3
    3bb0:	e01a      	b.n	3be8 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    3bb2:	2374      	movs	r3, #116	; 0x74
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	223c      	movs	r2, #60	; 0x3c
    3bb8:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
    3bba:	2374      	movs	r3, #116	; 0x74
    3bbc:	18fb      	adds	r3, r7, r3
    3bbe:	881a      	ldrh	r2, [r3, #0]
    3bc0:	68b9      	ldr	r1, [r7, #8]
    3bc2:	2324      	movs	r3, #36	; 0x24
    3bc4:	18fb      	adds	r3, r7, r3
    3bc6:	0018      	movs	r0, r3
    3bc8:	4b51      	ldr	r3, [pc, #324]	; (3d10 <rename_to_unique+0x298>)
    3bca:	4798      	blx	r3
    3bcc:	e00c      	b.n	3be8 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    3bce:	2374      	movs	r3, #116	; 0x74
    3bd0:	18fb      	adds	r3, r7, r3
    3bd2:	223c      	movs	r2, #60	; 0x3c
    3bd4:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
    3bd6:	2374      	movs	r3, #116	; 0x74
    3bd8:	18fb      	adds	r3, r7, r3
    3bda:	881a      	ldrh	r2, [r3, #0]
    3bdc:	68b9      	ldr	r1, [r7, #8]
    3bde:	2324      	movs	r3, #36	; 0x24
    3be0:	18fb      	adds	r3, r7, r3
    3be2:	0018      	movs	r0, r3
    3be4:	4b4a      	ldr	r3, [pc, #296]	; (3d10 <rename_to_unique+0x298>)
    3be6:	4798      	blx	r3
    }

    name[name_len++] = '-';
    3be8:	2374      	movs	r3, #116	; 0x74
    3bea:	18fb      	adds	r3, r7, r3
    3bec:	881b      	ldrh	r3, [r3, #0]
    3bee:	2274      	movs	r2, #116	; 0x74
    3bf0:	18ba      	adds	r2, r7, r2
    3bf2:	1c59      	adds	r1, r3, #1
    3bf4:	8011      	strh	r1, [r2, #0]
    3bf6:	001a      	movs	r2, r3
    3bf8:	2324      	movs	r3, #36	; 0x24
    3bfa:	18fb      	adds	r3, r7, r3
    3bfc:	212d      	movs	r1, #45	; 0x2d
    3bfe:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    3c00:	2376      	movs	r3, #118	; 0x76
    3c02:	18fb      	adds	r3, r7, r3
    3c04:	2200      	movs	r2, #0
    3c06:	801a      	strh	r2, [r3, #0]
    3c08:	2372      	movs	r3, #114	; 0x72
    3c0a:	18fb      	adds	r3, r7, r3
    3c0c:	2201      	movs	r2, #1
    3c0e:	801a      	strh	r2, [r3, #0]
    3c10:	e010      	b.n	3c34 <rename_to_unique+0x1bc>
        count *= 10;
    3c12:	2372      	movs	r3, #114	; 0x72
    3c14:	18fa      	adds	r2, r7, r3
    3c16:	2372      	movs	r3, #114	; 0x72
    3c18:	18fb      	adds	r3, r7, r3
    3c1a:	881b      	ldrh	r3, [r3, #0]
    3c1c:	1c19      	adds	r1, r3, #0
    3c1e:	0089      	lsls	r1, r1, #2
    3c20:	18cb      	adds	r3, r1, r3
    3c22:	18db      	adds	r3, r3, r3
    3c24:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    3c26:	2376      	movs	r3, #118	; 0x76
    3c28:	18fb      	adds	r3, r7, r3
    3c2a:	881a      	ldrh	r2, [r3, #0]
    3c2c:	2376      	movs	r3, #118	; 0x76
    3c2e:	18fb      	adds	r3, r7, r3
    3c30:	3201      	adds	r2, #1
    3c32:	801a      	strh	r2, [r3, #0]
    3c34:	2376      	movs	r3, #118	; 0x76
    3c36:	18fb      	adds	r3, r7, r3
    3c38:	881b      	ldrh	r3, [r3, #0]
    3c3a:	2b02      	cmp	r3, #2
    3c3c:	d9e9      	bls.n	3c12 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
    3c3e:	2376      	movs	r3, #118	; 0x76
    3c40:	18fb      	adds	r3, r7, r3
    3c42:	2201      	movs	r2, #1
    3c44:	801a      	strh	r2, [r3, #0]
    3c46:	e04b      	b.n	3ce0 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    3c48:	2376      	movs	r3, #118	; 0x76
    3c4a:	18fb      	adds	r3, r7, r3
    3c4c:	881a      	ldrh	r2, [r3, #0]
    3c4e:	4931      	ldr	r1, [pc, #196]	; (3d14 <rename_to_unique+0x29c>)
    3c50:	2314      	movs	r3, #20
    3c52:	18fb      	adds	r3, r7, r3
    3c54:	0018      	movs	r0, r3
    3c56:	4b30      	ldr	r3, [pc, #192]	; (3d18 <rename_to_unique+0x2a0>)
    3c58:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
    3c5a:	2374      	movs	r3, #116	; 0x74
    3c5c:	18fb      	adds	r3, r7, r3
    3c5e:	881b      	ldrh	r3, [r3, #0]
    3c60:	2224      	movs	r2, #36	; 0x24
    3c62:	18ba      	adds	r2, r7, r2
    3c64:	18d3      	adds	r3, r2, r3
    3c66:	2214      	movs	r2, #20
    3c68:	18b9      	adds	r1, r7, r2
    3c6a:	2203      	movs	r2, #3
    3c6c:	0018      	movs	r0, r3
    3c6e:	4b28      	ldr	r3, [pc, #160]	; (3d10 <rename_to_unique+0x298>)
    3c70:	4798      	blx	r3
        if (valid_ext) {
    3c72:	2371      	movs	r3, #113	; 0x71
    3c74:	18fb      	adds	r3, r7, r3
    3c76:	781b      	ldrb	r3, [r3, #0]
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d00c      	beq.n	3c96 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
    3c7c:	2374      	movs	r3, #116	; 0x74
    3c7e:	18fb      	adds	r3, r7, r3
    3c80:	881b      	ldrh	r3, [r3, #0]
    3c82:	3303      	adds	r3, #3
    3c84:	2224      	movs	r2, #36	; 0x24
    3c86:	18ba      	adds	r2, r7, r2
    3c88:	18d3      	adds	r3, r2, r3
    3c8a:	2218      	movs	r2, #24
    3c8c:	18ba      	adds	r2, r7, r2
    3c8e:	0011      	movs	r1, r2
    3c90:	0018      	movs	r0, r3
    3c92:	4b1e      	ldr	r3, [pc, #120]	; (3d0c <rename_to_unique+0x294>)
    3c94:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
    3c96:	2324      	movs	r3, #36	; 0x24
    3c98:	18fa      	adds	r2, r7, r3
    3c9a:	68fb      	ldr	r3, [r7, #12]
    3c9c:	0011      	movs	r1, r2
    3c9e:	0018      	movs	r0, r3
    3ca0:	4b17      	ldr	r3, [pc, #92]	; (3d00 <rename_to_unique+0x288>)
    3ca2:	4798      	blx	r3
    3ca4:	0003      	movs	r3, r0
    3ca6:	001a      	movs	r2, r3
    3ca8:	2301      	movs	r3, #1
    3caa:	4053      	eors	r3, r2
    3cac:	b2db      	uxtb	r3, r3
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d00f      	beq.n	3cd2 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
    3cb2:	1dfb      	adds	r3, r7, #7
    3cb4:	781a      	ldrb	r2, [r3, #0]
    3cb6:	68bb      	ldr	r3, [r7, #8]
    3cb8:	2100      	movs	r1, #0
    3cba:	0018      	movs	r0, r3
    3cbc:	4b0f      	ldr	r3, [pc, #60]	; (3cfc <rename_to_unique+0x284>)
    3cbe:	4798      	blx	r3
            strcpy(file_path_name, name);
    3cc0:	2324      	movs	r3, #36	; 0x24
    3cc2:	18fa      	adds	r2, r7, r3
    3cc4:	68bb      	ldr	r3, [r7, #8]
    3cc6:	0011      	movs	r1, r2
    3cc8:	0018      	movs	r0, r3
    3cca:	4b10      	ldr	r3, [pc, #64]	; (3d0c <rename_to_unique+0x294>)
    3ccc:	4798      	blx	r3
            return true;
    3cce:	2301      	movs	r3, #1
    3cd0:	e00f      	b.n	3cf2 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
    3cd2:	2376      	movs	r3, #118	; 0x76
    3cd4:	18fb      	adds	r3, r7, r3
    3cd6:	881a      	ldrh	r2, [r3, #0]
    3cd8:	2376      	movs	r3, #118	; 0x76
    3cda:	18fb      	adds	r3, r7, r3
    3cdc:	3201      	adds	r2, #1
    3cde:	801a      	strh	r2, [r3, #0]
    3ce0:	2376      	movs	r3, #118	; 0x76
    3ce2:	18fa      	adds	r2, r7, r3
    3ce4:	2372      	movs	r3, #114	; 0x72
    3ce6:	18fb      	adds	r3, r7, r3
    3ce8:	8812      	ldrh	r2, [r2, #0]
    3cea:	881b      	ldrh	r3, [r3, #0]
    3cec:	429a      	cmp	r2, r3
    3cee:	d3ab      	bcc.n	3c48 <rename_to_unique+0x1d0>
        }
    }
    return false;
    3cf0:	2300      	movs	r3, #0
}
    3cf2:	0018      	movs	r0, r3
    3cf4:	46bd      	mov	sp, r7
    3cf6:	b01e      	add	sp, #120	; 0x78
    3cf8:	bd80      	pop	{r7, pc}
    3cfa:	46c0      	nop			; (mov r8, r8)
    3cfc:	00022dbb 	.word	0x00022dbb
    3d00:	00003a21 	.word	0x00003a21
    3d04:	00023157 	.word	0x00023157
    3d08:	000231b1 	.word	0x000231b1
    3d0c:	0002310d 	.word	0x0002310d
    3d10:	00023187 	.word	0x00023187
    3d14:	00025198 	.word	0x00025198
    3d18:	00023079 	.word	0x00023079

00003d1c <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
    3d1c:	b590      	push	{r4, r7, lr}
    3d1e:	b083      	sub	sp, #12
    3d20:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
    3d22:	2001      	movs	r0, #1
    3d24:	4b22      	ldr	r3, [pc, #136]	; (3db0 <start_download+0x94>)
    3d26:	4798      	blx	r3
    3d28:	0003      	movs	r3, r0
    3d2a:	001a      	movs	r2, r3
    3d2c:	2301      	movs	r3, #1
    3d2e:	4053      	eors	r3, r2
    3d30:	b2db      	uxtb	r3, r3
    3d32:	2b00      	cmp	r3, #0
    3d34:	d005      	beq.n	3d42 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
    3d36:	4b1f      	ldr	r3, [pc, #124]	; (3db4 <start_download+0x98>)
    3d38:	0019      	movs	r1, r3
    3d3a:	2001      	movs	r0, #1
    3d3c:	4b1e      	ldr	r3, [pc, #120]	; (3db8 <start_download+0x9c>)
    3d3e:	4798      	blx	r3
        return;
    3d40:	e032      	b.n	3da8 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
    3d42:	2002      	movs	r0, #2
    3d44:	4b1a      	ldr	r3, [pc, #104]	; (3db0 <start_download+0x94>)
    3d46:	4798      	blx	r3
    3d48:	0003      	movs	r3, r0
    3d4a:	001a      	movs	r2, r3
    3d4c:	2301      	movs	r3, #1
    3d4e:	4053      	eors	r3, r2
    3d50:	b2db      	uxtb	r3, r3
    3d52:	2b00      	cmp	r3, #0
    3d54:	d005      	beq.n	3d62 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
    3d56:	4b19      	ldr	r3, [pc, #100]	; (3dbc <start_download+0xa0>)
    3d58:	0019      	movs	r1, r3
    3d5a:	2001      	movs	r0, #1
    3d5c:	4b16      	ldr	r3, [pc, #88]	; (3db8 <start_download+0x9c>)
    3d5e:	4798      	blx	r3
        return;
    3d60:	e022      	b.n	3da8 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
    3d62:	2004      	movs	r0, #4
    3d64:	4b12      	ldr	r3, [pc, #72]	; (3db0 <start_download+0x94>)
    3d66:	4798      	blx	r3
    3d68:	1e03      	subs	r3, r0, #0
    3d6a:	d005      	beq.n	3d78 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
    3d6c:	4b14      	ldr	r3, [pc, #80]	; (3dc0 <start_download+0xa4>)
    3d6e:	0019      	movs	r1, r3
    3d70:	2001      	movs	r0, #1
    3d72:	4b11      	ldr	r3, [pc, #68]	; (3db8 <start_download+0x9c>)
    3d74:	4798      	blx	r3
        return;
    3d76:	e017      	b.n	3da8 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
    3d78:	2008      	movs	r0, #8
    3d7a:	4b0d      	ldr	r3, [pc, #52]	; (3db0 <start_download+0x94>)
    3d7c:	4798      	blx	r3
    3d7e:	1e03      	subs	r3, r0, #0
    3d80:	d005      	beq.n	3d8e <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
    3d82:	4b10      	ldr	r3, [pc, #64]	; (3dc4 <start_download+0xa8>)
    3d84:	0019      	movs	r1, r3
    3d86:	2001      	movs	r0, #1
    3d88:	4b0b      	ldr	r3, [pc, #44]	; (3db8 <start_download+0x9c>)
    3d8a:	4798      	blx	r3
        return;
    3d8c:	e00c      	b.n	3da8 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
    3d8e:	4b0e      	ldr	r3, [pc, #56]	; (3dc8 <start_download+0xac>)
    3d90:	0019      	movs	r1, r3
    3d92:	2001      	movs	r0, #1
    3d94:	4b08      	ldr	r3, [pc, #32]	; (3db8 <start_download+0x9c>)
    3d96:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    3d98:	490c      	ldr	r1, [pc, #48]	; (3dcc <start_download+0xb0>)
    3d9a:	480d      	ldr	r0, [pc, #52]	; (3dd0 <start_download+0xb4>)
    3d9c:	2300      	movs	r3, #0
    3d9e:	9300      	str	r3, [sp, #0]
    3da0:	2300      	movs	r3, #0
    3da2:	2201      	movs	r2, #1
    3da4:	4c0b      	ldr	r4, [pc, #44]	; (3dd4 <start_download+0xb8>)
    3da6:	47a0      	blx	r4
}
    3da8:	46bd      	mov	sp, r7
    3daa:	b001      	add	sp, #4
    3dac:	bd90      	pop	{r4, r7, pc}
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	000039f5 	.word	0x000039f5
    3db4:	000251a0 	.word	0x000251a0
    3db8:	0000b961 	.word	0x0000b961
    3dbc:	000251cc 	.word	0x000251cc
    3dc0:	000251f8 	.word	0x000251f8
    3dc4:	00025224 	.word	0x00025224
    3dc8:	00025250 	.word	0x00025250
    3dcc:	0002527c 	.word	0x0002527c
    3dd0:	200049e8 	.word	0x200049e8
    3dd4:	0001eac5 	.word	0x0001eac5

00003dd8 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
    3dd8:	b5b0      	push	{r4, r5, r7, lr}
    3dda:	b086      	sub	sp, #24
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
    3de0:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
    3de2:	687b      	ldr	r3, [r7, #4]
    3de4:	2b00      	cmp	r3, #0
    3de6:	d002      	beq.n	3dee <store_file_packet+0x16>
    3de8:	683b      	ldr	r3, [r7, #0]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d105      	bne.n	3dfa <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
    3dee:	4b58      	ldr	r3, [pc, #352]	; (3f50 <store_file_packet+0x178>)
    3df0:	0019      	movs	r1, r3
    3df2:	2001      	movs	r0, #1
    3df4:	4b57      	ldr	r3, [pc, #348]	; (3f54 <store_file_packet+0x17c>)
    3df6:	4798      	blx	r3
        return;
    3df8:	e0a6      	b.n	3f48 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
    3dfa:	2008      	movs	r0, #8
    3dfc:	4b56      	ldr	r3, [pc, #344]	; (3f58 <store_file_packet+0x180>)
    3dfe:	4798      	blx	r3
    3e00:	0003      	movs	r3, r0
    3e02:	001a      	movs	r2, r3
    3e04:	2301      	movs	r3, #1
    3e06:	4053      	eors	r3, r2
    3e08:	b2db      	uxtb	r3, r3
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d055      	beq.n	3eba <store_file_packet+0xe2>
        char *cp = NULL;
    3e0e:	2300      	movs	r3, #0
    3e10:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    3e12:	4b52      	ldr	r3, [pc, #328]	; (3f5c <store_file_packet+0x184>)
    3e14:	2230      	movs	r2, #48	; 0x30
    3e16:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
    3e18:	4b50      	ldr	r3, [pc, #320]	; (3f5c <store_file_packet+0x184>)
    3e1a:	223a      	movs	r2, #58	; 0x3a
    3e1c:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
    3e1e:	4b50      	ldr	r3, [pc, #320]	; (3f60 <store_file_packet+0x188>)
    3e20:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    3e22:	e002      	b.n	3e2a <store_file_packet+0x52>
            cp--;
    3e24:	697b      	ldr	r3, [r7, #20]
    3e26:	3b01      	subs	r3, #1
    3e28:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    3e2a:	697b      	ldr	r3, [r7, #20]
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	2b2f      	cmp	r3, #47	; 0x2f
    3e30:	d1f8      	bne.n	3e24 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
    3e32:	697b      	ldr	r3, [r7, #20]
    3e34:	0018      	movs	r0, r3
    3e36:	4b4b      	ldr	r3, [pc, #300]	; (3f64 <store_file_packet+0x18c>)
    3e38:	4798      	blx	r3
    3e3a:	0003      	movs	r3, r0
    3e3c:	2b01      	cmp	r3, #1
    3e3e:	d924      	bls.n	3e8a <store_file_packet+0xb2>
            cp++;
    3e40:	697b      	ldr	r3, [r7, #20]
    3e42:	3301      	adds	r3, #1
    3e44:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
    3e46:	697a      	ldr	r2, [r7, #20]
    3e48:	4b47      	ldr	r3, [pc, #284]	; (3f68 <store_file_packet+0x190>)
    3e4a:	0011      	movs	r1, r2
    3e4c:	0018      	movs	r0, r3
    3e4e:	4b47      	ldr	r3, [pc, #284]	; (3f6c <store_file_packet+0x194>)
    3e50:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    3e52:	4942      	ldr	r1, [pc, #264]	; (3f5c <store_file_packet+0x184>)
    3e54:	4b46      	ldr	r3, [pc, #280]	; (3f70 <store_file_packet+0x198>)
    3e56:	2240      	movs	r2, #64	; 0x40
    3e58:	0018      	movs	r0, r3
    3e5a:	4b46      	ldr	r3, [pc, #280]	; (3f74 <store_file_packet+0x19c>)
    3e5c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
    3e5e:	4a3f      	ldr	r2, [pc, #252]	; (3f5c <store_file_packet+0x184>)
    3e60:	4b45      	ldr	r3, [pc, #276]	; (3f78 <store_file_packet+0x1a0>)
    3e62:	0019      	movs	r1, r3
    3e64:	2001      	movs	r0, #1
    3e66:	4b3b      	ldr	r3, [pc, #236]	; (3f54 <store_file_packet+0x17c>)
    3e68:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    3e6a:	2313      	movs	r3, #19
    3e6c:	18fc      	adds	r4, r7, r3
    3e6e:	493b      	ldr	r1, [pc, #236]	; (3f5c <store_file_packet+0x184>)
    3e70:	4b3f      	ldr	r3, [pc, #252]	; (3f70 <store_file_packet+0x198>)
    3e72:	220a      	movs	r2, #10
    3e74:	0018      	movs	r0, r3
    3e76:	4b41      	ldr	r3, [pc, #260]	; (3f7c <store_file_packet+0x1a4>)
    3e78:	4798      	blx	r3
    3e7a:	0003      	movs	r3, r0
    3e7c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    3e7e:	2313      	movs	r3, #19
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	781b      	ldrb	r3, [r3, #0]
    3e84:	2b00      	cmp	r3, #0
    3e86:	d012      	beq.n	3eae <store_file_packet+0xd6>
    3e88:	e008      	b.n	3e9c <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
    3e8a:	4b3d      	ldr	r3, [pc, #244]	; (3f80 <store_file_packet+0x1a8>)
    3e8c:	0019      	movs	r1, r3
    3e8e:	2001      	movs	r0, #1
    3e90:	4b30      	ldr	r3, [pc, #192]	; (3f54 <store_file_packet+0x17c>)
    3e92:	4798      	blx	r3
            add_state(CANCELED);
    3e94:	2020      	movs	r0, #32
    3e96:	4b3b      	ldr	r3, [pc, #236]	; (3f84 <store_file_packet+0x1ac>)
    3e98:	4798      	blx	r3
            return;
    3e9a:	e055      	b.n	3f48 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
    3e9c:	2313      	movs	r3, #19
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	781a      	ldrb	r2, [r3, #0]
    3ea2:	4b39      	ldr	r3, [pc, #228]	; (3f88 <store_file_packet+0x1b0>)
    3ea4:	0019      	movs	r1, r3
    3ea6:	2001      	movs	r0, #1
    3ea8:	4b2a      	ldr	r3, [pc, #168]	; (3f54 <store_file_packet+0x17c>)
    3eaa:	4798      	blx	r3
            return;
    3eac:	e04c      	b.n	3f48 <store_file_packet+0x170>
        }

        received_file_size = 0;
    3eae:	4b37      	ldr	r3, [pc, #220]	; (3f8c <store_file_packet+0x1b4>)
    3eb0:	2200      	movs	r2, #0
    3eb2:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
    3eb4:	2008      	movs	r0, #8
    3eb6:	4b33      	ldr	r3, [pc, #204]	; (3f84 <store_file_packet+0x1ac>)
    3eb8:	4798      	blx	r3
    }

    if (data != NULL) {
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d043      	beq.n	3f48 <store_file_packet+0x170>
        UINT wsize = 0;
    3ec0:	2300      	movs	r3, #0
    3ec2:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
    3ec4:	2313      	movs	r3, #19
    3ec6:	18fc      	adds	r4, r7, r3
    3ec8:	230c      	movs	r3, #12
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	683a      	ldr	r2, [r7, #0]
    3ece:	6879      	ldr	r1, [r7, #4]
    3ed0:	4827      	ldr	r0, [pc, #156]	; (3f70 <store_file_packet+0x198>)
    3ed2:	4d2f      	ldr	r5, [pc, #188]	; (3f90 <store_file_packet+0x1b8>)
    3ed4:	47a8      	blx	r5
    3ed6:	0003      	movs	r3, r0
    3ed8:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    3eda:	2313      	movs	r3, #19
    3edc:	18fb      	adds	r3, r7, r3
    3ede:	781b      	ldrb	r3, [r3, #0]
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d00c      	beq.n	3efe <store_file_packet+0x126>
            f_close(&file_object);
    3ee4:	4b22      	ldr	r3, [pc, #136]	; (3f70 <store_file_packet+0x198>)
    3ee6:	0018      	movs	r0, r3
    3ee8:	4b2a      	ldr	r3, [pc, #168]	; (3f94 <store_file_packet+0x1bc>)
    3eea:	4798      	blx	r3
            add_state(CANCELED);
    3eec:	2020      	movs	r0, #32
    3eee:	4b25      	ldr	r3, [pc, #148]	; (3f84 <store_file_packet+0x1ac>)
    3ef0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
    3ef2:	4b29      	ldr	r3, [pc, #164]	; (3f98 <store_file_packet+0x1c0>)
    3ef4:	0019      	movs	r1, r3
    3ef6:	2001      	movs	r0, #1
    3ef8:	4b16      	ldr	r3, [pc, #88]	; (3f54 <store_file_packet+0x17c>)
    3efa:	4798      	blx	r3
            return;
    3efc:	e024      	b.n	3f48 <store_file_packet+0x170>
        }

        received_file_size += wsize;
    3efe:	4b23      	ldr	r3, [pc, #140]	; (3f8c <store_file_packet+0x1b4>)
    3f00:	681a      	ldr	r2, [r3, #0]
    3f02:	68fb      	ldr	r3, [r7, #12]
    3f04:	18d2      	adds	r2, r2, r3
    3f06:	4b21      	ldr	r3, [pc, #132]	; (3f8c <store_file_packet+0x1b4>)
    3f08:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    3f0a:	4b20      	ldr	r3, [pc, #128]	; (3f8c <store_file_packet+0x1b4>)
    3f0c:	681a      	ldr	r2, [r3, #0]
    3f0e:	4b23      	ldr	r3, [pc, #140]	; (3f9c <store_file_packet+0x1c4>)
    3f10:	681b      	ldr	r3, [r3, #0]
    3f12:	4923      	ldr	r1, [pc, #140]	; (3fa0 <store_file_packet+0x1c8>)
    3f14:	2001      	movs	r0, #1
    3f16:	4c0f      	ldr	r4, [pc, #60]	; (3f54 <store_file_packet+0x17c>)
    3f18:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
    3f1a:	4b1c      	ldr	r3, [pc, #112]	; (3f8c <store_file_packet+0x1b4>)
    3f1c:	681a      	ldr	r2, [r3, #0]
    3f1e:	4b1f      	ldr	r3, [pc, #124]	; (3f9c <store_file_packet+0x1c4>)
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	429a      	cmp	r2, r3
    3f24:	d310      	bcc.n	3f48 <store_file_packet+0x170>
            f_close(&file_object);
    3f26:	4b12      	ldr	r3, [pc, #72]	; (3f70 <store_file_packet+0x198>)
    3f28:	0018      	movs	r0, r3
    3f2a:	4b1a      	ldr	r3, [pc, #104]	; (3f94 <store_file_packet+0x1bc>)
    3f2c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
    3f2e:	4b1d      	ldr	r3, [pc, #116]	; (3fa4 <store_file_packet+0x1cc>)
    3f30:	0019      	movs	r1, r3
    3f32:	2001      	movs	r0, #1
    3f34:	4b07      	ldr	r3, [pc, #28]	; (3f54 <store_file_packet+0x17c>)
    3f36:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
    3f38:	2100      	movs	r1, #0
    3f3a:	2017      	movs	r0, #23
    3f3c:	4b1a      	ldr	r3, [pc, #104]	; (3fa8 <store_file_packet+0x1d0>)
    3f3e:	4798      	blx	r3
            add_state(COMPLETED);
    3f40:	2010      	movs	r0, #16
    3f42:	4b10      	ldr	r3, [pc, #64]	; (3f84 <store_file_packet+0x1ac>)
    3f44:	4798      	blx	r3
            return;
    3f46:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    3f48:	46bd      	mov	sp, r7
    3f4a:	b006      	add	sp, #24
    3f4c:	bdb0      	pop	{r4, r5, r7, pc}
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	000252a8 	.word	0x000252a8
    3f54:	0000b961 	.word	0x0000b961
    3f58:	000039f5 	.word	0x000039f5
    3f5c:	200000b4 	.word	0x200000b4
    3f60:	000252a6 	.word	0x000252a6
    3f64:	00023157 	.word	0x00023157
    3f68:	200000b6 	.word	0x200000b6
    3f6c:	0002310d 	.word	0x0002310d
    3f70:	20000afc 	.word	0x20000afc
    3f74:	00003a79 	.word	0x00003a79
    3f78:	0002530c 	.word	0x0002530c
    3f7c:	0001b471 	.word	0x0001b471
    3f80:	000252cc 	.word	0x000252cc
    3f84:	000039cd 	.word	0x000039cd
    3f88:	00025334 	.word	0x00025334
    3f8c:	20000b24 	.word	0x20000b24
    3f90:	0001b9a1 	.word	0x0001b9a1
    3f94:	0001be71 	.word	0x0001be71
    3f98:	00025368 	.word	0x00025368
    3f9c:	20000b20 	.word	0x20000b20
    3fa0:	000253a4 	.word	0x000253a4
    3fa4:	000253d8 	.word	0x000253d8
    3fa8:	00003931 	.word	0x00003931

00003fac <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    3fac:	b590      	push	{r4, r7, lr}
    3fae:	b085      	sub	sp, #20
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	60f8      	str	r0, [r7, #12]
    3fb4:	60b9      	str	r1, [r7, #8]
    3fb6:	607a      	str	r2, [r7, #4]
    switch (type) {
    3fb8:	68bb      	ldr	r3, [r7, #8]
    3fba:	2b04      	cmp	r3, #4
    3fbc:	d900      	bls.n	3fc0 <http_client_callback+0x14>
    3fbe:	e077      	b.n	40b0 <http_client_callback+0x104>
    3fc0:	68bb      	ldr	r3, [r7, #8]
    3fc2:	009a      	lsls	r2, r3, #2
    3fc4:	4b3c      	ldr	r3, [pc, #240]	; (40b8 <http_client_callback+0x10c>)
    3fc6:	18d3      	adds	r3, r2, r3
    3fc8:	681b      	ldr	r3, [r3, #0]
    3fca:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
    3fcc:	4b3b      	ldr	r3, [pc, #236]	; (40bc <http_client_callback+0x110>)
    3fce:	0019      	movs	r1, r3
    3fd0:	2001      	movs	r0, #1
    3fd2:	4b3b      	ldr	r3, [pc, #236]	; (40c0 <http_client_callback+0x114>)
    3fd4:	4798      	blx	r3
            break;
    3fd6:	e06b      	b.n	40b0 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
    3fd8:	4b3a      	ldr	r3, [pc, #232]	; (40c4 <http_client_callback+0x118>)
    3fda:	0019      	movs	r1, r3
    3fdc:	2001      	movs	r0, #1
    3fde:	4b38      	ldr	r3, [pc, #224]	; (40c0 <http_client_callback+0x114>)
    3fe0:	4798      	blx	r3
            add_state(GET_REQUESTED);
    3fe2:	2004      	movs	r0, #4
    3fe4:	4b38      	ldr	r3, [pc, #224]	; (40c8 <http_client_callback+0x11c>)
    3fe6:	4798      	blx	r3
            break;
    3fe8:	e062      	b.n	40b0 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	881b      	ldrh	r3, [r3, #0]
    3fee:	001a      	movs	r2, r3
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	685b      	ldr	r3, [r3, #4]
    3ff4:	4935      	ldr	r1, [pc, #212]	; (40cc <http_client_callback+0x120>)
    3ff6:	2001      	movs	r0, #1
    3ff8:	4c31      	ldr	r4, [pc, #196]	; (40c0 <http_client_callback+0x114>)
    3ffa:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	881b      	ldrh	r3, [r3, #0]
    4000:	2bc8      	cmp	r3, #200	; 0xc8
    4002:	d10d      	bne.n	4020 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	685a      	ldr	r2, [r3, #4]
    4008:	4b31      	ldr	r3, [pc, #196]	; (40d0 <http_client_callback+0x124>)
    400a:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
    400c:	4b31      	ldr	r3, [pc, #196]	; (40d4 <http_client_callback+0x128>)
    400e:	2200      	movs	r2, #0
    4010:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	685a      	ldr	r2, [r3, #4]
    4016:	2380      	movs	r3, #128	; 0x80
    4018:	009b      	lsls	r3, r3, #2
    401a:	429a      	cmp	r2, r3
    401c:	d843      	bhi.n	40a6 <http_client_callback+0xfa>
    401e:	e003      	b.n	4028 <http_client_callback+0x7c>
                add_state(CANCELED);
    4020:	2020      	movs	r0, #32
    4022:	4b29      	ldr	r3, [pc, #164]	; (40c8 <http_client_callback+0x11c>)
    4024:	4798      	blx	r3
                return;
    4026:	e043      	b.n	40b0 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	689a      	ldr	r2, [r3, #8]
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	685b      	ldr	r3, [r3, #4]
    4030:	0019      	movs	r1, r3
    4032:	0010      	movs	r0, r2
    4034:	4b28      	ldr	r3, [pc, #160]	; (40d8 <http_client_callback+0x12c>)
    4036:	4798      	blx	r3
                add_state(COMPLETED);
    4038:	2010      	movs	r0, #16
    403a:	4b23      	ldr	r3, [pc, #140]	; (40c8 <http_client_callback+0x11c>)
    403c:	4798      	blx	r3
            }
            break;
    403e:	e032      	b.n	40a6 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    4040:	687b      	ldr	r3, [r7, #4]
    4042:	685a      	ldr	r2, [r3, #4]
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	0019      	movs	r1, r3
    404a:	0010      	movs	r0, r2
    404c:	4b22      	ldr	r3, [pc, #136]	; (40d8 <http_client_callback+0x12c>)
    404e:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	7a1b      	ldrb	r3, [r3, #8]
    4054:	2b00      	cmp	r3, #0
    4056:	d028      	beq.n	40aa <http_client_callback+0xfe>
                add_state(COMPLETED);
    4058:	2010      	movs	r0, #16
    405a:	4b1b      	ldr	r3, [pc, #108]	; (40c8 <http_client_callback+0x11c>)
    405c:	4798      	blx	r3
            }

            break;
    405e:	e024      	b.n	40aa <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    4060:	687b      	ldr	r3, [r7, #4]
    4062:	681a      	ldr	r2, [r3, #0]
    4064:	4b1d      	ldr	r3, [pc, #116]	; (40dc <http_client_callback+0x130>)
    4066:	0019      	movs	r1, r3
    4068:	2001      	movs	r0, #1
    406a:	4b15      	ldr	r3, [pc, #84]	; (40c0 <http_client_callback+0x114>)
    406c:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	681b      	ldr	r3, [r3, #0]
    4072:	330b      	adds	r3, #11
    4074:	d11b      	bne.n	40ae <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
    4076:	2008      	movs	r0, #8
    4078:	4b19      	ldr	r3, [pc, #100]	; (40e0 <http_client_callback+0x134>)
    407a:	4798      	blx	r3
    407c:	1e03      	subs	r3, r0, #0
    407e:	d006      	beq.n	408e <http_client_callback+0xe2>
                    f_close(&file_object);
    4080:	4b18      	ldr	r3, [pc, #96]	; (40e4 <http_client_callback+0x138>)
    4082:	0018      	movs	r0, r3
    4084:	4b18      	ldr	r3, [pc, #96]	; (40e8 <http_client_callback+0x13c>)
    4086:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    4088:	2008      	movs	r0, #8
    408a:	4b18      	ldr	r3, [pc, #96]	; (40ec <http_client_callback+0x140>)
    408c:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
    408e:	2004      	movs	r0, #4
    4090:	4b13      	ldr	r3, [pc, #76]	; (40e0 <http_client_callback+0x134>)
    4092:	4798      	blx	r3
    4094:	1e03      	subs	r3, r0, #0
    4096:	d002      	beq.n	409e <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
    4098:	2004      	movs	r0, #4
    409a:	4b14      	ldr	r3, [pc, #80]	; (40ec <http_client_callback+0x140>)
    409c:	4798      	blx	r3
                }

                start_download();
    409e:	4b14      	ldr	r3, [pc, #80]	; (40f0 <http_client_callback+0x144>)
    40a0:	4798      	blx	r3
            }

            break;
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	e003      	b.n	40ae <http_client_callback+0x102>
            break;
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	e002      	b.n	40b0 <http_client_callback+0x104>
            break;
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	e000      	b.n	40b0 <http_client_callback+0x104>
            break;
    40ae:	46c0      	nop			; (mov r8, r8)
    }
}
    40b0:	46bd      	mov	sp, r7
    40b2:	b005      	add	sp, #20
    40b4:	bd90      	pop	{r4, r7, pc}
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	00025aec 	.word	0x00025aec
    40bc:	0002540c 	.word	0x0002540c
    40c0:	0000b961 	.word	0x0000b961
    40c4:	00025444 	.word	0x00025444
    40c8:	000039cd 	.word	0x000039cd
    40cc:	00025470 	.word	0x00025470
    40d0:	20000b20 	.word	0x20000b20
    40d4:	20000b24 	.word	0x20000b24
    40d8:	00003dd9 	.word	0x00003dd9
    40dc:	000254ac 	.word	0x000254ac
    40e0:	000039f5 	.word	0x000039f5
    40e4:	20000afc 	.word	0x20000afc
    40e8:	0001be71 	.word	0x0001be71
    40ec:	00003999 	.word	0x00003999
    40f0:	00003d1d 	.word	0x00003d1d

000040f4 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    40f4:	b580      	push	{r7, lr}
    40f6:	b082      	sub	sp, #8
    40f8:	af00      	add	r7, sp, #0
    40fa:	603a      	str	r2, [r7, #0]
    40fc:	1dfb      	adds	r3, r7, #7
    40fe:	1c02      	adds	r2, r0, #0
    4100:	701a      	strb	r2, [r3, #0]
    4102:	1dbb      	adds	r3, r7, #6
    4104:	1c0a      	adds	r2, r1, #0
    4106:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
    4108:	683a      	ldr	r2, [r7, #0]
    410a:	1dbb      	adds	r3, r7, #6
    410c:	7819      	ldrb	r1, [r3, #0]
    410e:	1dfb      	adds	r3, r7, #7
    4110:	781b      	ldrb	r3, [r3, #0]
    4112:	b25b      	sxtb	r3, r3
    4114:	0018      	movs	r0, r3
    4116:	4b03      	ldr	r3, [pc, #12]	; (4124 <socket_cb+0x30>)
    4118:	4798      	blx	r3
}
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	46bd      	mov	sp, r7
    411e:	b002      	add	sp, #8
    4120:	bd80      	pop	{r7, pc}
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	0001e7d5 	.word	0x0001e7d5

00004128 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    4128:	b5b0      	push	{r4, r5, r7, lr}
    412a:	b086      	sub	sp, #24
    412c:	af04      	add	r7, sp, #16
    412e:	6078      	str	r0, [r7, #4]
    4130:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
    4132:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
    4134:	22ff      	movs	r2, #255	; 0xff
    4136:	4013      	ands	r3, r2
    4138:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
    413a:	683b      	ldr	r3, [r7, #0]
    413c:	0a1b      	lsrs	r3, r3, #8
    413e:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
    4140:	23ff      	movs	r3, #255	; 0xff
    4142:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
    4144:	683a      	ldr	r2, [r7, #0]
    4146:	0c12      	lsrs	r2, r2, #16
    4148:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
    414a:	22ff      	movs	r2, #255	; 0xff
    414c:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
    414e:	6839      	ldr	r1, [r7, #0]
    4150:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
    4152:	000d      	movs	r5, r1
    4154:	6878      	ldr	r0, [r7, #4]
    4156:	4909      	ldr	r1, [pc, #36]	; (417c <resolve_cb+0x54>)
    4158:	9502      	str	r5, [sp, #8]
    415a:	9201      	str	r2, [sp, #4]
    415c:	9300      	str	r3, [sp, #0]
    415e:	0023      	movs	r3, r4
    4160:	0002      	movs	r2, r0
    4162:	2001      	movs	r0, #1
    4164:	4c06      	ldr	r4, [pc, #24]	; (4180 <resolve_cb+0x58>)
    4166:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    4168:	683a      	ldr	r2, [r7, #0]
    416a:	687b      	ldr	r3, [r7, #4]
    416c:	0011      	movs	r1, r2
    416e:	0018      	movs	r0, r3
    4170:	4b04      	ldr	r3, [pc, #16]	; (4184 <resolve_cb+0x5c>)
    4172:	4798      	blx	r3
}
    4174:	46c0      	nop			; (mov r8, r8)
    4176:	46bd      	mov	sp, r7
    4178:	b002      	add	sp, #8
    417a:	bdb0      	pop	{r4, r5, r7, pc}
    417c:	000254dc 	.word	0x000254dc
    4180:	0000b961 	.word	0x0000b961
    4184:	0001e939 	.word	0x0001e939

00004188 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    4188:	b590      	push	{r4, r7, lr}
    418a:	b087      	sub	sp, #28
    418c:	af02      	add	r7, sp, #8
    418e:	0002      	movs	r2, r0
    4190:	6039      	str	r1, [r7, #0]
    4192:	1dfb      	adds	r3, r7, #7
    4194:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
    4196:	1dfb      	adds	r3, r7, #7
    4198:	781b      	ldrb	r3, [r3, #0]
    419a:	2b2c      	cmp	r3, #44	; 0x2c
    419c:	d002      	beq.n	41a4 <wifi_cb+0x1c>
    419e:	2b32      	cmp	r3, #50	; 0x32
    41a0:	d03d      	beq.n	421e <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
    41a2:	e06f      	b.n	4284 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    41a4:	683b      	ldr	r3, [r7, #0]
    41a6:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    41a8:	68fb      	ldr	r3, [r7, #12]
    41aa:	781b      	ldrb	r3, [r3, #0]
    41ac:	2b01      	cmp	r3, #1
    41ae:	d107      	bne.n	41c0 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
    41b0:	4b36      	ldr	r3, [pc, #216]	; (428c <wifi_cb+0x104>)
    41b2:	0019      	movs	r1, r3
    41b4:	2001      	movs	r0, #1
    41b6:	4b36      	ldr	r3, [pc, #216]	; (4290 <wifi_cb+0x108>)
    41b8:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
    41ba:	4b36      	ldr	r3, [pc, #216]	; (4294 <wifi_cb+0x10c>)
    41bc:	4798      	blx	r3
            break;
    41be:	e05e      	b.n	427e <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    41c0:	68fb      	ldr	r3, [r7, #12]
    41c2:	781b      	ldrb	r3, [r3, #0]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d15a      	bne.n	427e <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    41c8:	4b33      	ldr	r3, [pc, #204]	; (4298 <wifi_cb+0x110>)
    41ca:	0019      	movs	r1, r3
    41cc:	2001      	movs	r0, #1
    41ce:	4b30      	ldr	r3, [pc, #192]	; (4290 <wifi_cb+0x108>)
    41d0:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
    41d2:	2002      	movs	r0, #2
    41d4:	4b31      	ldr	r3, [pc, #196]	; (429c <wifi_cb+0x114>)
    41d6:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
    41d8:	2008      	movs	r0, #8
    41da:	4b31      	ldr	r3, [pc, #196]	; (42a0 <wifi_cb+0x118>)
    41dc:	4798      	blx	r3
    41de:	1e03      	subs	r3, r0, #0
    41e0:	d006      	beq.n	41f0 <wifi_cb+0x68>
                    f_close(&file_object);
    41e2:	4b30      	ldr	r3, [pc, #192]	; (42a4 <wifi_cb+0x11c>)
    41e4:	0018      	movs	r0, r3
    41e6:	4b30      	ldr	r3, [pc, #192]	; (42a8 <wifi_cb+0x120>)
    41e8:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    41ea:	2008      	movs	r0, #8
    41ec:	4b2b      	ldr	r3, [pc, #172]	; (429c <wifi_cb+0x114>)
    41ee:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
    41f0:	2004      	movs	r0, #4
    41f2:	4b2b      	ldr	r3, [pc, #172]	; (42a0 <wifi_cb+0x118>)
    41f4:	4798      	blx	r3
    41f6:	1e03      	subs	r3, r0, #0
    41f8:	d002      	beq.n	4200 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
    41fa:	2004      	movs	r0, #4
    41fc:	4b27      	ldr	r3, [pc, #156]	; (429c <wifi_cb+0x114>)
    41fe:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
    4200:	4b2a      	ldr	r3, [pc, #168]	; (42ac <wifi_cb+0x124>)
    4202:	2101      	movs	r1, #1
    4204:	0018      	movs	r0, r3
    4206:	4b2a      	ldr	r3, [pc, #168]	; (42b0 <wifi_cb+0x128>)
    4208:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    420a:	4a2a      	ldr	r2, [pc, #168]	; (42b4 <wifi_cb+0x12c>)
    420c:	482a      	ldr	r0, [pc, #168]	; (42b8 <wifi_cb+0x130>)
    420e:	23ff      	movs	r3, #255	; 0xff
    4210:	9300      	str	r3, [sp, #0]
    4212:	0013      	movs	r3, r2
    4214:	2202      	movs	r2, #2
    4216:	2103      	movs	r1, #3
    4218:	4c28      	ldr	r4, [pc, #160]	; (42bc <wifi_cb+0x134>)
    421a:	47a0      	blx	r4
            break;
    421c:	e02f      	b.n	427e <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    421e:	683b      	ldr	r3, [r7, #0]
    4220:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    4222:	68bb      	ldr	r3, [r7, #8]
    4224:	781b      	ldrb	r3, [r3, #0]
    4226:	0018      	movs	r0, r3
    4228:	68bb      	ldr	r3, [r7, #8]
    422a:	3301      	adds	r3, #1
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	001c      	movs	r4, r3
    4230:	68bb      	ldr	r3, [r7, #8]
    4232:	3302      	adds	r3, #2
    4234:	781b      	ldrb	r3, [r3, #0]
    4236:	001a      	movs	r2, r3
    4238:	68bb      	ldr	r3, [r7, #8]
    423a:	3303      	adds	r3, #3
    423c:	781b      	ldrb	r3, [r3, #0]
    423e:	4920      	ldr	r1, [pc, #128]	; (42c0 <wifi_cb+0x138>)
    4240:	9301      	str	r3, [sp, #4]
    4242:	9200      	str	r2, [sp, #0]
    4244:	0023      	movs	r3, r4
    4246:	0002      	movs	r2, r0
    4248:	2001      	movs	r0, #1
    424a:	4c11      	ldr	r4, [pc, #68]	; (4290 <wifi_cb+0x108>)
    424c:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
    424e:	2002      	movs	r0, #2
    4250:	4b1c      	ldr	r3, [pc, #112]	; (42c4 <wifi_cb+0x13c>)
    4252:	4798      	blx	r3
            if (do_download_flag == 1) {
    4254:	4b1c      	ldr	r3, [pc, #112]	; (42c8 <wifi_cb+0x140>)
    4256:	781b      	ldrb	r3, [r3, #0]
    4258:	2b01      	cmp	r3, #1
    425a:	d102      	bne.n	4262 <wifi_cb+0xda>
                start_download();
    425c:	4b1b      	ldr	r3, [pc, #108]	; (42cc <wifi_cb+0x144>)
    425e:	4798      	blx	r3
        } break;
    4260:	e00f      	b.n	4282 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    4262:	4a1b      	ldr	r2, [pc, #108]	; (42d0 <wifi_cb+0x148>)
    4264:	4b11      	ldr	r3, [pc, #68]	; (42ac <wifi_cb+0x124>)
    4266:	0011      	movs	r1, r2
    4268:	0018      	movs	r0, r3
    426a:	4b1a      	ldr	r3, [pc, #104]	; (42d4 <wifi_cb+0x14c>)
    426c:	4798      	blx	r3
    426e:	1e03      	subs	r3, r0, #0
    4270:	d007      	beq.n	4282 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    4272:	4b19      	ldr	r3, [pc, #100]	; (42d8 <wifi_cb+0x150>)
    4274:	0019      	movs	r1, r3
    4276:	2001      	movs	r0, #1
    4278:	4b05      	ldr	r3, [pc, #20]	; (4290 <wifi_cb+0x108>)
    427a:	4798      	blx	r3
        } break;
    427c:	e001      	b.n	4282 <wifi_cb+0xfa>
            break;
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	e000      	b.n	4284 <wifi_cb+0xfc>
        } break;
    4282:	46c0      	nop			; (mov r8, r8)
    }
}
    4284:	46c0      	nop			; (mov r8, r8)
    4286:	46bd      	mov	sp, r7
    4288:	b005      	add	sp, #20
    428a:	bd90      	pop	{r4, r7, pc}
    428c:	0002550c 	.word	0x0002550c
    4290:	0000b961 	.word	0x0000b961
    4294:	0000ffa5 	.word	0x0000ffa5
    4298:	0002552c 	.word	0x0002552c
    429c:	00003999 	.word	0x00003999
    42a0:	000039f5 	.word	0x000039f5
    42a4:	20000afc 	.word	0x20000afc
    42a8:	0001be71 	.word	0x0001be71
    42ac:	20000b28 	.word	0x20000b28
    42b0:	0001d481 	.word	0x0001d481
    42b4:	00025550 	.word	0x00025550
    42b8:	0002555c 	.word	0x0002555c
    42bc:	0000fad1 	.word	0x0000fad1
    42c0:	00025560 	.word	0x00025560
    42c4:	000039cd 	.word	0x000039cd
    42c8:	200008c8 	.word	0x200008c8
    42cc:	00003d1d 	.word	0x00003d1d
    42d0:	00025184 	.word	0x00025184
    42d4:	0001d34d 	.word	0x0001d34d
    42d8:	00025588 	.word	0x00025588

000042dc <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
    42dc:	b590      	push	{r4, r7, lr}
    42de:	b083      	sub	sp, #12
    42e0:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
    42e2:	4b29      	ldr	r3, [pc, #164]	; (4388 <init_storage+0xac>)
    42e4:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
    42e6:	4b29      	ldr	r3, [pc, #164]	; (438c <init_storage+0xb0>)
    42e8:	0019      	movs	r1, r3
    42ea:	2001      	movs	r0, #1
    42ec:	4b28      	ldr	r3, [pc, #160]	; (4390 <init_storage+0xb4>)
    42ee:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
    42f0:	1dfc      	adds	r4, r7, #7
    42f2:	2000      	movs	r0, #0
    42f4:	4b27      	ldr	r3, [pc, #156]	; (4394 <init_storage+0xb8>)
    42f6:	4798      	blx	r3
    42f8:	0003      	movs	r3, r0
    42fa:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
    42fc:	1dfb      	adds	r3, r7, #7
    42fe:	781b      	ldrb	r3, [r3, #0]
    4300:	2b01      	cmp	r3, #1
    4302:	d110      	bne.n	4326 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
    4304:	4b24      	ldr	r3, [pc, #144]	; (4398 <init_storage+0xbc>)
    4306:	0019      	movs	r1, r3
    4308:	2001      	movs	r0, #1
    430a:	4b21      	ldr	r3, [pc, #132]	; (4390 <init_storage+0xb4>)
    430c:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
    430e:	4b23      	ldr	r3, [pc, #140]	; (439c <init_storage+0xc0>)
    4310:	0019      	movs	r1, r3
    4312:	2001      	movs	r0, #1
    4314:	4b1e      	ldr	r3, [pc, #120]	; (4390 <init_storage+0xb4>)
    4316:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    4318:	46c0      	nop			; (mov r8, r8)
    431a:	2000      	movs	r0, #0
    431c:	4b20      	ldr	r3, [pc, #128]	; (43a0 <init_storage+0xc4>)
    431e:	4798      	blx	r3
    4320:	0003      	movs	r3, r0
    4322:	2b02      	cmp	r3, #2
    4324:	d1f9      	bne.n	431a <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
    4326:	1dfb      	adds	r3, r7, #7
    4328:	781b      	ldrb	r3, [r3, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d1e0      	bne.n	42f0 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
    432e:	4b1d      	ldr	r3, [pc, #116]	; (43a4 <init_storage+0xc8>)
    4330:	0019      	movs	r1, r3
    4332:	2001      	movs	r0, #1
    4334:	4b16      	ldr	r3, [pc, #88]	; (4390 <init_storage+0xb4>)
    4336:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
    4338:	238c      	movs	r3, #140	; 0x8c
    433a:	009a      	lsls	r2, r3, #2
    433c:	4b1a      	ldr	r3, [pc, #104]	; (43a8 <init_storage+0xcc>)
    433e:	2100      	movs	r1, #0
    4340:	0018      	movs	r0, r3
    4342:	4b1a      	ldr	r3, [pc, #104]	; (43ac <init_storage+0xd0>)
    4344:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    4346:	1dbc      	adds	r4, r7, #6
    4348:	4b17      	ldr	r3, [pc, #92]	; (43a8 <init_storage+0xcc>)
    434a:	0019      	movs	r1, r3
    434c:	2000      	movs	r0, #0
    434e:	4b18      	ldr	r3, [pc, #96]	; (43b0 <init_storage+0xd4>)
    4350:	4798      	blx	r3
    4352:	0003      	movs	r3, r0
    4354:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
    4356:	1dbb      	adds	r3, r7, #6
    4358:	781b      	ldrb	r3, [r3, #0]
    435a:	2b0b      	cmp	r3, #11
    435c:	d107      	bne.n	436e <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
    435e:	1dbb      	adds	r3, r7, #6
    4360:	781a      	ldrb	r2, [r3, #0]
    4362:	4b14      	ldr	r3, [pc, #80]	; (43b4 <init_storage+0xd8>)
    4364:	0019      	movs	r1, r3
    4366:	2001      	movs	r0, #1
    4368:	4b09      	ldr	r3, [pc, #36]	; (4390 <init_storage+0xb4>)
    436a:	4798      	blx	r3
            return;
    436c:	e008      	b.n	4380 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
    436e:	4b12      	ldr	r3, [pc, #72]	; (43b8 <init_storage+0xdc>)
    4370:	0019      	movs	r1, r3
    4372:	2001      	movs	r0, #1
    4374:	4b06      	ldr	r3, [pc, #24]	; (4390 <init_storage+0xb4>)
    4376:	4798      	blx	r3
        add_state(STORAGE_READY);
    4378:	2001      	movs	r0, #1
    437a:	4b10      	ldr	r3, [pc, #64]	; (43bc <init_storage+0xe0>)
    437c:	4798      	blx	r3
        return;
    437e:	46c0      	nop			; (mov r8, r8)
    }
}
    4380:	46bd      	mov	sp, r7
    4382:	b003      	add	sp, #12
    4384:	bd90      	pop	{r4, r7, pc}
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	0000c779 	.word	0x0000c779
    438c:	000255ac 	.word	0x000255ac
    4390:	0000b961 	.word	0x0000b961
    4394:	0000cc55 	.word	0x0000cc55
    4398:	000255e4 	.word	0x000255e4
    439c:	0002560c 	.word	0x0002560c
    43a0:	0000c7c9 	.word	0x0000c7c9
    43a4:	00025640 	.word	0x00025640
    43a8:	200008cc 	.word	0x200008cc
    43ac:	00022dbb 	.word	0x00022dbb
    43b0:	0001b419 	.word	0x0001b419
    43b4:	00025664 	.word	0x00025664
    43b8:	00025694 	.word	0x00025694
    43bc:	000039cd 	.word	0x000039cd

000043c0 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    43c0:	b580      	push	{r7, lr}
    43c2:	b082      	sub	sp, #8
    43c4:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
    43c6:	1d3b      	adds	r3, r7, #4
    43c8:	0018      	movs	r0, r3
    43ca:	4b08      	ldr	r3, [pc, #32]	; (43ec <configure_timer+0x2c>)
    43cc:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
    43ce:	1d3a      	adds	r2, r7, #4
    43d0:	4b07      	ldr	r3, [pc, #28]	; (43f0 <configure_timer+0x30>)
    43d2:	0011      	movs	r1, r2
    43d4:	0018      	movs	r0, r3
    43d6:	4b07      	ldr	r3, [pc, #28]	; (43f4 <configure_timer+0x34>)
    43d8:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
    43da:	4b05      	ldr	r3, [pc, #20]	; (43f0 <configure_timer+0x30>)
    43dc:	0018      	movs	r0, r3
    43de:	4b06      	ldr	r3, [pc, #24]	; (43f8 <configure_timer+0x38>)
    43e0:	4798      	blx	r3
}
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	46bd      	mov	sp, r7
    43e6:	b002      	add	sp, #8
    43e8:	bd80      	pop	{r7, pc}
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	0001ff69 	.word	0x0001ff69
    43f0:	20004990 	.word	0x20004990
    43f4:	0001ff8d 	.word	0x0001ff8d
    43f8:	00020079 	.word	0x00020079

000043fc <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
    43fc:	b580      	push	{r7, lr}
    43fe:	b088      	sub	sp, #32
    4400:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
    4402:	003b      	movs	r3, r7
    4404:	0018      	movs	r0, r3
    4406:	4b15      	ldr	r3, [pc, #84]	; (445c <configure_http_client+0x60>)
    4408:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    440a:	003b      	movs	r3, r7
    440c:	2280      	movs	r2, #128	; 0x80
    440e:	0092      	lsls	r2, r2, #2
    4410:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
    4412:	003b      	movs	r3, r7
    4414:	4a12      	ldr	r2, [pc, #72]	; (4460 <configure_http_client+0x64>)
    4416:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 80;
    4418:	003b      	movs	r3, r7
    441a:	2250      	movs	r2, #80	; 0x50
    441c:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 0;
    441e:	003b      	movs	r3, r7
    4420:	2200      	movs	r2, #0
    4422:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
    4424:	003a      	movs	r2, r7
    4426:	4b0f      	ldr	r3, [pc, #60]	; (4464 <configure_http_client+0x68>)
    4428:	0011      	movs	r1, r2
    442a:	0018      	movs	r0, r3
    442c:	4b0e      	ldr	r3, [pc, #56]	; (4468 <configure_http_client+0x6c>)
    442e:	4798      	blx	r3
    4430:	0003      	movs	r3, r0
    4432:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
    4434:	69fb      	ldr	r3, [r7, #28]
    4436:	2b00      	cmp	r3, #0
    4438:	da06      	bge.n	4448 <configure_http_client+0x4c>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    443a:	69fa      	ldr	r2, [r7, #28]
    443c:	4b0b      	ldr	r3, [pc, #44]	; (446c <configure_http_client+0x70>)
    443e:	0019      	movs	r1, r3
    4440:	2001      	movs	r0, #1
    4442:	4b0b      	ldr	r3, [pc, #44]	; (4470 <configure_http_client+0x74>)
    4444:	4798      	blx	r3
        while (1) {
    4446:	e7fe      	b.n	4446 <configure_http_client+0x4a>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
    4448:	4a0a      	ldr	r2, [pc, #40]	; (4474 <configure_http_client+0x78>)
    444a:	4b06      	ldr	r3, [pc, #24]	; (4464 <configure_http_client+0x68>)
    444c:	0011      	movs	r1, r2
    444e:	0018      	movs	r0, r3
    4450:	4b09      	ldr	r3, [pc, #36]	; (4478 <configure_http_client+0x7c>)
    4452:	4798      	blx	r3
}
    4454:	46c0      	nop			; (mov r8, r8)
    4456:	46bd      	mov	sp, r7
    4458:	b008      	add	sp, #32
    445a:	bd80      	pop	{r7, pc}
    445c:	0001e5fd 	.word	0x0001e5fd
    4460:	20004990 	.word	0x20004990
    4464:	200049e8 	.word	0x200049e8
    4468:	0001e649 	.word	0x0001e649
    446c:	000256b8 	.word	0x000256b8
    4470:	0000b961 	.word	0x0000b961
    4474:	00003fad 	.word	0x00003fad
    4478:	0001e735 	.word	0x0001e735

0000447c <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    447c:	b580      	push	{r7, lr}
    447e:	b082      	sub	sp, #8
    4480:	af00      	add	r7, sp, #0
    4482:	603a      	str	r2, [r7, #0]
    4484:	1dfb      	adds	r3, r7, #7
    4486:	1c02      	adds	r2, r0, #0
    4488:	701a      	strb	r2, [r3, #0]
    448a:	1dbb      	adds	r3, r7, #6
    448c:	1c0a      	adds	r2, r1, #0
    448e:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
    4490:	683a      	ldr	r2, [r7, #0]
    4492:	1dbb      	adds	r3, r7, #6
    4494:	7819      	ldrb	r1, [r3, #0]
    4496:	1dfb      	adds	r3, r7, #7
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	b25b      	sxtb	r3, r3
    449c:	0018      	movs	r0, r3
    449e:	4b03      	ldr	r3, [pc, #12]	; (44ac <socket_event_handler+0x30>)
    44a0:	4798      	blx	r3
}
    44a2:	46c0      	nop			; (mov r8, r8)
    44a4:	46bd      	mov	sp, r7
    44a6:	b002      	add	sp, #8
    44a8:	bd80      	pop	{r7, pc}
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	0001d2f5 	.word	0x0001d2f5

000044b0 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b082      	sub	sp, #8
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
    44b8:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
    44ba:	683a      	ldr	r2, [r7, #0]
    44bc:	687b      	ldr	r3, [r7, #4]
    44be:	0011      	movs	r1, r2
    44c0:	0018      	movs	r0, r3
    44c2:	4b03      	ldr	r3, [pc, #12]	; (44d0 <socket_resolve_handler+0x20>)
    44c4:	4798      	blx	r3
}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	46bd      	mov	sp, r7
    44ca:	b002      	add	sp, #8
    44cc:	bd80      	pop	{r7, pc}
    44ce:	46c0      	nop			; (mov r8, r8)
    44d0:	0001d329 	.word	0x0001d329

000044d4 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
    44d4:	b590      	push	{r4, r7, lr}
    44d6:	b083      	sub	sp, #12
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	685b      	ldr	r3, [r3, #4]
    44e0:	685a      	ldr	r2, [r3, #4]
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	685b      	ldr	r3, [r3, #4]
    44e6:	689b      	ldr	r3, [r3, #8]
    44e8:	4910      	ldr	r1, [pc, #64]	; (452c <SubscribeHandlerLedTopic+0x58>)
    44ea:	2001      	movs	r0, #1
    44ec:	4c10      	ldr	r4, [pc, #64]	; (4530 <SubscribeHandlerLedTopic+0x5c>)
    44ee:	47a0      	blx	r4
    // Handle LedData message
    if (strncmp((char *)msgData->topicName->lenstring.data, RESET_TOPIC, msgData->message->payloadlen) == 0) {
    44f0:	687b      	ldr	r3, [r7, #4]
    44f2:	685b      	ldr	r3, [r3, #4]
    44f4:	6898      	ldr	r0, [r3, #8]
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	68da      	ldr	r2, [r3, #12]
    44fc:	4b0d      	ldr	r3, [pc, #52]	; (4534 <SubscribeHandlerLedTopic+0x60>)
    44fe:	0019      	movs	r1, r3
    4500:	4b0d      	ldr	r3, [pc, #52]	; (4538 <SubscribeHandlerLedTopic+0x64>)
    4502:	4798      	blx	r3
    4504:	1e03      	subs	r3, r0, #0
    4506:	d10d      	bne.n	4524 <SubscribeHandlerLedTopic+0x50>
	    if (strncmp((char *)msgData->message->payload, LOAD_TOPIC_RESET, msgData->message->payloadlen) == 0) {
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	681b      	ldr	r3, [r3, #0]
    450c:	6898      	ldr	r0, [r3, #8]
    450e:	687b      	ldr	r3, [r7, #4]
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	68da      	ldr	r2, [r3, #12]
    4514:	4b09      	ldr	r3, [pc, #36]	; (453c <SubscribeHandlerLedTopic+0x68>)
    4516:	0019      	movs	r1, r3
    4518:	4b07      	ldr	r3, [pc, #28]	; (4538 <SubscribeHandlerLedTopic+0x64>)
    451a:	4798      	blx	r3
    451c:	1e03      	subs	r3, r0, #0
    451e:	d101      	bne.n	4524 <SubscribeHandlerLedTopic+0x50>
		    reset_total();
    4520:	4b07      	ldr	r3, [pc, #28]	; (4540 <SubscribeHandlerLedTopic+0x6c>)
    4522:	4798      	blx	r3
	    }
    }
}
    4524:	46c0      	nop			; (mov r8, r8)
    4526:	46bd      	mov	sp, r7
    4528:	b003      	add	sp, #12
    452a:	bd90      	pop	{r4, r7, pc}
    452c:	00025700 	.word	0x00025700
    4530:	0000b961 	.word	0x0000b961
    4534:	00025708 	.word	0x00025708
    4538:	00023165 	.word	0x00023165
    453c:	00025728 	.word	0x00025728
    4540:	00003869 	.word	0x00003869

00004544 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
    4544:	b590      	push	{r4, r7, lr}
    4546:	b083      	sub	sp, #12
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	685b      	ldr	r3, [r3, #4]
    4550:	685a      	ldr	r2, [r3, #4]
    4552:	687b      	ldr	r3, [r7, #4]
    4554:	685b      	ldr	r3, [r3, #4]
    4556:	689b      	ldr	r3, [r3, #8]
    4558:	4910      	ldr	r1, [pc, #64]	; (459c <SubscribeHandlerGameTopic+0x58>)
    455a:	2001      	movs	r0, #1
    455c:	4c10      	ldr	r4, [pc, #64]	; (45a0 <SubscribeHandlerGameTopic+0x5c>)
    455e:	47a0      	blx	r4
	// Handle LedData message
	if (strncmp((char *)msgData->topicName->lenstring.data, CALI_TOPIC, msgData->message->payloadlen) == 0) {
    4560:	687b      	ldr	r3, [r7, #4]
    4562:	685b      	ldr	r3, [r3, #4]
    4564:	6898      	ldr	r0, [r3, #8]
    4566:	687b      	ldr	r3, [r7, #4]
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	68da      	ldr	r2, [r3, #12]
    456c:	4b0d      	ldr	r3, [pc, #52]	; (45a4 <SubscribeHandlerGameTopic+0x60>)
    456e:	0019      	movs	r1, r3
    4570:	4b0d      	ldr	r3, [pc, #52]	; (45a8 <SubscribeHandlerGameTopic+0x64>)
    4572:	4798      	blx	r3
    4574:	1e03      	subs	r3, r0, #0
    4576:	d10d      	bne.n	4594 <SubscribeHandlerGameTopic+0x50>
		if (strncmp((char *)msgData->message->payload, LOAD_TOPIC_CALI, msgData->message->payloadlen) == 0) {
    4578:	687b      	ldr	r3, [r7, #4]
    457a:	681b      	ldr	r3, [r3, #0]
    457c:	6898      	ldr	r0, [r3, #8]
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	681b      	ldr	r3, [r3, #0]
    4582:	68da      	ldr	r2, [r3, #12]
    4584:	4b09      	ldr	r3, [pc, #36]	; (45ac <SubscribeHandlerGameTopic+0x68>)
    4586:	0019      	movs	r1, r3
    4588:	4b07      	ldr	r3, [pc, #28]	; (45a8 <SubscribeHandlerGameTopic+0x64>)
    458a:	4798      	blx	r3
    458c:	1e03      	subs	r3, r0, #0
    458e:	d101      	bne.n	4594 <SubscribeHandlerGameTopic+0x50>
			cali_load();
    4590:	4b07      	ldr	r3, [pc, #28]	; (45b0 <SubscribeHandlerGameTopic+0x6c>)
    4592:	4798      	blx	r3
		}
	}
}
    4594:	46c0      	nop			; (mov r8, r8)
    4596:	46bd      	mov	sp, r7
    4598:	b003      	add	sp, #12
    459a:	bd90      	pop	{r4, r7, pc}
    459c:	00025700 	.word	0x00025700
    45a0:	0000b961 	.word	0x0000b961
    45a4:	00025730 	.word	0x00025730
    45a8:	00023165 	.word	0x00023165
    45ac:	0002574c 	.word	0x0002574c
    45b0:	0000387d 	.word	0x0000387d

000045b4 <SubscribeHandler>:
	LogMessage(LOG_DEBUG_LVL, "\r\nDistance topic received!\r\n");
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandler(MessageData *msgData)
{
    45b4:	b590      	push	{r4, r7, lr}
    45b6:	b083      	sub	sp, #12
    45b8:	af00      	add	r7, sp, #0
    45ba:	6078      	str	r0, [r7, #4]
    /* You received publish message which you had subscribed. */
    /* Print Topic and message */
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	685b      	ldr	r3, [r3, #4]
    45c0:	685a      	ldr	r2, [r3, #4]
    45c2:	687b      	ldr	r3, [r7, #4]
    45c4:	685b      	ldr	r3, [r3, #4]
    45c6:	689b      	ldr	r3, [r3, #8]
    45c8:	4921      	ldr	r1, [pc, #132]	; (4650 <SubscribeHandler+0x9c>)
    45ca:	2001      	movs	r0, #1
    45cc:	4c21      	ldr	r4, [pc, #132]	; (4654 <SubscribeHandler+0xa0>)
    45ce:	47a0      	blx	r4
    LogMessage(LOG_DEBUG_LVL, " >> ");
    45d0:	4b21      	ldr	r3, [pc, #132]	; (4658 <SubscribeHandler+0xa4>)
    45d2:	0019      	movs	r1, r3
    45d4:	2001      	movs	r0, #1
    45d6:	4b1f      	ldr	r3, [pc, #124]	; (4654 <SubscribeHandler+0xa0>)
    45d8:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    45da:	687b      	ldr	r3, [r7, #4]
    45dc:	681b      	ldr	r3, [r3, #0]
    45de:	68da      	ldr	r2, [r3, #12]
    45e0:	687b      	ldr	r3, [r7, #4]
    45e2:	681b      	ldr	r3, [r3, #0]
    45e4:	689b      	ldr	r3, [r3, #8]
    45e6:	491d      	ldr	r1, [pc, #116]	; (465c <SubscribeHandler+0xa8>)
    45e8:	2001      	movs	r0, #1
    45ea:	4c1a      	ldr	r4, [pc, #104]	; (4654 <SubscribeHandler+0xa0>)
    45ec:	47a0      	blx	r4

    // Handle LedData message
    if (strncmp((char *)msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0) {
    45ee:	687b      	ldr	r3, [r7, #4]
    45f0:	685b      	ldr	r3, [r3, #4]
    45f2:	6898      	ldr	r0, [r3, #8]
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	681b      	ldr	r3, [r3, #0]
    45f8:	68da      	ldr	r2, [r3, #12]
    45fa:	4b19      	ldr	r3, [pc, #100]	; (4660 <SubscribeHandler+0xac>)
    45fc:	0019      	movs	r1, r3
    45fe:	4b19      	ldr	r3, [pc, #100]	; (4664 <SubscribeHandler+0xb0>)
    4600:	4798      	blx	r3
    4602:	1e03      	subs	r3, r0, #0
    4604:	d120      	bne.n	4648 <SubscribeHandler+0x94>
        if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
    4606:	687b      	ldr	r3, [r7, #4]
    4608:	681b      	ldr	r3, [r3, #0]
    460a:	6898      	ldr	r0, [r3, #8]
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	681b      	ldr	r3, [r3, #0]
    4610:	68da      	ldr	r2, [r3, #12]
    4612:	4b15      	ldr	r3, [pc, #84]	; (4668 <SubscribeHandler+0xb4>)
    4614:	0019      	movs	r1, r3
    4616:	4b13      	ldr	r3, [pc, #76]	; (4664 <SubscribeHandler+0xb0>)
    4618:	4798      	blx	r3
    461a:	1e03      	subs	r3, r0, #0
    461c:	d104      	bne.n	4628 <SubscribeHandler+0x74>
            port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    461e:	2101      	movs	r1, #1
    4620:	2017      	movs	r0, #23
    4622:	4b12      	ldr	r3, [pc, #72]	; (466c <SubscribeHandler+0xb8>)
    4624:	4798      	blx	r3
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
        }
    }
}
    4626:	e00f      	b.n	4648 <SubscribeHandler+0x94>
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	681b      	ldr	r3, [r3, #0]
    462c:	6898      	ldr	r0, [r3, #8]
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	681b      	ldr	r3, [r3, #0]
    4632:	68da      	ldr	r2, [r3, #12]
    4634:	4b0e      	ldr	r3, [pc, #56]	; (4670 <SubscribeHandler+0xbc>)
    4636:	0019      	movs	r1, r3
    4638:	4b0a      	ldr	r3, [pc, #40]	; (4664 <SubscribeHandler+0xb0>)
    463a:	4798      	blx	r3
    463c:	1e03      	subs	r3, r0, #0
    463e:	d103      	bne.n	4648 <SubscribeHandler+0x94>
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
    4640:	2100      	movs	r1, #0
    4642:	2017      	movs	r0, #23
    4644:	4b09      	ldr	r3, [pc, #36]	; (466c <SubscribeHandler+0xb8>)
    4646:	4798      	blx	r3
}
    4648:	46c0      	nop			; (mov r8, r8)
    464a:	46bd      	mov	sp, r7
    464c:	b003      	add	sp, #12
    464e:	bd90      	pop	{r4, r7, pc}
    4650:	00025700 	.word	0x00025700
    4654:	0000b961 	.word	0x0000b961
    4658:	0002578c 	.word	0x0002578c
    465c:	00025794 	.word	0x00025794
    4660:	0002579c 	.word	0x0002579c
    4664:	00023165 	.word	0x00023165
    4668:	000257b8 	.word	0x000257b8
    466c:	00003931 	.word	0x00003931
    4670:	000257c0 	.word	0x000257c0

00004674 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    4674:	b590      	push	{r4, r7, lr}
    4676:	b08b      	sub	sp, #44	; 0x2c
    4678:	af06      	add	r7, sp, #24
    467a:	60f8      	str	r0, [r7, #12]
    467c:	60b9      	str	r1, [r7, #8]
    467e:	607a      	str	r2, [r7, #4]
    switch (type) {
    4680:	68bb      	ldr	r3, [r7, #8]
    4682:	2b01      	cmp	r3, #1
    4684:	d03b      	beq.n	46fe <mqtt_callback+0x8a>
    4686:	2b05      	cmp	r3, #5
    4688:	d05e      	beq.n	4748 <mqtt_callback+0xd4>
    468a:	2b00      	cmp	r3, #0
    468c:	d000      	beq.n	4690 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
    468e:	e061      	b.n	4754 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
    4690:	687b      	ldr	r3, [r7, #4]
    4692:	681b      	ldr	r3, [r3, #0]
    4694:	2b00      	cmp	r3, #0
    4696:	db25      	blt.n	46e4 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
    4698:	4b30      	ldr	r3, [pc, #192]	; (475c <mqtt_callback+0xe8>)
    469a:	0019      	movs	r1, r3
    469c:	2001      	movs	r0, #1
    469e:	4b30      	ldr	r3, [pc, #192]	; (4760 <mqtt_callback+0xec>)
    46a0:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
    46a2:	4930      	ldr	r1, [pc, #192]	; (4764 <mqtt_callback+0xf0>)
    46a4:	4a30      	ldr	r2, [pc, #192]	; (4768 <mqtt_callback+0xf4>)
    46a6:	68f8      	ldr	r0, [r7, #12]
    46a8:	2300      	movs	r3, #0
    46aa:	9305      	str	r3, [sp, #20]
    46ac:	2300      	movs	r3, #0
    46ae:	9304      	str	r3, [sp, #16]
    46b0:	2300      	movs	r3, #0
    46b2:	9303      	str	r3, [sp, #12]
    46b4:	2300      	movs	r3, #0
    46b6:	9302      	str	r3, [sp, #8]
    46b8:	2300      	movs	r3, #0
    46ba:	9301      	str	r3, [sp, #4]
    46bc:	4b2a      	ldr	r3, [pc, #168]	; (4768 <mqtt_callback+0xf4>)
    46be:	9300      	str	r3, [sp, #0]
    46c0:	000b      	movs	r3, r1
    46c2:	2101      	movs	r1, #1
    46c4:	4c29      	ldr	r4, [pc, #164]	; (476c <mqtt_callback+0xf8>)
    46c6:	47a0      	blx	r4
    46c8:	1e03      	subs	r3, r0, #0
    46ca:	d005      	beq.n	46d8 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
    46cc:	4b28      	ldr	r3, [pc, #160]	; (4770 <mqtt_callback+0xfc>)
    46ce:	0019      	movs	r1, r3
    46d0:	2001      	movs	r0, #1
    46d2:	4b23      	ldr	r3, [pc, #140]	; (4760 <mqtt_callback+0xec>)
    46d4:	4798      	blx	r3
        } break;
    46d6:	e03d      	b.n	4754 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
    46d8:	4b26      	ldr	r3, [pc, #152]	; (4774 <mqtt_callback+0x100>)
    46da:	0019      	movs	r1, r3
    46dc:	2001      	movs	r0, #1
    46de:	4b20      	ldr	r3, [pc, #128]	; (4760 <mqtt_callback+0xec>)
    46e0:	4798      	blx	r3
        } break;
    46e2:	e037      	b.n	4754 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    46e4:	4a24      	ldr	r2, [pc, #144]	; (4778 <mqtt_callback+0x104>)
    46e6:	4b25      	ldr	r3, [pc, #148]	; (477c <mqtt_callback+0x108>)
    46e8:	0019      	movs	r1, r3
    46ea:	2001      	movs	r0, #1
    46ec:	4b1c      	ldr	r3, [pc, #112]	; (4760 <mqtt_callback+0xec>)
    46ee:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    46f0:	4a21      	ldr	r2, [pc, #132]	; (4778 <mqtt_callback+0x104>)
    46f2:	68fb      	ldr	r3, [r7, #12]
    46f4:	0011      	movs	r1, r2
    46f6:	0018      	movs	r0, r3
    46f8:	4b21      	ldr	r3, [pc, #132]	; (4780 <mqtt_callback+0x10c>)
    46fa:	4798      	blx	r3
        } break;
    46fc:	e02a      	b.n	4754 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	2b00      	cmp	r3, #0
    4704:	d117      	bne.n	4736 <mqtt_callback+0xc2>
				mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
    4706:	4b1f      	ldr	r3, [pc, #124]	; (4784 <mqtt_callback+0x110>)
    4708:	491f      	ldr	r1, [pc, #124]	; (4788 <mqtt_callback+0x114>)
    470a:	68f8      	ldr	r0, [r7, #12]
    470c:	2202      	movs	r2, #2
    470e:	4c1f      	ldr	r4, [pc, #124]	; (478c <mqtt_callback+0x118>)
    4710:	47a0      	blx	r4
				mqtt_subscribe(module_inst, RESET_TOPIC, 2, SubscribeHandlerLedTopic);
    4712:	4b1f      	ldr	r3, [pc, #124]	; (4790 <mqtt_callback+0x11c>)
    4714:	491f      	ldr	r1, [pc, #124]	; (4794 <mqtt_callback+0x120>)
    4716:	68f8      	ldr	r0, [r7, #12]
    4718:	2202      	movs	r2, #2
    471a:	4c1c      	ldr	r4, [pc, #112]	; (478c <mqtt_callback+0x118>)
    471c:	47a0      	blx	r4
				mqtt_subscribe(module_inst, CALI_TOPIC, 2, SubscribeHandlerGameTopic);
    471e:	4b1e      	ldr	r3, [pc, #120]	; (4798 <mqtt_callback+0x124>)
    4720:	491e      	ldr	r1, [pc, #120]	; (479c <mqtt_callback+0x128>)
    4722:	68f8      	ldr	r0, [r7, #12]
    4724:	2202      	movs	r2, #2
    4726:	4c19      	ldr	r4, [pc, #100]	; (478c <mqtt_callback+0x118>)
    4728:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
    472a:	4b1d      	ldr	r3, [pc, #116]	; (47a0 <mqtt_callback+0x12c>)
    472c:	0019      	movs	r1, r3
    472e:	2001      	movs	r0, #1
    4730:	4b0b      	ldr	r3, [pc, #44]	; (4760 <mqtt_callback+0xec>)
    4732:	4798      	blx	r3
            break;
    4734:	e00e      	b.n	4754 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	001a      	movs	r2, r3
    473c:	4b19      	ldr	r3, [pc, #100]	; (47a4 <mqtt_callback+0x130>)
    473e:	0019      	movs	r1, r3
    4740:	2001      	movs	r0, #1
    4742:	4b07      	ldr	r3, [pc, #28]	; (4760 <mqtt_callback+0xec>)
    4744:	4798      	blx	r3
            break;
    4746:	e005      	b.n	4754 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
    4748:	4b17      	ldr	r3, [pc, #92]	; (47a8 <mqtt_callback+0x134>)
    474a:	0019      	movs	r1, r3
    474c:	2001      	movs	r0, #1
    474e:	4b04      	ldr	r3, [pc, #16]	; (4760 <mqtt_callback+0xec>)
    4750:	4798      	blx	r3
            break;
    4752:	46c0      	nop			; (mov r8, r8)
}
    4754:	46c0      	nop			; (mov r8, r8)
    4756:	46bd      	mov	sp, r7
    4758:	b005      	add	sp, #20
    475a:	bd90      	pop	{r4, r7, pc}
    475c:	000257c8 	.word	0x000257c8
    4760:	0000b961 	.word	0x0000b961
    4764:	000257e4 	.word	0x000257e4
    4768:	000257f0 	.word	0x000257f0
    476c:	0001d395 	.word	0x0001d395
    4770:	000257f8 	.word	0x000257f8
    4774:	00025820 	.word	0x00025820
    4778:	00025184 	.word	0x00025184
    477c:	0002583c 	.word	0x0002583c
    4780:	0001d34d 	.word	0x0001d34d
    4784:	000045b5 	.word	0x000045b5
    4788:	0002579c 	.word	0x0002579c
    478c:	0001d535 	.word	0x0001d535
    4790:	000044d5 	.word	0x000044d5
    4794:	00025708 	.word	0x00025708
    4798:	00004545 	.word	0x00004545
    479c:	00025730 	.word	0x00025730
    47a0:	00025874 	.word	0x00025874
    47a4:	00025888 	.word	0x00025888
    47a8:	000258bc 	.word	0x000258bc

000047ac <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    47ac:	b580      	push	{r7, lr}
    47ae:	b088      	sub	sp, #32
    47b0:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
    47b2:	1d3b      	adds	r3, r7, #4
    47b4:	0018      	movs	r0, r3
    47b6:	4b1f      	ldr	r3, [pc, #124]	; (4834 <configure_mqtt+0x88>)
    47b8:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
    47ba:	1d3b      	adds	r3, r7, #4
    47bc:	4a1e      	ldr	r2, [pc, #120]	; (4838 <configure_mqtt+0x8c>)
    47be:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    47c0:	1d3b      	adds	r3, r7, #4
    47c2:	2280      	movs	r2, #128	; 0x80
    47c4:	0052      	lsls	r2, r2, #1
    47c6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
    47c8:	1d3b      	adds	r3, r7, #4
    47ca:	4a1c      	ldr	r2, [pc, #112]	; (483c <configure_mqtt+0x90>)
    47cc:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    47ce:	1d3b      	adds	r3, r7, #4
    47d0:	2280      	movs	r2, #128	; 0x80
    47d2:	0052      	lsls	r2, r2, #1
    47d4:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
    47d6:	1d3b      	adds	r3, r7, #4
    47d8:	4a19      	ldr	r2, [pc, #100]	; (4840 <configure_mqtt+0x94>)
    47da:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
    47dc:	1d3b      	adds	r3, r7, #4
    47de:	4a19      	ldr	r2, [pc, #100]	; (4844 <configure_mqtt+0x98>)
    47e0:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
    47e2:	1d3a      	adds	r2, r7, #4
    47e4:	4b18      	ldr	r3, [pc, #96]	; (4848 <configure_mqtt+0x9c>)
    47e6:	0011      	movs	r1, r2
    47e8:	0018      	movs	r0, r3
    47ea:	4b18      	ldr	r3, [pc, #96]	; (484c <configure_mqtt+0xa0>)
    47ec:	4798      	blx	r3
    47ee:	0003      	movs	r3, r0
    47f0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    47f2:	69fb      	ldr	r3, [r7, #28]
    47f4:	2b00      	cmp	r3, #0
    47f6:	da06      	bge.n	4806 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
    47f8:	69fa      	ldr	r2, [r7, #28]
    47fa:	4b15      	ldr	r3, [pc, #84]	; (4850 <configure_mqtt+0xa4>)
    47fc:	0019      	movs	r1, r3
    47fe:	2001      	movs	r0, #1
    4800:	4b14      	ldr	r3, [pc, #80]	; (4854 <configure_mqtt+0xa8>)
    4802:	4798      	blx	r3
        while (1) {
    4804:	e7fe      	b.n	4804 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    4806:	4a14      	ldr	r2, [pc, #80]	; (4858 <configure_mqtt+0xac>)
    4808:	4b0f      	ldr	r3, [pc, #60]	; (4848 <configure_mqtt+0x9c>)
    480a:	0011      	movs	r1, r2
    480c:	0018      	movs	r0, r3
    480e:	4b13      	ldr	r3, [pc, #76]	; (485c <configure_mqtt+0xb0>)
    4810:	4798      	blx	r3
    4812:	0003      	movs	r3, r0
    4814:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    4816:	69fb      	ldr	r3, [r7, #28]
    4818:	2b00      	cmp	r3, #0
    481a:	da06      	bge.n	482a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
    481c:	69fa      	ldr	r2, [r7, #28]
    481e:	4b10      	ldr	r3, [pc, #64]	; (4860 <configure_mqtt+0xb4>)
    4820:	0019      	movs	r1, r3
    4822:	2001      	movs	r0, #1
    4824:	4b0b      	ldr	r3, [pc, #44]	; (4854 <configure_mqtt+0xa8>)
    4826:	4798      	blx	r3
        while (1) {
    4828:	e7fe      	b.n	4828 <configure_mqtt+0x7c>
        }
    }
}
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	46bd      	mov	sp, r7
    482e:	b008      	add	sp, #32
    4830:	bd80      	pop	{r7, pc}
    4832:	46c0      	nop			; (mov r8, r8)
    4834:	0001d28d 	.word	0x0001d28d
    4838:	20000b60 	.word	0x20000b60
    483c:	20000c60 	.word	0x20000c60
    4840:	0000075b 	.word	0x0000075b
    4844:	00001770 	.word	0x00001770
    4848:	20000b28 	.word	0x20000b28
    484c:	0001d1dd 	.word	0x0001d1dd
    4850:	000258d0 	.word	0x000258d0
    4854:	0000b961 	.word	0x0000b961
    4858:	00004675 	.word	0x00004675
    485c:	0001d2cd 	.word	0x0001d2cd
    4860:	00025904 	.word	0x00025904

00004864 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
    4864:	b580      	push	{r7, lr}
    4866:	b084      	sub	sp, #16
    4868:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
    486a:	1d3b      	adds	r3, r7, #4
    486c:	0018      	movs	r0, r3
    486e:	4b0b      	ldr	r3, [pc, #44]	; (489c <configure_extint_channel+0x38>)
    4870:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    4872:	1d3b      	adds	r3, r7, #4
    4874:	2237      	movs	r2, #55	; 0x37
    4876:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    4878:	1d3b      	adds	r3, r7, #4
    487a:	2200      	movs	r2, #0
    487c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    487e:	1d3b      	adds	r3, r7, #4
    4880:	2201      	movs	r2, #1
    4882:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    4884:	1d3b      	adds	r3, r7, #4
    4886:	2202      	movs	r2, #2
    4888:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    488a:	1d3b      	adds	r3, r7, #4
    488c:	0019      	movs	r1, r3
    488e:	2007      	movs	r0, #7
    4890:	4b03      	ldr	r3, [pc, #12]	; (48a0 <configure_extint_channel+0x3c>)
    4892:	4798      	blx	r3
}
    4894:	46c0      	nop			; (mov r8, r8)
    4896:	46bd      	mov	sp, r7
    4898:	b004      	add	sp, #16
    489a:	bd80      	pop	{r7, pc}
    489c:	000143c5 	.word	0x000143c5
    48a0:	000143f9 	.word	0x000143f9

000048a4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
    48a4:	b580      	push	{r7, lr}
    48a6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    48a8:	4b06      	ldr	r3, [pc, #24]	; (48c4 <configure_extint_callbacks+0x20>)
    48aa:	2200      	movs	r2, #0
    48ac:	2107      	movs	r1, #7
    48ae:	0018      	movs	r0, r3
    48b0:	4b05      	ldr	r3, [pc, #20]	; (48c8 <configure_extint_callbacks+0x24>)
    48b2:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    48b4:	2100      	movs	r1, #0
    48b6:	2007      	movs	r0, #7
    48b8:	4b04      	ldr	r3, [pc, #16]	; (48cc <configure_extint_callbacks+0x28>)
    48ba:	4798      	blx	r3
}
    48bc:	46c0      	nop			; (mov r8, r8)
    48be:	46bd      	mov	sp, r7
    48c0:	bd80      	pop	{r7, pc}
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	000048d1 	.word	0x000048d1
    48c8:	00013fc5 	.word	0x00013fc5
    48cc:	00014029 	.word	0x00014029

000048d0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
    48d0:	b5b0      	push	{r4, r5, r7, lr}
    48d2:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
    48d4:	4b0c      	ldr	r3, [pc, #48]	; (4908 <extint_detection_callback+0x38>)
    48d6:	681b      	ldr	r3, [r3, #0]
    48d8:	1c5a      	adds	r2, r3, #1
    48da:	4b0b      	ldr	r3, [pc, #44]	; (4908 <extint_detection_callback+0x38>)
    48dc:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
    48de:	4b0a      	ldr	r3, [pc, #40]	; (4908 <extint_detection_callback+0x38>)
    48e0:	681b      	ldr	r3, [r3, #0]
    48e2:	2b28      	cmp	r3, #40	; 0x28
    48e4:	d902      	bls.n	48ec <extint_detection_callback+0x1c>
    48e6:	4b08      	ldr	r3, [pc, #32]	; (4908 <extint_detection_callback+0x38>)
    48e8:	2201      	movs	r2, #1
    48ea:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
    48ec:	4b06      	ldr	r3, [pc, #24]	; (4908 <extint_detection_callback+0x38>)
    48ee:	681b      	ldr	r3, [r3, #0]
    48f0:	4a06      	ldr	r2, [pc, #24]	; (490c <extint_detection_callback+0x3c>)
    48f2:	4807      	ldr	r0, [pc, #28]	; (4910 <extint_detection_callback+0x40>)
    48f4:	213f      	movs	r1, #63	; 0x3f
    48f6:	4c07      	ldr	r4, [pc, #28]	; (4914 <extint_detection_callback+0x44>)
    48f8:	47a0      	blx	r4
    isPressed = true;
    48fa:	4b07      	ldr	r3, [pc, #28]	; (4918 <extint_detection_callback+0x48>)
    48fc:	2201      	movs	r2, #1
    48fe:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
    4900:	46c0      	nop			; (mov r8, r8)
    4902:	46bd      	mov	sp, r7
    4904:	bdb0      	pop	{r4, r5, r7, pc}
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	200000b0 	.word	0x200000b0
    490c:	00025938 	.word	0x00025938
    4910:	20000070 	.word	0x20000070
    4914:	00023015 	.word	0x00023015
    4918:	20000d60 	.word	0x20000d60

0000491c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
    491c:	b580      	push	{r7, lr}
    491e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
    4920:	4a15      	ldr	r2, [pc, #84]	; (4978 <HTTP_DownloadFileInit+0x5c>)
    4922:	4b16      	ldr	r3, [pc, #88]	; (497c <HTTP_DownloadFileInit+0x60>)
    4924:	0011      	movs	r1, r2
    4926:	0018      	movs	r0, r3
    4928:	4b15      	ldr	r3, [pc, #84]	; (4980 <HTTP_DownloadFileInit+0x64>)
    492a:	4798      	blx	r3
    492c:	1e03      	subs	r3, r0, #0
    492e:	d008      	beq.n	4942 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    4930:	4b14      	ldr	r3, [pc, #80]	; (4984 <HTTP_DownloadFileInit+0x68>)
    4932:	0019      	movs	r1, r3
    4934:	2001      	movs	r0, #1
    4936:	4b14      	ldr	r3, [pc, #80]	; (4988 <HTTP_DownloadFileInit+0x6c>)
    4938:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
    493a:	e002      	b.n	4942 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
    493c:	2000      	movs	r0, #0
    493e:	4b13      	ldr	r3, [pc, #76]	; (498c <HTTP_DownloadFileInit+0x70>)
    4940:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
    4942:	4b0e      	ldr	r3, [pc, #56]	; (497c <HTTP_DownloadFileInit+0x60>)
    4944:	2234      	movs	r2, #52	; 0x34
    4946:	5c9b      	ldrb	r3, [r3, r2]
    4948:	2b00      	cmp	r3, #0
    494a:	d1f7      	bne.n	493c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
    494c:	4b10      	ldr	r3, [pc, #64]	; (4990 <HTTP_DownloadFileInit+0x74>)
    494e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
    4950:	4b10      	ldr	r3, [pc, #64]	; (4994 <HTTP_DownloadFileInit+0x78>)
    4952:	2201      	movs	r2, #1
    4954:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
    4956:	4a10      	ldr	r2, [pc, #64]	; (4998 <HTTP_DownloadFileInit+0x7c>)
    4958:	4b10      	ldr	r3, [pc, #64]	; (499c <HTTP_DownloadFileInit+0x80>)
    495a:	0011      	movs	r1, r2
    495c:	0018      	movs	r0, r3
    495e:	4b10      	ldr	r3, [pc, #64]	; (49a0 <HTTP_DownloadFileInit+0x84>)
    4960:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
    4962:	4b10      	ldr	r3, [pc, #64]	; (49a4 <HTTP_DownloadFileInit+0x88>)
    4964:	4798      	blx	r3

    start_download();
    4966:	4b10      	ldr	r3, [pc, #64]	; (49a8 <HTTP_DownloadFileInit+0x8c>)
    4968:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
    496a:	4b10      	ldr	r3, [pc, #64]	; (49ac <HTTP_DownloadFileInit+0x90>)
    496c:	2203      	movs	r2, #3
    496e:	701a      	strb	r2, [r3, #0]
}
    4970:	46c0      	nop			; (mov r8, r8)
    4972:	46bd      	mov	sp, r7
    4974:	bd80      	pop	{r7, pc}
    4976:	46c0      	nop			; (mov r8, r8)
    4978:	00025184 	.word	0x00025184
    497c:	20000b28 	.word	0x20000b28
    4980:	0001d481 	.word	0x0001d481
    4984:	00025588 	.word	0x00025588
    4988:	0000b961 	.word	0x0000b961
    498c:	0000fab5 	.word	0x0000fab5
    4990:	00013071 	.word	0x00013071
    4994:	200008c8 	.word	0x200008c8
    4998:	00004129 	.word	0x00004129
    499c:	000040f5 	.word	0x000040f5
    49a0:	000130b9 	.word	0x000130b9
    49a4:	00013021 	.word	0x00013021
    49a8:	00003d1d 	.word	0x00003d1d
    49ac:	200008b7 	.word	0x200008b7

000049b0 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
    49b0:	b590      	push	{r4, r7, lr}
    49b2:	b085      	sub	sp, #20
    49b4:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    49b6:	e009      	b.n	49cc <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    49b8:	2000      	movs	r0, #0
    49ba:	4b2a      	ldr	r3, [pc, #168]	; (4a64 <HTTP_DownloadFileTransaction+0xb4>)
    49bc:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    49be:	4b2a      	ldr	r3, [pc, #168]	; (4a68 <HTTP_DownloadFileTransaction+0xb8>)
    49c0:	0018      	movs	r0, r3
    49c2:	4b2a      	ldr	r3, [pc, #168]	; (4a6c <HTTP_DownloadFileTransaction+0xbc>)
    49c4:	4798      	blx	r3
        vTaskDelay(5);
    49c6:	2005      	movs	r0, #5
    49c8:	4b29      	ldr	r3, [pc, #164]	; (4a70 <HTTP_DownloadFileTransaction+0xc0>)
    49ca:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    49cc:	2010      	movs	r0, #16
    49ce:	4b29      	ldr	r3, [pc, #164]	; (4a74 <HTTP_DownloadFileTransaction+0xc4>)
    49d0:	4798      	blx	r3
    49d2:	0003      	movs	r3, r0
    49d4:	001a      	movs	r2, r3
    49d6:	2301      	movs	r3, #1
    49d8:	4053      	eors	r3, r2
    49da:	b2db      	uxtb	r3, r3
    49dc:	2b00      	cmp	r3, #0
    49de:	d009      	beq.n	49f4 <HTTP_DownloadFileTransaction+0x44>
    49e0:	2020      	movs	r0, #32
    49e2:	4b24      	ldr	r3, [pc, #144]	; (4a74 <HTTP_DownloadFileTransaction+0xc4>)
    49e4:	4798      	blx	r3
    49e6:	0003      	movs	r3, r0
    49e8:	001a      	movs	r2, r3
    49ea:	2301      	movs	r3, #1
    49ec:	4053      	eors	r3, r2
    49ee:	b2db      	uxtb	r3, r3
    49f0:	2b00      	cmp	r3, #0
    49f2:	d1e1      	bne.n	49b8 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
    49f4:	4b20      	ldr	r3, [pc, #128]	; (4a78 <HTTP_DownloadFileTransaction+0xc8>)
    49f6:	4798      	blx	r3
    vTaskDelay(1000);
    49f8:	23fa      	movs	r3, #250	; 0xfa
    49fa:	009b      	lsls	r3, r3, #2
    49fc:	0018      	movs	r0, r3
    49fe:	4b1c      	ldr	r3, [pc, #112]	; (4a70 <HTTP_DownloadFileTransaction+0xc0>)
    4a00:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
    4a02:	4b1e      	ldr	r3, [pc, #120]	; (4a7c <HTTP_DownloadFileTransaction+0xcc>)
    4a04:	2200      	movs	r2, #0
    4a06:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
    4a08:	003b      	movs	r3, r7
    4a0a:	4a1d      	ldr	r2, [pc, #116]	; (4a80 <HTTP_DownloadFileTransaction+0xd0>)
    4a0c:	ca13      	ldmia	r2!, {r0, r1, r4}
    4a0e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    4a10:	003b      	movs	r3, r7
    4a12:	2230      	movs	r2, #48	; 0x30
    4a14:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    4a16:	230f      	movs	r3, #15
    4a18:	18fc      	adds	r4, r7, r3
    4a1a:	0039      	movs	r1, r7
    4a1c:	4b19      	ldr	r3, [pc, #100]	; (4a84 <HTTP_DownloadFileTransaction+0xd4>)
    4a1e:	220a      	movs	r2, #10
    4a20:	0018      	movs	r0, r3
    4a22:	4b19      	ldr	r3, [pc, #100]	; (4a88 <HTTP_DownloadFileTransaction+0xd8>)
    4a24:	4798      	blx	r3
    4a26:	0003      	movs	r3, r0
    4a28:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
    4a2a:	230f      	movs	r3, #15
    4a2c:	18fb      	adds	r3, r7, r3
    4a2e:	781b      	ldrb	r3, [r3, #0]
    4a30:	2b00      	cmp	r3, #0
    4a32:	d008      	beq.n	4a46 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    4a34:	230f      	movs	r3, #15
    4a36:	18fb      	adds	r3, r7, r3
    4a38:	781a      	ldrb	r2, [r3, #0]
    4a3a:	4b14      	ldr	r3, [pc, #80]	; (4a8c <HTTP_DownloadFileTransaction+0xdc>)
    4a3c:	0019      	movs	r1, r3
    4a3e:	2000      	movs	r0, #0
    4a40:	4b13      	ldr	r3, [pc, #76]	; (4a90 <HTTP_DownloadFileTransaction+0xe0>)
    4a42:	4798      	blx	r3
    4a44:	e003      	b.n	4a4e <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
    4a46:	4b13      	ldr	r3, [pc, #76]	; (4a94 <HTTP_DownloadFileTransaction+0xe4>)
    4a48:	0018      	movs	r0, r3
    4a4a:	4b13      	ldr	r3, [pc, #76]	; (4a98 <HTTP_DownloadFileTransaction+0xe8>)
    4a4c:	4798      	blx	r3
    }
	
	f_close(&file_object);
    4a4e:	4b0d      	ldr	r3, [pc, #52]	; (4a84 <HTTP_DownloadFileTransaction+0xd4>)
    4a50:	0018      	movs	r0, r3
    4a52:	4b12      	ldr	r3, [pc, #72]	; (4a9c <HTTP_DownloadFileTransaction+0xec>)
    4a54:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
    4a56:	4b12      	ldr	r3, [pc, #72]	; (4aa0 <HTTP_DownloadFileTransaction+0xf0>)
    4a58:	2200      	movs	r2, #0
    4a5a:	701a      	strb	r2, [r3, #0]
}
    4a5c:	46c0      	nop			; (mov r8, r8)
    4a5e:	46bd      	mov	sp, r7
    4a60:	b005      	add	sp, #20
    4a62:	bd90      	pop	{r4, r7, pc}
    4a64:	0000fab5 	.word	0x0000fab5
    4a68:	20004990 	.word	0x20004990
    4a6c:	000201a9 	.word	0x000201a9
    4a70:	00009c21 	.word	0x00009c21
    4a74:	000039f5 	.word	0x000039f5
    4a78:	00013071 	.word	0x00013071
    4a7c:	200008c8 	.word	0x200008c8
    4a80:	00025970 	.word	0x00025970
    4a84:	20000afc 	.word	0x20000afc
    4a88:	0001b471 	.word	0x0001b471
    4a8c:	0002594c 	.word	0x0002594c
    4a90:	0000b961 	.word	0x0000b961
    4a94:	0002595c 	.word	0x0002595c
    4a98:	0000b875 	.word	0x0000b875
    4a9c:	0001be71 	.word	0x0001be71
    4aa0:	200008b7 	.word	0x200008b7

00004aa4 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
    4aa4:	b580      	push	{r7, lr}
    4aa6:	af00      	add	r7, sp, #0
    socketDeinit();
    4aa8:	4b18      	ldr	r3, [pc, #96]	; (4b0c <MQTT_InitRoutine+0x68>)
    4aaa:	4798      	blx	r3
    configure_mqtt();
    4aac:	4b18      	ldr	r3, [pc, #96]	; (4b10 <MQTT_InitRoutine+0x6c>)
    4aae:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    4ab0:	4a18      	ldr	r2, [pc, #96]	; (4b14 <MQTT_InitRoutine+0x70>)
    4ab2:	4b19      	ldr	r3, [pc, #100]	; (4b18 <MQTT_InitRoutine+0x74>)
    4ab4:	0011      	movs	r1, r2
    4ab6:	0018      	movs	r0, r3
    4ab8:	4b18      	ldr	r3, [pc, #96]	; (4b1c <MQTT_InitRoutine+0x78>)
    4aba:	4798      	blx	r3
    socketInit();
    4abc:	4b18      	ldr	r3, [pc, #96]	; (4b20 <MQTT_InitRoutine+0x7c>)
    4abe:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
    4ac0:	4b18      	ldr	r3, [pc, #96]	; (4b24 <MQTT_InitRoutine+0x80>)
    4ac2:	2234      	movs	r2, #52	; 0x34
    4ac4:	5c9b      	ldrb	r3, [r3, r2]
    4ac6:	2201      	movs	r2, #1
    4ac8:	4053      	eors	r3, r2
    4aca:	b2db      	uxtb	r3, r3
    4acc:	2b00      	cmp	r3, #0
    4ace:	d00c      	beq.n	4aea <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    4ad0:	4a15      	ldr	r2, [pc, #84]	; (4b28 <MQTT_InitRoutine+0x84>)
    4ad2:	4b14      	ldr	r3, [pc, #80]	; (4b24 <MQTT_InitRoutine+0x80>)
    4ad4:	0011      	movs	r1, r2
    4ad6:	0018      	movs	r0, r3
    4ad8:	4b14      	ldr	r3, [pc, #80]	; (4b2c <MQTT_InitRoutine+0x88>)
    4ada:	4798      	blx	r3
    4adc:	1e03      	subs	r3, r0, #0
    4ade:	d004      	beq.n	4aea <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    4ae0:	4b13      	ldr	r3, [pc, #76]	; (4b30 <MQTT_InitRoutine+0x8c>)
    4ae2:	0019      	movs	r1, r3
    4ae4:	2001      	movs	r0, #1
    4ae6:	4b13      	ldr	r3, [pc, #76]	; (4b34 <MQTT_InitRoutine+0x90>)
    4ae8:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
    4aea:	4b0e      	ldr	r3, [pc, #56]	; (4b24 <MQTT_InitRoutine+0x80>)
    4aec:	2234      	movs	r2, #52	; 0x34
    4aee:	5c9b      	ldrb	r3, [r3, r2]
    4af0:	2b00      	cmp	r3, #0
    4af2:	d004      	beq.n	4afe <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
    4af4:	4b10      	ldr	r3, [pc, #64]	; (4b38 <MQTT_InitRoutine+0x94>)
    4af6:	0019      	movs	r1, r3
    4af8:	2001      	movs	r0, #1
    4afa:	4b0e      	ldr	r3, [pc, #56]	; (4b34 <MQTT_InitRoutine+0x90>)
    4afc:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
    4afe:	4b0f      	ldr	r3, [pc, #60]	; (4b3c <MQTT_InitRoutine+0x98>)
    4b00:	2201      	movs	r2, #1
    4b02:	701a      	strb	r2, [r3, #0]
}
    4b04:	46c0      	nop			; (mov r8, r8)
    4b06:	46bd      	mov	sp, r7
    4b08:	bd80      	pop	{r7, pc}
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	00013071 	.word	0x00013071
    4b10:	000047ad 	.word	0x000047ad
    4b14:	000044b1 	.word	0x000044b1
    4b18:	0000447d 	.word	0x0000447d
    4b1c:	000130b9 	.word	0x000130b9
    4b20:	00013021 	.word	0x00013021
    4b24:	20000b28 	.word	0x20000b28
    4b28:	00025184 	.word	0x00025184
    4b2c:	0001d34d 	.word	0x0001d34d
    4b30:	00025588 	.word	0x00025588
    4b34:	0000b961 	.word	0x0000b961
    4b38:	0002597c 	.word	0x0002597c
    4b3c:	200008b7 	.word	0x200008b7

00004b40 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
    4b40:	b580      	push	{r7, lr}
    4b42:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
    4b44:	2000      	movs	r0, #0
    4b46:	4b0b      	ldr	r3, [pc, #44]	; (4b74 <MQTT_HandleTransactions+0x34>)
    4b48:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
    4b4a:	4b0b      	ldr	r3, [pc, #44]	; (4b78 <MQTT_HandleTransactions+0x38>)
    4b4c:	0018      	movs	r0, r3
    4b4e:	4b0b      	ldr	r3, [pc, #44]	; (4b7c <MQTT_HandleTransactions+0x3c>)
    4b50:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleImuMessages();
    4b52:	4b0b      	ldr	r3, [pc, #44]	; (4b80 <MQTT_HandleTransactions+0x40>)
    4b54:	4798      	blx	r3
	MQTT_HandleWeightMessages();
    4b56:	4b0b      	ldr	r3, [pc, #44]	; (4b84 <MQTT_HandleTransactions+0x44>)
    4b58:	4798      	blx	r3
	//SerialConsoleWriteString("mqtt run\r\n");

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
    4b5a:	4b0b      	ldr	r3, [pc, #44]	; (4b88 <MQTT_HandleTransactions+0x48>)
    4b5c:	2234      	movs	r2, #52	; 0x34
    4b5e:	5c9b      	ldrb	r3, [r3, r2]
    4b60:	2b00      	cmp	r3, #0
    4b62:	d004      	beq.n	4b6e <MQTT_HandleTransactions+0x2e>
    4b64:	4b08      	ldr	r3, [pc, #32]	; (4b88 <MQTT_HandleTransactions+0x48>)
    4b66:	2164      	movs	r1, #100	; 0x64
    4b68:	0018      	movs	r0, r3
    4b6a:	4b08      	ldr	r3, [pc, #32]	; (4b8c <MQTT_HandleTransactions+0x4c>)
    4b6c:	4798      	blx	r3
}
    4b6e:	46c0      	nop			; (mov r8, r8)
    4b70:	46bd      	mov	sp, r7
    4b72:	bd80      	pop	{r7, pc}
    4b74:	0000fab5 	.word	0x0000fab5
    4b78:	20004990 	.word	0x20004990
    4b7c:	000201a9 	.word	0x000201a9
    4b80:	00004b91 	.word	0x00004b91
    4b84:	00004c25 	.word	0x00004c25
    4b88:	20000b28 	.word	0x20000b28
    4b8c:	0001d57d 	.word	0x0001d57d

00004b90 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
    4b90:	b5b0      	push	{r4, r5, r7, lr}
    4b92:	b086      	sub	sp, #24
    4b94:	af04      	add	r7, sp, #16
	struct ImuDataPacket imuDataVar;
	if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
    4b96:	4b1a      	ldr	r3, [pc, #104]	; (4c00 <MQTT_HandleImuMessages+0x70>)
    4b98:	681b      	ldr	r3, [r3, #0]
    4b9a:	0039      	movs	r1, r7
    4b9c:	2200      	movs	r2, #0
    4b9e:	0018      	movs	r0, r3
    4ba0:	4b18      	ldr	r3, [pc, #96]	; (4c04 <MQTT_HandleImuMessages+0x74>)
    4ba2:	4798      	blx	r3
    4ba4:	0003      	movs	r3, r0
    4ba6:	2b01      	cmp	r3, #1
    4ba8:	d125      	bne.n	4bf6 <MQTT_HandleImuMessages+0x66>
		snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d, \"is_steady\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg, imuDataVar.is_dev);
    4baa:	003b      	movs	r3, r7
    4bac:	2200      	movs	r2, #0
    4bae:	5e9b      	ldrsh	r3, [r3, r2]
    4bb0:	001d      	movs	r5, r3
    4bb2:	003b      	movs	r3, r7
    4bb4:	2202      	movs	r2, #2
    4bb6:	5e9b      	ldrsh	r3, [r3, r2]
    4bb8:	0019      	movs	r1, r3
    4bba:	003b      	movs	r3, r7
    4bbc:	2204      	movs	r2, #4
    4bbe:	5e9b      	ldrsh	r3, [r3, r2]
    4bc0:	001c      	movs	r4, r3
    4bc2:	003b      	movs	r3, r7
    4bc4:	88db      	ldrh	r3, [r3, #6]
    4bc6:	4a10      	ldr	r2, [pc, #64]	; (4c08 <MQTT_HandleImuMessages+0x78>)
    4bc8:	4810      	ldr	r0, [pc, #64]	; (4c0c <MQTT_HandleImuMessages+0x7c>)
    4bca:	9302      	str	r3, [sp, #8]
    4bcc:	9401      	str	r4, [sp, #4]
    4bce:	9100      	str	r1, [sp, #0]
    4bd0:	002b      	movs	r3, r5
    4bd2:	213f      	movs	r1, #63	; 0x3f
    4bd4:	4c0e      	ldr	r4, [pc, #56]	; (4c10 <MQTT_HandleImuMessages+0x80>)
    4bd6:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
    4bd8:	4b0c      	ldr	r3, [pc, #48]	; (4c0c <MQTT_HandleImuMessages+0x7c>)
    4bda:	0018      	movs	r0, r3
    4bdc:	4b0d      	ldr	r3, [pc, #52]	; (4c14 <MQTT_HandleImuMessages+0x84>)
    4bde:	4798      	blx	r3
    4be0:	0004      	movs	r4, r0
    4be2:	4a0a      	ldr	r2, [pc, #40]	; (4c0c <MQTT_HandleImuMessages+0x7c>)
    4be4:	490c      	ldr	r1, [pc, #48]	; (4c18 <MQTT_HandleImuMessages+0x88>)
    4be6:	480d      	ldr	r0, [pc, #52]	; (4c1c <MQTT_HandleImuMessages+0x8c>)
    4be8:	2300      	movs	r3, #0
    4bea:	9301      	str	r3, [sp, #4]
    4bec:	2301      	movs	r3, #1
    4bee:	9300      	str	r3, [sp, #0]
    4bf0:	0023      	movs	r3, r4
    4bf2:	4c0b      	ldr	r4, [pc, #44]	; (4c20 <MQTT_HandleImuMessages+0x90>)
    4bf4:	47a0      	blx	r4
		//SerialConsoleWriteString("can get\r\n");
	} //else {SerialConsoleWriteString("cannot get\r\n");}
}
    4bf6:	46c0      	nop			; (mov r8, r8)
    4bf8:	46bd      	mov	sp, r7
    4bfa:	b002      	add	sp, #8
    4bfc:	bdb0      	pop	{r4, r5, r7, pc}
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	200008c0 	.word	0x200008c0
    4c04:	00008a75 	.word	0x00008a75
    4c08:	00025998 	.word	0x00025998
    4c0c:	20000030 	.word	0x20000030
    4c10:	00023015 	.word	0x00023015
    4c14:	00023157 	.word	0x00023157
    4c18:	000259d0 	.word	0x000259d0
    4c1c:	20000b28 	.word	0x20000b28
    4c20:	0001d4c9 	.word	0x0001d4c9

00004c24 <MQTT_HandleWeightMessages>:

static void MQTT_HandleWeightMessages(void)
{
    4c24:	b590      	push	{r4, r7, lr}
    4c26:	b087      	sub	sp, #28
    4c28:	af02      	add	r7, sp, #8
	struct WaterLoadPacket LoadDataVar;
	if (pdPASS == xQueueReceive(xQueueDistanceBuffer, &LoadDataVar, 0)) {
    4c2a:	4b16      	ldr	r3, [pc, #88]	; (4c84 <MQTT_HandleWeightMessages+0x60>)
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	1d39      	adds	r1, r7, #4
    4c30:	2200      	movs	r2, #0
    4c32:	0018      	movs	r0, r3
    4c34:	4b14      	ldr	r3, [pc, #80]	; (4c88 <MQTT_HandleWeightMessages+0x64>)
    4c36:	4798      	blx	r3
    4c38:	0003      	movs	r3, r0
    4c3a:	2b01      	cmp	r3, #1
    4c3c:	d11e      	bne.n	4c7c <MQTT_HandleWeightMessages+0x58>
		snprintf(mqtt_msg, 63, "{\"weight\":%d,\"diff\":%d,\"total\":%d}", LoadDataVar.weight, LoadDataVar.diff, LoadDataVar.total);
    4c3e:	1d3b      	adds	r3, r7, #4
    4c40:	881b      	ldrh	r3, [r3, #0]
    4c42:	001c      	movs	r4, r3
    4c44:	1d3b      	adds	r3, r7, #4
    4c46:	685b      	ldr	r3, [r3, #4]
    4c48:	1d3a      	adds	r2, r7, #4
    4c4a:	8912      	ldrh	r2, [r2, #8]
    4c4c:	0011      	movs	r1, r2
    4c4e:	4a0f      	ldr	r2, [pc, #60]	; (4c8c <MQTT_HandleWeightMessages+0x68>)
    4c50:	480f      	ldr	r0, [pc, #60]	; (4c90 <MQTT_HandleWeightMessages+0x6c>)
    4c52:	9101      	str	r1, [sp, #4]
    4c54:	9300      	str	r3, [sp, #0]
    4c56:	0023      	movs	r3, r4
    4c58:	213f      	movs	r1, #63	; 0x3f
    4c5a:	4c0e      	ldr	r4, [pc, #56]	; (4c94 <MQTT_HandleWeightMessages+0x70>)
    4c5c:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, WEIGHT_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
    4c5e:	4b0c      	ldr	r3, [pc, #48]	; (4c90 <MQTT_HandleWeightMessages+0x6c>)
    4c60:	0018      	movs	r0, r3
    4c62:	4b0d      	ldr	r3, [pc, #52]	; (4c98 <MQTT_HandleWeightMessages+0x74>)
    4c64:	4798      	blx	r3
    4c66:	0004      	movs	r4, r0
    4c68:	4a09      	ldr	r2, [pc, #36]	; (4c90 <MQTT_HandleWeightMessages+0x6c>)
    4c6a:	490c      	ldr	r1, [pc, #48]	; (4c9c <MQTT_HandleWeightMessages+0x78>)
    4c6c:	480c      	ldr	r0, [pc, #48]	; (4ca0 <MQTT_HandleWeightMessages+0x7c>)
    4c6e:	2300      	movs	r3, #0
    4c70:	9301      	str	r3, [sp, #4]
    4c72:	2301      	movs	r3, #1
    4c74:	9300      	str	r3, [sp, #0]
    4c76:	0023      	movs	r3, r4
    4c78:	4c0a      	ldr	r4, [pc, #40]	; (4ca4 <MQTT_HandleWeightMessages+0x80>)
    4c7a:	47a0      	blx	r4
		//SerialConsoleWriteString("get received!!!!!\r\n");
	} //else {SerialConsoleWriteString("cannot get\r\n");}
}
    4c7c:	46c0      	nop			; (mov r8, r8)
    4c7e:	46bd      	mov	sp, r7
    4c80:	b005      	add	sp, #20
    4c82:	bd90      	pop	{r4, r7, pc}
    4c84:	200008c4 	.word	0x200008c4
    4c88:	00008a75 	.word	0x00008a75
    4c8c:	000259ec 	.word	0x000259ec
    4c90:	20000030 	.word	0x20000030
    4c94:	00023015 	.word	0x00023015
    4c98:	00023157 	.word	0x00023157
    4c9c:	00025a10 	.word	0x00025a10
    4ca0:	20000b28 	.word	0x20000b28
    4ca4:	0001d4c9 	.word	0x0001d4c9

00004ca8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
    4ca8:	b590      	push	{r4, r7, lr}
    4caa:	b08d      	sub	sp, #52	; 0x34
    4cac:	af02      	add	r7, sp, #8
    4cae:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
    4cb0:	2064      	movs	r0, #100	; 0x64
    4cb2:	4b7a      	ldr	r3, [pc, #488]	; (4e9c <vWifiTask+0x1f4>)
    4cb4:	4798      	blx	r3
    init_state();
    4cb6:	4b7a      	ldr	r3, [pc, #488]	; (4ea0 <vWifiTask+0x1f8>)
    4cb8:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
    4cba:	2200      	movs	r2, #0
    4cbc:	2104      	movs	r1, #4
    4cbe:	2005      	movs	r0, #5
    4cc0:	4b78      	ldr	r3, [pc, #480]	; (4ea4 <vWifiTask+0x1fc>)
    4cc2:	4798      	blx	r3
    4cc4:	0002      	movs	r2, r0
    4cc6:	4b78      	ldr	r3, [pc, #480]	; (4ea8 <vWifiTask+0x200>)
    4cc8:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
    4cca:	2200      	movs	r2, #0
    4ccc:	2108      	movs	r1, #8
    4cce:	2005      	movs	r0, #5
    4cd0:	4b74      	ldr	r3, [pc, #464]	; (4ea4 <vWifiTask+0x1fc>)
    4cd2:	4798      	blx	r3
    4cd4:	0002      	movs	r2, r0
    4cd6:	4b75      	ldr	r3, [pc, #468]	; (4eac <vWifiTask+0x204>)
    4cd8:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
    4cda:	2200      	movs	r2, #0
    4cdc:	2114      	movs	r1, #20
    4cde:	2002      	movs	r0, #2
    4ce0:	4b70      	ldr	r3, [pc, #448]	; (4ea4 <vWifiTask+0x1fc>)
    4ce2:	4798      	blx	r3
    4ce4:	0002      	movs	r2, r0
    4ce6:	4b72      	ldr	r3, [pc, #456]	; (4eb0 <vWifiTask+0x208>)
    4ce8:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(struct WaterLoadPacket));
    4cea:	2200      	movs	r2, #0
    4cec:	210c      	movs	r1, #12
    4cee:	2005      	movs	r0, #5
    4cf0:	4b6c      	ldr	r3, [pc, #432]	; (4ea4 <vWifiTask+0x1fc>)
    4cf2:	4798      	blx	r3
    4cf4:	0002      	movs	r2, r0
    4cf6:	4b6f      	ldr	r3, [pc, #444]	; (4eb4 <vWifiTask+0x20c>)
    4cf8:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
    4cfa:	4b6b      	ldr	r3, [pc, #428]	; (4ea8 <vWifiTask+0x200>)
    4cfc:	681b      	ldr	r3, [r3, #0]
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d00b      	beq.n	4d1a <vWifiTask+0x72>
    4d02:	4b6a      	ldr	r3, [pc, #424]	; (4eac <vWifiTask+0x204>)
    4d04:	681b      	ldr	r3, [r3, #0]
    4d06:	2b00      	cmp	r3, #0
    4d08:	d007      	beq.n	4d1a <vWifiTask+0x72>
    4d0a:	4b69      	ldr	r3, [pc, #420]	; (4eb0 <vWifiTask+0x208>)
    4d0c:	681b      	ldr	r3, [r3, #0]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d003      	beq.n	4d1a <vWifiTask+0x72>
    4d12:	4b68      	ldr	r3, [pc, #416]	; (4eb4 <vWifiTask+0x20c>)
    4d14:	681b      	ldr	r3, [r3, #0]
    4d16:	2b00      	cmp	r3, #0
    4d18:	d103      	bne.n	4d22 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    4d1a:	4b67      	ldr	r3, [pc, #412]	; (4eb8 <vWifiTask+0x210>)
    4d1c:	0018      	movs	r0, r3
    4d1e:	4b67      	ldr	r3, [pc, #412]	; (4ebc <vWifiTask+0x214>)
    4d20:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
    4d22:	4b67      	ldr	r3, [pc, #412]	; (4ec0 <vWifiTask+0x218>)
    4d24:	0018      	movs	r0, r3
    4d26:	4b65      	ldr	r3, [pc, #404]	; (4ebc <vWifiTask+0x214>)
    4d28:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
    4d2a:	4b66      	ldr	r3, [pc, #408]	; (4ec4 <vWifiTask+0x21c>)
    4d2c:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
    4d2e:	4b66      	ldr	r3, [pc, #408]	; (4ec8 <vWifiTask+0x220>)
    4d30:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
    4d32:	4b66      	ldr	r3, [pc, #408]	; (4ecc <vWifiTask+0x224>)
    4d34:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
    4d36:	4b66      	ldr	r3, [pc, #408]	; (4ed0 <vWifiTask+0x228>)
    4d38:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
    4d3a:	4b66      	ldr	r3, [pc, #408]	; (4ed4 <vWifiTask+0x22c>)
    4d3c:	4798      	blx	r3
    configure_extint_callbacks();
    4d3e:	4b66      	ldr	r3, [pc, #408]	; (4ed8 <vWifiTask+0x230>)
    4d40:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    4d42:	230c      	movs	r3, #12
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	2218      	movs	r2, #24
    4d48:	2100      	movs	r1, #0
    4d4a:	0018      	movs	r0, r3
    4d4c:	4b63      	ldr	r3, [pc, #396]	; (4edc <vWifiTask+0x234>)
    4d4e:	4798      	blx	r3

    nm_bsp_init();
    4d50:	4b63      	ldr	r3, [pc, #396]	; (4ee0 <vWifiTask+0x238>)
    4d52:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
    4d54:	230c      	movs	r3, #12
    4d56:	18fb      	adds	r3, r7, r3
    4d58:	4a62      	ldr	r2, [pc, #392]	; (4ee4 <vWifiTask+0x23c>)
    4d5a:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
    4d5c:	2327      	movs	r3, #39	; 0x27
    4d5e:	18fc      	adds	r4, r7, r3
    4d60:	230c      	movs	r3, #12
    4d62:	18fb      	adds	r3, r7, r3
    4d64:	0018      	movs	r0, r3
    4d66:	4b60      	ldr	r3, [pc, #384]	; (4ee8 <vWifiTask+0x240>)
    4d68:	4798      	blx	r3
    4d6a:	0003      	movs	r3, r0
    4d6c:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
    4d6e:	2327      	movs	r3, #39	; 0x27
    4d70:	18fb      	adds	r3, r7, r3
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	b25b      	sxtb	r3, r3
    4d76:	2b00      	cmp	r3, #0
    4d78:	d009      	beq.n	4d8e <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
    4d7a:	2327      	movs	r3, #39	; 0x27
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	2200      	movs	r2, #0
    4d80:	569a      	ldrsb	r2, [r3, r2]
    4d82:	4b5a      	ldr	r3, [pc, #360]	; (4eec <vWifiTask+0x244>)
    4d84:	0019      	movs	r1, r3
    4d86:	2001      	movs	r0, #1
    4d88:	4b59      	ldr	r3, [pc, #356]	; (4ef0 <vWifiTask+0x248>)
    4d8a:	4798      	blx	r3
        while (1) {
    4d8c:	e7fe      	b.n	4d8c <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    4d8e:	4a59      	ldr	r2, [pc, #356]	; (4ef4 <vWifiTask+0x24c>)
    4d90:	4b59      	ldr	r3, [pc, #356]	; (4ef8 <vWifiTask+0x250>)
    4d92:	0019      	movs	r1, r3
    4d94:	2001      	movs	r0, #1
    4d96:	4b56      	ldr	r3, [pc, #344]	; (4ef0 <vWifiTask+0x248>)
    4d98:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
    4d9a:	4b58      	ldr	r3, [pc, #352]	; (4efc <vWifiTask+0x254>)
    4d9c:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    4d9e:	4a58      	ldr	r2, [pc, #352]	; (4f00 <vWifiTask+0x258>)
    4da0:	4b58      	ldr	r3, [pc, #352]	; (4f04 <vWifiTask+0x25c>)
    4da2:	0011      	movs	r1, r2
    4da4:	0018      	movs	r0, r3
    4da6:	4b58      	ldr	r3, [pc, #352]	; (4f08 <vWifiTask+0x260>)
    4da8:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    4daa:	4a58      	ldr	r2, [pc, #352]	; (4f0c <vWifiTask+0x264>)
    4dac:	4851      	ldr	r0, [pc, #324]	; (4ef4 <vWifiTask+0x24c>)
    4dae:	23ff      	movs	r3, #255	; 0xff
    4db0:	9300      	str	r3, [sp, #0]
    4db2:	0013      	movs	r3, r2
    4db4:	2202      	movs	r2, #2
    4db6:	2103      	movs	r1, #3
    4db8:	4c55      	ldr	r4, [pc, #340]	; (4f10 <vWifiTask+0x268>)
    4dba:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
    4dbc:	e006      	b.n	4dcc <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    4dbe:	2000      	movs	r0, #0
    4dc0:	4b54      	ldr	r3, [pc, #336]	; (4f14 <vWifiTask+0x26c>)
    4dc2:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    4dc4:	4b54      	ldr	r3, [pc, #336]	; (4f18 <vWifiTask+0x270>)
    4dc6:	0018      	movs	r0, r3
    4dc8:	4b54      	ldr	r3, [pc, #336]	; (4f1c <vWifiTask+0x274>)
    4dca:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
    4dcc:	2002      	movs	r0, #2
    4dce:	4b54      	ldr	r3, [pc, #336]	; (4f20 <vWifiTask+0x278>)
    4dd0:	4798      	blx	r3
    4dd2:	0003      	movs	r3, r0
    4dd4:	001a      	movs	r2, r3
    4dd6:	2301      	movs	r3, #1
    4dd8:	4053      	eors	r3, r2
    4dda:	b2db      	uxtb	r3, r3
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d1ee      	bne.n	4dbe <vWifiTask+0x116>
    }

    vTaskDelay(1000);
    4de0:	23fa      	movs	r3, #250	; 0xfa
    4de2:	009b      	lsls	r3, r3, #2
    4de4:	0018      	movs	r0, r3
    4de6:	4b2d      	ldr	r3, [pc, #180]	; (4e9c <vWifiTask+0x1f4>)
    4de8:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
    4dea:	4b4e      	ldr	r3, [pc, #312]	; (4f24 <vWifiTask+0x27c>)
    4dec:	2201      	movs	r2, #1
    4dee:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
    4df0:	4b4c      	ldr	r3, [pc, #304]	; (4f24 <vWifiTask+0x27c>)
    4df2:	781b      	ldrb	r3, [r3, #0]
    4df4:	b25b      	sxtb	r3, r3
    4df6:	2b01      	cmp	r3, #1
    4df8:	d00b      	beq.n	4e12 <vWifiTask+0x16a>
    4dfa:	dc02      	bgt.n	4e02 <vWifiTask+0x15a>
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	d005      	beq.n	4e0c <vWifiTask+0x164>
    4e00:	e010      	b.n	4e24 <vWifiTask+0x17c>
    4e02:	2b02      	cmp	r3, #2
    4e04:	d008      	beq.n	4e18 <vWifiTask+0x170>
    4e06:	2b03      	cmp	r3, #3
    4e08:	d009      	beq.n	4e1e <vWifiTask+0x176>
    4e0a:	e00b      	b.n	4e24 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
    4e0c:	4b46      	ldr	r3, [pc, #280]	; (4f28 <vWifiTask+0x280>)
    4e0e:	4798      	blx	r3

                break;
    4e10:	e00c      	b.n	4e2c <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
				//SerialConsoleWriteString("in MQTT fun\r\n");
                MQTT_HandleTransactions();
    4e12:	4b46      	ldr	r3, [pc, #280]	; (4f2c <vWifiTask+0x284>)
    4e14:	4798      	blx	r3
                break;
    4e16:	e009      	b.n	4e2c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
    4e18:	4b45      	ldr	r3, [pc, #276]	; (4f30 <vWifiTask+0x288>)
    4e1a:	4798      	blx	r3
                break;
    4e1c:	e006      	b.n	4e2c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
    4e1e:	4b45      	ldr	r3, [pc, #276]	; (4f34 <vWifiTask+0x28c>)
    4e20:	4798      	blx	r3
                break;
    4e22:	e003      	b.n	4e2c <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
    4e24:	4b3f      	ldr	r3, [pc, #252]	; (4f24 <vWifiTask+0x27c>)
    4e26:	2200      	movs	r2, #0
    4e28:	701a      	strb	r2, [r3, #0]
                break;
    4e2a:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
    4e2c:	230b      	movs	r3, #11
    4e2e:	18fb      	adds	r3, r7, r3
    4e30:	2200      	movs	r2, #0
    4e32:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
    4e34:	4b1c      	ldr	r3, [pc, #112]	; (4ea8 <vWifiTask+0x200>)
    4e36:	681b      	ldr	r3, [r3, #0]
    4e38:	220b      	movs	r2, #11
    4e3a:	18b9      	adds	r1, r7, r2
    4e3c:	2200      	movs	r2, #0
    4e3e:	0018      	movs	r0, r3
    4e40:	4b3d      	ldr	r3, [pc, #244]	; (4f38 <vWifiTask+0x290>)
    4e42:	4798      	blx	r3
    4e44:	0003      	movs	r3, r0
    4e46:	2b01      	cmp	r3, #1
    4e48:	d105      	bne.n	4e56 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
    4e4a:	230b      	movs	r3, #11
    4e4c:	18fb      	adds	r3, r7, r3
    4e4e:	781b      	ldrb	r3, [r3, #0]
    4e50:	b25a      	sxtb	r2, r3
    4e52:	4b34      	ldr	r3, [pc, #208]	; (4f24 <vWifiTask+0x27c>)
    4e54:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
    4e56:	4b39      	ldr	r3, [pc, #228]	; (4f3c <vWifiTask+0x294>)
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	b2db      	uxtb	r3, r3
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d017      	beq.n	4e90 <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
    4e60:	4b37      	ldr	r3, [pc, #220]	; (4f40 <vWifiTask+0x298>)
    4e62:	0018      	movs	r0, r3
    4e64:	4b37      	ldr	r3, [pc, #220]	; (4f44 <vWifiTask+0x29c>)
    4e66:	4798      	blx	r3
    4e68:	0004      	movs	r4, r0
    4e6a:	4a35      	ldr	r2, [pc, #212]	; (4f40 <vWifiTask+0x298>)
    4e6c:	4936      	ldr	r1, [pc, #216]	; (4f48 <vWifiTask+0x2a0>)
    4e6e:	4837      	ldr	r0, [pc, #220]	; (4f4c <vWifiTask+0x2a4>)
    4e70:	2300      	movs	r3, #0
    4e72:	9301      	str	r3, [sp, #4]
    4e74:	2301      	movs	r3, #1
    4e76:	9300      	str	r3, [sp, #0]
    4e78:	0023      	movs	r3, r4
    4e7a:	4c35      	ldr	r4, [pc, #212]	; (4f50 <vWifiTask+0x2a8>)
    4e7c:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
    4e7e:	4a30      	ldr	r2, [pc, #192]	; (4f40 <vWifiTask+0x298>)
    4e80:	4b34      	ldr	r3, [pc, #208]	; (4f54 <vWifiTask+0x2ac>)
    4e82:	0019      	movs	r1, r3
    4e84:	2001      	movs	r0, #1
    4e86:	4b1a      	ldr	r3, [pc, #104]	; (4ef0 <vWifiTask+0x248>)
    4e88:	4798      	blx	r3
            isPressed = false;
    4e8a:	4b2c      	ldr	r3, [pc, #176]	; (4f3c <vWifiTask+0x294>)
    4e8c:	2200      	movs	r2, #0
    4e8e:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(300);
    4e90:	2396      	movs	r3, #150	; 0x96
    4e92:	005b      	lsls	r3, r3, #1
    4e94:	0018      	movs	r0, r3
    4e96:	4b01      	ldr	r3, [pc, #4]	; (4e9c <vWifiTask+0x1f4>)
    4e98:	4798      	blx	r3
    while (1) {
    4e9a:	e7a9      	b.n	4df0 <vWifiTask+0x148>
    4e9c:	00009c21 	.word	0x00009c21
    4ea0:	00003985 	.word	0x00003985
    4ea4:	00007f15 	.word	0x00007f15
    4ea8:	200008b8 	.word	0x200008b8
    4eac:	200008c0 	.word	0x200008c0
    4eb0:	200008bc 	.word	0x200008bc
    4eb4:	200008c4 	.word	0x200008c4
    4eb8:	00025a2c 	.word	0x00025a2c
    4ebc:	0000b875 	.word	0x0000b875
    4ec0:	00025a54 	.word	0x00025a54
    4ec4:	000043c1 	.word	0x000043c1
    4ec8:	000043fd 	.word	0x000043fd
    4ecc:	000047ad 	.word	0x000047ad
    4ed0:	000042dd 	.word	0x000042dd
    4ed4:	00004865 	.word	0x00004865
    4ed8:	000048a5 	.word	0x000048a5
    4edc:	00022dbb 	.word	0x00022dbb
    4ee0:	0000dde9 	.word	0x0000dde9
    4ee4:	00004189 	.word	0x00004189
    4ee8:	0000f8c1 	.word	0x0000f8c1
    4eec:	00025a70 	.word	0x00025a70
    4ef0:	0000b961 	.word	0x0000b961
    4ef4:	0002555c 	.word	0x0002555c
    4ef8:	00025a9c 	.word	0x00025a9c
    4efc:	00013021 	.word	0x00013021
    4f00:	000044b1 	.word	0x000044b1
    4f04:	0000447d 	.word	0x0000447d
    4f08:	000130b9 	.word	0x000130b9
    4f0c:	00025550 	.word	0x00025550
    4f10:	0000fad1 	.word	0x0000fad1
    4f14:	0000fab5 	.word	0x0000fab5
    4f18:	20004990 	.word	0x20004990
    4f1c:	000201a9 	.word	0x000201a9
    4f20:	000039f5 	.word	0x000039f5
    4f24:	200008b7 	.word	0x200008b7
    4f28:	00004aa5 	.word	0x00004aa5
    4f2c:	00004b41 	.word	0x00004b41
    4f30:	0000491d 	.word	0x0000491d
    4f34:	000049b1 	.word	0x000049b1
    4f38:	00008a75 	.word	0x00008a75
    4f3c:	20000d60 	.word	0x20000d60
    4f40:	20000070 	.word	0x20000070
    4f44:	00023157 	.word	0x00023157
    4f48:	00025ac0 	.word	0x00025ac0
    4f4c:	20000b28 	.word	0x20000b28
    4f50:	0001d4c9 	.word	0x0001d4c9
    4f54:	00025adc 	.word	0x00025adc

00004f58 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
    4f58:	b590      	push	{r4, r7, lr}
    4f5a:	b083      	sub	sp, #12
    4f5c:	af00      	add	r7, sp, #0
    4f5e:	0002      	movs	r2, r0
    4f60:	1dfb      	adds	r3, r7, #7
    4f62:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
    4f64:	1dfb      	adds	r3, r7, #7
    4f66:	781b      	ldrb	r3, [r3, #0]
    4f68:	2b03      	cmp	r3, #3
    4f6a:	d806      	bhi.n	4f7a <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
    4f6c:	4b05      	ldr	r3, [pc, #20]	; (4f84 <WifiHandlerSetState+0x2c>)
    4f6e:	6818      	ldr	r0, [r3, #0]
    4f70:	1df9      	adds	r1, r7, #7
    4f72:	2300      	movs	r3, #0
    4f74:	220a      	movs	r2, #10
    4f76:	4c04      	ldr	r4, [pc, #16]	; (4f88 <WifiHandlerSetState+0x30>)
    4f78:	47a0      	blx	r4
    }
}
    4f7a:	46c0      	nop			; (mov r8, r8)
    4f7c:	46bd      	mov	sp, r7
    4f7e:	b003      	add	sp, #12
    4f80:	bd90      	pop	{r4, r7, pc}
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	200008b8 	.word	0x200008b8
    4f88:	000081bd 	.word	0x000081bd

00004f8c <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
    4f8c:	b590      	push	{r4, r7, lr}
    4f8e:	b085      	sub	sp, #20
    4f90:	af00      	add	r7, sp, #0
    4f92:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
    4f94:	4b06      	ldr	r3, [pc, #24]	; (4fb0 <WifiAddImuDataToQueue+0x24>)
    4f96:	6818      	ldr	r0, [r3, #0]
    4f98:	6879      	ldr	r1, [r7, #4]
    4f9a:	2300      	movs	r3, #0
    4f9c:	220a      	movs	r2, #10
    4f9e:	4c05      	ldr	r4, [pc, #20]	; (4fb4 <WifiAddImuDataToQueue+0x28>)
    4fa0:	47a0      	blx	r4
    4fa2:	0003      	movs	r3, r0
    4fa4:	60fb      	str	r3, [r7, #12]
    return error;
    4fa6:	68fb      	ldr	r3, [r7, #12]
}
    4fa8:	0018      	movs	r0, r3
    4faa:	46bd      	mov	sp, r7
    4fac:	b005      	add	sp, #20
    4fae:	bd90      	pop	{r4, r7, pc}
    4fb0:	200008c0 	.word	0x200008c0
    4fb4:	000081bd 	.word	0x000081bd

00004fb8 <WifiAddWeightDataToQueue>:

int WifiAddWeightDataToQueue(struct WaterLoadPacket *imuPacket)
{
    4fb8:	b590      	push	{r4, r7, lr}
    4fba:	b085      	sub	sp, #20
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueDistanceBuffer, imuPacket, (TickType_t)10);
    4fc0:	4b06      	ldr	r3, [pc, #24]	; (4fdc <WifiAddWeightDataToQueue+0x24>)
    4fc2:	6818      	ldr	r0, [r3, #0]
    4fc4:	6879      	ldr	r1, [r7, #4]
    4fc6:	2300      	movs	r3, #0
    4fc8:	220a      	movs	r2, #10
    4fca:	4c05      	ldr	r4, [pc, #20]	; (4fe0 <WifiAddWeightDataToQueue+0x28>)
    4fcc:	47a0      	blx	r4
    4fce:	0003      	movs	r3, r0
    4fd0:	60fb      	str	r3, [r7, #12]
	return error;
    4fd2:	68fb      	ldr	r3, [r7, #12]
}
    4fd4:	0018      	movs	r0, r3
    4fd6:	46bd      	mov	sp, r7
    4fd8:	b005      	add	sp, #20
    4fda:	bd90      	pop	{r4, r7, pc}
    4fdc:	200008c4 	.word	0x200008c4
    4fe0:	000081bd 	.word	0x000081bd

00004fe4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b082      	sub	sp, #8
    4fe8:	af00      	add	r7, sp, #0
    4fea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4fec:	687b      	ldr	r3, [r7, #4]
    4fee:	2200      	movs	r2, #0
    4ff0:	701a      	strb	r2, [r3, #0]
}
    4ff2:	46c0      	nop			; (mov r8, r8)
    4ff4:	46bd      	mov	sp, r7
    4ff6:	b002      	add	sp, #8
    4ff8:	bd80      	pop	{r7, pc}
	...

00004ffc <system_apb_clock_set_mask>:
{
    4ffc:	b580      	push	{r7, lr}
    4ffe:	b082      	sub	sp, #8
    5000:	af00      	add	r7, sp, #0
    5002:	0002      	movs	r2, r0
    5004:	6039      	str	r1, [r7, #0]
    5006:	1dfb      	adds	r3, r7, #7
    5008:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    500a:	1dfb      	adds	r3, r7, #7
    500c:	781b      	ldrb	r3, [r3, #0]
    500e:	2b01      	cmp	r3, #1
    5010:	d00a      	beq.n	5028 <system_apb_clock_set_mask+0x2c>
    5012:	2b02      	cmp	r3, #2
    5014:	d00f      	beq.n	5036 <system_apb_clock_set_mask+0x3a>
    5016:	2b00      	cmp	r3, #0
    5018:	d114      	bne.n	5044 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    501a:	4b0e      	ldr	r3, [pc, #56]	; (5054 <system_apb_clock_set_mask+0x58>)
    501c:	4a0d      	ldr	r2, [pc, #52]	; (5054 <system_apb_clock_set_mask+0x58>)
    501e:	6991      	ldr	r1, [r2, #24]
    5020:	683a      	ldr	r2, [r7, #0]
    5022:	430a      	orrs	r2, r1
    5024:	619a      	str	r2, [r3, #24]
			break;
    5026:	e00f      	b.n	5048 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5028:	4b0a      	ldr	r3, [pc, #40]	; (5054 <system_apb_clock_set_mask+0x58>)
    502a:	4a0a      	ldr	r2, [pc, #40]	; (5054 <system_apb_clock_set_mask+0x58>)
    502c:	69d1      	ldr	r1, [r2, #28]
    502e:	683a      	ldr	r2, [r7, #0]
    5030:	430a      	orrs	r2, r1
    5032:	61da      	str	r2, [r3, #28]
			break;
    5034:	e008      	b.n	5048 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5036:	4b07      	ldr	r3, [pc, #28]	; (5054 <system_apb_clock_set_mask+0x58>)
    5038:	4a06      	ldr	r2, [pc, #24]	; (5054 <system_apb_clock_set_mask+0x58>)
    503a:	6a11      	ldr	r1, [r2, #32]
    503c:	683a      	ldr	r2, [r7, #0]
    503e:	430a      	orrs	r2, r1
    5040:	621a      	str	r2, [r3, #32]
			break;
    5042:	e001      	b.n	5048 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5044:	2317      	movs	r3, #23
    5046:	e000      	b.n	504a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5048:	2300      	movs	r3, #0
}
    504a:	0018      	movs	r0, r3
    504c:	46bd      	mov	sp, r7
    504e:	b002      	add	sp, #8
    5050:	bd80      	pop	{r7, pc}
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	40000400 	.word	0x40000400

00005058 <system_pinmux_get_config_defaults>:
{
    5058:	b580      	push	{r7, lr}
    505a:	b082      	sub	sp, #8
    505c:	af00      	add	r7, sp, #0
    505e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	2280      	movs	r2, #128	; 0x80
    5064:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5066:	687b      	ldr	r3, [r7, #4]
    5068:	2200      	movs	r2, #0
    506a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    506c:	687b      	ldr	r3, [r7, #4]
    506e:	2201      	movs	r2, #1
    5070:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5072:	687b      	ldr	r3, [r7, #4]
    5074:	2200      	movs	r2, #0
    5076:	70da      	strb	r2, [r3, #3]
}
    5078:	46c0      	nop			; (mov r8, r8)
    507a:	46bd      	mov	sp, r7
    507c:	b002      	add	sp, #8
    507e:	bd80      	pop	{r7, pc}

00005080 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    5080:	b580      	push	{r7, lr}
    5082:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5084:	4b05      	ldr	r3, [pc, #20]	; (509c <system_is_debugger_present+0x1c>)
    5086:	789b      	ldrb	r3, [r3, #2]
    5088:	b2db      	uxtb	r3, r3
    508a:	001a      	movs	r2, r3
    508c:	2302      	movs	r3, #2
    508e:	4013      	ands	r3, r2
    5090:	1e5a      	subs	r2, r3, #1
    5092:	4193      	sbcs	r3, r2
    5094:	b2db      	uxtb	r3, r3
}
    5096:	0018      	movs	r0, r3
    5098:	46bd      	mov	sp, r7
    509a:	bd80      	pop	{r7, pc}
    509c:	41002000 	.word	0x41002000

000050a0 <system_interrupt_enter_critical_section>:
{
    50a0:	b580      	push	{r7, lr}
    50a2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    50a4:	4b02      	ldr	r3, [pc, #8]	; (50b0 <system_interrupt_enter_critical_section+0x10>)
    50a6:	4798      	blx	r3
}
    50a8:	46c0      	nop			; (mov r8, r8)
    50aa:	46bd      	mov	sp, r7
    50ac:	bd80      	pop	{r7, pc}
    50ae:	46c0      	nop			; (mov r8, r8)
    50b0:	00013d19 	.word	0x00013d19

000050b4 <system_interrupt_leave_critical_section>:
{
    50b4:	b580      	push	{r7, lr}
    50b6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    50b8:	4b02      	ldr	r3, [pc, #8]	; (50c4 <system_interrupt_leave_critical_section+0x10>)
    50ba:	4798      	blx	r3
}
    50bc:	46c0      	nop			; (mov r8, r8)
    50be:	46bd      	mov	sp, r7
    50c0:	bd80      	pop	{r7, pc}
    50c2:	46c0      	nop			; (mov r8, r8)
    50c4:	00013d6d 	.word	0x00013d6d

000050c8 <system_interrupt_disable>:
{
    50c8:	b580      	push	{r7, lr}
    50ca:	b082      	sub	sp, #8
    50cc:	af00      	add	r7, sp, #0
    50ce:	0002      	movs	r2, r0
    50d0:	1dfb      	adds	r3, r7, #7
    50d2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    50d4:	4a07      	ldr	r2, [pc, #28]	; (50f4 <system_interrupt_disable+0x2c>)
    50d6:	1dfb      	adds	r3, r7, #7
    50d8:	781b      	ldrb	r3, [r3, #0]
    50da:	0019      	movs	r1, r3
    50dc:	231f      	movs	r3, #31
    50de:	400b      	ands	r3, r1
    50e0:	2101      	movs	r1, #1
    50e2:	4099      	lsls	r1, r3
    50e4:	000b      	movs	r3, r1
    50e6:	0019      	movs	r1, r3
    50e8:	2380      	movs	r3, #128	; 0x80
    50ea:	50d1      	str	r1, [r2, r3]
}
    50ec:	46c0      	nop			; (mov r8, r8)
    50ee:	46bd      	mov	sp, r7
    50f0:	b002      	add	sp, #8
    50f2:	bd80      	pop	{r7, pc}
    50f4:	e000e100 	.word	0xe000e100

000050f8 <i2c_master_is_syncing>:
{
    50f8:	b580      	push	{r7, lr}
    50fa:	b084      	sub	sp, #16
    50fc:	af00      	add	r7, sp, #0
    50fe:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5100:	687b      	ldr	r3, [r7, #4]
    5102:	681b      	ldr	r3, [r3, #0]
    5104:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5106:	68fb      	ldr	r3, [r7, #12]
    5108:	69db      	ldr	r3, [r3, #28]
    510a:	2207      	movs	r2, #7
    510c:	4013      	ands	r3, r2
    510e:	1e5a      	subs	r2, r3, #1
    5110:	4193      	sbcs	r3, r2
    5112:	b2db      	uxtb	r3, r3
}
    5114:	0018      	movs	r0, r3
    5116:	46bd      	mov	sp, r7
    5118:	b004      	add	sp, #16
    511a:	bd80      	pop	{r7, pc}

0000511c <_i2c_master_wait_for_sync>:
{
    511c:	b580      	push	{r7, lr}
    511e:	b082      	sub	sp, #8
    5120:	af00      	add	r7, sp, #0
    5122:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    5124:	46c0      	nop			; (mov r8, r8)
    5126:	687b      	ldr	r3, [r7, #4]
    5128:	0018      	movs	r0, r3
    512a:	4b04      	ldr	r3, [pc, #16]	; (513c <_i2c_master_wait_for_sync+0x20>)
    512c:	4798      	blx	r3
    512e:	1e03      	subs	r3, r0, #0
    5130:	d1f9      	bne.n	5126 <_i2c_master_wait_for_sync+0xa>
}
    5132:	46c0      	nop			; (mov r8, r8)
    5134:	46bd      	mov	sp, r7
    5136:	b002      	add	sp, #8
    5138:	bd80      	pop	{r7, pc}
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	000050f9 	.word	0x000050f9

00005140 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    5140:	b580      	push	{r7, lr}
    5142:	b084      	sub	sp, #16
    5144:	af00      	add	r7, sp, #0
    5146:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	681b      	ldr	r3, [r3, #0]
    514c:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	0018      	movs	r0, r3
    5154:	4b0d      	ldr	r3, [pc, #52]	; (518c <i2c_master_disable+0x4c>)
    5156:	4798      	blx	r3
    5158:	0003      	movs	r3, r0
    515a:	0018      	movs	r0, r3
    515c:	4b0c      	ldr	r3, [pc, #48]	; (5190 <i2c_master_disable+0x50>)
    515e:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	0018      	movs	r0, r3
    5164:	4b0b      	ldr	r3, [pc, #44]	; (5194 <i2c_master_disable+0x54>)
    5166:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    5168:	68fb      	ldr	r3, [r7, #12]
    516a:	2283      	movs	r2, #131	; 0x83
    516c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    516e:	68fb      	ldr	r3, [r7, #12]
    5170:	2283      	movs	r2, #131	; 0x83
    5172:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5174:	68fb      	ldr	r3, [r7, #12]
    5176:	681b      	ldr	r3, [r3, #0]
    5178:	2202      	movs	r2, #2
    517a:	4393      	bics	r3, r2
    517c:	001a      	movs	r2, r3
    517e:	68fb      	ldr	r3, [r7, #12]
    5180:	601a      	str	r2, [r3, #0]

}
    5182:	46c0      	nop			; (mov r8, r8)
    5184:	46bd      	mov	sp, r7
    5186:	b004      	add	sp, #16
    5188:	bd80      	pop	{r7, pc}
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	000151ed 	.word	0x000151ed
    5190:	000050c9 	.word	0x000050c9
    5194:	0000511d 	.word	0x0000511d

00005198 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    5198:	b5f0      	push	{r4, r5, r6, r7, lr}
    519a:	b097      	sub	sp, #92	; 0x5c
    519c:	af00      	add	r7, sp, #0
    519e:	6178      	str	r0, [r7, #20]
    51a0:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    51a2:	2300      	movs	r3, #0
    51a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    51a6:	2300      	movs	r3, #0
    51a8:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    51aa:	2300      	movs	r3, #0
    51ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    51ae:	233b      	movs	r3, #59	; 0x3b
    51b0:	2210      	movs	r2, #16
    51b2:	4694      	mov	ip, r2
    51b4:	44bc      	add	ip, r7
    51b6:	4463      	add	r3, ip
    51b8:	2200      	movs	r2, #0
    51ba:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    51bc:	697b      	ldr	r3, [r7, #20]
    51be:	681b      	ldr	r3, [r3, #0]
    51c0:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    51c2:	697b      	ldr	r3, [r7, #20]
    51c4:	681b      	ldr	r3, [r3, #0]
    51c6:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    51c8:	2323      	movs	r3, #35	; 0x23
    51ca:	2210      	movs	r2, #16
    51cc:	18ba      	adds	r2, r7, r2
    51ce:	18d4      	adds	r4, r2, r3
    51d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    51d2:	0018      	movs	r0, r3
    51d4:	4bc0      	ldr	r3, [pc, #768]	; (54d8 <_i2c_master_set_config+0x340>)
    51d6:	4798      	blx	r3
    51d8:	0003      	movs	r3, r0
    51da:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    51dc:	230c      	movs	r3, #12
    51de:	2210      	movs	r2, #16
    51e0:	4694      	mov	ip, r2
    51e2:	44bc      	add	ip, r7
    51e4:	4463      	add	r3, ip
    51e6:	0018      	movs	r0, r3
    51e8:	4bbc      	ldr	r3, [pc, #752]	; (54dc <_i2c_master_set_config+0x344>)
    51ea:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    51ec:	693b      	ldr	r3, [r7, #16]
    51ee:	69db      	ldr	r3, [r3, #28]
    51f0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    51f2:	693b      	ldr	r3, [r7, #16]
    51f4:	6a1b      	ldr	r3, [r3, #32]
    51f6:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    51f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    51fa:	2b00      	cmp	r3, #0
    51fc:	d106      	bne.n	520c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    51fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5200:	2100      	movs	r1, #0
    5202:	0018      	movs	r0, r3
    5204:	4bb6      	ldr	r3, [pc, #728]	; (54e0 <_i2c_master_set_config+0x348>)
    5206:	4798      	blx	r3
    5208:	0003      	movs	r3, r0
    520a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    520c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    520e:	b2da      	uxtb	r2, r3
    5210:	230c      	movs	r3, #12
    5212:	2110      	movs	r1, #16
    5214:	468c      	mov	ip, r1
    5216:	44bc      	add	ip, r7
    5218:	4463      	add	r3, ip
    521a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    521c:	230c      	movs	r3, #12
    521e:	2210      	movs	r2, #16
    5220:	4694      	mov	ip, r2
    5222:	44bc      	add	ip, r7
    5224:	4463      	add	r3, ip
    5226:	2202      	movs	r2, #2
    5228:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    522a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    522c:	0c1b      	lsrs	r3, r3, #16
    522e:	b2db      	uxtb	r3, r3
    5230:	220c      	movs	r2, #12
    5232:	2110      	movs	r1, #16
    5234:	468c      	mov	ip, r1
    5236:	44bc      	add	ip, r7
    5238:	4462      	add	r2, ip
    523a:	0011      	movs	r1, r2
    523c:	0018      	movs	r0, r3
    523e:	4ba9      	ldr	r3, [pc, #676]	; (54e4 <_i2c_master_set_config+0x34c>)
    5240:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    5242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5244:	2b00      	cmp	r3, #0
    5246:	d106      	bne.n	5256 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    524a:	2101      	movs	r1, #1
    524c:	0018      	movs	r0, r3
    524e:	4ba4      	ldr	r3, [pc, #656]	; (54e0 <_i2c_master_set_config+0x348>)
    5250:	4798      	blx	r3
    5252:	0003      	movs	r3, r0
    5254:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    5256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5258:	b2da      	uxtb	r2, r3
    525a:	230c      	movs	r3, #12
    525c:	2110      	movs	r1, #16
    525e:	468c      	mov	ip, r1
    5260:	44bc      	add	ip, r7
    5262:	4463      	add	r3, ip
    5264:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    5266:	230c      	movs	r3, #12
    5268:	2210      	movs	r2, #16
    526a:	4694      	mov	ip, r2
    526c:	44bc      	add	ip, r7
    526e:	4463      	add	r3, ip
    5270:	2202      	movs	r2, #2
    5272:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    5274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5276:	0c1b      	lsrs	r3, r3, #16
    5278:	b2db      	uxtb	r3, r3
    527a:	220c      	movs	r2, #12
    527c:	2110      	movs	r1, #16
    527e:	468c      	mov	ip, r1
    5280:	44bc      	add	ip, r7
    5282:	4462      	add	r2, ip
    5284:	0011      	movs	r1, r2
    5286:	0018      	movs	r0, r3
    5288:	4b96      	ldr	r3, [pc, #600]	; (54e4 <_i2c_master_set_config+0x34c>)
    528a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    528c:	693b      	ldr	r3, [r7, #16]
    528e:	8a9a      	ldrh	r2, [r3, #20]
    5290:	697b      	ldr	r3, [r7, #20]
    5292:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    5294:	693b      	ldr	r3, [r7, #16]
    5296:	8ada      	ldrh	r2, [r3, #22]
    5298:	697b      	ldr	r3, [r7, #20]
    529a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    529c:	693b      	ldr	r3, [r7, #16]
    529e:	7e1b      	ldrb	r3, [r3, #24]
    52a0:	2b00      	cmp	r3, #0
    52a2:	d103      	bne.n	52ac <_i2c_master_set_config+0x114>
    52a4:	4b90      	ldr	r3, [pc, #576]	; (54e8 <_i2c_master_set_config+0x350>)
    52a6:	4798      	blx	r3
    52a8:	1e03      	subs	r3, r0, #0
    52aa:	d002      	beq.n	52b2 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    52ac:	2380      	movs	r3, #128	; 0x80
    52ae:	657b      	str	r3, [r7, #84]	; 0x54
    52b0:	e001      	b.n	52b6 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    52b2:	2300      	movs	r3, #0
    52b4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    52b6:	693b      	ldr	r3, [r7, #16]
    52b8:	691b      	ldr	r3, [r3, #16]
    52ba:	2b00      	cmp	r3, #0
    52bc:	d004      	beq.n	52c8 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    52be:	693b      	ldr	r3, [r7, #16]
    52c0:	691b      	ldr	r3, [r3, #16]
    52c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    52c4:	4313      	orrs	r3, r2
    52c6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    52c8:	693b      	ldr	r3, [r7, #16]
    52ca:	689b      	ldr	r3, [r3, #8]
    52cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    52ce:	4313      	orrs	r3, r2
    52d0:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    52d2:	693b      	ldr	r3, [r7, #16]
    52d4:	2224      	movs	r2, #36	; 0x24
    52d6:	5c9b      	ldrb	r3, [r3, r2]
    52d8:	2b00      	cmp	r3, #0
    52da:	d004      	beq.n	52e6 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    52dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    52de:	2280      	movs	r2, #128	; 0x80
    52e0:	05d2      	lsls	r2, r2, #23
    52e2:	4313      	orrs	r3, r2
    52e4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    52e6:	693b      	ldr	r3, [r7, #16]
    52e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52ea:	2b00      	cmp	r3, #0
    52ec:	d004      	beq.n	52f8 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    52ee:	693b      	ldr	r3, [r7, #16]
    52f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    52f4:	4313      	orrs	r3, r2
    52f6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    52f8:	693b      	ldr	r3, [r7, #16]
    52fa:	222c      	movs	r2, #44	; 0x2c
    52fc:	5c9b      	ldrb	r3, [r3, r2]
    52fe:	2b00      	cmp	r3, #0
    5300:	d105      	bne.n	530e <_i2c_master_set_config+0x176>
    5302:	693b      	ldr	r3, [r7, #16]
    5304:	689a      	ldr	r2, [r3, #8]
    5306:	2380      	movs	r3, #128	; 0x80
    5308:	049b      	lsls	r3, r3, #18
    530a:	429a      	cmp	r2, r3
    530c:	d104      	bne.n	5318 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    530e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5310:	2280      	movs	r2, #128	; 0x80
    5312:	0512      	lsls	r2, r2, #20
    5314:	4313      	orrs	r3, r2
    5316:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    5318:	693b      	ldr	r3, [r7, #16]
    531a:	222d      	movs	r2, #45	; 0x2d
    531c:	5c9b      	ldrb	r3, [r3, r2]
    531e:	2b00      	cmp	r3, #0
    5320:	d004      	beq.n	532c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    5322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5324:	2280      	movs	r2, #128	; 0x80
    5326:	0412      	lsls	r2, r2, #16
    5328:	4313      	orrs	r3, r2
    532a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    532c:	693b      	ldr	r3, [r7, #16]
    532e:	222e      	movs	r2, #46	; 0x2e
    5330:	5c9b      	ldrb	r3, [r3, r2]
    5332:	2b00      	cmp	r3, #0
    5334:	d004      	beq.n	5340 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    5336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5338:	2280      	movs	r2, #128	; 0x80
    533a:	03d2      	lsls	r2, r2, #15
    533c:	4313      	orrs	r3, r2
    533e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    5340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5342:	681a      	ldr	r2, [r3, #0]
    5344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5346:	431a      	orrs	r2, r3
    5348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    534a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    534e:	2280      	movs	r2, #128	; 0x80
    5350:	0052      	lsls	r2, r2, #1
    5352:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    5354:	2323      	movs	r3, #35	; 0x23
    5356:	2210      	movs	r2, #16
    5358:	4694      	mov	ip, r2
    535a:	44bc      	add	ip, r7
    535c:	4463      	add	r3, ip
    535e:	781b      	ldrb	r3, [r3, #0]
    5360:	3314      	adds	r3, #20
    5362:	b2db      	uxtb	r3, r3
    5364:	0018      	movs	r0, r3
    5366:	4b61      	ldr	r3, [pc, #388]	; (54ec <_i2c_master_set_config+0x354>)
    5368:	4798      	blx	r3
    536a:	0003      	movs	r3, r0
    536c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    536e:	693b      	ldr	r3, [r7, #16]
    5370:	681b      	ldr	r3, [r3, #0]
    5372:	22fa      	movs	r2, #250	; 0xfa
    5374:	0092      	lsls	r2, r2, #2
    5376:	4353      	muls	r3, r2
    5378:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    537a:	693b      	ldr	r3, [r7, #16]
    537c:	685b      	ldr	r3, [r3, #4]
    537e:	22fa      	movs	r2, #250	; 0xfa
    5380:	0092      	lsls	r2, r2, #2
    5382:	4353      	muls	r3, r2
    5384:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    5386:	693b      	ldr	r3, [r7, #16]
    5388:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    538a:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    538c:	4b58      	ldr	r3, [pc, #352]	; (54f0 <_i2c_master_set_config+0x358>)
    538e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5390:	4798      	blx	r3
    5392:	0005      	movs	r5, r0
    5394:	000e      	movs	r6, r1
    5396:	4b56      	ldr	r3, [pc, #344]	; (54f0 <_i2c_master_set_config+0x358>)
    5398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    539a:	4798      	blx	r3
    539c:	60b8      	str	r0, [r7, #8]
    539e:	60f9      	str	r1, [r7, #12]
    53a0:	4b53      	ldr	r3, [pc, #332]	; (54f0 <_i2c_master_set_config+0x358>)
    53a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    53a4:	4798      	blx	r3
    53a6:	4c53      	ldr	r4, [pc, #332]	; (54f4 <_i2c_master_set_config+0x35c>)
    53a8:	4a53      	ldr	r2, [pc, #332]	; (54f8 <_i2c_master_set_config+0x360>)
    53aa:	4b54      	ldr	r3, [pc, #336]	; (54fc <_i2c_master_set_config+0x364>)
    53ac:	47a0      	blx	r4
    53ae:	0003      	movs	r3, r0
    53b0:	000c      	movs	r4, r1
    53b2:	603b      	str	r3, [r7, #0]
    53b4:	607c      	str	r4, [r7, #4]
    53b6:	4b4e      	ldr	r3, [pc, #312]	; (54f0 <_i2c_master_set_config+0x358>)
    53b8:	6a38      	ldr	r0, [r7, #32]
    53ba:	4798      	blx	r3
    53bc:	0002      	movs	r2, r0
    53be:	000b      	movs	r3, r1
    53c0:	4c4c      	ldr	r4, [pc, #304]	; (54f4 <_i2c_master_set_config+0x35c>)
    53c2:	6838      	ldr	r0, [r7, #0]
    53c4:	6879      	ldr	r1, [r7, #4]
    53c6:	47a0      	blx	r4
    53c8:	0003      	movs	r3, r0
    53ca:	000c      	movs	r4, r1
    53cc:	0018      	movs	r0, r3
    53ce:	0021      	movs	r1, r4
    53d0:	4c4b      	ldr	r4, [pc, #300]	; (5500 <_i2c_master_set_config+0x368>)
    53d2:	2200      	movs	r2, #0
    53d4:	4b4b      	ldr	r3, [pc, #300]	; (5504 <_i2c_master_set_config+0x36c>)
    53d6:	47a0      	blx	r4
    53d8:	0003      	movs	r3, r0
    53da:	000c      	movs	r4, r1
    53dc:	001a      	movs	r2, r3
    53de:	0023      	movs	r3, r4
    53e0:	4c44      	ldr	r4, [pc, #272]	; (54f4 <_i2c_master_set_config+0x35c>)
    53e2:	68b8      	ldr	r0, [r7, #8]
    53e4:	68f9      	ldr	r1, [r7, #12]
    53e6:	47a0      	blx	r4
    53e8:	0003      	movs	r3, r0
    53ea:	000c      	movs	r4, r1
    53ec:	001a      	movs	r2, r3
    53ee:	0023      	movs	r3, r4
    53f0:	4c45      	ldr	r4, [pc, #276]	; (5508 <_i2c_master_set_config+0x370>)
    53f2:	0028      	movs	r0, r5
    53f4:	0031      	movs	r1, r6
    53f6:	47a0      	blx	r4
    53f8:	0003      	movs	r3, r0
    53fa:	000c      	movs	r4, r1
    53fc:	001d      	movs	r5, r3
    53fe:	0026      	movs	r6, r4
    5400:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5402:	005a      	lsls	r2, r3, #1
    5404:	4b3a      	ldr	r3, [pc, #232]	; (54f0 <_i2c_master_set_config+0x358>)
    5406:	0010      	movs	r0, r2
    5408:	4798      	blx	r3
    540a:	0002      	movs	r2, r0
    540c:	000b      	movs	r3, r1
    540e:	4c3c      	ldr	r4, [pc, #240]	; (5500 <_i2c_master_set_config+0x368>)
    5410:	0028      	movs	r0, r5
    5412:	0031      	movs	r1, r6
    5414:	47a0      	blx	r4
    5416:	0003      	movs	r3, r0
    5418:	000c      	movs	r4, r1
    541a:	0018      	movs	r0, r3
    541c:	0021      	movs	r1, r4
    541e:	4c3a      	ldr	r4, [pc, #232]	; (5508 <_i2c_master_set_config+0x370>)
    5420:	2200      	movs	r2, #0
    5422:	4b3a      	ldr	r3, [pc, #232]	; (550c <_i2c_master_set_config+0x374>)
    5424:	47a0      	blx	r4
    5426:	0003      	movs	r3, r0
    5428:	000c      	movs	r4, r1
    542a:	001d      	movs	r5, r3
    542c:	0026      	movs	r6, r4
    542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5430:	005a      	lsls	r2, r3, #1
    5432:	4b2f      	ldr	r3, [pc, #188]	; (54f0 <_i2c_master_set_config+0x358>)
    5434:	0010      	movs	r0, r2
    5436:	4798      	blx	r3
    5438:	0002      	movs	r2, r0
    543a:	000b      	movs	r3, r1
    543c:	4c34      	ldr	r4, [pc, #208]	; (5510 <_i2c_master_set_config+0x378>)
    543e:	0028      	movs	r0, r5
    5440:	0031      	movs	r1, r6
    5442:	47a0      	blx	r4
    5444:	0003      	movs	r3, r0
    5446:	000c      	movs	r4, r1
    5448:	0019      	movs	r1, r3
    544a:	0022      	movs	r2, r4
    544c:	4b31      	ldr	r3, [pc, #196]	; (5514 <_i2c_master_set_config+0x37c>)
    544e:	0008      	movs	r0, r1
    5450:	0011      	movs	r1, r2
    5452:	4798      	blx	r3
    5454:	0003      	movs	r3, r0
    5456:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    5458:	693b      	ldr	r3, [r7, #16]
    545a:	689a      	ldr	r2, [r3, #8]
    545c:	2380      	movs	r3, #128	; 0x80
    545e:	049b      	lsls	r3, r3, #18
    5460:	429a      	cmp	r2, r3
    5462:	d16a      	bne.n	553a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    5464:	4b22      	ldr	r3, [pc, #136]	; (54f0 <_i2c_master_set_config+0x358>)
    5466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5468:	4798      	blx	r3
    546a:	4c25      	ldr	r4, [pc, #148]	; (5500 <_i2c_master_set_config+0x368>)
    546c:	0002      	movs	r2, r0
    546e:	000b      	movs	r3, r1
    5470:	47a0      	blx	r4
    5472:	0003      	movs	r3, r0
    5474:	000c      	movs	r4, r1
    5476:	001d      	movs	r5, r3
    5478:	0026      	movs	r6, r4
    547a:	4b1d      	ldr	r3, [pc, #116]	; (54f0 <_i2c_master_set_config+0x358>)
    547c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    547e:	4798      	blx	r3
    5480:	4c1c      	ldr	r4, [pc, #112]	; (54f4 <_i2c_master_set_config+0x35c>)
    5482:	2200      	movs	r2, #0
    5484:	4b24      	ldr	r3, [pc, #144]	; (5518 <_i2c_master_set_config+0x380>)
    5486:	47a0      	blx	r4
    5488:	0003      	movs	r3, r0
    548a:	000c      	movs	r4, r1
    548c:	001a      	movs	r2, r3
    548e:	0023      	movs	r3, r4
    5490:	4c1f      	ldr	r4, [pc, #124]	; (5510 <_i2c_master_set_config+0x378>)
    5492:	0028      	movs	r0, r5
    5494:	0031      	movs	r1, r6
    5496:	47a0      	blx	r4
    5498:	0003      	movs	r3, r0
    549a:	000c      	movs	r4, r1
    549c:	0018      	movs	r0, r3
    549e:	0021      	movs	r1, r4
    54a0:	4c19      	ldr	r4, [pc, #100]	; (5508 <_i2c_master_set_config+0x370>)
    54a2:	2200      	movs	r2, #0
    54a4:	4b19      	ldr	r3, [pc, #100]	; (550c <_i2c_master_set_config+0x374>)
    54a6:	47a0      	blx	r4
    54a8:	0003      	movs	r3, r0
    54aa:	000c      	movs	r4, r1
    54ac:	0019      	movs	r1, r3
    54ae:	0022      	movs	r2, r4
    54b0:	4b18      	ldr	r3, [pc, #96]	; (5514 <_i2c_master_set_config+0x37c>)
    54b2:	0008      	movs	r0, r1
    54b4:	0011      	movs	r1, r2
    54b6:	4798      	blx	r3
    54b8:	0003      	movs	r3, r0
    54ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    54bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    54be:	2b00      	cmp	r3, #0
    54c0:	d02e      	beq.n	5520 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    54c2:	4b16      	ldr	r3, [pc, #88]	; (551c <_i2c_master_set_config+0x384>)
    54c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    54c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    54c8:	4798      	blx	r3
    54ca:	0003      	movs	r3, r0
    54cc:	1e9a      	subs	r2, r3, #2
    54ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    54d0:	1ad3      	subs	r3, r2, r3
    54d2:	653b      	str	r3, [r7, #80]	; 0x50
    54d4:	e031      	b.n	553a <_i2c_master_set_config+0x3a2>
    54d6:	46c0      	nop			; (mov r8, r8)
    54d8:	0001511d 	.word	0x0001511d
    54dc:	00005059 	.word	0x00005059
    54e0:	00014f61 	.word	0x00014f61
    54e4:	00017d0d 	.word	0x00017d0d
    54e8:	00005081 	.word	0x00005081
    54ec:	00017ad1 	.word	0x00017ad1
    54f0:	00022c5d 	.word	0x00022c5d
    54f4:	00022045 	.word	0x00022045
    54f8:	e826d695 	.word	0xe826d695
    54fc:	3e112e0b 	.word	0x3e112e0b
    5500:	000213bd 	.word	0x000213bd
    5504:	40240000 	.word	0x40240000
    5508:	00022545 	.word	0x00022545
    550c:	3ff00000 	.word	0x3ff00000
    5510:	000219dd 	.word	0x000219dd
    5514:	00022b71 	.word	0x00022b71
    5518:	40080000 	.word	0x40080000
    551c:	00020471 	.word	0x00020471
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    5520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5522:	005a      	lsls	r2, r3, #1
    5524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5526:	18d3      	adds	r3, r2, r3
    5528:	1e5a      	subs	r2, r3, #1
    552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    552c:	0059      	lsls	r1, r3, #1
    552e:	4b1d      	ldr	r3, [pc, #116]	; (55a4 <_i2c_master_set_config+0x40c>)
    5530:	0010      	movs	r0, r2
    5532:	4798      	blx	r3
    5534:	0003      	movs	r3, r0
    5536:	3b01      	subs	r3, #1
    5538:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    553c:	2bff      	cmp	r3, #255	; 0xff
    553e:	dc08      	bgt.n	5552 <_i2c_master_set_config+0x3ba>
    5540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5542:	2b00      	cmp	r3, #0
    5544:	db05      	blt.n	5552 <_i2c_master_set_config+0x3ba>
    5546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5548:	2bff      	cmp	r3, #255	; 0xff
    554a:	dc02      	bgt.n	5552 <_i2c_master_set_config+0x3ba>
    554c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    554e:	2b00      	cmp	r3, #0
    5550:	da06      	bge.n	5560 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5552:	233b      	movs	r3, #59	; 0x3b
    5554:	2210      	movs	r2, #16
    5556:	4694      	mov	ip, r2
    5558:	44bc      	add	ip, r7
    555a:	4463      	add	r3, ip
    555c:	2240      	movs	r2, #64	; 0x40
    555e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    5560:	233b      	movs	r3, #59	; 0x3b
    5562:	2210      	movs	r2, #16
    5564:	4694      	mov	ip, r2
    5566:	44bc      	add	ip, r7
    5568:	4463      	add	r3, ip
    556a:	781b      	ldrb	r3, [r3, #0]
    556c:	2b40      	cmp	r3, #64	; 0x40
    556e:	d00e      	beq.n	558e <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5572:	22ff      	movs	r2, #255	; 0xff
    5574:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5578:	041b      	lsls	r3, r3, #16
    557a:	0019      	movs	r1, r3
    557c:	23ff      	movs	r3, #255	; 0xff
    557e:	041b      	lsls	r3, r3, #16
    5580:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5582:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5584:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5586:	0612      	lsls	r2, r2, #24
    5588:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    558c:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    558e:	233b      	movs	r3, #59	; 0x3b
    5590:	2210      	movs	r2, #16
    5592:	4694      	mov	ip, r2
    5594:	44bc      	add	ip, r7
    5596:	4463      	add	r3, ip
    5598:	781b      	ldrb	r3, [r3, #0]
}
    559a:	0018      	movs	r0, r3
    559c:	46bd      	mov	sp, r7
    559e:	b017      	add	sp, #92	; 0x5c
    55a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55a2:	46c0      	nop			; (mov r8, r8)
    55a4:	00020471 	.word	0x00020471

000055a8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    55a8:	b590      	push	{r4, r7, lr}
    55aa:	b08b      	sub	sp, #44	; 0x2c
    55ac:	af00      	add	r7, sp, #0
    55ae:	60f8      	str	r0, [r7, #12]
    55b0:	60b9      	str	r1, [r7, #8]
    55b2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    55b4:	68fb      	ldr	r3, [r7, #12]
    55b6:	68ba      	ldr	r2, [r7, #8]
    55b8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55ba:	68fb      	ldr	r3, [r7, #12]
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    55c0:	68fb      	ldr	r3, [r7, #12]
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	0018      	movs	r0, r3
    55c6:	4b3b      	ldr	r3, [pc, #236]	; (56b4 <i2c_master_init+0x10c>)
    55c8:	4798      	blx	r3
    55ca:	0003      	movs	r3, r0
    55cc:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    55ce:	6a3b      	ldr	r3, [r7, #32]
    55d0:	3302      	adds	r3, #2
    55d2:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    55d4:	6a3b      	ldr	r3, [r7, #32]
    55d6:	3314      	adds	r3, #20
    55d8:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    55da:	2201      	movs	r2, #1
    55dc:	69fb      	ldr	r3, [r7, #28]
    55de:	409a      	lsls	r2, r3
    55e0:	0013      	movs	r3, r2
    55e2:	0019      	movs	r1, r3
    55e4:	2002      	movs	r0, #2
    55e6:	4b34      	ldr	r3, [pc, #208]	; (56b8 <i2c_master_init+0x110>)
    55e8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    55ea:	2314      	movs	r3, #20
    55ec:	18fb      	adds	r3, r7, r3
    55ee:	0018      	movs	r0, r3
    55f0:	4b32      	ldr	r3, [pc, #200]	; (56bc <i2c_master_init+0x114>)
    55f2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    55f4:	687b      	ldr	r3, [r7, #4]
    55f6:	7b1a      	ldrb	r2, [r3, #12]
    55f8:	2314      	movs	r3, #20
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    55fe:	69bb      	ldr	r3, [r7, #24]
    5600:	b2db      	uxtb	r3, r3
    5602:	2214      	movs	r2, #20
    5604:	18ba      	adds	r2, r7, r2
    5606:	0011      	movs	r1, r2
    5608:	0018      	movs	r0, r3
    560a:	4b2d      	ldr	r3, [pc, #180]	; (56c0 <i2c_master_init+0x118>)
    560c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    560e:	69bb      	ldr	r3, [r7, #24]
    5610:	b2db      	uxtb	r3, r3
    5612:	0018      	movs	r0, r3
    5614:	4b2b      	ldr	r3, [pc, #172]	; (56c4 <i2c_master_init+0x11c>)
    5616:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	7b1b      	ldrb	r3, [r3, #12]
    561c:	2100      	movs	r1, #0
    561e:	0018      	movs	r0, r3
    5620:	4b29      	ldr	r3, [pc, #164]	; (56c8 <i2c_master_init+0x120>)
    5622:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5626:	681b      	ldr	r3, [r3, #0]
    5628:	2202      	movs	r2, #2
    562a:	4013      	ands	r3, r2
    562c:	d001      	beq.n	5632 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    562e:	231c      	movs	r3, #28
    5630:	e03b      	b.n	56aa <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5634:	681b      	ldr	r3, [r3, #0]
    5636:	2201      	movs	r2, #1
    5638:	4013      	ands	r3, r2
    563a:	d001      	beq.n	5640 <i2c_master_init+0x98>
		return STATUS_BUSY;
    563c:	2305      	movs	r3, #5
    563e:	e034      	b.n	56aa <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5640:	68fb      	ldr	r3, [r7, #12]
    5642:	681b      	ldr	r3, [r3, #0]
    5644:	2217      	movs	r2, #23
    5646:	18bc      	adds	r4, r7, r2
    5648:	0018      	movs	r0, r3
    564a:	4b1a      	ldr	r3, [pc, #104]	; (56b4 <i2c_master_init+0x10c>)
    564c:	4798      	blx	r3
    564e:	0003      	movs	r3, r0
    5650:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    5652:	4a1e      	ldr	r2, [pc, #120]	; (56cc <i2c_master_init+0x124>)
    5654:	2317      	movs	r3, #23
    5656:	18fb      	adds	r3, r7, r3
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	0011      	movs	r1, r2
    565c:	0018      	movs	r0, r3
    565e:	4b1c      	ldr	r3, [pc, #112]	; (56d0 <i2c_master_init+0x128>)
    5660:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5662:	2317      	movs	r3, #23
    5664:	18fb      	adds	r3, r7, r3
    5666:	781a      	ldrb	r2, [r3, #0]
    5668:	4b1a      	ldr	r3, [pc, #104]	; (56d4 <i2c_master_init+0x12c>)
    566a:	0092      	lsls	r2, r2, #2
    566c:	68f9      	ldr	r1, [r7, #12]
    566e:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    5670:	68fb      	ldr	r3, [r7, #12]
    5672:	2200      	movs	r2, #0
    5674:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    5676:	68fb      	ldr	r3, [r7, #12]
    5678:	2200      	movs	r2, #0
    567a:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    567c:	68fb      	ldr	r3, [r7, #12]
    567e:	2200      	movs	r2, #0
    5680:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    5682:	68fb      	ldr	r3, [r7, #12]
    5684:	2200      	movs	r2, #0
    5686:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    5688:	68fb      	ldr	r3, [r7, #12]
    568a:	2225      	movs	r2, #37	; 0x25
    568c:	2100      	movs	r1, #0
    568e:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    5690:	68fb      	ldr	r3, [r7, #12]
    5692:	2200      	movs	r2, #0
    5694:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5698:	2214      	movs	r2, #20
    569a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    569c:	687a      	ldr	r2, [r7, #4]
    569e:	68fb      	ldr	r3, [r7, #12]
    56a0:	0011      	movs	r1, r2
    56a2:	0018      	movs	r0, r3
    56a4:	4b0c      	ldr	r3, [pc, #48]	; (56d8 <i2c_master_init+0x130>)
    56a6:	4798      	blx	r3
    56a8:	0003      	movs	r3, r0
}
    56aa:	0018      	movs	r0, r3
    56ac:	46bd      	mov	sp, r7
    56ae:	b00b      	add	sp, #44	; 0x2c
    56b0:	bd90      	pop	{r4, r7, pc}
    56b2:	46c0      	nop			; (mov r8, r8)
    56b4:	0001511d 	.word	0x0001511d
    56b8:	00004ffd 	.word	0x00004ffd
    56bc:	00004fe5 	.word	0x00004fe5
    56c0:	000179ad 	.word	0x000179ad
    56c4:	000179f1 	.word	0x000179f1
    56c8:	00014ed5 	.word	0x00014ed5
    56cc:	00001eed 	.word	0x00001eed
    56d0:	00015181 	.word	0x00015181
    56d4:	20005ce8 	.word	0x20005ce8
    56d8:	00005199 	.word	0x00005199

000056dc <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    56dc:	b580      	push	{r7, lr}
    56de:	b084      	sub	sp, #16
    56e0:	af00      	add	r7, sp, #0
    56e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    56e4:	687b      	ldr	r3, [r7, #4]
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    56ea:	687b      	ldr	r3, [r7, #4]
    56ec:	0018      	movs	r0, r3
    56ee:	4b0f      	ldr	r3, [pc, #60]	; (572c <i2c_master_reset+0x50>)
    56f0:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	0018      	movs	r0, r3
    56f6:	4b0e      	ldr	r3, [pc, #56]	; (5730 <i2c_master_reset+0x54>)
    56f8:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    56fa:	4b0e      	ldr	r3, [pc, #56]	; (5734 <i2c_master_reset+0x58>)
    56fc:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	0018      	movs	r0, r3
    5704:	4b0c      	ldr	r3, [pc, #48]	; (5738 <i2c_master_reset+0x5c>)
    5706:	4798      	blx	r3
    5708:	0003      	movs	r3, r0
    570a:	0018      	movs	r0, r3
    570c:	4b0b      	ldr	r3, [pc, #44]	; (573c <i2c_master_reset+0x60>)
    570e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    5710:	4b0b      	ldr	r3, [pc, #44]	; (5740 <i2c_master_reset+0x64>)
    5712:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5714:	687b      	ldr	r3, [r7, #4]
    5716:	0018      	movs	r0, r3
    5718:	4b04      	ldr	r3, [pc, #16]	; (572c <i2c_master_reset+0x50>)
    571a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    571c:	68fb      	ldr	r3, [r7, #12]
    571e:	2201      	movs	r2, #1
    5720:	601a      	str	r2, [r3, #0]
}
    5722:	46c0      	nop			; (mov r8, r8)
    5724:	46bd      	mov	sp, r7
    5726:	b004      	add	sp, #16
    5728:	bd80      	pop	{r7, pc}
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	0000511d 	.word	0x0000511d
    5730:	00005141 	.word	0x00005141
    5734:	000050a1 	.word	0x000050a1
    5738:	000151ed 	.word	0x000151ed
    573c:	00017b29 	.word	0x00017b29
    5740:	000050b5 	.word	0x000050b5

00005744 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    5744:	b580      	push	{r7, lr}
    5746:	b084      	sub	sp, #16
    5748:	af00      	add	r7, sp, #0
    574a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    574c:	687b      	ldr	r3, [r7, #4]
    574e:	681b      	ldr	r3, [r3, #0]
    5750:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5752:	68fb      	ldr	r3, [r7, #12]
    5754:	7e1b      	ldrb	r3, [r3, #24]
    5756:	b2db      	uxtb	r3, r3
    5758:	001a      	movs	r2, r3
    575a:	2302      	movs	r3, #2
    575c:	4013      	ands	r3, r2
    575e:	d00b      	beq.n	5778 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5760:	68fb      	ldr	r3, [r7, #12]
    5762:	2202      	movs	r2, #2
    5764:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5766:	68fb      	ldr	r3, [r7, #12]
    5768:	8b5b      	ldrh	r3, [r3, #26]
    576a:	b29b      	uxth	r3, r3
    576c:	001a      	movs	r2, r3
    576e:	2302      	movs	r3, #2
    5770:	4013      	ands	r3, r2
    5772:	d011      	beq.n	5798 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    5774:	2341      	movs	r3, #65	; 0x41
    5776:	e010      	b.n	579a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5778:	68fb      	ldr	r3, [r7, #12]
    577a:	8b5b      	ldrh	r3, [r3, #26]
    577c:	b29b      	uxth	r3, r3
    577e:	001a      	movs	r2, r3
    5780:	2304      	movs	r3, #4
    5782:	4013      	ands	r3, r2
    5784:	d008      	beq.n	5798 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5786:	68fb      	ldr	r3, [r7, #12]
    5788:	685b      	ldr	r3, [r3, #4]
    578a:	22c0      	movs	r2, #192	; 0xc0
    578c:	0292      	lsls	r2, r2, #10
    578e:	431a      	orrs	r2, r3
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    5794:	2318      	movs	r3, #24
    5796:	e000      	b.n	579a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    5798:	2300      	movs	r3, #0
}
    579a:	0018      	movs	r0, r3
    579c:	46bd      	mov	sp, r7
    579e:	b004      	add	sp, #16
    57a0:	bd80      	pop	{r7, pc}

000057a2 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    57a2:	b580      	push	{r7, lr}
    57a4:	b084      	sub	sp, #16
    57a6:	af00      	add	r7, sp, #0
    57a8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    57b0:	230e      	movs	r3, #14
    57b2:	18fb      	adds	r3, r7, r3
    57b4:	2200      	movs	r2, #0
    57b6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    57b8:	e00f      	b.n	57da <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    57ba:	230e      	movs	r3, #14
    57bc:	18fb      	adds	r3, r7, r3
    57be:	220e      	movs	r2, #14
    57c0:	18ba      	adds	r2, r7, r2
    57c2:	8812      	ldrh	r2, [r2, #0]
    57c4:	3201      	adds	r2, #1
    57c6:	801a      	strh	r2, [r3, #0]
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	891b      	ldrh	r3, [r3, #8]
    57cc:	220e      	movs	r2, #14
    57ce:	18ba      	adds	r2, r7, r2
    57d0:	8812      	ldrh	r2, [r2, #0]
    57d2:	429a      	cmp	r2, r3
    57d4:	d301      	bcc.n	57da <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    57d6:	2312      	movs	r3, #18
    57d8:	e00e      	b.n	57f8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    57da:	68bb      	ldr	r3, [r7, #8]
    57dc:	7e1b      	ldrb	r3, [r3, #24]
    57de:	b2db      	uxtb	r3, r3
    57e0:	001a      	movs	r2, r3
    57e2:	2301      	movs	r3, #1
    57e4:	4013      	ands	r3, r2
    57e6:	d106      	bne.n	57f6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    57e8:	68bb      	ldr	r3, [r7, #8]
    57ea:	7e1b      	ldrb	r3, [r3, #24]
    57ec:	b2db      	uxtb	r3, r3
    57ee:	001a      	movs	r2, r3
    57f0:	2302      	movs	r3, #2
    57f2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    57f4:	d0e1      	beq.n	57ba <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    57f6:	2300      	movs	r3, #0
}
    57f8:	0018      	movs	r0, r3
    57fa:	46bd      	mov	sp, r7
    57fc:	b004      	add	sp, #16
    57fe:	bd80      	pop	{r7, pc}

00005800 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5800:	b590      	push	{r4, r7, lr}
    5802:	b085      	sub	sp, #20
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
    5808:	000a      	movs	r2, r1
    580a:	1cfb      	adds	r3, r7, #3
    580c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    580e:	687b      	ldr	r3, [r7, #4]
    5810:	681b      	ldr	r3, [r3, #0]
    5812:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5814:	68fb      	ldr	r3, [r7, #12]
    5816:	685b      	ldr	r3, [r3, #4]
    5818:	2280      	movs	r2, #128	; 0x80
    581a:	02d2      	lsls	r2, r2, #11
    581c:	431a      	orrs	r2, r3
    581e:	68fb      	ldr	r3, [r7, #12]
    5820:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    5822:	1cfb      	adds	r3, r7, #3
    5824:	781a      	ldrb	r2, [r3, #0]
    5826:	68fb      	ldr	r3, [r7, #12]
    5828:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    582a:	230b      	movs	r3, #11
    582c:	18fc      	adds	r4, r7, r3
    582e:	687b      	ldr	r3, [r7, #4]
    5830:	0018      	movs	r0, r3
    5832:	4b07      	ldr	r3, [pc, #28]	; (5850 <_i2c_master_send_hs_master_code+0x50>)
    5834:	4798      	blx	r3
    5836:	0003      	movs	r3, r0
    5838:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    583a:	68fb      	ldr	r3, [r7, #12]
    583c:	2201      	movs	r2, #1
    583e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    5840:	230b      	movs	r3, #11
    5842:	18fb      	adds	r3, r7, r3
    5844:	781b      	ldrb	r3, [r3, #0]
}
    5846:	0018      	movs	r0, r3
    5848:	46bd      	mov	sp, r7
    584a:	b005      	add	sp, #20
    584c:	bd90      	pop	{r4, r7, pc}
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	000057a3 	.word	0x000057a3

00005854 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    5854:	b580      	push	{r7, lr}
    5856:	af00      	add	r7, sp, #0
    5858:	2000      	movs	r0, #0
    585a:	4b02      	ldr	r3, [pc, #8]	; (5864 <TC3_Handler+0x10>)
    585c:	4798      	blx	r3
    585e:	46c0      	nop			; (mov r8, r8)
    5860:	46bd      	mov	sp, r7
    5862:	bd80      	pop	{r7, pc}
    5864:	00005891 	.word	0x00005891

00005868 <TC4_Handler>:
    5868:	b580      	push	{r7, lr}
    586a:	af00      	add	r7, sp, #0
    586c:	2001      	movs	r0, #1
    586e:	4b02      	ldr	r3, [pc, #8]	; (5878 <TC4_Handler+0x10>)
    5870:	4798      	blx	r3
    5872:	46c0      	nop			; (mov r8, r8)
    5874:	46bd      	mov	sp, r7
    5876:	bd80      	pop	{r7, pc}
    5878:	00005891 	.word	0x00005891

0000587c <TC5_Handler>:
    587c:	b580      	push	{r7, lr}
    587e:	af00      	add	r7, sp, #0
    5880:	2002      	movs	r0, #2
    5882:	4b02      	ldr	r3, [pc, #8]	; (588c <TC5_Handler+0x10>)
    5884:	4798      	blx	r3
    5886:	46c0      	nop			; (mov r8, r8)
    5888:	46bd      	mov	sp, r7
    588a:	bd80      	pop	{r7, pc}
    588c:	00005891 	.word	0x00005891

00005890 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    5890:	b580      	push	{r7, lr}
    5892:	b084      	sub	sp, #16
    5894:	af00      	add	r7, sp, #0
    5896:	0002      	movs	r2, r0
    5898:	1dfb      	adds	r3, r7, #7
    589a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    589c:	1dfb      	adds	r3, r7, #7
    589e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    58a0:	4b28      	ldr	r3, [pc, #160]	; (5944 <_tc_interrupt_handler+0xb4>)
    58a2:	0092      	lsls	r2, r2, #2
    58a4:	58d3      	ldr	r3, [r2, r3]
    58a6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    58a8:	68fb      	ldr	r3, [r7, #12]
    58aa:	681b      	ldr	r3, [r3, #0]
    58ac:	7b9b      	ldrb	r3, [r3, #14]
    58ae:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    58b0:	68fa      	ldr	r2, [r7, #12]
    58b2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    58b4:	4013      	ands	r3, r2
    58b6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    58b8:	68fb      	ldr	r3, [r7, #12]
    58ba:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    58bc:	230b      	movs	r3, #11
    58be:	18fb      	adds	r3, r7, r3
    58c0:	400a      	ands	r2, r1
    58c2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    58c4:	230b      	movs	r3, #11
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	781b      	ldrb	r3, [r3, #0]
    58ca:	2201      	movs	r2, #1
    58cc:	4013      	ands	r3, r2
    58ce:	d008      	beq.n	58e2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	689b      	ldr	r3, [r3, #8]
    58d4:	68fa      	ldr	r2, [r7, #12]
    58d6:	0010      	movs	r0, r2
    58d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    58da:	68fb      	ldr	r3, [r7, #12]
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	2201      	movs	r2, #1
    58e0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    58e2:	230b      	movs	r3, #11
    58e4:	18fb      	adds	r3, r7, r3
    58e6:	781b      	ldrb	r3, [r3, #0]
    58e8:	2202      	movs	r2, #2
    58ea:	4013      	ands	r3, r2
    58ec:	d008      	beq.n	5900 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    58ee:	68fb      	ldr	r3, [r7, #12]
    58f0:	68db      	ldr	r3, [r3, #12]
    58f2:	68fa      	ldr	r2, [r7, #12]
    58f4:	0010      	movs	r0, r2
    58f6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    58f8:	68fb      	ldr	r3, [r7, #12]
    58fa:	681b      	ldr	r3, [r3, #0]
    58fc:	2202      	movs	r2, #2
    58fe:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    5900:	230b      	movs	r3, #11
    5902:	18fb      	adds	r3, r7, r3
    5904:	781b      	ldrb	r3, [r3, #0]
    5906:	2210      	movs	r2, #16
    5908:	4013      	ands	r3, r2
    590a:	d008      	beq.n	591e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	691b      	ldr	r3, [r3, #16]
    5910:	68fa      	ldr	r2, [r7, #12]
    5912:	0010      	movs	r0, r2
    5914:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    5916:	68fb      	ldr	r3, [r7, #12]
    5918:	681b      	ldr	r3, [r3, #0]
    591a:	2210      	movs	r2, #16
    591c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    591e:	230b      	movs	r3, #11
    5920:	18fb      	adds	r3, r7, r3
    5922:	781b      	ldrb	r3, [r3, #0]
    5924:	2220      	movs	r2, #32
    5926:	4013      	ands	r3, r2
    5928:	d008      	beq.n	593c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    592a:	68fb      	ldr	r3, [r7, #12]
    592c:	695b      	ldr	r3, [r3, #20]
    592e:	68fa      	ldr	r2, [r7, #12]
    5930:	0010      	movs	r0, r2
    5932:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    5934:	68fb      	ldr	r3, [r7, #12]
    5936:	681b      	ldr	r3, [r3, #0]
    5938:	2220      	movs	r2, #32
    593a:	739a      	strb	r2, [r3, #14]
	}
}
    593c:	46c0      	nop			; (mov r8, r8)
    593e:	46bd      	mov	sp, r7
    5940:	b004      	add	sp, #16
    5942:	bd80      	pop	{r7, pc}
    5944:	20004ad0 	.word	0x20004ad0

00005948 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
    5948:	b580      	push	{r7, lr}
    594a:	b084      	sub	sp, #16
    594c:	af00      	add	r7, sp, #0
    594e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
    5950:	2300      	movs	r3, #0
    5952:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
    5954:	687b      	ldr	r3, [r7, #4]
    5956:	2b00      	cmp	r3, #0
    5958:	d101      	bne.n	595e <FreeRTOS_CLIRegisterCommand+0x16>
    595a:	b672      	cpsid	i
    595c:	e7fe      	b.n	595c <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    595e:	2008      	movs	r0, #8
    5960:	4b11      	ldr	r3, [pc, #68]	; (59a8 <FreeRTOS_CLIRegisterCommand+0x60>)
    5962:	4798      	blx	r3
    5964:	0003      	movs	r3, r0
    5966:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
    5968:	68bb      	ldr	r3, [r7, #8]
    596a:	2b00      	cmp	r3, #0
    596c:	d101      	bne.n	5972 <FreeRTOS_CLIRegisterCommand+0x2a>
    596e:	b672      	cpsid	i
    5970:	e7fe      	b.n	5970 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
    5972:	68bb      	ldr	r3, [r7, #8]
    5974:	2b00      	cmp	r3, #0
    5976:	d012      	beq.n	599e <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
    5978:	4b0c      	ldr	r3, [pc, #48]	; (59ac <FreeRTOS_CLIRegisterCommand+0x64>)
    597a:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    597c:	68bb      	ldr	r3, [r7, #8]
    597e:	687a      	ldr	r2, [r7, #4]
    5980:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
    5982:	68bb      	ldr	r3, [r7, #8]
    5984:	2200      	movs	r2, #0
    5986:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
    5988:	4b09      	ldr	r3, [pc, #36]	; (59b0 <FreeRTOS_CLIRegisterCommand+0x68>)
    598a:	681b      	ldr	r3, [r3, #0]
    598c:	68ba      	ldr	r2, [r7, #8]
    598e:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
    5990:	4b07      	ldr	r3, [pc, #28]	; (59b0 <FreeRTOS_CLIRegisterCommand+0x68>)
    5992:	68ba      	ldr	r2, [r7, #8]
    5994:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
    5996:	4b07      	ldr	r3, [pc, #28]	; (59b4 <FreeRTOS_CLIRegisterCommand+0x6c>)
    5998:	4798      	blx	r3

		xReturn = pdPASS;
    599a:	2301      	movs	r3, #1
    599c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    599e:	68fb      	ldr	r3, [r7, #12]
}
    59a0:	0018      	movs	r0, r3
    59a2:	46bd      	mov	sp, r7
    59a4:	b004      	add	sp, #16
    59a6:	bd80      	pop	{r7, pc}
    59a8:	00007d61 	.word	0x00007d61
    59ac:	00007c29 	.word	0x00007c29
    59b0:	20000100 	.word	0x20000100
    59b4:	00007c4d 	.word	0x00007c4d

000059b8 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
    59b8:	b580      	push	{r7, lr}
    59ba:	b088      	sub	sp, #32
    59bc:	af00      	add	r7, sp, #0
    59be:	60f8      	str	r0, [r7, #12]
    59c0:	60b9      	str	r1, [r7, #8]
    59c2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
    59c4:	2301      	movs	r3, #1
    59c6:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
    59c8:	4b3d      	ldr	r3, [pc, #244]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    59ca:	681b      	ldr	r3, [r3, #0]
    59cc:	2b00      	cmp	r3, #0
    59ce:	d144      	bne.n	5a5a <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    59d0:	4b3b      	ldr	r3, [pc, #236]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    59d2:	4a3c      	ldr	r2, [pc, #240]	; (5ac4 <FreeRTOS_CLIProcessCommand+0x10c>)
    59d4:	601a      	str	r2, [r3, #0]
    59d6:	e03a      	b.n	5a4e <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    59d8:	4b39      	ldr	r3, [pc, #228]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    59da:	681b      	ldr	r3, [r3, #0]
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	681b      	ldr	r3, [r3, #0]
    59e0:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    59e2:	69bb      	ldr	r3, [r7, #24]
    59e4:	0018      	movs	r0, r3
    59e6:	4b38      	ldr	r3, [pc, #224]	; (5ac8 <FreeRTOS_CLIProcessCommand+0x110>)
    59e8:	4798      	blx	r3
    59ea:	0003      	movs	r3, r0
    59ec:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    59ee:	68fa      	ldr	r2, [r7, #12]
    59f0:	697b      	ldr	r3, [r7, #20]
    59f2:	18d3      	adds	r3, r2, r3
    59f4:	781b      	ldrb	r3, [r3, #0]
    59f6:	2b20      	cmp	r3, #32
    59f8:	d005      	beq.n	5a06 <FreeRTOS_CLIProcessCommand+0x4e>
    59fa:	68fa      	ldr	r2, [r7, #12]
    59fc:	697b      	ldr	r3, [r7, #20]
    59fe:	18d3      	adds	r3, r2, r3
    5a00:	781b      	ldrb	r3, [r3, #0]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d11e      	bne.n	5a44 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    5a06:	697a      	ldr	r2, [r7, #20]
    5a08:	69b9      	ldr	r1, [r7, #24]
    5a0a:	68fb      	ldr	r3, [r7, #12]
    5a0c:	0018      	movs	r0, r3
    5a0e:	4b2f      	ldr	r3, [pc, #188]	; (5acc <FreeRTOS_CLIProcessCommand+0x114>)
    5a10:	4798      	blx	r3
    5a12:	1e03      	subs	r3, r0, #0
    5a14:	d116      	bne.n	5a44 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    5a16:	4b2a      	ldr	r3, [pc, #168]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a18:	681b      	ldr	r3, [r3, #0]
    5a1a:	681b      	ldr	r3, [r3, #0]
    5a1c:	7b1b      	ldrb	r3, [r3, #12]
    5a1e:	b25b      	sxtb	r3, r3
    5a20:	2b00      	cmp	r3, #0
    5a22:	db19      	blt.n	5a58 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
    5a24:	68fb      	ldr	r3, [r7, #12]
    5a26:	0018      	movs	r0, r3
    5a28:	4b29      	ldr	r3, [pc, #164]	; (5ad0 <FreeRTOS_CLIProcessCommand+0x118>)
    5a2a:	4798      	blx	r3
    5a2c:	0003      	movs	r3, r0
    5a2e:	001a      	movs	r2, r3
    5a30:	4b23      	ldr	r3, [pc, #140]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a32:	681b      	ldr	r3, [r3, #0]
    5a34:	681b      	ldr	r3, [r3, #0]
    5a36:	7b1b      	ldrb	r3, [r3, #12]
    5a38:	b25b      	sxtb	r3, r3
    5a3a:	429a      	cmp	r2, r3
    5a3c:	d00c      	beq.n	5a58 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
    5a3e:	2300      	movs	r3, #0
    5a40:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
    5a42:	e009      	b.n	5a58 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    5a44:	4b1e      	ldr	r3, [pc, #120]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a46:	681b      	ldr	r3, [r3, #0]
    5a48:	685a      	ldr	r2, [r3, #4]
    5a4a:	4b1d      	ldr	r3, [pc, #116]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a4c:	601a      	str	r2, [r3, #0]
    5a4e:	4b1c      	ldr	r3, [pc, #112]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	2b00      	cmp	r3, #0
    5a54:	d1c0      	bne.n	59d8 <FreeRTOS_CLIProcessCommand+0x20>
    5a56:	e000      	b.n	5a5a <FreeRTOS_CLIProcessCommand+0xa2>
					break;
    5a58:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    5a5a:	4b19      	ldr	r3, [pc, #100]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a5c:	681b      	ldr	r3, [r3, #0]
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d00c      	beq.n	5a7c <FreeRTOS_CLIProcessCommand+0xc4>
    5a62:	69fb      	ldr	r3, [r7, #28]
    5a64:	2b00      	cmp	r3, #0
    5a66:	d109      	bne.n	5a7c <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    5a68:	687a      	ldr	r2, [r7, #4]
    5a6a:	491a      	ldr	r1, [pc, #104]	; (5ad4 <FreeRTOS_CLIProcessCommand+0x11c>)
    5a6c:	68bb      	ldr	r3, [r7, #8]
    5a6e:	0018      	movs	r0, r3
    5a70:	4b19      	ldr	r3, [pc, #100]	; (5ad8 <FreeRTOS_CLIProcessCommand+0x120>)
    5a72:	4798      	blx	r3
		pxCommand = NULL;
    5a74:	4b12      	ldr	r3, [pc, #72]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a76:	2200      	movs	r2, #0
    5a78:	601a      	str	r2, [r3, #0]
    5a7a:	e01c      	b.n	5ab6 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
    5a7c:	4b10      	ldr	r3, [pc, #64]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a7e:	681b      	ldr	r3, [r3, #0]
    5a80:	2b00      	cmp	r3, #0
    5a82:	d010      	beq.n	5aa6 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    5a84:	4b0e      	ldr	r3, [pc, #56]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5a86:	681b      	ldr	r3, [r3, #0]
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	689b      	ldr	r3, [r3, #8]
    5a8c:	68fa      	ldr	r2, [r7, #12]
    5a8e:	6879      	ldr	r1, [r7, #4]
    5a90:	68b8      	ldr	r0, [r7, #8]
    5a92:	4798      	blx	r3
    5a94:	0003      	movs	r3, r0
    5a96:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
    5a98:	69fb      	ldr	r3, [r7, #28]
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d10b      	bne.n	5ab6 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
    5a9e:	4b08      	ldr	r3, [pc, #32]	; (5ac0 <FreeRTOS_CLIProcessCommand+0x108>)
    5aa0:	2200      	movs	r2, #0
    5aa2:	601a      	str	r2, [r3, #0]
    5aa4:	e007      	b.n	5ab6 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    5aa6:	687a      	ldr	r2, [r7, #4]
    5aa8:	490c      	ldr	r1, [pc, #48]	; (5adc <FreeRTOS_CLIProcessCommand+0x124>)
    5aaa:	68bb      	ldr	r3, [r7, #8]
    5aac:	0018      	movs	r0, r3
    5aae:	4b0a      	ldr	r3, [pc, #40]	; (5ad8 <FreeRTOS_CLIProcessCommand+0x120>)
    5ab0:	4798      	blx	r3
		xReturn = pdFALSE;
    5ab2:	2300      	movs	r3, #0
    5ab4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
    5ab6:	69fb      	ldr	r3, [r7, #28]
}
    5ab8:	0018      	movs	r0, r3
    5aba:	46bd      	mov	sp, r7
    5abc:	b008      	add	sp, #32
    5abe:	bd80      	pop	{r7, pc}
    5ac0:	20000d64 	.word	0x20000d64
    5ac4:	200000f8 	.word	0x200000f8
    5ac8:	00023157 	.word	0x00023157
    5acc:	00023165 	.word	0x00023165
    5ad0:	00005b41 	.word	0x00005b41
    5ad4:	00025b38 	.word	0x00025b38
    5ad8:	00023187 	.word	0x00023187
    5adc:	00025b90 	.word	0x00025b90

00005ae0 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    5ae0:	b580      	push	{r7, lr}
    5ae2:	b086      	sub	sp, #24
    5ae4:	af00      	add	r7, sp, #0
    5ae6:	60f8      	str	r0, [r7, #12]
    5ae8:	60b9      	str	r1, [r7, #8]
    5aea:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    5aec:	4b11      	ldr	r3, [pc, #68]	; (5b34 <prvHelpCommand+0x54>)
    5aee:	681b      	ldr	r3, [r3, #0]
    5af0:	2b00      	cmp	r3, #0
    5af2:	d102      	bne.n	5afa <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
    5af4:	4b0f      	ldr	r3, [pc, #60]	; (5b34 <prvHelpCommand+0x54>)
    5af6:	4a10      	ldr	r2, [pc, #64]	; (5b38 <prvHelpCommand+0x58>)
    5af8:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    5afa:	4b0e      	ldr	r3, [pc, #56]	; (5b34 <prvHelpCommand+0x54>)
    5afc:	681b      	ldr	r3, [r3, #0]
    5afe:	681b      	ldr	r3, [r3, #0]
    5b00:	6859      	ldr	r1, [r3, #4]
    5b02:	68ba      	ldr	r2, [r7, #8]
    5b04:	68fb      	ldr	r3, [r7, #12]
    5b06:	0018      	movs	r0, r3
    5b08:	4b0c      	ldr	r3, [pc, #48]	; (5b3c <prvHelpCommand+0x5c>)
    5b0a:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    5b0c:	4b09      	ldr	r3, [pc, #36]	; (5b34 <prvHelpCommand+0x54>)
    5b0e:	681b      	ldr	r3, [r3, #0]
    5b10:	685a      	ldr	r2, [r3, #4]
    5b12:	4b08      	ldr	r3, [pc, #32]	; (5b34 <prvHelpCommand+0x54>)
    5b14:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
    5b16:	4b07      	ldr	r3, [pc, #28]	; (5b34 <prvHelpCommand+0x54>)
    5b18:	681b      	ldr	r3, [r3, #0]
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	d102      	bne.n	5b24 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
    5b1e:	2300      	movs	r3, #0
    5b20:	617b      	str	r3, [r7, #20]
    5b22:	e001      	b.n	5b28 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
    5b24:	2301      	movs	r3, #1
    5b26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    5b28:	697b      	ldr	r3, [r7, #20]
}
    5b2a:	0018      	movs	r0, r3
    5b2c:	46bd      	mov	sp, r7
    5b2e:	b006      	add	sp, #24
    5b30:	bd80      	pop	{r7, pc}
    5b32:	46c0      	nop			; (mov r8, r8)
    5b34:	20000d68 	.word	0x20000d68
    5b38:	200000f8 	.word	0x200000f8
    5b3c:	00023187 	.word	0x00023187

00005b40 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
    5b40:	b580      	push	{r7, lr}
    5b42:	b084      	sub	sp, #16
    5b44:	af00      	add	r7, sp, #0
    5b46:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
    5b48:	230f      	movs	r3, #15
    5b4a:	18fb      	adds	r3, r7, r3
    5b4c:	2200      	movs	r2, #0
    5b4e:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
    5b50:	2300      	movs	r3, #0
    5b52:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    5b54:	e018      	b.n	5b88 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	2b20      	cmp	r3, #32
    5b5c:	d10f      	bne.n	5b7e <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
    5b5e:	68bb      	ldr	r3, [r7, #8]
    5b60:	2b01      	cmp	r3, #1
    5b62:	d00e      	beq.n	5b82 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
    5b64:	230f      	movs	r3, #15
    5b66:	18fb      	adds	r3, r7, r3
    5b68:	781b      	ldrb	r3, [r3, #0]
    5b6a:	b25b      	sxtb	r3, r3
    5b6c:	b2db      	uxtb	r3, r3
    5b6e:	3301      	adds	r3, #1
    5b70:	b2da      	uxtb	r2, r3
    5b72:	230f      	movs	r3, #15
    5b74:	18fb      	adds	r3, r7, r3
    5b76:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
    5b78:	2301      	movs	r3, #1
    5b7a:	60bb      	str	r3, [r7, #8]
    5b7c:	e001      	b.n	5b82 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
    5b7e:	2300      	movs	r3, #0
    5b80:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	3301      	adds	r3, #1
    5b86:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
    5b88:	687b      	ldr	r3, [r7, #4]
    5b8a:	781b      	ldrb	r3, [r3, #0]
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d1e2      	bne.n	5b56 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    5b90:	68bb      	ldr	r3, [r7, #8]
    5b92:	2b01      	cmp	r3, #1
    5b94:	d109      	bne.n	5baa <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
    5b96:	230f      	movs	r3, #15
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	781b      	ldrb	r3, [r3, #0]
    5b9c:	b25b      	sxtb	r3, r3
    5b9e:	b2db      	uxtb	r3, r3
    5ba0:	3b01      	subs	r3, #1
    5ba2:	b2da      	uxtb	r2, r3
    5ba4:	230f      	movs	r3, #15
    5ba6:	18fb      	adds	r3, r7, r3
    5ba8:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
    5baa:	230f      	movs	r3, #15
    5bac:	18fb      	adds	r3, r7, r3
    5bae:	781b      	ldrb	r3, [r3, #0]
    5bb0:	b25b      	sxtb	r3, r3
}
    5bb2:	0018      	movs	r0, r3
    5bb4:	46bd      	mov	sp, r7
    5bb6:	b004      	add	sp, #16
    5bb8:	bd80      	pop	{r7, pc}
	...

00005bbc <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b082      	sub	sp, #8
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	0018      	movs	r0, r3
    5bc8:	4b03      	ldr	r3, [pc, #12]	; (5bd8 <prvTraceGetQueueNumber+0x1c>)
    5bca:	4798      	blx	r3
    5bcc:	0003      	movs	r3, r0
}
    5bce:	0018      	movs	r0, r3
    5bd0:	46bd      	mov	sp, r7
    5bd2:	b002      	add	sp, #8
    5bd4:	bd80      	pop	{r7, pc}
    5bd6:	46c0      	nop			; (mov r8, r8)
    5bd8:	00009385 	.word	0x00009385

00005bdc <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    5bdc:	b580      	push	{r7, lr}
    5bde:	b082      	sub	sp, #8
    5be0:	af00      	add	r7, sp, #0
    5be2:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    5be4:	687b      	ldr	r3, [r7, #4]
    5be6:	0018      	movs	r0, r3
    5be8:	4b03      	ldr	r3, [pc, #12]	; (5bf8 <prvTraceGetQueueType+0x1c>)
    5bea:	4798      	blx	r3
    5bec:	0003      	movs	r3, r0
}
    5bee:	0018      	movs	r0, r3
    5bf0:	46bd      	mov	sp, r7
    5bf2:	b002      	add	sp, #8
    5bf4:	bd80      	pop	{r7, pc}
    5bf6:	46c0      	nop			; (mov r8, r8)
    5bf8:	000093b1 	.word	0x000093b1

00005bfc <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b082      	sub	sp, #8
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	0018      	movs	r0, r3
    5c08:	4b03      	ldr	r3, [pc, #12]	; (5c18 <prvTraceGetTaskNumberLow16+0x1c>)
    5c0a:	4798      	blx	r3
    5c0c:	0003      	movs	r3, r0
    5c0e:	b29b      	uxth	r3, r3
}
    5c10:	0018      	movs	r0, r3
    5c12:	46bd      	mov	sp, r7
    5c14:	b002      	add	sp, #8
    5c16:	bd80      	pop	{r7, pc}
    5c18:	0000a6e1 	.word	0x0000a6e1

00005c1c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    5c1c:	b580      	push	{r7, lr}
    5c1e:	b082      	sub	sp, #8
    5c20:	af00      	add	r7, sp, #0
    5c22:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	0018      	movs	r0, r3
    5c28:	4b04      	ldr	r3, [pc, #16]	; (5c3c <prvTraceGetTaskNumberHigh16+0x20>)
    5c2a:	4798      	blx	r3
    5c2c:	0003      	movs	r3, r0
    5c2e:	0c1b      	lsrs	r3, r3, #16
    5c30:	b29b      	uxth	r3, r3
}
    5c32:	0018      	movs	r0, r3
    5c34:	46bd      	mov	sp, r7
    5c36:	b002      	add	sp, #8
    5c38:	bd80      	pop	{r7, pc}
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	0000a6e1 	.word	0x0000a6e1

00005c40 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
    5c48:	000a      	movs	r2, r1
    5c4a:	1cbb      	adds	r3, r7, #2
    5c4c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    5c4e:	687b      	ldr	r3, [r7, #4]
    5c50:	0018      	movs	r0, r3
    5c52:	4b08      	ldr	r3, [pc, #32]	; (5c74 <prvTraceSetTaskNumberLow16+0x34>)
    5c54:	4798      	blx	r3
    5c56:	0003      	movs	r3, r0
    5c58:	0c1b      	lsrs	r3, r3, #16
    5c5a:	041a      	lsls	r2, r3, #16
    5c5c:	1cbb      	adds	r3, r7, #2
    5c5e:	881b      	ldrh	r3, [r3, #0]
    5c60:	431a      	orrs	r2, r3
    5c62:	687b      	ldr	r3, [r7, #4]
    5c64:	0011      	movs	r1, r2
    5c66:	0018      	movs	r0, r3
    5c68:	4b03      	ldr	r3, [pc, #12]	; (5c78 <prvTraceSetTaskNumberLow16+0x38>)
    5c6a:	4798      	blx	r3
}
    5c6c:	46c0      	nop			; (mov r8, r8)
    5c6e:	46bd      	mov	sp, r7
    5c70:	b002      	add	sp, #8
    5c72:	bd80      	pop	{r7, pc}
    5c74:	0000a6e1 	.word	0x0000a6e1
    5c78:	0000a709 	.word	0x0000a709

00005c7c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    5c7c:	b580      	push	{r7, lr}
    5c7e:	b082      	sub	sp, #8
    5c80:	af00      	add	r7, sp, #0
    5c82:	6078      	str	r0, [r7, #4]
    5c84:	000a      	movs	r2, r1
    5c86:	1cbb      	adds	r3, r7, #2
    5c88:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	0018      	movs	r0, r3
    5c8e:	4b09      	ldr	r3, [pc, #36]	; (5cb4 <prvTraceSetTaskNumberHigh16+0x38>)
    5c90:	4798      	blx	r3
    5c92:	0003      	movs	r3, r0
    5c94:	041b      	lsls	r3, r3, #16
    5c96:	0c1a      	lsrs	r2, r3, #16
    5c98:	1cbb      	adds	r3, r7, #2
    5c9a:	881b      	ldrh	r3, [r3, #0]
    5c9c:	041b      	lsls	r3, r3, #16
    5c9e:	431a      	orrs	r2, r3
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	0011      	movs	r1, r2
    5ca4:	0018      	movs	r0, r3
    5ca6:	4b04      	ldr	r3, [pc, #16]	; (5cb8 <prvTraceSetTaskNumberHigh16+0x3c>)
    5ca8:	4798      	blx	r3
}
    5caa:	46c0      	nop			; (mov r8, r8)
    5cac:	46bd      	mov	sp, r7
    5cae:	b002      	add	sp, #8
    5cb0:	bd80      	pop	{r7, pc}
    5cb2:	46c0      	nop			; (mov r8, r8)
    5cb4:	0000a6e1 	.word	0x0000a6e1
    5cb8:	0000a709 	.word	0x0000a709

00005cbc <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    5cbc:	b580      	push	{r7, lr}
    5cbe:	b082      	sub	sp, #8
    5cc0:	af00      	add	r7, sp, #0
    5cc2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    5cc4:	687b      	ldr	r3, [r7, #4]
    5cc6:	0018      	movs	r0, r3
    5cc8:	4b03      	ldr	r3, [pc, #12]	; (5cd8 <prvTraceGetQueueNumberLow16+0x1c>)
    5cca:	4798      	blx	r3
    5ccc:	0003      	movs	r3, r0
    5cce:	b29b      	uxth	r3, r3
}
    5cd0:	0018      	movs	r0, r3
    5cd2:	46bd      	mov	sp, r7
    5cd4:	b002      	add	sp, #8
    5cd6:	bd80      	pop	{r7, pc}
    5cd8:	00005bbd 	.word	0x00005bbd

00005cdc <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    5cdc:	b580      	push	{r7, lr}
    5cde:	b082      	sub	sp, #8
    5ce0:	af00      	add	r7, sp, #0
    5ce2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    5ce4:	687b      	ldr	r3, [r7, #4]
    5ce6:	0018      	movs	r0, r3
    5ce8:	4b04      	ldr	r3, [pc, #16]	; (5cfc <prvTraceGetQueueNumberHigh16+0x20>)
    5cea:	4798      	blx	r3
    5cec:	0003      	movs	r3, r0
    5cee:	0c1b      	lsrs	r3, r3, #16
    5cf0:	b29b      	uxth	r3, r3
}
    5cf2:	0018      	movs	r0, r3
    5cf4:	46bd      	mov	sp, r7
    5cf6:	b002      	add	sp, #8
    5cf8:	bd80      	pop	{r7, pc}
    5cfa:	46c0      	nop			; (mov r8, r8)
    5cfc:	00005bbd 	.word	0x00005bbd

00005d00 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    5d00:	b580      	push	{r7, lr}
    5d02:	b082      	sub	sp, #8
    5d04:	af00      	add	r7, sp, #0
    5d06:	6078      	str	r0, [r7, #4]
    5d08:	000a      	movs	r2, r1
    5d0a:	1cbb      	adds	r3, r7, #2
    5d0c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	0018      	movs	r0, r3
    5d12:	4b08      	ldr	r3, [pc, #32]	; (5d34 <prvTraceSetQueueNumberLow16+0x34>)
    5d14:	4798      	blx	r3
    5d16:	0003      	movs	r3, r0
    5d18:	0c1b      	lsrs	r3, r3, #16
    5d1a:	041a      	lsls	r2, r3, #16
    5d1c:	1cbb      	adds	r3, r7, #2
    5d1e:	881b      	ldrh	r3, [r3, #0]
    5d20:	431a      	orrs	r2, r3
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	0011      	movs	r1, r2
    5d26:	0018      	movs	r0, r3
    5d28:	4b03      	ldr	r3, [pc, #12]	; (5d38 <prvTraceSetQueueNumberLow16+0x38>)
    5d2a:	4798      	blx	r3
}
    5d2c:	46c0      	nop			; (mov r8, r8)
    5d2e:	46bd      	mov	sp, r7
    5d30:	b002      	add	sp, #8
    5d32:	bd80      	pop	{r7, pc}
    5d34:	00005bbd 	.word	0x00005bbd
    5d38:	00009399 	.word	0x00009399

00005d3c <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    5d3c:	b580      	push	{r7, lr}
    5d3e:	b082      	sub	sp, #8
    5d40:	af00      	add	r7, sp, #0
    5d42:	6078      	str	r0, [r7, #4]
    5d44:	000a      	movs	r2, r1
    5d46:	1cbb      	adds	r3, r7, #2
    5d48:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	0018      	movs	r0, r3
    5d4e:	4b09      	ldr	r3, [pc, #36]	; (5d74 <prvTraceSetQueueNumberHigh16+0x38>)
    5d50:	4798      	blx	r3
    5d52:	0003      	movs	r3, r0
    5d54:	041b      	lsls	r3, r3, #16
    5d56:	0c1a      	lsrs	r2, r3, #16
    5d58:	1cbb      	adds	r3, r7, #2
    5d5a:	881b      	ldrh	r3, [r3, #0]
    5d5c:	041b      	lsls	r3, r3, #16
    5d5e:	431a      	orrs	r2, r3
    5d60:	687b      	ldr	r3, [r7, #4]
    5d62:	0011      	movs	r1, r2
    5d64:	0018      	movs	r0, r3
    5d66:	4b04      	ldr	r3, [pc, #16]	; (5d78 <prvTraceSetQueueNumberHigh16+0x3c>)
    5d68:	4798      	blx	r3
}
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	46bd      	mov	sp, r7
    5d6e:	b002      	add	sp, #8
    5d70:	bd80      	pop	{r7, pc}
    5d72:	46c0      	nop			; (mov r8, r8)
    5d74:	00005bbd 	.word	0x00005bbd
    5d78:	00009399 	.word	0x00009399

00005d7c <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
    5d7c:	b580      	push	{r7, lr}
    5d7e:	b084      	sub	sp, #16
    5d80:	af00      	add	r7, sp, #0
    5d82:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
    5d84:	2300      	movs	r3, #0
    5d86:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    5d88:	2300      	movs	r3, #0
    5d8a:	60bb      	str	r3, [r7, #8]
    5d8c:	e018      	b.n	5dc0 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
    5d8e:	4b14      	ldr	r3, [pc, #80]	; (5de0 <prvAddTaskToStackMonitor+0x64>)
    5d90:	68ba      	ldr	r2, [r7, #8]
    5d92:	00d2      	lsls	r2, r2, #3
    5d94:	58d3      	ldr	r3, [r2, r3]
    5d96:	2b00      	cmp	r3, #0
    5d98:	d10f      	bne.n	5dba <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
    5d9a:	4b11      	ldr	r3, [pc, #68]	; (5de0 <prvAddTaskToStackMonitor+0x64>)
    5d9c:	68ba      	ldr	r2, [r7, #8]
    5d9e:	00d2      	lsls	r2, r2, #3
    5da0:	6879      	ldr	r1, [r7, #4]
    5da2:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
    5da4:	4a0e      	ldr	r2, [pc, #56]	; (5de0 <prvAddTaskToStackMonitor+0x64>)
    5da6:	68bb      	ldr	r3, [r7, #8]
    5da8:	00db      	lsls	r3, r3, #3
    5daa:	18d3      	adds	r3, r2, r3
    5dac:	3304      	adds	r3, #4
    5dae:	2201      	movs	r2, #1
    5db0:	4252      	negs	r2, r2
    5db2:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
    5db4:	2301      	movs	r3, #1
    5db6:	60fb      	str	r3, [r7, #12]
			break;
    5db8:	e005      	b.n	5dc6 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    5dba:	68bb      	ldr	r3, [r7, #8]
    5dbc:	3301      	adds	r3, #1
    5dbe:	60bb      	str	r3, [r7, #8]
    5dc0:	68bb      	ldr	r3, [r7, #8]
    5dc2:	2b09      	cmp	r3, #9
    5dc4:	dde3      	ble.n	5d8e <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
    5dc6:	68fb      	ldr	r3, [r7, #12]
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d104      	bne.n	5dd6 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
    5dcc:	4b05      	ldr	r3, [pc, #20]	; (5de4 <prvAddTaskToStackMonitor+0x68>)
    5dce:	681b      	ldr	r3, [r3, #0]
    5dd0:	1c5a      	adds	r2, r3, #1
    5dd2:	4b04      	ldr	r3, [pc, #16]	; (5de4 <prvAddTaskToStackMonitor+0x68>)
    5dd4:	601a      	str	r2, [r3, #0]
	}
}
    5dd6:	46c0      	nop			; (mov r8, r8)
    5dd8:	46bd      	mov	sp, r7
    5dda:	b004      	add	sp, #16
    5ddc:	bd80      	pop	{r7, pc}
    5dde:	46c0      	nop			; (mov r8, r8)
    5de0:	20000d70 	.word	0x20000d70
    5de4:	20000dc0 	.word	0x20000dc0

00005de8 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
    5de8:	b590      	push	{r4, r7, lr}
    5dea:	b085      	sub	sp, #20
    5dec:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
    5dee:	2300      	movs	r3, #0
    5df0:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
    5df2:	4b2b      	ldr	r3, [pc, #172]	; (5ea0 <prvReportStackUsage+0xb8>)
    5df4:	681b      	ldr	r3, [r3, #0]
    5df6:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
    5df8:	4b29      	ldr	r3, [pc, #164]	; (5ea0 <prvReportStackUsage+0xb8>)
    5dfa:	681a      	ldr	r2, [r3, #0]
    5dfc:	4b29      	ldr	r3, [pc, #164]	; (5ea4 <prvReportStackUsage+0xbc>)
    5dfe:	00d2      	lsls	r2, r2, #3
    5e00:	58d3      	ldr	r3, [r2, r3]
    5e02:	2b00      	cmp	r3, #0
    5e04:	d035      	beq.n	5e72 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
    5e06:	4b26      	ldr	r3, [pc, #152]	; (5ea0 <prvReportStackUsage+0xb8>)
    5e08:	681a      	ldr	r2, [r3, #0]
    5e0a:	4b26      	ldr	r3, [pc, #152]	; (5ea4 <prvReportStackUsage+0xbc>)
    5e0c:	00d2      	lsls	r2, r2, #3
    5e0e:	58d3      	ldr	r3, [r2, r3]
    5e10:	0018      	movs	r0, r3
    5e12:	4b25      	ldr	r3, [pc, #148]	; (5ea8 <prvReportStackUsage+0xc0>)
    5e14:	4798      	blx	r3
    5e16:	0003      	movs	r3, r0
    5e18:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
    5e1a:	4b21      	ldr	r3, [pc, #132]	; (5ea0 <prvReportStackUsage+0xb8>)
    5e1c:	681b      	ldr	r3, [r3, #0]
    5e1e:	4a21      	ldr	r2, [pc, #132]	; (5ea4 <prvReportStackUsage+0xbc>)
    5e20:	00db      	lsls	r3, r3, #3
    5e22:	18d3      	adds	r3, r2, r3
    5e24:	3304      	adds	r3, #4
    5e26:	681a      	ldr	r2, [r3, #0]
    5e28:	687b      	ldr	r3, [r7, #4]
    5e2a:	429a      	cmp	r2, r3
    5e2c:	d907      	bls.n	5e3e <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
    5e2e:	4b1c      	ldr	r3, [pc, #112]	; (5ea0 <prvReportStackUsage+0xb8>)
    5e30:	681b      	ldr	r3, [r3, #0]
    5e32:	4a1c      	ldr	r2, [pc, #112]	; (5ea4 <prvReportStackUsage+0xbc>)
    5e34:	00db      	lsls	r3, r3, #3
    5e36:	18d3      	adds	r3, r2, r3
    5e38:	3304      	adds	r3, #4
    5e3a:	687a      	ldr	r2, [r7, #4]
    5e3c:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
    5e3e:	4b18      	ldr	r3, [pc, #96]	; (5ea0 <prvReportStackUsage+0xb8>)
    5e40:	681a      	ldr	r2, [r3, #0]
    5e42:	4b18      	ldr	r3, [pc, #96]	; (5ea4 <prvReportStackUsage+0xbc>)
    5e44:	00d2      	lsls	r2, r2, #3
    5e46:	58d3      	ldr	r3, [r2, r3]
    5e48:	0018      	movs	r0, r3
    5e4a:	4b18      	ldr	r3, [pc, #96]	; (5eac <prvReportStackUsage+0xc4>)
    5e4c:	4798      	blx	r3
    5e4e:	0003      	movs	r3, r0
    5e50:	b2db      	uxtb	r3, r3
    5e52:	0019      	movs	r1, r3
    5e54:	4b12      	ldr	r3, [pc, #72]	; (5ea0 <prvReportStackUsage+0xb8>)
    5e56:	681b      	ldr	r3, [r3, #0]
    5e58:	4a12      	ldr	r2, [pc, #72]	; (5ea4 <prvReportStackUsage+0xbc>)
    5e5a:	00db      	lsls	r3, r3, #3
    5e5c:	18d3      	adds	r3, r2, r3
    5e5e:	3304      	adds	r3, #4
    5e60:	681b      	ldr	r3, [r3, #0]
    5e62:	000a      	movs	r2, r1
    5e64:	2103      	movs	r1, #3
    5e66:	20ea      	movs	r0, #234	; 0xea
    5e68:	4c11      	ldr	r4, [pc, #68]	; (5eb0 <prvReportStackUsage+0xc8>)
    5e6a:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
    5e6c:	68fb      	ldr	r3, [r7, #12]
    5e6e:	3301      	adds	r3, #1
    5e70:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
    5e72:	4b0b      	ldr	r3, [pc, #44]	; (5ea0 <prvReportStackUsage+0xb8>)
    5e74:	681b      	ldr	r3, [r3, #0]
    5e76:	1c5a      	adds	r2, r3, #1
    5e78:	4b0e      	ldr	r3, [pc, #56]	; (5eb4 <prvReportStackUsage+0xcc>)
    5e7a:	210a      	movs	r1, #10
    5e7c:	0010      	movs	r0, r2
    5e7e:	4798      	blx	r3
    5e80:	000b      	movs	r3, r1
    5e82:	001a      	movs	r2, r3
    5e84:	4b06      	ldr	r3, [pc, #24]	; (5ea0 <prvReportStackUsage+0xb8>)
    5e86:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
    5e88:	68fb      	ldr	r3, [r7, #12]
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	dc04      	bgt.n	5e98 <prvReportStackUsage+0xb0>
    5e8e:	4b04      	ldr	r3, [pc, #16]	; (5ea0 <prvReportStackUsage+0xb8>)
    5e90:	681a      	ldr	r2, [r3, #0]
    5e92:	68bb      	ldr	r3, [r7, #8]
    5e94:	429a      	cmp	r2, r3
    5e96:	d1af      	bne.n	5df8 <prvReportStackUsage+0x10>
}
    5e98:	46c0      	nop			; (mov r8, r8)
    5e9a:	46bd      	mov	sp, r7
    5e9c:	b005      	add	sp, #20
    5e9e:	bd90      	pop	{r4, r7, pc}
    5ea0:	20000dc4 	.word	0x20000dc4
    5ea4:	20000d70 	.word	0x20000d70
    5ea8:	0000a881 	.word	0x0000a881
    5eac:	00005bfd 	.word	0x00005bfd
    5eb0:	00006745 	.word	0x00006745
    5eb4:	00020751 	.word	0x00020751

00005eb8 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    5eb8:	b580      	push	{r7, lr}
    5eba:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
    5ebc:	4b02      	ldr	r3, [pc, #8]	; (5ec8 <prvTraceGetCurrentTaskHandle+0x10>)
    5ebe:	4798      	blx	r3
    5ec0:	0003      	movs	r3, r0
}
    5ec2:	0018      	movs	r0, r3
    5ec4:	46bd      	mov	sp, r7
    5ec6:	bd80      	pop	{r7, pc}
    5ec8:	0000a92d 	.word	0x0000a92d

00005ecc <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    5ecc:	b590      	push	{r4, r7, lr}
    5ece:	b085      	sub	sp, #20
    5ed0:	af02      	add	r7, sp, #8
    5ed2:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
    5ed4:	4b14      	ldr	r3, [pc, #80]	; (5f28 <vTraceEnable+0x5c>)
    5ed6:	4798      	blx	r3

	if (startOption == TRC_START)
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	2b01      	cmp	r3, #1
    5edc:	d102      	bne.n	5ee4 <vTraceEnable+0x18>
	{
		vTraceStart();
    5ede:	4b13      	ldr	r3, [pc, #76]	; (5f2c <vTraceEnable+0x60>)
    5ee0:	4798      	blx	r3
    5ee2:	e00e      	b.n	5f02 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	2b02      	cmp	r3, #2
    5ee8:	d104      	bne.n	5ef4 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    5eea:	4b11      	ldr	r3, [pc, #68]	; (5f30 <vTraceEnable+0x64>)
    5eec:	0018      	movs	r0, r3
    5eee:	4b11      	ldr	r3, [pc, #68]	; (5f34 <vTraceEnable+0x68>)
    5ef0:	4798      	blx	r3
    5ef2:	e006      	b.n	5f02 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d003      	beq.n	5f02 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    5efa:	4b0f      	ldr	r3, [pc, #60]	; (5f38 <vTraceEnable+0x6c>)
    5efc:	0018      	movs	r0, r3
    5efe:	4b0d      	ldr	r3, [pc, #52]	; (5f34 <vTraceEnable+0x68>)
    5f00:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
    5f02:	4b0e      	ldr	r3, [pc, #56]	; (5f3c <vTraceEnable+0x70>)
    5f04:	681b      	ldr	r3, [r3, #0]
    5f06:	2b00      	cmp	r3, #0
    5f08:	d10a      	bne.n	5f20 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
    5f0a:	2396      	movs	r3, #150	; 0x96
    5f0c:	005a      	lsls	r2, r3, #1
    5f0e:	490c      	ldr	r1, [pc, #48]	; (5f40 <vTraceEnable+0x74>)
    5f10:	480c      	ldr	r0, [pc, #48]	; (5f44 <vTraceEnable+0x78>)
    5f12:	4b0a      	ldr	r3, [pc, #40]	; (5f3c <vTraceEnable+0x70>)
    5f14:	9301      	str	r3, [sp, #4]
    5f16:	2304      	movs	r3, #4
    5f18:	9300      	str	r3, [sp, #0]
    5f1a:	2300      	movs	r3, #0
    5f1c:	4c0a      	ldr	r4, [pc, #40]	; (5f48 <vTraceEnable+0x7c>)
    5f1e:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    5f20:	46c0      	nop			; (mov r8, r8)
    5f22:	46bd      	mov	sp, r7
    5f24:	b003      	add	sp, #12
    5f26:	bd90      	pop	{r4, r7, pc}
    5f28:	00006e11 	.word	0x00006e11
    5f2c:	00006369 	.word	0x00006369
    5f30:	00025bf0 	.word	0x00025bf0
    5f34:	000074b9 	.word	0x000074b9
    5f38:	00025c30 	.word	0x00025c30
    5f3c:	20000d6c 	.word	0x20000d6c
    5f40:	00025c64 	.word	0x00025c64
    5f44:	00005f4d 	.word	0x00005f4d
    5f48:	00009885 	.word	0x00009885

00005f4c <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
    5f4c:	b580      	push	{r7, lr}
    5f4e:	b082      	sub	sp, #8
    5f50:	af00      	add	r7, sp, #0
    5f52:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
    5f54:	4b04      	ldr	r3, [pc, #16]	; (5f68 <TzCtrl+0x1c>)
    5f56:	4798      	blx	r3
    5f58:	1e03      	subs	r3, r0, #0
    5f5a:	d001      	beq.n	5f60 <TzCtrl+0x14>
		{
			prvReportStackUsage();
    5f5c:	4b03      	ldr	r3, [pc, #12]	; (5f6c <TzCtrl+0x20>)
    5f5e:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
    5f60:	2004      	movs	r0, #4
    5f62:	4b03      	ldr	r3, [pc, #12]	; (5f70 <TzCtrl+0x24>)
    5f64:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
    5f66:	e7f5      	b.n	5f54 <TzCtrl+0x8>
    5f68:	000063ad 	.word	0x000063ad
    5f6c:	00005de9 	.word	0x00005de9
    5f70:	00009c21 	.word	0x00009c21

00005f74 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    5f74:	b580      	push	{r7, lr}
    5f76:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    5f78:	4b60      	ldr	r3, [pc, #384]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5f7a:	681b      	ldr	r3, [r3, #0]
    5f7c:	2209      	movs	r2, #9
    5f7e:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    5f80:	4b5e      	ldr	r3, [pc, #376]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5f82:	681b      	ldr	r3, [r3, #0]
    5f84:	2264      	movs	r2, #100	; 0x64
    5f86:	210a      	movs	r1, #10
    5f88:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    5f8a:	4b5c      	ldr	r3, [pc, #368]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5f8c:	681b      	ldr	r3, [r3, #0]
    5f8e:	2265      	movs	r2, #101	; 0x65
    5f90:	210a      	movs	r1, #10
    5f92:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    5f94:	4b59      	ldr	r3, [pc, #356]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5f96:	681b      	ldr	r3, [r3, #0]
    5f98:	2266      	movs	r2, #102	; 0x66
    5f9a:	210a      	movs	r1, #10
    5f9c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    5f9e:	4b57      	ldr	r3, [pc, #348]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5fa0:	681b      	ldr	r3, [r3, #0]
    5fa2:	2267      	movs	r2, #103	; 0x67
    5fa4:	210f      	movs	r1, #15
    5fa6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    5fa8:	4b54      	ldr	r3, [pc, #336]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5faa:	681b      	ldr	r3, [r3, #0]
    5fac:	2268      	movs	r2, #104	; 0x68
    5fae:	2105      	movs	r1, #5
    5fb0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    5fb2:	4b52      	ldr	r3, [pc, #328]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5fb4:	681b      	ldr	r3, [r3, #0]
    5fb6:	2269      	movs	r2, #105	; 0x69
    5fb8:	2105      	movs	r1, #5
    5fba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    5fbc:	4b4f      	ldr	r3, [pc, #316]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5fbe:	681b      	ldr	r3, [r3, #0]
    5fc0:	226a      	movs	r2, #106	; 0x6a
    5fc2:	2105      	movs	r1, #5
    5fc4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    5fc6:	4b4d      	ldr	r3, [pc, #308]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	226b      	movs	r2, #107	; 0x6b
    5fcc:	2105      	movs	r1, #5
    5fce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    5fd0:	4b4a      	ldr	r3, [pc, #296]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	226c      	movs	r2, #108	; 0x6c
    5fd6:	2105      	movs	r1, #5
    5fd8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    5fda:	4b48      	ldr	r3, [pc, #288]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5fdc:	681b      	ldr	r3, [r3, #0]
    5fde:	2270      	movs	r2, #112	; 0x70
    5fe0:	210f      	movs	r1, #15
    5fe2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    5fe4:	4b45      	ldr	r3, [pc, #276]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5fe6:	681b      	ldr	r3, [r3, #0]
    5fe8:	2271      	movs	r2, #113	; 0x71
    5fea:	210f      	movs	r1, #15
    5fec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    5fee:	4b43      	ldr	r3, [pc, #268]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	2272      	movs	r2, #114	; 0x72
    5ff4:	210f      	movs	r1, #15
    5ff6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    5ff8:	4b40      	ldr	r3, [pc, #256]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    5ffa:	681b      	ldr	r3, [r3, #0]
    5ffc:	2273      	movs	r2, #115	; 0x73
    5ffe:	210f      	movs	r1, #15
    6000:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    6002:	4b3e      	ldr	r3, [pc, #248]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	2274      	movs	r2, #116	; 0x74
    6008:	210f      	movs	r1, #15
    600a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    600c:	4b3b      	ldr	r3, [pc, #236]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    600e:	681b      	ldr	r3, [r3, #0]
    6010:	2275      	movs	r2, #117	; 0x75
    6012:	210f      	movs	r1, #15
    6014:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    6016:	4b39      	ldr	r3, [pc, #228]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6018:	681b      	ldr	r3, [r3, #0]
    601a:	2276      	movs	r2, #118	; 0x76
    601c:	210f      	movs	r1, #15
    601e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    6020:	4b36      	ldr	r3, [pc, #216]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6022:	681b      	ldr	r3, [r3, #0]
    6024:	2277      	movs	r2, #119	; 0x77
    6026:	210f      	movs	r1, #15
    6028:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    602a:	4b34      	ldr	r3, [pc, #208]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	2278      	movs	r2, #120	; 0x78
    6030:	210f      	movs	r1, #15
    6032:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    6034:	4b31      	ldr	r3, [pc, #196]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6036:	681b      	ldr	r3, [r3, #0]
    6038:	227c      	movs	r2, #124	; 0x7c
    603a:	2110      	movs	r1, #16
    603c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    603e:	4b2f      	ldr	r3, [pc, #188]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6040:	681b      	ldr	r3, [r3, #0]
    6042:	227d      	movs	r2, #125	; 0x7d
    6044:	2110      	movs	r1, #16
    6046:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    6048:	4b2c      	ldr	r3, [pc, #176]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    604a:	681b      	ldr	r3, [r3, #0]
    604c:	227e      	movs	r2, #126	; 0x7e
    604e:	2110      	movs	r1, #16
    6050:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    6052:	4b2a      	ldr	r3, [pc, #168]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6054:	681b      	ldr	r3, [r3, #0]
    6056:	227f      	movs	r2, #127	; 0x7f
    6058:	2113      	movs	r1, #19
    605a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    605c:	4b27      	ldr	r3, [pc, #156]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    605e:	681b      	ldr	r3, [r3, #0]
    6060:	2280      	movs	r2, #128	; 0x80
    6062:	2111      	movs	r1, #17
    6064:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    6066:	4b25      	ldr	r3, [pc, #148]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	2281      	movs	r2, #129	; 0x81
    606c:	2110      	movs	r1, #16
    606e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    6070:	4b22      	ldr	r3, [pc, #136]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	2282      	movs	r2, #130	; 0x82
    6076:	2113      	movs	r1, #19
    6078:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    607a:	4b20      	ldr	r3, [pc, #128]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    607c:	681b      	ldr	r3, [r3, #0]
    607e:	2283      	movs	r2, #131	; 0x83
    6080:	2113      	movs	r1, #19
    6082:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    6084:	4b1d      	ldr	r3, [pc, #116]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6086:	681b      	ldr	r3, [r3, #0]
    6088:	2284      	movs	r2, #132	; 0x84
    608a:	2113      	movs	r1, #19
    608c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    608e:	4b1b      	ldr	r3, [pc, #108]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    6090:	681b      	ldr	r3, [r3, #0]
    6092:	2288      	movs	r2, #136	; 0x88
    6094:	2100      	movs	r1, #0
    6096:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    6098:	4b18      	ldr	r3, [pc, #96]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    609a:	681b      	ldr	r3, [r3, #0]
    609c:	228a      	movs	r2, #138	; 0x8a
    609e:	21a0      	movs	r1, #160	; 0xa0
    60a0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    60a2:	4b16      	ldr	r3, [pc, #88]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    60a4:	681b      	ldr	r3, [r3, #0]
    60a6:	228c      	movs	r2, #140	; 0x8c
    60a8:	21a0      	movs	r1, #160	; 0xa0
    60aa:	0049      	lsls	r1, r1, #1
    60ac:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    60ae:	4b13      	ldr	r3, [pc, #76]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    60b0:	681b      	ldr	r3, [r3, #0]
    60b2:	228e      	movs	r2, #142	; 0x8e
    60b4:	21f0      	movs	r1, #240	; 0xf0
    60b6:	0049      	lsls	r1, r1, #1
    60b8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    60ba:	4b10      	ldr	r3, [pc, #64]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    60bc:	681b      	ldr	r3, [r3, #0]
    60be:	2290      	movs	r2, #144	; 0x90
    60c0:	490f      	ldr	r1, [pc, #60]	; (6100 <vTraceInitObjectPropertyTable+0x18c>)
    60c2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    60c4:	4b0d      	ldr	r3, [pc, #52]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    60c6:	681b      	ldr	r3, [r3, #0]
    60c8:	2292      	movs	r2, #146	; 0x92
    60ca:	490e      	ldr	r1, [pc, #56]	; (6104 <vTraceInitObjectPropertyTable+0x190>)
    60cc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    60ce:	4b0b      	ldr	r3, [pc, #44]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    60d0:	681b      	ldr	r3, [r3, #0]
    60d2:	2294      	movs	r2, #148	; 0x94
    60d4:	490c      	ldr	r1, [pc, #48]	; (6108 <vTraceInitObjectPropertyTable+0x194>)
    60d6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    60d8:	4b08      	ldr	r3, [pc, #32]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	2296      	movs	r2, #150	; 0x96
    60de:	490b      	ldr	r1, [pc, #44]	; (610c <vTraceInitObjectPropertyTable+0x198>)
    60e0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    60e2:	4b06      	ldr	r3, [pc, #24]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    60e4:	681b      	ldr	r3, [r3, #0]
    60e6:	2298      	movs	r2, #152	; 0x98
    60e8:	218c      	movs	r1, #140	; 0x8c
    60ea:	00c9      	lsls	r1, r1, #3
    60ec:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    60ee:	4b03      	ldr	r3, [pc, #12]	; (60fc <vTraceInitObjectPropertyTable+0x188>)
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	4a07      	ldr	r2, [pc, #28]	; (6110 <vTraceInitObjectPropertyTable+0x19c>)
    60f4:	661a      	str	r2, [r3, #96]	; 0x60
}
    60f6:	46c0      	nop			; (mov r8, r8)
    60f8:	46bd      	mov	sp, r7
    60fa:	bd80      	pop	{r7, pc}
    60fc:	20000e84 	.word	0x20000e84
    6100:	000002fd 	.word	0x000002fd
    6104:	00000352 	.word	0x00000352
    6108:	000003a2 	.word	0x000003a2
    610c:	00000401 	.word	0x00000401
    6110:	000004bf 	.word	0x000004bf

00006114 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    6114:	b580      	push	{r7, lr}
    6116:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    6118:	4b2e      	ldr	r3, [pc, #184]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    611a:	2200      	movs	r2, #0
    611c:	825a      	strh	r2, [r3, #18]
    611e:	4b2d      	ldr	r3, [pc, #180]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6120:	8a5a      	ldrh	r2, [r3, #18]
    6122:	4b2c      	ldr	r3, [pc, #176]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6124:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    6126:	4b2b      	ldr	r3, [pc, #172]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6128:	220a      	movs	r2, #10
    612a:	829a      	strh	r2, [r3, #20]
    612c:	4b29      	ldr	r3, [pc, #164]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    612e:	8a9a      	ldrh	r2, [r3, #20]
    6130:	4b28      	ldr	r3, [pc, #160]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6132:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    6134:	4b27      	ldr	r3, [pc, #156]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6136:	2214      	movs	r2, #20
    6138:	82da      	strh	r2, [r3, #22]
    613a:	4b26      	ldr	r3, [pc, #152]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    613c:	8ada      	ldrh	r2, [r3, #22]
    613e:	4b25      	ldr	r3, [pc, #148]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6140:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    6142:	4b24      	ldr	r3, [pc, #144]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6144:	221e      	movs	r2, #30
    6146:	831a      	strh	r2, [r3, #24]
    6148:	4b22      	ldr	r3, [pc, #136]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    614a:	8b1a      	ldrh	r2, [r3, #24]
    614c:	4b21      	ldr	r3, [pc, #132]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    614e:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    6150:	4b20      	ldr	r3, [pc, #128]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6152:	222d      	movs	r2, #45	; 0x2d
    6154:	835a      	strh	r2, [r3, #26]
    6156:	4b1f      	ldr	r3, [pc, #124]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6158:	8b5a      	ldrh	r2, [r3, #26]
    615a:	4b1e      	ldr	r3, [pc, #120]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    615c:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    615e:	4b1d      	ldr	r3, [pc, #116]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6160:	2232      	movs	r2, #50	; 0x32
    6162:	839a      	strh	r2, [r3, #28]
    6164:	4b1b      	ldr	r3, [pc, #108]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6166:	8b9a      	ldrh	r2, [r3, #28]
    6168:	4b1a      	ldr	r3, [pc, #104]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    616a:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    616c:	4b19      	ldr	r3, [pc, #100]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    616e:	2237      	movs	r2, #55	; 0x37
    6170:	83da      	strh	r2, [r3, #30]
    6172:	4b18      	ldr	r3, [pc, #96]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6174:	8bda      	ldrh	r2, [r3, #30]
    6176:	4b17      	ldr	r3, [pc, #92]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6178:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    617a:	4b16      	ldr	r3, [pc, #88]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    617c:	223c      	movs	r2, #60	; 0x3c
    617e:	841a      	strh	r2, [r3, #32]
    6180:	4b14      	ldr	r3, [pc, #80]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6182:	8c1a      	ldrh	r2, [r3, #32]
    6184:	4b13      	ldr	r3, [pc, #76]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6186:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    6188:	4b12      	ldr	r3, [pc, #72]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    618a:	2241      	movs	r2, #65	; 0x41
    618c:	845a      	strh	r2, [r3, #34]	; 0x22
    618e:	4b11      	ldr	r3, [pc, #68]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6190:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    6192:	4b10      	ldr	r3, [pc, #64]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6194:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    6196:	4b0f      	ldr	r3, [pc, #60]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    6198:	2209      	movs	r2, #9
    619a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    619c:	4b0d      	ldr	r3, [pc, #52]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    619e:	2213      	movs	r2, #19
    61a0:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    61a2:	4b0c      	ldr	r3, [pc, #48]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    61a4:	221d      	movs	r2, #29
    61a6:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    61a8:	4b0a      	ldr	r3, [pc, #40]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    61aa:	222c      	movs	r2, #44	; 0x2c
    61ac:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    61ae:	4b09      	ldr	r3, [pc, #36]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    61b0:	2231      	movs	r2, #49	; 0x31
    61b2:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    61b4:	4b07      	ldr	r3, [pc, #28]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    61b6:	2236      	movs	r2, #54	; 0x36
    61b8:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    61ba:	4b06      	ldr	r3, [pc, #24]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    61bc:	223b      	movs	r2, #59	; 0x3b
    61be:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    61c0:	4b04      	ldr	r3, [pc, #16]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    61c2:	2240      	movs	r2, #64	; 0x40
    61c4:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    61c6:	4b03      	ldr	r3, [pc, #12]	; (61d4 <vTraceInitObjectHandleStack+0xc0>)
    61c8:	2245      	movs	r2, #69	; 0x45
    61ca:	869a      	strh	r2, [r3, #52]	; 0x34
}
    61cc:	46c0      	nop			; (mov r8, r8)
    61ce:	46bd      	mov	sp, r7
    61d0:	bd80      	pop	{r7, pc}
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	20000df4 	.word	0x20000df4

000061d8 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    61d8:	b580      	push	{r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
    61de:	0002      	movs	r2, r0
    61e0:	1dfb      	adds	r3, r7, #7
    61e2:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
    61e4:	1dfb      	adds	r3, r7, #7
    61e6:	781b      	ldrb	r3, [r3, #0]
    61e8:	2b08      	cmp	r3, #8
    61ea:	d816      	bhi.n	621a <pszTraceGetErrorNotEnoughHandles+0x42>
    61ec:	009a      	lsls	r2, r3, #2
    61ee:	4b0d      	ldr	r3, [pc, #52]	; (6224 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    61f0:	18d3      	adds	r3, r2, r3
    61f2:	681b      	ldr	r3, [r3, #0]
    61f4:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    61f6:	4b0c      	ldr	r3, [pc, #48]	; (6228 <pszTraceGetErrorNotEnoughHandles+0x50>)
    61f8:	e010      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    61fa:	4b0c      	ldr	r3, [pc, #48]	; (622c <pszTraceGetErrorNotEnoughHandles+0x54>)
    61fc:	e00e      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    61fe:	4b0c      	ldr	r3, [pc, #48]	; (6230 <pszTraceGetErrorNotEnoughHandles+0x58>)
    6200:	e00c      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    6202:	4b0c      	ldr	r3, [pc, #48]	; (6234 <pszTraceGetErrorNotEnoughHandles+0x5c>)
    6204:	e00a      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    6206:	4b0c      	ldr	r3, [pc, #48]	; (6238 <pszTraceGetErrorNotEnoughHandles+0x60>)
    6208:	e008      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    620a:	4b0c      	ldr	r3, [pc, #48]	; (623c <pszTraceGetErrorNotEnoughHandles+0x64>)
    620c:	e006      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    620e:	4b0c      	ldr	r3, [pc, #48]	; (6240 <pszTraceGetErrorNotEnoughHandles+0x68>)
    6210:	e004      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    6212:	4b0c      	ldr	r3, [pc, #48]	; (6244 <pszTraceGetErrorNotEnoughHandles+0x6c>)
    6214:	e002      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    6216:	4b0c      	ldr	r3, [pc, #48]	; (6248 <pszTraceGetErrorNotEnoughHandles+0x70>)
    6218:	e000      	b.n	621c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    621a:	4b0c      	ldr	r3, [pc, #48]	; (624c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
    621c:	0018      	movs	r0, r3
    621e:	46bd      	mov	sp, r7
    6220:	b002      	add	sp, #8
    6222:	bd80      	pop	{r7, pc}
    6224:	00025f6c 	.word	0x00025f6c
    6228:	00025c6c 	.word	0x00025c6c
    622c:	00025cb4 	.word	0x00025cb4
    6230:	00025cfc 	.word	0x00025cfc
    6234:	00025d50 	.word	0x00025d50
    6238:	00025d9c 	.word	0x00025d9c
    623c:	00025de8 	.word	0x00025de8
    6240:	00025e34 	.word	0x00025e34
    6244:	00025e88 	.word	0x00025e88
    6248:	00025ee0 	.word	0x00025ee0
    624c:	00025f3c 	.word	0x00025f3c

00006250 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
    6250:	b590      	push	{r4, r7, lr}
    6252:	b087      	sub	sp, #28
    6254:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
    6256:	2317      	movs	r3, #23
    6258:	18fb      	adds	r3, r7, r3
    625a:	2200      	movs	r2, #0
    625c:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
    625e:	4b36      	ldr	r3, [pc, #216]	; (6338 <uiTraceStart+0xe8>)
    6260:	681b      	ldr	r3, [r3, #0]
    6262:	2b00      	cmp	r3, #0
    6264:	d10b      	bne.n	627e <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    6266:	4b34      	ldr	r3, [pc, #208]	; (6338 <uiTraceStart+0xe8>)
    6268:	681b      	ldr	r3, [r3, #0]
    626a:	2b00      	cmp	r3, #0
    626c:	d105      	bne.n	627a <uiTraceStart+0x2a>
    626e:	4b33      	ldr	r3, [pc, #204]	; (633c <uiTraceStart+0xec>)
    6270:	0018      	movs	r0, r3
    6272:	4b33      	ldr	r3, [pc, #204]	; (6340 <uiTraceStart+0xf0>)
    6274:	4798      	blx	r3
    6276:	2300      	movs	r3, #0
    6278:	e059      	b.n	632e <uiTraceStart+0xde>
		return 0;
    627a:	2300      	movs	r3, #0
    627c:	e057      	b.n	632e <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
    627e:	4b2e      	ldr	r3, [pc, #184]	; (6338 <uiTraceStart+0xe8>)
    6280:	681b      	ldr	r3, [r3, #0]
    6282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6284:	2b01      	cmp	r3, #1
    6286:	d101      	bne.n	628c <uiTraceStart+0x3c>
		return 1; /* Already running */
    6288:	2301      	movs	r3, #1
    628a:	e050      	b.n	632e <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
    628c:	4b2d      	ldr	r3, [pc, #180]	; (6344 <uiTraceStart+0xf4>)
    628e:	681b      	ldr	r3, [r3, #0]
    6290:	2b00      	cmp	r3, #0
    6292:	d149      	bne.n	6328 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6294:	f3ef 8310 	mrs	r3, PRIMASK
    6298:	60bb      	str	r3, [r7, #8]
  return(result);
    629a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
    629c:	613b      	str	r3, [r7, #16]
    629e:	2301      	movs	r3, #1
    62a0:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    62a2:	68fb      	ldr	r3, [r7, #12]
    62a4:	f383 8810 	msr	PRIMASK, r3
    62a8:	4b27      	ldr	r3, [pc, #156]	; (6348 <uiTraceStart+0xf8>)
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	1c5a      	adds	r2, r3, #1
    62ae:	4b26      	ldr	r3, [pc, #152]	; (6348 <uiTraceStart+0xf8>)
    62b0:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    62b2:	4b21      	ldr	r3, [pc, #132]	; (6338 <uiTraceStart+0xe8>)
    62b4:	681b      	ldr	r3, [r3, #0]
    62b6:	2201      	movs	r2, #1
    62b8:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    62ba:	4b24      	ldr	r3, [pc, #144]	; (634c <uiTraceStart+0xfc>)
    62bc:	4798      	blx	r3
    62be:	0003      	movs	r3, r0
    62c0:	0018      	movs	r0, r3
    62c2:	4b23      	ldr	r3, [pc, #140]	; (6350 <uiTraceStart+0x100>)
    62c4:	4798      	blx	r3
    62c6:	0003      	movs	r3, r0
    62c8:	001a      	movs	r2, r3
    62ca:	2317      	movs	r3, #23
    62cc:	18fb      	adds	r3, r7, r3
    62ce:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
    62d0:	2317      	movs	r3, #23
    62d2:	18fb      	adds	r3, r7, r3
    62d4:	781b      	ldrb	r3, [r3, #0]
    62d6:	2b00      	cmp	r3, #0
    62d8:	d116      	bne.n	6308 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    62da:	2317      	movs	r3, #23
    62dc:	18fc      	adds	r4, r7, r3
    62de:	2003      	movs	r0, #3
    62e0:	4b1c      	ldr	r3, [pc, #112]	; (6354 <uiTraceStart+0x104>)
    62e2:	4798      	blx	r3
    62e4:	0003      	movs	r3, r0
    62e6:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    62e8:	4a1b      	ldr	r2, [pc, #108]	; (6358 <uiTraceStart+0x108>)
    62ea:	2317      	movs	r3, #23
    62ec:	18fb      	adds	r3, r7, r3
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	0019      	movs	r1, r3
    62f2:	2003      	movs	r0, #3
    62f4:	4b19      	ldr	r3, [pc, #100]	; (635c <uiTraceStart+0x10c>)
    62f6:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    62f8:	2317      	movs	r3, #23
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	2200      	movs	r2, #0
    6300:	0019      	movs	r1, r3
    6302:	2003      	movs	r0, #3
    6304:	4b16      	ldr	r3, [pc, #88]	; (6360 <uiTraceStart+0x110>)
    6306:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    6308:	2317      	movs	r3, #23
    630a:	18fb      	adds	r3, r7, r3
    630c:	781b      	ldrb	r3, [r3, #0]
    630e:	0018      	movs	r0, r3
    6310:	4b14      	ldr	r3, [pc, #80]	; (6364 <uiTraceStart+0x114>)
    6312:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    6314:	4b0c      	ldr	r3, [pc, #48]	; (6348 <uiTraceStart+0xf8>)
    6316:	681b      	ldr	r3, [r3, #0]
    6318:	1e5a      	subs	r2, r3, #1
    631a:	4b0b      	ldr	r3, [pc, #44]	; (6348 <uiTraceStart+0xf8>)
    631c:	601a      	str	r2, [r3, #0]
    631e:	693b      	ldr	r3, [r7, #16]
    6320:	607b      	str	r3, [r7, #4]
    6322:	687b      	ldr	r3, [r7, #4]
    6324:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
    6328:	4b03      	ldr	r3, [pc, #12]	; (6338 <uiTraceStart+0xe8>)
    632a:	681b      	ldr	r3, [r3, #0]
    632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    632e:	0018      	movs	r0, r3
    6330:	46bd      	mov	sp, r7
    6332:	b007      	add	sp, #28
    6334:	bd90      	pop	{r4, r7, pc}
    6336:	46c0      	nop			; (mov r8, r8)
    6338:	20000e84 	.word	0x20000e84
    633c:	00025f90 	.word	0x00025f90
    6340:	000074b9 	.word	0x000074b9
    6344:	20000de4 	.word	0x20000de4
    6348:	20000ddc 	.word	0x20000ddc
    634c:	00005eb9 	.word	0x00005eb9
    6350:	00005bfd 	.word	0x00005bfd
    6354:	0000719d 	.word	0x0000719d
    6358:	00025fd4 	.word	0x00025fd4
    635c:	000073cd 	.word	0x000073cd
    6360:	00006b31 	.word	0x00006b31
    6364:	00006a19 	.word	0x00006a19

00006368 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
    6368:	b580      	push	{r7, lr}
    636a:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
    636c:	4b02      	ldr	r3, [pc, #8]	; (6378 <vTraceStart+0x10>)
    636e:	4798      	blx	r3
}
    6370:	46c0      	nop			; (mov r8, r8)
    6372:	46bd      	mov	sp, r7
    6374:	bd80      	pop	{r7, pc}
    6376:	46c0      	nop			; (mov r8, r8)
    6378:	00006251 	.word	0x00006251

0000637c <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
    637c:	b580      	push	{r7, lr}
    637e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    6380:	4b08      	ldr	r3, [pc, #32]	; (63a4 <vTraceStop+0x28>)
    6382:	681b      	ldr	r3, [r3, #0]
    6384:	2b00      	cmp	r3, #0
    6386:	d003      	beq.n	6390 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
    6388:	4b06      	ldr	r3, [pc, #24]	; (63a4 <vTraceStop+0x28>)
    638a:	681b      	ldr	r3, [r3, #0]
    638c:	2200      	movs	r2, #0
    638e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    6390:	4b05      	ldr	r3, [pc, #20]	; (63a8 <vTraceStop+0x2c>)
    6392:	681b      	ldr	r3, [r3, #0]
    6394:	2b00      	cmp	r3, #0
    6396:	d002      	beq.n	639e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    6398:	4b03      	ldr	r3, [pc, #12]	; (63a8 <vTraceStop+0x2c>)
    639a:	681b      	ldr	r3, [r3, #0]
    639c:	4798      	blx	r3
	}
}
    639e:	46c0      	nop			; (mov r8, r8)
    63a0:	46bd      	mov	sp, r7
    63a2:	bd80      	pop	{r7, pc}
    63a4:	20000e84 	.word	0x20000e84
    63a8:	20000dec 	.word	0x20000dec

000063ac <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
    63ac:	b580      	push	{r7, lr}
    63ae:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    63b0:	4b05      	ldr	r3, [pc, #20]	; (63c8 <xTraceIsRecordingEnabled+0x1c>)
    63b2:	681b      	ldr	r3, [r3, #0]
    63b4:	2b00      	cmp	r3, #0
    63b6:	d003      	beq.n	63c0 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
    63b8:	4b03      	ldr	r3, [pc, #12]	; (63c8 <xTraceIsRecordingEnabled+0x1c>)
    63ba:	681b      	ldr	r3, [r3, #0]
    63bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    63be:	e000      	b.n	63c2 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
    63c0:	2300      	movs	r3, #0
	}
}
    63c2:	0018      	movs	r0, r3
    63c4:	46bd      	mov	sp, r7
    63c6:	bd80      	pop	{r7, pc}
    63c8:	20000e84 	.word	0x20000e84

000063cc <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
    63cc:	b590      	push	{r4, r7, lr}
    63ce:	b089      	sub	sp, #36	; 0x24
    63d0:	af00      	add	r7, sp, #0
    63d2:	0002      	movs	r2, r0
    63d4:	1dfb      	adds	r3, r7, #7
    63d6:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    63d8:	1dfb      	adds	r3, r7, #7
    63da:	781b      	ldrb	r3, [r3, #0]
    63dc:	2b00      	cmp	r3, #0
    63de:	d057      	beq.n	6490 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    63e0:	4b2e      	ldr	r3, [pc, #184]	; (649c <prvTraceStoreTaskReady+0xd0>)
    63e2:	681b      	ldr	r3, [r3, #0]
    63e4:	2b00      	cmp	r3, #0
    63e6:	d055      	beq.n	6494 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    63e8:	1dfb      	adds	r3, r7, #7
    63ea:	781b      	ldrb	r3, [r3, #0]
    63ec:	2b0f      	cmp	r3, #15
    63ee:	d904      	bls.n	63fa <prvTraceStoreTaskReady+0x2e>
    63f0:	4b2b      	ldr	r3, [pc, #172]	; (64a0 <prvTraceStoreTaskReady+0xd4>)
    63f2:	0018      	movs	r0, r3
    63f4:	4b2b      	ldr	r3, [pc, #172]	; (64a4 <prvTraceStoreTaskReady+0xd8>)
    63f6:	4798      	blx	r3
    63f8:	e04d      	b.n	6496 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
    63fa:	4b2b      	ldr	r3, [pc, #172]	; (64a8 <prvTraceStoreTaskReady+0xdc>)
    63fc:	681b      	ldr	r3, [r3, #0]
    63fe:	2b00      	cmp	r3, #0
    6400:	d004      	beq.n	640c <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    6402:	4b2a      	ldr	r3, [pc, #168]	; (64ac <prvTraceStoreTaskReady+0xe0>)
    6404:	0018      	movs	r0, r3
    6406:	4b27      	ldr	r3, [pc, #156]	; (64a4 <prvTraceStoreTaskReady+0xd8>)
    6408:	4798      	blx	r3
		return;
    640a:	e044      	b.n	6496 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    640c:	f3ef 8310 	mrs	r3, PRIMASK
    6410:	60fb      	str	r3, [r7, #12]
  return(result);
    6412:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
    6414:	61fb      	str	r3, [r7, #28]
    6416:	2301      	movs	r3, #1
    6418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    641a:	693b      	ldr	r3, [r7, #16]
    641c:	f383 8810 	msr	PRIMASK, r3
    6420:	4b21      	ldr	r3, [pc, #132]	; (64a8 <prvTraceStoreTaskReady+0xdc>)
    6422:	681b      	ldr	r3, [r3, #0]
    6424:	1c5a      	adds	r2, r3, #1
    6426:	4b20      	ldr	r3, [pc, #128]	; (64a8 <prvTraceStoreTaskReady+0xdc>)
    6428:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    642a:	4b21      	ldr	r3, [pc, #132]	; (64b0 <prvTraceStoreTaskReady+0xe4>)
    642c:	681b      	ldr	r3, [r3, #0]
    642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6430:	2b00      	cmp	r3, #0
    6432:	d022      	beq.n	647a <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    6434:	231a      	movs	r3, #26
    6436:	18fc      	adds	r4, r7, r3
    6438:	4b1e      	ldr	r3, [pc, #120]	; (64b4 <prvTraceStoreTaskReady+0xe8>)
    643a:	0018      	movs	r0, r3
    643c:	4b1e      	ldr	r3, [pc, #120]	; (64b8 <prvTraceStoreTaskReady+0xec>)
    643e:	4798      	blx	r3
    6440:	0003      	movs	r3, r0
    6442:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
    6444:	2319      	movs	r3, #25
    6446:	18fb      	adds	r3, r7, r3
    6448:	1dfa      	adds	r2, r7, #7
    644a:	7812      	ldrb	r2, [r2, #0]
    644c:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    644e:	4b1b      	ldr	r3, [pc, #108]	; (64bc <prvTraceStoreTaskReady+0xf0>)
    6450:	4798      	blx	r3
    6452:	0003      	movs	r3, r0
    6454:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
    6456:	697b      	ldr	r3, [r7, #20]
    6458:	2b00      	cmp	r3, #0
    645a:	d00e      	beq.n	647a <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
    645c:	697b      	ldr	r3, [r7, #20]
    645e:	2202      	movs	r2, #2
    6460:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
    6462:	697b      	ldr	r3, [r7, #20]
    6464:	221a      	movs	r2, #26
    6466:	18ba      	adds	r2, r7, r2
    6468:	8812      	ldrh	r2, [r2, #0]
    646a:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
    646c:	697b      	ldr	r3, [r7, #20]
    646e:	2219      	movs	r2, #25
    6470:	18ba      	adds	r2, r7, r2
    6472:	7812      	ldrb	r2, [r2, #0]
    6474:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    6476:	4b12      	ldr	r3, [pc, #72]	; (64c0 <prvTraceStoreTaskReady+0xf4>)
    6478:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    647a:	4b0b      	ldr	r3, [pc, #44]	; (64a8 <prvTraceStoreTaskReady+0xdc>)
    647c:	681b      	ldr	r3, [r3, #0]
    647e:	1e5a      	subs	r2, r3, #1
    6480:	4b09      	ldr	r3, [pc, #36]	; (64a8 <prvTraceStoreTaskReady+0xdc>)
    6482:	601a      	str	r2, [r3, #0]
    6484:	69fb      	ldr	r3, [r7, #28]
    6486:	60bb      	str	r3, [r7, #8]
    6488:	68bb      	ldr	r3, [r7, #8]
    648a:	f383 8810 	msr	PRIMASK, r3
    648e:	e002      	b.n	6496 <prvTraceStoreTaskReady+0xca>
		return;
    6490:	46c0      	nop			; (mov r8, r8)
    6492:	e000      	b.n	6496 <prvTraceStoreTaskReady+0xca>
		return;
    6494:	46c0      	nop			; (mov r8, r8)
}
    6496:	46bd      	mov	sp, r7
    6498:	b009      	add	sp, #36	; 0x24
    649a:	bd90      	pop	{r4, r7, pc}
    649c:	2000010c 	.word	0x2000010c
    64a0:	0002633c 	.word	0x0002633c
    64a4:	000074b9 	.word	0x000074b9
    64a8:	20000ddc 	.word	0x20000ddc
    64ac:	0002637c 	.word	0x0002637c
    64b0:	20000e84 	.word	0x20000e84
    64b4:	0000ffff 	.word	0x0000ffff
    64b8:	000076cd 	.word	0x000076cd
    64bc:	00007071 	.word	0x00007071
    64c0:	00007675 	.word	0x00007675

000064c4 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
    64c4:	b580      	push	{r7, lr}
    64c6:	b08e      	sub	sp, #56	; 0x38
    64c8:	af00      	add	r7, sp, #0
    64ca:	60f8      	str	r0, [r7, #12]
    64cc:	60b9      	str	r1, [r7, #8]
    64ce:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
    64d0:	4b48      	ldr	r3, [pc, #288]	; (65f4 <vTraceStoreMemMangEvent+0x130>)
    64d2:	681b      	ldr	r3, [r3, #0]
    64d4:	2b00      	cmp	r3, #0
    64d6:	d100      	bne.n	64da <vTraceStoreMemMangEvent+0x16>
    64d8:	e088      	b.n	65ec <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	2b00      	cmp	r3, #0
    64de:	da03      	bge.n	64e8 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
    64e0:	687b      	ldr	r3, [r7, #4]
    64e2:	425b      	negs	r3, r3
    64e4:	637b      	str	r3, [r7, #52]	; 0x34
    64e6:	e001      	b.n	64ec <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    64ec:	f3ef 8310 	mrs	r3, PRIMASK
    64f0:	61bb      	str	r3, [r7, #24]
  return(result);
    64f2:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
    64f4:	633b      	str	r3, [r7, #48]	; 0x30
    64f6:	2301      	movs	r3, #1
    64f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    64fa:	69fb      	ldr	r3, [r7, #28]
    64fc:	f383 8810 	msr	PRIMASK, r3
    6500:	4b3d      	ldr	r3, [pc, #244]	; (65f8 <vTraceStoreMemMangEvent+0x134>)
    6502:	681b      	ldr	r3, [r3, #0]
    6504:	1c5a      	adds	r2, r3, #1
    6506:	4b3c      	ldr	r3, [pc, #240]	; (65f8 <vTraceStoreMemMangEvent+0x134>)
    6508:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
    650a:	68bb      	ldr	r3, [r7, #8]
    650c:	2b00      	cmp	r3, #0
    650e:	d005      	beq.n	651c <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
    6510:	4b3a      	ldr	r3, [pc, #232]	; (65fc <vTraceStoreMemMangEvent+0x138>)
    6512:	681a      	ldr	r2, [r3, #0]
    6514:	687b      	ldr	r3, [r7, #4]
    6516:	18d2      	adds	r2, r2, r3
    6518:	4b38      	ldr	r3, [pc, #224]	; (65fc <vTraceStoreMemMangEvent+0x138>)
    651a:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
    651c:	4b35      	ldr	r3, [pc, #212]	; (65f4 <vTraceStoreMemMangEvent+0x130>)
    651e:	681b      	ldr	r3, [r3, #0]
    6520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6522:	2b00      	cmp	r3, #0
    6524:	d057      	beq.n	65d6 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    6526:	20ff      	movs	r0, #255	; 0xff
    6528:	4b35      	ldr	r3, [pc, #212]	; (6600 <vTraceStoreMemMangEvent+0x13c>)
    652a:	4798      	blx	r3
    652c:	0003      	movs	r3, r0
    652e:	001a      	movs	r2, r3
    6530:	232f      	movs	r3, #47	; 0x2f
    6532:	18fb      	adds	r3, r7, r3
    6534:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    6536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6538:	4a32      	ldr	r2, [pc, #200]	; (6604 <vTraceStoreMemMangEvent+0x140>)
    653a:	0019      	movs	r1, r3
    653c:	0010      	movs	r0, r2
    653e:	4b32      	ldr	r3, [pc, #200]	; (6608 <vTraceStoreMemMangEvent+0x144>)
    6540:	4798      	blx	r3
    6542:	0002      	movs	r2, r0
    6544:	232c      	movs	r3, #44	; 0x2c
    6546:	18fb      	adds	r3, r7, r3
    6548:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    654a:	4b30      	ldr	r3, [pc, #192]	; (660c <vTraceStoreMemMangEvent+0x148>)
    654c:	4798      	blx	r3
    654e:	0003      	movs	r3, r0
    6550:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
    6552:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6554:	2b00      	cmp	r3, #0
    6556:	d03e      	beq.n	65d6 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
    6558:	6abb      	ldr	r3, [r7, #40]	; 0x28
    655a:	222f      	movs	r2, #47	; 0x2f
    655c:	18ba      	adds	r2, r7, r2
    655e:	7812      	ldrb	r2, [r2, #0]
    6560:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    6562:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6564:	2200      	movs	r2, #0
    6566:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
    6568:	6abb      	ldr	r3, [r7, #40]	; 0x28
    656a:	222c      	movs	r2, #44	; 0x2c
    656c:	18ba      	adds	r2, r7, r2
    656e:	8812      	ldrh	r2, [r2, #0]
    6570:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    6572:	4b27      	ldr	r3, [pc, #156]	; (6610 <vTraceStoreMemMangEvent+0x14c>)
    6574:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    6576:	68bb      	ldr	r3, [r7, #8]
    6578:	4a22      	ldr	r2, [pc, #136]	; (6604 <vTraceStoreMemMangEvent+0x140>)
    657a:	0019      	movs	r1, r3
    657c:	0010      	movs	r0, r2
    657e:	4b22      	ldr	r3, [pc, #136]	; (6608 <vTraceStoreMemMangEvent+0x144>)
    6580:	4798      	blx	r3
    6582:	0002      	movs	r2, r0
    6584:	2326      	movs	r3, #38	; 0x26
    6586:	18fb      	adds	r3, r7, r3
    6588:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
    658a:	2325      	movs	r3, #37	; 0x25
    658c:	18fb      	adds	r3, r7, r3
    658e:	2200      	movs	r2, #0
    6590:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    6592:	4b1e      	ldr	r3, [pc, #120]	; (660c <vTraceStoreMemMangEvent+0x148>)
    6594:	4798      	blx	r3
    6596:	0003      	movs	r3, r0
    6598:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
    659a:	6a3b      	ldr	r3, [r7, #32]
    659c:	2b00      	cmp	r3, #0
    659e:	d01a      	beq.n	65d6 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
    65a0:	6a3b      	ldr	r3, [r7, #32]
    65a2:	2226      	movs	r2, #38	; 0x26
    65a4:	18ba      	adds	r2, r7, r2
    65a6:	8812      	ldrh	r2, [r2, #0]
    65a8:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
    65aa:	6a3b      	ldr	r3, [r7, #32]
    65ac:	2225      	movs	r2, #37	; 0x25
    65ae:	18ba      	adds	r2, r7, r2
    65b0:	7812      	ldrb	r2, [r2, #0]
    65b2:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    65b4:	68fb      	ldr	r3, [r7, #12]
    65b6:	b2db      	uxtb	r3, r3
    65b8:	3301      	adds	r3, #1
    65ba:	b2da      	uxtb	r2, r3
    65bc:	6a3b      	ldr	r3, [r7, #32]
    65be:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
    65c0:	68fb      	ldr	r3, [r7, #12]
    65c2:	b2da      	uxtb	r2, r3
    65c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    65c6:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
    65c8:	4b11      	ldr	r3, [pc, #68]	; (6610 <vTraceStoreMemMangEvent+0x14c>)
    65ca:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    65cc:	4b09      	ldr	r3, [pc, #36]	; (65f4 <vTraceStoreMemMangEvent+0x130>)
    65ce:	681b      	ldr	r3, [r3, #0]
    65d0:	4a0a      	ldr	r2, [pc, #40]	; (65fc <vTraceStoreMemMangEvent+0x138>)
    65d2:	6812      	ldr	r2, [r2, #0]
    65d4:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
    65d6:	4b08      	ldr	r3, [pc, #32]	; (65f8 <vTraceStoreMemMangEvent+0x134>)
    65d8:	681b      	ldr	r3, [r3, #0]
    65da:	1e5a      	subs	r2, r3, #1
    65dc:	4b06      	ldr	r3, [pc, #24]	; (65f8 <vTraceStoreMemMangEvent+0x134>)
    65de:	601a      	str	r2, [r3, #0]
    65e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    65e2:	617b      	str	r3, [r7, #20]
    65e4:	697b      	ldr	r3, [r7, #20]
    65e6:	f383 8810 	msr	PRIMASK, r3
    65ea:	e000      	b.n	65ee <vTraceStoreMemMangEvent+0x12a>
		return;
    65ec:	46c0      	nop			; (mov r8, r8)
}
    65ee:	46bd      	mov	sp, r7
    65f0:	b00e      	add	sp, #56	; 0x38
    65f2:	bd80      	pop	{r7, pc}
    65f4:	20000e84 	.word	0x20000e84
    65f8:	20000ddc 	.word	0x20000ddc
    65fc:	20000df0 	.word	0x20000df0
    6600:	000076cd 	.word	0x000076cd
    6604:	0000ffff 	.word	0x0000ffff
    6608:	00006891 	.word	0x00006891
    660c:	00007071 	.word	0x00007071
    6610:	00007675 	.word	0x00007675

00006614 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    6614:	b590      	push	{r4, r7, lr}
    6616:	b08b      	sub	sp, #44	; 0x2c
    6618:	af00      	add	r7, sp, #0
    661a:	60f8      	str	r0, [r7, #12]
    661c:	607a      	str	r2, [r7, #4]
    661e:	230b      	movs	r3, #11
    6620:	18fb      	adds	r3, r7, r3
    6622:	1c0a      	adds	r2, r1, #0
    6624:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    6626:	68fb      	ldr	r3, [r7, #12]
    6628:	2bfe      	cmp	r3, #254	; 0xfe
    662a:	d904      	bls.n	6636 <prvTraceStoreKernelCall+0x22>
    662c:	4b39      	ldr	r3, [pc, #228]	; (6714 <prvTraceStoreKernelCall+0x100>)
    662e:	0018      	movs	r0, r3
    6630:	4b39      	ldr	r3, [pc, #228]	; (6718 <prvTraceStoreKernelCall+0x104>)
    6632:	4798      	blx	r3
    6634:	e06b      	b.n	670e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    6636:	230b      	movs	r3, #11
    6638:	18fb      	adds	r3, r7, r3
    663a:	781b      	ldrb	r3, [r3, #0]
    663c:	2b08      	cmp	r3, #8
    663e:	d904      	bls.n	664a <prvTraceStoreKernelCall+0x36>
    6640:	4b36      	ldr	r3, [pc, #216]	; (671c <prvTraceStoreKernelCall+0x108>)
    6642:	0018      	movs	r0, r3
    6644:	4b34      	ldr	r3, [pc, #208]	; (6718 <prvTraceStoreKernelCall+0x104>)
    6646:	4798      	blx	r3
    6648:	e061      	b.n	670e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    664a:	4b35      	ldr	r3, [pc, #212]	; (6720 <prvTraceStoreKernelCall+0x10c>)
    664c:	681a      	ldr	r2, [r3, #0]
    664e:	230b      	movs	r3, #11
    6650:	18fb      	adds	r3, r7, r3
    6652:	781b      	ldrb	r3, [r3, #0]
    6654:	2164      	movs	r1, #100	; 0x64
    6656:	18d3      	adds	r3, r2, r3
    6658:	185b      	adds	r3, r3, r1
    665a:	781b      	ldrb	r3, [r3, #0]
    665c:	001a      	movs	r2, r3
    665e:	687b      	ldr	r3, [r7, #4]
    6660:	429a      	cmp	r2, r3
    6662:	d204      	bcs.n	666e <prvTraceStoreKernelCall+0x5a>
    6664:	4b2f      	ldr	r3, [pc, #188]	; (6724 <prvTraceStoreKernelCall+0x110>)
    6666:	0018      	movs	r0, r3
    6668:	4b2b      	ldr	r3, [pc, #172]	; (6718 <prvTraceStoreKernelCall+0x104>)
    666a:	4798      	blx	r3
    666c:	e04f      	b.n	670e <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
    666e:	4b2e      	ldr	r3, [pc, #184]	; (6728 <prvTraceStoreKernelCall+0x114>)
    6670:	681b      	ldr	r3, [r3, #0]
    6672:	2b00      	cmp	r3, #0
    6674:	d004      	beq.n	6680 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    6676:	4b2d      	ldr	r3, [pc, #180]	; (672c <prvTraceStoreKernelCall+0x118>)
    6678:	0018      	movs	r0, r3
    667a:	4b27      	ldr	r3, [pc, #156]	; (6718 <prvTraceStoreKernelCall+0x104>)
    667c:	4798      	blx	r3
		return;
    667e:	e046      	b.n	670e <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
    6680:	4b2b      	ldr	r3, [pc, #172]	; (6730 <prvTraceStoreKernelCall+0x11c>)
    6682:	781b      	ldrb	r3, [r3, #0]
    6684:	2b00      	cmp	r3, #0
    6686:	d041      	beq.n	670c <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6688:	f3ef 8310 	mrs	r3, PRIMASK
    668c:	617b      	str	r3, [r7, #20]
  return(result);
    668e:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    6690:	627b      	str	r3, [r7, #36]	; 0x24
    6692:	2301      	movs	r3, #1
    6694:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    6696:	69bb      	ldr	r3, [r7, #24]
    6698:	f383 8810 	msr	PRIMASK, r3
    669c:	4b22      	ldr	r3, [pc, #136]	; (6728 <prvTraceStoreKernelCall+0x114>)
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	1c5a      	adds	r2, r3, #1
    66a2:	4b21      	ldr	r3, [pc, #132]	; (6728 <prvTraceStoreKernelCall+0x114>)
    66a4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    66a6:	4b1e      	ldr	r3, [pc, #120]	; (6720 <prvTraceStoreKernelCall+0x10c>)
    66a8:	681b      	ldr	r3, [r3, #0]
    66aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    66ac:	2b00      	cmp	r3, #0
    66ae:	d022      	beq.n	66f6 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    66b0:	2322      	movs	r3, #34	; 0x22
    66b2:	18fc      	adds	r4, r7, r3
    66b4:	4b1f      	ldr	r3, [pc, #124]	; (6734 <prvTraceStoreKernelCall+0x120>)
    66b6:	0018      	movs	r0, r3
    66b8:	4b1f      	ldr	r3, [pc, #124]	; (6738 <prvTraceStoreKernelCall+0x124>)
    66ba:	4798      	blx	r3
    66bc:	0003      	movs	r3, r0
    66be:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    66c0:	2321      	movs	r3, #33	; 0x21
    66c2:	18fb      	adds	r3, r7, r3
    66c4:	687a      	ldr	r2, [r7, #4]
    66c6:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    66c8:	4b1c      	ldr	r3, [pc, #112]	; (673c <prvTraceStoreKernelCall+0x128>)
    66ca:	4798      	blx	r3
    66cc:	0003      	movs	r3, r0
    66ce:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    66d0:	69fb      	ldr	r3, [r7, #28]
    66d2:	2b00      	cmp	r3, #0
    66d4:	d00f      	beq.n	66f6 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
    66d6:	69fb      	ldr	r3, [r7, #28]
    66d8:	2222      	movs	r2, #34	; 0x22
    66da:	18ba      	adds	r2, r7, r2
    66dc:	8812      	ldrh	r2, [r2, #0]
    66de:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
    66e0:	68fb      	ldr	r3, [r7, #12]
    66e2:	b2da      	uxtb	r2, r3
    66e4:	69fb      	ldr	r3, [r7, #28]
    66e6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    66e8:	69fb      	ldr	r3, [r7, #28]
    66ea:	2221      	movs	r2, #33	; 0x21
    66ec:	18ba      	adds	r2, r7, r2
    66ee:	7812      	ldrb	r2, [r2, #0]
    66f0:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    66f2:	4b13      	ldr	r3, [pc, #76]	; (6740 <prvTraceStoreKernelCall+0x12c>)
    66f4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    66f6:	4b0c      	ldr	r3, [pc, #48]	; (6728 <prvTraceStoreKernelCall+0x114>)
    66f8:	681b      	ldr	r3, [r3, #0]
    66fa:	1e5a      	subs	r2, r3, #1
    66fc:	4b0a      	ldr	r3, [pc, #40]	; (6728 <prvTraceStoreKernelCall+0x114>)
    66fe:	601a      	str	r2, [r3, #0]
    6700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6702:	613b      	str	r3, [r7, #16]
    6704:	693b      	ldr	r3, [r7, #16]
    6706:	f383 8810 	msr	PRIMASK, r3
    670a:	e000      	b.n	670e <prvTraceStoreKernelCall+0xfa>
		return;
    670c:	46c0      	nop			; (mov r8, r8)
}
    670e:	46bd      	mov	sp, r7
    6710:	b00b      	add	sp, #44	; 0x2c
    6712:	bd90      	pop	{r4, r7, pc}
    6714:	000263ec 	.word	0x000263ec
    6718:	000074b9 	.word	0x000074b9
    671c:	00026424 	.word	0x00026424
    6720:	20000e84 	.word	0x20000e84
    6724:	0002646c 	.word	0x0002646c
    6728:	20000ddc 	.word	0x20000ddc
    672c:	000264b4 	.word	0x000264b4
    6730:	20000de8 	.word	0x20000de8
    6734:	0000ffff 	.word	0x0000ffff
    6738:	000076cd 	.word	0x000076cd
    673c:	00007071 	.word	0x00007071
    6740:	00007675 	.word	0x00007675

00006744 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    6744:	b580      	push	{r7, lr}
    6746:	b08a      	sub	sp, #40	; 0x28
    6748:	af00      	add	r7, sp, #0
    674a:	60f8      	str	r0, [r7, #12]
    674c:	607a      	str	r2, [r7, #4]
    674e:	603b      	str	r3, [r7, #0]
    6750:	230b      	movs	r3, #11
    6752:	18fb      	adds	r3, r7, r3
    6754:	1c0a      	adds	r2, r1, #0
    6756:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    6758:	68fb      	ldr	r3, [r7, #12]
    675a:	2bfe      	cmp	r3, #254	; 0xfe
    675c:	d904      	bls.n	6768 <prvTraceStoreKernelCallWithParam+0x24>
    675e:	4b40      	ldr	r3, [pc, #256]	; (6860 <prvTraceStoreKernelCallWithParam+0x11c>)
    6760:	0018      	movs	r0, r3
    6762:	4b40      	ldr	r3, [pc, #256]	; (6864 <prvTraceStoreKernelCallWithParam+0x120>)
    6764:	4798      	blx	r3
    6766:	e077      	b.n	6858 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    6768:	230b      	movs	r3, #11
    676a:	18fb      	adds	r3, r7, r3
    676c:	781b      	ldrb	r3, [r3, #0]
    676e:	2b08      	cmp	r3, #8
    6770:	d904      	bls.n	677c <prvTraceStoreKernelCallWithParam+0x38>
    6772:	4b3d      	ldr	r3, [pc, #244]	; (6868 <prvTraceStoreKernelCallWithParam+0x124>)
    6774:	0018      	movs	r0, r3
    6776:	4b3b      	ldr	r3, [pc, #236]	; (6864 <prvTraceStoreKernelCallWithParam+0x120>)
    6778:	4798      	blx	r3
    677a:	e06d      	b.n	6858 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    677c:	4b3b      	ldr	r3, [pc, #236]	; (686c <prvTraceStoreKernelCallWithParam+0x128>)
    677e:	681a      	ldr	r2, [r3, #0]
    6780:	230b      	movs	r3, #11
    6782:	18fb      	adds	r3, r7, r3
    6784:	781b      	ldrb	r3, [r3, #0]
    6786:	2164      	movs	r1, #100	; 0x64
    6788:	18d3      	adds	r3, r2, r3
    678a:	185b      	adds	r3, r3, r1
    678c:	781b      	ldrb	r3, [r3, #0]
    678e:	001a      	movs	r2, r3
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	429a      	cmp	r2, r3
    6794:	d204      	bcs.n	67a0 <prvTraceStoreKernelCallWithParam+0x5c>
    6796:	4b36      	ldr	r3, [pc, #216]	; (6870 <prvTraceStoreKernelCallWithParam+0x12c>)
    6798:	0018      	movs	r0, r3
    679a:	4b32      	ldr	r3, [pc, #200]	; (6864 <prvTraceStoreKernelCallWithParam+0x120>)
    679c:	4798      	blx	r3
    679e:	e05b      	b.n	6858 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
    67a0:	4b34      	ldr	r3, [pc, #208]	; (6874 <prvTraceStoreKernelCallWithParam+0x130>)
    67a2:	681b      	ldr	r3, [r3, #0]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d004      	beq.n	67b2 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    67a8:	4b33      	ldr	r3, [pc, #204]	; (6878 <prvTraceStoreKernelCallWithParam+0x134>)
    67aa:	0018      	movs	r0, r3
    67ac:	4b2d      	ldr	r3, [pc, #180]	; (6864 <prvTraceStoreKernelCallWithParam+0x120>)
    67ae:	4798      	blx	r3
		return;
    67b0:	e052      	b.n	6858 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    67b2:	f3ef 8310 	mrs	r3, PRIMASK
    67b6:	617b      	str	r3, [r7, #20]
  return(result);
    67b8:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
    67ba:	627b      	str	r3, [r7, #36]	; 0x24
    67bc:	2301      	movs	r3, #1
    67be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    67c0:	69bb      	ldr	r3, [r7, #24]
    67c2:	f383 8810 	msr	PRIMASK, r3
    67c6:	4b2b      	ldr	r3, [pc, #172]	; (6874 <prvTraceStoreKernelCallWithParam+0x130>)
    67c8:	681b      	ldr	r3, [r3, #0]
    67ca:	1c5a      	adds	r2, r3, #1
    67cc:	4b29      	ldr	r3, [pc, #164]	; (6874 <prvTraceStoreKernelCallWithParam+0x130>)
    67ce:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    67d0:	4b26      	ldr	r3, [pc, #152]	; (686c <prvTraceStoreKernelCallWithParam+0x128>)
    67d2:	681b      	ldr	r3, [r3, #0]
    67d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    67d6:	2b00      	cmp	r3, #0
    67d8:	d034      	beq.n	6844 <prvTraceStoreKernelCallWithParam+0x100>
    67da:	4b28      	ldr	r3, [pc, #160]	; (687c <prvTraceStoreKernelCallWithParam+0x138>)
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	2b00      	cmp	r3, #0
    67e0:	d030      	beq.n	6844 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    67e2:	20ff      	movs	r0, #255	; 0xff
    67e4:	4b26      	ldr	r3, [pc, #152]	; (6880 <prvTraceStoreKernelCallWithParam+0x13c>)
    67e6:	4798      	blx	r3
    67e8:	0003      	movs	r3, r0
    67ea:	001a      	movs	r2, r3
    67ec:	2323      	movs	r3, #35	; 0x23
    67ee:	18fb      	adds	r3, r7, r3
    67f0:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    67f2:	683b      	ldr	r3, [r7, #0]
    67f4:	0019      	movs	r1, r3
    67f6:	20ff      	movs	r0, #255	; 0xff
    67f8:	4b22      	ldr	r3, [pc, #136]	; (6884 <prvTraceStoreKernelCallWithParam+0x140>)
    67fa:	4798      	blx	r3
    67fc:	0002      	movs	r2, r0
    67fe:	2322      	movs	r3, #34	; 0x22
    6800:	18fb      	adds	r3, r7, r3
    6802:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    6804:	2321      	movs	r3, #33	; 0x21
    6806:	18fb      	adds	r3, r7, r3
    6808:	687a      	ldr	r2, [r7, #4]
    680a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    680c:	4b1e      	ldr	r3, [pc, #120]	; (6888 <prvTraceStoreKernelCallWithParam+0x144>)
    680e:	4798      	blx	r3
    6810:	0003      	movs	r3, r0
    6812:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    6814:	69fb      	ldr	r3, [r7, #28]
    6816:	2b00      	cmp	r3, #0
    6818:	d014      	beq.n	6844 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
    681a:	69fb      	ldr	r3, [r7, #28]
    681c:	2223      	movs	r2, #35	; 0x23
    681e:	18ba      	adds	r2, r7, r2
    6820:	7812      	ldrb	r2, [r2, #0]
    6822:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
    6824:	68fb      	ldr	r3, [r7, #12]
    6826:	b2da      	uxtb	r2, r3
    6828:	69fb      	ldr	r3, [r7, #28]
    682a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    682c:	69fb      	ldr	r3, [r7, #28]
    682e:	2221      	movs	r2, #33	; 0x21
    6830:	18ba      	adds	r2, r7, r2
    6832:	7812      	ldrb	r2, [r2, #0]
    6834:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
    6836:	69fb      	ldr	r3, [r7, #28]
    6838:	2222      	movs	r2, #34	; 0x22
    683a:	18ba      	adds	r2, r7, r2
    683c:	7812      	ldrb	r2, [r2, #0]
    683e:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
    6840:	4b12      	ldr	r3, [pc, #72]	; (688c <prvTraceStoreKernelCallWithParam+0x148>)
    6842:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    6844:	4b0b      	ldr	r3, [pc, #44]	; (6874 <prvTraceStoreKernelCallWithParam+0x130>)
    6846:	681b      	ldr	r3, [r3, #0]
    6848:	1e5a      	subs	r2, r3, #1
    684a:	4b0a      	ldr	r3, [pc, #40]	; (6874 <prvTraceStoreKernelCallWithParam+0x130>)
    684c:	601a      	str	r2, [r3, #0]
    684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6850:	613b      	str	r3, [r7, #16]
    6852:	693b      	ldr	r3, [r7, #16]
    6854:	f383 8810 	msr	PRIMASK, r3
}
    6858:	46bd      	mov	sp, r7
    685a:	b00a      	add	sp, #40	; 0x28
    685c:	bd80      	pop	{r7, pc}
    685e:	46c0      	nop			; (mov r8, r8)
    6860:	000264ec 	.word	0x000264ec
    6864:	000074b9 	.word	0x000074b9
    6868:	0002652c 	.word	0x0002652c
    686c:	20000e84 	.word	0x20000e84
    6870:	0002657c 	.word	0x0002657c
    6874:	20000ddc 	.word	0x20000ddc
    6878:	000265cc 	.word	0x000265cc
    687c:	20000de8 	.word	0x20000de8
    6880:	000076cd 	.word	0x000076cd
    6884:	00006891 	.word	0x00006891
    6888:	00007071 	.word	0x00007071
    688c:	00007675 	.word	0x00007675

00006890 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
    6890:	b580      	push	{r7, lr}
    6892:	b084      	sub	sp, #16
    6894:	af00      	add	r7, sp, #0
    6896:	6078      	str	r0, [r7, #4]
    6898:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    689a:	687b      	ldr	r3, [r7, #4]
    689c:	2bff      	cmp	r3, #255	; 0xff
    689e:	d009      	beq.n	68b4 <prvTraceGetParam+0x24>
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	4a19      	ldr	r2, [pc, #100]	; (6908 <prvTraceGetParam+0x78>)
    68a4:	4293      	cmp	r3, r2
    68a6:	d005      	beq.n	68b4 <prvTraceGetParam+0x24>
    68a8:	4b18      	ldr	r3, [pc, #96]	; (690c <prvTraceGetParam+0x7c>)
    68aa:	0018      	movs	r0, r3
    68ac:	4b18      	ldr	r3, [pc, #96]	; (6910 <prvTraceGetParam+0x80>)
    68ae:	4798      	blx	r3
    68b0:	683b      	ldr	r3, [r7, #0]
    68b2:	e024      	b.n	68fe <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    68b4:	683a      	ldr	r2, [r7, #0]
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	429a      	cmp	r2, r3
    68ba:	d801      	bhi.n	68c0 <prvTraceGetParam+0x30>
	{
		return param;
    68bc:	683b      	ldr	r3, [r7, #0]
    68be:	e01e      	b.n	68fe <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    68c0:	4b14      	ldr	r3, [pc, #80]	; (6914 <prvTraceGetParam+0x84>)
    68c2:	4798      	blx	r3
    68c4:	0003      	movs	r3, r0
    68c6:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
    68c8:	68fb      	ldr	r3, [r7, #12]
    68ca:	2b00      	cmp	r3, #0
    68cc:	d014      	beq.n	68f8 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
    68ce:	68fb      	ldr	r3, [r7, #12]
    68d0:	2201      	movs	r2, #1
    68d2:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	43db      	mvns	r3, r3
    68d8:	683a      	ldr	r2, [r7, #0]
    68da:	4013      	ands	r3, r2
    68dc:	0a1b      	lsrs	r3, r3, #8
    68de:	b2da      	uxtb	r2, r3
    68e0:	68fb      	ldr	r3, [r7, #12]
    68e2:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    68e4:	687b      	ldr	r3, [r7, #4]
    68e6:	43db      	mvns	r3, r3
    68e8:	683a      	ldr	r2, [r7, #0]
    68ea:	4013      	ands	r3, r2
    68ec:	0c1b      	lsrs	r3, r3, #16
    68ee:	b29a      	uxth	r2, r3
    68f0:	68fb      	ldr	r3, [r7, #12]
    68f2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    68f4:	4b08      	ldr	r3, [pc, #32]	; (6918 <prvTraceGetParam+0x88>)
    68f6:	4798      	blx	r3
		}

		return param & param_max;
    68f8:	683b      	ldr	r3, [r7, #0]
    68fa:	687a      	ldr	r2, [r7, #4]
    68fc:	4013      	ands	r3, r2
	}
}
    68fe:	0018      	movs	r0, r3
    6900:	46bd      	mov	sp, r7
    6902:	b004      	add	sp, #16
    6904:	bd80      	pop	{r7, pc}
    6906:	46c0      	nop			; (mov r8, r8)
    6908:	0000ffff 	.word	0x0000ffff
    690c:	00026604 	.word	0x00026604
    6910:	000074b9 	.word	0x000074b9
    6914:	00007071 	.word	0x00007071
    6918:	00007675 	.word	0x00007675

0000691c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    691c:	b580      	push	{r7, lr}
    691e:	b08a      	sub	sp, #40	; 0x28
    6920:	af00      	add	r7, sp, #0
    6922:	6078      	str	r0, [r7, #4]
    6924:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
    6926:	2326      	movs	r3, #38	; 0x26
    6928:	18fb      	adds	r3, r7, r3
    692a:	2200      	movs	r2, #0
    692c:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    692e:	687b      	ldr	r3, [r7, #4]
    6930:	2bfe      	cmp	r3, #254	; 0xfe
    6932:	d904      	bls.n	693e <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
    6934:	4b2d      	ldr	r3, [pc, #180]	; (69ec <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
    6936:	0018      	movs	r0, r3
    6938:	4b2d      	ldr	r3, [pc, #180]	; (69f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    693a:	4798      	blx	r3
    693c:	e053      	b.n	69e6 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
    693e:	4b2d      	ldr	r3, [pc, #180]	; (69f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    6940:	681b      	ldr	r3, [r3, #0]
    6942:	2b00      	cmp	r3, #0
    6944:	d004      	beq.n	6950 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    6946:	4b2c      	ldr	r3, [pc, #176]	; (69f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
    6948:	0018      	movs	r0, r3
    694a:	4b29      	ldr	r3, [pc, #164]	; (69f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    694c:	4798      	blx	r3
		return;
    694e:	e04a      	b.n	69e6 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6950:	f3ef 8310 	mrs	r3, PRIMASK
    6954:	613b      	str	r3, [r7, #16]
  return(result);
    6956:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
    6958:	623b      	str	r3, [r7, #32]
    695a:	2301      	movs	r3, #1
    695c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    695e:	697b      	ldr	r3, [r7, #20]
    6960:	f383 8810 	msr	PRIMASK, r3
    6964:	4b23      	ldr	r3, [pc, #140]	; (69f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    6966:	681b      	ldr	r3, [r3, #0]
    6968:	1c5a      	adds	r2, r3, #1
    696a:	4b22      	ldr	r3, [pc, #136]	; (69f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    696c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    696e:	4b23      	ldr	r3, [pc, #140]	; (69fc <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
    6970:	681b      	ldr	r3, [r3, #0]
    6972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6974:	2b00      	cmp	r3, #0
    6976:	d02c      	beq.n	69d2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
    6978:	4b21      	ldr	r3, [pc, #132]	; (6a00 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
    697a:	781b      	ldrb	r3, [r3, #0]
    697c:	2b00      	cmp	r3, #0
    697e:	d028      	beq.n	69d2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    6980:	20ff      	movs	r0, #255	; 0xff
    6982:	4b20      	ldr	r3, [pc, #128]	; (6a04 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    6984:	4798      	blx	r3
    6986:	0003      	movs	r3, r0
    6988:	001a      	movs	r2, r3
    698a:	231f      	movs	r3, #31
    698c:	18fb      	adds	r3, r7, r3
    698e:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    6990:	683b      	ldr	r3, [r7, #0]
    6992:	4a1d      	ldr	r2, [pc, #116]	; (6a08 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
    6994:	0019      	movs	r1, r3
    6996:	0010      	movs	r0, r2
    6998:	4b1c      	ldr	r3, [pc, #112]	; (6a0c <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
    699a:	4798      	blx	r3
    699c:	0002      	movs	r2, r0
    699e:	2326      	movs	r3, #38	; 0x26
    69a0:	18fb      	adds	r3, r7, r3
    69a2:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    69a4:	4b1a      	ldr	r3, [pc, #104]	; (6a10 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
    69a6:	4798      	blx	r3
    69a8:	0003      	movs	r3, r0
    69aa:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
    69ac:	69bb      	ldr	r3, [r7, #24]
    69ae:	2b00      	cmp	r3, #0
    69b0:	d00f      	beq.n	69d2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
    69b2:	69bb      	ldr	r3, [r7, #24]
    69b4:	221f      	movs	r2, #31
    69b6:	18ba      	adds	r2, r7, r2
    69b8:	7812      	ldrb	r2, [r2, #0]
    69ba:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
    69bc:	687b      	ldr	r3, [r7, #4]
    69be:	b2da      	uxtb	r2, r3
    69c0:	69bb      	ldr	r3, [r7, #24]
    69c2:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
    69c4:	69bb      	ldr	r3, [r7, #24]
    69c6:	2226      	movs	r2, #38	; 0x26
    69c8:	18ba      	adds	r2, r7, r2
    69ca:	8812      	ldrh	r2, [r2, #0]
    69cc:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    69ce:	4b11      	ldr	r3, [pc, #68]	; (6a14 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
    69d0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    69d2:	4b08      	ldr	r3, [pc, #32]	; (69f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    69d4:	681b      	ldr	r3, [r3, #0]
    69d6:	1e5a      	subs	r2, r3, #1
    69d8:	4b06      	ldr	r3, [pc, #24]	; (69f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    69da:	601a      	str	r2, [r3, #0]
    69dc:	6a3b      	ldr	r3, [r7, #32]
    69de:	60fb      	str	r3, [r7, #12]
    69e0:	68fb      	ldr	r3, [r7, #12]
    69e2:	f383 8810 	msr	PRIMASK, r3
}
    69e6:	46bd      	mov	sp, r7
    69e8:	b00a      	add	sp, #40	; 0x28
    69ea:	bd80      	pop	{r7, pc}
    69ec:	00026640 	.word	0x00026640
    69f0:	000074b9 	.word	0x000074b9
    69f4:	20000ddc 	.word	0x20000ddc
    69f8:	00026698 	.word	0x00026698
    69fc:	20000e84 	.word	0x20000e84
    6a00:	20000de8 	.word	0x20000de8
    6a04:	000076cd 	.word	0x000076cd
    6a08:	0000ffff 	.word	0x0000ffff
    6a0c:	00006891 	.word	0x00006891
    6a10:	00007071 	.word	0x00007071
    6a14:	00007675 	.word	0x00007675

00006a18 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
    6a18:	b590      	push	{r4, r7, lr}
    6a1a:	b089      	sub	sp, #36	; 0x24
    6a1c:	af00      	add	r7, sp, #0
    6a1e:	0002      	movs	r2, r0
    6a20:	1dfb      	adds	r3, r7, #7
    6a22:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    6a24:	1dfb      	adds	r3, r7, #7
    6a26:	781b      	ldrb	r3, [r3, #0]
    6a28:	2b0f      	cmp	r3, #15
    6a2a:	d904      	bls.n	6a36 <prvTraceStoreTaskswitch+0x1e>
    6a2c:	4b34      	ldr	r3, [pc, #208]	; (6b00 <prvTraceStoreTaskswitch+0xe8>)
    6a2e:	0018      	movs	r0, r3
    6a30:	4b34      	ldr	r3, [pc, #208]	; (6b04 <prvTraceStoreTaskswitch+0xec>)
    6a32:	4798      	blx	r3
    6a34:	e061      	b.n	6afa <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6a36:	f3ef 8310 	mrs	r3, PRIMASK
    6a3a:	60fb      	str	r3, [r7, #12]
  return(result);
    6a3c:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    6a3e:	61fb      	str	r3, [r7, #28]
    6a40:	2301      	movs	r3, #1
    6a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    6a44:	693b      	ldr	r3, [r7, #16]
    6a46:	f383 8810 	msr	PRIMASK, r3
    6a4a:	4b2f      	ldr	r3, [pc, #188]	; (6b08 <prvTraceStoreTaskswitch+0xf0>)
    6a4c:	681b      	ldr	r3, [r3, #0]
    6a4e:	1c5a      	adds	r2, r3, #1
    6a50:	4b2d      	ldr	r3, [pc, #180]	; (6b08 <prvTraceStoreTaskswitch+0xf0>)
    6a52:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    6a54:	4b2d      	ldr	r3, [pc, #180]	; (6b0c <prvTraceStoreTaskswitch+0xf4>)
    6a56:	781b      	ldrb	r3, [r3, #0]
    6a58:	1dfa      	adds	r2, r7, #7
    6a5a:	7812      	ldrb	r2, [r2, #0]
    6a5c:	429a      	cmp	r2, r3
    6a5e:	d042      	beq.n	6ae6 <prvTraceStoreTaskswitch+0xce>
    6a60:	4b2b      	ldr	r3, [pc, #172]	; (6b10 <prvTraceStoreTaskswitch+0xf8>)
    6a62:	681b      	ldr	r3, [r3, #0]
    6a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6a66:	2b00      	cmp	r3, #0
    6a68:	d03d      	beq.n	6ae6 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
    6a6a:	4b2a      	ldr	r3, [pc, #168]	; (6b14 <prvTraceStoreTaskswitch+0xfc>)
    6a6c:	2200      	movs	r2, #0
    6a6e:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    6a70:	231a      	movs	r3, #26
    6a72:	18fc      	adds	r4, r7, r3
    6a74:	4b28      	ldr	r3, [pc, #160]	; (6b18 <prvTraceStoreTaskswitch+0x100>)
    6a76:	0018      	movs	r0, r3
    6a78:	4b28      	ldr	r3, [pc, #160]	; (6b1c <prvTraceStoreTaskswitch+0x104>)
    6a7a:	4798      	blx	r3
    6a7c:	0003      	movs	r3, r0
    6a7e:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
    6a80:	4b22      	ldr	r3, [pc, #136]	; (6b0c <prvTraceStoreTaskswitch+0xf4>)
    6a82:	1dfa      	adds	r2, r7, #7
    6a84:	7812      	ldrb	r2, [r2, #0]
    6a86:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
    6a88:	2319      	movs	r3, #25
    6a8a:	18fb      	adds	r3, r7, r3
    6a8c:	4a1f      	ldr	r2, [pc, #124]	; (6b0c <prvTraceStoreTaskswitch+0xf4>)
    6a8e:	7812      	ldrb	r2, [r2, #0]
    6a90:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    6a92:	4b23      	ldr	r3, [pc, #140]	; (6b20 <prvTraceStoreTaskswitch+0x108>)
    6a94:	4798      	blx	r3
    6a96:	0003      	movs	r3, r0
    6a98:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
    6a9a:	697b      	ldr	r3, [r7, #20]
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	d022      	beq.n	6ae6 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    6aa0:	4b1a      	ldr	r3, [pc, #104]	; (6b0c <prvTraceStoreTaskswitch+0xf4>)
    6aa2:	781b      	ldrb	r3, [r3, #0]
    6aa4:	0019      	movs	r1, r3
    6aa6:	2003      	movs	r0, #3
    6aa8:	4b1e      	ldr	r3, [pc, #120]	; (6b24 <prvTraceStoreTaskswitch+0x10c>)
    6aaa:	4798      	blx	r3
    6aac:	0003      	movs	r3, r0
    6aae:	2b01      	cmp	r3, #1
    6ab0:	d103      	bne.n	6aba <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    6ab2:	697b      	ldr	r3, [r7, #20]
    6ab4:	2207      	movs	r2, #7
    6ab6:	701a      	strb	r2, [r3, #0]
    6ab8:	e002      	b.n	6ac0 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    6aba:	697b      	ldr	r3, [r7, #20]
    6abc:	2206      	movs	r2, #6
    6abe:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
    6ac0:	697b      	ldr	r3, [r7, #20]
    6ac2:	221a      	movs	r2, #26
    6ac4:	18ba      	adds	r2, r7, r2
    6ac6:	8812      	ldrh	r2, [r2, #0]
    6ac8:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
    6aca:	697b      	ldr	r3, [r7, #20]
    6acc:	2219      	movs	r2, #25
    6ace:	18ba      	adds	r2, r7, r2
    6ad0:	7812      	ldrb	r2, [r2, #0]
    6ad2:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
    6ad4:	4b0d      	ldr	r3, [pc, #52]	; (6b0c <prvTraceStoreTaskswitch+0xf4>)
    6ad6:	781b      	ldrb	r3, [r3, #0]
    6ad8:	2201      	movs	r2, #1
    6ada:	0019      	movs	r1, r3
    6adc:	2003      	movs	r0, #3
    6ade:	4b12      	ldr	r3, [pc, #72]	; (6b28 <prvTraceStoreTaskswitch+0x110>)
    6ae0:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    6ae2:	4b12      	ldr	r3, [pc, #72]	; (6b2c <prvTraceStoreTaskswitch+0x114>)
    6ae4:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    6ae6:	4b08      	ldr	r3, [pc, #32]	; (6b08 <prvTraceStoreTaskswitch+0xf0>)
    6ae8:	681b      	ldr	r3, [r3, #0]
    6aea:	1e5a      	subs	r2, r3, #1
    6aec:	4b06      	ldr	r3, [pc, #24]	; (6b08 <prvTraceStoreTaskswitch+0xf0>)
    6aee:	601a      	str	r2, [r3, #0]
    6af0:	69fb      	ldr	r3, [r7, #28]
    6af2:	60bb      	str	r3, [r7, #8]
    6af4:	68bb      	ldr	r3, [r7, #8]
    6af6:	f383 8810 	msr	PRIMASK, r3
}
    6afa:	46bd      	mov	sp, r7
    6afc:	b009      	add	sp, #36	; 0x24
    6afe:	bd90      	pop	{r4, r7, pc}
    6b00:	000266d0 	.word	0x000266d0
    6b04:	000074b9 	.word	0x000074b9
    6b08:	20000ddc 	.word	0x20000ddc
    6b0c:	20000de8 	.word	0x20000de8
    6b10:	20000e84 	.word	0x20000e84
    6b14:	20000dc8 	.word	0x20000dc8
    6b18:	0000ffff 	.word	0x0000ffff
    6b1c:	000076cd 	.word	0x000076cd
    6b20:	00007071 	.word	0x00007071
    6b24:	00006d15 	.word	0x00006d15
    6b28:	00006c71 	.word	0x00006c71
    6b2c:	00007675 	.word	0x00007675

00006b30 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
    6b30:	b590      	push	{r4, r7, lr}
    6b32:	b083      	sub	sp, #12
    6b34:	af00      	add	r7, sp, #0
    6b36:	0004      	movs	r4, r0
    6b38:	0008      	movs	r0, r1
    6b3a:	0011      	movs	r1, r2
    6b3c:	1dfb      	adds	r3, r7, #7
    6b3e:	1c22      	adds	r2, r4, #0
    6b40:	701a      	strb	r2, [r3, #0]
    6b42:	1dbb      	adds	r3, r7, #6
    6b44:	1c02      	adds	r2, r0, #0
    6b46:	701a      	strb	r2, [r3, #0]
    6b48:	1d7b      	adds	r3, r7, #5
    6b4a:	1c0a      	adds	r2, r1, #0
    6b4c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    6b4e:	1dfb      	adds	r3, r7, #7
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	2b08      	cmp	r3, #8
    6b54:	d904      	bls.n	6b60 <prvTraceSetPriorityProperty+0x30>
    6b56:	4b1a      	ldr	r3, [pc, #104]	; (6bc0 <prvTraceSetPriorityProperty+0x90>)
    6b58:	0018      	movs	r0, r3
    6b5a:	4b1a      	ldr	r3, [pc, #104]	; (6bc4 <prvTraceSetPriorityProperty+0x94>)
    6b5c:	4798      	blx	r3
    6b5e:	e02c      	b.n	6bba <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    6b60:	4b19      	ldr	r3, [pc, #100]	; (6bc8 <prvTraceSetPriorityProperty+0x98>)
    6b62:	681a      	ldr	r2, [r3, #0]
    6b64:	1dfb      	adds	r3, r7, #7
    6b66:	781b      	ldrb	r3, [r3, #0]
    6b68:	2164      	movs	r1, #100	; 0x64
    6b6a:	18d3      	adds	r3, r2, r3
    6b6c:	185b      	adds	r3, r3, r1
    6b6e:	781b      	ldrb	r3, [r3, #0]
    6b70:	1dba      	adds	r2, r7, #6
    6b72:	7812      	ldrb	r2, [r2, #0]
    6b74:	429a      	cmp	r2, r3
    6b76:	d904      	bls.n	6b82 <prvTraceSetPriorityProperty+0x52>
    6b78:	4b14      	ldr	r3, [pc, #80]	; (6bcc <prvTraceSetPriorityProperty+0x9c>)
    6b7a:	0018      	movs	r0, r3
    6b7c:	4b11      	ldr	r3, [pc, #68]	; (6bc4 <prvTraceSetPriorityProperty+0x94>)
    6b7e:	4798      	blx	r3
    6b80:	e01b      	b.n	6bba <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    6b82:	4b11      	ldr	r3, [pc, #68]	; (6bc8 <prvTraceSetPriorityProperty+0x98>)
    6b84:	681c      	ldr	r4, [r3, #0]
    6b86:	1dfb      	adds	r3, r7, #7
    6b88:	781a      	ldrb	r2, [r3, #0]
    6b8a:	1dbb      	adds	r3, r7, #6
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	0011      	movs	r1, r2
    6b90:	0018      	movs	r0, r3
    6b92:	4b0f      	ldr	r3, [pc, #60]	; (6bd0 <prvTraceSetPriorityProperty+0xa0>)
    6b94:	4798      	blx	r3
    6b96:	0003      	movs	r3, r0
    6b98:	0018      	movs	r0, r3
    6b9a:	4b0b      	ldr	r3, [pc, #44]	; (6bc8 <prvTraceSetPriorityProperty+0x98>)
    6b9c:	681a      	ldr	r2, [r3, #0]
    6b9e:	1dfb      	adds	r3, r7, #7
    6ba0:	781b      	ldrb	r3, [r3, #0]
    6ba2:	2170      	movs	r1, #112	; 0x70
    6ba4:	18d3      	adds	r3, r2, r3
    6ba6:	185b      	adds	r3, r3, r1
    6ba8:	781b      	ldrb	r3, [r3, #0]
    6baa:	18c3      	adds	r3, r0, r3
    6bac:	3301      	adds	r3, #1
    6bae:	229c      	movs	r2, #156	; 0x9c
    6bb0:	18e3      	adds	r3, r4, r3
    6bb2:	189b      	adds	r3, r3, r2
    6bb4:	1d7a      	adds	r2, r7, #5
    6bb6:	7812      	ldrb	r2, [r2, #0]
    6bb8:	701a      	strb	r2, [r3, #0]
}
    6bba:	46bd      	mov	sp, r7
    6bbc:	b003      	add	sp, #12
    6bbe:	bd90      	pop	{r4, r7, pc}
    6bc0:	00026864 	.word	0x00026864
    6bc4:	000074b9 	.word	0x000074b9
    6bc8:	20000e84 	.word	0x20000e84
    6bcc:	000268b0 	.word	0x000268b0
    6bd0:	000070c5 	.word	0x000070c5

00006bd4 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
    6bd4:	b590      	push	{r4, r7, lr}
    6bd6:	b083      	sub	sp, #12
    6bd8:	af00      	add	r7, sp, #0
    6bda:	0002      	movs	r2, r0
    6bdc:	1dfb      	adds	r3, r7, #7
    6bde:	701a      	strb	r2, [r3, #0]
    6be0:	1dbb      	adds	r3, r7, #6
    6be2:	1c0a      	adds	r2, r1, #0
    6be4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    6be6:	1dfb      	adds	r3, r7, #7
    6be8:	781b      	ldrb	r3, [r3, #0]
    6bea:	2b08      	cmp	r3, #8
    6bec:	d905      	bls.n	6bfa <prvTraceGetPriorityProperty+0x26>
    6bee:	4b1b      	ldr	r3, [pc, #108]	; (6c5c <prvTraceGetPriorityProperty+0x88>)
    6bf0:	0018      	movs	r0, r3
    6bf2:	4b1b      	ldr	r3, [pc, #108]	; (6c60 <prvTraceGetPriorityProperty+0x8c>)
    6bf4:	4798      	blx	r3
    6bf6:	2300      	movs	r3, #0
    6bf8:	e02b      	b.n	6c52 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    6bfa:	4b1a      	ldr	r3, [pc, #104]	; (6c64 <prvTraceGetPriorityProperty+0x90>)
    6bfc:	681a      	ldr	r2, [r3, #0]
    6bfe:	1dfb      	adds	r3, r7, #7
    6c00:	781b      	ldrb	r3, [r3, #0]
    6c02:	2164      	movs	r1, #100	; 0x64
    6c04:	18d3      	adds	r3, r2, r3
    6c06:	185b      	adds	r3, r3, r1
    6c08:	781b      	ldrb	r3, [r3, #0]
    6c0a:	1dba      	adds	r2, r7, #6
    6c0c:	7812      	ldrb	r2, [r2, #0]
    6c0e:	429a      	cmp	r2, r3
    6c10:	d905      	bls.n	6c1e <prvTraceGetPriorityProperty+0x4a>
    6c12:	4b15      	ldr	r3, [pc, #84]	; (6c68 <prvTraceGetPriorityProperty+0x94>)
    6c14:	0018      	movs	r0, r3
    6c16:	4b12      	ldr	r3, [pc, #72]	; (6c60 <prvTraceGetPriorityProperty+0x8c>)
    6c18:	4798      	blx	r3
    6c1a:	2300      	movs	r3, #0
    6c1c:	e019      	b.n	6c52 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    6c1e:	4b11      	ldr	r3, [pc, #68]	; (6c64 <prvTraceGetPriorityProperty+0x90>)
    6c20:	681c      	ldr	r4, [r3, #0]
    6c22:	1dfb      	adds	r3, r7, #7
    6c24:	781a      	ldrb	r2, [r3, #0]
    6c26:	1dbb      	adds	r3, r7, #6
    6c28:	781b      	ldrb	r3, [r3, #0]
    6c2a:	0011      	movs	r1, r2
    6c2c:	0018      	movs	r0, r3
    6c2e:	4b0f      	ldr	r3, [pc, #60]	; (6c6c <prvTraceGetPriorityProperty+0x98>)
    6c30:	4798      	blx	r3
    6c32:	0003      	movs	r3, r0
    6c34:	0018      	movs	r0, r3
    6c36:	4b0b      	ldr	r3, [pc, #44]	; (6c64 <prvTraceGetPriorityProperty+0x90>)
    6c38:	681a      	ldr	r2, [r3, #0]
    6c3a:	1dfb      	adds	r3, r7, #7
    6c3c:	781b      	ldrb	r3, [r3, #0]
    6c3e:	2170      	movs	r1, #112	; 0x70
    6c40:	18d3      	adds	r3, r2, r3
    6c42:	185b      	adds	r3, r3, r1
    6c44:	781b      	ldrb	r3, [r3, #0]
    6c46:	18c3      	adds	r3, r0, r3
    6c48:	3301      	adds	r3, #1
    6c4a:	229c      	movs	r2, #156	; 0x9c
    6c4c:	18e3      	adds	r3, r4, r3
    6c4e:	189b      	adds	r3, r3, r2
    6c50:	781b      	ldrb	r3, [r3, #0]
}
    6c52:	0018      	movs	r0, r3
    6c54:	46bd      	mov	sp, r7
    6c56:	b003      	add	sp, #12
    6c58:	bd90      	pop	{r4, r7, pc}
    6c5a:	46c0      	nop			; (mov r8, r8)
    6c5c:	000268f0 	.word	0x000268f0
    6c60:	000074b9 	.word	0x000074b9
    6c64:	20000e84 	.word	0x20000e84
    6c68:	0002693c 	.word	0x0002693c
    6c6c:	000070c5 	.word	0x000070c5

00006c70 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
    6c70:	b590      	push	{r4, r7, lr}
    6c72:	b083      	sub	sp, #12
    6c74:	af00      	add	r7, sp, #0
    6c76:	0004      	movs	r4, r0
    6c78:	0008      	movs	r0, r1
    6c7a:	0011      	movs	r1, r2
    6c7c:	1dfb      	adds	r3, r7, #7
    6c7e:	1c22      	adds	r2, r4, #0
    6c80:	701a      	strb	r2, [r3, #0]
    6c82:	1dbb      	adds	r3, r7, #6
    6c84:	1c02      	adds	r2, r0, #0
    6c86:	701a      	strb	r2, [r3, #0]
    6c88:	1d7b      	adds	r3, r7, #5
    6c8a:	1c0a      	adds	r2, r1, #0
    6c8c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    6c8e:	1dfb      	adds	r3, r7, #7
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	2b08      	cmp	r3, #8
    6c94:	d904      	bls.n	6ca0 <prvTraceSetObjectState+0x30>
    6c96:	4b1a      	ldr	r3, [pc, #104]	; (6d00 <prvTraceSetObjectState+0x90>)
    6c98:	0018      	movs	r0, r3
    6c9a:	4b1a      	ldr	r3, [pc, #104]	; (6d04 <prvTraceSetObjectState+0x94>)
    6c9c:	4798      	blx	r3
    6c9e:	e02b      	b.n	6cf8 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    6ca0:	4b19      	ldr	r3, [pc, #100]	; (6d08 <prvTraceSetObjectState+0x98>)
    6ca2:	681a      	ldr	r2, [r3, #0]
    6ca4:	1dfb      	adds	r3, r7, #7
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	2164      	movs	r1, #100	; 0x64
    6caa:	18d3      	adds	r3, r2, r3
    6cac:	185b      	adds	r3, r3, r1
    6cae:	781b      	ldrb	r3, [r3, #0]
    6cb0:	1dba      	adds	r2, r7, #6
    6cb2:	7812      	ldrb	r2, [r2, #0]
    6cb4:	429a      	cmp	r2, r3
    6cb6:	d904      	bls.n	6cc2 <prvTraceSetObjectState+0x52>
    6cb8:	4b14      	ldr	r3, [pc, #80]	; (6d0c <prvTraceSetObjectState+0x9c>)
    6cba:	0018      	movs	r0, r3
    6cbc:	4b11      	ldr	r3, [pc, #68]	; (6d04 <prvTraceSetObjectState+0x94>)
    6cbe:	4798      	blx	r3
    6cc0:	e01a      	b.n	6cf8 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    6cc2:	4b11      	ldr	r3, [pc, #68]	; (6d08 <prvTraceSetObjectState+0x98>)
    6cc4:	681c      	ldr	r4, [r3, #0]
    6cc6:	1dfb      	adds	r3, r7, #7
    6cc8:	781a      	ldrb	r2, [r3, #0]
    6cca:	1dbb      	adds	r3, r7, #6
    6ccc:	781b      	ldrb	r3, [r3, #0]
    6cce:	0011      	movs	r1, r2
    6cd0:	0018      	movs	r0, r3
    6cd2:	4b0f      	ldr	r3, [pc, #60]	; (6d10 <prvTraceSetObjectState+0xa0>)
    6cd4:	4798      	blx	r3
    6cd6:	0003      	movs	r3, r0
    6cd8:	0018      	movs	r0, r3
    6cda:	4b0b      	ldr	r3, [pc, #44]	; (6d08 <prvTraceSetObjectState+0x98>)
    6cdc:	681a      	ldr	r2, [r3, #0]
    6cde:	1dfb      	adds	r3, r7, #7
    6ce0:	781b      	ldrb	r3, [r3, #0]
    6ce2:	2170      	movs	r1, #112	; 0x70
    6ce4:	18d3      	adds	r3, r2, r3
    6ce6:	185b      	adds	r3, r3, r1
    6ce8:	781b      	ldrb	r3, [r3, #0]
    6cea:	18c3      	adds	r3, r0, r3
    6cec:	229c      	movs	r2, #156	; 0x9c
    6cee:	18e3      	adds	r3, r4, r3
    6cf0:	189b      	adds	r3, r3, r2
    6cf2:	1d7a      	adds	r2, r7, #5
    6cf4:	7812      	ldrb	r2, [r2, #0]
    6cf6:	701a      	strb	r2, [r3, #0]
}
    6cf8:	46bd      	mov	sp, r7
    6cfa:	b003      	add	sp, #12
    6cfc:	bd90      	pop	{r4, r7, pc}
    6cfe:	46c0      	nop			; (mov r8, r8)
    6d00:	0002697c 	.word	0x0002697c
    6d04:	000074b9 	.word	0x000074b9
    6d08:	20000e84 	.word	0x20000e84
    6d0c:	000269c0 	.word	0x000269c0
    6d10:	000070c5 	.word	0x000070c5

00006d14 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
    6d14:	b590      	push	{r4, r7, lr}
    6d16:	b083      	sub	sp, #12
    6d18:	af00      	add	r7, sp, #0
    6d1a:	0002      	movs	r2, r0
    6d1c:	1dfb      	adds	r3, r7, #7
    6d1e:	701a      	strb	r2, [r3, #0]
    6d20:	1dbb      	adds	r3, r7, #6
    6d22:	1c0a      	adds	r2, r1, #0
    6d24:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    6d26:	1dfb      	adds	r3, r7, #7
    6d28:	781b      	ldrb	r3, [r3, #0]
    6d2a:	2b08      	cmp	r3, #8
    6d2c:	d905      	bls.n	6d3a <prvTraceGetObjectState+0x26>
    6d2e:	4b1a      	ldr	r3, [pc, #104]	; (6d98 <prvTraceGetObjectState+0x84>)
    6d30:	0018      	movs	r0, r3
    6d32:	4b1a      	ldr	r3, [pc, #104]	; (6d9c <prvTraceGetObjectState+0x88>)
    6d34:	4798      	blx	r3
    6d36:	2300      	movs	r3, #0
    6d38:	e02a      	b.n	6d90 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    6d3a:	4b19      	ldr	r3, [pc, #100]	; (6da0 <prvTraceGetObjectState+0x8c>)
    6d3c:	681a      	ldr	r2, [r3, #0]
    6d3e:	1dfb      	adds	r3, r7, #7
    6d40:	781b      	ldrb	r3, [r3, #0]
    6d42:	2164      	movs	r1, #100	; 0x64
    6d44:	18d3      	adds	r3, r2, r3
    6d46:	185b      	adds	r3, r3, r1
    6d48:	781b      	ldrb	r3, [r3, #0]
    6d4a:	1dba      	adds	r2, r7, #6
    6d4c:	7812      	ldrb	r2, [r2, #0]
    6d4e:	429a      	cmp	r2, r3
    6d50:	d905      	bls.n	6d5e <prvTraceGetObjectState+0x4a>
    6d52:	4b14      	ldr	r3, [pc, #80]	; (6da4 <prvTraceGetObjectState+0x90>)
    6d54:	0018      	movs	r0, r3
    6d56:	4b11      	ldr	r3, [pc, #68]	; (6d9c <prvTraceGetObjectState+0x88>)
    6d58:	4798      	blx	r3
    6d5a:	2300      	movs	r3, #0
    6d5c:	e018      	b.n	6d90 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    6d5e:	4b10      	ldr	r3, [pc, #64]	; (6da0 <prvTraceGetObjectState+0x8c>)
    6d60:	681c      	ldr	r4, [r3, #0]
    6d62:	1dfb      	adds	r3, r7, #7
    6d64:	781a      	ldrb	r2, [r3, #0]
    6d66:	1dbb      	adds	r3, r7, #6
    6d68:	781b      	ldrb	r3, [r3, #0]
    6d6a:	0011      	movs	r1, r2
    6d6c:	0018      	movs	r0, r3
    6d6e:	4b0e      	ldr	r3, [pc, #56]	; (6da8 <prvTraceGetObjectState+0x94>)
    6d70:	4798      	blx	r3
    6d72:	0003      	movs	r3, r0
    6d74:	0018      	movs	r0, r3
    6d76:	4b0a      	ldr	r3, [pc, #40]	; (6da0 <prvTraceGetObjectState+0x8c>)
    6d78:	681a      	ldr	r2, [r3, #0]
    6d7a:	1dfb      	adds	r3, r7, #7
    6d7c:	781b      	ldrb	r3, [r3, #0]
    6d7e:	2170      	movs	r1, #112	; 0x70
    6d80:	18d3      	adds	r3, r2, r3
    6d82:	185b      	adds	r3, r3, r1
    6d84:	781b      	ldrb	r3, [r3, #0]
    6d86:	18c3      	adds	r3, r0, r3
    6d88:	229c      	movs	r2, #156	; 0x9c
    6d8a:	18e3      	adds	r3, r4, r3
    6d8c:	189b      	adds	r3, r3, r2
    6d8e:	781b      	ldrb	r3, [r3, #0]
}
    6d90:	0018      	movs	r0, r3
    6d92:	46bd      	mov	sp, r7
    6d94:	b003      	add	sp, #12
    6d96:	bd90      	pop	{r4, r7, pc}
    6d98:	000269fc 	.word	0x000269fc
    6d9c:	000074b9 	.word	0x000074b9
    6da0:	20000e84 	.word	0x20000e84
    6da4:	00026a40 	.word	0x00026a40
    6da8:	000070c5 	.word	0x000070c5

00006dac <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
    6dac:	b590      	push	{r4, r7, lr}
    6dae:	b083      	sub	sp, #12
    6db0:	af00      	add	r7, sp, #0
    6db2:	0002      	movs	r2, r0
    6db4:	1dfb      	adds	r3, r7, #7
    6db6:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    6db8:	4b11      	ldr	r3, [pc, #68]	; (6e00 <prvTraceSetTaskInstanceFinished+0x54>)
    6dba:	681b      	ldr	r3, [r3, #0]
    6dbc:	2267      	movs	r2, #103	; 0x67
    6dbe:	5c9b      	ldrb	r3, [r3, r2]
    6dc0:	1dfa      	adds	r2, r7, #7
    6dc2:	7812      	ldrb	r2, [r2, #0]
    6dc4:	429a      	cmp	r2, r3
    6dc6:	d904      	bls.n	6dd2 <prvTraceSetTaskInstanceFinished+0x26>
    6dc8:	4b0e      	ldr	r3, [pc, #56]	; (6e04 <prvTraceSetTaskInstanceFinished+0x58>)
    6dca:	0018      	movs	r0, r3
    6dcc:	4b0e      	ldr	r3, [pc, #56]	; (6e08 <prvTraceSetTaskInstanceFinished+0x5c>)
    6dce:	4798      	blx	r3
    6dd0:	e013      	b.n	6dfa <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    6dd2:	4b0b      	ldr	r3, [pc, #44]	; (6e00 <prvTraceSetTaskInstanceFinished+0x54>)
    6dd4:	681c      	ldr	r4, [r3, #0]
    6dd6:	1dfb      	adds	r3, r7, #7
    6dd8:	781b      	ldrb	r3, [r3, #0]
    6dda:	2103      	movs	r1, #3
    6ddc:	0018      	movs	r0, r3
    6dde:	4b0b      	ldr	r3, [pc, #44]	; (6e0c <prvTraceSetTaskInstanceFinished+0x60>)
    6de0:	4798      	blx	r3
    6de2:	0003      	movs	r3, r0
    6de4:	0019      	movs	r1, r3
    6de6:	4b06      	ldr	r3, [pc, #24]	; (6e00 <prvTraceSetTaskInstanceFinished+0x54>)
    6de8:	681b      	ldr	r3, [r3, #0]
    6dea:	2273      	movs	r2, #115	; 0x73
    6dec:	5c9b      	ldrb	r3, [r3, r2]
    6dee:	18cb      	adds	r3, r1, r3
    6df0:	229c      	movs	r2, #156	; 0x9c
    6df2:	18e3      	adds	r3, r4, r3
    6df4:	189b      	adds	r3, r3, r2
    6df6:	2200      	movs	r2, #0
    6df8:	701a      	strb	r2, [r3, #0]
#endif
}
    6dfa:	46bd      	mov	sp, r7
    6dfc:	b003      	add	sp, #12
    6dfe:	bd90      	pop	{r4, r7, pc}
    6e00:	20000e84 	.word	0x20000e84
    6e04:	00026a7c 	.word	0x00026a7c
    6e08:	000074b9 	.word	0x000074b9
    6e0c:	000070c5 	.word	0x000070c5

00006e10 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
    6e10:	b580      	push	{r7, lr}
    6e12:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
    6e14:	4b75      	ldr	r3, [pc, #468]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e16:	681b      	ldr	r3, [r3, #0]
    6e18:	2b00      	cmp	r3, #0
    6e1a:	d103      	bne.n	6e24 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
    6e1c:	4b73      	ldr	r3, [pc, #460]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e1e:	4a74      	ldr	r2, [pc, #464]	; (6ff0 <prvTraceInitTraceData+0x1e0>)
    6e20:	601a      	str	r2, [r3, #0]
    6e22:	e006      	b.n	6e32 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
    6e24:	4b71      	ldr	r3, [pc, #452]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e26:	681b      	ldr	r3, [r3, #0]
    6e28:	781b      	ldrb	r3, [r3, #0]
    6e2a:	b2db      	uxtb	r3, r3
    6e2c:	2b01      	cmp	r3, #1
    6e2e:	d100      	bne.n	6e32 <prvTraceInitTraceData+0x22>
    6e30:	e0d8      	b.n	6fe4 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
    6e32:	4b70      	ldr	r3, [pc, #448]	; (6ff4 <prvTraceInitTraceData+0x1e4>)
    6e34:	681a      	ldr	r2, [r3, #0]
    6e36:	4b70      	ldr	r3, [pc, #448]	; (6ff8 <prvTraceInitTraceData+0x1e8>)
    6e38:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    6e3a:	4b6c      	ldr	r3, [pc, #432]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e3c:	6818      	ldr	r0, [r3, #0]
    6e3e:	23bd      	movs	r3, #189	; 0xbd
    6e40:	011b      	lsls	r3, r3, #4
    6e42:	001a      	movs	r2, r3
    6e44:	2100      	movs	r1, #0
    6e46:	4b6d      	ldr	r3, [pc, #436]	; (6ffc <prvTraceInitTraceData+0x1ec>)
    6e48:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    6e4a:	4b68      	ldr	r3, [pc, #416]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e4c:	681b      	ldr	r3, [r3, #0]
    6e4e:	4a6c      	ldr	r2, [pc, #432]	; (7000 <prvTraceInitTraceData+0x1f0>)
    6e50:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    6e52:	4b66      	ldr	r3, [pc, #408]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e54:	681b      	ldr	r3, [r3, #0]
    6e56:	2205      	movs	r2, #5
    6e58:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    6e5a:	4b64      	ldr	r3, [pc, #400]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e5c:	681b      	ldr	r3, [r3, #0]
    6e5e:	2200      	movs	r2, #0
    6e60:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    6e62:	4b62      	ldr	r3, [pc, #392]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e64:	681b      	ldr	r3, [r3, #0]
    6e66:	22bd      	movs	r2, #189	; 0xbd
    6e68:	0112      	lsls	r2, r2, #4
    6e6a:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    6e6c:	4b5f      	ldr	r3, [pc, #380]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e6e:	681b      	ldr	r3, [r3, #0]
    6e70:	2296      	movs	r2, #150	; 0x96
    6e72:	0052      	lsls	r2, r2, #1
    6e74:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    6e76:	4b5d      	ldr	r3, [pc, #372]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e78:	681b      	ldr	r3, [r3, #0]
    6e7a:	4a62      	ldr	r2, [pc, #392]	; (7004 <prvTraceInitTraceData+0x1f4>)
    6e7c:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    6e7e:	4b5b      	ldr	r3, [pc, #364]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e80:	681b      	ldr	r3, [r3, #0]
    6e82:	2200      	movs	r2, #0
    6e84:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    6e86:	4b59      	ldr	r3, [pc, #356]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e88:	681b      	ldr	r3, [r3, #0]
    6e8a:	2200      	movs	r2, #0
    6e8c:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    6e8e:	4b5e      	ldr	r3, [pc, #376]	; (7008 <prvTraceInitTraceData+0x1f8>)
    6e90:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    6e92:	4b56      	ldr	r3, [pc, #344]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e94:	681b      	ldr	r3, [r3, #0]
    6e96:	4a5d      	ldr	r2, [pc, #372]	; (700c <prvTraceInitTraceData+0x1fc>)
    6e98:	495d      	ldr	r1, [pc, #372]	; (7010 <prvTraceInitTraceData+0x200>)
    6e9a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    6e9c:	4b53      	ldr	r3, [pc, #332]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6e9e:	681a      	ldr	r2, [r3, #0]
    6ea0:	23ac      	movs	r3, #172	; 0xac
    6ea2:	00db      	lsls	r3, r3, #3
    6ea4:	21c8      	movs	r1, #200	; 0xc8
    6ea6:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    6ea8:	4b50      	ldr	r3, [pc, #320]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6eaa:	681b      	ldr	r3, [r3, #0]
    6eac:	4a59      	ldr	r2, [pc, #356]	; (7014 <prvTraceInitTraceData+0x204>)
    6eae:	2101      	movs	r1, #1
    6eb0:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    6eb2:	4b4e      	ldr	r3, [pc, #312]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6eb4:	681a      	ldr	r2, [r3, #0]
    6eb6:	23d7      	movs	r3, #215	; 0xd7
    6eb8:	00db      	lsls	r3, r3, #3
    6eba:	4957      	ldr	r1, [pc, #348]	; (7018 <prvTraceInitTraceData+0x208>)
    6ebc:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    6ebe:	4b4b      	ldr	r3, [pc, #300]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6ec0:	681b      	ldr	r3, [r3, #0]
    6ec2:	4a56      	ldr	r2, [pc, #344]	; (701c <prvTraceInitTraceData+0x20c>)
    6ec4:	4694      	mov	ip, r2
    6ec6:	4463      	add	r3, ip
    6ec8:	4955      	ldr	r1, [pc, #340]	; (7020 <prvTraceInitTraceData+0x210>)
    6eca:	2250      	movs	r2, #80	; 0x50
    6ecc:	0018      	movs	r0, r3
    6ece:	4b55      	ldr	r3, [pc, #340]	; (7024 <prvTraceInitTraceData+0x214>)
    6ed0:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    6ed2:	4b46      	ldr	r3, [pc, #280]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6ed4:	681b      	ldr	r3, [r3, #0]
    6ed6:	4a54      	ldr	r2, [pc, #336]	; (7028 <prvTraceInitTraceData+0x218>)
    6ed8:	4954      	ldr	r1, [pc, #336]	; (702c <prvTraceInitTraceData+0x21c>)
    6eda:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    6edc:	4b43      	ldr	r3, [pc, #268]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6ede:	681b      	ldr	r3, [r3, #0]
    6ee0:	4a53      	ldr	r2, [pc, #332]	; (7030 <prvTraceInitTraceData+0x220>)
    6ee2:	210a      	movs	r1, #10
    6ee4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    6ee6:	4b41      	ldr	r3, [pc, #260]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6ee8:	681b      	ldr	r3, [r3, #0]
    6eea:	4a52      	ldr	r2, [pc, #328]	; (7034 <prvTraceInitTraceData+0x224>)
    6eec:	210b      	movs	r1, #11
    6eee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    6ef0:	4b3e      	ldr	r3, [pc, #248]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6ef2:	681b      	ldr	r3, [r3, #0]
    6ef4:	4a50      	ldr	r2, [pc, #320]	; (7038 <prvTraceInitTraceData+0x228>)
    6ef6:	210c      	movs	r1, #12
    6ef8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    6efa:	4b3c      	ldr	r3, [pc, #240]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6efc:	681b      	ldr	r3, [r3, #0]
    6efe:	4a4f      	ldr	r2, [pc, #316]	; (703c <prvTraceInitTraceData+0x22c>)
    6f00:	210d      	movs	r1, #13
    6f02:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    6f04:	4b39      	ldr	r3, [pc, #228]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f06:	681b      	ldr	r3, [r3, #0]
    6f08:	4a4d      	ldr	r2, [pc, #308]	; (7040 <prvTraceInitTraceData+0x230>)
    6f0a:	2171      	movs	r1, #113	; 0x71
    6f0c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    6f0e:	4b37      	ldr	r3, [pc, #220]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f10:	681b      	ldr	r3, [r3, #0]
    6f12:	4a4c      	ldr	r2, [pc, #304]	; (7044 <prvTraceInitTraceData+0x234>)
    6f14:	2172      	movs	r1, #114	; 0x72
    6f16:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    6f18:	4b34      	ldr	r3, [pc, #208]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f1a:	681b      	ldr	r3, [r3, #0]
    6f1c:	4a4a      	ldr	r2, [pc, #296]	; (7048 <prvTraceInitTraceData+0x238>)
    6f1e:	2173      	movs	r1, #115	; 0x73
    6f20:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    6f22:	4b32      	ldr	r3, [pc, #200]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f24:	681b      	ldr	r3, [r3, #0]
    6f26:	4a49      	ldr	r2, [pc, #292]	; (704c <prvTraceInitTraceData+0x23c>)
    6f28:	2174      	movs	r1, #116	; 0x74
    6f2a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    6f2c:	4b2f      	ldr	r3, [pc, #188]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f2e:	681b      	ldr	r3, [r3, #0]
    6f30:	4a47      	ldr	r2, [pc, #284]	; (7050 <prvTraceInitTraceData+0x240>)
    6f32:	21f1      	movs	r1, #241	; 0xf1
    6f34:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    6f36:	4b2d      	ldr	r3, [pc, #180]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f38:	681b      	ldr	r3, [r3, #0]
    6f3a:	4a46      	ldr	r2, [pc, #280]	; (7054 <prvTraceInitTraceData+0x244>)
    6f3c:	21f2      	movs	r1, #242	; 0xf2
    6f3e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    6f40:	4b2a      	ldr	r3, [pc, #168]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f42:	681b      	ldr	r3, [r3, #0]
    6f44:	4a44      	ldr	r2, [pc, #272]	; (7058 <prvTraceInitTraceData+0x248>)
    6f46:	21f3      	movs	r1, #243	; 0xf3
    6f48:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    6f4a:	4b28      	ldr	r3, [pc, #160]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f4c:	681b      	ldr	r3, [r3, #0]
    6f4e:	4a43      	ldr	r2, [pc, #268]	; (705c <prvTraceInitTraceData+0x24c>)
    6f50:	21f4      	movs	r1, #244	; 0xf4
    6f52:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    6f54:	4b42      	ldr	r3, [pc, #264]	; (7060 <prvTraceInitTraceData+0x250>)
    6f56:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
    6f58:	4b24      	ldr	r3, [pc, #144]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f5a:	681b      	ldr	r3, [r3, #0]
    6f5c:	22f4      	movs	r2, #244	; 0xf4
    6f5e:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    6f60:	4b22      	ldr	r3, [pc, #136]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f62:	681b      	ldr	r3, [r3, #0]
    6f64:	22f3      	movs	r2, #243	; 0xf3
    6f66:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    6f68:	4b20      	ldr	r3, [pc, #128]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f6a:	681b      	ldr	r3, [r3, #0]
    6f6c:	22f2      	movs	r2, #242	; 0xf2
    6f6e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    6f70:	4b1e      	ldr	r3, [pc, #120]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f72:	681b      	ldr	r3, [r3, #0]
    6f74:	22f1      	movs	r2, #241	; 0xf1
    6f76:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    6f78:	4b1c      	ldr	r3, [pc, #112]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f7a:	681b      	ldr	r3, [r3, #0]
    6f7c:	2274      	movs	r2, #116	; 0x74
    6f7e:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    6f80:	4b1a      	ldr	r3, [pc, #104]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f82:	681b      	ldr	r3, [r3, #0]
    6f84:	2273      	movs	r2, #115	; 0x73
    6f86:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    6f88:	4b18      	ldr	r3, [pc, #96]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f8a:	681b      	ldr	r3, [r3, #0]
    6f8c:	2272      	movs	r2, #114	; 0x72
    6f8e:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    6f90:	4b16      	ldr	r3, [pc, #88]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f92:	681b      	ldr	r3, [r3, #0]
    6f94:	2271      	movs	r2, #113	; 0x71
    6f96:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    6f98:	4b14      	ldr	r3, [pc, #80]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6f9a:	681b      	ldr	r3, [r3, #0]
    6f9c:	2204      	movs	r2, #4
    6f9e:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    6fa0:	4b12      	ldr	r3, [pc, #72]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6fa2:	681b      	ldr	r3, [r3, #0]
    6fa4:	2203      	movs	r2, #3
    6fa6:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    6fa8:	4b10      	ldr	r3, [pc, #64]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6faa:	681b      	ldr	r3, [r3, #0]
    6fac:	2202      	movs	r2, #2
    6fae:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    6fb0:	4b0e      	ldr	r3, [pc, #56]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6fb2:	681b      	ldr	r3, [r3, #0]
    6fb4:	2201      	movs	r2, #1
    6fb6:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
    6fb8:	4b2a      	ldr	r3, [pc, #168]	; (7064 <prvTraceInitTraceData+0x254>)
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	d012      	beq.n	6fe6 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    6fc0:	4b0a      	ldr	r3, [pc, #40]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6fc2:	681b      	ldr	r3, [r3, #0]
    6fc4:	4a15      	ldr	r2, [pc, #84]	; (701c <prvTraceInitTraceData+0x20c>)
    6fc6:	1898      	adds	r0, r3, r2
    6fc8:	4b26      	ldr	r3, [pc, #152]	; (7064 <prvTraceInitTraceData+0x254>)
    6fca:	681b      	ldr	r3, [r3, #0]
    6fcc:	2250      	movs	r2, #80	; 0x50
    6fce:	0019      	movs	r1, r3
    6fd0:	4b14      	ldr	r3, [pc, #80]	; (7024 <prvTraceInitTraceData+0x214>)
    6fd2:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    6fd4:	4b05      	ldr	r3, [pc, #20]	; (6fec <prvTraceInitTraceData+0x1dc>)
    6fd6:	681b      	ldr	r3, [r3, #0]
    6fd8:	4a23      	ldr	r2, [pc, #140]	; (7068 <prvTraceInitTraceData+0x258>)
    6fda:	2101      	movs	r1, #1
    6fdc:	5099      	str	r1, [r3, r2]
		vTraceStop();
    6fde:	4b23      	ldr	r3, [pc, #140]	; (706c <prvTraceInitTraceData+0x25c>)
    6fe0:	4798      	blx	r3
    6fe2:	e000      	b.n	6fe6 <prvTraceInitTraceData+0x1d6>
			return;
    6fe4:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
    6fe6:	46bd      	mov	sp, r7
    6fe8:	bd80      	pop	{r7, pc}
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	20000e84 	.word	0x20000e84
    6ff0:	20004adc 	.word	0x20004adc
    6ff4:	e000e018 	.word	0xe000e018
    6ff8:	200056ac 	.word	0x200056ac
    6ffc:	00022dbb 	.word	0x00022dbb
    7000:	00001aa1 	.word	0x00001aa1
    7004:	f0f0f0f0 	.word	0xf0f0f0f0
    7008:	00005f75 	.word	0x00005f75
    700c:	0000055c 	.word	0x0000055c
    7010:	f1f1f1f1 	.word	0xf1f1f1f1
    7014:	00000564 	.word	0x00000564
    7018:	f2f2f2f2 	.word	0xf2f2f2f2
    701c:	000006bc 	.word	0x000006bc
    7020:	00026ac4 	.word	0x00026ac4
    7024:	00007385 	.word	0x00007385
    7028:	0000070c 	.word	0x0000070c
    702c:	f3f3f3f3 	.word	0xf3f3f3f3
    7030:	00000bc4 	.word	0x00000bc4
    7034:	00000bc5 	.word	0x00000bc5
    7038:	00000bc6 	.word	0x00000bc6
    703c:	00000bc7 	.word	0x00000bc7
    7040:	00000bc8 	.word	0x00000bc8
    7044:	00000bc9 	.word	0x00000bc9
    7048:	00000bca 	.word	0x00000bca
    704c:	00000bcb 	.word	0x00000bcb
    7050:	00000bcc 	.word	0x00000bcc
    7054:	00000bcd 	.word	0x00000bcd
    7058:	00000bce 	.word	0x00000bce
    705c:	00000bcf 	.word	0x00000bcf
    7060:	00006115 	.word	0x00006115
    7064:	20000de4 	.word	0x20000de4
    7068:	000006b4 	.word	0x000006b4
    706c:	0000637d 	.word	0x0000637d

00007070 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
    7070:	b580      	push	{r7, lr}
    7072:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
    7074:	4b10      	ldr	r3, [pc, #64]	; (70b8 <prvTraceNextFreeEventBufferSlot+0x48>)
    7076:	681b      	ldr	r3, [r3, #0]
    7078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    707a:	2b00      	cmp	r3, #0
    707c:	d101      	bne.n	7082 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
    707e:	2300      	movs	r3, #0
    7080:	e017      	b.n	70b2 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    7082:	4b0d      	ldr	r3, [pc, #52]	; (70b8 <prvTraceNextFreeEventBufferSlot+0x48>)
    7084:	681b      	ldr	r3, [r3, #0]
    7086:	69da      	ldr	r2, [r3, #28]
    7088:	232c      	movs	r3, #44	; 0x2c
    708a:	33ff      	adds	r3, #255	; 0xff
    708c:	429a      	cmp	r2, r3
    708e:	d905      	bls.n	709c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
    7090:	4b0a      	ldr	r3, [pc, #40]	; (70bc <prvTraceNextFreeEventBufferSlot+0x4c>)
    7092:	0018      	movs	r0, r3
    7094:	4b0a      	ldr	r3, [pc, #40]	; (70c0 <prvTraceNextFreeEventBufferSlot+0x50>)
    7096:	4798      	blx	r3
		return NULL;
    7098:	2300      	movs	r3, #0
    709a:	e00a      	b.n	70b2 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    709c:	4b06      	ldr	r3, [pc, #24]	; (70b8 <prvTraceNextFreeEventBufferSlot+0x48>)
    709e:	681a      	ldr	r2, [r3, #0]
    70a0:	4b05      	ldr	r3, [pc, #20]	; (70b8 <prvTraceNextFreeEventBufferSlot+0x48>)
    70a2:	681b      	ldr	r3, [r3, #0]
    70a4:	69db      	ldr	r3, [r3, #28]
    70a6:	009b      	lsls	r3, r3, #2
    70a8:	21e2      	movs	r1, #226	; 0xe2
    70aa:	00c9      	lsls	r1, r1, #3
    70ac:	468c      	mov	ip, r1
    70ae:	4463      	add	r3, ip
    70b0:	18d3      	adds	r3, r2, r3
}
    70b2:	0018      	movs	r0, r3
    70b4:	46bd      	mov	sp, r7
    70b6:	bd80      	pop	{r7, pc}
    70b8:	20000e84 	.word	0x20000e84
    70bc:	00026ad8 	.word	0x00026ad8
    70c0:	000074b9 	.word	0x000074b9

000070c4 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
    70c4:	b580      	push	{r7, lr}
    70c6:	b082      	sub	sp, #8
    70c8:	af00      	add	r7, sp, #0
    70ca:	0002      	movs	r2, r0
    70cc:	1dfb      	adds	r3, r7, #7
    70ce:	701a      	strb	r2, [r3, #0]
    70d0:	1dbb      	adds	r3, r7, #6
    70d2:	1c0a      	adds	r2, r1, #0
    70d4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    70d6:	1dbb      	adds	r3, r7, #6
    70d8:	781b      	ldrb	r3, [r3, #0]
    70da:	2b08      	cmp	r3, #8
    70dc:	d905      	bls.n	70ea <uiIndexOfObject+0x26>
    70de:	4b2a      	ldr	r3, [pc, #168]	; (7188 <uiIndexOfObject+0xc4>)
    70e0:	0018      	movs	r0, r3
    70e2:	4b2a      	ldr	r3, [pc, #168]	; (718c <uiIndexOfObject+0xc8>)
    70e4:	4798      	blx	r3
    70e6:	2300      	movs	r3, #0
    70e8:	e049      	b.n	717e <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    70ea:	1dfb      	adds	r3, r7, #7
    70ec:	781b      	ldrb	r3, [r3, #0]
    70ee:	2b00      	cmp	r3, #0
    70f0:	d00b      	beq.n	710a <uiIndexOfObject+0x46>
    70f2:	4b27      	ldr	r3, [pc, #156]	; (7190 <uiIndexOfObject+0xcc>)
    70f4:	681a      	ldr	r2, [r3, #0]
    70f6:	1dbb      	adds	r3, r7, #6
    70f8:	781b      	ldrb	r3, [r3, #0]
    70fa:	2164      	movs	r1, #100	; 0x64
    70fc:	18d3      	adds	r3, r2, r3
    70fe:	185b      	adds	r3, r3, r1
    7100:	781b      	ldrb	r3, [r3, #0]
    7102:	1dfa      	adds	r2, r7, #7
    7104:	7812      	ldrb	r2, [r2, #0]
    7106:	429a      	cmp	r2, r3
    7108:	d905      	bls.n	7116 <uiIndexOfObject+0x52>
    710a:	4b22      	ldr	r3, [pc, #136]	; (7194 <uiIndexOfObject+0xd0>)
    710c:	0018      	movs	r0, r3
    710e:	4b1f      	ldr	r3, [pc, #124]	; (718c <uiIndexOfObject+0xc8>)
    7110:	4798      	blx	r3
    7112:	2300      	movs	r3, #0
    7114:	e033      	b.n	717e <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    7116:	1dbb      	adds	r3, r7, #6
    7118:	781b      	ldrb	r3, [r3, #0]
    711a:	2b08      	cmp	r3, #8
    711c:	d82a      	bhi.n	7174 <uiIndexOfObject+0xb0>
    711e:	1dfb      	adds	r3, r7, #7
    7120:	781b      	ldrb	r3, [r3, #0]
    7122:	2b00      	cmp	r3, #0
    7124:	d026      	beq.n	7174 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
    7126:	4b1a      	ldr	r3, [pc, #104]	; (7190 <uiIndexOfObject+0xcc>)
    7128:	681a      	ldr	r2, [r3, #0]
    712a:	1dbb      	adds	r3, r7, #6
    712c:	781b      	ldrb	r3, [r3, #0]
    712e:	2164      	movs	r1, #100	; 0x64
    7130:	18d3      	adds	r3, r2, r3
    7132:	185b      	adds	r3, r3, r1
    7134:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    7136:	1dfa      	adds	r2, r7, #7
    7138:	7812      	ldrb	r2, [r2, #0]
    713a:	429a      	cmp	r2, r3
    713c:	d81a      	bhi.n	7174 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    713e:	4b14      	ldr	r3, [pc, #80]	; (7190 <uiIndexOfObject+0xcc>)
    7140:	681a      	ldr	r2, [r3, #0]
    7142:	1dbb      	adds	r3, r7, #6
    7144:	781b      	ldrb	r3, [r3, #0]
    7146:	3340      	adds	r3, #64	; 0x40
    7148:	005b      	lsls	r3, r3, #1
    714a:	18d3      	adds	r3, r2, r3
    714c:	3308      	adds	r3, #8
    714e:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    7150:	4b0f      	ldr	r3, [pc, #60]	; (7190 <uiIndexOfObject+0xcc>)
    7152:	6819      	ldr	r1, [r3, #0]
    7154:	1dbb      	adds	r3, r7, #6
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	207c      	movs	r0, #124	; 0x7c
    715a:	18cb      	adds	r3, r1, r3
    715c:	181b      	adds	r3, r3, r0
    715e:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    7160:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    7162:	1df9      	adds	r1, r7, #7
    7164:	7809      	ldrb	r1, [r1, #0]
    7166:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    7168:	b289      	uxth	r1, r1
    716a:	434b      	muls	r3, r1
    716c:	b29b      	uxth	r3, r3
    716e:	18d3      	adds	r3, r2, r3
    7170:	b29b      	uxth	r3, r3
    7172:	e004      	b.n	717e <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
    7174:	4b08      	ldr	r3, [pc, #32]	; (7198 <uiIndexOfObject+0xd4>)
    7176:	0018      	movs	r0, r3
    7178:	4b04      	ldr	r3, [pc, #16]	; (718c <uiIndexOfObject+0xc8>)
    717a:	4798      	blx	r3
	return 0;
    717c:	2300      	movs	r3, #0
}
    717e:	0018      	movs	r0, r3
    7180:	46bd      	mov	sp, r7
    7182:	b002      	add	sp, #8
    7184:	bd80      	pop	{r7, pc}
    7186:	46c0      	nop			; (mov r8, r8)
    7188:	00026b00 	.word	0x00026b00
    718c:	000074b9 	.word	0x000074b9
    7190:	20000e84 	.word	0x20000e84
    7194:	00026b40 	.word	0x00026b40
    7198:	00026b80 	.word	0x00026b80

0000719c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
    719c:	b580      	push	{r7, lr}
    719e:	b088      	sub	sp, #32
    71a0:	af00      	add	r7, sp, #0
    71a2:	0002      	movs	r2, r0
    71a4:	1dfb      	adds	r3, r7, #7
    71a6:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    71a8:	4b5a      	ldr	r3, [pc, #360]	; (7314 <prvTraceGetObjectHandle+0x178>)
    71aa:	681b      	ldr	r3, [r3, #0]
    71ac:	2b00      	cmp	r3, #0
    71ae:	d105      	bne.n	71bc <prvTraceGetObjectHandle+0x20>
    71b0:	4b59      	ldr	r3, [pc, #356]	; (7318 <prvTraceGetObjectHandle+0x17c>)
    71b2:	0018      	movs	r0, r3
    71b4:	4b59      	ldr	r3, [pc, #356]	; (731c <prvTraceGetObjectHandle+0x180>)
    71b6:	4798      	blx	r3
    71b8:	2300      	movs	r3, #0
    71ba:	e0a7      	b.n	730c <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    71bc:	1dfb      	adds	r3, r7, #7
    71be:	781b      	ldrb	r3, [r3, #0]
    71c0:	2b08      	cmp	r3, #8
    71c2:	d905      	bls.n	71d0 <prvTraceGetObjectHandle+0x34>
    71c4:	4b56      	ldr	r3, [pc, #344]	; (7320 <prvTraceGetObjectHandle+0x184>)
    71c6:	0018      	movs	r0, r3
    71c8:	4b54      	ldr	r3, [pc, #336]	; (731c <prvTraceGetObjectHandle+0x180>)
    71ca:	4798      	blx	r3
    71cc:	2300      	movs	r3, #0
    71ce:	e09d      	b.n	730c <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    71d0:	f3ef 8310 	mrs	r3, PRIMASK
    71d4:	60fb      	str	r3, [r7, #12]
  return(result);
    71d6:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
    71d8:	61bb      	str	r3, [r7, #24]
    71da:	2301      	movs	r3, #1
    71dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    71de:	693b      	ldr	r3, [r7, #16]
    71e0:	f383 8810 	msr	PRIMASK, r3
    71e4:	4b4f      	ldr	r3, [pc, #316]	; (7324 <prvTraceGetObjectHandle+0x188>)
    71e6:	681b      	ldr	r3, [r3, #0]
    71e8:	1c5a      	adds	r2, r3, #1
    71ea:	4b4e      	ldr	r3, [pc, #312]	; (7324 <prvTraceGetObjectHandle+0x188>)
    71ec:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    71ee:	1dfb      	adds	r3, r7, #7
    71f0:	781a      	ldrb	r2, [r3, #0]
    71f2:	4b4d      	ldr	r3, [pc, #308]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    71f4:	0052      	lsls	r2, r2, #1
    71f6:	5ad3      	ldrh	r3, [r2, r3]
    71f8:	001a      	movs	r2, r3
    71fa:	4b4c      	ldr	r3, [pc, #304]	; (732c <prvTraceGetObjectHandle+0x190>)
    71fc:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    71fe:	4b4b      	ldr	r3, [pc, #300]	; (732c <prvTraceGetObjectHandle+0x190>)
    7200:	681b      	ldr	r3, [r3, #0]
    7202:	4a49      	ldr	r2, [pc, #292]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    7204:	2148      	movs	r1, #72	; 0x48
    7206:	18d3      	adds	r3, r2, r3
    7208:	185b      	adds	r3, r3, r1
    720a:	781b      	ldrb	r3, [r3, #0]
    720c:	2b00      	cmp	r3, #0
    720e:	d117      	bne.n	7240 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    7210:	4b46      	ldr	r3, [pc, #280]	; (732c <prvTraceGetObjectHandle+0x190>)
    7212:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    7214:	4b45      	ldr	r3, [pc, #276]	; (732c <prvTraceGetObjectHandle+0x190>)
    7216:	681b      	ldr	r3, [r3, #0]
    7218:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    721a:	1dfb      	adds	r3, r7, #7
    721c:	781b      	ldrb	r3, [r3, #0]
    721e:	4842      	ldr	r0, [pc, #264]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    7220:	3308      	adds	r3, #8
    7222:	005b      	lsls	r3, r3, #1
    7224:	18c3      	adds	r3, r0, r3
    7226:	3302      	adds	r3, #2
    7228:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    722a:	b2db      	uxtb	r3, r3
    722c:	1acb      	subs	r3, r1, r3
    722e:	b2db      	uxtb	r3, r3
    7230:	3301      	adds	r3, #1
    7232:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
    7234:	4b3c      	ldr	r3, [pc, #240]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    7236:	2148      	movs	r1, #72	; 0x48
    7238:	189b      	adds	r3, r3, r2
    723a:	185b      	adds	r3, r3, r1
    723c:	1c02      	adds	r2, r0, #0
    723e:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    7240:	4b3a      	ldr	r3, [pc, #232]	; (732c <prvTraceGetObjectHandle+0x190>)
    7242:	681a      	ldr	r2, [r3, #0]
    7244:	231f      	movs	r3, #31
    7246:	18fb      	adds	r3, r7, r3
    7248:	4937      	ldr	r1, [pc, #220]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    724a:	2048      	movs	r0, #72	; 0x48
    724c:	188a      	adds	r2, r1, r2
    724e:	1812      	adds	r2, r2, r0
    7250:	7812      	ldrb	r2, [r2, #0]
    7252:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    7254:	1dfb      	adds	r3, r7, #7
    7256:	781a      	ldrb	r2, [r3, #0]
    7258:	4b33      	ldr	r3, [pc, #204]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    725a:	0052      	lsls	r2, r2, #1
    725c:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    725e:	1dfb      	adds	r3, r7, #7
    7260:	781b      	ldrb	r3, [r3, #0]
    7262:	4931      	ldr	r1, [pc, #196]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    7264:	3310      	adds	r3, #16
    7266:	005b      	lsls	r3, r3, #1
    7268:	18cb      	adds	r3, r1, r3
    726a:	3304      	adds	r3, #4
    726c:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    726e:	429a      	cmp	r2, r3
    7270:	d90d      	bls.n	728e <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    7272:	1dfb      	adds	r3, r7, #7
    7274:	781b      	ldrb	r3, [r3, #0]
    7276:	0018      	movs	r0, r3
    7278:	4b2d      	ldr	r3, [pc, #180]	; (7330 <prvTraceGetObjectHandle+0x194>)
    727a:	4798      	blx	r3
    727c:	0003      	movs	r3, r0
    727e:	0018      	movs	r0, r3
    7280:	4b26      	ldr	r3, [pc, #152]	; (731c <prvTraceGetObjectHandle+0x180>)
    7282:	4798      	blx	r3
		handle = 0;
    7284:	231f      	movs	r3, #31
    7286:	18fb      	adds	r3, r7, r3
    7288:	2200      	movs	r2, #0
    728a:	701a      	strb	r2, [r3, #0]
    728c:	e031      	b.n	72f2 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    728e:	1dfb      	adds	r3, r7, #7
    7290:	781b      	ldrb	r3, [r3, #0]
    7292:	4a25      	ldr	r2, [pc, #148]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    7294:	0059      	lsls	r1, r3, #1
    7296:	5a8a      	ldrh	r2, [r1, r2]
    7298:	3201      	adds	r2, #1
    729a:	b291      	uxth	r1, r2
    729c:	4a22      	ldr	r2, [pc, #136]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    729e:	005b      	lsls	r3, r3, #1
    72a0:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    72a2:	1dfb      	adds	r3, r7, #7
    72a4:	781a      	ldrb	r2, [r3, #0]
    72a6:	4b20      	ldr	r3, [pc, #128]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    72a8:	0052      	lsls	r2, r2, #1
    72aa:	5ad3      	ldrh	r3, [r2, r3]
    72ac:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
    72ae:	1dfb      	adds	r3, r7, #7
    72b0:	781b      	ldrb	r3, [r3, #0]
    72b2:	4a1d      	ldr	r2, [pc, #116]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    72b4:	3308      	adds	r3, #8
    72b6:	005b      	lsls	r3, r3, #1
    72b8:	18d3      	adds	r3, r2, r3
    72ba:	3302      	adds	r3, #2
    72bc:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    72be:	1acb      	subs	r3, r1, r3
    72c0:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    72c2:	1dfb      	adds	r3, r7, #7
    72c4:	781b      	ldrb	r3, [r3, #0]
    72c6:	4a18      	ldr	r2, [pc, #96]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    72c8:	3318      	adds	r3, #24
    72ca:	005b      	lsls	r3, r3, #1
    72cc:	18d3      	adds	r3, r2, r3
    72ce:	3306      	adds	r3, #6
    72d0:	881b      	ldrh	r3, [r3, #0]
    72d2:	001a      	movs	r2, r3
		if (hndCount >
    72d4:	697b      	ldr	r3, [r7, #20]
    72d6:	429a      	cmp	r2, r3
    72d8:	da0b      	bge.n	72f2 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    72da:	1dfb      	adds	r3, r7, #7
    72dc:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
    72de:	697a      	ldr	r2, [r7, #20]
    72e0:	b2d2      	uxtb	r2, r2
    72e2:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    72e4:	4a10      	ldr	r2, [pc, #64]	; (7328 <prvTraceGetObjectHandle+0x18c>)
    72e6:	3318      	adds	r3, #24
    72e8:	005b      	lsls	r3, r3, #1
    72ea:	18d3      	adds	r3, r2, r3
    72ec:	3306      	adds	r3, #6
    72ee:	1c0a      	adds	r2, r1, #0
    72f0:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
    72f2:	4b0c      	ldr	r3, [pc, #48]	; (7324 <prvTraceGetObjectHandle+0x188>)
    72f4:	681b      	ldr	r3, [r3, #0]
    72f6:	1e5a      	subs	r2, r3, #1
    72f8:	4b0a      	ldr	r3, [pc, #40]	; (7324 <prvTraceGetObjectHandle+0x188>)
    72fa:	601a      	str	r2, [r3, #0]
    72fc:	69bb      	ldr	r3, [r7, #24]
    72fe:	60bb      	str	r3, [r7, #8]
    7300:	68bb      	ldr	r3, [r7, #8]
    7302:	f383 8810 	msr	PRIMASK, r3

	return handle;
    7306:	231f      	movs	r3, #31
    7308:	18fb      	adds	r3, r7, r3
    730a:	781b      	ldrb	r3, [r3, #0]
}
    730c:	0018      	movs	r0, r3
    730e:	46bd      	mov	sp, r7
    7310:	b008      	add	sp, #32
    7312:	bd80      	pop	{r7, pc}
    7314:	20000e84 	.word	0x20000e84
    7318:	00025fe0 	.word	0x00025fe0
    731c:	000074b9 	.word	0x000074b9
    7320:	00026bc0 	.word	0x00026bc0
    7324:	20000ddc 	.word	0x20000ddc
    7328:	20000df4 	.word	0x20000df4
    732c:	20000e88 	.word	0x20000e88
    7330:	000061d9 	.word	0x000061d9

00007334 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
    7334:	b590      	push	{r4, r7, lr}
    7336:	b085      	sub	sp, #20
    7338:	af00      	add	r7, sp, #0
    733a:	0002      	movs	r2, r0
    733c:	1dfb      	adds	r3, r7, #7
    733e:	701a      	strb	r2, [r3, #0]
    7340:	1dbb      	adds	r3, r7, #6
    7342:	1c0a      	adds	r2, r1, #0
    7344:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    7346:	230e      	movs	r3, #14
    7348:	18fc      	adds	r4, r7, r3
    734a:	1dfb      	adds	r3, r7, #7
    734c:	781a      	ldrb	r2, [r3, #0]
    734e:	1dbb      	adds	r3, r7, #6
    7350:	781b      	ldrb	r3, [r3, #0]
    7352:	0011      	movs	r1, r2
    7354:	0018      	movs	r0, r3
    7356:	4b09      	ldr	r3, [pc, #36]	; (737c <prvMarkObjectAsUsed+0x48>)
    7358:	4798      	blx	r3
    735a:	0003      	movs	r3, r0
    735c:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    735e:	4b08      	ldr	r3, [pc, #32]	; (7380 <prvMarkObjectAsUsed+0x4c>)
    7360:	681a      	ldr	r2, [r3, #0]
    7362:	230e      	movs	r3, #14
    7364:	18fb      	adds	r3, r7, r3
    7366:	881b      	ldrh	r3, [r3, #0]
    7368:	219c      	movs	r1, #156	; 0x9c
    736a:	18d3      	adds	r3, r2, r3
    736c:	185b      	adds	r3, r3, r1
    736e:	2201      	movs	r2, #1
    7370:	701a      	strb	r2, [r3, #0]
}
    7372:	46c0      	nop			; (mov r8, r8)
    7374:	46bd      	mov	sp, r7
    7376:	b005      	add	sp, #20
    7378:	bd90      	pop	{r4, r7, pc}
    737a:	46c0      	nop			; (mov r8, r8)
    737c:	000070c5 	.word	0x000070c5
    7380:	20000e84 	.word	0x20000e84

00007384 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    7384:	b580      	push	{r7, lr}
    7386:	b086      	sub	sp, #24
    7388:	af00      	add	r7, sp, #0
    738a:	60f8      	str	r0, [r7, #12]
    738c:	60b9      	str	r1, [r7, #8]
    738e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    7390:	2300      	movs	r3, #0
    7392:	617b      	str	r3, [r7, #20]
    7394:	e010      	b.n	73b8 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
    7396:	68fa      	ldr	r2, [r7, #12]
    7398:	697b      	ldr	r3, [r7, #20]
    739a:	18d3      	adds	r3, r2, r3
    739c:	68b9      	ldr	r1, [r7, #8]
    739e:	697a      	ldr	r2, [r7, #20]
    73a0:	188a      	adds	r2, r1, r2
    73a2:	7812      	ldrb	r2, [r2, #0]
    73a4:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
    73a6:	68ba      	ldr	r2, [r7, #8]
    73a8:	697b      	ldr	r3, [r7, #20]
    73aa:	18d3      	adds	r3, r2, r3
    73ac:	781b      	ldrb	r3, [r3, #0]
    73ae:	2b00      	cmp	r3, #0
    73b0:	d007      	beq.n	73c2 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
    73b2:	697b      	ldr	r3, [r7, #20]
    73b4:	3301      	adds	r3, #1
    73b6:	617b      	str	r3, [r7, #20]
    73b8:	697a      	ldr	r2, [r7, #20]
    73ba:	687b      	ldr	r3, [r7, #4]
    73bc:	429a      	cmp	r2, r3
    73be:	d3ea      	bcc.n	7396 <prvStrncpy+0x12>
			break;
	}
}
    73c0:	e000      	b.n	73c4 <prvStrncpy+0x40>
			break;
    73c2:	46c0      	nop			; (mov r8, r8)
}
    73c4:	46c0      	nop			; (mov r8, r8)
    73c6:	46bd      	mov	sp, r7
    73c8:	b006      	add	sp, #24
    73ca:	bd80      	pop	{r7, pc}

000073cc <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
    73cc:	b580      	push	{r7, lr}
    73ce:	b082      	sub	sp, #8
    73d0:	af00      	add	r7, sp, #0
    73d2:	603a      	str	r2, [r7, #0]
    73d4:	1dfb      	adds	r3, r7, #7
    73d6:	1c02      	adds	r2, r0, #0
    73d8:	701a      	strb	r2, [r3, #0]
    73da:	1dbb      	adds	r3, r7, #6
    73dc:	1c0a      	adds	r2, r1, #0
    73de:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    73e0:	683b      	ldr	r3, [r7, #0]
    73e2:	2b00      	cmp	r3, #0
    73e4:	d104      	bne.n	73f0 <prvTraceSetObjectName+0x24>
    73e6:	4b2a      	ldr	r3, [pc, #168]	; (7490 <prvTraceSetObjectName+0xc4>)
    73e8:	0018      	movs	r0, r3
    73ea:	4b2a      	ldr	r3, [pc, #168]	; (7494 <prvTraceSetObjectName+0xc8>)
    73ec:	4798      	blx	r3
    73ee:	e04b      	b.n	7488 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
    73f0:	1dfb      	adds	r3, r7, #7
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	2b08      	cmp	r3, #8
    73f6:	d904      	bls.n	7402 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    73f8:	4b27      	ldr	r3, [pc, #156]	; (7498 <prvTraceSetObjectName+0xcc>)
    73fa:	0018      	movs	r0, r3
    73fc:	4b25      	ldr	r3, [pc, #148]	; (7494 <prvTraceSetObjectName+0xc8>)
    73fe:	4798      	blx	r3
		return;
    7400:	e042      	b.n	7488 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
    7402:	1dbb      	adds	r3, r7, #6
    7404:	781b      	ldrb	r3, [r3, #0]
    7406:	2b00      	cmp	r3, #0
    7408:	d104      	bne.n	7414 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    740a:	4b24      	ldr	r3, [pc, #144]	; (749c <prvTraceSetObjectName+0xd0>)
    740c:	0018      	movs	r0, r3
    740e:	4b21      	ldr	r3, [pc, #132]	; (7494 <prvTraceSetObjectName+0xc8>)
    7410:	4798      	blx	r3
		return;
    7412:	e039      	b.n	7488 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    7414:	4b22      	ldr	r3, [pc, #136]	; (74a0 <prvTraceSetObjectName+0xd4>)
    7416:	681a      	ldr	r2, [r3, #0]
    7418:	1dfb      	adds	r3, r7, #7
    741a:	781b      	ldrb	r3, [r3, #0]
    741c:	2164      	movs	r1, #100	; 0x64
    741e:	18d3      	adds	r3, r2, r3
    7420:	185b      	adds	r3, r3, r1
    7422:	781b      	ldrb	r3, [r3, #0]
    7424:	1dba      	adds	r2, r7, #6
    7426:	7812      	ldrb	r2, [r2, #0]
    7428:	429a      	cmp	r2, r3
    742a:	d909      	bls.n	7440 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    742c:	1dfb      	adds	r3, r7, #7
    742e:	781b      	ldrb	r3, [r3, #0]
    7430:	0018      	movs	r0, r3
    7432:	4b1c      	ldr	r3, [pc, #112]	; (74a4 <prvTraceSetObjectName+0xd8>)
    7434:	4798      	blx	r3
    7436:	0003      	movs	r3, r0
    7438:	0018      	movs	r0, r3
    743a:	4b16      	ldr	r3, [pc, #88]	; (7494 <prvTraceSetObjectName+0xc8>)
    743c:	4798      	blx	r3
    743e:	e023      	b.n	7488 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    7440:	1dfb      	adds	r3, r7, #7
    7442:	781a      	ldrb	r2, [r3, #0]
    7444:	1dbb      	adds	r3, r7, #6
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	0011      	movs	r1, r2
    744a:	0018      	movs	r0, r3
    744c:	4b16      	ldr	r3, [pc, #88]	; (74a8 <prvTraceSetObjectName+0xdc>)
    744e:	4798      	blx	r3
    7450:	0003      	movs	r3, r0
    7452:	001a      	movs	r2, r3
    7454:	4b15      	ldr	r3, [pc, #84]	; (74ac <prvTraceSetObjectName+0xe0>)
    7456:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
    7458:	4b15      	ldr	r3, [pc, #84]	; (74b0 <prvTraceSetObjectName+0xe4>)
    745a:	681b      	ldr	r3, [r3, #0]
    745c:	2b00      	cmp	r3, #0
    745e:	d113      	bne.n	7488 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    7460:	4b0f      	ldr	r3, [pc, #60]	; (74a0 <prvTraceSetObjectName+0xd4>)
    7462:	681a      	ldr	r2, [r3, #0]
    7464:	4b11      	ldr	r3, [pc, #68]	; (74ac <prvTraceSetObjectName+0xe0>)
    7466:	881b      	ldrh	r3, [r3, #0]
    7468:	3398      	adds	r3, #152	; 0x98
    746a:	18d3      	adds	r3, r2, r3
    746c:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    746e:	4b0c      	ldr	r3, [pc, #48]	; (74a0 <prvTraceSetObjectName+0xd4>)
    7470:	681a      	ldr	r2, [r3, #0]
    7472:	1dfb      	adds	r3, r7, #7
    7474:	781b      	ldrb	r3, [r3, #0]
    7476:	2170      	movs	r1, #112	; 0x70
    7478:	18d3      	adds	r3, r2, r3
    747a:	185b      	adds	r3, r3, r1
    747c:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    747e:	001a      	movs	r2, r3
    7480:	683b      	ldr	r3, [r7, #0]
    7482:	0019      	movs	r1, r3
    7484:	4b0b      	ldr	r3, [pc, #44]	; (74b4 <prvTraceSetObjectName+0xe8>)
    7486:	4798      	blx	r3
		}
	}
}
    7488:	46bd      	mov	sp, r7
    748a:	b002      	add	sp, #8
    748c:	bd80      	pop	{r7, pc}
    748e:	46c0      	nop			; (mov r8, r8)
    7490:	00026cc4 	.word	0x00026cc4
    7494:	000074b9 	.word	0x000074b9
    7498:	00026cf8 	.word	0x00026cf8
    749c:	00026d28 	.word	0x00026d28
    74a0:	20000e84 	.word	0x20000e84
    74a4:	000061d9 	.word	0x000061d9
    74a8:	000070c5 	.word	0x000070c5
    74ac:	20000e8c 	.word	0x20000e8c
    74b0:	20000de4 	.word	0x20000de4
    74b4:	00007385 	.word	0x00007385

000074b8 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    74b8:	b580      	push	{r7, lr}
    74ba:	b082      	sub	sp, #8
    74bc:	af00      	add	r7, sp, #0
    74be:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    74c0:	4b11      	ldr	r3, [pc, #68]	; (7508 <prvTraceError+0x50>)
    74c2:	681b      	ldr	r3, [r3, #0]
    74c4:	2b00      	cmp	r3, #0
    74c6:	d001      	beq.n	74cc <prvTraceError+0x14>
	{
		vTraceStop();
    74c8:	4b10      	ldr	r3, [pc, #64]	; (750c <prvTraceError+0x54>)
    74ca:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    74cc:	4b10      	ldr	r3, [pc, #64]	; (7510 <prvTraceError+0x58>)
    74ce:	681b      	ldr	r3, [r3, #0]
    74d0:	2b00      	cmp	r3, #0
    74d2:	d115      	bne.n	7500 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
    74d4:	4b0e      	ldr	r3, [pc, #56]	; (7510 <prvTraceError+0x58>)
    74d6:	687a      	ldr	r2, [r7, #4]
    74d8:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
    74da:	4b0b      	ldr	r3, [pc, #44]	; (7508 <prvTraceError+0x50>)
    74dc:	681b      	ldr	r3, [r3, #0]
    74de:	2b00      	cmp	r3, #0
    74e0:	d00e      	beq.n	7500 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    74e2:	4b09      	ldr	r3, [pc, #36]	; (7508 <prvTraceError+0x50>)
    74e4:	681b      	ldr	r3, [r3, #0]
    74e6:	4a0b      	ldr	r2, [pc, #44]	; (7514 <prvTraceError+0x5c>)
    74e8:	1898      	adds	r0, r3, r2
    74ea:	4b09      	ldr	r3, [pc, #36]	; (7510 <prvTraceError+0x58>)
    74ec:	681b      	ldr	r3, [r3, #0]
    74ee:	2250      	movs	r2, #80	; 0x50
    74f0:	0019      	movs	r1, r3
    74f2:	4b09      	ldr	r3, [pc, #36]	; (7518 <prvTraceError+0x60>)
    74f4:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    74f6:	4b04      	ldr	r3, [pc, #16]	; (7508 <prvTraceError+0x50>)
    74f8:	681b      	ldr	r3, [r3, #0]
    74fa:	4a08      	ldr	r2, [pc, #32]	; (751c <prvTraceError+0x64>)
    74fc:	2101      	movs	r1, #1
    74fe:	5099      	str	r1, [r3, r2]
		}
	}
}
    7500:	46c0      	nop			; (mov r8, r8)
    7502:	46bd      	mov	sp, r7
    7504:	b002      	add	sp, #8
    7506:	bd80      	pop	{r7, pc}
    7508:	20000e84 	.word	0x20000e84
    750c:	0000637d 	.word	0x0000637d
    7510:	20000de4 	.word	0x20000de4
    7514:	000006bc 	.word	0x000006bc
    7518:	00007385 	.word	0x00007385
    751c:	000006b4 	.word	0x000006b4

00007520 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    7520:	b580      	push	{r7, lr}
    7522:	b086      	sub	sp, #24
    7524:	af00      	add	r7, sp, #0
    7526:	0002      	movs	r2, r0
    7528:	1dfb      	adds	r3, r7, #7
    752a:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
    752c:	2300      	movs	r3, #0
    752e:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
    7530:	2300      	movs	r3, #0
    7532:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    7534:	1dfb      	adds	r3, r7, #7
    7536:	781b      	ldrb	r3, [r3, #0]
    7538:	2b00      	cmp	r3, #0
    753a:	d000      	beq.n	753e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    753c:	e089      	b.n	7652 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
    753e:	4b49      	ldr	r3, [pc, #292]	; (7664 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    7540:	0018      	movs	r0, r3
    7542:	4b49      	ldr	r3, [pc, #292]	; (7668 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
    7544:	4798      	blx	r3
    7546:	e08a      	b.n	765e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    7548:	4b48      	ldr	r3, [pc, #288]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    754a:	681b      	ldr	r3, [r3, #0]
    754c:	69da      	ldr	r2, [r3, #28]
    754e:	697b      	ldr	r3, [r7, #20]
    7550:	18d3      	adds	r3, r2, r3
    7552:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    7554:	4b45      	ldr	r3, [pc, #276]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    7556:	6819      	ldr	r1, [r3, #0]
    7558:	693b      	ldr	r3, [r7, #16]
    755a:	009a      	lsls	r2, r3, #2
    755c:	23e2      	movs	r3, #226	; 0xe2
    755e:	00db      	lsls	r3, r3, #3
    7560:	188a      	adds	r2, r1, r2
    7562:	18d3      	adds	r3, r2, r3
    7564:	781b      	ldrb	r3, [r3, #0]
    7566:	2b98      	cmp	r3, #152	; 0x98
    7568:	d934      	bls.n	75d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
    756a:	4b40      	ldr	r3, [pc, #256]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    756c:	6819      	ldr	r1, [r3, #0]
    756e:	693b      	ldr	r3, [r7, #16]
    7570:	009a      	lsls	r2, r3, #2
    7572:	23e2      	movs	r3, #226	; 0xe2
    7574:	00db      	lsls	r3, r3, #3
    7576:	188a      	adds	r2, r1, r2
    7578:	18d3      	adds	r3, r2, r3
    757a:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    757c:	2ba7      	cmp	r3, #167	; 0xa7
    757e:	d829      	bhi.n	75d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    7580:	4b3a      	ldr	r3, [pc, #232]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    7582:	6819      	ldr	r1, [r3, #0]
    7584:	693b      	ldr	r3, [r7, #16]
    7586:	009a      	lsls	r2, r3, #2
    7588:	23e2      	movs	r3, #226	; 0xe2
    758a:	00db      	lsls	r3, r3, #3
    758c:	188a      	adds	r2, r1, r2
    758e:	18d3      	adds	r3, r2, r3
    7590:	781a      	ldrb	r2, [r3, #0]
    7592:	230f      	movs	r3, #15
    7594:	18fb      	adds	r3, r7, r3
    7596:	3268      	adds	r2, #104	; 0x68
    7598:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    759a:	230f      	movs	r3, #15
    759c:	18fb      	adds	r3, r7, r3
    759e:	781a      	ldrb	r2, [r3, #0]
    75a0:	693b      	ldr	r3, [r7, #16]
    75a2:	18d2      	adds	r2, r2, r3
    75a4:	4b31      	ldr	r3, [pc, #196]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    75a6:	681b      	ldr	r3, [r3, #0]
    75a8:	699b      	ldr	r3, [r3, #24]
    75aa:	429a      	cmp	r2, r3
    75ac:	d24d      	bcs.n	764a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    75ae:	4b2f      	ldr	r3, [pc, #188]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    75b0:	681a      	ldr	r2, [r3, #0]
    75b2:	693b      	ldr	r3, [r7, #16]
    75b4:	009b      	lsls	r3, r3, #2
    75b6:	21e2      	movs	r1, #226	; 0xe2
    75b8:	00c9      	lsls	r1, r1, #3
    75ba:	468c      	mov	ip, r1
    75bc:	4463      	add	r3, ip
    75be:	18d0      	adds	r0, r2, r3
    75c0:	230f      	movs	r3, #15
    75c2:	18fb      	adds	r3, r7, r3
    75c4:	781b      	ldrb	r3, [r3, #0]
    75c6:	3301      	adds	r3, #1
    75c8:	009b      	lsls	r3, r3, #2
    75ca:	001a      	movs	r2, r3
    75cc:	2100      	movs	r1, #0
    75ce:	4b28      	ldr	r3, [pc, #160]	; (7670 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    75d0:	4798      	blx	r3
		{
    75d2:	e03a      	b.n	764a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    75d4:	4b25      	ldr	r3, [pc, #148]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    75d6:	6819      	ldr	r1, [r3, #0]
    75d8:	693b      	ldr	r3, [r7, #16]
    75da:	009a      	lsls	r2, r3, #2
    75dc:	23e2      	movs	r3, #226	; 0xe2
    75de:	00db      	lsls	r3, r3, #3
    75e0:	188a      	adds	r2, r1, r2
    75e2:	18d3      	adds	r3, r2, r3
    75e4:	781b      	ldrb	r3, [r3, #0]
    75e6:	2b01      	cmp	r3, #1
    75e8:	d130      	bne.n	764c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    75ea:	693b      	ldr	r3, [r7, #16]
    75ec:	1c5a      	adds	r2, r3, #1
    75ee:	4b1f      	ldr	r3, [pc, #124]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    75f0:	681b      	ldr	r3, [r3, #0]
    75f2:	699b      	ldr	r3, [r3, #24]
    75f4:	429a      	cmp	r2, r3
    75f6:	d20e      	bcs.n	7616 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    75f8:	4b1c      	ldr	r3, [pc, #112]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    75fa:	681a      	ldr	r2, [r3, #0]
    75fc:	693b      	ldr	r3, [r7, #16]
    75fe:	009b      	lsls	r3, r3, #2
    7600:	21e2      	movs	r1, #226	; 0xe2
    7602:	00c9      	lsls	r1, r1, #3
    7604:	468c      	mov	ip, r1
    7606:	4463      	add	r3, ip
    7608:	18d3      	adds	r3, r2, r3
    760a:	2208      	movs	r2, #8
    760c:	2100      	movs	r1, #0
    760e:	0018      	movs	r0, r3
    7610:	4b17      	ldr	r3, [pc, #92]	; (7670 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    7612:	4798      	blx	r3
    7614:	e01a      	b.n	764c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    7616:	4b15      	ldr	r3, [pc, #84]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    7618:	681b      	ldr	r3, [r3, #0]
    761a:	22e2      	movs	r2, #226	; 0xe2
    761c:	00d2      	lsls	r2, r2, #3
    761e:	4694      	mov	ip, r2
    7620:	4463      	add	r3, ip
    7622:	2204      	movs	r2, #4
    7624:	2100      	movs	r1, #0
    7626:	0018      	movs	r0, r3
    7628:	4b11      	ldr	r3, [pc, #68]	; (7670 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    762a:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    762c:	4b0f      	ldr	r3, [pc, #60]	; (766c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    762e:	681a      	ldr	r2, [r3, #0]
    7630:	693b      	ldr	r3, [r7, #16]
    7632:	009b      	lsls	r3, r3, #2
    7634:	21e2      	movs	r1, #226	; 0xe2
    7636:	00c9      	lsls	r1, r1, #3
    7638:	468c      	mov	ip, r1
    763a:	4463      	add	r3, ip
    763c:	18d3      	adds	r3, r2, r3
    763e:	2204      	movs	r2, #4
    7640:	2100      	movs	r1, #0
    7642:	0018      	movs	r0, r3
    7644:	4b0a      	ldr	r3, [pc, #40]	; (7670 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    7646:	4798      	blx	r3
    7648:	e000      	b.n	764c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
    764a:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
    764c:	697b      	ldr	r3, [r7, #20]
    764e:	3301      	adds	r3, #1
    7650:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
    7652:	1dfb      	adds	r3, r7, #7
    7654:	781a      	ldrb	r2, [r3, #0]
    7656:	697b      	ldr	r3, [r7, #20]
    7658:	429a      	cmp	r2, r3
    765a:	d900      	bls.n	765e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
    765c:	e774      	b.n	7548 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
    765e:	46bd      	mov	sp, r7
    7660:	b006      	add	sp, #24
    7662:	bd80      	pop	{r7, pc}
    7664:	00026d88 	.word	0x00026d88
    7668:	000074b9 	.word	0x000074b9
    766c:	20000e84 	.word	0x20000e84
    7670:	00022dbb 	.word	0x00022dbb

00007674 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    7674:	b580      	push	{r7, lr}
    7676:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
    7678:	4b12      	ldr	r3, [pc, #72]	; (76c4 <prvTraceUpdateCounters+0x50>)
    767a:	681b      	ldr	r3, [r3, #0]
    767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    767e:	2b00      	cmp	r3, #0
    7680:	d01c      	beq.n	76bc <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    7682:	4b10      	ldr	r3, [pc, #64]	; (76c4 <prvTraceUpdateCounters+0x50>)
    7684:	681b      	ldr	r3, [r3, #0]
    7686:	695a      	ldr	r2, [r3, #20]
    7688:	3201      	adds	r2, #1
    768a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    768c:	4b0d      	ldr	r3, [pc, #52]	; (76c4 <prvTraceUpdateCounters+0x50>)
    768e:	681b      	ldr	r3, [r3, #0]
    7690:	69da      	ldr	r2, [r3, #28]
    7692:	3201      	adds	r2, #1
    7694:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    7696:	4b0b      	ldr	r3, [pc, #44]	; (76c4 <prvTraceUpdateCounters+0x50>)
    7698:	681b      	ldr	r3, [r3, #0]
    769a:	69da      	ldr	r2, [r3, #28]
    769c:	232c      	movs	r3, #44	; 0x2c
    769e:	33ff      	adds	r3, #255	; 0xff
    76a0:	429a      	cmp	r2, r3
    76a2:	d907      	bls.n	76b4 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    76a4:	4b07      	ldr	r3, [pc, #28]	; (76c4 <prvTraceUpdateCounters+0x50>)
    76a6:	681b      	ldr	r3, [r3, #0]
    76a8:	2201      	movs	r2, #1
    76aa:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    76ac:	4b05      	ldr	r3, [pc, #20]	; (76c4 <prvTraceUpdateCounters+0x50>)
    76ae:	681b      	ldr	r3, [r3, #0]
    76b0:	2200      	movs	r2, #0
    76b2:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    76b4:	2001      	movs	r0, #1
    76b6:	4b04      	ldr	r3, [pc, #16]	; (76c8 <prvTraceUpdateCounters+0x54>)
    76b8:	4798      	blx	r3
    76ba:	e000      	b.n	76be <prvTraceUpdateCounters+0x4a>
		return;
    76bc:	46c0      	nop			; (mov r8, r8)
#endif
}
    76be:	46bd      	mov	sp, r7
    76c0:	bd80      	pop	{r7, pc}
    76c2:	46c0      	nop			; (mov r8, r8)
    76c4:	20000e84 	.word	0x20000e84
    76c8:	00007521 	.word	0x00007521

000076cc <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    76cc:	b5b0      	push	{r4, r5, r7, lr}
    76ce:	b086      	sub	sp, #24
    76d0:	af00      	add	r7, sp, #0
    76d2:	0002      	movs	r2, r0
    76d4:	1dbb      	adds	r3, r7, #6
    76d6:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
    76d8:	2300      	movs	r3, #0
    76da:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
    76dc:	2300      	movs	r3, #0
    76de:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
    76e0:	2300      	movs	r3, #0
    76e2:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    76e4:	1dbb      	adds	r3, r7, #6
    76e6:	881b      	ldrh	r3, [r3, #0]
    76e8:	2bff      	cmp	r3, #255	; 0xff
    76ea:	d00a      	beq.n	7702 <prvTraceGetDTS+0x36>
    76ec:	1dbb      	adds	r3, r7, #6
    76ee:	881b      	ldrh	r3, [r3, #0]
    76f0:	4a60      	ldr	r2, [pc, #384]	; (7874 <prvTraceGetDTS+0x1a8>)
    76f2:	4293      	cmp	r3, r2
    76f4:	d005      	beq.n	7702 <prvTraceGetDTS+0x36>
    76f6:	4b60      	ldr	r3, [pc, #384]	; (7878 <prvTraceGetDTS+0x1ac>)
    76f8:	0018      	movs	r0, r3
    76fa:	4b60      	ldr	r3, [pc, #384]	; (787c <prvTraceGetDTS+0x1b0>)
    76fc:	4798      	blx	r3
    76fe:	2300      	movs	r3, #0
    7700:	e0b3      	b.n	786a <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
    7702:	4b5f      	ldr	r3, [pc, #380]	; (7880 <prvTraceGetDTS+0x1b4>)
    7704:	681b      	ldr	r3, [r3, #0]
    7706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7708:	2b00      	cmp	r3, #0
    770a:	d118      	bne.n	773e <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
    770c:	4b5d      	ldr	r3, [pc, #372]	; (7884 <prvTraceGetDTS+0x1b8>)
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	2b00      	cmp	r3, #0
    7712:	d006      	beq.n	7722 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    7714:	4b5a      	ldr	r3, [pc, #360]	; (7880 <prvTraceGetDTS+0x1b4>)
    7716:	681b      	ldr	r3, [r3, #0]
    7718:	4a5a      	ldr	r2, [pc, #360]	; (7884 <prvTraceGetDTS+0x1b8>)
    771a:	6812      	ldr	r2, [r2, #0]
    771c:	0892      	lsrs	r2, r2, #2
    771e:	625a      	str	r2, [r3, #36]	; 0x24
    7720:	e00d      	b.n	773e <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    7722:	4b59      	ldr	r3, [pc, #356]	; (7888 <prvTraceGetDTS+0x1bc>)
    7724:	681a      	ldr	r2, [r3, #0]
    7726:	4b59      	ldr	r3, [pc, #356]	; (788c <prvTraceGetDTS+0x1c0>)
    7728:	681b      	ldr	r3, [r3, #0]
    772a:	429a      	cmp	r2, r3
    772c:	d007      	beq.n	773e <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    772e:	4b54      	ldr	r3, [pc, #336]	; (7880 <prvTraceGetDTS+0x1b4>)
    7730:	681c      	ldr	r4, [r3, #0]
    7732:	2000      	movs	r0, #0
    7734:	4b56      	ldr	r3, [pc, #344]	; (7890 <prvTraceGetDTS+0x1c4>)
    7736:	4798      	blx	r3
    7738:	0003      	movs	r3, r0
    773a:	089b      	lsrs	r3, r3, #2
    773c:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
    773e:	230c      	movs	r3, #12
    7740:	18fb      	adds	r3, r7, r3
    7742:	0018      	movs	r0, r3
    7744:	4b53      	ldr	r3, [pc, #332]	; (7894 <prvTraceGetDTS+0x1c8>)
    7746:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    7748:	68fa      	ldr	r2, [r7, #12]
    774a:	4b53      	ldr	r3, [pc, #332]	; (7898 <prvTraceGetDTS+0x1cc>)
    774c:	681b      	ldr	r3, [r3, #0]
    774e:	1ad3      	subs	r3, r2, r3
    7750:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
    7752:	68fa      	ldr	r2, [r7, #12]
    7754:	4b50      	ldr	r3, [pc, #320]	; (7898 <prvTraceGetDTS+0x1cc>)
    7756:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
    7758:	4b49      	ldr	r3, [pc, #292]	; (7880 <prvTraceGetDTS+0x1b4>)
    775a:	681b      	ldr	r3, [r3, #0]
    775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    775e:	2b00      	cmp	r3, #0
    7760:	d044      	beq.n	77ec <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    7762:	4b47      	ldr	r3, [pc, #284]	; (7880 <prvTraceGetDTS+0x1b4>)
    7764:	681b      	ldr	r3, [r3, #0]
    7766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7768:	693b      	ldr	r3, [r7, #16]
    776a:	429a      	cmp	r2, r3
    776c:	d21e      	bcs.n	77ac <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    776e:	4b44      	ldr	r3, [pc, #272]	; (7880 <prvTraceGetDTS+0x1b4>)
    7770:	681c      	ldr	r4, [r3, #0]
    7772:	4b43      	ldr	r3, [pc, #268]	; (7880 <prvTraceGetDTS+0x1b4>)
    7774:	681b      	ldr	r3, [r3, #0]
    7776:	6add      	ldr	r5, [r3, #44]	; 0x2c
    7778:	4b41      	ldr	r3, [pc, #260]	; (7880 <prvTraceGetDTS+0x1b4>)
    777a:	681b      	ldr	r3, [r3, #0]
    777c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    777e:	4b47      	ldr	r3, [pc, #284]	; (789c <prvTraceGetDTS+0x1d0>)
    7780:	0011      	movs	r1, r2
    7782:	6938      	ldr	r0, [r7, #16]
    7784:	4798      	blx	r3
    7786:	0003      	movs	r3, r0
    7788:	18eb      	adds	r3, r5, r3
    778a:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    778c:	4b3c      	ldr	r3, [pc, #240]	; (7880 <prvTraceGetDTS+0x1b4>)
    778e:	681c      	ldr	r4, [r3, #0]
    7790:	4b3b      	ldr	r3, [pc, #236]	; (7880 <prvTraceGetDTS+0x1b4>)
    7792:	681b      	ldr	r3, [r3, #0]
    7794:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    7796:	4b3a      	ldr	r3, [pc, #232]	; (7880 <prvTraceGetDTS+0x1b4>)
    7798:	681b      	ldr	r3, [r3, #0]
    779a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    779c:	693a      	ldr	r2, [r7, #16]
    779e:	4b40      	ldr	r3, [pc, #256]	; (78a0 <prvTraceGetDTS+0x1d4>)
    77a0:	0010      	movs	r0, r2
    77a2:	4798      	blx	r3
    77a4:	000b      	movs	r3, r1
    77a6:	18eb      	adds	r3, r5, r3
    77a8:	62a3      	str	r3, [r4, #40]	; 0x28
    77aa:	e007      	b.n	77bc <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    77ac:	4b34      	ldr	r3, [pc, #208]	; (7880 <prvTraceGetDTS+0x1b4>)
    77ae:	681b      	ldr	r3, [r3, #0]
    77b0:	4a33      	ldr	r2, [pc, #204]	; (7880 <prvTraceGetDTS+0x1b4>)
    77b2:	6812      	ldr	r2, [r2, #0]
    77b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    77b6:	693a      	ldr	r2, [r7, #16]
    77b8:	188a      	adds	r2, r1, r2
    77ba:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    77bc:	4b30      	ldr	r3, [pc, #192]	; (7880 <prvTraceGetDTS+0x1b4>)
    77be:	681b      	ldr	r3, [r3, #0]
    77c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    77c2:	4b2f      	ldr	r3, [pc, #188]	; (7880 <prvTraceGetDTS+0x1b4>)
    77c4:	681b      	ldr	r3, [r3, #0]
    77c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    77c8:	429a      	cmp	r2, r3
    77ca:	d313      	bcc.n	77f4 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    77cc:	4b2c      	ldr	r3, [pc, #176]	; (7880 <prvTraceGetDTS+0x1b4>)
    77ce:	681b      	ldr	r3, [r3, #0]
    77d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77d2:	3201      	adds	r2, #1
    77d4:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    77d6:	4b2a      	ldr	r3, [pc, #168]	; (7880 <prvTraceGetDTS+0x1b4>)
    77d8:	681b      	ldr	r3, [r3, #0]
    77da:	4a29      	ldr	r2, [pc, #164]	; (7880 <prvTraceGetDTS+0x1b4>)
    77dc:	6812      	ldr	r2, [r2, #0]
    77de:	6a91      	ldr	r1, [r2, #40]	; 0x28
    77e0:	4a27      	ldr	r2, [pc, #156]	; (7880 <prvTraceGetDTS+0x1b4>)
    77e2:	6812      	ldr	r2, [r2, #0]
    77e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    77e6:	1a8a      	subs	r2, r1, r2
    77e8:	629a      	str	r2, [r3, #40]	; 0x28
    77ea:	e003      	b.n	77f4 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    77ec:	4b24      	ldr	r3, [pc, #144]	; (7880 <prvTraceGetDTS+0x1b4>)
    77ee:	681b      	ldr	r3, [r3, #0]
    77f0:	68fa      	ldr	r2, [r7, #12]
    77f2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    77f4:	1dbb      	adds	r3, r7, #6
    77f6:	881a      	ldrh	r2, [r3, #0]
    77f8:	693b      	ldr	r3, [r7, #16]
    77fa:	429a      	cmp	r2, r3
    77fc:	d22f      	bcs.n	785e <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    77fe:	4b29      	ldr	r3, [pc, #164]	; (78a4 <prvTraceGetDTS+0x1d8>)
    7800:	4798      	blx	r3
    7802:	0003      	movs	r3, r0
    7804:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
    7806:	697b      	ldr	r3, [r7, #20]
    7808:	2b00      	cmp	r3, #0
    780a:	d028      	beq.n	785e <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
    780c:	1dbb      	adds	r3, r7, #6
    780e:	881b      	ldrh	r3, [r3, #0]
    7810:	4a18      	ldr	r2, [pc, #96]	; (7874 <prvTraceGetDTS+0x1a8>)
    7812:	4293      	cmp	r3, r2
    7814:	d10b      	bne.n	782e <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
    7816:	697b      	ldr	r3, [r7, #20]
    7818:	22a9      	movs	r2, #169	; 0xa9
    781a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    781c:	693b      	ldr	r3, [r7, #16]
    781e:	0c1b      	lsrs	r3, r3, #16
    7820:	b29a      	uxth	r2, r3
    7822:	697b      	ldr	r3, [r7, #20]
    7824:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
    7826:	697b      	ldr	r3, [r7, #20]
    7828:	2200      	movs	r2, #0
    782a:	705a      	strb	r2, [r3, #1]
    782c:	e015      	b.n	785a <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
    782e:	1dbb      	adds	r3, r7, #6
    7830:	881b      	ldrh	r3, [r3, #0]
    7832:	2bff      	cmp	r3, #255	; 0xff
    7834:	d10d      	bne.n	7852 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
    7836:	697b      	ldr	r3, [r7, #20]
    7838:	22a8      	movs	r2, #168	; 0xa8
    783a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    783c:	693b      	ldr	r3, [r7, #16]
    783e:	0a1b      	lsrs	r3, r3, #8
    7840:	b29a      	uxth	r2, r3
    7842:	697b      	ldr	r3, [r7, #20]
    7844:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    7846:	693b      	ldr	r3, [r7, #16]
    7848:	0e1b      	lsrs	r3, r3, #24
    784a:	b2da      	uxtb	r2, r3
    784c:	697b      	ldr	r3, [r7, #20]
    784e:	705a      	strb	r2, [r3, #1]
    7850:	e003      	b.n	785a <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    7852:	4b15      	ldr	r3, [pc, #84]	; (78a8 <prvTraceGetDTS+0x1dc>)
    7854:	0018      	movs	r0, r3
    7856:	4b09      	ldr	r3, [pc, #36]	; (787c <prvTraceGetDTS+0x1b0>)
    7858:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    785a:	4b14      	ldr	r3, [pc, #80]	; (78ac <prvTraceGetDTS+0x1e0>)
    785c:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    785e:	693b      	ldr	r3, [r7, #16]
    7860:	b29b      	uxth	r3, r3
    7862:	1dba      	adds	r2, r7, #6
    7864:	8812      	ldrh	r2, [r2, #0]
    7866:	4013      	ands	r3, r2
    7868:	b29b      	uxth	r3, r3
}
    786a:	0018      	movs	r0, r3
    786c:	46bd      	mov	sp, r7
    786e:	b006      	add	sp, #24
    7870:	bdb0      	pop	{r4, r5, r7, pc}
    7872:	46c0      	nop			; (mov r8, r8)
    7874:	0000ffff 	.word	0x0000ffff
    7878:	00026de0 	.word	0x00026de0
    787c:	000074b9 	.word	0x000074b9
    7880:	20000e84 	.word	0x20000e84
    7884:	20000de0 	.word	0x20000de0
    7888:	e000e018 	.word	0xe000e018
    788c:	200056ac 	.word	0x200056ac
    7890:	000178d5 	.word	0x000178d5
    7894:	000078b1 	.word	0x000078b1
    7898:	20000e90 	.word	0x20000e90
    789c:	00020471 	.word	0x00020471
    78a0:	0002057d 	.word	0x0002057d
    78a4:	00007071 	.word	0x00007071
    78a8:	00026e20 	.word	0x00026e20
    78ac:	00007675 	.word	0x00007675

000078b0 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    78b0:	b580      	push	{r7, lr}
    78b2:	b084      	sub	sp, #16
    78b4:	af00      	add	r7, sp, #0
    78b6:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
    78b8:	2300      	movs	r3, #0
    78ba:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
    78bc:	2300      	movs	r3, #0
    78be:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    78c0:	4b2d      	ldr	r3, [pc, #180]	; (7978 <prvTracePortGetTimeStamp+0xc8>)
    78c2:	681b      	ldr	r3, [r3, #0]
    78c4:	2b01      	cmp	r3, #1
    78c6:	d107      	bne.n	78d8 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
    78c8:	687b      	ldr	r3, [r7, #4]
    78ca:	2b00      	cmp	r3, #0
    78cc:	d04f      	beq.n	796e <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
    78ce:	4b2b      	ldr	r3, [pc, #172]	; (797c <prvTracePortGetTimeStamp+0xcc>)
    78d0:	681a      	ldr	r2, [r3, #0]
    78d2:	687b      	ldr	r3, [r7, #4]
    78d4:	601a      	str	r2, [r3, #0]
		return;
    78d6:	e04a      	b.n	796e <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    78d8:	4b29      	ldr	r3, [pc, #164]	; (7980 <prvTracePortGetTimeStamp+0xd0>)
    78da:	681a      	ldr	r2, [r3, #0]
    78dc:	4b29      	ldr	r3, [pc, #164]	; (7984 <prvTracePortGetTimeStamp+0xd4>)
    78de:	681b      	ldr	r3, [r3, #0]
    78e0:	1ad3      	subs	r3, r2, r3
    78e2:	3301      	adds	r3, #1
    78e4:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    78e6:	4b28      	ldr	r3, [pc, #160]	; (7988 <prvTracePortGetTimeStamp+0xd8>)
    78e8:	681a      	ldr	r2, [r3, #0]
    78ea:	4b28      	ldr	r3, [pc, #160]	; (798c <prvTracePortGetTimeStamp+0xdc>)
    78ec:	681b      	ldr	r3, [r3, #0]
    78ee:	1ad3      	subs	r3, r2, r3
    78f0:	3b01      	subs	r3, #1
    78f2:	2b00      	cmp	r3, #0
    78f4:	db03      	blt.n	78fe <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
    78f6:	4b24      	ldr	r3, [pc, #144]	; (7988 <prvTracePortGetTimeStamp+0xd8>)
    78f8:	681b      	ldr	r3, [r3, #0]
    78fa:	60fb      	str	r3, [r7, #12]
    78fc:	e002      	b.n	7904 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    78fe:	4b23      	ldr	r3, [pc, #140]	; (798c <prvTracePortGetTimeStamp+0xdc>)
    7900:	681b      	ldr	r3, [r3, #0]
    7902:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    7904:	4b20      	ldr	r3, [pc, #128]	; (7988 <prvTracePortGetTimeStamp+0xd8>)
    7906:	681b      	ldr	r3, [r3, #0]
    7908:	68fa      	ldr	r2, [r7, #12]
    790a:	429a      	cmp	r2, r3
    790c:	d107      	bne.n	791e <prvTracePortGetTimeStamp+0x6e>
    790e:	4b20      	ldr	r3, [pc, #128]	; (7990 <prvTracePortGetTimeStamp+0xe0>)
    7910:	681b      	ldr	r3, [r3, #0]
    7912:	68ba      	ldr	r2, [r7, #8]
    7914:	429a      	cmp	r2, r3
    7916:	d202      	bcs.n	791e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    7918:	68fb      	ldr	r3, [r7, #12]
    791a:	3301      	adds	r3, #1
    791c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    791e:	687b      	ldr	r3, [r7, #4]
    7920:	2b00      	cmp	r3, #0
    7922:	d016      	beq.n	7952 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    7924:	4b16      	ldr	r3, [pc, #88]	; (7980 <prvTracePortGetTimeStamp+0xd0>)
    7926:	681b      	ldr	r3, [r3, #0]
    7928:	3301      	adds	r3, #1
    792a:	089b      	lsrs	r3, r3, #2
    792c:	68fa      	ldr	r2, [r7, #12]
    792e:	435a      	muls	r2, r3
    7930:	4b12      	ldr	r3, [pc, #72]	; (797c <prvTracePortGetTimeStamp+0xcc>)
    7932:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    7934:	4b12      	ldr	r3, [pc, #72]	; (7980 <prvTracePortGetTimeStamp+0xd0>)
    7936:	681b      	ldr	r3, [r3, #0]
    7938:	3301      	adds	r3, #1
    793a:	2203      	movs	r2, #3
    793c:	4013      	ands	r3, r2
    793e:	68fa      	ldr	r2, [r7, #12]
    7940:	435a      	muls	r2, r3
    7942:	68bb      	ldr	r3, [r7, #8]
    7944:	18d3      	adds	r3, r2, r3
    7946:	089a      	lsrs	r2, r3, #2
    7948:	4b0c      	ldr	r3, [pc, #48]	; (797c <prvTracePortGetTimeStamp+0xcc>)
    794a:	681b      	ldr	r3, [r3, #0]
    794c:	18d2      	adds	r2, r2, r3
    794e:	4b0b      	ldr	r3, [pc, #44]	; (797c <prvTracePortGetTimeStamp+0xcc>)
    7950:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    7952:	4b0d      	ldr	r3, [pc, #52]	; (7988 <prvTracePortGetTimeStamp+0xd8>)
    7954:	68fa      	ldr	r2, [r7, #12]
    7956:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	2b00      	cmp	r3, #0
    795c:	d003      	beq.n	7966 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
    795e:	4b07      	ldr	r3, [pc, #28]	; (797c <prvTracePortGetTimeStamp+0xcc>)
    7960:	681a      	ldr	r2, [r3, #0]
    7962:	687b      	ldr	r3, [r7, #4]
    7964:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    7966:	4b0a      	ldr	r3, [pc, #40]	; (7990 <prvTracePortGetTimeStamp+0xe0>)
    7968:	68ba      	ldr	r2, [r7, #8]
    796a:	601a      	str	r2, [r3, #0]
    796c:	e000      	b.n	7970 <prvTracePortGetTimeStamp+0xc0>
		return;
    796e:	46c0      	nop			; (mov r8, r8)
}
    7970:	46bd      	mov	sp, r7
    7972:	b004      	add	sp, #16
    7974:	bd80      	pop	{r7, pc}
    7976:	46c0      	nop			; (mov r8, r8)
    7978:	20000dd0 	.word	0x20000dd0
    797c:	20000dd4 	.word	0x20000dd4
    7980:	e000e014 	.word	0xe000e014
    7984:	e000e018 	.word	0xe000e018
    7988:	20000e94 	.word	0x20000e94
    798c:	20000dcc 	.word	0x20000dcc
    7990:	20000e98 	.word	0x20000e98

00007994 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    7994:	b580      	push	{r7, lr}
    7996:	b082      	sub	sp, #8
    7998:	af00      	add	r7, sp, #0
    799a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	3308      	adds	r3, #8
    79a0:	001a      	movs	r2, r3
    79a2:	687b      	ldr	r3, [r7, #4]
    79a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    79a6:	687b      	ldr	r3, [r7, #4]
    79a8:	2201      	movs	r2, #1
    79aa:	4252      	negs	r2, r2
    79ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    79ae:	687b      	ldr	r3, [r7, #4]
    79b0:	3308      	adds	r3, #8
    79b2:	001a      	movs	r2, r3
    79b4:	687b      	ldr	r3, [r7, #4]
    79b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    79b8:	687b      	ldr	r3, [r7, #4]
    79ba:	3308      	adds	r3, #8
    79bc:	001a      	movs	r2, r3
    79be:	687b      	ldr	r3, [r7, #4]
    79c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    79c2:	687b      	ldr	r3, [r7, #4]
    79c4:	2200      	movs	r2, #0
    79c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    79c8:	46c0      	nop			; (mov r8, r8)
    79ca:	46bd      	mov	sp, r7
    79cc:	b002      	add	sp, #8
    79ce:	bd80      	pop	{r7, pc}

000079d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    79d0:	b580      	push	{r7, lr}
    79d2:	b082      	sub	sp, #8
    79d4:	af00      	add	r7, sp, #0
    79d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    79d8:	687b      	ldr	r3, [r7, #4]
    79da:	2200      	movs	r2, #0
    79dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    79de:	46c0      	nop			; (mov r8, r8)
    79e0:	46bd      	mov	sp, r7
    79e2:	b002      	add	sp, #8
    79e4:	bd80      	pop	{r7, pc}

000079e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    79e6:	b580      	push	{r7, lr}
    79e8:	b084      	sub	sp, #16
    79ea:	af00      	add	r7, sp, #0
    79ec:	6078      	str	r0, [r7, #4]
    79ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	685b      	ldr	r3, [r3, #4]
    79f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    79f6:	683b      	ldr	r3, [r7, #0]
    79f8:	68fa      	ldr	r2, [r7, #12]
    79fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    79fc:	68fb      	ldr	r3, [r7, #12]
    79fe:	689a      	ldr	r2, [r3, #8]
    7a00:	683b      	ldr	r3, [r7, #0]
    7a02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    7a04:	68fb      	ldr	r3, [r7, #12]
    7a06:	689b      	ldr	r3, [r3, #8]
    7a08:	683a      	ldr	r2, [r7, #0]
    7a0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    7a0c:	68fb      	ldr	r3, [r7, #12]
    7a0e:	683a      	ldr	r2, [r7, #0]
    7a10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    7a12:	683b      	ldr	r3, [r7, #0]
    7a14:	687a      	ldr	r2, [r7, #4]
    7a16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	681b      	ldr	r3, [r3, #0]
    7a1c:	1c5a      	adds	r2, r3, #1
    7a1e:	687b      	ldr	r3, [r7, #4]
    7a20:	601a      	str	r2, [r3, #0]
}
    7a22:	46c0      	nop			; (mov r8, r8)
    7a24:	46bd      	mov	sp, r7
    7a26:	b004      	add	sp, #16
    7a28:	bd80      	pop	{r7, pc}

00007a2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    7a2a:	b580      	push	{r7, lr}
    7a2c:	b084      	sub	sp, #16
    7a2e:	af00      	add	r7, sp, #0
    7a30:	6078      	str	r0, [r7, #4]
    7a32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    7a34:	683b      	ldr	r3, [r7, #0]
    7a36:	681b      	ldr	r3, [r3, #0]
    7a38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    7a3a:	68bb      	ldr	r3, [r7, #8]
    7a3c:	3301      	adds	r3, #1
    7a3e:	d103      	bne.n	7a48 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	691b      	ldr	r3, [r3, #16]
    7a44:	60fb      	str	r3, [r7, #12]
    7a46:	e00c      	b.n	7a62 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	3308      	adds	r3, #8
    7a4c:	60fb      	str	r3, [r7, #12]
    7a4e:	e002      	b.n	7a56 <vListInsert+0x2c>
    7a50:	68fb      	ldr	r3, [r7, #12]
    7a52:	685b      	ldr	r3, [r3, #4]
    7a54:	60fb      	str	r3, [r7, #12]
    7a56:	68fb      	ldr	r3, [r7, #12]
    7a58:	685b      	ldr	r3, [r3, #4]
    7a5a:	681a      	ldr	r2, [r3, #0]
    7a5c:	68bb      	ldr	r3, [r7, #8]
    7a5e:	429a      	cmp	r2, r3
    7a60:	d9f6      	bls.n	7a50 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    7a62:	68fb      	ldr	r3, [r7, #12]
    7a64:	685a      	ldr	r2, [r3, #4]
    7a66:	683b      	ldr	r3, [r7, #0]
    7a68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    7a6a:	683b      	ldr	r3, [r7, #0]
    7a6c:	685b      	ldr	r3, [r3, #4]
    7a6e:	683a      	ldr	r2, [r7, #0]
    7a70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    7a72:	683b      	ldr	r3, [r7, #0]
    7a74:	68fa      	ldr	r2, [r7, #12]
    7a76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    7a78:	68fb      	ldr	r3, [r7, #12]
    7a7a:	683a      	ldr	r2, [r7, #0]
    7a7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    7a7e:	683b      	ldr	r3, [r7, #0]
    7a80:	687a      	ldr	r2, [r7, #4]
    7a82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    7a84:	687b      	ldr	r3, [r7, #4]
    7a86:	681b      	ldr	r3, [r3, #0]
    7a88:	1c5a      	adds	r2, r3, #1
    7a8a:	687b      	ldr	r3, [r7, #4]
    7a8c:	601a      	str	r2, [r3, #0]
}
    7a8e:	46c0      	nop			; (mov r8, r8)
    7a90:	46bd      	mov	sp, r7
    7a92:	b004      	add	sp, #16
    7a94:	bd80      	pop	{r7, pc}

00007a96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    7a96:	b580      	push	{r7, lr}
    7a98:	b084      	sub	sp, #16
    7a9a:	af00      	add	r7, sp, #0
    7a9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    7a9e:	687b      	ldr	r3, [r7, #4]
    7aa0:	691b      	ldr	r3, [r3, #16]
    7aa2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	685b      	ldr	r3, [r3, #4]
    7aa8:	687a      	ldr	r2, [r7, #4]
    7aaa:	6892      	ldr	r2, [r2, #8]
    7aac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    7aae:	687b      	ldr	r3, [r7, #4]
    7ab0:	689b      	ldr	r3, [r3, #8]
    7ab2:	687a      	ldr	r2, [r7, #4]
    7ab4:	6852      	ldr	r2, [r2, #4]
    7ab6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    7ab8:	68fb      	ldr	r3, [r7, #12]
    7aba:	685a      	ldr	r2, [r3, #4]
    7abc:	687b      	ldr	r3, [r7, #4]
    7abe:	429a      	cmp	r2, r3
    7ac0:	d103      	bne.n	7aca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    7ac2:	687b      	ldr	r3, [r7, #4]
    7ac4:	689a      	ldr	r2, [r3, #8]
    7ac6:	68fb      	ldr	r3, [r7, #12]
    7ac8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    7aca:	687b      	ldr	r3, [r7, #4]
    7acc:	2200      	movs	r2, #0
    7ace:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    7ad0:	68fb      	ldr	r3, [r7, #12]
    7ad2:	681b      	ldr	r3, [r3, #0]
    7ad4:	1e5a      	subs	r2, r3, #1
    7ad6:	68fb      	ldr	r3, [r7, #12]
    7ad8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    7ada:	68fb      	ldr	r3, [r7, #12]
    7adc:	681b      	ldr	r3, [r3, #0]
}
    7ade:	0018      	movs	r0, r3
    7ae0:	46bd      	mov	sp, r7
    7ae2:	b004      	add	sp, #16
    7ae4:	bd80      	pop	{r7, pc}
	...

00007ae8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    7ae8:	b580      	push	{r7, lr}
    7aea:	b084      	sub	sp, #16
    7aec:	af00      	add	r7, sp, #0
    7aee:	60f8      	str	r0, [r7, #12]
    7af0:	60b9      	str	r1, [r7, #8]
    7af2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    7af4:	68fb      	ldr	r3, [r7, #12]
    7af6:	3b04      	subs	r3, #4
    7af8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    7afa:	68fb      	ldr	r3, [r7, #12]
    7afc:	2280      	movs	r2, #128	; 0x80
    7afe:	0452      	lsls	r2, r2, #17
    7b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    7b02:	68fb      	ldr	r3, [r7, #12]
    7b04:	3b04      	subs	r3, #4
    7b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    7b08:	68ba      	ldr	r2, [r7, #8]
    7b0a:	68fb      	ldr	r3, [r7, #12]
    7b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    7b0e:	68fb      	ldr	r3, [r7, #12]
    7b10:	3b04      	subs	r3, #4
    7b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    7b14:	4a08      	ldr	r2, [pc, #32]	; (7b38 <pxPortInitialiseStack+0x50>)
    7b16:	68fb      	ldr	r3, [r7, #12]
    7b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    7b1a:	68fb      	ldr	r3, [r7, #12]
    7b1c:	3b14      	subs	r3, #20
    7b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    7b20:	687a      	ldr	r2, [r7, #4]
    7b22:	68fb      	ldr	r3, [r7, #12]
    7b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    7b26:	68fb      	ldr	r3, [r7, #12]
    7b28:	3b20      	subs	r3, #32
    7b2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    7b2c:	68fb      	ldr	r3, [r7, #12]
}
    7b2e:	0018      	movs	r0, r3
    7b30:	46bd      	mov	sp, r7
    7b32:	b004      	add	sp, #16
    7b34:	bd80      	pop	{r7, pc}
    7b36:	46c0      	nop			; (mov r8, r8)
    7b38:	00007b3d 	.word	0x00007b3d

00007b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    7b3c:	b580      	push	{r7, lr}
    7b3e:	b082      	sub	sp, #8
    7b40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    7b42:	2300      	movs	r3, #0
    7b44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    7b46:	4b07      	ldr	r3, [pc, #28]	; (7b64 <prvTaskExitError+0x28>)
    7b48:	681b      	ldr	r3, [r3, #0]
    7b4a:	3301      	adds	r3, #1
    7b4c:	d001      	beq.n	7b52 <prvTaskExitError+0x16>
    7b4e:	b672      	cpsid	i
    7b50:	e7fe      	b.n	7b50 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    7b52:	b672      	cpsid	i
	while( ulDummy == 0 )
    7b54:	46c0      	nop			; (mov r8, r8)
    7b56:	687b      	ldr	r3, [r7, #4]
    7b58:	2b00      	cmp	r3, #0
    7b5a:	d0fc      	beq.n	7b56 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    7b5c:	46c0      	nop			; (mov r8, r8)
    7b5e:	46bd      	mov	sp, r7
    7b60:	b002      	add	sp, #8
    7b62:	bd80      	pop	{r7, pc}
    7b64:	20000114 	.word	0x20000114

00007b68 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    7b68:	b580      	push	{r7, lr}
    7b6a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    7b6c:	46c0      	nop			; (mov r8, r8)
    7b6e:	46bd      	mov	sp, r7
    7b70:	bd80      	pop	{r7, pc}
	...

00007b80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    7b80:	4a0b      	ldr	r2, [pc, #44]	; (7bb0 <pxCurrentTCBConst2>)
    7b82:	6813      	ldr	r3, [r2, #0]
    7b84:	6818      	ldr	r0, [r3, #0]
    7b86:	3020      	adds	r0, #32
    7b88:	f380 8809 	msr	PSP, r0
    7b8c:	2002      	movs	r0, #2
    7b8e:	f380 8814 	msr	CONTROL, r0
    7b92:	f3bf 8f6f 	isb	sy
    7b96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    7b98:	46ae      	mov	lr, r5
    7b9a:	bc08      	pop	{r3}
    7b9c:	bc04      	pop	{r2}
    7b9e:	b662      	cpsie	i
    7ba0:	4718      	bx	r3
    7ba2:	46c0      	nop			; (mov r8, r8)
    7ba4:	46c0      	nop			; (mov r8, r8)
    7ba6:	46c0      	nop			; (mov r8, r8)
    7ba8:	46c0      	nop			; (mov r8, r8)
    7baa:	46c0      	nop			; (mov r8, r8)
    7bac:	46c0      	nop			; (mov r8, r8)
    7bae:	46c0      	nop			; (mov r8, r8)

00007bb0 <pxCurrentTCBConst2>:
    7bb0:	2000416c 	.word	0x2000416c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    7bb4:	46c0      	nop			; (mov r8, r8)
    7bb6:	46c0      	nop			; (mov r8, r8)

00007bb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    7bb8:	b580      	push	{r7, lr}
    7bba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    7bbc:	4b0e      	ldr	r3, [pc, #56]	; (7bf8 <xPortStartScheduler+0x40>)
    7bbe:	4a0e      	ldr	r2, [pc, #56]	; (7bf8 <xPortStartScheduler+0x40>)
    7bc0:	6812      	ldr	r2, [r2, #0]
    7bc2:	21ff      	movs	r1, #255	; 0xff
    7bc4:	0409      	lsls	r1, r1, #16
    7bc6:	430a      	orrs	r2, r1
    7bc8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    7bca:	4b0b      	ldr	r3, [pc, #44]	; (7bf8 <xPortStartScheduler+0x40>)
    7bcc:	4a0a      	ldr	r2, [pc, #40]	; (7bf8 <xPortStartScheduler+0x40>)
    7bce:	6812      	ldr	r2, [r2, #0]
    7bd0:	21ff      	movs	r1, #255	; 0xff
    7bd2:	0609      	lsls	r1, r1, #24
    7bd4:	430a      	orrs	r2, r1
    7bd6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    7bd8:	4b08      	ldr	r3, [pc, #32]	; (7bfc <xPortStartScheduler+0x44>)
    7bda:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    7bdc:	4b08      	ldr	r3, [pc, #32]	; (7c00 <xPortStartScheduler+0x48>)
    7bde:	2200      	movs	r2, #0
    7be0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    7be2:	4b08      	ldr	r3, [pc, #32]	; (7c04 <xPortStartScheduler+0x4c>)
    7be4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    7be6:	4b08      	ldr	r3, [pc, #32]	; (7c08 <xPortStartScheduler+0x50>)
    7be8:	4798      	blx	r3
	prvTaskExitError();
    7bea:	4b08      	ldr	r3, [pc, #32]	; (7c0c <xPortStartScheduler+0x54>)
    7bec:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    7bee:	2300      	movs	r3, #0
}
    7bf0:	0018      	movs	r0, r3
    7bf2:	46bd      	mov	sp, r7
    7bf4:	bd80      	pop	{r7, pc}
    7bf6:	46c0      	nop			; (mov r8, r8)
    7bf8:	e000ed20 	.word	0xe000ed20
    7bfc:	00007d19 	.word	0x00007d19
    7c00:	20000114 	.word	0x20000114
    7c04:	00007b81 	.word	0x00007b81
    7c08:	0000a275 	.word	0x0000a275
    7c0c:	00007b3d 	.word	0x00007b3d

00007c10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    7c10:	b580      	push	{r7, lr}
    7c12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    7c14:	4b03      	ldr	r3, [pc, #12]	; (7c24 <vPortYield+0x14>)
    7c16:	2280      	movs	r2, #128	; 0x80
    7c18:	0552      	lsls	r2, r2, #21
    7c1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
    7c1c:	46c0      	nop			; (mov r8, r8)
    7c1e:	46bd      	mov	sp, r7
    7c20:	bd80      	pop	{r7, pc}
    7c22:	46c0      	nop			; (mov r8, r8)
    7c24:	e000ed04 	.word	0xe000ed04

00007c28 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    7c28:	b580      	push	{r7, lr}
    7c2a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    7c2c:	b672      	cpsid	i
    uxCriticalNesting++;
    7c2e:	4b06      	ldr	r3, [pc, #24]	; (7c48 <vPortEnterCritical+0x20>)
    7c30:	681b      	ldr	r3, [r3, #0]
    7c32:	1c5a      	adds	r2, r3, #1
    7c34:	4b04      	ldr	r3, [pc, #16]	; (7c48 <vPortEnterCritical+0x20>)
    7c36:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    7c38:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    7c3c:	f3bf 8f6f 	isb	sy
}
    7c40:	46c0      	nop			; (mov r8, r8)
    7c42:	46bd      	mov	sp, r7
    7c44:	bd80      	pop	{r7, pc}
    7c46:	46c0      	nop			; (mov r8, r8)
    7c48:	20000114 	.word	0x20000114

00007c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    7c4c:	b580      	push	{r7, lr}
    7c4e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    7c50:	4b09      	ldr	r3, [pc, #36]	; (7c78 <vPortExitCritical+0x2c>)
    7c52:	681b      	ldr	r3, [r3, #0]
    7c54:	2b00      	cmp	r3, #0
    7c56:	d101      	bne.n	7c5c <vPortExitCritical+0x10>
    7c58:	b672      	cpsid	i
    7c5a:	e7fe      	b.n	7c5a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    7c5c:	4b06      	ldr	r3, [pc, #24]	; (7c78 <vPortExitCritical+0x2c>)
    7c5e:	681b      	ldr	r3, [r3, #0]
    7c60:	1e5a      	subs	r2, r3, #1
    7c62:	4b05      	ldr	r3, [pc, #20]	; (7c78 <vPortExitCritical+0x2c>)
    7c64:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    7c66:	4b04      	ldr	r3, [pc, #16]	; (7c78 <vPortExitCritical+0x2c>)
    7c68:	681b      	ldr	r3, [r3, #0]
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d100      	bne.n	7c70 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    7c6e:	b662      	cpsie	i
    }
}
    7c70:	46c0      	nop			; (mov r8, r8)
    7c72:	46bd      	mov	sp, r7
    7c74:	bd80      	pop	{r7, pc}
    7c76:	46c0      	nop			; (mov r8, r8)
    7c78:	20000114 	.word	0x20000114

00007c7c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    7c7c:	f3ef 8010 	mrs	r0, PRIMASK
    7c80:	b672      	cpsid	i
    7c82:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    7c84:	46c0      	nop			; (mov r8, r8)
    7c86:	0018      	movs	r0, r3

00007c88 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    7c88:	f380 8810 	msr	PRIMASK, r0
    7c8c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    7c8e:	46c0      	nop			; (mov r8, r8)

00007c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    7c90:	f3ef 8009 	mrs	r0, PSP
    7c94:	4b0e      	ldr	r3, [pc, #56]	; (7cd0 <pxCurrentTCBConst>)
    7c96:	681a      	ldr	r2, [r3, #0]
    7c98:	3820      	subs	r0, #32
    7c9a:	6010      	str	r0, [r2, #0]
    7c9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    7c9e:	4644      	mov	r4, r8
    7ca0:	464d      	mov	r5, r9
    7ca2:	4656      	mov	r6, sl
    7ca4:	465f      	mov	r7, fp
    7ca6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    7ca8:	b508      	push	{r3, lr}
    7caa:	b672      	cpsid	i
    7cac:	f002 fae2 	bl	a274 <vTaskSwitchContext>
    7cb0:	b662      	cpsie	i
    7cb2:	bc0c      	pop	{r2, r3}
    7cb4:	6811      	ldr	r1, [r2, #0]
    7cb6:	6808      	ldr	r0, [r1, #0]
    7cb8:	3010      	adds	r0, #16
    7cba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    7cbc:	46a0      	mov	r8, r4
    7cbe:	46a9      	mov	r9, r5
    7cc0:	46b2      	mov	sl, r6
    7cc2:	46bb      	mov	fp, r7
    7cc4:	f380 8809 	msr	PSP, r0
    7cc8:	3820      	subs	r0, #32
    7cca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    7ccc:	4718      	bx	r3
    7cce:	46c0      	nop			; (mov r8, r8)

00007cd0 <pxCurrentTCBConst>:
    7cd0:	2000416c 	.word	0x2000416c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    7cd4:	46c0      	nop			; (mov r8, r8)
    7cd6:	46c0      	nop			; (mov r8, r8)

00007cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    7cd8:	b580      	push	{r7, lr}
    7cda:	b082      	sub	sp, #8
    7cdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    7cde:	4b0a      	ldr	r3, [pc, #40]	; (7d08 <SysTick_Handler+0x30>)
    7ce0:	4798      	blx	r3
    7ce2:	0003      	movs	r3, r0
    7ce4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    7ce6:	4b09      	ldr	r3, [pc, #36]	; (7d0c <SysTick_Handler+0x34>)
    7ce8:	4798      	blx	r3
    7cea:	1e03      	subs	r3, r0, #0
    7cec:	d003      	beq.n	7cf6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    7cee:	4b08      	ldr	r3, [pc, #32]	; (7d10 <SysTick_Handler+0x38>)
    7cf0:	2280      	movs	r2, #128	; 0x80
    7cf2:	0552      	lsls	r2, r2, #21
    7cf4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	0018      	movs	r0, r3
    7cfa:	4b06      	ldr	r3, [pc, #24]	; (7d14 <SysTick_Handler+0x3c>)
    7cfc:	4798      	blx	r3
}
    7cfe:	46c0      	nop			; (mov r8, r8)
    7d00:	46bd      	mov	sp, r7
    7d02:	b002      	add	sp, #8
    7d04:	bd80      	pop	{r7, pc}
    7d06:	46c0      	nop			; (mov r8, r8)
    7d08:	00007c7d 	.word	0x00007c7d
    7d0c:	0000a085 	.word	0x0000a085
    7d10:	e000ed04 	.word	0xe000ed04
    7d14:	00007c89 	.word	0x00007c89

00007d18 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    7d18:	b5b0      	push	{r4, r5, r7, lr}
    7d1a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    7d1c:	4b0b      	ldr	r3, [pc, #44]	; (7d4c <prvSetupTimerInterrupt+0x34>)
    7d1e:	2200      	movs	r2, #0
    7d20:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    7d22:	4b0b      	ldr	r3, [pc, #44]	; (7d50 <prvSetupTimerInterrupt+0x38>)
    7d24:	2200      	movs	r2, #0
    7d26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    7d28:	4c0a      	ldr	r4, [pc, #40]	; (7d54 <prvSetupTimerInterrupt+0x3c>)
    7d2a:	2000      	movs	r0, #0
    7d2c:	4b0a      	ldr	r3, [pc, #40]	; (7d58 <prvSetupTimerInterrupt+0x40>)
    7d2e:	4798      	blx	r3
    7d30:	4b0a      	ldr	r3, [pc, #40]	; (7d5c <prvSetupTimerInterrupt+0x44>)
    7d32:	22fa      	movs	r2, #250	; 0xfa
    7d34:	0091      	lsls	r1, r2, #2
    7d36:	4798      	blx	r3
    7d38:	0003      	movs	r3, r0
    7d3a:	3b01      	subs	r3, #1
    7d3c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    7d3e:	4b03      	ldr	r3, [pc, #12]	; (7d4c <prvSetupTimerInterrupt+0x34>)
    7d40:	2207      	movs	r2, #7
    7d42:	601a      	str	r2, [r3, #0]
}
    7d44:	46c0      	nop			; (mov r8, r8)
    7d46:	46bd      	mov	sp, r7
    7d48:	bdb0      	pop	{r4, r5, r7, pc}
    7d4a:	46c0      	nop			; (mov r8, r8)
    7d4c:	e000e010 	.word	0xe000e010
    7d50:	e000e018 	.word	0xe000e018
    7d54:	e000e014 	.word	0xe000e014
    7d58:	000178d5 	.word	0x000178d5
    7d5c:	00020471 	.word	0x00020471

00007d60 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    7d60:	b580      	push	{r7, lr}
    7d62:	b084      	sub	sp, #16
    7d64:	af00      	add	r7, sp, #0
    7d66:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    7d68:	2300      	movs	r3, #0
    7d6a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	2207      	movs	r2, #7
    7d70:	4013      	ands	r3, r2
    7d72:	d004      	beq.n	7d7e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    7d74:	687b      	ldr	r3, [r7, #4]
    7d76:	2207      	movs	r2, #7
    7d78:	4393      	bics	r3, r2
    7d7a:	3308      	adds	r3, #8
    7d7c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    7d7e:	4b21      	ldr	r3, [pc, #132]	; (7e04 <pvPortMalloc+0xa4>)
    7d80:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    7d82:	4b21      	ldr	r3, [pc, #132]	; (7e08 <pvPortMalloc+0xa8>)
    7d84:	681b      	ldr	r3, [r3, #0]
    7d86:	2b00      	cmp	r3, #0
    7d88:	d105      	bne.n	7d96 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    7d8a:	4b20      	ldr	r3, [pc, #128]	; (7e0c <pvPortMalloc+0xac>)
    7d8c:	2207      	movs	r2, #7
    7d8e:	4393      	bics	r3, r2
    7d90:	001a      	movs	r2, r3
    7d92:	4b1d      	ldr	r3, [pc, #116]	; (7e08 <pvPortMalloc+0xa8>)
    7d94:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    7d96:	4b1e      	ldr	r3, [pc, #120]	; (7e10 <pvPortMalloc+0xb0>)
    7d98:	681a      	ldr	r2, [r3, #0]
    7d9a:	687b      	ldr	r3, [r7, #4]
    7d9c:	18d3      	adds	r3, r2, r3
    7d9e:	4a1d      	ldr	r2, [pc, #116]	; (7e14 <pvPortMalloc+0xb4>)
    7da0:	4293      	cmp	r3, r2
    7da2:	d813      	bhi.n	7dcc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    7da4:	4b1a      	ldr	r3, [pc, #104]	; (7e10 <pvPortMalloc+0xb0>)
    7da6:	681a      	ldr	r2, [r3, #0]
    7da8:	687b      	ldr	r3, [r7, #4]
    7daa:	18d2      	adds	r2, r2, r3
    7dac:	4b18      	ldr	r3, [pc, #96]	; (7e10 <pvPortMalloc+0xb0>)
    7dae:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    7db0:	429a      	cmp	r2, r3
    7db2:	d90b      	bls.n	7dcc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    7db4:	4b14      	ldr	r3, [pc, #80]	; (7e08 <pvPortMalloc+0xa8>)
    7db6:	681a      	ldr	r2, [r3, #0]
    7db8:	4b15      	ldr	r3, [pc, #84]	; (7e10 <pvPortMalloc+0xb0>)
    7dba:	681b      	ldr	r3, [r3, #0]
    7dbc:	18d3      	adds	r3, r2, r3
    7dbe:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    7dc0:	4b13      	ldr	r3, [pc, #76]	; (7e10 <pvPortMalloc+0xb0>)
    7dc2:	681a      	ldr	r2, [r3, #0]
    7dc4:	687b      	ldr	r3, [r7, #4]
    7dc6:	18d2      	adds	r2, r2, r3
    7dc8:	4b11      	ldr	r3, [pc, #68]	; (7e10 <pvPortMalloc+0xb0>)
    7dca:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    7dcc:	68fb      	ldr	r3, [r7, #12]
    7dce:	2b00      	cmp	r3, #0
    7dd0:	d006      	beq.n	7de0 <pvPortMalloc+0x80>
    7dd2:	68fb      	ldr	r3, [r7, #12]
    7dd4:	687a      	ldr	r2, [r7, #4]
    7dd6:	0019      	movs	r1, r3
    7dd8:	2094      	movs	r0, #148	; 0x94
    7dda:	4b0f      	ldr	r3, [pc, #60]	; (7e18 <pvPortMalloc+0xb8>)
    7ddc:	4798      	blx	r3
    7dde:	e005      	b.n	7dec <pvPortMalloc+0x8c>
    7de0:	68fb      	ldr	r3, [r7, #12]
    7de2:	687a      	ldr	r2, [r7, #4]
    7de4:	0019      	movs	r1, r3
    7de6:	20e8      	movs	r0, #232	; 0xe8
    7de8:	4b0b      	ldr	r3, [pc, #44]	; (7e18 <pvPortMalloc+0xb8>)
    7dea:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    7dec:	4b0b      	ldr	r3, [pc, #44]	; (7e1c <pvPortMalloc+0xbc>)
    7dee:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    7df0:	68fb      	ldr	r3, [r7, #12]
    7df2:	2b00      	cmp	r3, #0
    7df4:	d101      	bne.n	7dfa <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    7df6:	4b0a      	ldr	r3, [pc, #40]	; (7e20 <pvPortMalloc+0xc0>)
    7df8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    7dfa:	68fb      	ldr	r3, [r7, #12]
}
    7dfc:	0018      	movs	r0, r3
    7dfe:	46bd      	mov	sp, r7
    7e00:	b004      	add	sp, #16
    7e02:	bd80      	pop	{r7, pc}
    7e04:	00009ee1 	.word	0x00009ee1
    7e08:	20004168 	.word	0x20004168
    7e0c:	20000ea4 	.word	0x20000ea4
    7e10:	20004164 	.word	0x20004164
    7e14:	000032bf 	.word	0x000032bf
    7e18:	000064c5 	.word	0x000064c5
    7e1c:	00009ef9 	.word	0x00009ef9
    7e20:	00020441 	.word	0x00020441

00007e24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    7e24:	b580      	push	{r7, lr}
    7e26:	b082      	sub	sp, #8
    7e28:	af00      	add	r7, sp, #0
    7e2a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    7e2c:	687b      	ldr	r3, [r7, #4]
    7e2e:	2b00      	cmp	r3, #0
    7e30:	d001      	beq.n	7e36 <vPortFree+0x12>
    7e32:	b672      	cpsid	i
    7e34:	e7fe      	b.n	7e34 <vPortFree+0x10>
}
    7e36:	46c0      	nop			; (mov r8, r8)
    7e38:	46bd      	mov	sp, r7
    7e3a:	b002      	add	sp, #8
    7e3c:	bd80      	pop	{r7, pc}
	...

00007e40 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    7e40:	b580      	push	{r7, lr}
    7e42:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    7e44:	4b03      	ldr	r3, [pc, #12]	; (7e54 <xPortGetFreeHeapSize+0x14>)
    7e46:	681b      	ldr	r3, [r3, #0]
    7e48:	22cb      	movs	r2, #203	; 0xcb
    7e4a:	0192      	lsls	r2, r2, #6
    7e4c:	1ad3      	subs	r3, r2, r3
}
    7e4e:	0018      	movs	r0, r3
    7e50:	46bd      	mov	sp, r7
    7e52:	bd80      	pop	{r7, pc}
    7e54:	20004164 	.word	0x20004164

00007e58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    7e58:	b580      	push	{r7, lr}
    7e5a:	b084      	sub	sp, #16
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	6078      	str	r0, [r7, #4]
    7e60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7e62:	687b      	ldr	r3, [r7, #4]
    7e64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    7e66:	68fb      	ldr	r3, [r7, #12]
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d101      	bne.n	7e70 <xQueueGenericReset+0x18>
    7e6c:	b672      	cpsid	i
    7e6e:	e7fe      	b.n	7e6e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    7e70:	4b23      	ldr	r3, [pc, #140]	; (7f00 <xQueueGenericReset+0xa8>)
    7e72:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    7e74:	68fb      	ldr	r3, [r7, #12]
    7e76:	681a      	ldr	r2, [r3, #0]
    7e78:	68fb      	ldr	r3, [r7, #12]
    7e7a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    7e7c:	68fb      	ldr	r3, [r7, #12]
    7e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7e80:	434b      	muls	r3, r1
    7e82:	18d2      	adds	r2, r2, r3
    7e84:	68fb      	ldr	r3, [r7, #12]
    7e86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    7e88:	68fb      	ldr	r3, [r7, #12]
    7e8a:	2200      	movs	r2, #0
    7e8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    7e8e:	68fb      	ldr	r3, [r7, #12]
    7e90:	681a      	ldr	r2, [r3, #0]
    7e92:	68fb      	ldr	r3, [r7, #12]
    7e94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    7e96:	68fb      	ldr	r3, [r7, #12]
    7e98:	681a      	ldr	r2, [r3, #0]
    7e9a:	68fb      	ldr	r3, [r7, #12]
    7e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7e9e:	1e59      	subs	r1, r3, #1
    7ea0:	68fb      	ldr	r3, [r7, #12]
    7ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7ea4:	434b      	muls	r3, r1
    7ea6:	18d2      	adds	r2, r2, r3
    7ea8:	68fb      	ldr	r3, [r7, #12]
    7eaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    7eac:	68fb      	ldr	r3, [r7, #12]
    7eae:	2244      	movs	r2, #68	; 0x44
    7eb0:	21ff      	movs	r1, #255	; 0xff
    7eb2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    7eb4:	68fb      	ldr	r3, [r7, #12]
    7eb6:	2245      	movs	r2, #69	; 0x45
    7eb8:	21ff      	movs	r1, #255	; 0xff
    7eba:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    7ebc:	683b      	ldr	r3, [r7, #0]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d10d      	bne.n	7ede <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7ec2:	68fb      	ldr	r3, [r7, #12]
    7ec4:	691b      	ldr	r3, [r3, #16]
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	d013      	beq.n	7ef2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7eca:	68fb      	ldr	r3, [r7, #12]
    7ecc:	3310      	adds	r3, #16
    7ece:	0018      	movs	r0, r3
    7ed0:	4b0c      	ldr	r3, [pc, #48]	; (7f04 <xQueueGenericReset+0xac>)
    7ed2:	4798      	blx	r3
    7ed4:	1e03      	subs	r3, r0, #0
    7ed6:	d00c      	beq.n	7ef2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    7ed8:	4b0b      	ldr	r3, [pc, #44]	; (7f08 <xQueueGenericReset+0xb0>)
    7eda:	4798      	blx	r3
    7edc:	e009      	b.n	7ef2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    7ede:	68fb      	ldr	r3, [r7, #12]
    7ee0:	3310      	adds	r3, #16
    7ee2:	0018      	movs	r0, r3
    7ee4:	4b09      	ldr	r3, [pc, #36]	; (7f0c <xQueueGenericReset+0xb4>)
    7ee6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    7ee8:	68fb      	ldr	r3, [r7, #12]
    7eea:	3324      	adds	r3, #36	; 0x24
    7eec:	0018      	movs	r0, r3
    7eee:	4b07      	ldr	r3, [pc, #28]	; (7f0c <xQueueGenericReset+0xb4>)
    7ef0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    7ef2:	4b07      	ldr	r3, [pc, #28]	; (7f10 <xQueueGenericReset+0xb8>)
    7ef4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    7ef6:	2301      	movs	r3, #1
}
    7ef8:	0018      	movs	r0, r3
    7efa:	46bd      	mov	sp, r7
    7efc:	b004      	add	sp, #16
    7efe:	bd80      	pop	{r7, pc}
    7f00:	00007c29 	.word	0x00007c29
    7f04:	0000a4b9 	.word	0x0000a4b9
    7f08:	00007c11 	.word	0x00007c11
    7f0c:	00007995 	.word	0x00007995
    7f10:	00007c4d 	.word	0x00007c4d

00007f14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    7f14:	b590      	push	{r4, r7, lr}
    7f16:	b08b      	sub	sp, #44	; 0x2c
    7f18:	af02      	add	r7, sp, #8
    7f1a:	60f8      	str	r0, [r7, #12]
    7f1c:	60b9      	str	r1, [r7, #8]
    7f1e:	1dfb      	adds	r3, r7, #7
    7f20:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    7f22:	68fb      	ldr	r3, [r7, #12]
    7f24:	2b00      	cmp	r3, #0
    7f26:	d101      	bne.n	7f2c <xQueueGenericCreate+0x18>
    7f28:	b672      	cpsid	i
    7f2a:	e7fe      	b.n	7f2a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    7f2c:	68bb      	ldr	r3, [r7, #8]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d102      	bne.n	7f38 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    7f32:	2300      	movs	r3, #0
    7f34:	61fb      	str	r3, [r7, #28]
    7f36:	e003      	b.n	7f40 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7f38:	68fb      	ldr	r3, [r7, #12]
    7f3a:	68ba      	ldr	r2, [r7, #8]
    7f3c:	4353      	muls	r3, r2
    7f3e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    7f40:	69fb      	ldr	r3, [r7, #28]
    7f42:	3354      	adds	r3, #84	; 0x54
    7f44:	0018      	movs	r0, r3
    7f46:	4b19      	ldr	r3, [pc, #100]	; (7fac <xQueueGenericCreate+0x98>)
    7f48:	4798      	blx	r3
    7f4a:	0003      	movs	r3, r0
    7f4c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    7f4e:	69bb      	ldr	r3, [r7, #24]
    7f50:	2b00      	cmp	r3, #0
    7f52:	d00d      	beq.n	7f70 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    7f54:	69bb      	ldr	r3, [r7, #24]
    7f56:	3354      	adds	r3, #84	; 0x54
    7f58:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    7f5a:	1dfb      	adds	r3, r7, #7
    7f5c:	781c      	ldrb	r4, [r3, #0]
    7f5e:	697a      	ldr	r2, [r7, #20]
    7f60:	68b9      	ldr	r1, [r7, #8]
    7f62:	68f8      	ldr	r0, [r7, #12]
    7f64:	69bb      	ldr	r3, [r7, #24]
    7f66:	9300      	str	r3, [sp, #0]
    7f68:	0023      	movs	r3, r4
    7f6a:	4c11      	ldr	r4, [pc, #68]	; (7fb0 <xQueueGenericCreate+0x9c>)
    7f6c:	47a0      	blx	r4
    7f6e:	e017      	b.n	7fa0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
    7f70:	4b10      	ldr	r3, [pc, #64]	; (7fb4 <xQueueGenericCreate+0xa0>)
    7f72:	4798      	blx	r3
    7f74:	0003      	movs	r3, r0
    7f76:	0018      	movs	r0, r3
    7f78:	4b0f      	ldr	r3, [pc, #60]	; (7fb8 <xQueueGenericCreate+0xa4>)
    7f7a:	4798      	blx	r3
    7f7c:	0003      	movs	r3, r0
    7f7e:	001a      	movs	r2, r3
    7f80:	4b0e      	ldr	r3, [pc, #56]	; (7fbc <xQueueGenericCreate+0xa8>)
    7f82:	881b      	ldrh	r3, [r3, #0]
    7f84:	4013      	ands	r3, r2
    7f86:	b29b      	uxth	r3, r3
    7f88:	2b00      	cmp	r3, #0
    7f8a:	d009      	beq.n	7fa0 <xQueueGenericCreate+0x8c>
    7f8c:	1dfb      	adds	r3, r7, #7
    7f8e:	781b      	ldrb	r3, [r3, #0]
    7f90:	4a0b      	ldr	r2, [pc, #44]	; (7fc0 <xQueueGenericCreate+0xac>)
    7f92:	5cd3      	ldrb	r3, [r2, r3]
    7f94:	3340      	adds	r3, #64	; 0x40
    7f96:	b2db      	uxtb	r3, r3
    7f98:	2100      	movs	r1, #0
    7f9a:	0018      	movs	r0, r3
    7f9c:	4b09      	ldr	r3, [pc, #36]	; (7fc4 <xQueueGenericCreate+0xb0>)
    7f9e:	4798      	blx	r3
		}

		return pxNewQueue;
    7fa0:	69bb      	ldr	r3, [r7, #24]
	}
    7fa2:	0018      	movs	r0, r3
    7fa4:	46bd      	mov	sp, r7
    7fa6:	b009      	add	sp, #36	; 0x24
    7fa8:	bd90      	pop	{r4, r7, pc}
    7faa:	46c0      	nop			; (mov r8, r8)
    7fac:	00007d61 	.word	0x00007d61
    7fb0:	00007fc9 	.word	0x00007fc9
    7fb4:	00005eb9 	.word	0x00005eb9
    7fb8:	00005c1d 	.word	0x00005c1d
    7fbc:	20000110 	.word	0x20000110
    7fc0:	20000104 	.word	0x20000104
    7fc4:	0000691d 	.word	0x0000691d

00007fc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    7fc8:	b5b0      	push	{r4, r5, r7, lr}
    7fca:	b084      	sub	sp, #16
    7fcc:	af00      	add	r7, sp, #0
    7fce:	60f8      	str	r0, [r7, #12]
    7fd0:	60b9      	str	r1, [r7, #8]
    7fd2:	607a      	str	r2, [r7, #4]
    7fd4:	001a      	movs	r2, r3
    7fd6:	1cfb      	adds	r3, r7, #3
    7fd8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    7fda:	68bb      	ldr	r3, [r7, #8]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d103      	bne.n	7fe8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    7fe0:	6a3b      	ldr	r3, [r7, #32]
    7fe2:	6a3a      	ldr	r2, [r7, #32]
    7fe4:	601a      	str	r2, [r3, #0]
    7fe6:	e002      	b.n	7fee <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    7fe8:	6a3b      	ldr	r3, [r7, #32]
    7fea:	687a      	ldr	r2, [r7, #4]
    7fec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    7fee:	6a3b      	ldr	r3, [r7, #32]
    7ff0:	68fa      	ldr	r2, [r7, #12]
    7ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    7ff4:	6a3b      	ldr	r3, [r7, #32]
    7ff6:	68ba      	ldr	r2, [r7, #8]
    7ff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    7ffa:	6a3b      	ldr	r3, [r7, #32]
    7ffc:	2101      	movs	r1, #1
    7ffe:	0018      	movs	r0, r3
    8000:	4b41      	ldr	r3, [pc, #260]	; (8108 <prvInitialiseNewQueue+0x140>)
    8002:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    8004:	6a3b      	ldr	r3, [r7, #32]
    8006:	1cfa      	adds	r2, r7, #3
    8008:	2150      	movs	r1, #80	; 0x50
    800a:	7812      	ldrb	r2, [r2, #0]
    800c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    800e:	6a3b      	ldr	r3, [r7, #32]
    8010:	2200      	movs	r2, #0
    8012:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    8014:	6a3b      	ldr	r3, [r7, #32]
    8016:	0018      	movs	r0, r3
    8018:	4b3c      	ldr	r3, [pc, #240]	; (810c <prvInitialiseNewQueue+0x144>)
    801a:	4798      	blx	r3
    801c:	0003      	movs	r3, r0
    801e:	001a      	movs	r2, r3
    8020:	4b3b      	ldr	r3, [pc, #236]	; (8110 <prvInitialiseNewQueue+0x148>)
    8022:	5c9b      	ldrb	r3, [r3, r2]
    8024:	0018      	movs	r0, r3
    8026:	4b3b      	ldr	r3, [pc, #236]	; (8114 <prvInitialiseNewQueue+0x14c>)
    8028:	4798      	blx	r3
    802a:	0003      	movs	r3, r0
    802c:	b29a      	uxth	r2, r3
    802e:	6a3b      	ldr	r3, [r7, #32]
    8030:	0011      	movs	r1, r2
    8032:	0018      	movs	r0, r3
    8034:	4b38      	ldr	r3, [pc, #224]	; (8118 <prvInitialiseNewQueue+0x150>)
    8036:	4798      	blx	r3
    8038:	4b38      	ldr	r3, [pc, #224]	; (811c <prvInitialiseNewQueue+0x154>)
    803a:	881a      	ldrh	r2, [r3, #0]
    803c:	6a3b      	ldr	r3, [r7, #32]
    803e:	0011      	movs	r1, r2
    8040:	0018      	movs	r0, r3
    8042:	4b37      	ldr	r3, [pc, #220]	; (8120 <prvInitialiseNewQueue+0x158>)
    8044:	4798      	blx	r3
    8046:	6a3b      	ldr	r3, [r7, #32]
    8048:	0018      	movs	r0, r3
    804a:	4b30      	ldr	r3, [pc, #192]	; (810c <prvInitialiseNewQueue+0x144>)
    804c:	4798      	blx	r3
    804e:	0003      	movs	r3, r0
    8050:	001a      	movs	r2, r3
    8052:	4b2f      	ldr	r3, [pc, #188]	; (8110 <prvInitialiseNewQueue+0x148>)
    8054:	5c9c      	ldrb	r4, [r3, r2]
    8056:	6a3b      	ldr	r3, [r7, #32]
    8058:	0018      	movs	r0, r3
    805a:	4b32      	ldr	r3, [pc, #200]	; (8124 <prvInitialiseNewQueue+0x15c>)
    805c:	4798      	blx	r3
    805e:	0003      	movs	r3, r0
    8060:	b2db      	uxtb	r3, r3
    8062:	0019      	movs	r1, r3
    8064:	0020      	movs	r0, r4
    8066:	4b30      	ldr	r3, [pc, #192]	; (8128 <prvInitialiseNewQueue+0x160>)
    8068:	4798      	blx	r3
    806a:	4b30      	ldr	r3, [pc, #192]	; (812c <prvInitialiseNewQueue+0x164>)
    806c:	4798      	blx	r3
    806e:	0003      	movs	r3, r0
    8070:	0018      	movs	r0, r3
    8072:	4b2f      	ldr	r3, [pc, #188]	; (8130 <prvInitialiseNewQueue+0x168>)
    8074:	4798      	blx	r3
    8076:	0003      	movs	r3, r0
    8078:	001a      	movs	r2, r3
    807a:	4b2e      	ldr	r3, [pc, #184]	; (8134 <prvInitialiseNewQueue+0x16c>)
    807c:	881b      	ldrh	r3, [r3, #0]
    807e:	4013      	ands	r3, r2
    8080:	b29b      	uxth	r3, r3
    8082:	2b00      	cmp	r3, #0
    8084:	d029      	beq.n	80da <prvInitialiseNewQueue+0x112>
    8086:	6a3b      	ldr	r3, [r7, #32]
    8088:	0018      	movs	r0, r3
    808a:	4b2b      	ldr	r3, [pc, #172]	; (8138 <prvInitialiseNewQueue+0x170>)
    808c:	4798      	blx	r3
    808e:	0003      	movs	r3, r0
    8090:	001a      	movs	r2, r3
    8092:	4b28      	ldr	r3, [pc, #160]	; (8134 <prvInitialiseNewQueue+0x16c>)
    8094:	881b      	ldrh	r3, [r3, #0]
    8096:	4013      	ands	r3, r2
    8098:	b29b      	uxth	r3, r3
    809a:	2b00      	cmp	r3, #0
    809c:	d01d      	beq.n	80da <prvInitialiseNewQueue+0x112>
    809e:	6a3b      	ldr	r3, [r7, #32]
    80a0:	0018      	movs	r0, r3
    80a2:	4b1a      	ldr	r3, [pc, #104]	; (810c <prvInitialiseNewQueue+0x144>)
    80a4:	4798      	blx	r3
    80a6:	0003      	movs	r3, r0
    80a8:	001a      	movs	r2, r3
    80aa:	4b19      	ldr	r3, [pc, #100]	; (8110 <prvInitialiseNewQueue+0x148>)
    80ac:	5c9b      	ldrb	r3, [r3, r2]
    80ae:	3318      	adds	r3, #24
    80b0:	b2db      	uxtb	r3, r3
    80b2:	001d      	movs	r5, r3
    80b4:	6a3b      	ldr	r3, [r7, #32]
    80b6:	0018      	movs	r0, r3
    80b8:	4b14      	ldr	r3, [pc, #80]	; (810c <prvInitialiseNewQueue+0x144>)
    80ba:	4798      	blx	r3
    80bc:	0003      	movs	r3, r0
    80be:	001a      	movs	r2, r3
    80c0:	4b13      	ldr	r3, [pc, #76]	; (8110 <prvInitialiseNewQueue+0x148>)
    80c2:	5c9c      	ldrb	r4, [r3, r2]
    80c4:	6a3b      	ldr	r3, [r7, #32]
    80c6:	0018      	movs	r0, r3
    80c8:	4b16      	ldr	r3, [pc, #88]	; (8124 <prvInitialiseNewQueue+0x15c>)
    80ca:	4798      	blx	r3
    80cc:	0003      	movs	r3, r0
    80ce:	b2db      	uxtb	r3, r3
    80d0:	001a      	movs	r2, r3
    80d2:	0021      	movs	r1, r4
    80d4:	0028      	movs	r0, r5
    80d6:	4b19      	ldr	r3, [pc, #100]	; (813c <prvInitialiseNewQueue+0x174>)
    80d8:	4798      	blx	r3
    80da:	6a3b      	ldr	r3, [r7, #32]
    80dc:	0018      	movs	r0, r3
    80de:	4b0b      	ldr	r3, [pc, #44]	; (810c <prvInitialiseNewQueue+0x144>)
    80e0:	4798      	blx	r3
    80e2:	0003      	movs	r3, r0
    80e4:	001a      	movs	r2, r3
    80e6:	4b0a      	ldr	r3, [pc, #40]	; (8110 <prvInitialiseNewQueue+0x148>)
    80e8:	5c9c      	ldrb	r4, [r3, r2]
    80ea:	6a3b      	ldr	r3, [r7, #32]
    80ec:	0018      	movs	r0, r3
    80ee:	4b0d      	ldr	r3, [pc, #52]	; (8124 <prvInitialiseNewQueue+0x15c>)
    80f0:	4798      	blx	r3
    80f2:	0003      	movs	r3, r0
    80f4:	b2db      	uxtb	r3, r3
    80f6:	2200      	movs	r2, #0
    80f8:	0019      	movs	r1, r3
    80fa:	0020      	movs	r0, r4
    80fc:	4b10      	ldr	r3, [pc, #64]	; (8140 <prvInitialiseNewQueue+0x178>)
    80fe:	4798      	blx	r3
}
    8100:	46c0      	nop			; (mov r8, r8)
    8102:	46bd      	mov	sp, r7
    8104:	b004      	add	sp, #16
    8106:	bdb0      	pop	{r4, r5, r7, pc}
    8108:	00007e59 	.word	0x00007e59
    810c:	00005bdd 	.word	0x00005bdd
    8110:	20000104 	.word	0x20000104
    8114:	0000719d 	.word	0x0000719d
    8118:	00005d01 	.word	0x00005d01
    811c:	20000112 	.word	0x20000112
    8120:	00005d3d 	.word	0x00005d3d
    8124:	00005cbd 	.word	0x00005cbd
    8128:	00007335 	.word	0x00007335
    812c:	00005eb9 	.word	0x00005eb9
    8130:	00005c1d 	.word	0x00005c1d
    8134:	20000110 	.word	0x20000110
    8138:	00005cdd 	.word	0x00005cdd
    813c:	00006615 	.word	0x00006615
    8140:	00006c71 	.word	0x00006c71

00008144 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    8144:	b590      	push	{r4, r7, lr}
    8146:	b083      	sub	sp, #12
    8148:	af00      	add	r7, sp, #0
    814a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	2b00      	cmp	r3, #0
    8150:	d00e      	beq.n	8170 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    8152:	687b      	ldr	r3, [r7, #4]
    8154:	2200      	movs	r2, #0
    8156:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	2200      	movs	r2, #0
    815c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	2200      	movs	r2, #0
    8162:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    8164:	6878      	ldr	r0, [r7, #4]
    8166:	2300      	movs	r3, #0
    8168:	2200      	movs	r2, #0
    816a:	2100      	movs	r1, #0
    816c:	4c02      	ldr	r4, [pc, #8]	; (8178 <prvInitialiseMutex+0x34>)
    816e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    8170:	46c0      	nop			; (mov r8, r8)
    8172:	46bd      	mov	sp, r7
    8174:	b003      	add	sp, #12
    8176:	bd90      	pop	{r4, r7, pc}
    8178:	000081bd 	.word	0x000081bd

0000817c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    817c:	b580      	push	{r7, lr}
    817e:	b086      	sub	sp, #24
    8180:	af00      	add	r7, sp, #0
    8182:	0002      	movs	r2, r0
    8184:	1dfb      	adds	r3, r7, #7
    8186:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    8188:	2301      	movs	r3, #1
    818a:	617b      	str	r3, [r7, #20]
    818c:	2300      	movs	r3, #0
    818e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    8190:	1dfb      	adds	r3, r7, #7
    8192:	781a      	ldrb	r2, [r3, #0]
    8194:	6939      	ldr	r1, [r7, #16]
    8196:	697b      	ldr	r3, [r7, #20]
    8198:	0018      	movs	r0, r3
    819a:	4b06      	ldr	r3, [pc, #24]	; (81b4 <xQueueCreateMutex+0x38>)
    819c:	4798      	blx	r3
    819e:	0003      	movs	r3, r0
    81a0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    81a2:	68fb      	ldr	r3, [r7, #12]
    81a4:	0018      	movs	r0, r3
    81a6:	4b04      	ldr	r3, [pc, #16]	; (81b8 <xQueueCreateMutex+0x3c>)
    81a8:	4798      	blx	r3

		return pxNewQueue;
    81aa:	68fb      	ldr	r3, [r7, #12]
	}
    81ac:	0018      	movs	r0, r3
    81ae:	46bd      	mov	sp, r7
    81b0:	b006      	add	sp, #24
    81b2:	bd80      	pop	{r7, pc}
    81b4:	00007f15 	.word	0x00007f15
    81b8:	00008145 	.word	0x00008145

000081bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    81bc:	b5b0      	push	{r4, r5, r7, lr}
    81be:	b08a      	sub	sp, #40	; 0x28
    81c0:	af00      	add	r7, sp, #0
    81c2:	60f8      	str	r0, [r7, #12]
    81c4:	60b9      	str	r1, [r7, #8]
    81c6:	607a      	str	r2, [r7, #4]
    81c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    81ca:	2300      	movs	r3, #0
    81cc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    81ce:	68fb      	ldr	r3, [r7, #12]
    81d0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    81d2:	6a3b      	ldr	r3, [r7, #32]
    81d4:	2b00      	cmp	r3, #0
    81d6:	d101      	bne.n	81dc <xQueueGenericSend+0x20>
    81d8:	b672      	cpsid	i
    81da:	e7fe      	b.n	81da <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    81dc:	68bb      	ldr	r3, [r7, #8]
    81de:	2b00      	cmp	r3, #0
    81e0:	d103      	bne.n	81ea <xQueueGenericSend+0x2e>
    81e2:	6a3b      	ldr	r3, [r7, #32]
    81e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    81e6:	2b00      	cmp	r3, #0
    81e8:	d101      	bne.n	81ee <xQueueGenericSend+0x32>
    81ea:	2301      	movs	r3, #1
    81ec:	e000      	b.n	81f0 <xQueueGenericSend+0x34>
    81ee:	2300      	movs	r3, #0
    81f0:	2b00      	cmp	r3, #0
    81f2:	d101      	bne.n	81f8 <xQueueGenericSend+0x3c>
    81f4:	b672      	cpsid	i
    81f6:	e7fe      	b.n	81f6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    81f8:	683b      	ldr	r3, [r7, #0]
    81fa:	2b02      	cmp	r3, #2
    81fc:	d103      	bne.n	8206 <xQueueGenericSend+0x4a>
    81fe:	6a3b      	ldr	r3, [r7, #32]
    8200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8202:	2b01      	cmp	r3, #1
    8204:	d101      	bne.n	820a <xQueueGenericSend+0x4e>
    8206:	2301      	movs	r3, #1
    8208:	e000      	b.n	820c <xQueueGenericSend+0x50>
    820a:	2300      	movs	r3, #0
    820c:	2b00      	cmp	r3, #0
    820e:	d101      	bne.n	8214 <xQueueGenericSend+0x58>
    8210:	b672      	cpsid	i
    8212:	e7fe      	b.n	8212 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    8214:	4bbc      	ldr	r3, [pc, #752]	; (8508 <xQueueGenericSend+0x34c>)
    8216:	4798      	blx	r3
    8218:	1e03      	subs	r3, r0, #0
    821a:	d102      	bne.n	8222 <xQueueGenericSend+0x66>
    821c:	687b      	ldr	r3, [r7, #4]
    821e:	2b00      	cmp	r3, #0
    8220:	d101      	bne.n	8226 <xQueueGenericSend+0x6a>
    8222:	2301      	movs	r3, #1
    8224:	e000      	b.n	8228 <xQueueGenericSend+0x6c>
    8226:	2300      	movs	r3, #0
    8228:	2b00      	cmp	r3, #0
    822a:	d101      	bne.n	8230 <xQueueGenericSend+0x74>
    822c:	b672      	cpsid	i
    822e:	e7fe      	b.n	822e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    8230:	4bb6      	ldr	r3, [pc, #728]	; (850c <xQueueGenericSend+0x350>)
    8232:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    8234:	6a3b      	ldr	r3, [r7, #32]
    8236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8238:	6a3b      	ldr	r3, [r7, #32]
    823a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    823c:	429a      	cmp	r2, r3
    823e:	d303      	bcc.n	8248 <xQueueGenericSend+0x8c>
    8240:	683b      	ldr	r3, [r7, #0]
    8242:	2b02      	cmp	r3, #2
    8244:	d000      	beq.n	8248 <xQueueGenericSend+0x8c>
    8246:	e08e      	b.n	8366 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
    8248:	4bb1      	ldr	r3, [pc, #708]	; (8510 <xQueueGenericSend+0x354>)
    824a:	4798      	blx	r3
    824c:	0003      	movs	r3, r0
    824e:	0018      	movs	r0, r3
    8250:	4bb0      	ldr	r3, [pc, #704]	; (8514 <xQueueGenericSend+0x358>)
    8252:	4798      	blx	r3
    8254:	0003      	movs	r3, r0
    8256:	001a      	movs	r2, r3
    8258:	4baf      	ldr	r3, [pc, #700]	; (8518 <xQueueGenericSend+0x35c>)
    825a:	881b      	ldrh	r3, [r3, #0]
    825c:	4013      	ands	r3, r2
    825e:	b29b      	uxth	r3, r3
    8260:	2b00      	cmp	r3, #0
    8262:	d02e      	beq.n	82c2 <xQueueGenericSend+0x106>
    8264:	6a3b      	ldr	r3, [r7, #32]
    8266:	0018      	movs	r0, r3
    8268:	4bac      	ldr	r3, [pc, #688]	; (851c <xQueueGenericSend+0x360>)
    826a:	4798      	blx	r3
    826c:	0003      	movs	r3, r0
    826e:	001a      	movs	r2, r3
    8270:	4ba9      	ldr	r3, [pc, #676]	; (8518 <xQueueGenericSend+0x35c>)
    8272:	881b      	ldrh	r3, [r3, #0]
    8274:	4013      	ands	r3, r2
    8276:	b29b      	uxth	r3, r3
    8278:	2b00      	cmp	r3, #0
    827a:	d022      	beq.n	82c2 <xQueueGenericSend+0x106>
    827c:	683b      	ldr	r3, [r7, #0]
    827e:	2b00      	cmp	r3, #0
    8280:	d10b      	bne.n	829a <xQueueGenericSend+0xde>
    8282:	6a3b      	ldr	r3, [r7, #32]
    8284:	0018      	movs	r0, r3
    8286:	4ba6      	ldr	r3, [pc, #664]	; (8520 <xQueueGenericSend+0x364>)
    8288:	4798      	blx	r3
    828a:	0003      	movs	r3, r0
    828c:	001a      	movs	r2, r3
    828e:	4ba5      	ldr	r3, [pc, #660]	; (8524 <xQueueGenericSend+0x368>)
    8290:	5c9b      	ldrb	r3, [r3, r2]
    8292:	3320      	adds	r3, #32
    8294:	b2db      	uxtb	r3, r3
    8296:	001d      	movs	r5, r3
    8298:	e000      	b.n	829c <xQueueGenericSend+0xe0>
    829a:	2525      	movs	r5, #37	; 0x25
    829c:	6a3b      	ldr	r3, [r7, #32]
    829e:	0018      	movs	r0, r3
    82a0:	4b9f      	ldr	r3, [pc, #636]	; (8520 <xQueueGenericSend+0x364>)
    82a2:	4798      	blx	r3
    82a4:	0003      	movs	r3, r0
    82a6:	001a      	movs	r2, r3
    82a8:	4b9e      	ldr	r3, [pc, #632]	; (8524 <xQueueGenericSend+0x368>)
    82aa:	5c9c      	ldrb	r4, [r3, r2]
    82ac:	6a3b      	ldr	r3, [r7, #32]
    82ae:	0018      	movs	r0, r3
    82b0:	4b9d      	ldr	r3, [pc, #628]	; (8528 <xQueueGenericSend+0x36c>)
    82b2:	4798      	blx	r3
    82b4:	0003      	movs	r3, r0
    82b6:	b2db      	uxtb	r3, r3
    82b8:	001a      	movs	r2, r3
    82ba:	0021      	movs	r1, r4
    82bc:	0028      	movs	r0, r5
    82be:	4b9b      	ldr	r3, [pc, #620]	; (852c <xQueueGenericSend+0x370>)
    82c0:	4798      	blx	r3
    82c2:	6a3b      	ldr	r3, [r7, #32]
    82c4:	0018      	movs	r0, r3
    82c6:	4b96      	ldr	r3, [pc, #600]	; (8520 <xQueueGenericSend+0x364>)
    82c8:	4798      	blx	r3
    82ca:	0003      	movs	r3, r0
    82cc:	001a      	movs	r2, r3
    82ce:	4b95      	ldr	r3, [pc, #596]	; (8524 <xQueueGenericSend+0x368>)
    82d0:	5c9c      	ldrb	r4, [r3, r2]
    82d2:	6a3b      	ldr	r3, [r7, #32]
    82d4:	0018      	movs	r0, r3
    82d6:	4b94      	ldr	r3, [pc, #592]	; (8528 <xQueueGenericSend+0x36c>)
    82d8:	4798      	blx	r3
    82da:	0003      	movs	r3, r0
    82dc:	b2dd      	uxtb	r5, r3
    82de:	6a3b      	ldr	r3, [r7, #32]
    82e0:	0018      	movs	r0, r3
    82e2:	4b8f      	ldr	r3, [pc, #572]	; (8520 <xQueueGenericSend+0x364>)
    82e4:	4798      	blx	r3
    82e6:	0003      	movs	r3, r0
    82e8:	001a      	movs	r2, r3
    82ea:	4b8e      	ldr	r3, [pc, #568]	; (8524 <xQueueGenericSend+0x368>)
    82ec:	5c9b      	ldrb	r3, [r3, r2]
    82ee:	2b02      	cmp	r3, #2
    82f0:	d005      	beq.n	82fe <xQueueGenericSend+0x142>
    82f2:	6a3b      	ldr	r3, [r7, #32]
    82f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    82f6:	b2db      	uxtb	r3, r3
    82f8:	3301      	adds	r3, #1
    82fa:	b2db      	uxtb	r3, r3
    82fc:	e000      	b.n	8300 <xQueueGenericSend+0x144>
    82fe:	2300      	movs	r3, #0
    8300:	001a      	movs	r2, r3
    8302:	0029      	movs	r1, r5
    8304:	0020      	movs	r0, r4
    8306:	4b8a      	ldr	r3, [pc, #552]	; (8530 <xQueueGenericSend+0x374>)
    8308:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    830a:	683a      	ldr	r2, [r7, #0]
    830c:	68b9      	ldr	r1, [r7, #8]
    830e:	6a3b      	ldr	r3, [r7, #32]
    8310:	0018      	movs	r0, r3
    8312:	4b88      	ldr	r3, [pc, #544]	; (8534 <xQueueGenericSend+0x378>)
    8314:	4798      	blx	r3
    8316:	0003      	movs	r3, r0
    8318:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    831a:	6a3b      	ldr	r3, [r7, #32]
    831c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    831e:	2b00      	cmp	r3, #0
    8320:	d00a      	beq.n	8338 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    8322:	683a      	ldr	r2, [r7, #0]
    8324:	6a3b      	ldr	r3, [r7, #32]
    8326:	0011      	movs	r1, r2
    8328:	0018      	movs	r0, r3
    832a:	4b83      	ldr	r3, [pc, #524]	; (8538 <xQueueGenericSend+0x37c>)
    832c:	4798      	blx	r3
    832e:	1e03      	subs	r3, r0, #0
    8330:	d015      	beq.n	835e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    8332:	4b82      	ldr	r3, [pc, #520]	; (853c <xQueueGenericSend+0x380>)
    8334:	4798      	blx	r3
    8336:	e012      	b.n	835e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8338:	6a3b      	ldr	r3, [r7, #32]
    833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    833c:	2b00      	cmp	r3, #0
    833e:	d009      	beq.n	8354 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    8340:	6a3b      	ldr	r3, [r7, #32]
    8342:	3324      	adds	r3, #36	; 0x24
    8344:	0018      	movs	r0, r3
    8346:	4b7e      	ldr	r3, [pc, #504]	; (8540 <xQueueGenericSend+0x384>)
    8348:	4798      	blx	r3
    834a:	1e03      	subs	r3, r0, #0
    834c:	d007      	beq.n	835e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    834e:	4b7b      	ldr	r3, [pc, #492]	; (853c <xQueueGenericSend+0x380>)
    8350:	4798      	blx	r3
    8352:	e004      	b.n	835e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    8354:	69fb      	ldr	r3, [r7, #28]
    8356:	2b00      	cmp	r3, #0
    8358:	d001      	beq.n	835e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    835a:	4b78      	ldr	r3, [pc, #480]	; (853c <xQueueGenericSend+0x380>)
    835c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    835e:	4b79      	ldr	r3, [pc, #484]	; (8544 <xQueueGenericSend+0x388>)
    8360:	4798      	blx	r3
				return pdPASS;
    8362:	2301      	movs	r3, #1
    8364:	e142      	b.n	85ec <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    8366:	687b      	ldr	r3, [r7, #4]
    8368:	2b00      	cmp	r3, #0
    836a:	d140      	bne.n	83ee <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    836c:	4b75      	ldr	r3, [pc, #468]	; (8544 <xQueueGenericSend+0x388>)
    836e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    8370:	4b67      	ldr	r3, [pc, #412]	; (8510 <xQueueGenericSend+0x354>)
    8372:	4798      	blx	r3
    8374:	0003      	movs	r3, r0
    8376:	0018      	movs	r0, r3
    8378:	4b66      	ldr	r3, [pc, #408]	; (8514 <xQueueGenericSend+0x358>)
    837a:	4798      	blx	r3
    837c:	0003      	movs	r3, r0
    837e:	001a      	movs	r2, r3
    8380:	4b65      	ldr	r3, [pc, #404]	; (8518 <xQueueGenericSend+0x35c>)
    8382:	881b      	ldrh	r3, [r3, #0]
    8384:	4013      	ands	r3, r2
    8386:	b29b      	uxth	r3, r3
    8388:	2b00      	cmp	r3, #0
    838a:	d02e      	beq.n	83ea <xQueueGenericSend+0x22e>
    838c:	6a3b      	ldr	r3, [r7, #32]
    838e:	0018      	movs	r0, r3
    8390:	4b62      	ldr	r3, [pc, #392]	; (851c <xQueueGenericSend+0x360>)
    8392:	4798      	blx	r3
    8394:	0003      	movs	r3, r0
    8396:	001a      	movs	r2, r3
    8398:	4b5f      	ldr	r3, [pc, #380]	; (8518 <xQueueGenericSend+0x35c>)
    839a:	881b      	ldrh	r3, [r3, #0]
    839c:	4013      	ands	r3, r2
    839e:	b29b      	uxth	r3, r3
    83a0:	2b00      	cmp	r3, #0
    83a2:	d022      	beq.n	83ea <xQueueGenericSend+0x22e>
    83a4:	683b      	ldr	r3, [r7, #0]
    83a6:	2b00      	cmp	r3, #0
    83a8:	d10b      	bne.n	83c2 <xQueueGenericSend+0x206>
    83aa:	6a3b      	ldr	r3, [r7, #32]
    83ac:	0018      	movs	r0, r3
    83ae:	4b5c      	ldr	r3, [pc, #368]	; (8520 <xQueueGenericSend+0x364>)
    83b0:	4798      	blx	r3
    83b2:	0003      	movs	r3, r0
    83b4:	001a      	movs	r2, r3
    83b6:	4b5b      	ldr	r3, [pc, #364]	; (8524 <xQueueGenericSend+0x368>)
    83b8:	5c9b      	ldrb	r3, [r3, r2]
    83ba:	3348      	adds	r3, #72	; 0x48
    83bc:	b2db      	uxtb	r3, r3
    83be:	001d      	movs	r5, r3
    83c0:	e000      	b.n	83c4 <xQueueGenericSend+0x208>
    83c2:	254d      	movs	r5, #77	; 0x4d
    83c4:	6a3b      	ldr	r3, [r7, #32]
    83c6:	0018      	movs	r0, r3
    83c8:	4b55      	ldr	r3, [pc, #340]	; (8520 <xQueueGenericSend+0x364>)
    83ca:	4798      	blx	r3
    83cc:	0003      	movs	r3, r0
    83ce:	001a      	movs	r2, r3
    83d0:	4b54      	ldr	r3, [pc, #336]	; (8524 <xQueueGenericSend+0x368>)
    83d2:	5c9c      	ldrb	r4, [r3, r2]
    83d4:	6a3b      	ldr	r3, [r7, #32]
    83d6:	0018      	movs	r0, r3
    83d8:	4b53      	ldr	r3, [pc, #332]	; (8528 <xQueueGenericSend+0x36c>)
    83da:	4798      	blx	r3
    83dc:	0003      	movs	r3, r0
    83de:	b2db      	uxtb	r3, r3
    83e0:	001a      	movs	r2, r3
    83e2:	0021      	movs	r1, r4
    83e4:	0028      	movs	r0, r5
    83e6:	4b51      	ldr	r3, [pc, #324]	; (852c <xQueueGenericSend+0x370>)
    83e8:	4798      	blx	r3
					return errQUEUE_FULL;
    83ea:	2300      	movs	r3, #0
    83ec:	e0fe      	b.n	85ec <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
    83ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83f0:	2b00      	cmp	r3, #0
    83f2:	d106      	bne.n	8402 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    83f4:	2314      	movs	r3, #20
    83f6:	18fb      	adds	r3, r7, r3
    83f8:	0018      	movs	r0, r3
    83fa:	4b53      	ldr	r3, [pc, #332]	; (8548 <xQueueGenericSend+0x38c>)
    83fc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    83fe:	2301      	movs	r3, #1
    8400:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    8402:	4b50      	ldr	r3, [pc, #320]	; (8544 <xQueueGenericSend+0x388>)
    8404:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    8406:	4b51      	ldr	r3, [pc, #324]	; (854c <xQueueGenericSend+0x390>)
    8408:	4798      	blx	r3
		prvLockQueue( pxQueue );
    840a:	4b40      	ldr	r3, [pc, #256]	; (850c <xQueueGenericSend+0x350>)
    840c:	4798      	blx	r3
    840e:	6a3b      	ldr	r3, [r7, #32]
    8410:	2244      	movs	r2, #68	; 0x44
    8412:	5c9b      	ldrb	r3, [r3, r2]
    8414:	b25b      	sxtb	r3, r3
    8416:	3301      	adds	r3, #1
    8418:	d103      	bne.n	8422 <xQueueGenericSend+0x266>
    841a:	6a3b      	ldr	r3, [r7, #32]
    841c:	2244      	movs	r2, #68	; 0x44
    841e:	2100      	movs	r1, #0
    8420:	5499      	strb	r1, [r3, r2]
    8422:	6a3b      	ldr	r3, [r7, #32]
    8424:	2245      	movs	r2, #69	; 0x45
    8426:	5c9b      	ldrb	r3, [r3, r2]
    8428:	b25b      	sxtb	r3, r3
    842a:	3301      	adds	r3, #1
    842c:	d103      	bne.n	8436 <xQueueGenericSend+0x27a>
    842e:	6a3b      	ldr	r3, [r7, #32]
    8430:	2245      	movs	r2, #69	; 0x45
    8432:	2100      	movs	r1, #0
    8434:	5499      	strb	r1, [r3, r2]
    8436:	4b43      	ldr	r3, [pc, #268]	; (8544 <xQueueGenericSend+0x388>)
    8438:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    843a:	1d3a      	adds	r2, r7, #4
    843c:	2314      	movs	r3, #20
    843e:	18fb      	adds	r3, r7, r3
    8440:	0011      	movs	r1, r2
    8442:	0018      	movs	r0, r3
    8444:	4b42      	ldr	r3, [pc, #264]	; (8550 <xQueueGenericSend+0x394>)
    8446:	4798      	blx	r3
    8448:	1e03      	subs	r3, r0, #0
    844a:	d000      	beq.n	844e <xQueueGenericSend+0x292>
    844c:	e08a      	b.n	8564 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    844e:	6a3b      	ldr	r3, [r7, #32]
    8450:	0018      	movs	r0, r3
    8452:	4b40      	ldr	r3, [pc, #256]	; (8554 <xQueueGenericSend+0x398>)
    8454:	4798      	blx	r3
    8456:	1e03      	subs	r3, r0, #0
    8458:	d04f      	beq.n	84fa <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    845a:	4b2d      	ldr	r3, [pc, #180]	; (8510 <xQueueGenericSend+0x354>)
    845c:	4798      	blx	r3
    845e:	0003      	movs	r3, r0
    8460:	0018      	movs	r0, r3
    8462:	4b2c      	ldr	r3, [pc, #176]	; (8514 <xQueueGenericSend+0x358>)
    8464:	4798      	blx	r3
    8466:	0003      	movs	r3, r0
    8468:	001a      	movs	r2, r3
    846a:	4b2b      	ldr	r3, [pc, #172]	; (8518 <xQueueGenericSend+0x35c>)
    846c:	881b      	ldrh	r3, [r3, #0]
    846e:	4013      	ands	r3, r2
    8470:	b29b      	uxth	r3, r3
    8472:	2b00      	cmp	r3, #0
    8474:	d02e      	beq.n	84d4 <xQueueGenericSend+0x318>
    8476:	6a3b      	ldr	r3, [r7, #32]
    8478:	0018      	movs	r0, r3
    847a:	4b28      	ldr	r3, [pc, #160]	; (851c <xQueueGenericSend+0x360>)
    847c:	4798      	blx	r3
    847e:	0003      	movs	r3, r0
    8480:	001a      	movs	r2, r3
    8482:	4b25      	ldr	r3, [pc, #148]	; (8518 <xQueueGenericSend+0x35c>)
    8484:	881b      	ldrh	r3, [r3, #0]
    8486:	4013      	ands	r3, r2
    8488:	b29b      	uxth	r3, r3
    848a:	2b00      	cmp	r3, #0
    848c:	d022      	beq.n	84d4 <xQueueGenericSend+0x318>
    848e:	683b      	ldr	r3, [r7, #0]
    8490:	2b00      	cmp	r3, #0
    8492:	d10b      	bne.n	84ac <xQueueGenericSend+0x2f0>
    8494:	6a3b      	ldr	r3, [r7, #32]
    8496:	0018      	movs	r0, r3
    8498:	4b21      	ldr	r3, [pc, #132]	; (8520 <xQueueGenericSend+0x364>)
    849a:	4798      	blx	r3
    849c:	0003      	movs	r3, r0
    849e:	001a      	movs	r2, r3
    84a0:	4b20      	ldr	r3, [pc, #128]	; (8524 <xQueueGenericSend+0x368>)
    84a2:	5c9b      	ldrb	r3, [r3, r2]
    84a4:	3370      	adds	r3, #112	; 0x70
    84a6:	b2db      	uxtb	r3, r3
    84a8:	001d      	movs	r5, r3
    84aa:	e000      	b.n	84ae <xQueueGenericSend+0x2f2>
    84ac:	2575      	movs	r5, #117	; 0x75
    84ae:	6a3b      	ldr	r3, [r7, #32]
    84b0:	0018      	movs	r0, r3
    84b2:	4b1b      	ldr	r3, [pc, #108]	; (8520 <xQueueGenericSend+0x364>)
    84b4:	4798      	blx	r3
    84b6:	0003      	movs	r3, r0
    84b8:	001a      	movs	r2, r3
    84ba:	4b1a      	ldr	r3, [pc, #104]	; (8524 <xQueueGenericSend+0x368>)
    84bc:	5c9c      	ldrb	r4, [r3, r2]
    84be:	6a3b      	ldr	r3, [r7, #32]
    84c0:	0018      	movs	r0, r3
    84c2:	4b19      	ldr	r3, [pc, #100]	; (8528 <xQueueGenericSend+0x36c>)
    84c4:	4798      	blx	r3
    84c6:	0003      	movs	r3, r0
    84c8:	b2db      	uxtb	r3, r3
    84ca:	001a      	movs	r2, r3
    84cc:	0021      	movs	r1, r4
    84ce:	0028      	movs	r0, r5
    84d0:	4b16      	ldr	r3, [pc, #88]	; (852c <xQueueGenericSend+0x370>)
    84d2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    84d4:	6a3b      	ldr	r3, [r7, #32]
    84d6:	3310      	adds	r3, #16
    84d8:	687a      	ldr	r2, [r7, #4]
    84da:	0011      	movs	r1, r2
    84dc:	0018      	movs	r0, r3
    84de:	4b1e      	ldr	r3, [pc, #120]	; (8558 <xQueueGenericSend+0x39c>)
    84e0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    84e2:	6a3b      	ldr	r3, [r7, #32]
    84e4:	0018      	movs	r0, r3
    84e6:	4b1d      	ldr	r3, [pc, #116]	; (855c <xQueueGenericSend+0x3a0>)
    84e8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    84ea:	4b1d      	ldr	r3, [pc, #116]	; (8560 <xQueueGenericSend+0x3a4>)
    84ec:	4798      	blx	r3
    84ee:	1e03      	subs	r3, r0, #0
    84f0:	d000      	beq.n	84f4 <xQueueGenericSend+0x338>
    84f2:	e69d      	b.n	8230 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    84f4:	4b11      	ldr	r3, [pc, #68]	; (853c <xQueueGenericSend+0x380>)
    84f6:	4798      	blx	r3
    84f8:	e69a      	b.n	8230 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    84fa:	6a3b      	ldr	r3, [r7, #32]
    84fc:	0018      	movs	r0, r3
    84fe:	4b17      	ldr	r3, [pc, #92]	; (855c <xQueueGenericSend+0x3a0>)
    8500:	4798      	blx	r3
				( void ) xTaskResumeAll();
    8502:	4b17      	ldr	r3, [pc, #92]	; (8560 <xQueueGenericSend+0x3a4>)
    8504:	4798      	blx	r3
    8506:	e693      	b.n	8230 <xQueueGenericSend+0x74>
    8508:	0000a949 	.word	0x0000a949
    850c:	00007c29 	.word	0x00007c29
    8510:	00005eb9 	.word	0x00005eb9
    8514:	00005c1d 	.word	0x00005c1d
    8518:	20000110 	.word	0x20000110
    851c:	00005cdd 	.word	0x00005cdd
    8520:	00005bdd 	.word	0x00005bdd
    8524:	20000104 	.word	0x20000104
    8528:	00005cbd 	.word	0x00005cbd
    852c:	00006615 	.word	0x00006615
    8530:	00006c71 	.word	0x00006c71
    8534:	000093f5 	.word	0x000093f5
    8538:	000096f9 	.word	0x000096f9
    853c:	00007c11 	.word	0x00007c11
    8540:	0000a4b9 	.word	0x0000a4b9
    8544:	00007c4d 	.word	0x00007c4d
    8548:	0000a5f9 	.word	0x0000a5f9
    854c:	00009ee1 	.word	0x00009ee1
    8550:	0000a621 	.word	0x0000a621
    8554:	00009649 	.word	0x00009649
    8558:	0000a395 	.word	0x0000a395
    855c:	00009525 	.word	0x00009525
    8560:	00009ef9 	.word	0x00009ef9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    8564:	6a3b      	ldr	r3, [r7, #32]
    8566:	0018      	movs	r0, r3
    8568:	4b22      	ldr	r3, [pc, #136]	; (85f4 <xQueueGenericSend+0x438>)
    856a:	4798      	blx	r3
			( void ) xTaskResumeAll();
    856c:	4b22      	ldr	r3, [pc, #136]	; (85f8 <xQueueGenericSend+0x43c>)
    856e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
    8570:	4b22      	ldr	r3, [pc, #136]	; (85fc <xQueueGenericSend+0x440>)
    8572:	4798      	blx	r3
    8574:	0003      	movs	r3, r0
    8576:	0018      	movs	r0, r3
    8578:	4b21      	ldr	r3, [pc, #132]	; (8600 <xQueueGenericSend+0x444>)
    857a:	4798      	blx	r3
    857c:	0003      	movs	r3, r0
    857e:	001a      	movs	r2, r3
    8580:	4b20      	ldr	r3, [pc, #128]	; (8604 <xQueueGenericSend+0x448>)
    8582:	881b      	ldrh	r3, [r3, #0]
    8584:	4013      	ands	r3, r2
    8586:	b29b      	uxth	r3, r3
    8588:	2b00      	cmp	r3, #0
    858a:	d02e      	beq.n	85ea <xQueueGenericSend+0x42e>
    858c:	6a3b      	ldr	r3, [r7, #32]
    858e:	0018      	movs	r0, r3
    8590:	4b1d      	ldr	r3, [pc, #116]	; (8608 <xQueueGenericSend+0x44c>)
    8592:	4798      	blx	r3
    8594:	0003      	movs	r3, r0
    8596:	001a      	movs	r2, r3
    8598:	4b1a      	ldr	r3, [pc, #104]	; (8604 <xQueueGenericSend+0x448>)
    859a:	881b      	ldrh	r3, [r3, #0]
    859c:	4013      	ands	r3, r2
    859e:	b29b      	uxth	r3, r3
    85a0:	2b00      	cmp	r3, #0
    85a2:	d022      	beq.n	85ea <xQueueGenericSend+0x42e>
    85a4:	683b      	ldr	r3, [r7, #0]
    85a6:	2b00      	cmp	r3, #0
    85a8:	d10b      	bne.n	85c2 <xQueueGenericSend+0x406>
    85aa:	6a3b      	ldr	r3, [r7, #32]
    85ac:	0018      	movs	r0, r3
    85ae:	4b17      	ldr	r3, [pc, #92]	; (860c <xQueueGenericSend+0x450>)
    85b0:	4798      	blx	r3
    85b2:	0003      	movs	r3, r0
    85b4:	001a      	movs	r2, r3
    85b6:	4b16      	ldr	r3, [pc, #88]	; (8610 <xQueueGenericSend+0x454>)
    85b8:	5c9b      	ldrb	r3, [r3, r2]
    85ba:	3348      	adds	r3, #72	; 0x48
    85bc:	b2db      	uxtb	r3, r3
    85be:	001d      	movs	r5, r3
    85c0:	e000      	b.n	85c4 <xQueueGenericSend+0x408>
    85c2:	254d      	movs	r5, #77	; 0x4d
    85c4:	6a3b      	ldr	r3, [r7, #32]
    85c6:	0018      	movs	r0, r3
    85c8:	4b10      	ldr	r3, [pc, #64]	; (860c <xQueueGenericSend+0x450>)
    85ca:	4798      	blx	r3
    85cc:	0003      	movs	r3, r0
    85ce:	001a      	movs	r2, r3
    85d0:	4b0f      	ldr	r3, [pc, #60]	; (8610 <xQueueGenericSend+0x454>)
    85d2:	5c9c      	ldrb	r4, [r3, r2]
    85d4:	6a3b      	ldr	r3, [r7, #32]
    85d6:	0018      	movs	r0, r3
    85d8:	4b0e      	ldr	r3, [pc, #56]	; (8614 <xQueueGenericSend+0x458>)
    85da:	4798      	blx	r3
    85dc:	0003      	movs	r3, r0
    85de:	b2db      	uxtb	r3, r3
    85e0:	001a      	movs	r2, r3
    85e2:	0021      	movs	r1, r4
    85e4:	0028      	movs	r0, r5
    85e6:	4b0c      	ldr	r3, [pc, #48]	; (8618 <xQueueGenericSend+0x45c>)
    85e8:	4798      	blx	r3
			return errQUEUE_FULL;
    85ea:	2300      	movs	r3, #0
		}
	}
}
    85ec:	0018      	movs	r0, r3
    85ee:	46bd      	mov	sp, r7
    85f0:	b00a      	add	sp, #40	; 0x28
    85f2:	bdb0      	pop	{r4, r5, r7, pc}
    85f4:	00009525 	.word	0x00009525
    85f8:	00009ef9 	.word	0x00009ef9
    85fc:	00005eb9 	.word	0x00005eb9
    8600:	00005c1d 	.word	0x00005c1d
    8604:	20000110 	.word	0x20000110
    8608:	00005cdd 	.word	0x00005cdd
    860c:	00005bdd 	.word	0x00005bdd
    8610:	20000104 	.word	0x20000104
    8614:	00005cbd 	.word	0x00005cbd
    8618:	00006615 	.word	0x00006615

0000861c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    861c:	b5b0      	push	{r4, r5, r7, lr}
    861e:	b088      	sub	sp, #32
    8620:	af00      	add	r7, sp, #0
    8622:	60f8      	str	r0, [r7, #12]
    8624:	60b9      	str	r1, [r7, #8]
    8626:	607a      	str	r2, [r7, #4]
    8628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    862a:	68fb      	ldr	r3, [r7, #12]
    862c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    862e:	69bb      	ldr	r3, [r7, #24]
    8630:	2b00      	cmp	r3, #0
    8632:	d101      	bne.n	8638 <xQueueGenericSendFromISR+0x1c>
    8634:	b672      	cpsid	i
    8636:	e7fe      	b.n	8636 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    8638:	68bb      	ldr	r3, [r7, #8]
    863a:	2b00      	cmp	r3, #0
    863c:	d103      	bne.n	8646 <xQueueGenericSendFromISR+0x2a>
    863e:	69bb      	ldr	r3, [r7, #24]
    8640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8642:	2b00      	cmp	r3, #0
    8644:	d101      	bne.n	864a <xQueueGenericSendFromISR+0x2e>
    8646:	2301      	movs	r3, #1
    8648:	e000      	b.n	864c <xQueueGenericSendFromISR+0x30>
    864a:	2300      	movs	r3, #0
    864c:	2b00      	cmp	r3, #0
    864e:	d101      	bne.n	8654 <xQueueGenericSendFromISR+0x38>
    8650:	b672      	cpsid	i
    8652:	e7fe      	b.n	8652 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    8654:	683b      	ldr	r3, [r7, #0]
    8656:	2b02      	cmp	r3, #2
    8658:	d103      	bne.n	8662 <xQueueGenericSendFromISR+0x46>
    865a:	69bb      	ldr	r3, [r7, #24]
    865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    865e:	2b01      	cmp	r3, #1
    8660:	d101      	bne.n	8666 <xQueueGenericSendFromISR+0x4a>
    8662:	2301      	movs	r3, #1
    8664:	e000      	b.n	8668 <xQueueGenericSendFromISR+0x4c>
    8666:	2300      	movs	r3, #0
    8668:	2b00      	cmp	r3, #0
    866a:	d101      	bne.n	8670 <xQueueGenericSendFromISR+0x54>
    866c:	b672      	cpsid	i
    866e:	e7fe      	b.n	866e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    8670:	4b68      	ldr	r3, [pc, #416]	; (8814 <xQueueGenericSendFromISR+0x1f8>)
    8672:	4798      	blx	r3
    8674:	0003      	movs	r3, r0
    8676:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    8678:	69bb      	ldr	r3, [r7, #24]
    867a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    867c:	69bb      	ldr	r3, [r7, #24]
    867e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8680:	429a      	cmp	r2, r3
    8682:	d303      	bcc.n	868c <xQueueGenericSendFromISR+0x70>
    8684:	683b      	ldr	r3, [r7, #0]
    8686:	2b02      	cmp	r3, #2
    8688:	d000      	beq.n	868c <xQueueGenericSendFromISR+0x70>
    868a:	e088      	b.n	879e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    868c:	2313      	movs	r3, #19
    868e:	18fb      	adds	r3, r7, r3
    8690:	69ba      	ldr	r2, [r7, #24]
    8692:	2145      	movs	r1, #69	; 0x45
    8694:	5c52      	ldrb	r2, [r2, r1]
    8696:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    8698:	69bb      	ldr	r3, [r7, #24]
    869a:	0018      	movs	r0, r3
    869c:	4b5e      	ldr	r3, [pc, #376]	; (8818 <xQueueGenericSendFromISR+0x1fc>)
    869e:	4798      	blx	r3
    86a0:	0003      	movs	r3, r0
    86a2:	001a      	movs	r2, r3
    86a4:	4b5d      	ldr	r3, [pc, #372]	; (881c <xQueueGenericSendFromISR+0x200>)
    86a6:	881b      	ldrh	r3, [r3, #0]
    86a8:	4013      	ands	r3, r2
    86aa:	b29b      	uxth	r3, r3
    86ac:	2b00      	cmp	r3, #0
    86ae:	d022      	beq.n	86f6 <xQueueGenericSendFromISR+0xda>
    86b0:	683b      	ldr	r3, [r7, #0]
    86b2:	2b00      	cmp	r3, #0
    86b4:	d10b      	bne.n	86ce <xQueueGenericSendFromISR+0xb2>
    86b6:	69bb      	ldr	r3, [r7, #24]
    86b8:	0018      	movs	r0, r3
    86ba:	4b59      	ldr	r3, [pc, #356]	; (8820 <xQueueGenericSendFromISR+0x204>)
    86bc:	4798      	blx	r3
    86be:	0003      	movs	r3, r0
    86c0:	001a      	movs	r2, r3
    86c2:	4b58      	ldr	r3, [pc, #352]	; (8824 <xQueueGenericSendFromISR+0x208>)
    86c4:	5c9b      	ldrb	r3, [r3, r2]
    86c6:	3330      	adds	r3, #48	; 0x30
    86c8:	b2db      	uxtb	r3, r3
    86ca:	001d      	movs	r5, r3
    86cc:	e000      	b.n	86d0 <xQueueGenericSendFromISR+0xb4>
    86ce:	2535      	movs	r5, #53	; 0x35
    86d0:	69bb      	ldr	r3, [r7, #24]
    86d2:	0018      	movs	r0, r3
    86d4:	4b52      	ldr	r3, [pc, #328]	; (8820 <xQueueGenericSendFromISR+0x204>)
    86d6:	4798      	blx	r3
    86d8:	0003      	movs	r3, r0
    86da:	001a      	movs	r2, r3
    86dc:	4b51      	ldr	r3, [pc, #324]	; (8824 <xQueueGenericSendFromISR+0x208>)
    86de:	5c9c      	ldrb	r4, [r3, r2]
    86e0:	69bb      	ldr	r3, [r7, #24]
    86e2:	0018      	movs	r0, r3
    86e4:	4b50      	ldr	r3, [pc, #320]	; (8828 <xQueueGenericSendFromISR+0x20c>)
    86e6:	4798      	blx	r3
    86e8:	0003      	movs	r3, r0
    86ea:	b2db      	uxtb	r3, r3
    86ec:	001a      	movs	r2, r3
    86ee:	0021      	movs	r1, r4
    86f0:	0028      	movs	r0, r5
    86f2:	4b4e      	ldr	r3, [pc, #312]	; (882c <xQueueGenericSendFromISR+0x210>)
    86f4:	4798      	blx	r3
    86f6:	69bb      	ldr	r3, [r7, #24]
    86f8:	0018      	movs	r0, r3
    86fa:	4b49      	ldr	r3, [pc, #292]	; (8820 <xQueueGenericSendFromISR+0x204>)
    86fc:	4798      	blx	r3
    86fe:	0003      	movs	r3, r0
    8700:	001a      	movs	r2, r3
    8702:	4b48      	ldr	r3, [pc, #288]	; (8824 <xQueueGenericSendFromISR+0x208>)
    8704:	5c9c      	ldrb	r4, [r3, r2]
    8706:	69bb      	ldr	r3, [r7, #24]
    8708:	0018      	movs	r0, r3
    870a:	4b47      	ldr	r3, [pc, #284]	; (8828 <xQueueGenericSendFromISR+0x20c>)
    870c:	4798      	blx	r3
    870e:	0003      	movs	r3, r0
    8710:	b2d9      	uxtb	r1, r3
    8712:	69bb      	ldr	r3, [r7, #24]
    8714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8716:	b2db      	uxtb	r3, r3
    8718:	3301      	adds	r3, #1
    871a:	b2db      	uxtb	r3, r3
    871c:	001a      	movs	r2, r3
    871e:	0020      	movs	r0, r4
    8720:	4b43      	ldr	r3, [pc, #268]	; (8830 <xQueueGenericSendFromISR+0x214>)
    8722:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    8724:	683a      	ldr	r2, [r7, #0]
    8726:	68b9      	ldr	r1, [r7, #8]
    8728:	69bb      	ldr	r3, [r7, #24]
    872a:	0018      	movs	r0, r3
    872c:	4b41      	ldr	r3, [pc, #260]	; (8834 <xQueueGenericSendFromISR+0x218>)
    872e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    8730:	2313      	movs	r3, #19
    8732:	18fb      	adds	r3, r7, r3
    8734:	781b      	ldrb	r3, [r3, #0]
    8736:	b25b      	sxtb	r3, r3
    8738:	3301      	adds	r3, #1
    873a:	d124      	bne.n	8786 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    873c:	69bb      	ldr	r3, [r7, #24]
    873e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8740:	2b00      	cmp	r3, #0
    8742:	d00e      	beq.n	8762 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    8744:	683a      	ldr	r2, [r7, #0]
    8746:	69bb      	ldr	r3, [r7, #24]
    8748:	0011      	movs	r1, r2
    874a:	0018      	movs	r0, r3
    874c:	4b3a      	ldr	r3, [pc, #232]	; (8838 <xQueueGenericSendFromISR+0x21c>)
    874e:	4798      	blx	r3
    8750:	1e03      	subs	r3, r0, #0
    8752:	d021      	beq.n	8798 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	2b00      	cmp	r3, #0
    8758:	d01e      	beq.n	8798 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    875a:	687b      	ldr	r3, [r7, #4]
    875c:	2201      	movs	r2, #1
    875e:	601a      	str	r2, [r3, #0]
    8760:	e01a      	b.n	8798 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8762:	69bb      	ldr	r3, [r7, #24]
    8764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8766:	2b00      	cmp	r3, #0
    8768:	d016      	beq.n	8798 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    876a:	69bb      	ldr	r3, [r7, #24]
    876c:	3324      	adds	r3, #36	; 0x24
    876e:	0018      	movs	r0, r3
    8770:	4b32      	ldr	r3, [pc, #200]	; (883c <xQueueGenericSendFromISR+0x220>)
    8772:	4798      	blx	r3
    8774:	1e03      	subs	r3, r0, #0
    8776:	d00f      	beq.n	8798 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    8778:	687b      	ldr	r3, [r7, #4]
    877a:	2b00      	cmp	r3, #0
    877c:	d00c      	beq.n	8798 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    877e:	687b      	ldr	r3, [r7, #4]
    8780:	2201      	movs	r2, #1
    8782:	601a      	str	r2, [r3, #0]
    8784:	e008      	b.n	8798 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    8786:	2313      	movs	r3, #19
    8788:	18fb      	adds	r3, r7, r3
    878a:	781b      	ldrb	r3, [r3, #0]
    878c:	3301      	adds	r3, #1
    878e:	b2db      	uxtb	r3, r3
    8790:	b259      	sxtb	r1, r3
    8792:	69bb      	ldr	r3, [r7, #24]
    8794:	2245      	movs	r2, #69	; 0x45
    8796:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    8798:	2301      	movs	r3, #1
    879a:	61fb      	str	r3, [r7, #28]
		{
    879c:	e030      	b.n	8800 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    879e:	69bb      	ldr	r3, [r7, #24]
    87a0:	0018      	movs	r0, r3
    87a2:	4b1d      	ldr	r3, [pc, #116]	; (8818 <xQueueGenericSendFromISR+0x1fc>)
    87a4:	4798      	blx	r3
    87a6:	0003      	movs	r3, r0
    87a8:	001a      	movs	r2, r3
    87aa:	4b1c      	ldr	r3, [pc, #112]	; (881c <xQueueGenericSendFromISR+0x200>)
    87ac:	881b      	ldrh	r3, [r3, #0]
    87ae:	4013      	ands	r3, r2
    87b0:	b29b      	uxth	r3, r3
    87b2:	2b00      	cmp	r3, #0
    87b4:	d022      	beq.n	87fc <xQueueGenericSendFromISR+0x1e0>
    87b6:	683b      	ldr	r3, [r7, #0]
    87b8:	2b00      	cmp	r3, #0
    87ba:	d10b      	bne.n	87d4 <xQueueGenericSendFromISR+0x1b8>
    87bc:	69bb      	ldr	r3, [r7, #24]
    87be:	0018      	movs	r0, r3
    87c0:	4b17      	ldr	r3, [pc, #92]	; (8820 <xQueueGenericSendFromISR+0x204>)
    87c2:	4798      	blx	r3
    87c4:	0003      	movs	r3, r0
    87c6:	001a      	movs	r2, r3
    87c8:	4b16      	ldr	r3, [pc, #88]	; (8824 <xQueueGenericSendFromISR+0x208>)
    87ca:	5c9b      	ldrb	r3, [r3, r2]
    87cc:	3358      	adds	r3, #88	; 0x58
    87ce:	b2db      	uxtb	r3, r3
    87d0:	001d      	movs	r5, r3
    87d2:	e000      	b.n	87d6 <xQueueGenericSendFromISR+0x1ba>
    87d4:	255d      	movs	r5, #93	; 0x5d
    87d6:	69bb      	ldr	r3, [r7, #24]
    87d8:	0018      	movs	r0, r3
    87da:	4b11      	ldr	r3, [pc, #68]	; (8820 <xQueueGenericSendFromISR+0x204>)
    87dc:	4798      	blx	r3
    87de:	0003      	movs	r3, r0
    87e0:	001a      	movs	r2, r3
    87e2:	4b10      	ldr	r3, [pc, #64]	; (8824 <xQueueGenericSendFromISR+0x208>)
    87e4:	5c9c      	ldrb	r4, [r3, r2]
    87e6:	69bb      	ldr	r3, [r7, #24]
    87e8:	0018      	movs	r0, r3
    87ea:	4b0f      	ldr	r3, [pc, #60]	; (8828 <xQueueGenericSendFromISR+0x20c>)
    87ec:	4798      	blx	r3
    87ee:	0003      	movs	r3, r0
    87f0:	b2db      	uxtb	r3, r3
    87f2:	001a      	movs	r2, r3
    87f4:	0021      	movs	r1, r4
    87f6:	0028      	movs	r0, r5
    87f8:	4b0c      	ldr	r3, [pc, #48]	; (882c <xQueueGenericSendFromISR+0x210>)
    87fa:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    87fc:	2300      	movs	r3, #0
    87fe:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    8800:	697b      	ldr	r3, [r7, #20]
    8802:	0018      	movs	r0, r3
    8804:	4b0e      	ldr	r3, [pc, #56]	; (8840 <xQueueGenericSendFromISR+0x224>)
    8806:	4798      	blx	r3

	return xReturn;
    8808:	69fb      	ldr	r3, [r7, #28]
}
    880a:	0018      	movs	r0, r3
    880c:	46bd      	mov	sp, r7
    880e:	b008      	add	sp, #32
    8810:	bdb0      	pop	{r4, r5, r7, pc}
    8812:	46c0      	nop			; (mov r8, r8)
    8814:	00007c7d 	.word	0x00007c7d
    8818:	00005cdd 	.word	0x00005cdd
    881c:	20000110 	.word	0x20000110
    8820:	00005bdd 	.word	0x00005bdd
    8824:	20000104 	.word	0x20000104
    8828:	00005cbd 	.word	0x00005cbd
    882c:	00006615 	.word	0x00006615
    8830:	00006c71 	.word	0x00006c71
    8834:	000093f5 	.word	0x000093f5
    8838:	000096f9 	.word	0x000096f9
    883c:	0000a4b9 	.word	0x0000a4b9
    8840:	00007c89 	.word	0x00007c89

00008844 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    8844:	b580      	push	{r7, lr}
    8846:	b082      	sub	sp, #8
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
    884c:	6039      	str	r1, [r7, #0]
    884e:	6839      	ldr	r1, [r7, #0]
    8850:	687b      	ldr	r3, [r7, #4]
    8852:	2200      	movs	r2, #0
    8854:	0018      	movs	r0, r3
    8856:	4b03      	ldr	r3, [pc, #12]	; (8864 <xQueueGiveFromISR+0x20>)
    8858:	4798      	blx	r3
    885a:	0003      	movs	r3, r0
    885c:	0018      	movs	r0, r3
    885e:	46bd      	mov	sp, r7
    8860:	b002      	add	sp, #8
    8862:	bd80      	pop	{r7, pc}
    8864:	00008869 	.word	0x00008869

00008868 <MyWrapper>:
{
    8868:	b5b0      	push	{r4, r5, r7, lr}
    886a:	b08a      	sub	sp, #40	; 0x28
    886c:	af00      	add	r7, sp, #0
    886e:	60f8      	str	r0, [r7, #12]
    8870:	60b9      	str	r1, [r7, #8]
    8872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    8874:	68fb      	ldr	r3, [r7, #12]
    8876:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    8878:	6a3b      	ldr	r3, [r7, #32]
    887a:	2b00      	cmp	r3, #0
    887c:	d101      	bne.n	8882 <MyWrapper+0x1a>
    887e:	b672      	cpsid	i
    8880:	e7fe      	b.n	8880 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    8882:	6a3b      	ldr	r3, [r7, #32]
    8884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8886:	2b00      	cmp	r3, #0
    8888:	d001      	beq.n	888e <MyWrapper+0x26>
    888a:	b672      	cpsid	i
    888c:	e7fe      	b.n	888c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    888e:	6a3b      	ldr	r3, [r7, #32]
    8890:	681b      	ldr	r3, [r3, #0]
    8892:	2b00      	cmp	r3, #0
    8894:	d103      	bne.n	889e <MyWrapper+0x36>
    8896:	6a3b      	ldr	r3, [r7, #32]
    8898:	685b      	ldr	r3, [r3, #4]
    889a:	2b00      	cmp	r3, #0
    889c:	d101      	bne.n	88a2 <MyWrapper+0x3a>
    889e:	2301      	movs	r3, #1
    88a0:	e000      	b.n	88a4 <MyWrapper+0x3c>
    88a2:	2300      	movs	r3, #0
    88a4:	2b00      	cmp	r3, #0
    88a6:	d101      	bne.n	88ac <MyWrapper+0x44>
    88a8:	b672      	cpsid	i
    88aa:	e7fe      	b.n	88aa <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    88ac:	4b66      	ldr	r3, [pc, #408]	; (8a48 <MyWrapper+0x1e0>)
    88ae:	4798      	blx	r3
    88b0:	0003      	movs	r3, r0
    88b2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    88b4:	6a3b      	ldr	r3, [r7, #32]
    88b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    88b8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    88ba:	6a3b      	ldr	r3, [r7, #32]
    88bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    88be:	69bb      	ldr	r3, [r7, #24]
    88c0:	429a      	cmp	r2, r3
    88c2:	d800      	bhi.n	88c6 <MyWrapper+0x5e>
    88c4:	e085      	b.n	89d2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    88c6:	2317      	movs	r3, #23
    88c8:	18fb      	adds	r3, r7, r3
    88ca:	6a3a      	ldr	r2, [r7, #32]
    88cc:	2145      	movs	r1, #69	; 0x45
    88ce:	5c52      	ldrb	r2, [r2, r1]
    88d0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    88d2:	6a3b      	ldr	r3, [r7, #32]
    88d4:	0018      	movs	r0, r3
    88d6:	4b5d      	ldr	r3, [pc, #372]	; (8a4c <MyWrapper+0x1e4>)
    88d8:	4798      	blx	r3
    88da:	0003      	movs	r3, r0
    88dc:	001a      	movs	r2, r3
    88de:	4b5c      	ldr	r3, [pc, #368]	; (8a50 <MyWrapper+0x1e8>)
    88e0:	881b      	ldrh	r3, [r3, #0]
    88e2:	4013      	ands	r3, r2
    88e4:	b29b      	uxth	r3, r3
    88e6:	2b00      	cmp	r3, #0
    88e8:	d022      	beq.n	8930 <MyWrapper+0xc8>
    88ea:	687b      	ldr	r3, [r7, #4]
    88ec:	2b00      	cmp	r3, #0
    88ee:	d10b      	bne.n	8908 <MyWrapper+0xa0>
    88f0:	6a3b      	ldr	r3, [r7, #32]
    88f2:	0018      	movs	r0, r3
    88f4:	4b57      	ldr	r3, [pc, #348]	; (8a54 <MyWrapper+0x1ec>)
    88f6:	4798      	blx	r3
    88f8:	0003      	movs	r3, r0
    88fa:	001a      	movs	r2, r3
    88fc:	4b56      	ldr	r3, [pc, #344]	; (8a58 <MyWrapper+0x1f0>)
    88fe:	5c9b      	ldrb	r3, [r3, r2]
    8900:	3330      	adds	r3, #48	; 0x30
    8902:	b2db      	uxtb	r3, r3
    8904:	001d      	movs	r5, r3
    8906:	e000      	b.n	890a <MyWrapper+0xa2>
    8908:	2535      	movs	r5, #53	; 0x35
    890a:	6a3b      	ldr	r3, [r7, #32]
    890c:	0018      	movs	r0, r3
    890e:	4b51      	ldr	r3, [pc, #324]	; (8a54 <MyWrapper+0x1ec>)
    8910:	4798      	blx	r3
    8912:	0003      	movs	r3, r0
    8914:	001a      	movs	r2, r3
    8916:	4b50      	ldr	r3, [pc, #320]	; (8a58 <MyWrapper+0x1f0>)
    8918:	5c9c      	ldrb	r4, [r3, r2]
    891a:	6a3b      	ldr	r3, [r7, #32]
    891c:	0018      	movs	r0, r3
    891e:	4b4f      	ldr	r3, [pc, #316]	; (8a5c <MyWrapper+0x1f4>)
    8920:	4798      	blx	r3
    8922:	0003      	movs	r3, r0
    8924:	b2db      	uxtb	r3, r3
    8926:	001a      	movs	r2, r3
    8928:	0021      	movs	r1, r4
    892a:	0028      	movs	r0, r5
    892c:	4b4c      	ldr	r3, [pc, #304]	; (8a60 <MyWrapper+0x1f8>)
    892e:	4798      	blx	r3
    8930:	6a3b      	ldr	r3, [r7, #32]
    8932:	0018      	movs	r0, r3
    8934:	4b47      	ldr	r3, [pc, #284]	; (8a54 <MyWrapper+0x1ec>)
    8936:	4798      	blx	r3
    8938:	0003      	movs	r3, r0
    893a:	001a      	movs	r2, r3
    893c:	4b46      	ldr	r3, [pc, #280]	; (8a58 <MyWrapper+0x1f0>)
    893e:	5c9c      	ldrb	r4, [r3, r2]
    8940:	6a3b      	ldr	r3, [r7, #32]
    8942:	0018      	movs	r0, r3
    8944:	4b45      	ldr	r3, [pc, #276]	; (8a5c <MyWrapper+0x1f4>)
    8946:	4798      	blx	r3
    8948:	0003      	movs	r3, r0
    894a:	b2d9      	uxtb	r1, r3
    894c:	6a3b      	ldr	r3, [r7, #32]
    894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8950:	b2db      	uxtb	r3, r3
    8952:	3301      	adds	r3, #1
    8954:	b2db      	uxtb	r3, r3
    8956:	001a      	movs	r2, r3
    8958:	0020      	movs	r0, r4
    895a:	4b42      	ldr	r3, [pc, #264]	; (8a64 <MyWrapper+0x1fc>)
    895c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    895e:	69bb      	ldr	r3, [r7, #24]
    8960:	1c5a      	adds	r2, r3, #1
    8962:	6a3b      	ldr	r3, [r7, #32]
    8964:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    8966:	2317      	movs	r3, #23
    8968:	18fb      	adds	r3, r7, r3
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	b25b      	sxtb	r3, r3
    896e:	3301      	adds	r3, #1
    8970:	d123      	bne.n	89ba <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    8972:	6a3b      	ldr	r3, [r7, #32]
    8974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8976:	2b00      	cmp	r3, #0
    8978:	d00d      	beq.n	8996 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    897a:	6a3b      	ldr	r3, [r7, #32]
    897c:	2100      	movs	r1, #0
    897e:	0018      	movs	r0, r3
    8980:	4b39      	ldr	r3, [pc, #228]	; (8a68 <MyWrapper+0x200>)
    8982:	4798      	blx	r3
    8984:	1e03      	subs	r3, r0, #0
    8986:	d021      	beq.n	89cc <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    8988:	68bb      	ldr	r3, [r7, #8]
    898a:	2b00      	cmp	r3, #0
    898c:	d01e      	beq.n	89cc <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    898e:	68bb      	ldr	r3, [r7, #8]
    8990:	2201      	movs	r2, #1
    8992:	601a      	str	r2, [r3, #0]
    8994:	e01a      	b.n	89cc <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8996:	6a3b      	ldr	r3, [r7, #32]
    8998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    899a:	2b00      	cmp	r3, #0
    899c:	d016      	beq.n	89cc <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    899e:	6a3b      	ldr	r3, [r7, #32]
    89a0:	3324      	adds	r3, #36	; 0x24
    89a2:	0018      	movs	r0, r3
    89a4:	4b31      	ldr	r3, [pc, #196]	; (8a6c <MyWrapper+0x204>)
    89a6:	4798      	blx	r3
    89a8:	1e03      	subs	r3, r0, #0
    89aa:	d00f      	beq.n	89cc <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    89ac:	68bb      	ldr	r3, [r7, #8]
    89ae:	2b00      	cmp	r3, #0
    89b0:	d00c      	beq.n	89cc <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    89b2:	68bb      	ldr	r3, [r7, #8]
    89b4:	2201      	movs	r2, #1
    89b6:	601a      	str	r2, [r3, #0]
    89b8:	e008      	b.n	89cc <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    89ba:	2317      	movs	r3, #23
    89bc:	18fb      	adds	r3, r7, r3
    89be:	781b      	ldrb	r3, [r3, #0]
    89c0:	3301      	adds	r3, #1
    89c2:	b2db      	uxtb	r3, r3
    89c4:	b259      	sxtb	r1, r3
    89c6:	6a3b      	ldr	r3, [r7, #32]
    89c8:	2245      	movs	r2, #69	; 0x45
    89ca:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    89cc:	2301      	movs	r3, #1
    89ce:	627b      	str	r3, [r7, #36]	; 0x24
    89d0:	e030      	b.n	8a34 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    89d2:	6a3b      	ldr	r3, [r7, #32]
    89d4:	0018      	movs	r0, r3
    89d6:	4b1d      	ldr	r3, [pc, #116]	; (8a4c <MyWrapper+0x1e4>)
    89d8:	4798      	blx	r3
    89da:	0003      	movs	r3, r0
    89dc:	001a      	movs	r2, r3
    89de:	4b1c      	ldr	r3, [pc, #112]	; (8a50 <MyWrapper+0x1e8>)
    89e0:	881b      	ldrh	r3, [r3, #0]
    89e2:	4013      	ands	r3, r2
    89e4:	b29b      	uxth	r3, r3
    89e6:	2b00      	cmp	r3, #0
    89e8:	d022      	beq.n	8a30 <MyWrapper+0x1c8>
    89ea:	687b      	ldr	r3, [r7, #4]
    89ec:	2b00      	cmp	r3, #0
    89ee:	d10b      	bne.n	8a08 <MyWrapper+0x1a0>
    89f0:	6a3b      	ldr	r3, [r7, #32]
    89f2:	0018      	movs	r0, r3
    89f4:	4b17      	ldr	r3, [pc, #92]	; (8a54 <MyWrapper+0x1ec>)
    89f6:	4798      	blx	r3
    89f8:	0003      	movs	r3, r0
    89fa:	001a      	movs	r2, r3
    89fc:	4b16      	ldr	r3, [pc, #88]	; (8a58 <MyWrapper+0x1f0>)
    89fe:	5c9b      	ldrb	r3, [r3, r2]
    8a00:	3358      	adds	r3, #88	; 0x58
    8a02:	b2db      	uxtb	r3, r3
    8a04:	001d      	movs	r5, r3
    8a06:	e000      	b.n	8a0a <MyWrapper+0x1a2>
    8a08:	255d      	movs	r5, #93	; 0x5d
    8a0a:	6a3b      	ldr	r3, [r7, #32]
    8a0c:	0018      	movs	r0, r3
    8a0e:	4b11      	ldr	r3, [pc, #68]	; (8a54 <MyWrapper+0x1ec>)
    8a10:	4798      	blx	r3
    8a12:	0003      	movs	r3, r0
    8a14:	001a      	movs	r2, r3
    8a16:	4b10      	ldr	r3, [pc, #64]	; (8a58 <MyWrapper+0x1f0>)
    8a18:	5c9c      	ldrb	r4, [r3, r2]
    8a1a:	6a3b      	ldr	r3, [r7, #32]
    8a1c:	0018      	movs	r0, r3
    8a1e:	4b0f      	ldr	r3, [pc, #60]	; (8a5c <MyWrapper+0x1f4>)
    8a20:	4798      	blx	r3
    8a22:	0003      	movs	r3, r0
    8a24:	b2db      	uxtb	r3, r3
    8a26:	001a      	movs	r2, r3
    8a28:	0021      	movs	r1, r4
    8a2a:	0028      	movs	r0, r5
    8a2c:	4b0c      	ldr	r3, [pc, #48]	; (8a60 <MyWrapper+0x1f8>)
    8a2e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    8a30:	2300      	movs	r3, #0
    8a32:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    8a34:	69fb      	ldr	r3, [r7, #28]
    8a36:	0018      	movs	r0, r3
    8a38:	4b0d      	ldr	r3, [pc, #52]	; (8a70 <MyWrapper+0x208>)
    8a3a:	4798      	blx	r3

	return xReturn;
    8a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8a3e:	0018      	movs	r0, r3
    8a40:	46bd      	mov	sp, r7
    8a42:	b00a      	add	sp, #40	; 0x28
    8a44:	bdb0      	pop	{r4, r5, r7, pc}
    8a46:	46c0      	nop			; (mov r8, r8)
    8a48:	00007c7d 	.word	0x00007c7d
    8a4c:	00005cdd 	.word	0x00005cdd
    8a50:	20000110 	.word	0x20000110
    8a54:	00005bdd 	.word	0x00005bdd
    8a58:	20000104 	.word	0x20000104
    8a5c:	00005cbd 	.word	0x00005cbd
    8a60:	00006615 	.word	0x00006615
    8a64:	00006c71 	.word	0x00006c71
    8a68:	000096f9 	.word	0x000096f9
    8a6c:	0000a4b9 	.word	0x0000a4b9
    8a70:	00007c89 	.word	0x00007c89

00008a74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    8a74:	b5b0      	push	{r4, r5, r7, lr}
    8a76:	b08a      	sub	sp, #40	; 0x28
    8a78:	af00      	add	r7, sp, #0
    8a7a:	60f8      	str	r0, [r7, #12]
    8a7c:	60b9      	str	r1, [r7, #8]
    8a7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    8a80:	2300      	movs	r3, #0
    8a82:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    8a84:	68fb      	ldr	r3, [r7, #12]
    8a86:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    8a88:	6a3b      	ldr	r3, [r7, #32]
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d101      	bne.n	8a92 <xQueueReceive+0x1e>
    8a8e:	b672      	cpsid	i
    8a90:	e7fe      	b.n	8a90 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    8a92:	68bb      	ldr	r3, [r7, #8]
    8a94:	2b00      	cmp	r3, #0
    8a96:	d103      	bne.n	8aa0 <xQueueReceive+0x2c>
    8a98:	6a3b      	ldr	r3, [r7, #32]
    8a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d101      	bne.n	8aa4 <xQueueReceive+0x30>
    8aa0:	2301      	movs	r3, #1
    8aa2:	e000      	b.n	8aa6 <xQueueReceive+0x32>
    8aa4:	2300      	movs	r3, #0
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d101      	bne.n	8aae <xQueueReceive+0x3a>
    8aaa:	b672      	cpsid	i
    8aac:	e7fe      	b.n	8aac <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    8aae:	4bbf      	ldr	r3, [pc, #764]	; (8dac <xQueueReceive+0x338>)
    8ab0:	4798      	blx	r3
    8ab2:	1e03      	subs	r3, r0, #0
    8ab4:	d102      	bne.n	8abc <xQueueReceive+0x48>
    8ab6:	687b      	ldr	r3, [r7, #4]
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d101      	bne.n	8ac0 <xQueueReceive+0x4c>
    8abc:	2301      	movs	r3, #1
    8abe:	e000      	b.n	8ac2 <xQueueReceive+0x4e>
    8ac0:	2300      	movs	r3, #0
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	d101      	bne.n	8aca <xQueueReceive+0x56>
    8ac6:	b672      	cpsid	i
    8ac8:	e7fe      	b.n	8ac8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    8aca:	4bb9      	ldr	r3, [pc, #740]	; (8db0 <xQueueReceive+0x33c>)
    8acc:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    8ace:	6a3b      	ldr	r3, [r7, #32]
    8ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8ad2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    8ad4:	69fb      	ldr	r3, [r7, #28]
    8ad6:	2b00      	cmp	r3, #0
    8ad8:	d100      	bne.n	8adc <xQueueReceive+0x68>
    8ada:	e07d      	b.n	8bd8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    8adc:	68ba      	ldr	r2, [r7, #8]
    8ade:	6a3b      	ldr	r3, [r7, #32]
    8ae0:	0011      	movs	r1, r2
    8ae2:	0018      	movs	r0, r3
    8ae4:	4bb3      	ldr	r3, [pc, #716]	; (8db4 <xQueueReceive+0x340>)
    8ae6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    8ae8:	4bb3      	ldr	r3, [pc, #716]	; (8db8 <xQueueReceive+0x344>)
    8aea:	4798      	blx	r3
    8aec:	0003      	movs	r3, r0
    8aee:	0018      	movs	r0, r3
    8af0:	4bb2      	ldr	r3, [pc, #712]	; (8dbc <xQueueReceive+0x348>)
    8af2:	4798      	blx	r3
    8af4:	0003      	movs	r3, r0
    8af6:	001a      	movs	r2, r3
    8af8:	4bb1      	ldr	r3, [pc, #708]	; (8dc0 <xQueueReceive+0x34c>)
    8afa:	881b      	ldrh	r3, [r3, #0]
    8afc:	4013      	ands	r3, r2
    8afe:	b29b      	uxth	r3, r3
    8b00:	2b00      	cmp	r3, #0
    8b02:	d029      	beq.n	8b58 <xQueueReceive+0xe4>
    8b04:	6a3b      	ldr	r3, [r7, #32]
    8b06:	0018      	movs	r0, r3
    8b08:	4bae      	ldr	r3, [pc, #696]	; (8dc4 <xQueueReceive+0x350>)
    8b0a:	4798      	blx	r3
    8b0c:	0003      	movs	r3, r0
    8b0e:	001a      	movs	r2, r3
    8b10:	4bab      	ldr	r3, [pc, #684]	; (8dc0 <xQueueReceive+0x34c>)
    8b12:	881b      	ldrh	r3, [r3, #0]
    8b14:	4013      	ands	r3, r2
    8b16:	b29b      	uxth	r3, r3
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d01d      	beq.n	8b58 <xQueueReceive+0xe4>
    8b1c:	6a3b      	ldr	r3, [r7, #32]
    8b1e:	0018      	movs	r0, r3
    8b20:	4ba9      	ldr	r3, [pc, #676]	; (8dc8 <xQueueReceive+0x354>)
    8b22:	4798      	blx	r3
    8b24:	0003      	movs	r3, r0
    8b26:	001a      	movs	r2, r3
    8b28:	4ba8      	ldr	r3, [pc, #672]	; (8dcc <xQueueReceive+0x358>)
    8b2a:	5c9b      	ldrb	r3, [r3, r2]
    8b2c:	3328      	adds	r3, #40	; 0x28
    8b2e:	b2db      	uxtb	r3, r3
    8b30:	001d      	movs	r5, r3
    8b32:	6a3b      	ldr	r3, [r7, #32]
    8b34:	0018      	movs	r0, r3
    8b36:	4ba4      	ldr	r3, [pc, #656]	; (8dc8 <xQueueReceive+0x354>)
    8b38:	4798      	blx	r3
    8b3a:	0003      	movs	r3, r0
    8b3c:	001a      	movs	r2, r3
    8b3e:	4ba3      	ldr	r3, [pc, #652]	; (8dcc <xQueueReceive+0x358>)
    8b40:	5c9c      	ldrb	r4, [r3, r2]
    8b42:	6a3b      	ldr	r3, [r7, #32]
    8b44:	0018      	movs	r0, r3
    8b46:	4ba2      	ldr	r3, [pc, #648]	; (8dd0 <xQueueReceive+0x35c>)
    8b48:	4798      	blx	r3
    8b4a:	0003      	movs	r3, r0
    8b4c:	b2db      	uxtb	r3, r3
    8b4e:	001a      	movs	r2, r3
    8b50:	0021      	movs	r1, r4
    8b52:	0028      	movs	r0, r5
    8b54:	4b9f      	ldr	r3, [pc, #636]	; (8dd4 <xQueueReceive+0x360>)
    8b56:	4798      	blx	r3
    8b58:	6a3b      	ldr	r3, [r7, #32]
    8b5a:	0018      	movs	r0, r3
    8b5c:	4b9a      	ldr	r3, [pc, #616]	; (8dc8 <xQueueReceive+0x354>)
    8b5e:	4798      	blx	r3
    8b60:	0003      	movs	r3, r0
    8b62:	001a      	movs	r2, r3
    8b64:	4b99      	ldr	r3, [pc, #612]	; (8dcc <xQueueReceive+0x358>)
    8b66:	5c9c      	ldrb	r4, [r3, r2]
    8b68:	6a3b      	ldr	r3, [r7, #32]
    8b6a:	0018      	movs	r0, r3
    8b6c:	4b98      	ldr	r3, [pc, #608]	; (8dd0 <xQueueReceive+0x35c>)
    8b6e:	4798      	blx	r3
    8b70:	0003      	movs	r3, r0
    8b72:	b2dd      	uxtb	r5, r3
    8b74:	6a3b      	ldr	r3, [r7, #32]
    8b76:	0018      	movs	r0, r3
    8b78:	4b93      	ldr	r3, [pc, #588]	; (8dc8 <xQueueReceive+0x354>)
    8b7a:	4798      	blx	r3
    8b7c:	0003      	movs	r3, r0
    8b7e:	001a      	movs	r2, r3
    8b80:	4b92      	ldr	r3, [pc, #584]	; (8dcc <xQueueReceive+0x358>)
    8b82:	5c9b      	ldrb	r3, [r3, r2]
    8b84:	2b02      	cmp	r3, #2
    8b86:	d108      	bne.n	8b9a <xQueueReceive+0x126>
    8b88:	4b8b      	ldr	r3, [pc, #556]	; (8db8 <xQueueReceive+0x344>)
    8b8a:	4798      	blx	r3
    8b8c:	0003      	movs	r3, r0
    8b8e:	0018      	movs	r0, r3
    8b90:	4b91      	ldr	r3, [pc, #580]	; (8dd8 <xQueueReceive+0x364>)
    8b92:	4798      	blx	r3
    8b94:	0003      	movs	r3, r0
    8b96:	b2db      	uxtb	r3, r3
    8b98:	e004      	b.n	8ba4 <xQueueReceive+0x130>
    8b9a:	6a3b      	ldr	r3, [r7, #32]
    8b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8b9e:	b2db      	uxtb	r3, r3
    8ba0:	3b01      	subs	r3, #1
    8ba2:	b2db      	uxtb	r3, r3
    8ba4:	001a      	movs	r2, r3
    8ba6:	0029      	movs	r1, r5
    8ba8:	0020      	movs	r0, r4
    8baa:	4b8c      	ldr	r3, [pc, #560]	; (8ddc <xQueueReceive+0x368>)
    8bac:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    8bae:	69fb      	ldr	r3, [r7, #28]
    8bb0:	1e5a      	subs	r2, r3, #1
    8bb2:	6a3b      	ldr	r3, [r7, #32]
    8bb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    8bb6:	6a3b      	ldr	r3, [r7, #32]
    8bb8:	691b      	ldr	r3, [r3, #16]
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d008      	beq.n	8bd0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    8bbe:	6a3b      	ldr	r3, [r7, #32]
    8bc0:	3310      	adds	r3, #16
    8bc2:	0018      	movs	r0, r3
    8bc4:	4b86      	ldr	r3, [pc, #536]	; (8de0 <xQueueReceive+0x36c>)
    8bc6:	4798      	blx	r3
    8bc8:	1e03      	subs	r3, r0, #0
    8bca:	d001      	beq.n	8bd0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    8bcc:	4b85      	ldr	r3, [pc, #532]	; (8de4 <xQueueReceive+0x370>)
    8bce:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    8bd0:	4b85      	ldr	r3, [pc, #532]	; (8de8 <xQueueReceive+0x374>)
    8bd2:	4798      	blx	r3
				return pdPASS;
    8bd4:	2301      	movs	r3, #1
    8bd6:	e15f      	b.n	8e98 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    8bd8:	687b      	ldr	r3, [r7, #4]
    8bda:	2b00      	cmp	r3, #0
    8bdc:	d13b      	bne.n	8c56 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    8bde:	4b82      	ldr	r3, [pc, #520]	; (8de8 <xQueueReceive+0x374>)
    8be0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    8be2:	4b75      	ldr	r3, [pc, #468]	; (8db8 <xQueueReceive+0x344>)
    8be4:	4798      	blx	r3
    8be6:	0003      	movs	r3, r0
    8be8:	0018      	movs	r0, r3
    8bea:	4b74      	ldr	r3, [pc, #464]	; (8dbc <xQueueReceive+0x348>)
    8bec:	4798      	blx	r3
    8bee:	0003      	movs	r3, r0
    8bf0:	001a      	movs	r2, r3
    8bf2:	4b73      	ldr	r3, [pc, #460]	; (8dc0 <xQueueReceive+0x34c>)
    8bf4:	881b      	ldrh	r3, [r3, #0]
    8bf6:	4013      	ands	r3, r2
    8bf8:	b29b      	uxth	r3, r3
    8bfa:	2b00      	cmp	r3, #0
    8bfc:	d029      	beq.n	8c52 <xQueueReceive+0x1de>
    8bfe:	6a3b      	ldr	r3, [r7, #32]
    8c00:	0018      	movs	r0, r3
    8c02:	4b70      	ldr	r3, [pc, #448]	; (8dc4 <xQueueReceive+0x350>)
    8c04:	4798      	blx	r3
    8c06:	0003      	movs	r3, r0
    8c08:	001a      	movs	r2, r3
    8c0a:	4b6d      	ldr	r3, [pc, #436]	; (8dc0 <xQueueReceive+0x34c>)
    8c0c:	881b      	ldrh	r3, [r3, #0]
    8c0e:	4013      	ands	r3, r2
    8c10:	b29b      	uxth	r3, r3
    8c12:	2b00      	cmp	r3, #0
    8c14:	d01d      	beq.n	8c52 <xQueueReceive+0x1de>
    8c16:	6a3b      	ldr	r3, [r7, #32]
    8c18:	0018      	movs	r0, r3
    8c1a:	4b6b      	ldr	r3, [pc, #428]	; (8dc8 <xQueueReceive+0x354>)
    8c1c:	4798      	blx	r3
    8c1e:	0003      	movs	r3, r0
    8c20:	001a      	movs	r2, r3
    8c22:	4b6a      	ldr	r3, [pc, #424]	; (8dcc <xQueueReceive+0x358>)
    8c24:	5c9b      	ldrb	r3, [r3, r2]
    8c26:	3350      	adds	r3, #80	; 0x50
    8c28:	b2db      	uxtb	r3, r3
    8c2a:	001d      	movs	r5, r3
    8c2c:	6a3b      	ldr	r3, [r7, #32]
    8c2e:	0018      	movs	r0, r3
    8c30:	4b65      	ldr	r3, [pc, #404]	; (8dc8 <xQueueReceive+0x354>)
    8c32:	4798      	blx	r3
    8c34:	0003      	movs	r3, r0
    8c36:	001a      	movs	r2, r3
    8c38:	4b64      	ldr	r3, [pc, #400]	; (8dcc <xQueueReceive+0x358>)
    8c3a:	5c9c      	ldrb	r4, [r3, r2]
    8c3c:	6a3b      	ldr	r3, [r7, #32]
    8c3e:	0018      	movs	r0, r3
    8c40:	4b63      	ldr	r3, [pc, #396]	; (8dd0 <xQueueReceive+0x35c>)
    8c42:	4798      	blx	r3
    8c44:	0003      	movs	r3, r0
    8c46:	b2db      	uxtb	r3, r3
    8c48:	001a      	movs	r2, r3
    8c4a:	0021      	movs	r1, r4
    8c4c:	0028      	movs	r0, r5
    8c4e:	4b61      	ldr	r3, [pc, #388]	; (8dd4 <xQueueReceive+0x360>)
    8c50:	4798      	blx	r3
					return errQUEUE_EMPTY;
    8c52:	2300      	movs	r3, #0
    8c54:	e120      	b.n	8e98 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
    8c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d106      	bne.n	8c6a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    8c5c:	2314      	movs	r3, #20
    8c5e:	18fb      	adds	r3, r7, r3
    8c60:	0018      	movs	r0, r3
    8c62:	4b62      	ldr	r3, [pc, #392]	; (8dec <xQueueReceive+0x378>)
    8c64:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    8c66:	2301      	movs	r3, #1
    8c68:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    8c6a:	4b5f      	ldr	r3, [pc, #380]	; (8de8 <xQueueReceive+0x374>)
    8c6c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    8c6e:	4b60      	ldr	r3, [pc, #384]	; (8df0 <xQueueReceive+0x37c>)
    8c70:	4798      	blx	r3
		prvLockQueue( pxQueue );
    8c72:	4b4f      	ldr	r3, [pc, #316]	; (8db0 <xQueueReceive+0x33c>)
    8c74:	4798      	blx	r3
    8c76:	6a3b      	ldr	r3, [r7, #32]
    8c78:	2244      	movs	r2, #68	; 0x44
    8c7a:	5c9b      	ldrb	r3, [r3, r2]
    8c7c:	b25b      	sxtb	r3, r3
    8c7e:	3301      	adds	r3, #1
    8c80:	d103      	bne.n	8c8a <xQueueReceive+0x216>
    8c82:	6a3b      	ldr	r3, [r7, #32]
    8c84:	2244      	movs	r2, #68	; 0x44
    8c86:	2100      	movs	r1, #0
    8c88:	5499      	strb	r1, [r3, r2]
    8c8a:	6a3b      	ldr	r3, [r7, #32]
    8c8c:	2245      	movs	r2, #69	; 0x45
    8c8e:	5c9b      	ldrb	r3, [r3, r2]
    8c90:	b25b      	sxtb	r3, r3
    8c92:	3301      	adds	r3, #1
    8c94:	d103      	bne.n	8c9e <xQueueReceive+0x22a>
    8c96:	6a3b      	ldr	r3, [r7, #32]
    8c98:	2245      	movs	r2, #69	; 0x45
    8c9a:	2100      	movs	r1, #0
    8c9c:	5499      	strb	r1, [r3, r2]
    8c9e:	4b52      	ldr	r3, [pc, #328]	; (8de8 <xQueueReceive+0x374>)
    8ca0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    8ca2:	1d3a      	adds	r2, r7, #4
    8ca4:	2314      	movs	r3, #20
    8ca6:	18fb      	adds	r3, r7, r3
    8ca8:	0011      	movs	r1, r2
    8caa:	0018      	movs	r0, r3
    8cac:	4b51      	ldr	r3, [pc, #324]	; (8df4 <xQueueReceive+0x380>)
    8cae:	4798      	blx	r3
    8cb0:	1e03      	subs	r3, r0, #0
    8cb2:	d000      	beq.n	8cb6 <xQueueReceive+0x242>
    8cb4:	e0aa      	b.n	8e0c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    8cb6:	6a3b      	ldr	r3, [r7, #32]
    8cb8:	0018      	movs	r0, r3
    8cba:	4b4f      	ldr	r3, [pc, #316]	; (8df8 <xQueueReceive+0x384>)
    8cbc:	4798      	blx	r3
    8cbe:	1e03      	subs	r3, r0, #0
    8cc0:	d06d      	beq.n	8d9e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    8cc2:	4b3d      	ldr	r3, [pc, #244]	; (8db8 <xQueueReceive+0x344>)
    8cc4:	4798      	blx	r3
    8cc6:	0003      	movs	r3, r0
    8cc8:	0018      	movs	r0, r3
    8cca:	4b3c      	ldr	r3, [pc, #240]	; (8dbc <xQueueReceive+0x348>)
    8ccc:	4798      	blx	r3
    8cce:	0003      	movs	r3, r0
    8cd0:	001a      	movs	r2, r3
    8cd2:	4b3b      	ldr	r3, [pc, #236]	; (8dc0 <xQueueReceive+0x34c>)
    8cd4:	881b      	ldrh	r3, [r3, #0]
    8cd6:	4013      	ands	r3, r2
    8cd8:	b29b      	uxth	r3, r3
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d029      	beq.n	8d32 <xQueueReceive+0x2be>
    8cde:	6a3b      	ldr	r3, [r7, #32]
    8ce0:	0018      	movs	r0, r3
    8ce2:	4b38      	ldr	r3, [pc, #224]	; (8dc4 <xQueueReceive+0x350>)
    8ce4:	4798      	blx	r3
    8ce6:	0003      	movs	r3, r0
    8ce8:	001a      	movs	r2, r3
    8cea:	4b35      	ldr	r3, [pc, #212]	; (8dc0 <xQueueReceive+0x34c>)
    8cec:	881b      	ldrh	r3, [r3, #0]
    8cee:	4013      	ands	r3, r2
    8cf0:	b29b      	uxth	r3, r3
    8cf2:	2b00      	cmp	r3, #0
    8cf4:	d01d      	beq.n	8d32 <xQueueReceive+0x2be>
    8cf6:	6a3b      	ldr	r3, [r7, #32]
    8cf8:	0018      	movs	r0, r3
    8cfa:	4b33      	ldr	r3, [pc, #204]	; (8dc8 <xQueueReceive+0x354>)
    8cfc:	4798      	blx	r3
    8cfe:	0003      	movs	r3, r0
    8d00:	001a      	movs	r2, r3
    8d02:	4b32      	ldr	r3, [pc, #200]	; (8dcc <xQueueReceive+0x358>)
    8d04:	5c9b      	ldrb	r3, [r3, r2]
    8d06:	3368      	adds	r3, #104	; 0x68
    8d08:	b2db      	uxtb	r3, r3
    8d0a:	001d      	movs	r5, r3
    8d0c:	6a3b      	ldr	r3, [r7, #32]
    8d0e:	0018      	movs	r0, r3
    8d10:	4b2d      	ldr	r3, [pc, #180]	; (8dc8 <xQueueReceive+0x354>)
    8d12:	4798      	blx	r3
    8d14:	0003      	movs	r3, r0
    8d16:	001a      	movs	r2, r3
    8d18:	4b2c      	ldr	r3, [pc, #176]	; (8dcc <xQueueReceive+0x358>)
    8d1a:	5c9c      	ldrb	r4, [r3, r2]
    8d1c:	6a3b      	ldr	r3, [r7, #32]
    8d1e:	0018      	movs	r0, r3
    8d20:	4b2b      	ldr	r3, [pc, #172]	; (8dd0 <xQueueReceive+0x35c>)
    8d22:	4798      	blx	r3
    8d24:	0003      	movs	r3, r0
    8d26:	b2db      	uxtb	r3, r3
    8d28:	001a      	movs	r2, r3
    8d2a:	0021      	movs	r1, r4
    8d2c:	0028      	movs	r0, r5
    8d2e:	4b29      	ldr	r3, [pc, #164]	; (8dd4 <xQueueReceive+0x360>)
    8d30:	4798      	blx	r3
    8d32:	6a3b      	ldr	r3, [r7, #32]
    8d34:	0018      	movs	r0, r3
    8d36:	4b24      	ldr	r3, [pc, #144]	; (8dc8 <xQueueReceive+0x354>)
    8d38:	4798      	blx	r3
    8d3a:	0003      	movs	r3, r0
    8d3c:	001a      	movs	r2, r3
    8d3e:	4b23      	ldr	r3, [pc, #140]	; (8dcc <xQueueReceive+0x358>)
    8d40:	5c9b      	ldrb	r3, [r3, r2]
    8d42:	2b02      	cmp	r3, #2
    8d44:	d018      	beq.n	8d78 <xQueueReceive+0x304>
    8d46:	4b1c      	ldr	r3, [pc, #112]	; (8db8 <xQueueReceive+0x344>)
    8d48:	4798      	blx	r3
    8d4a:	0003      	movs	r3, r0
    8d4c:	0018      	movs	r0, r3
    8d4e:	4b1b      	ldr	r3, [pc, #108]	; (8dbc <xQueueReceive+0x348>)
    8d50:	4798      	blx	r3
    8d52:	0003      	movs	r3, r0
    8d54:	001a      	movs	r2, r3
    8d56:	4b1a      	ldr	r3, [pc, #104]	; (8dc0 <xQueueReceive+0x34c>)
    8d58:	881b      	ldrh	r3, [r3, #0]
    8d5a:	4013      	ands	r3, r2
    8d5c:	b29b      	uxth	r3, r3
    8d5e:	2b00      	cmp	r3, #0
    8d60:	d00a      	beq.n	8d78 <xQueueReceive+0x304>
    8d62:	4b15      	ldr	r3, [pc, #84]	; (8db8 <xQueueReceive+0x344>)
    8d64:	4798      	blx	r3
    8d66:	0003      	movs	r3, r0
    8d68:	0018      	movs	r0, r3
    8d6a:	4b1b      	ldr	r3, [pc, #108]	; (8dd8 <xQueueReceive+0x364>)
    8d6c:	4798      	blx	r3
    8d6e:	0003      	movs	r3, r0
    8d70:	b2db      	uxtb	r3, r3
    8d72:	0018      	movs	r0, r3
    8d74:	4b21      	ldr	r3, [pc, #132]	; (8dfc <xQueueReceive+0x388>)
    8d76:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    8d78:	6a3b      	ldr	r3, [r7, #32]
    8d7a:	3324      	adds	r3, #36	; 0x24
    8d7c:	687a      	ldr	r2, [r7, #4]
    8d7e:	0011      	movs	r1, r2
    8d80:	0018      	movs	r0, r3
    8d82:	4b1f      	ldr	r3, [pc, #124]	; (8e00 <xQueueReceive+0x38c>)
    8d84:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    8d86:	6a3b      	ldr	r3, [r7, #32]
    8d88:	0018      	movs	r0, r3
    8d8a:	4b1e      	ldr	r3, [pc, #120]	; (8e04 <xQueueReceive+0x390>)
    8d8c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    8d8e:	4b1e      	ldr	r3, [pc, #120]	; (8e08 <xQueueReceive+0x394>)
    8d90:	4798      	blx	r3
    8d92:	1e03      	subs	r3, r0, #0
    8d94:	d000      	beq.n	8d98 <xQueueReceive+0x324>
    8d96:	e698      	b.n	8aca <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    8d98:	4b12      	ldr	r3, [pc, #72]	; (8de4 <xQueueReceive+0x370>)
    8d9a:	4798      	blx	r3
    8d9c:	e695      	b.n	8aca <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    8d9e:	6a3b      	ldr	r3, [r7, #32]
    8da0:	0018      	movs	r0, r3
    8da2:	4b18      	ldr	r3, [pc, #96]	; (8e04 <xQueueReceive+0x390>)
    8da4:	4798      	blx	r3
				( void ) xTaskResumeAll();
    8da6:	4b18      	ldr	r3, [pc, #96]	; (8e08 <xQueueReceive+0x394>)
    8da8:	4798      	blx	r3
    8daa:	e68e      	b.n	8aca <xQueueReceive+0x56>
    8dac:	0000a949 	.word	0x0000a949
    8db0:	00007c29 	.word	0x00007c29
    8db4:	000094d5 	.word	0x000094d5
    8db8:	00005eb9 	.word	0x00005eb9
    8dbc:	00005c1d 	.word	0x00005c1d
    8dc0:	20000110 	.word	0x20000110
    8dc4:	00005cdd 	.word	0x00005cdd
    8dc8:	00005bdd 	.word	0x00005bdd
    8dcc:	20000104 	.word	0x20000104
    8dd0:	00005cbd 	.word	0x00005cbd
    8dd4:	00006615 	.word	0x00006615
    8dd8:	00005bfd 	.word	0x00005bfd
    8ddc:	00006c71 	.word	0x00006c71
    8de0:	0000a4b9 	.word	0x0000a4b9
    8de4:	00007c11 	.word	0x00007c11
    8de8:	00007c4d 	.word	0x00007c4d
    8dec:	0000a5f9 	.word	0x0000a5f9
    8df0:	00009ee1 	.word	0x00009ee1
    8df4:	0000a621 	.word	0x0000a621
    8df8:	00009615 	.word	0x00009615
    8dfc:	00006dad 	.word	0x00006dad
    8e00:	0000a395 	.word	0x0000a395
    8e04:	00009525 	.word	0x00009525
    8e08:	00009ef9 	.word	0x00009ef9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    8e0c:	6a3b      	ldr	r3, [r7, #32]
    8e0e:	0018      	movs	r0, r3
    8e10:	4b23      	ldr	r3, [pc, #140]	; (8ea0 <xQueueReceive+0x42c>)
    8e12:	4798      	blx	r3
			( void ) xTaskResumeAll();
    8e14:	4b23      	ldr	r3, [pc, #140]	; (8ea4 <xQueueReceive+0x430>)
    8e16:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    8e18:	6a3b      	ldr	r3, [r7, #32]
    8e1a:	0018      	movs	r0, r3
    8e1c:	4b22      	ldr	r3, [pc, #136]	; (8ea8 <xQueueReceive+0x434>)
    8e1e:	4798      	blx	r3
    8e20:	1e03      	subs	r3, r0, #0
    8e22:	d100      	bne.n	8e26 <xQueueReceive+0x3b2>
    8e24:	e651      	b.n	8aca <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    8e26:	4b21      	ldr	r3, [pc, #132]	; (8eac <xQueueReceive+0x438>)
    8e28:	4798      	blx	r3
    8e2a:	0003      	movs	r3, r0
    8e2c:	0018      	movs	r0, r3
    8e2e:	4b20      	ldr	r3, [pc, #128]	; (8eb0 <xQueueReceive+0x43c>)
    8e30:	4798      	blx	r3
    8e32:	0003      	movs	r3, r0
    8e34:	001a      	movs	r2, r3
    8e36:	4b1f      	ldr	r3, [pc, #124]	; (8eb4 <xQueueReceive+0x440>)
    8e38:	881b      	ldrh	r3, [r3, #0]
    8e3a:	4013      	ands	r3, r2
    8e3c:	b29b      	uxth	r3, r3
    8e3e:	2b00      	cmp	r3, #0
    8e40:	d029      	beq.n	8e96 <xQueueReceive+0x422>
    8e42:	6a3b      	ldr	r3, [r7, #32]
    8e44:	0018      	movs	r0, r3
    8e46:	4b1c      	ldr	r3, [pc, #112]	; (8eb8 <xQueueReceive+0x444>)
    8e48:	4798      	blx	r3
    8e4a:	0003      	movs	r3, r0
    8e4c:	001a      	movs	r2, r3
    8e4e:	4b19      	ldr	r3, [pc, #100]	; (8eb4 <xQueueReceive+0x440>)
    8e50:	881b      	ldrh	r3, [r3, #0]
    8e52:	4013      	ands	r3, r2
    8e54:	b29b      	uxth	r3, r3
    8e56:	2b00      	cmp	r3, #0
    8e58:	d01d      	beq.n	8e96 <xQueueReceive+0x422>
    8e5a:	6a3b      	ldr	r3, [r7, #32]
    8e5c:	0018      	movs	r0, r3
    8e5e:	4b17      	ldr	r3, [pc, #92]	; (8ebc <xQueueReceive+0x448>)
    8e60:	4798      	blx	r3
    8e62:	0003      	movs	r3, r0
    8e64:	001a      	movs	r2, r3
    8e66:	4b16      	ldr	r3, [pc, #88]	; (8ec0 <xQueueReceive+0x44c>)
    8e68:	5c9b      	ldrb	r3, [r3, r2]
    8e6a:	3350      	adds	r3, #80	; 0x50
    8e6c:	b2db      	uxtb	r3, r3
    8e6e:	001d      	movs	r5, r3
    8e70:	6a3b      	ldr	r3, [r7, #32]
    8e72:	0018      	movs	r0, r3
    8e74:	4b11      	ldr	r3, [pc, #68]	; (8ebc <xQueueReceive+0x448>)
    8e76:	4798      	blx	r3
    8e78:	0003      	movs	r3, r0
    8e7a:	001a      	movs	r2, r3
    8e7c:	4b10      	ldr	r3, [pc, #64]	; (8ec0 <xQueueReceive+0x44c>)
    8e7e:	5c9c      	ldrb	r4, [r3, r2]
    8e80:	6a3b      	ldr	r3, [r7, #32]
    8e82:	0018      	movs	r0, r3
    8e84:	4b0f      	ldr	r3, [pc, #60]	; (8ec4 <xQueueReceive+0x450>)
    8e86:	4798      	blx	r3
    8e88:	0003      	movs	r3, r0
    8e8a:	b2db      	uxtb	r3, r3
    8e8c:	001a      	movs	r2, r3
    8e8e:	0021      	movs	r1, r4
    8e90:	0028      	movs	r0, r5
    8e92:	4b0d      	ldr	r3, [pc, #52]	; (8ec8 <xQueueReceive+0x454>)
    8e94:	4798      	blx	r3
				return errQUEUE_EMPTY;
    8e96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    8e98:	0018      	movs	r0, r3
    8e9a:	46bd      	mov	sp, r7
    8e9c:	b00a      	add	sp, #40	; 0x28
    8e9e:	bdb0      	pop	{r4, r5, r7, pc}
    8ea0:	00009525 	.word	0x00009525
    8ea4:	00009ef9 	.word	0x00009ef9
    8ea8:	00009615 	.word	0x00009615
    8eac:	00005eb9 	.word	0x00005eb9
    8eb0:	00005c1d 	.word	0x00005c1d
    8eb4:	20000110 	.word	0x20000110
    8eb8:	00005cdd 	.word	0x00005cdd
    8ebc:	00005bdd 	.word	0x00005bdd
    8ec0:	20000104 	.word	0x20000104
    8ec4:	00005cbd 	.word	0x00005cbd
    8ec8:	00006615 	.word	0x00006615

00008ecc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    8ecc:	b5b0      	push	{r4, r5, r7, lr}
    8ece:	b08a      	sub	sp, #40	; 0x28
    8ed0:	af00      	add	r7, sp, #0
    8ed2:	6078      	str	r0, [r7, #4]
    8ed4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    8ed6:	2300      	movs	r3, #0
    8ed8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    8eda:	687b      	ldr	r3, [r7, #4]
    8edc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    8ede:	2300      	movs	r3, #0
    8ee0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    8ee2:	69fb      	ldr	r3, [r7, #28]
    8ee4:	2b00      	cmp	r3, #0
    8ee6:	d101      	bne.n	8eec <xQueueSemaphoreTake+0x20>
    8ee8:	b672      	cpsid	i
    8eea:	e7fe      	b.n	8eea <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    8eec:	69fb      	ldr	r3, [r7, #28]
    8eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8ef0:	2b00      	cmp	r3, #0
    8ef2:	d001      	beq.n	8ef8 <xQueueSemaphoreTake+0x2c>
    8ef4:	b672      	cpsid	i
    8ef6:	e7fe      	b.n	8ef6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    8ef8:	4bcb      	ldr	r3, [pc, #812]	; (9228 <xQueueSemaphoreTake+0x35c>)
    8efa:	4798      	blx	r3
    8efc:	1e03      	subs	r3, r0, #0
    8efe:	d102      	bne.n	8f06 <xQueueSemaphoreTake+0x3a>
    8f00:	683b      	ldr	r3, [r7, #0]
    8f02:	2b00      	cmp	r3, #0
    8f04:	d101      	bne.n	8f0a <xQueueSemaphoreTake+0x3e>
    8f06:	2301      	movs	r3, #1
    8f08:	e000      	b.n	8f0c <xQueueSemaphoreTake+0x40>
    8f0a:	2300      	movs	r3, #0
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	d101      	bne.n	8f14 <xQueueSemaphoreTake+0x48>
    8f10:	b672      	cpsid	i
    8f12:	e7fe      	b.n	8f12 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    8f14:	4bc5      	ldr	r3, [pc, #788]	; (922c <xQueueSemaphoreTake+0x360>)
    8f16:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    8f18:	69fb      	ldr	r3, [r7, #28]
    8f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8f1c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    8f1e:	69bb      	ldr	r3, [r7, #24]
    8f20:	2b00      	cmp	r3, #0
    8f22:	d100      	bne.n	8f26 <xQueueSemaphoreTake+0x5a>
    8f24:	e080      	b.n	9028 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
    8f26:	4bc2      	ldr	r3, [pc, #776]	; (9230 <xQueueSemaphoreTake+0x364>)
    8f28:	4798      	blx	r3
    8f2a:	0003      	movs	r3, r0
    8f2c:	0018      	movs	r0, r3
    8f2e:	4bc1      	ldr	r3, [pc, #772]	; (9234 <xQueueSemaphoreTake+0x368>)
    8f30:	4798      	blx	r3
    8f32:	0003      	movs	r3, r0
    8f34:	001a      	movs	r2, r3
    8f36:	4bc0      	ldr	r3, [pc, #768]	; (9238 <xQueueSemaphoreTake+0x36c>)
    8f38:	881b      	ldrh	r3, [r3, #0]
    8f3a:	4013      	ands	r3, r2
    8f3c:	b29b      	uxth	r3, r3
    8f3e:	2b00      	cmp	r3, #0
    8f40:	d029      	beq.n	8f96 <xQueueSemaphoreTake+0xca>
    8f42:	69fb      	ldr	r3, [r7, #28]
    8f44:	0018      	movs	r0, r3
    8f46:	4bbd      	ldr	r3, [pc, #756]	; (923c <xQueueSemaphoreTake+0x370>)
    8f48:	4798      	blx	r3
    8f4a:	0003      	movs	r3, r0
    8f4c:	001a      	movs	r2, r3
    8f4e:	4bba      	ldr	r3, [pc, #744]	; (9238 <xQueueSemaphoreTake+0x36c>)
    8f50:	881b      	ldrh	r3, [r3, #0]
    8f52:	4013      	ands	r3, r2
    8f54:	b29b      	uxth	r3, r3
    8f56:	2b00      	cmp	r3, #0
    8f58:	d01d      	beq.n	8f96 <xQueueSemaphoreTake+0xca>
    8f5a:	69fb      	ldr	r3, [r7, #28]
    8f5c:	0018      	movs	r0, r3
    8f5e:	4bb8      	ldr	r3, [pc, #736]	; (9240 <xQueueSemaphoreTake+0x374>)
    8f60:	4798      	blx	r3
    8f62:	0003      	movs	r3, r0
    8f64:	001a      	movs	r2, r3
    8f66:	4bb7      	ldr	r3, [pc, #732]	; (9244 <xQueueSemaphoreTake+0x378>)
    8f68:	5c9b      	ldrb	r3, [r3, r2]
    8f6a:	3328      	adds	r3, #40	; 0x28
    8f6c:	b2db      	uxtb	r3, r3
    8f6e:	001d      	movs	r5, r3
    8f70:	69fb      	ldr	r3, [r7, #28]
    8f72:	0018      	movs	r0, r3
    8f74:	4bb2      	ldr	r3, [pc, #712]	; (9240 <xQueueSemaphoreTake+0x374>)
    8f76:	4798      	blx	r3
    8f78:	0003      	movs	r3, r0
    8f7a:	001a      	movs	r2, r3
    8f7c:	4bb1      	ldr	r3, [pc, #708]	; (9244 <xQueueSemaphoreTake+0x378>)
    8f7e:	5c9c      	ldrb	r4, [r3, r2]
    8f80:	69fb      	ldr	r3, [r7, #28]
    8f82:	0018      	movs	r0, r3
    8f84:	4bb0      	ldr	r3, [pc, #704]	; (9248 <xQueueSemaphoreTake+0x37c>)
    8f86:	4798      	blx	r3
    8f88:	0003      	movs	r3, r0
    8f8a:	b2db      	uxtb	r3, r3
    8f8c:	001a      	movs	r2, r3
    8f8e:	0021      	movs	r1, r4
    8f90:	0028      	movs	r0, r5
    8f92:	4bae      	ldr	r3, [pc, #696]	; (924c <xQueueSemaphoreTake+0x380>)
    8f94:	4798      	blx	r3
    8f96:	69fb      	ldr	r3, [r7, #28]
    8f98:	0018      	movs	r0, r3
    8f9a:	4ba9      	ldr	r3, [pc, #676]	; (9240 <xQueueSemaphoreTake+0x374>)
    8f9c:	4798      	blx	r3
    8f9e:	0003      	movs	r3, r0
    8fa0:	001a      	movs	r2, r3
    8fa2:	4ba8      	ldr	r3, [pc, #672]	; (9244 <xQueueSemaphoreTake+0x378>)
    8fa4:	5c9c      	ldrb	r4, [r3, r2]
    8fa6:	69fb      	ldr	r3, [r7, #28]
    8fa8:	0018      	movs	r0, r3
    8faa:	4ba7      	ldr	r3, [pc, #668]	; (9248 <xQueueSemaphoreTake+0x37c>)
    8fac:	4798      	blx	r3
    8fae:	0003      	movs	r3, r0
    8fb0:	b2dd      	uxtb	r5, r3
    8fb2:	69fb      	ldr	r3, [r7, #28]
    8fb4:	0018      	movs	r0, r3
    8fb6:	4ba2      	ldr	r3, [pc, #648]	; (9240 <xQueueSemaphoreTake+0x374>)
    8fb8:	4798      	blx	r3
    8fba:	0003      	movs	r3, r0
    8fbc:	001a      	movs	r2, r3
    8fbe:	4ba1      	ldr	r3, [pc, #644]	; (9244 <xQueueSemaphoreTake+0x378>)
    8fc0:	5c9b      	ldrb	r3, [r3, r2]
    8fc2:	2b02      	cmp	r3, #2
    8fc4:	d108      	bne.n	8fd8 <xQueueSemaphoreTake+0x10c>
    8fc6:	4b9a      	ldr	r3, [pc, #616]	; (9230 <xQueueSemaphoreTake+0x364>)
    8fc8:	4798      	blx	r3
    8fca:	0003      	movs	r3, r0
    8fcc:	0018      	movs	r0, r3
    8fce:	4ba0      	ldr	r3, [pc, #640]	; (9250 <xQueueSemaphoreTake+0x384>)
    8fd0:	4798      	blx	r3
    8fd2:	0003      	movs	r3, r0
    8fd4:	b2db      	uxtb	r3, r3
    8fd6:	e004      	b.n	8fe2 <xQueueSemaphoreTake+0x116>
    8fd8:	69fb      	ldr	r3, [r7, #28]
    8fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8fdc:	b2db      	uxtb	r3, r3
    8fde:	3b01      	subs	r3, #1
    8fe0:	b2db      	uxtb	r3, r3
    8fe2:	001a      	movs	r2, r3
    8fe4:	0029      	movs	r1, r5
    8fe6:	0020      	movs	r0, r4
    8fe8:	4b9a      	ldr	r3, [pc, #616]	; (9254 <xQueueSemaphoreTake+0x388>)
    8fea:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    8fec:	69bb      	ldr	r3, [r7, #24]
    8fee:	1e5a      	subs	r2, r3, #1
    8ff0:	69fb      	ldr	r3, [r7, #28]
    8ff2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    8ff4:	69fb      	ldr	r3, [r7, #28]
    8ff6:	681b      	ldr	r3, [r3, #0]
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d104      	bne.n	9006 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    8ffc:	4b96      	ldr	r3, [pc, #600]	; (9258 <xQueueSemaphoreTake+0x38c>)
    8ffe:	4798      	blx	r3
    9000:	0002      	movs	r2, r0
    9002:	69fb      	ldr	r3, [r7, #28]
    9004:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9006:	69fb      	ldr	r3, [r7, #28]
    9008:	691b      	ldr	r3, [r3, #16]
    900a:	2b00      	cmp	r3, #0
    900c:	d008      	beq.n	9020 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    900e:	69fb      	ldr	r3, [r7, #28]
    9010:	3310      	adds	r3, #16
    9012:	0018      	movs	r0, r3
    9014:	4b91      	ldr	r3, [pc, #580]	; (925c <xQueueSemaphoreTake+0x390>)
    9016:	4798      	blx	r3
    9018:	1e03      	subs	r3, r0, #0
    901a:	d001      	beq.n	9020 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
    901c:	4b90      	ldr	r3, [pc, #576]	; (9260 <xQueueSemaphoreTake+0x394>)
    901e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    9020:	4b90      	ldr	r3, [pc, #576]	; (9264 <xQueueSemaphoreTake+0x398>)
    9022:	4798      	blx	r3
				return pdPASS;
    9024:	2301      	movs	r3, #1
    9026:	e18b      	b.n	9340 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    9028:	683b      	ldr	r3, [r7, #0]
    902a:	2b00      	cmp	r3, #0
    902c:	d140      	bne.n	90b0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    902e:	6a3b      	ldr	r3, [r7, #32]
    9030:	2b00      	cmp	r3, #0
    9032:	d001      	beq.n	9038 <xQueueSemaphoreTake+0x16c>
    9034:	b672      	cpsid	i
    9036:	e7fe      	b.n	9036 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    9038:	4b8a      	ldr	r3, [pc, #552]	; (9264 <xQueueSemaphoreTake+0x398>)
    903a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    903c:	4b7c      	ldr	r3, [pc, #496]	; (9230 <xQueueSemaphoreTake+0x364>)
    903e:	4798      	blx	r3
    9040:	0003      	movs	r3, r0
    9042:	0018      	movs	r0, r3
    9044:	4b7b      	ldr	r3, [pc, #492]	; (9234 <xQueueSemaphoreTake+0x368>)
    9046:	4798      	blx	r3
    9048:	0003      	movs	r3, r0
    904a:	001a      	movs	r2, r3
    904c:	4b7a      	ldr	r3, [pc, #488]	; (9238 <xQueueSemaphoreTake+0x36c>)
    904e:	881b      	ldrh	r3, [r3, #0]
    9050:	4013      	ands	r3, r2
    9052:	b29b      	uxth	r3, r3
    9054:	2b00      	cmp	r3, #0
    9056:	d029      	beq.n	90ac <xQueueSemaphoreTake+0x1e0>
    9058:	69fb      	ldr	r3, [r7, #28]
    905a:	0018      	movs	r0, r3
    905c:	4b77      	ldr	r3, [pc, #476]	; (923c <xQueueSemaphoreTake+0x370>)
    905e:	4798      	blx	r3
    9060:	0003      	movs	r3, r0
    9062:	001a      	movs	r2, r3
    9064:	4b74      	ldr	r3, [pc, #464]	; (9238 <xQueueSemaphoreTake+0x36c>)
    9066:	881b      	ldrh	r3, [r3, #0]
    9068:	4013      	ands	r3, r2
    906a:	b29b      	uxth	r3, r3
    906c:	2b00      	cmp	r3, #0
    906e:	d01d      	beq.n	90ac <xQueueSemaphoreTake+0x1e0>
    9070:	69fb      	ldr	r3, [r7, #28]
    9072:	0018      	movs	r0, r3
    9074:	4b72      	ldr	r3, [pc, #456]	; (9240 <xQueueSemaphoreTake+0x374>)
    9076:	4798      	blx	r3
    9078:	0003      	movs	r3, r0
    907a:	001a      	movs	r2, r3
    907c:	4b71      	ldr	r3, [pc, #452]	; (9244 <xQueueSemaphoreTake+0x378>)
    907e:	5c9b      	ldrb	r3, [r3, r2]
    9080:	3350      	adds	r3, #80	; 0x50
    9082:	b2db      	uxtb	r3, r3
    9084:	001d      	movs	r5, r3
    9086:	69fb      	ldr	r3, [r7, #28]
    9088:	0018      	movs	r0, r3
    908a:	4b6d      	ldr	r3, [pc, #436]	; (9240 <xQueueSemaphoreTake+0x374>)
    908c:	4798      	blx	r3
    908e:	0003      	movs	r3, r0
    9090:	001a      	movs	r2, r3
    9092:	4b6c      	ldr	r3, [pc, #432]	; (9244 <xQueueSemaphoreTake+0x378>)
    9094:	5c9c      	ldrb	r4, [r3, r2]
    9096:	69fb      	ldr	r3, [r7, #28]
    9098:	0018      	movs	r0, r3
    909a:	4b6b      	ldr	r3, [pc, #428]	; (9248 <xQueueSemaphoreTake+0x37c>)
    909c:	4798      	blx	r3
    909e:	0003      	movs	r3, r0
    90a0:	b2db      	uxtb	r3, r3
    90a2:	001a      	movs	r2, r3
    90a4:	0021      	movs	r1, r4
    90a6:	0028      	movs	r0, r5
    90a8:	4b68      	ldr	r3, [pc, #416]	; (924c <xQueueSemaphoreTake+0x380>)
    90aa:	4798      	blx	r3
					return errQUEUE_EMPTY;
    90ac:	2300      	movs	r3, #0
    90ae:	e147      	b.n	9340 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
    90b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90b2:	2b00      	cmp	r3, #0
    90b4:	d106      	bne.n	90c4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    90b6:	230c      	movs	r3, #12
    90b8:	18fb      	adds	r3, r7, r3
    90ba:	0018      	movs	r0, r3
    90bc:	4b6a      	ldr	r3, [pc, #424]	; (9268 <xQueueSemaphoreTake+0x39c>)
    90be:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    90c0:	2301      	movs	r3, #1
    90c2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    90c4:	4b67      	ldr	r3, [pc, #412]	; (9264 <xQueueSemaphoreTake+0x398>)
    90c6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    90c8:	4b68      	ldr	r3, [pc, #416]	; (926c <xQueueSemaphoreTake+0x3a0>)
    90ca:	4798      	blx	r3
		prvLockQueue( pxQueue );
    90cc:	4b57      	ldr	r3, [pc, #348]	; (922c <xQueueSemaphoreTake+0x360>)
    90ce:	4798      	blx	r3
    90d0:	69fb      	ldr	r3, [r7, #28]
    90d2:	2244      	movs	r2, #68	; 0x44
    90d4:	5c9b      	ldrb	r3, [r3, r2]
    90d6:	b25b      	sxtb	r3, r3
    90d8:	3301      	adds	r3, #1
    90da:	d103      	bne.n	90e4 <xQueueSemaphoreTake+0x218>
    90dc:	69fb      	ldr	r3, [r7, #28]
    90de:	2244      	movs	r2, #68	; 0x44
    90e0:	2100      	movs	r1, #0
    90e2:	5499      	strb	r1, [r3, r2]
    90e4:	69fb      	ldr	r3, [r7, #28]
    90e6:	2245      	movs	r2, #69	; 0x45
    90e8:	5c9b      	ldrb	r3, [r3, r2]
    90ea:	b25b      	sxtb	r3, r3
    90ec:	3301      	adds	r3, #1
    90ee:	d103      	bne.n	90f8 <xQueueSemaphoreTake+0x22c>
    90f0:	69fb      	ldr	r3, [r7, #28]
    90f2:	2245      	movs	r2, #69	; 0x45
    90f4:	2100      	movs	r1, #0
    90f6:	5499      	strb	r1, [r3, r2]
    90f8:	4b5a      	ldr	r3, [pc, #360]	; (9264 <xQueueSemaphoreTake+0x398>)
    90fa:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    90fc:	003a      	movs	r2, r7
    90fe:	230c      	movs	r3, #12
    9100:	18fb      	adds	r3, r7, r3
    9102:	0011      	movs	r1, r2
    9104:	0018      	movs	r0, r3
    9106:	4b5a      	ldr	r3, [pc, #360]	; (9270 <xQueueSemaphoreTake+0x3a4>)
    9108:	4798      	blx	r3
    910a:	1e03      	subs	r3, r0, #0
    910c:	d000      	beq.n	9110 <xQueueSemaphoreTake+0x244>
    910e:	e0bd      	b.n	928c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    9110:	69fb      	ldr	r3, [r7, #28]
    9112:	0018      	movs	r0, r3
    9114:	4b57      	ldr	r3, [pc, #348]	; (9274 <xQueueSemaphoreTake+0x3a8>)
    9116:	4798      	blx	r3
    9118:	1e03      	subs	r3, r0, #0
    911a:	d100      	bne.n	911e <xQueueSemaphoreTake+0x252>
    911c:	e07c      	b.n	9218 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    911e:	4b44      	ldr	r3, [pc, #272]	; (9230 <xQueueSemaphoreTake+0x364>)
    9120:	4798      	blx	r3
    9122:	0003      	movs	r3, r0
    9124:	0018      	movs	r0, r3
    9126:	4b43      	ldr	r3, [pc, #268]	; (9234 <xQueueSemaphoreTake+0x368>)
    9128:	4798      	blx	r3
    912a:	0003      	movs	r3, r0
    912c:	001a      	movs	r2, r3
    912e:	4b42      	ldr	r3, [pc, #264]	; (9238 <xQueueSemaphoreTake+0x36c>)
    9130:	881b      	ldrh	r3, [r3, #0]
    9132:	4013      	ands	r3, r2
    9134:	b29b      	uxth	r3, r3
    9136:	2b00      	cmp	r3, #0
    9138:	d029      	beq.n	918e <xQueueSemaphoreTake+0x2c2>
    913a:	69fb      	ldr	r3, [r7, #28]
    913c:	0018      	movs	r0, r3
    913e:	4b3f      	ldr	r3, [pc, #252]	; (923c <xQueueSemaphoreTake+0x370>)
    9140:	4798      	blx	r3
    9142:	0003      	movs	r3, r0
    9144:	001a      	movs	r2, r3
    9146:	4b3c      	ldr	r3, [pc, #240]	; (9238 <xQueueSemaphoreTake+0x36c>)
    9148:	881b      	ldrh	r3, [r3, #0]
    914a:	4013      	ands	r3, r2
    914c:	b29b      	uxth	r3, r3
    914e:	2b00      	cmp	r3, #0
    9150:	d01d      	beq.n	918e <xQueueSemaphoreTake+0x2c2>
    9152:	69fb      	ldr	r3, [r7, #28]
    9154:	0018      	movs	r0, r3
    9156:	4b3a      	ldr	r3, [pc, #232]	; (9240 <xQueueSemaphoreTake+0x374>)
    9158:	4798      	blx	r3
    915a:	0003      	movs	r3, r0
    915c:	001a      	movs	r2, r3
    915e:	4b39      	ldr	r3, [pc, #228]	; (9244 <xQueueSemaphoreTake+0x378>)
    9160:	5c9b      	ldrb	r3, [r3, r2]
    9162:	3368      	adds	r3, #104	; 0x68
    9164:	b2db      	uxtb	r3, r3
    9166:	001d      	movs	r5, r3
    9168:	69fb      	ldr	r3, [r7, #28]
    916a:	0018      	movs	r0, r3
    916c:	4b34      	ldr	r3, [pc, #208]	; (9240 <xQueueSemaphoreTake+0x374>)
    916e:	4798      	blx	r3
    9170:	0003      	movs	r3, r0
    9172:	001a      	movs	r2, r3
    9174:	4b33      	ldr	r3, [pc, #204]	; (9244 <xQueueSemaphoreTake+0x378>)
    9176:	5c9c      	ldrb	r4, [r3, r2]
    9178:	69fb      	ldr	r3, [r7, #28]
    917a:	0018      	movs	r0, r3
    917c:	4b32      	ldr	r3, [pc, #200]	; (9248 <xQueueSemaphoreTake+0x37c>)
    917e:	4798      	blx	r3
    9180:	0003      	movs	r3, r0
    9182:	b2db      	uxtb	r3, r3
    9184:	001a      	movs	r2, r3
    9186:	0021      	movs	r1, r4
    9188:	0028      	movs	r0, r5
    918a:	4b30      	ldr	r3, [pc, #192]	; (924c <xQueueSemaphoreTake+0x380>)
    918c:	4798      	blx	r3
    918e:	69fb      	ldr	r3, [r7, #28]
    9190:	0018      	movs	r0, r3
    9192:	4b2b      	ldr	r3, [pc, #172]	; (9240 <xQueueSemaphoreTake+0x374>)
    9194:	4798      	blx	r3
    9196:	0003      	movs	r3, r0
    9198:	001a      	movs	r2, r3
    919a:	4b2a      	ldr	r3, [pc, #168]	; (9244 <xQueueSemaphoreTake+0x378>)
    919c:	5c9b      	ldrb	r3, [r3, r2]
    919e:	2b02      	cmp	r3, #2
    91a0:	d018      	beq.n	91d4 <xQueueSemaphoreTake+0x308>
    91a2:	4b23      	ldr	r3, [pc, #140]	; (9230 <xQueueSemaphoreTake+0x364>)
    91a4:	4798      	blx	r3
    91a6:	0003      	movs	r3, r0
    91a8:	0018      	movs	r0, r3
    91aa:	4b22      	ldr	r3, [pc, #136]	; (9234 <xQueueSemaphoreTake+0x368>)
    91ac:	4798      	blx	r3
    91ae:	0003      	movs	r3, r0
    91b0:	001a      	movs	r2, r3
    91b2:	4b21      	ldr	r3, [pc, #132]	; (9238 <xQueueSemaphoreTake+0x36c>)
    91b4:	881b      	ldrh	r3, [r3, #0]
    91b6:	4013      	ands	r3, r2
    91b8:	b29b      	uxth	r3, r3
    91ba:	2b00      	cmp	r3, #0
    91bc:	d00a      	beq.n	91d4 <xQueueSemaphoreTake+0x308>
    91be:	4b1c      	ldr	r3, [pc, #112]	; (9230 <xQueueSemaphoreTake+0x364>)
    91c0:	4798      	blx	r3
    91c2:	0003      	movs	r3, r0
    91c4:	0018      	movs	r0, r3
    91c6:	4b22      	ldr	r3, [pc, #136]	; (9250 <xQueueSemaphoreTake+0x384>)
    91c8:	4798      	blx	r3
    91ca:	0003      	movs	r3, r0
    91cc:	b2db      	uxtb	r3, r3
    91ce:	0018      	movs	r0, r3
    91d0:	4b29      	ldr	r3, [pc, #164]	; (9278 <xQueueSemaphoreTake+0x3ac>)
    91d2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    91d4:	69fb      	ldr	r3, [r7, #28]
    91d6:	681b      	ldr	r3, [r3, #0]
    91d8:	2b00      	cmp	r3, #0
    91da:	d10a      	bne.n	91f2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
    91dc:	4b13      	ldr	r3, [pc, #76]	; (922c <xQueueSemaphoreTake+0x360>)
    91de:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    91e0:	69fb      	ldr	r3, [r7, #28]
    91e2:	685b      	ldr	r3, [r3, #4]
    91e4:	0018      	movs	r0, r3
    91e6:	4b25      	ldr	r3, [pc, #148]	; (927c <xQueueSemaphoreTake+0x3b0>)
    91e8:	4798      	blx	r3
    91ea:	0003      	movs	r3, r0
    91ec:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    91ee:	4b1d      	ldr	r3, [pc, #116]	; (9264 <xQueueSemaphoreTake+0x398>)
    91f0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    91f2:	69fb      	ldr	r3, [r7, #28]
    91f4:	3324      	adds	r3, #36	; 0x24
    91f6:	683a      	ldr	r2, [r7, #0]
    91f8:	0011      	movs	r1, r2
    91fa:	0018      	movs	r0, r3
    91fc:	4b20      	ldr	r3, [pc, #128]	; (9280 <xQueueSemaphoreTake+0x3b4>)
    91fe:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    9200:	69fb      	ldr	r3, [r7, #28]
    9202:	0018      	movs	r0, r3
    9204:	4b1f      	ldr	r3, [pc, #124]	; (9284 <xQueueSemaphoreTake+0x3b8>)
    9206:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    9208:	4b1f      	ldr	r3, [pc, #124]	; (9288 <xQueueSemaphoreTake+0x3bc>)
    920a:	4798      	blx	r3
    920c:	1e03      	subs	r3, r0, #0
    920e:	d000      	beq.n	9212 <xQueueSemaphoreTake+0x346>
    9210:	e680      	b.n	8f14 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    9212:	4b13      	ldr	r3, [pc, #76]	; (9260 <xQueueSemaphoreTake+0x394>)
    9214:	4798      	blx	r3
    9216:	e67d      	b.n	8f14 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    9218:	69fb      	ldr	r3, [r7, #28]
    921a:	0018      	movs	r0, r3
    921c:	4b19      	ldr	r3, [pc, #100]	; (9284 <xQueueSemaphoreTake+0x3b8>)
    921e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    9220:	4b19      	ldr	r3, [pc, #100]	; (9288 <xQueueSemaphoreTake+0x3bc>)
    9222:	4798      	blx	r3
    9224:	e676      	b.n	8f14 <xQueueSemaphoreTake+0x48>
    9226:	46c0      	nop			; (mov r8, r8)
    9228:	0000a949 	.word	0x0000a949
    922c:	00007c29 	.word	0x00007c29
    9230:	00005eb9 	.word	0x00005eb9
    9234:	00005c1d 	.word	0x00005c1d
    9238:	20000110 	.word	0x20000110
    923c:	00005cdd 	.word	0x00005cdd
    9240:	00005bdd 	.word	0x00005bdd
    9244:	20000104 	.word	0x20000104
    9248:	00005cbd 	.word	0x00005cbd
    924c:	00006615 	.word	0x00006615
    9250:	00005bfd 	.word	0x00005bfd
    9254:	00006c71 	.word	0x00006c71
    9258:	0000ae15 	.word	0x0000ae15
    925c:	0000a4b9 	.word	0x0000a4b9
    9260:	00007c11 	.word	0x00007c11
    9264:	00007c4d 	.word	0x00007c4d
    9268:	0000a5f9 	.word	0x0000a5f9
    926c:	00009ee1 	.word	0x00009ee1
    9270:	0000a621 	.word	0x0000a621
    9274:	00009615 	.word	0x00009615
    9278:	00006dad 	.word	0x00006dad
    927c:	0000a981 	.word	0x0000a981
    9280:	0000a395 	.word	0x0000a395
    9284:	00009525 	.word	0x00009525
    9288:	00009ef9 	.word	0x00009ef9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    928c:	69fb      	ldr	r3, [r7, #28]
    928e:	0018      	movs	r0, r3
    9290:	4b2d      	ldr	r3, [pc, #180]	; (9348 <xQueueSemaphoreTake+0x47c>)
    9292:	4798      	blx	r3
			( void ) xTaskResumeAll();
    9294:	4b2d      	ldr	r3, [pc, #180]	; (934c <xQueueSemaphoreTake+0x480>)
    9296:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    9298:	69fb      	ldr	r3, [r7, #28]
    929a:	0018      	movs	r0, r3
    929c:	4b2c      	ldr	r3, [pc, #176]	; (9350 <xQueueSemaphoreTake+0x484>)
    929e:	4798      	blx	r3
    92a0:	1e03      	subs	r3, r0, #0
    92a2:	d100      	bne.n	92a6 <xQueueSemaphoreTake+0x3da>
    92a4:	e636      	b.n	8f14 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    92a6:	6a3b      	ldr	r3, [r7, #32]
    92a8:	2b00      	cmp	r3, #0
    92aa:	d010      	beq.n	92ce <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
    92ac:	4b29      	ldr	r3, [pc, #164]	; (9354 <xQueueSemaphoreTake+0x488>)
    92ae:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    92b0:	69fb      	ldr	r3, [r7, #28]
    92b2:	0018      	movs	r0, r3
    92b4:	4b28      	ldr	r3, [pc, #160]	; (9358 <xQueueSemaphoreTake+0x48c>)
    92b6:	4798      	blx	r3
    92b8:	0003      	movs	r3, r0
    92ba:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    92bc:	69fb      	ldr	r3, [r7, #28]
    92be:	685b      	ldr	r3, [r3, #4]
    92c0:	697a      	ldr	r2, [r7, #20]
    92c2:	0011      	movs	r1, r2
    92c4:	0018      	movs	r0, r3
    92c6:	4b25      	ldr	r3, [pc, #148]	; (935c <xQueueSemaphoreTake+0x490>)
    92c8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    92ca:	4b25      	ldr	r3, [pc, #148]	; (9360 <xQueueSemaphoreTake+0x494>)
    92cc:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
    92ce:	4b25      	ldr	r3, [pc, #148]	; (9364 <xQueueSemaphoreTake+0x498>)
    92d0:	4798      	blx	r3
    92d2:	0003      	movs	r3, r0
    92d4:	0018      	movs	r0, r3
    92d6:	4b24      	ldr	r3, [pc, #144]	; (9368 <xQueueSemaphoreTake+0x49c>)
    92d8:	4798      	blx	r3
    92da:	0003      	movs	r3, r0
    92dc:	001a      	movs	r2, r3
    92de:	4b23      	ldr	r3, [pc, #140]	; (936c <xQueueSemaphoreTake+0x4a0>)
    92e0:	881b      	ldrh	r3, [r3, #0]
    92e2:	4013      	ands	r3, r2
    92e4:	b29b      	uxth	r3, r3
    92e6:	2b00      	cmp	r3, #0
    92e8:	d029      	beq.n	933e <xQueueSemaphoreTake+0x472>
    92ea:	69fb      	ldr	r3, [r7, #28]
    92ec:	0018      	movs	r0, r3
    92ee:	4b20      	ldr	r3, [pc, #128]	; (9370 <xQueueSemaphoreTake+0x4a4>)
    92f0:	4798      	blx	r3
    92f2:	0003      	movs	r3, r0
    92f4:	001a      	movs	r2, r3
    92f6:	4b1d      	ldr	r3, [pc, #116]	; (936c <xQueueSemaphoreTake+0x4a0>)
    92f8:	881b      	ldrh	r3, [r3, #0]
    92fa:	4013      	ands	r3, r2
    92fc:	b29b      	uxth	r3, r3
    92fe:	2b00      	cmp	r3, #0
    9300:	d01d      	beq.n	933e <xQueueSemaphoreTake+0x472>
    9302:	69fb      	ldr	r3, [r7, #28]
    9304:	0018      	movs	r0, r3
    9306:	4b1b      	ldr	r3, [pc, #108]	; (9374 <xQueueSemaphoreTake+0x4a8>)
    9308:	4798      	blx	r3
    930a:	0003      	movs	r3, r0
    930c:	001a      	movs	r2, r3
    930e:	4b1a      	ldr	r3, [pc, #104]	; (9378 <xQueueSemaphoreTake+0x4ac>)
    9310:	5c9b      	ldrb	r3, [r3, r2]
    9312:	3350      	adds	r3, #80	; 0x50
    9314:	b2db      	uxtb	r3, r3
    9316:	001d      	movs	r5, r3
    9318:	69fb      	ldr	r3, [r7, #28]
    931a:	0018      	movs	r0, r3
    931c:	4b15      	ldr	r3, [pc, #84]	; (9374 <xQueueSemaphoreTake+0x4a8>)
    931e:	4798      	blx	r3
    9320:	0003      	movs	r3, r0
    9322:	001a      	movs	r2, r3
    9324:	4b14      	ldr	r3, [pc, #80]	; (9378 <xQueueSemaphoreTake+0x4ac>)
    9326:	5c9c      	ldrb	r4, [r3, r2]
    9328:	69fb      	ldr	r3, [r7, #28]
    932a:	0018      	movs	r0, r3
    932c:	4b13      	ldr	r3, [pc, #76]	; (937c <xQueueSemaphoreTake+0x4b0>)
    932e:	4798      	blx	r3
    9330:	0003      	movs	r3, r0
    9332:	b2db      	uxtb	r3, r3
    9334:	001a      	movs	r2, r3
    9336:	0021      	movs	r1, r4
    9338:	0028      	movs	r0, r5
    933a:	4b11      	ldr	r3, [pc, #68]	; (9380 <xQueueSemaphoreTake+0x4b4>)
    933c:	4798      	blx	r3
				return errQUEUE_EMPTY;
    933e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    9340:	0018      	movs	r0, r3
    9342:	46bd      	mov	sp, r7
    9344:	b00a      	add	sp, #40	; 0x28
    9346:	bdb0      	pop	{r4, r5, r7, pc}
    9348:	00009525 	.word	0x00009525
    934c:	00009ef9 	.word	0x00009ef9
    9350:	00009615 	.word	0x00009615
    9354:	00007c29 	.word	0x00007c29
    9358:	000093c7 	.word	0x000093c7
    935c:	0000ac79 	.word	0x0000ac79
    9360:	00007c4d 	.word	0x00007c4d
    9364:	00005eb9 	.word	0x00005eb9
    9368:	00005c1d 	.word	0x00005c1d
    936c:	20000110 	.word	0x20000110
    9370:	00005cdd 	.word	0x00005cdd
    9374:	00005bdd 	.word	0x00005bdd
    9378:	20000104 	.word	0x20000104
    937c:	00005cbd 	.word	0x00005cbd
    9380:	00006615 	.word	0x00006615

00009384 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
    9384:	b580      	push	{r7, lr}
    9386:	b082      	sub	sp, #8
    9388:	af00      	add	r7, sp, #0
    938a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    938c:	687b      	ldr	r3, [r7, #4]
    938e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
    9390:	0018      	movs	r0, r3
    9392:	46bd      	mov	sp, r7
    9394:	b002      	add	sp, #8
    9396:	bd80      	pop	{r7, pc}

00009398 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
    9398:	b580      	push	{r7, lr}
    939a:	b082      	sub	sp, #8
    939c:	af00      	add	r7, sp, #0
    939e:	6078      	str	r0, [r7, #4]
    93a0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	683a      	ldr	r2, [r7, #0]
    93a6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
    93a8:	46c0      	nop			; (mov r8, r8)
    93aa:	46bd      	mov	sp, r7
    93ac:	b002      	add	sp, #8
    93ae:	bd80      	pop	{r7, pc}

000093b0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
    93b0:	b580      	push	{r7, lr}
    93b2:	b082      	sub	sp, #8
    93b4:	af00      	add	r7, sp, #0
    93b6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    93b8:	687b      	ldr	r3, [r7, #4]
    93ba:	2250      	movs	r2, #80	; 0x50
    93bc:	5c9b      	ldrb	r3, [r3, r2]
	}
    93be:	0018      	movs	r0, r3
    93c0:	46bd      	mov	sp, r7
    93c2:	b002      	add	sp, #8
    93c4:	bd80      	pop	{r7, pc}

000093c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    93c6:	b580      	push	{r7, lr}
    93c8:	b084      	sub	sp, #16
    93ca:	af00      	add	r7, sp, #0
    93cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    93ce:	687b      	ldr	r3, [r7, #4]
    93d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93d2:	2b00      	cmp	r3, #0
    93d4:	d006      	beq.n	93e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    93d6:	687b      	ldr	r3, [r7, #4]
    93d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    93da:	681b      	ldr	r3, [r3, #0]
    93dc:	2205      	movs	r2, #5
    93de:	1ad3      	subs	r3, r2, r3
    93e0:	60fb      	str	r3, [r7, #12]
    93e2:	e001      	b.n	93e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    93e4:	2300      	movs	r3, #0
    93e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    93e8:	68fb      	ldr	r3, [r7, #12]
	}
    93ea:	0018      	movs	r0, r3
    93ec:	46bd      	mov	sp, r7
    93ee:	b004      	add	sp, #16
    93f0:	bd80      	pop	{r7, pc}
	...

000093f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    93f4:	b580      	push	{r7, lr}
    93f6:	b086      	sub	sp, #24
    93f8:	af00      	add	r7, sp, #0
    93fa:	60f8      	str	r0, [r7, #12]
    93fc:	60b9      	str	r1, [r7, #8]
    93fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    9400:	2300      	movs	r3, #0
    9402:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    9404:	68fb      	ldr	r3, [r7, #12]
    9406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9408:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    940a:	68fb      	ldr	r3, [r7, #12]
    940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    940e:	2b00      	cmp	r3, #0
    9410:	d10e      	bne.n	9430 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    9412:	68fb      	ldr	r3, [r7, #12]
    9414:	681b      	ldr	r3, [r3, #0]
    9416:	2b00      	cmp	r3, #0
    9418:	d14e      	bne.n	94b8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    941a:	68fb      	ldr	r3, [r7, #12]
    941c:	685b      	ldr	r3, [r3, #4]
    941e:	0018      	movs	r0, r3
    9420:	4b2a      	ldr	r3, [pc, #168]	; (94cc <prvCopyDataToQueue+0xd8>)
    9422:	4798      	blx	r3
    9424:	0003      	movs	r3, r0
    9426:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    9428:	68fb      	ldr	r3, [r7, #12]
    942a:	2200      	movs	r2, #0
    942c:	605a      	str	r2, [r3, #4]
    942e:	e043      	b.n	94b8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    9430:	687b      	ldr	r3, [r7, #4]
    9432:	2b00      	cmp	r3, #0
    9434:	d119      	bne.n	946a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    9436:	68fb      	ldr	r3, [r7, #12]
    9438:	6898      	ldr	r0, [r3, #8]
    943a:	68fb      	ldr	r3, [r7, #12]
    943c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    943e:	68bb      	ldr	r3, [r7, #8]
    9440:	0019      	movs	r1, r3
    9442:	4b23      	ldr	r3, [pc, #140]	; (94d0 <prvCopyDataToQueue+0xdc>)
    9444:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    9446:	68fb      	ldr	r3, [r7, #12]
    9448:	689a      	ldr	r2, [r3, #8]
    944a:	68fb      	ldr	r3, [r7, #12]
    944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    944e:	18d2      	adds	r2, r2, r3
    9450:	68fb      	ldr	r3, [r7, #12]
    9452:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    9454:	68fb      	ldr	r3, [r7, #12]
    9456:	689a      	ldr	r2, [r3, #8]
    9458:	68fb      	ldr	r3, [r7, #12]
    945a:	685b      	ldr	r3, [r3, #4]
    945c:	429a      	cmp	r2, r3
    945e:	d32b      	bcc.n	94b8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    9460:	68fb      	ldr	r3, [r7, #12]
    9462:	681a      	ldr	r2, [r3, #0]
    9464:	68fb      	ldr	r3, [r7, #12]
    9466:	609a      	str	r2, [r3, #8]
    9468:	e026      	b.n	94b8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    946a:	68fb      	ldr	r3, [r7, #12]
    946c:	68d8      	ldr	r0, [r3, #12]
    946e:	68fb      	ldr	r3, [r7, #12]
    9470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    9472:	68bb      	ldr	r3, [r7, #8]
    9474:	0019      	movs	r1, r3
    9476:	4b16      	ldr	r3, [pc, #88]	; (94d0 <prvCopyDataToQueue+0xdc>)
    9478:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    947a:	68fb      	ldr	r3, [r7, #12]
    947c:	68da      	ldr	r2, [r3, #12]
    947e:	68fb      	ldr	r3, [r7, #12]
    9480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9482:	425b      	negs	r3, r3
    9484:	18d2      	adds	r2, r2, r3
    9486:	68fb      	ldr	r3, [r7, #12]
    9488:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    948a:	68fb      	ldr	r3, [r7, #12]
    948c:	68da      	ldr	r2, [r3, #12]
    948e:	68fb      	ldr	r3, [r7, #12]
    9490:	681b      	ldr	r3, [r3, #0]
    9492:	429a      	cmp	r2, r3
    9494:	d207      	bcs.n	94a6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    9496:	68fb      	ldr	r3, [r7, #12]
    9498:	685a      	ldr	r2, [r3, #4]
    949a:	68fb      	ldr	r3, [r7, #12]
    949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    949e:	425b      	negs	r3, r3
    94a0:	18d2      	adds	r2, r2, r3
    94a2:	68fb      	ldr	r3, [r7, #12]
    94a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    94a6:	687b      	ldr	r3, [r7, #4]
    94a8:	2b02      	cmp	r3, #2
    94aa:	d105      	bne.n	94b8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    94ac:	693b      	ldr	r3, [r7, #16]
    94ae:	2b00      	cmp	r3, #0
    94b0:	d002      	beq.n	94b8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    94b2:	693b      	ldr	r3, [r7, #16]
    94b4:	3b01      	subs	r3, #1
    94b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    94b8:	693b      	ldr	r3, [r7, #16]
    94ba:	1c5a      	adds	r2, r3, #1
    94bc:	68fb      	ldr	r3, [r7, #12]
    94be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    94c0:	697b      	ldr	r3, [r7, #20]
}
    94c2:	0018      	movs	r0, r3
    94c4:	46bd      	mov	sp, r7
    94c6:	b006      	add	sp, #24
    94c8:	bd80      	pop	{r7, pc}
    94ca:	46c0      	nop			; (mov r8, r8)
    94cc:	0000ab11 	.word	0x0000ab11
    94d0:	00022d85 	.word	0x00022d85

000094d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    94d4:	b580      	push	{r7, lr}
    94d6:	b082      	sub	sp, #8
    94d8:	af00      	add	r7, sp, #0
    94da:	6078      	str	r0, [r7, #4]
    94dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    94de:	687b      	ldr	r3, [r7, #4]
    94e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    94e2:	2b00      	cmp	r3, #0
    94e4:	d018      	beq.n	9518 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    94e6:	687b      	ldr	r3, [r7, #4]
    94e8:	68da      	ldr	r2, [r3, #12]
    94ea:	687b      	ldr	r3, [r7, #4]
    94ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    94ee:	18d2      	adds	r2, r2, r3
    94f0:	687b      	ldr	r3, [r7, #4]
    94f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	68da      	ldr	r2, [r3, #12]
    94f8:	687b      	ldr	r3, [r7, #4]
    94fa:	685b      	ldr	r3, [r3, #4]
    94fc:	429a      	cmp	r2, r3
    94fe:	d303      	bcc.n	9508 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    9500:	687b      	ldr	r3, [r7, #4]
    9502:	681a      	ldr	r2, [r3, #0]
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    9508:	687b      	ldr	r3, [r7, #4]
    950a:	68d9      	ldr	r1, [r3, #12]
    950c:	687b      	ldr	r3, [r7, #4]
    950e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    9510:	683b      	ldr	r3, [r7, #0]
    9512:	0018      	movs	r0, r3
    9514:	4b02      	ldr	r3, [pc, #8]	; (9520 <prvCopyDataFromQueue+0x4c>)
    9516:	4798      	blx	r3
	}
}
    9518:	46c0      	nop			; (mov r8, r8)
    951a:	46bd      	mov	sp, r7
    951c:	b002      	add	sp, #8
    951e:	bd80      	pop	{r7, pc}
    9520:	00022d85 	.word	0x00022d85

00009524 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    9524:	b580      	push	{r7, lr}
    9526:	b084      	sub	sp, #16
    9528:	af00      	add	r7, sp, #0
    952a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    952c:	4b34      	ldr	r3, [pc, #208]	; (9600 <prvUnlockQueue+0xdc>)
    952e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    9530:	230f      	movs	r3, #15
    9532:	18fb      	adds	r3, r7, r3
    9534:	687a      	ldr	r2, [r7, #4]
    9536:	2145      	movs	r1, #69	; 0x45
    9538:	5c52      	ldrb	r2, [r2, r1]
    953a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    953c:	e022      	b.n	9584 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    953e:	687b      	ldr	r3, [r7, #4]
    9540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9542:	2b00      	cmp	r3, #0
    9544:	d009      	beq.n	955a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	2100      	movs	r1, #0
    954a:	0018      	movs	r0, r3
    954c:	4b2d      	ldr	r3, [pc, #180]	; (9604 <prvUnlockQueue+0xe0>)
    954e:	4798      	blx	r3
    9550:	1e03      	subs	r3, r0, #0
    9552:	d00f      	beq.n	9574 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    9554:	4b2c      	ldr	r3, [pc, #176]	; (9608 <prvUnlockQueue+0xe4>)
    9556:	4798      	blx	r3
    9558:	e00c      	b.n	9574 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    955a:	687b      	ldr	r3, [r7, #4]
    955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    955e:	2b00      	cmp	r3, #0
    9560:	d017      	beq.n	9592 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9562:	687b      	ldr	r3, [r7, #4]
    9564:	3324      	adds	r3, #36	; 0x24
    9566:	0018      	movs	r0, r3
    9568:	4b28      	ldr	r3, [pc, #160]	; (960c <prvUnlockQueue+0xe8>)
    956a:	4798      	blx	r3
    956c:	1e03      	subs	r3, r0, #0
    956e:	d001      	beq.n	9574 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    9570:	4b25      	ldr	r3, [pc, #148]	; (9608 <prvUnlockQueue+0xe4>)
    9572:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    9574:	230f      	movs	r3, #15
    9576:	18fb      	adds	r3, r7, r3
    9578:	781b      	ldrb	r3, [r3, #0]
    957a:	3b01      	subs	r3, #1
    957c:	b2da      	uxtb	r2, r3
    957e:	230f      	movs	r3, #15
    9580:	18fb      	adds	r3, r7, r3
    9582:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    9584:	230f      	movs	r3, #15
    9586:	18fb      	adds	r3, r7, r3
    9588:	781b      	ldrb	r3, [r3, #0]
    958a:	b25b      	sxtb	r3, r3
    958c:	2b00      	cmp	r3, #0
    958e:	dcd6      	bgt.n	953e <prvUnlockQueue+0x1a>
    9590:	e000      	b.n	9594 <prvUnlockQueue+0x70>
						break;
    9592:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	2245      	movs	r2, #69	; 0x45
    9598:	21ff      	movs	r1, #255	; 0xff
    959a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    959c:	4b1c      	ldr	r3, [pc, #112]	; (9610 <prvUnlockQueue+0xec>)
    959e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    95a0:	4b17      	ldr	r3, [pc, #92]	; (9600 <prvUnlockQueue+0xdc>)
    95a2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    95a4:	230e      	movs	r3, #14
    95a6:	18fb      	adds	r3, r7, r3
    95a8:	687a      	ldr	r2, [r7, #4]
    95aa:	2144      	movs	r1, #68	; 0x44
    95ac:	5c52      	ldrb	r2, [r2, r1]
    95ae:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    95b0:	e014      	b.n	95dc <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    95b2:	687b      	ldr	r3, [r7, #4]
    95b4:	691b      	ldr	r3, [r3, #16]
    95b6:	2b00      	cmp	r3, #0
    95b8:	d017      	beq.n	95ea <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    95ba:	687b      	ldr	r3, [r7, #4]
    95bc:	3310      	adds	r3, #16
    95be:	0018      	movs	r0, r3
    95c0:	4b12      	ldr	r3, [pc, #72]	; (960c <prvUnlockQueue+0xe8>)
    95c2:	4798      	blx	r3
    95c4:	1e03      	subs	r3, r0, #0
    95c6:	d001      	beq.n	95cc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    95c8:	4b0f      	ldr	r3, [pc, #60]	; (9608 <prvUnlockQueue+0xe4>)
    95ca:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    95cc:	230e      	movs	r3, #14
    95ce:	18fb      	adds	r3, r7, r3
    95d0:	781b      	ldrb	r3, [r3, #0]
    95d2:	3b01      	subs	r3, #1
    95d4:	b2da      	uxtb	r2, r3
    95d6:	230e      	movs	r3, #14
    95d8:	18fb      	adds	r3, r7, r3
    95da:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    95dc:	230e      	movs	r3, #14
    95de:	18fb      	adds	r3, r7, r3
    95e0:	781b      	ldrb	r3, [r3, #0]
    95e2:	b25b      	sxtb	r3, r3
    95e4:	2b00      	cmp	r3, #0
    95e6:	dce4      	bgt.n	95b2 <prvUnlockQueue+0x8e>
    95e8:	e000      	b.n	95ec <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    95ea:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    95ec:	687b      	ldr	r3, [r7, #4]
    95ee:	2244      	movs	r2, #68	; 0x44
    95f0:	21ff      	movs	r1, #255	; 0xff
    95f2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    95f4:	4b06      	ldr	r3, [pc, #24]	; (9610 <prvUnlockQueue+0xec>)
    95f6:	4798      	blx	r3
}
    95f8:	46c0      	nop			; (mov r8, r8)
    95fa:	46bd      	mov	sp, r7
    95fc:	b004      	add	sp, #16
    95fe:	bd80      	pop	{r7, pc}
    9600:	00007c29 	.word	0x00007c29
    9604:	000096f9 	.word	0x000096f9
    9608:	0000a6cd 	.word	0x0000a6cd
    960c:	0000a4b9 	.word	0x0000a4b9
    9610:	00007c4d 	.word	0x00007c4d

00009614 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    9614:	b580      	push	{r7, lr}
    9616:	b084      	sub	sp, #16
    9618:	af00      	add	r7, sp, #0
    961a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    961c:	4b08      	ldr	r3, [pc, #32]	; (9640 <prvIsQueueEmpty+0x2c>)
    961e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    9620:	687b      	ldr	r3, [r7, #4]
    9622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9624:	2b00      	cmp	r3, #0
    9626:	d102      	bne.n	962e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    9628:	2301      	movs	r3, #1
    962a:	60fb      	str	r3, [r7, #12]
    962c:	e001      	b.n	9632 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    962e:	2300      	movs	r3, #0
    9630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    9632:	4b04      	ldr	r3, [pc, #16]	; (9644 <prvIsQueueEmpty+0x30>)
    9634:	4798      	blx	r3

	return xReturn;
    9636:	68fb      	ldr	r3, [r7, #12]
}
    9638:	0018      	movs	r0, r3
    963a:	46bd      	mov	sp, r7
    963c:	b004      	add	sp, #16
    963e:	bd80      	pop	{r7, pc}
    9640:	00007c29 	.word	0x00007c29
    9644:	00007c4d 	.word	0x00007c4d

00009648 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    9648:	b580      	push	{r7, lr}
    964a:	b084      	sub	sp, #16
    964c:	af00      	add	r7, sp, #0
    964e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    9650:	4b09      	ldr	r3, [pc, #36]	; (9678 <prvIsQueueFull+0x30>)
    9652:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9658:	687b      	ldr	r3, [r7, #4]
    965a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    965c:	429a      	cmp	r2, r3
    965e:	d102      	bne.n	9666 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    9660:	2301      	movs	r3, #1
    9662:	60fb      	str	r3, [r7, #12]
    9664:	e001      	b.n	966a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    9666:	2300      	movs	r3, #0
    9668:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    966a:	4b04      	ldr	r3, [pc, #16]	; (967c <prvIsQueueFull+0x34>)
    966c:	4798      	blx	r3

	return xReturn;
    966e:	68fb      	ldr	r3, [r7, #12]
}
    9670:	0018      	movs	r0, r3
    9672:	46bd      	mov	sp, r7
    9674:	b004      	add	sp, #16
    9676:	bd80      	pop	{r7, pc}
    9678:	00007c29 	.word	0x00007c29
    967c:	00007c4d 	.word	0x00007c4d

00009680 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    9680:	b580      	push	{r7, lr}
    9682:	b086      	sub	sp, #24
    9684:	af00      	add	r7, sp, #0
    9686:	60f8      	str	r0, [r7, #12]
    9688:	60b9      	str	r1, [r7, #8]
    968a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    968c:	68fb      	ldr	r3, [r7, #12]
    968e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    9690:	4b15      	ldr	r3, [pc, #84]	; (96e8 <vQueueWaitForMessageRestricted+0x68>)
    9692:	4798      	blx	r3
    9694:	697b      	ldr	r3, [r7, #20]
    9696:	2244      	movs	r2, #68	; 0x44
    9698:	5c9b      	ldrb	r3, [r3, r2]
    969a:	b25b      	sxtb	r3, r3
    969c:	3301      	adds	r3, #1
    969e:	d103      	bne.n	96a8 <vQueueWaitForMessageRestricted+0x28>
    96a0:	697b      	ldr	r3, [r7, #20]
    96a2:	2244      	movs	r2, #68	; 0x44
    96a4:	2100      	movs	r1, #0
    96a6:	5499      	strb	r1, [r3, r2]
    96a8:	697b      	ldr	r3, [r7, #20]
    96aa:	2245      	movs	r2, #69	; 0x45
    96ac:	5c9b      	ldrb	r3, [r3, r2]
    96ae:	b25b      	sxtb	r3, r3
    96b0:	3301      	adds	r3, #1
    96b2:	d103      	bne.n	96bc <vQueueWaitForMessageRestricted+0x3c>
    96b4:	697b      	ldr	r3, [r7, #20]
    96b6:	2245      	movs	r2, #69	; 0x45
    96b8:	2100      	movs	r1, #0
    96ba:	5499      	strb	r1, [r3, r2]
    96bc:	4b0b      	ldr	r3, [pc, #44]	; (96ec <vQueueWaitForMessageRestricted+0x6c>)
    96be:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    96c0:	697b      	ldr	r3, [r7, #20]
    96c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    96c4:	2b00      	cmp	r3, #0
    96c6:	d106      	bne.n	96d6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    96c8:	697b      	ldr	r3, [r7, #20]
    96ca:	3324      	adds	r3, #36	; 0x24
    96cc:	687a      	ldr	r2, [r7, #4]
    96ce:	68b9      	ldr	r1, [r7, #8]
    96d0:	0018      	movs	r0, r3
    96d2:	4b07      	ldr	r3, [pc, #28]	; (96f0 <vQueueWaitForMessageRestricted+0x70>)
    96d4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    96d6:	697b      	ldr	r3, [r7, #20]
    96d8:	0018      	movs	r0, r3
    96da:	4b06      	ldr	r3, [pc, #24]	; (96f4 <vQueueWaitForMessageRestricted+0x74>)
    96dc:	4798      	blx	r3
	}
    96de:	46c0      	nop			; (mov r8, r8)
    96e0:	46bd      	mov	sp, r7
    96e2:	b006      	add	sp, #24
    96e4:	bd80      	pop	{r7, pc}
    96e6:	46c0      	nop			; (mov r8, r8)
    96e8:	00007c29 	.word	0x00007c29
    96ec:	00007c4d 	.word	0x00007c4d
    96f0:	0000a3d9 	.word	0x0000a3d9
    96f4:	00009525 	.word	0x00009525

000096f8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    96f8:	b5b0      	push	{r4, r5, r7, lr}
    96fa:	b086      	sub	sp, #24
    96fc:	af00      	add	r7, sp, #0
    96fe:	6078      	str	r0, [r7, #4]
    9700:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    9708:	2300      	movs	r3, #0
    970a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    970c:	693b      	ldr	r3, [r7, #16]
    970e:	2b00      	cmp	r3, #0
    9710:	d101      	bne.n	9716 <prvNotifyQueueSetContainer+0x1e>
    9712:	b672      	cpsid	i
    9714:	e7fe      	b.n	9714 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    9716:	693b      	ldr	r3, [r7, #16]
    9718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    971a:	693b      	ldr	r3, [r7, #16]
    971c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    971e:	429a      	cmp	r2, r3
    9720:	d301      	bcc.n	9726 <prvNotifyQueueSetContainer+0x2e>
    9722:	b672      	cpsid	i
    9724:	e7fe      	b.n	9724 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    9726:	693b      	ldr	r3, [r7, #16]
    9728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    972a:	693b      	ldr	r3, [r7, #16]
    972c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    972e:	429a      	cmp	r2, r3
    9730:	d300      	bcc.n	9734 <prvNotifyQueueSetContainer+0x3c>
    9732:	e08b      	b.n	984c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    9734:	230f      	movs	r3, #15
    9736:	18fb      	adds	r3, r7, r3
    9738:	693a      	ldr	r2, [r7, #16]
    973a:	2145      	movs	r1, #69	; 0x45
    973c:	5c52      	ldrb	r2, [r2, r1]
    973e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
    9740:	4b45      	ldr	r3, [pc, #276]	; (9858 <prvNotifyQueueSetContainer+0x160>)
    9742:	4798      	blx	r3
    9744:	0003      	movs	r3, r0
    9746:	0018      	movs	r0, r3
    9748:	4b44      	ldr	r3, [pc, #272]	; (985c <prvNotifyQueueSetContainer+0x164>)
    974a:	4798      	blx	r3
    974c:	0003      	movs	r3, r0
    974e:	001a      	movs	r2, r3
    9750:	4b43      	ldr	r3, [pc, #268]	; (9860 <prvNotifyQueueSetContainer+0x168>)
    9752:	881b      	ldrh	r3, [r3, #0]
    9754:	4013      	ands	r3, r2
    9756:	b29b      	uxth	r3, r3
    9758:	2b00      	cmp	r3, #0
    975a:	d02e      	beq.n	97ba <prvNotifyQueueSetContainer+0xc2>
    975c:	693b      	ldr	r3, [r7, #16]
    975e:	0018      	movs	r0, r3
    9760:	4b40      	ldr	r3, [pc, #256]	; (9864 <prvNotifyQueueSetContainer+0x16c>)
    9762:	4798      	blx	r3
    9764:	0003      	movs	r3, r0
    9766:	001a      	movs	r2, r3
    9768:	4b3d      	ldr	r3, [pc, #244]	; (9860 <prvNotifyQueueSetContainer+0x168>)
    976a:	881b      	ldrh	r3, [r3, #0]
    976c:	4013      	ands	r3, r2
    976e:	b29b      	uxth	r3, r3
    9770:	2b00      	cmp	r3, #0
    9772:	d022      	beq.n	97ba <prvNotifyQueueSetContainer+0xc2>
    9774:	683b      	ldr	r3, [r7, #0]
    9776:	2b00      	cmp	r3, #0
    9778:	d10b      	bne.n	9792 <prvNotifyQueueSetContainer+0x9a>
    977a:	693b      	ldr	r3, [r7, #16]
    977c:	0018      	movs	r0, r3
    977e:	4b3a      	ldr	r3, [pc, #232]	; (9868 <prvNotifyQueueSetContainer+0x170>)
    9780:	4798      	blx	r3
    9782:	0003      	movs	r3, r0
    9784:	001a      	movs	r2, r3
    9786:	4b39      	ldr	r3, [pc, #228]	; (986c <prvNotifyQueueSetContainer+0x174>)
    9788:	5c9b      	ldrb	r3, [r3, r2]
    978a:	3320      	adds	r3, #32
    978c:	b2db      	uxtb	r3, r3
    978e:	001d      	movs	r5, r3
    9790:	e000      	b.n	9794 <prvNotifyQueueSetContainer+0x9c>
    9792:	2525      	movs	r5, #37	; 0x25
    9794:	693b      	ldr	r3, [r7, #16]
    9796:	0018      	movs	r0, r3
    9798:	4b33      	ldr	r3, [pc, #204]	; (9868 <prvNotifyQueueSetContainer+0x170>)
    979a:	4798      	blx	r3
    979c:	0003      	movs	r3, r0
    979e:	001a      	movs	r2, r3
    97a0:	4b32      	ldr	r3, [pc, #200]	; (986c <prvNotifyQueueSetContainer+0x174>)
    97a2:	5c9c      	ldrb	r4, [r3, r2]
    97a4:	693b      	ldr	r3, [r7, #16]
    97a6:	0018      	movs	r0, r3
    97a8:	4b31      	ldr	r3, [pc, #196]	; (9870 <prvNotifyQueueSetContainer+0x178>)
    97aa:	4798      	blx	r3
    97ac:	0003      	movs	r3, r0
    97ae:	b2db      	uxtb	r3, r3
    97b0:	001a      	movs	r2, r3
    97b2:	0021      	movs	r1, r4
    97b4:	0028      	movs	r0, r5
    97b6:	4b2f      	ldr	r3, [pc, #188]	; (9874 <prvNotifyQueueSetContainer+0x17c>)
    97b8:	4798      	blx	r3
    97ba:	693b      	ldr	r3, [r7, #16]
    97bc:	0018      	movs	r0, r3
    97be:	4b2a      	ldr	r3, [pc, #168]	; (9868 <prvNotifyQueueSetContainer+0x170>)
    97c0:	4798      	blx	r3
    97c2:	0003      	movs	r3, r0
    97c4:	001a      	movs	r2, r3
    97c6:	4b29      	ldr	r3, [pc, #164]	; (986c <prvNotifyQueueSetContainer+0x174>)
    97c8:	5c9c      	ldrb	r4, [r3, r2]
    97ca:	693b      	ldr	r3, [r7, #16]
    97cc:	0018      	movs	r0, r3
    97ce:	4b28      	ldr	r3, [pc, #160]	; (9870 <prvNotifyQueueSetContainer+0x178>)
    97d0:	4798      	blx	r3
    97d2:	0003      	movs	r3, r0
    97d4:	b2dd      	uxtb	r5, r3
    97d6:	693b      	ldr	r3, [r7, #16]
    97d8:	0018      	movs	r0, r3
    97da:	4b23      	ldr	r3, [pc, #140]	; (9868 <prvNotifyQueueSetContainer+0x170>)
    97dc:	4798      	blx	r3
    97de:	0003      	movs	r3, r0
    97e0:	001a      	movs	r2, r3
    97e2:	4b22      	ldr	r3, [pc, #136]	; (986c <prvNotifyQueueSetContainer+0x174>)
    97e4:	5c9b      	ldrb	r3, [r3, r2]
    97e6:	2b02      	cmp	r3, #2
    97e8:	d005      	beq.n	97f6 <prvNotifyQueueSetContainer+0xfe>
    97ea:	693b      	ldr	r3, [r7, #16]
    97ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    97ee:	b2db      	uxtb	r3, r3
    97f0:	3301      	adds	r3, #1
    97f2:	b2db      	uxtb	r3, r3
    97f4:	e000      	b.n	97f8 <prvNotifyQueueSetContainer+0x100>
    97f6:	2300      	movs	r3, #0
    97f8:	001a      	movs	r2, r3
    97fa:	0029      	movs	r1, r5
    97fc:	0020      	movs	r0, r4
    97fe:	4b1e      	ldr	r3, [pc, #120]	; (9878 <prvNotifyQueueSetContainer+0x180>)
    9800:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    9802:	683a      	ldr	r2, [r7, #0]
    9804:	1d39      	adds	r1, r7, #4
    9806:	693b      	ldr	r3, [r7, #16]
    9808:	0018      	movs	r0, r3
    980a:	4b1c      	ldr	r3, [pc, #112]	; (987c <prvNotifyQueueSetContainer+0x184>)
    980c:	4798      	blx	r3
    980e:	0003      	movs	r3, r0
    9810:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    9812:	230f      	movs	r3, #15
    9814:	18fb      	adds	r3, r7, r3
    9816:	781b      	ldrb	r3, [r3, #0]
    9818:	b25b      	sxtb	r3, r3
    981a:	3301      	adds	r3, #1
    981c:	d10d      	bne.n	983a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    981e:	693b      	ldr	r3, [r7, #16]
    9820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9822:	2b00      	cmp	r3, #0
    9824:	d012      	beq.n	984c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    9826:	693b      	ldr	r3, [r7, #16]
    9828:	3324      	adds	r3, #36	; 0x24
    982a:	0018      	movs	r0, r3
    982c:	4b14      	ldr	r3, [pc, #80]	; (9880 <prvNotifyQueueSetContainer+0x188>)
    982e:	4798      	blx	r3
    9830:	1e03      	subs	r3, r0, #0
    9832:	d00b      	beq.n	984c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    9834:	2301      	movs	r3, #1
    9836:	617b      	str	r3, [r7, #20]
    9838:	e008      	b.n	984c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    983a:	230f      	movs	r3, #15
    983c:	18fb      	adds	r3, r7, r3
    983e:	781b      	ldrb	r3, [r3, #0]
    9840:	3301      	adds	r3, #1
    9842:	b2db      	uxtb	r3, r3
    9844:	b259      	sxtb	r1, r3
    9846:	693b      	ldr	r3, [r7, #16]
    9848:	2245      	movs	r2, #69	; 0x45
    984a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    984c:	697b      	ldr	r3, [r7, #20]
	}
    984e:	0018      	movs	r0, r3
    9850:	46bd      	mov	sp, r7
    9852:	b006      	add	sp, #24
    9854:	bdb0      	pop	{r4, r5, r7, pc}
    9856:	46c0      	nop			; (mov r8, r8)
    9858:	00005eb9 	.word	0x00005eb9
    985c:	00005c1d 	.word	0x00005c1d
    9860:	20000110 	.word	0x20000110
    9864:	00005cdd 	.word	0x00005cdd
    9868:	00005bdd 	.word	0x00005bdd
    986c:	20000104 	.word	0x20000104
    9870:	00005cbd 	.word	0x00005cbd
    9874:	00006615 	.word	0x00006615
    9878:	00006c71 	.word	0x00006c71
    987c:	000093f5 	.word	0x000093f5
    9880:	0000a4b9 	.word	0x0000a4b9

00009884 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    9884:	b590      	push	{r4, r7, lr}
    9886:	b08d      	sub	sp, #52	; 0x34
    9888:	af04      	add	r7, sp, #16
    988a:	60f8      	str	r0, [r7, #12]
    988c:	60b9      	str	r1, [r7, #8]
    988e:	603b      	str	r3, [r7, #0]
    9890:	1dbb      	adds	r3, r7, #6
    9892:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9894:	1dbb      	adds	r3, r7, #6
    9896:	881b      	ldrh	r3, [r3, #0]
    9898:	009b      	lsls	r3, r3, #2
    989a:	0018      	movs	r0, r3
    989c:	4b1d      	ldr	r3, [pc, #116]	; (9914 <xTaskCreate+0x90>)
    989e:	4798      	blx	r3
    98a0:	0003      	movs	r3, r0
    98a2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    98a4:	697b      	ldr	r3, [r7, #20]
    98a6:	2b00      	cmp	r3, #0
    98a8:	d010      	beq.n	98cc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    98aa:	2054      	movs	r0, #84	; 0x54
    98ac:	4b19      	ldr	r3, [pc, #100]	; (9914 <xTaskCreate+0x90>)
    98ae:	4798      	blx	r3
    98b0:	0003      	movs	r3, r0
    98b2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    98b4:	69fb      	ldr	r3, [r7, #28]
    98b6:	2b00      	cmp	r3, #0
    98b8:	d003      	beq.n	98c2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    98ba:	69fb      	ldr	r3, [r7, #28]
    98bc:	697a      	ldr	r2, [r7, #20]
    98be:	631a      	str	r2, [r3, #48]	; 0x30
    98c0:	e006      	b.n	98d0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    98c2:	697b      	ldr	r3, [r7, #20]
    98c4:	0018      	movs	r0, r3
    98c6:	4b14      	ldr	r3, [pc, #80]	; (9918 <xTaskCreate+0x94>)
    98c8:	4798      	blx	r3
    98ca:	e001      	b.n	98d0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    98cc:	2300      	movs	r3, #0
    98ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    98d0:	69fb      	ldr	r3, [r7, #28]
    98d2:	2b00      	cmp	r3, #0
    98d4:	d016      	beq.n	9904 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    98d6:	1dbb      	adds	r3, r7, #6
    98d8:	881a      	ldrh	r2, [r3, #0]
    98da:	683c      	ldr	r4, [r7, #0]
    98dc:	68b9      	ldr	r1, [r7, #8]
    98de:	68f8      	ldr	r0, [r7, #12]
    98e0:	2300      	movs	r3, #0
    98e2:	9303      	str	r3, [sp, #12]
    98e4:	69fb      	ldr	r3, [r7, #28]
    98e6:	9302      	str	r3, [sp, #8]
    98e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    98ea:	9301      	str	r3, [sp, #4]
    98ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    98ee:	9300      	str	r3, [sp, #0]
    98f0:	0023      	movs	r3, r4
    98f2:	4c0a      	ldr	r4, [pc, #40]	; (991c <xTaskCreate+0x98>)
    98f4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    98f6:	69fb      	ldr	r3, [r7, #28]
    98f8:	0018      	movs	r0, r3
    98fa:	4b09      	ldr	r3, [pc, #36]	; (9920 <xTaskCreate+0x9c>)
    98fc:	4798      	blx	r3
			xReturn = pdPASS;
    98fe:	2301      	movs	r3, #1
    9900:	61bb      	str	r3, [r7, #24]
    9902:	e002      	b.n	990a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    9904:	2301      	movs	r3, #1
    9906:	425b      	negs	r3, r3
    9908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    990a:	69bb      	ldr	r3, [r7, #24]
	}
    990c:	0018      	movs	r0, r3
    990e:	46bd      	mov	sp, r7
    9910:	b009      	add	sp, #36	; 0x24
    9912:	bd90      	pop	{r4, r7, pc}
    9914:	00007d61 	.word	0x00007d61
    9918:	00007e25 	.word	0x00007e25
    991c:	00009925 	.word	0x00009925
    9920:	00009a35 	.word	0x00009a35

00009924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    9924:	b580      	push	{r7, lr}
    9926:	b086      	sub	sp, #24
    9928:	af00      	add	r7, sp, #0
    992a:	60f8      	str	r0, [r7, #12]
    992c:	60b9      	str	r1, [r7, #8]
    992e:	607a      	str	r2, [r7, #4]
    9930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    9932:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9934:	6b18      	ldr	r0, [r3, #48]	; 0x30
    9936:	687b      	ldr	r3, [r7, #4]
    9938:	009b      	lsls	r3, r3, #2
    993a:	001a      	movs	r2, r3
    993c:	21a5      	movs	r1, #165	; 0xa5
    993e:	4b39      	ldr	r3, [pc, #228]	; (9a24 <prvInitialiseNewTask+0x100>)
    9940:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    9942:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9946:	687b      	ldr	r3, [r7, #4]
    9948:	4937      	ldr	r1, [pc, #220]	; (9a28 <prvInitialiseNewTask+0x104>)
    994a:	468c      	mov	ip, r1
    994c:	4463      	add	r3, ip
    994e:	009b      	lsls	r3, r3, #2
    9950:	18d3      	adds	r3, r2, r3
    9952:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    9954:	693b      	ldr	r3, [r7, #16]
    9956:	2207      	movs	r2, #7
    9958:	4393      	bics	r3, r2
    995a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    995c:	693b      	ldr	r3, [r7, #16]
    995e:	2207      	movs	r2, #7
    9960:	4013      	ands	r3, r2
    9962:	d001      	beq.n	9968 <prvInitialiseNewTask+0x44>
    9964:	b672      	cpsid	i
    9966:	e7fe      	b.n	9966 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    9968:	2300      	movs	r3, #0
    996a:	617b      	str	r3, [r7, #20]
    996c:	e013      	b.n	9996 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    996e:	68ba      	ldr	r2, [r7, #8]
    9970:	697b      	ldr	r3, [r7, #20]
    9972:	18d3      	adds	r3, r2, r3
    9974:	7818      	ldrb	r0, [r3, #0]
    9976:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9978:	2134      	movs	r1, #52	; 0x34
    997a:	697b      	ldr	r3, [r7, #20]
    997c:	18d3      	adds	r3, r2, r3
    997e:	185b      	adds	r3, r3, r1
    9980:	1c02      	adds	r2, r0, #0
    9982:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    9984:	68ba      	ldr	r2, [r7, #8]
    9986:	697b      	ldr	r3, [r7, #20]
    9988:	18d3      	adds	r3, r2, r3
    998a:	781b      	ldrb	r3, [r3, #0]
    998c:	2b00      	cmp	r3, #0
    998e:	d006      	beq.n	999e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    9990:	697b      	ldr	r3, [r7, #20]
    9992:	3301      	adds	r3, #1
    9994:	617b      	str	r3, [r7, #20]
    9996:	697b      	ldr	r3, [r7, #20]
    9998:	2b07      	cmp	r3, #7
    999a:	d9e8      	bls.n	996e <prvInitialiseNewTask+0x4a>
    999c:	e000      	b.n	99a0 <prvInitialiseNewTask+0x7c>
		{
			break;
    999e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    99a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99a2:	223b      	movs	r2, #59	; 0x3b
    99a4:	2100      	movs	r1, #0
    99a6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    99a8:	6a3b      	ldr	r3, [r7, #32]
    99aa:	2b04      	cmp	r3, #4
    99ac:	d901      	bls.n	99b2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    99ae:	2304      	movs	r3, #4
    99b0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    99b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99b4:	6a3a      	ldr	r2, [r7, #32]
    99b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    99b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99ba:	6a3a      	ldr	r2, [r7, #32]
    99bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    99be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99c0:	2200      	movs	r2, #0
    99c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    99c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99c6:	3304      	adds	r3, #4
    99c8:	0018      	movs	r0, r3
    99ca:	4b18      	ldr	r3, [pc, #96]	; (9a2c <prvInitialiseNewTask+0x108>)
    99cc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    99ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99d0:	3318      	adds	r3, #24
    99d2:	0018      	movs	r0, r3
    99d4:	4b15      	ldr	r3, [pc, #84]	; (9a2c <prvInitialiseNewTask+0x108>)
    99d6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    99d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99da:	6aba      	ldr	r2, [r7, #40]	; 0x28
    99dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    99de:	6a3b      	ldr	r3, [r7, #32]
    99e0:	2205      	movs	r2, #5
    99e2:	1ad2      	subs	r2, r2, r3
    99e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    99e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    99ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    99ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99f0:	2200      	movs	r2, #0
    99f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    99f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99f6:	2250      	movs	r2, #80	; 0x50
    99f8:	2100      	movs	r1, #0
    99fa:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    99fc:	683a      	ldr	r2, [r7, #0]
    99fe:	68f9      	ldr	r1, [r7, #12]
    9a00:	693b      	ldr	r3, [r7, #16]
    9a02:	0018      	movs	r0, r3
    9a04:	4b0a      	ldr	r3, [pc, #40]	; (9a30 <prvInitialiseNewTask+0x10c>)
    9a06:	4798      	blx	r3
    9a08:	0002      	movs	r2, r0
    9a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    9a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9a10:	2b00      	cmp	r3, #0
    9a12:	d002      	beq.n	9a1a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    9a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    9a1a:	46c0      	nop			; (mov r8, r8)
    9a1c:	46bd      	mov	sp, r7
    9a1e:	b006      	add	sp, #24
    9a20:	bd80      	pop	{r7, pc}
    9a22:	46c0      	nop			; (mov r8, r8)
    9a24:	00022dbb 	.word	0x00022dbb
    9a28:	3fffffff 	.word	0x3fffffff
    9a2c:	000079d1 	.word	0x000079d1
    9a30:	00007ae9 	.word	0x00007ae9

00009a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    9a34:	b580      	push	{r7, lr}
    9a36:	b082      	sub	sp, #8
    9a38:	af00      	add	r7, sp, #0
    9a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    9a3c:	4b60      	ldr	r3, [pc, #384]	; (9bc0 <prvAddNewTaskToReadyList+0x18c>)
    9a3e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    9a40:	4b60      	ldr	r3, [pc, #384]	; (9bc4 <prvAddNewTaskToReadyList+0x190>)
    9a42:	681b      	ldr	r3, [r3, #0]
    9a44:	1c5a      	adds	r2, r3, #1
    9a46:	4b5f      	ldr	r3, [pc, #380]	; (9bc4 <prvAddNewTaskToReadyList+0x190>)
    9a48:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    9a4a:	4b5f      	ldr	r3, [pc, #380]	; (9bc8 <prvAddNewTaskToReadyList+0x194>)
    9a4c:	681b      	ldr	r3, [r3, #0]
    9a4e:	2b00      	cmp	r3, #0
    9a50:	d109      	bne.n	9a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    9a52:	4b5d      	ldr	r3, [pc, #372]	; (9bc8 <prvAddNewTaskToReadyList+0x194>)
    9a54:	687a      	ldr	r2, [r7, #4]
    9a56:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    9a58:	4b5a      	ldr	r3, [pc, #360]	; (9bc4 <prvAddNewTaskToReadyList+0x190>)
    9a5a:	681b      	ldr	r3, [r3, #0]
    9a5c:	2b01      	cmp	r3, #1
    9a5e:	d110      	bne.n	9a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    9a60:	4b5a      	ldr	r3, [pc, #360]	; (9bcc <prvAddNewTaskToReadyList+0x198>)
    9a62:	4798      	blx	r3
    9a64:	e00d      	b.n	9a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    9a66:	4b5a      	ldr	r3, [pc, #360]	; (9bd0 <prvAddNewTaskToReadyList+0x19c>)
    9a68:	681b      	ldr	r3, [r3, #0]
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d109      	bne.n	9a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    9a6e:	4b56      	ldr	r3, [pc, #344]	; (9bc8 <prvAddNewTaskToReadyList+0x194>)
    9a70:	681b      	ldr	r3, [r3, #0]
    9a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9a78:	429a      	cmp	r2, r3
    9a7a:	d802      	bhi.n	9a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    9a7c:	4b52      	ldr	r3, [pc, #328]	; (9bc8 <prvAddNewTaskToReadyList+0x194>)
    9a7e:	687a      	ldr	r2, [r7, #4]
    9a80:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    9a82:	4b54      	ldr	r3, [pc, #336]	; (9bd4 <prvAddNewTaskToReadyList+0x1a0>)
    9a84:	681b      	ldr	r3, [r3, #0]
    9a86:	1c5a      	adds	r2, r3, #1
    9a88:	4b52      	ldr	r3, [pc, #328]	; (9bd4 <prvAddNewTaskToReadyList+0x1a0>)
    9a8a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    9a8c:	4b51      	ldr	r3, [pc, #324]	; (9bd4 <prvAddNewTaskToReadyList+0x1a0>)
    9a8e:	681a      	ldr	r2, [r3, #0]
    9a90:	687b      	ldr	r3, [r7, #4]
    9a92:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
    9a94:	687b      	ldr	r3, [r7, #4]
    9a96:	2b00      	cmp	r3, #0
    9a98:	d052      	beq.n	9b40 <prvAddNewTaskToReadyList+0x10c>
    9a9a:	2003      	movs	r0, #3
    9a9c:	4b4e      	ldr	r3, [pc, #312]	; (9bd8 <prvAddNewTaskToReadyList+0x1a4>)
    9a9e:	4798      	blx	r3
    9aa0:	0003      	movs	r3, r0
    9aa2:	b29a      	uxth	r2, r3
    9aa4:	687b      	ldr	r3, [r7, #4]
    9aa6:	0011      	movs	r1, r2
    9aa8:	0018      	movs	r0, r3
    9aaa:	4b4c      	ldr	r3, [pc, #304]	; (9bdc <prvAddNewTaskToReadyList+0x1a8>)
    9aac:	4798      	blx	r3
    9aae:	4b4c      	ldr	r3, [pc, #304]	; (9be0 <prvAddNewTaskToReadyList+0x1ac>)
    9ab0:	881a      	ldrh	r2, [r3, #0]
    9ab2:	687b      	ldr	r3, [r7, #4]
    9ab4:	0011      	movs	r1, r2
    9ab6:	0018      	movs	r0, r3
    9ab8:	4b4a      	ldr	r3, [pc, #296]	; (9be4 <prvAddNewTaskToReadyList+0x1b0>)
    9aba:	4798      	blx	r3
    9abc:	687b      	ldr	r3, [r7, #4]
    9abe:	0018      	movs	r0, r3
    9ac0:	4b49      	ldr	r3, [pc, #292]	; (9be8 <prvAddNewTaskToReadyList+0x1b4>)
    9ac2:	4798      	blx	r3
    9ac4:	0003      	movs	r3, r0
    9ac6:	b2d9      	uxtb	r1, r3
    9ac8:	687b      	ldr	r3, [r7, #4]
    9aca:	3334      	adds	r3, #52	; 0x34
    9acc:	001a      	movs	r2, r3
    9ace:	2003      	movs	r0, #3
    9ad0:	4b46      	ldr	r3, [pc, #280]	; (9bec <prvAddNewTaskToReadyList+0x1b8>)
    9ad2:	4798      	blx	r3
    9ad4:	687b      	ldr	r3, [r7, #4]
    9ad6:	0018      	movs	r0, r3
    9ad8:	4b43      	ldr	r3, [pc, #268]	; (9be8 <prvAddNewTaskToReadyList+0x1b4>)
    9ada:	4798      	blx	r3
    9adc:	0003      	movs	r3, r0
    9ade:	b2d9      	uxtb	r1, r3
    9ae0:	687b      	ldr	r3, [r7, #4]
    9ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9ae4:	b2db      	uxtb	r3, r3
    9ae6:	001a      	movs	r2, r3
    9ae8:	2003      	movs	r0, #3
    9aea:	4b41      	ldr	r3, [pc, #260]	; (9bf0 <prvAddNewTaskToReadyList+0x1bc>)
    9aec:	4798      	blx	r3
    9aee:	4b41      	ldr	r3, [pc, #260]	; (9bf4 <prvAddNewTaskToReadyList+0x1c0>)
    9af0:	4798      	blx	r3
    9af2:	0003      	movs	r3, r0
    9af4:	0018      	movs	r0, r3
    9af6:	4b40      	ldr	r3, [pc, #256]	; (9bf8 <prvAddNewTaskToReadyList+0x1c4>)
    9af8:	4798      	blx	r3
    9afa:	0003      	movs	r3, r0
    9afc:	001a      	movs	r2, r3
    9afe:	4b3f      	ldr	r3, [pc, #252]	; (9bfc <prvAddNewTaskToReadyList+0x1c8>)
    9b00:	881b      	ldrh	r3, [r3, #0]
    9b02:	4013      	ands	r3, r2
    9b04:	b29b      	uxth	r3, r3
    9b06:	2b00      	cmp	r3, #0
    9b08:	d016      	beq.n	9b38 <prvAddNewTaskToReadyList+0x104>
    9b0a:	687b      	ldr	r3, [r7, #4]
    9b0c:	0018      	movs	r0, r3
    9b0e:	4b3a      	ldr	r3, [pc, #232]	; (9bf8 <prvAddNewTaskToReadyList+0x1c4>)
    9b10:	4798      	blx	r3
    9b12:	0003      	movs	r3, r0
    9b14:	001a      	movs	r2, r3
    9b16:	4b39      	ldr	r3, [pc, #228]	; (9bfc <prvAddNewTaskToReadyList+0x1c8>)
    9b18:	881b      	ldrh	r3, [r3, #0]
    9b1a:	4013      	ands	r3, r2
    9b1c:	b29b      	uxth	r3, r3
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d00a      	beq.n	9b38 <prvAddNewTaskToReadyList+0x104>
    9b22:	687b      	ldr	r3, [r7, #4]
    9b24:	0018      	movs	r0, r3
    9b26:	4b30      	ldr	r3, [pc, #192]	; (9be8 <prvAddNewTaskToReadyList+0x1b4>)
    9b28:	4798      	blx	r3
    9b2a:	0003      	movs	r3, r0
    9b2c:	b2db      	uxtb	r3, r3
    9b2e:	001a      	movs	r2, r3
    9b30:	2103      	movs	r1, #3
    9b32:	201b      	movs	r0, #27
    9b34:	4b32      	ldr	r3, [pc, #200]	; (9c00 <prvAddNewTaskToReadyList+0x1cc>)
    9b36:	4798      	blx	r3
    9b38:	687b      	ldr	r3, [r7, #4]
    9b3a:	0018      	movs	r0, r3
    9b3c:	4b31      	ldr	r3, [pc, #196]	; (9c04 <prvAddNewTaskToReadyList+0x1d0>)
    9b3e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
    9b40:	687b      	ldr	r3, [r7, #4]
    9b42:	0018      	movs	r0, r3
    9b44:	4b2c      	ldr	r3, [pc, #176]	; (9bf8 <prvAddNewTaskToReadyList+0x1c4>)
    9b46:	4798      	blx	r3
    9b48:	0003      	movs	r3, r0
    9b4a:	001a      	movs	r2, r3
    9b4c:	4b2b      	ldr	r3, [pc, #172]	; (9bfc <prvAddNewTaskToReadyList+0x1c8>)
    9b4e:	881b      	ldrh	r3, [r3, #0]
    9b50:	4013      	ands	r3, r2
    9b52:	b29b      	uxth	r3, r3
    9b54:	2b00      	cmp	r3, #0
    9b56:	d008      	beq.n	9b6a <prvAddNewTaskToReadyList+0x136>
    9b58:	687b      	ldr	r3, [r7, #4]
    9b5a:	0018      	movs	r0, r3
    9b5c:	4b22      	ldr	r3, [pc, #136]	; (9be8 <prvAddNewTaskToReadyList+0x1b4>)
    9b5e:	4798      	blx	r3
    9b60:	0003      	movs	r3, r0
    9b62:	b2db      	uxtb	r3, r3
    9b64:	0018      	movs	r0, r3
    9b66:	4b28      	ldr	r3, [pc, #160]	; (9c08 <prvAddNewTaskToReadyList+0x1d4>)
    9b68:	4798      	blx	r3
    9b6a:	687b      	ldr	r3, [r7, #4]
    9b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9b6e:	4b27      	ldr	r3, [pc, #156]	; (9c0c <prvAddNewTaskToReadyList+0x1d8>)
    9b70:	681b      	ldr	r3, [r3, #0]
    9b72:	429a      	cmp	r2, r3
    9b74:	d903      	bls.n	9b7e <prvAddNewTaskToReadyList+0x14a>
    9b76:	687b      	ldr	r3, [r7, #4]
    9b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9b7a:	4b24      	ldr	r3, [pc, #144]	; (9c0c <prvAddNewTaskToReadyList+0x1d8>)
    9b7c:	601a      	str	r2, [r3, #0]
    9b7e:	687b      	ldr	r3, [r7, #4]
    9b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9b82:	0013      	movs	r3, r2
    9b84:	009b      	lsls	r3, r3, #2
    9b86:	189b      	adds	r3, r3, r2
    9b88:	009b      	lsls	r3, r3, #2
    9b8a:	4a21      	ldr	r2, [pc, #132]	; (9c10 <prvAddNewTaskToReadyList+0x1dc>)
    9b8c:	189a      	adds	r2, r3, r2
    9b8e:	687b      	ldr	r3, [r7, #4]
    9b90:	3304      	adds	r3, #4
    9b92:	0019      	movs	r1, r3
    9b94:	0010      	movs	r0, r2
    9b96:	4b1f      	ldr	r3, [pc, #124]	; (9c14 <prvAddNewTaskToReadyList+0x1e0>)
    9b98:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    9b9a:	4b1f      	ldr	r3, [pc, #124]	; (9c18 <prvAddNewTaskToReadyList+0x1e4>)
    9b9c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    9b9e:	4b0c      	ldr	r3, [pc, #48]	; (9bd0 <prvAddNewTaskToReadyList+0x19c>)
    9ba0:	681b      	ldr	r3, [r3, #0]
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	d008      	beq.n	9bb8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    9ba6:	4b08      	ldr	r3, [pc, #32]	; (9bc8 <prvAddNewTaskToReadyList+0x194>)
    9ba8:	681b      	ldr	r3, [r3, #0]
    9baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9bac:	687b      	ldr	r3, [r7, #4]
    9bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9bb0:	429a      	cmp	r2, r3
    9bb2:	d201      	bcs.n	9bb8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
    9bb4:	4b19      	ldr	r3, [pc, #100]	; (9c1c <prvAddNewTaskToReadyList+0x1e8>)
    9bb6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    9bb8:	46c0      	nop			; (mov r8, r8)
    9bba:	46bd      	mov	sp, r7
    9bbc:	b002      	add	sp, #8
    9bbe:	bd80      	pop	{r7, pc}
    9bc0:	00007c29 	.word	0x00007c29
    9bc4:	20004244 	.word	0x20004244
    9bc8:	2000416c 	.word	0x2000416c
    9bcc:	0000a755 	.word	0x0000a755
    9bd0:	20004250 	.word	0x20004250
    9bd4:	20004260 	.word	0x20004260
    9bd8:	0000719d 	.word	0x0000719d
    9bdc:	00005c41 	.word	0x00005c41
    9be0:	20000112 	.word	0x20000112
    9be4:	00005c7d 	.word	0x00005c7d
    9be8:	00005bfd 	.word	0x00005bfd
    9bec:	000073cd 	.word	0x000073cd
    9bf0:	00006b31 	.word	0x00006b31
    9bf4:	00005eb9 	.word	0x00005eb9
    9bf8:	00005c1d 	.word	0x00005c1d
    9bfc:	20000110 	.word	0x20000110
    9c00:	00006615 	.word	0x00006615
    9c04:	00005d7d 	.word	0x00005d7d
    9c08:	000063cd 	.word	0x000063cd
    9c0c:	2000424c 	.word	0x2000424c
    9c10:	20004170 	.word	0x20004170
    9c14:	000079e7 	.word	0x000079e7
    9c18:	00007c4d 	.word	0x00007c4d
    9c1c:	00007c11 	.word	0x00007c11

00009c20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    9c20:	b580      	push	{r7, lr}
    9c22:	b084      	sub	sp, #16
    9c24:	af00      	add	r7, sp, #0
    9c26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    9c28:	2300      	movs	r3, #0
    9c2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    9c2c:	687b      	ldr	r3, [r7, #4]
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d045      	beq.n	9cbe <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    9c32:	4b27      	ldr	r3, [pc, #156]	; (9cd0 <vTaskDelay+0xb0>)
    9c34:	681b      	ldr	r3, [r3, #0]
    9c36:	2b00      	cmp	r3, #0
    9c38:	d001      	beq.n	9c3e <vTaskDelay+0x1e>
    9c3a:	b672      	cpsid	i
    9c3c:	e7fe      	b.n	9c3c <vTaskDelay+0x1c>
			vTaskSuspendAll();
    9c3e:	4b25      	ldr	r3, [pc, #148]	; (9cd4 <vTaskDelay+0xb4>)
    9c40:	4798      	blx	r3
			{
				traceTASK_DELAY();
    9c42:	4b25      	ldr	r3, [pc, #148]	; (9cd8 <vTaskDelay+0xb8>)
    9c44:	681b      	ldr	r3, [r3, #0]
    9c46:	0018      	movs	r0, r3
    9c48:	4b24      	ldr	r3, [pc, #144]	; (9cdc <vTaskDelay+0xbc>)
    9c4a:	4798      	blx	r3
    9c4c:	0003      	movs	r3, r0
    9c4e:	001a      	movs	r2, r3
    9c50:	4b23      	ldr	r3, [pc, #140]	; (9ce0 <vTaskDelay+0xc0>)
    9c52:	881b      	ldrh	r3, [r3, #0]
    9c54:	4013      	ands	r3, r2
    9c56:	b29b      	uxth	r3, r3
    9c58:	2b00      	cmp	r3, #0
    9c5a:	d00e      	beq.n	9c7a <vTaskDelay+0x5a>
    9c5c:	687b      	ldr	r3, [r7, #4]
    9c5e:	0019      	movs	r1, r3
    9c60:	2089      	movs	r0, #137	; 0x89
    9c62:	4b20      	ldr	r3, [pc, #128]	; (9ce4 <vTaskDelay+0xc4>)
    9c64:	4798      	blx	r3
    9c66:	4b1c      	ldr	r3, [pc, #112]	; (9cd8 <vTaskDelay+0xb8>)
    9c68:	681b      	ldr	r3, [r3, #0]
    9c6a:	0018      	movs	r0, r3
    9c6c:	4b1e      	ldr	r3, [pc, #120]	; (9ce8 <vTaskDelay+0xc8>)
    9c6e:	4798      	blx	r3
    9c70:	0003      	movs	r3, r0
    9c72:	b2db      	uxtb	r3, r3
    9c74:	0018      	movs	r0, r3
    9c76:	4b1d      	ldr	r3, [pc, #116]	; (9cec <vTaskDelay+0xcc>)
    9c78:	4798      	blx	r3
    9c7a:	4b1d      	ldr	r3, [pc, #116]	; (9cf0 <vTaskDelay+0xd0>)
    9c7c:	4798      	blx	r3
    9c7e:	0003      	movs	r3, r0
    9c80:	0018      	movs	r0, r3
    9c82:	4b16      	ldr	r3, [pc, #88]	; (9cdc <vTaskDelay+0xbc>)
    9c84:	4798      	blx	r3
    9c86:	0003      	movs	r3, r0
    9c88:	001a      	movs	r2, r3
    9c8a:	4b15      	ldr	r3, [pc, #84]	; (9ce0 <vTaskDelay+0xc0>)
    9c8c:	881b      	ldrh	r3, [r3, #0]
    9c8e:	4013      	ands	r3, r2
    9c90:	b29b      	uxth	r3, r3
    9c92:	2b00      	cmp	r3, #0
    9c94:	d00a      	beq.n	9cac <vTaskDelay+0x8c>
    9c96:	4b16      	ldr	r3, [pc, #88]	; (9cf0 <vTaskDelay+0xd0>)
    9c98:	4798      	blx	r3
    9c9a:	0003      	movs	r3, r0
    9c9c:	0018      	movs	r0, r3
    9c9e:	4b12      	ldr	r3, [pc, #72]	; (9ce8 <vTaskDelay+0xc8>)
    9ca0:	4798      	blx	r3
    9ca2:	0003      	movs	r3, r0
    9ca4:	b2db      	uxtb	r3, r3
    9ca6:	0018      	movs	r0, r3
    9ca8:	4b10      	ldr	r3, [pc, #64]	; (9cec <vTaskDelay+0xcc>)
    9caa:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    9cac:	687b      	ldr	r3, [r7, #4]
    9cae:	2100      	movs	r1, #0
    9cb0:	0018      	movs	r0, r3
    9cb2:	4b10      	ldr	r3, [pc, #64]	; (9cf4 <vTaskDelay+0xd4>)
    9cb4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    9cb6:	4b10      	ldr	r3, [pc, #64]	; (9cf8 <vTaskDelay+0xd8>)
    9cb8:	4798      	blx	r3
    9cba:	0003      	movs	r3, r0
    9cbc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    9cbe:	68fb      	ldr	r3, [r7, #12]
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d101      	bne.n	9cc8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
    9cc4:	4b0d      	ldr	r3, [pc, #52]	; (9cfc <vTaskDelay+0xdc>)
    9cc6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    9cc8:	46c0      	nop			; (mov r8, r8)
    9cca:	46bd      	mov	sp, r7
    9ccc:	b004      	add	sp, #16
    9cce:	bd80      	pop	{r7, pc}
    9cd0:	2000426c 	.word	0x2000426c
    9cd4:	00009ee1 	.word	0x00009ee1
    9cd8:	2000416c 	.word	0x2000416c
    9cdc:	00005c1d 	.word	0x00005c1d
    9ce0:	20000110 	.word	0x20000110
    9ce4:	0000691d 	.word	0x0000691d
    9ce8:	00005bfd 	.word	0x00005bfd
    9cec:	00006dad 	.word	0x00006dad
    9cf0:	00005eb9 	.word	0x00005eb9
    9cf4:	0000ae39 	.word	0x0000ae39
    9cf8:	00009ef9 	.word	0x00009ef9
    9cfc:	00007c11 	.word	0x00007c11

00009d00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    9d00:	b580      	push	{r7, lr}
    9d02:	b084      	sub	sp, #16
    9d04:	af00      	add	r7, sp, #0
    9d06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    9d08:	4b42      	ldr	r3, [pc, #264]	; (9e14 <vTaskSuspend+0x114>)
    9d0a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    9d0c:	687b      	ldr	r3, [r7, #4]
    9d0e:	2b00      	cmp	r3, #0
    9d10:	d102      	bne.n	9d18 <vTaskSuspend+0x18>
    9d12:	4b41      	ldr	r3, [pc, #260]	; (9e18 <vTaskSuspend+0x118>)
    9d14:	681b      	ldr	r3, [r3, #0]
    9d16:	e000      	b.n	9d1a <vTaskSuspend+0x1a>
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
    9d1c:	4b3f      	ldr	r3, [pc, #252]	; (9e1c <vTaskSuspend+0x11c>)
    9d1e:	4798      	blx	r3
    9d20:	0003      	movs	r3, r0
    9d22:	0018      	movs	r0, r3
    9d24:	4b3e      	ldr	r3, [pc, #248]	; (9e20 <vTaskSuspend+0x120>)
    9d26:	4798      	blx	r3
    9d28:	0003      	movs	r3, r0
    9d2a:	001a      	movs	r2, r3
    9d2c:	4b3d      	ldr	r3, [pc, #244]	; (9e24 <vTaskSuspend+0x124>)
    9d2e:	881b      	ldrh	r3, [r3, #0]
    9d30:	4013      	ands	r3, r2
    9d32:	b29b      	uxth	r3, r3
    9d34:	2b00      	cmp	r3, #0
    9d36:	d016      	beq.n	9d66 <vTaskSuspend+0x66>
    9d38:	68fb      	ldr	r3, [r7, #12]
    9d3a:	0018      	movs	r0, r3
    9d3c:	4b38      	ldr	r3, [pc, #224]	; (9e20 <vTaskSuspend+0x120>)
    9d3e:	4798      	blx	r3
    9d40:	0003      	movs	r3, r0
    9d42:	001a      	movs	r2, r3
    9d44:	4b37      	ldr	r3, [pc, #220]	; (9e24 <vTaskSuspend+0x124>)
    9d46:	881b      	ldrh	r3, [r3, #0]
    9d48:	4013      	ands	r3, r2
    9d4a:	b29b      	uxth	r3, r3
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d00a      	beq.n	9d66 <vTaskSuspend+0x66>
    9d50:	68fb      	ldr	r3, [r7, #12]
    9d52:	0018      	movs	r0, r3
    9d54:	4b34      	ldr	r3, [pc, #208]	; (9e28 <vTaskSuspend+0x128>)
    9d56:	4798      	blx	r3
    9d58:	0003      	movs	r3, r0
    9d5a:	b2db      	uxtb	r3, r3
    9d5c:	001a      	movs	r2, r3
    9d5e:	2103      	movs	r1, #3
    9d60:	208a      	movs	r0, #138	; 0x8a
    9d62:	4b32      	ldr	r3, [pc, #200]	; (9e2c <vTaskSuspend+0x12c>)
    9d64:	4798      	blx	r3
    9d66:	68fb      	ldr	r3, [r7, #12]
    9d68:	0018      	movs	r0, r3
    9d6a:	4b2f      	ldr	r3, [pc, #188]	; (9e28 <vTaskSuspend+0x128>)
    9d6c:	4798      	blx	r3
    9d6e:	0003      	movs	r3, r0
    9d70:	b2db      	uxtb	r3, r3
    9d72:	0018      	movs	r0, r3
    9d74:	4b2e      	ldr	r3, [pc, #184]	; (9e30 <vTaskSuspend+0x130>)
    9d76:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9d78:	68fb      	ldr	r3, [r7, #12]
    9d7a:	3304      	adds	r3, #4
    9d7c:	0018      	movs	r0, r3
    9d7e:	4b2d      	ldr	r3, [pc, #180]	; (9e34 <vTaskSuspend+0x134>)
    9d80:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    9d82:	68fb      	ldr	r3, [r7, #12]
    9d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9d86:	2b00      	cmp	r3, #0
    9d88:	d004      	beq.n	9d94 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    9d8a:	68fb      	ldr	r3, [r7, #12]
    9d8c:	3318      	adds	r3, #24
    9d8e:	0018      	movs	r0, r3
    9d90:	4b28      	ldr	r3, [pc, #160]	; (9e34 <vTaskSuspend+0x134>)
    9d92:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    9d94:	68fb      	ldr	r3, [r7, #12]
    9d96:	1d1a      	adds	r2, r3, #4
    9d98:	4b27      	ldr	r3, [pc, #156]	; (9e38 <vTaskSuspend+0x138>)
    9d9a:	0011      	movs	r1, r2
    9d9c:	0018      	movs	r0, r3
    9d9e:	4b27      	ldr	r3, [pc, #156]	; (9e3c <vTaskSuspend+0x13c>)
    9da0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    9da2:	68fb      	ldr	r3, [r7, #12]
    9da4:	2250      	movs	r2, #80	; 0x50
    9da6:	5c9b      	ldrb	r3, [r3, r2]
    9da8:	b2db      	uxtb	r3, r3
    9daa:	2b01      	cmp	r3, #1
    9dac:	d103      	bne.n	9db6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    9dae:	68fb      	ldr	r3, [r7, #12]
    9db0:	2250      	movs	r2, #80	; 0x50
    9db2:	2100      	movs	r1, #0
    9db4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    9db6:	4b22      	ldr	r3, [pc, #136]	; (9e40 <vTaskSuspend+0x140>)
    9db8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    9dba:	4b22      	ldr	r3, [pc, #136]	; (9e44 <vTaskSuspend+0x144>)
    9dbc:	681b      	ldr	r3, [r3, #0]
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d005      	beq.n	9dce <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    9dc2:	4b14      	ldr	r3, [pc, #80]	; (9e14 <vTaskSuspend+0x114>)
    9dc4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    9dc6:	4b20      	ldr	r3, [pc, #128]	; (9e48 <vTaskSuspend+0x148>)
    9dc8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    9dca:	4b1d      	ldr	r3, [pc, #116]	; (9e40 <vTaskSuspend+0x140>)
    9dcc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    9dce:	4b12      	ldr	r3, [pc, #72]	; (9e18 <vTaskSuspend+0x118>)
    9dd0:	681b      	ldr	r3, [r3, #0]
    9dd2:	68fa      	ldr	r2, [r7, #12]
    9dd4:	429a      	cmp	r2, r3
    9dd6:	d118      	bne.n	9e0a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
    9dd8:	4b1a      	ldr	r3, [pc, #104]	; (9e44 <vTaskSuspend+0x144>)
    9dda:	681b      	ldr	r3, [r3, #0]
    9ddc:	2b00      	cmp	r3, #0
    9dde:	d008      	beq.n	9df2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    9de0:	4b1a      	ldr	r3, [pc, #104]	; (9e4c <vTaskSuspend+0x14c>)
    9de2:	681b      	ldr	r3, [r3, #0]
    9de4:	2b00      	cmp	r3, #0
    9de6:	d001      	beq.n	9dec <vTaskSuspend+0xec>
    9de8:	b672      	cpsid	i
    9dea:	e7fe      	b.n	9dea <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
    9dec:	4b18      	ldr	r3, [pc, #96]	; (9e50 <vTaskSuspend+0x150>)
    9dee:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    9df0:	e00b      	b.n	9e0a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    9df2:	4b11      	ldr	r3, [pc, #68]	; (9e38 <vTaskSuspend+0x138>)
    9df4:	681a      	ldr	r2, [r3, #0]
    9df6:	4b17      	ldr	r3, [pc, #92]	; (9e54 <vTaskSuspend+0x154>)
    9df8:	681b      	ldr	r3, [r3, #0]
    9dfa:	429a      	cmp	r2, r3
    9dfc:	d103      	bne.n	9e06 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
    9dfe:	4b06      	ldr	r3, [pc, #24]	; (9e18 <vTaskSuspend+0x118>)
    9e00:	2200      	movs	r2, #0
    9e02:	601a      	str	r2, [r3, #0]
	}
    9e04:	e001      	b.n	9e0a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
    9e06:	4b14      	ldr	r3, [pc, #80]	; (9e58 <vTaskSuspend+0x158>)
    9e08:	4798      	blx	r3
	}
    9e0a:	46c0      	nop			; (mov r8, r8)
    9e0c:	46bd      	mov	sp, r7
    9e0e:	b004      	add	sp, #16
    9e10:	bd80      	pop	{r7, pc}
    9e12:	46c0      	nop			; (mov r8, r8)
    9e14:	00007c29 	.word	0x00007c29
    9e18:	2000416c 	.word	0x2000416c
    9e1c:	00005eb9 	.word	0x00005eb9
    9e20:	00005c1d 	.word	0x00005c1d
    9e24:	20000110 	.word	0x20000110
    9e28:	00005bfd 	.word	0x00005bfd
    9e2c:	00006615 	.word	0x00006615
    9e30:	00006dad 	.word	0x00006dad
    9e34:	00007a97 	.word	0x00007a97
    9e38:	20004230 	.word	0x20004230
    9e3c:	000079e7 	.word	0x000079e7
    9e40:	00007c4d 	.word	0x00007c4d
    9e44:	20004250 	.word	0x20004250
    9e48:	0000a8e5 	.word	0x0000a8e5
    9e4c:	2000426c 	.word	0x2000426c
    9e50:	00007c11 	.word	0x00007c11
    9e54:	20004244 	.word	0x20004244
    9e58:	0000a275 	.word	0x0000a275

00009e5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    9e5c:	b590      	push	{r4, r7, lr}
    9e5e:	b085      	sub	sp, #20
    9e60:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    9e62:	4916      	ldr	r1, [pc, #88]	; (9ebc <vTaskStartScheduler+0x60>)
    9e64:	4816      	ldr	r0, [pc, #88]	; (9ec0 <vTaskStartScheduler+0x64>)
    9e66:	4b17      	ldr	r3, [pc, #92]	; (9ec4 <vTaskStartScheduler+0x68>)
    9e68:	9301      	str	r3, [sp, #4]
    9e6a:	2300      	movs	r3, #0
    9e6c:	9300      	str	r3, [sp, #0]
    9e6e:	2300      	movs	r3, #0
    9e70:	2296      	movs	r2, #150	; 0x96
    9e72:	4c15      	ldr	r4, [pc, #84]	; (9ec8 <vTaskStartScheduler+0x6c>)
    9e74:	47a0      	blx	r4
    9e76:	0003      	movs	r3, r0
    9e78:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    9e7a:	687b      	ldr	r3, [r7, #4]
    9e7c:	2b01      	cmp	r3, #1
    9e7e:	d103      	bne.n	9e88 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    9e80:	4b12      	ldr	r3, [pc, #72]	; (9ecc <vTaskStartScheduler+0x70>)
    9e82:	4798      	blx	r3
    9e84:	0003      	movs	r3, r0
    9e86:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    9e88:	687b      	ldr	r3, [r7, #4]
    9e8a:	2b01      	cmp	r3, #1
    9e8c:	d10d      	bne.n	9eaa <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    9e8e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    9e90:	4b0f      	ldr	r3, [pc, #60]	; (9ed0 <vTaskStartScheduler+0x74>)
    9e92:	2201      	movs	r2, #1
    9e94:	4252      	negs	r2, r2
    9e96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    9e98:	4b0e      	ldr	r3, [pc, #56]	; (9ed4 <vTaskStartScheduler+0x78>)
    9e9a:	2201      	movs	r2, #1
    9e9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    9e9e:	4b0e      	ldr	r3, [pc, #56]	; (9ed8 <vTaskStartScheduler+0x7c>)
    9ea0:	2200      	movs	r2, #0
    9ea2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    9ea4:	4b0d      	ldr	r3, [pc, #52]	; (9edc <vTaskStartScheduler+0x80>)
    9ea6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    9ea8:	e004      	b.n	9eb4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    9eaa:	687b      	ldr	r3, [r7, #4]
    9eac:	3301      	adds	r3, #1
    9eae:	d101      	bne.n	9eb4 <vTaskStartScheduler+0x58>
    9eb0:	b672      	cpsid	i
    9eb2:	e7fe      	b.n	9eb2 <vTaskStartScheduler+0x56>
}
    9eb4:	46c0      	nop			; (mov r8, r8)
    9eb6:	46bd      	mov	sp, r7
    9eb8:	b003      	add	sp, #12
    9eba:	bd90      	pop	{r4, r7, pc}
    9ebc:	0002700c 	.word	0x0002700c
    9ec0:	0000a72d 	.word	0x0000a72d
    9ec4:	20004268 	.word	0x20004268
    9ec8:	00009885 	.word	0x00009885
    9ecc:	0000aeed 	.word	0x0000aeed
    9ed0:	20004264 	.word	0x20004264
    9ed4:	20004250 	.word	0x20004250
    9ed8:	20004248 	.word	0x20004248
    9edc:	00007bb9 	.word	0x00007bb9

00009ee0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    9ee0:	b580      	push	{r7, lr}
    9ee2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    9ee4:	4b03      	ldr	r3, [pc, #12]	; (9ef4 <vTaskSuspendAll+0x14>)
    9ee6:	681b      	ldr	r3, [r3, #0]
    9ee8:	1c5a      	adds	r2, r3, #1
    9eea:	4b02      	ldr	r3, [pc, #8]	; (9ef4 <vTaskSuspendAll+0x14>)
    9eec:	601a      	str	r2, [r3, #0]
}
    9eee:	46c0      	nop			; (mov r8, r8)
    9ef0:	46bd      	mov	sp, r7
    9ef2:	bd80      	pop	{r7, pc}
    9ef4:	2000426c 	.word	0x2000426c

00009ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    9ef8:	b580      	push	{r7, lr}
    9efa:	b084      	sub	sp, #16
    9efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    9efe:	2300      	movs	r3, #0
    9f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    9f02:	2300      	movs	r3, #0
    9f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    9f06:	4b45      	ldr	r3, [pc, #276]	; (a01c <xTaskResumeAll+0x124>)
    9f08:	681b      	ldr	r3, [r3, #0]
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d101      	bne.n	9f12 <xTaskResumeAll+0x1a>
    9f0e:	b672      	cpsid	i
    9f10:	e7fe      	b.n	9f10 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    9f12:	4b43      	ldr	r3, [pc, #268]	; (a020 <xTaskResumeAll+0x128>)
    9f14:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    9f16:	4b41      	ldr	r3, [pc, #260]	; (a01c <xTaskResumeAll+0x124>)
    9f18:	681b      	ldr	r3, [r3, #0]
    9f1a:	1e5a      	subs	r2, r3, #1
    9f1c:	4b3f      	ldr	r3, [pc, #252]	; (a01c <xTaskResumeAll+0x124>)
    9f1e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9f20:	4b3e      	ldr	r3, [pc, #248]	; (a01c <xTaskResumeAll+0x124>)
    9f22:	681b      	ldr	r3, [r3, #0]
    9f24:	2b00      	cmp	r3, #0
    9f26:	d000      	beq.n	9f2a <xTaskResumeAll+0x32>
    9f28:	e071      	b.n	a00e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    9f2a:	4b3e      	ldr	r3, [pc, #248]	; (a024 <xTaskResumeAll+0x12c>)
    9f2c:	681b      	ldr	r3, [r3, #0]
    9f2e:	2b00      	cmp	r3, #0
    9f30:	d100      	bne.n	9f34 <xTaskResumeAll+0x3c>
    9f32:	e06c      	b.n	a00e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    9f34:	e044      	b.n	9fc0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    9f36:	4b3c      	ldr	r3, [pc, #240]	; (a028 <xTaskResumeAll+0x130>)
    9f38:	68db      	ldr	r3, [r3, #12]
    9f3a:	68db      	ldr	r3, [r3, #12]
    9f3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    9f3e:	68fb      	ldr	r3, [r7, #12]
    9f40:	3318      	adds	r3, #24
    9f42:	0018      	movs	r0, r3
    9f44:	4b39      	ldr	r3, [pc, #228]	; (a02c <xTaskResumeAll+0x134>)
    9f46:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9f48:	68fb      	ldr	r3, [r7, #12]
    9f4a:	3304      	adds	r3, #4
    9f4c:	0018      	movs	r0, r3
    9f4e:	4b37      	ldr	r3, [pc, #220]	; (a02c <xTaskResumeAll+0x134>)
    9f50:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    9f52:	68fb      	ldr	r3, [r7, #12]
    9f54:	0018      	movs	r0, r3
    9f56:	4b36      	ldr	r3, [pc, #216]	; (a030 <xTaskResumeAll+0x138>)
    9f58:	4798      	blx	r3
    9f5a:	0003      	movs	r3, r0
    9f5c:	001a      	movs	r2, r3
    9f5e:	4b35      	ldr	r3, [pc, #212]	; (a034 <xTaskResumeAll+0x13c>)
    9f60:	881b      	ldrh	r3, [r3, #0]
    9f62:	4013      	ands	r3, r2
    9f64:	b29b      	uxth	r3, r3
    9f66:	2b00      	cmp	r3, #0
    9f68:	d008      	beq.n	9f7c <xTaskResumeAll+0x84>
    9f6a:	68fb      	ldr	r3, [r7, #12]
    9f6c:	0018      	movs	r0, r3
    9f6e:	4b32      	ldr	r3, [pc, #200]	; (a038 <xTaskResumeAll+0x140>)
    9f70:	4798      	blx	r3
    9f72:	0003      	movs	r3, r0
    9f74:	b2db      	uxtb	r3, r3
    9f76:	0018      	movs	r0, r3
    9f78:	4b30      	ldr	r3, [pc, #192]	; (a03c <xTaskResumeAll+0x144>)
    9f7a:	4798      	blx	r3
    9f7c:	68fb      	ldr	r3, [r7, #12]
    9f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f80:	4b2f      	ldr	r3, [pc, #188]	; (a040 <xTaskResumeAll+0x148>)
    9f82:	681b      	ldr	r3, [r3, #0]
    9f84:	429a      	cmp	r2, r3
    9f86:	d903      	bls.n	9f90 <xTaskResumeAll+0x98>
    9f88:	68fb      	ldr	r3, [r7, #12]
    9f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f8c:	4b2c      	ldr	r3, [pc, #176]	; (a040 <xTaskResumeAll+0x148>)
    9f8e:	601a      	str	r2, [r3, #0]
    9f90:	68fb      	ldr	r3, [r7, #12]
    9f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f94:	0013      	movs	r3, r2
    9f96:	009b      	lsls	r3, r3, #2
    9f98:	189b      	adds	r3, r3, r2
    9f9a:	009b      	lsls	r3, r3, #2
    9f9c:	4a29      	ldr	r2, [pc, #164]	; (a044 <xTaskResumeAll+0x14c>)
    9f9e:	189a      	adds	r2, r3, r2
    9fa0:	68fb      	ldr	r3, [r7, #12]
    9fa2:	3304      	adds	r3, #4
    9fa4:	0019      	movs	r1, r3
    9fa6:	0010      	movs	r0, r2
    9fa8:	4b27      	ldr	r3, [pc, #156]	; (a048 <xTaskResumeAll+0x150>)
    9faa:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    9fac:	68fb      	ldr	r3, [r7, #12]
    9fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9fb0:	4b26      	ldr	r3, [pc, #152]	; (a04c <xTaskResumeAll+0x154>)
    9fb2:	681b      	ldr	r3, [r3, #0]
    9fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9fb6:	429a      	cmp	r2, r3
    9fb8:	d302      	bcc.n	9fc0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
    9fba:	4b25      	ldr	r3, [pc, #148]	; (a050 <xTaskResumeAll+0x158>)
    9fbc:	2201      	movs	r2, #1
    9fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    9fc0:	4b19      	ldr	r3, [pc, #100]	; (a028 <xTaskResumeAll+0x130>)
    9fc2:	681b      	ldr	r3, [r3, #0]
    9fc4:	2b00      	cmp	r3, #0
    9fc6:	d1b6      	bne.n	9f36 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    9fc8:	68fb      	ldr	r3, [r7, #12]
    9fca:	2b00      	cmp	r3, #0
    9fcc:	d001      	beq.n	9fd2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    9fce:	4b21      	ldr	r3, [pc, #132]	; (a054 <xTaskResumeAll+0x15c>)
    9fd0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    9fd2:	4b21      	ldr	r3, [pc, #132]	; (a058 <xTaskResumeAll+0x160>)
    9fd4:	681b      	ldr	r3, [r3, #0]
    9fd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    9fd8:	687b      	ldr	r3, [r7, #4]
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d00f      	beq.n	9ffe <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    9fde:	4b1f      	ldr	r3, [pc, #124]	; (a05c <xTaskResumeAll+0x164>)
    9fe0:	4798      	blx	r3
    9fe2:	1e03      	subs	r3, r0, #0
    9fe4:	d002      	beq.n	9fec <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
    9fe6:	4b1a      	ldr	r3, [pc, #104]	; (a050 <xTaskResumeAll+0x158>)
    9fe8:	2201      	movs	r2, #1
    9fea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    9fec:	687b      	ldr	r3, [r7, #4]
    9fee:	3b01      	subs	r3, #1
    9ff0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    9ff2:	687b      	ldr	r3, [r7, #4]
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	d1f2      	bne.n	9fde <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
    9ff8:	4b17      	ldr	r3, [pc, #92]	; (a058 <xTaskResumeAll+0x160>)
    9ffa:	2200      	movs	r2, #0
    9ffc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    9ffe:	4b14      	ldr	r3, [pc, #80]	; (a050 <xTaskResumeAll+0x158>)
    a000:	681b      	ldr	r3, [r3, #0]
    a002:	2b00      	cmp	r3, #0
    a004:	d003      	beq.n	a00e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    a006:	2301      	movs	r3, #1
    a008:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    a00a:	4b15      	ldr	r3, [pc, #84]	; (a060 <xTaskResumeAll+0x168>)
    a00c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    a00e:	4b15      	ldr	r3, [pc, #84]	; (a064 <xTaskResumeAll+0x16c>)
    a010:	4798      	blx	r3

	return xAlreadyYielded;
    a012:	68bb      	ldr	r3, [r7, #8]
}
    a014:	0018      	movs	r0, r3
    a016:	46bd      	mov	sp, r7
    a018:	b004      	add	sp, #16
    a01a:	bd80      	pop	{r7, pc}
    a01c:	2000426c 	.word	0x2000426c
    a020:	00007c29 	.word	0x00007c29
    a024:	20004244 	.word	0x20004244
    a028:	20004204 	.word	0x20004204
    a02c:	00007a97 	.word	0x00007a97
    a030:	00005c1d 	.word	0x00005c1d
    a034:	20000110 	.word	0x20000110
    a038:	00005bfd 	.word	0x00005bfd
    a03c:	000063cd 	.word	0x000063cd
    a040:	2000424c 	.word	0x2000424c
    a044:	20004170 	.word	0x20004170
    a048:	000079e7 	.word	0x000079e7
    a04c:	2000416c 	.word	0x2000416c
    a050:	20004258 	.word	0x20004258
    a054:	0000a8e5 	.word	0x0000a8e5
    a058:	20004254 	.word	0x20004254
    a05c:	0000a085 	.word	0x0000a085
    a060:	00007c11 	.word	0x00007c11
    a064:	00007c4d 	.word	0x00007c4d

0000a068 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    a068:	b580      	push	{r7, lr}
    a06a:	b082      	sub	sp, #8
    a06c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    a06e:	4b04      	ldr	r3, [pc, #16]	; (a080 <xTaskGetTickCount+0x18>)
    a070:	681b      	ldr	r3, [r3, #0]
    a072:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    a074:	687b      	ldr	r3, [r7, #4]
}
    a076:	0018      	movs	r0, r3
    a078:	46bd      	mov	sp, r7
    a07a:	b002      	add	sp, #8
    a07c:	bd80      	pop	{r7, pc}
    a07e:	46c0      	nop			; (mov r8, r8)
    a080:	20004248 	.word	0x20004248

0000a084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    a084:	b580      	push	{r7, lr}
    a086:	b086      	sub	sp, #24
    a088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    a08a:	2300      	movs	r3, #0
    a08c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    a08e:	4b64      	ldr	r3, [pc, #400]	; (a220 <xTaskIncrementTick+0x19c>)
    a090:	681b      	ldr	r3, [r3, #0]
    a092:	2b01      	cmp	r3, #1
    a094:	d003      	beq.n	a09e <xTaskIncrementTick+0x1a>
    a096:	4b63      	ldr	r3, [pc, #396]	; (a224 <xTaskIncrementTick+0x1a0>)
    a098:	681b      	ldr	r3, [r3, #0]
    a09a:	2b00      	cmp	r3, #0
    a09c:	d107      	bne.n	a0ae <xTaskIncrementTick+0x2a>
    a09e:	4b62      	ldr	r3, [pc, #392]	; (a228 <xTaskIncrementTick+0x1a4>)
    a0a0:	681b      	ldr	r3, [r3, #0]
    a0a2:	1c5a      	adds	r2, r3, #1
    a0a4:	4b60      	ldr	r3, [pc, #384]	; (a228 <xTaskIncrementTick+0x1a4>)
    a0a6:	601a      	str	r2, [r3, #0]
    a0a8:	2000      	movs	r0, #0
    a0aa:	4b60      	ldr	r3, [pc, #384]	; (a22c <xTaskIncrementTick+0x1a8>)
    a0ac:	4798      	blx	r3
    a0ae:	4b5c      	ldr	r3, [pc, #368]	; (a220 <xTaskIncrementTick+0x19c>)
    a0b0:	681b      	ldr	r3, [r3, #0]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d106      	bne.n	a0c4 <xTaskIncrementTick+0x40>
    a0b6:	4b5e      	ldr	r3, [pc, #376]	; (a230 <xTaskIncrementTick+0x1ac>)
    a0b8:	681b      	ldr	r3, [r3, #0]
    a0ba:	3301      	adds	r3, #1
    a0bc:	0019      	movs	r1, r3
    a0be:	2003      	movs	r0, #3
    a0c0:	4b5c      	ldr	r3, [pc, #368]	; (a234 <xTaskIncrementTick+0x1b0>)
    a0c2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    a0c4:	4b56      	ldr	r3, [pc, #344]	; (a220 <xTaskIncrementTick+0x19c>)
    a0c6:	681b      	ldr	r3, [r3, #0]
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	d000      	beq.n	a0ce <xTaskIncrementTick+0x4a>
    a0cc:	e098      	b.n	a200 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    a0ce:	4b58      	ldr	r3, [pc, #352]	; (a230 <xTaskIncrementTick+0x1ac>)
    a0d0:	681b      	ldr	r3, [r3, #0]
    a0d2:	3301      	adds	r3, #1
    a0d4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    a0d6:	4b56      	ldr	r3, [pc, #344]	; (a230 <xTaskIncrementTick+0x1ac>)
    a0d8:	693a      	ldr	r2, [r7, #16]
    a0da:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    a0dc:	693b      	ldr	r3, [r7, #16]
    a0de:	2b00      	cmp	r3, #0
    a0e0:	d117      	bne.n	a112 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
    a0e2:	4b55      	ldr	r3, [pc, #340]	; (a238 <xTaskIncrementTick+0x1b4>)
    a0e4:	681b      	ldr	r3, [r3, #0]
    a0e6:	681b      	ldr	r3, [r3, #0]
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	d001      	beq.n	a0f0 <xTaskIncrementTick+0x6c>
    a0ec:	b672      	cpsid	i
    a0ee:	e7fe      	b.n	a0ee <xTaskIncrementTick+0x6a>
    a0f0:	4b51      	ldr	r3, [pc, #324]	; (a238 <xTaskIncrementTick+0x1b4>)
    a0f2:	681b      	ldr	r3, [r3, #0]
    a0f4:	60fb      	str	r3, [r7, #12]
    a0f6:	4b51      	ldr	r3, [pc, #324]	; (a23c <xTaskIncrementTick+0x1b8>)
    a0f8:	681a      	ldr	r2, [r3, #0]
    a0fa:	4b4f      	ldr	r3, [pc, #316]	; (a238 <xTaskIncrementTick+0x1b4>)
    a0fc:	601a      	str	r2, [r3, #0]
    a0fe:	4b4f      	ldr	r3, [pc, #316]	; (a23c <xTaskIncrementTick+0x1b8>)
    a100:	68fa      	ldr	r2, [r7, #12]
    a102:	601a      	str	r2, [r3, #0]
    a104:	4b4e      	ldr	r3, [pc, #312]	; (a240 <xTaskIncrementTick+0x1bc>)
    a106:	681b      	ldr	r3, [r3, #0]
    a108:	1c5a      	adds	r2, r3, #1
    a10a:	4b4d      	ldr	r3, [pc, #308]	; (a240 <xTaskIncrementTick+0x1bc>)
    a10c:	601a      	str	r2, [r3, #0]
    a10e:	4b4d      	ldr	r3, [pc, #308]	; (a244 <xTaskIncrementTick+0x1c0>)
    a110:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    a112:	4b4d      	ldr	r3, [pc, #308]	; (a248 <xTaskIncrementTick+0x1c4>)
    a114:	681b      	ldr	r3, [r3, #0]
    a116:	693a      	ldr	r2, [r7, #16]
    a118:	429a      	cmp	r2, r3
    a11a:	d363      	bcc.n	a1e4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    a11c:	4b46      	ldr	r3, [pc, #280]	; (a238 <xTaskIncrementTick+0x1b4>)
    a11e:	681b      	ldr	r3, [r3, #0]
    a120:	681b      	ldr	r3, [r3, #0]
    a122:	2b00      	cmp	r3, #0
    a124:	d101      	bne.n	a12a <xTaskIncrementTick+0xa6>
    a126:	2301      	movs	r3, #1
    a128:	e000      	b.n	a12c <xTaskIncrementTick+0xa8>
    a12a:	2300      	movs	r3, #0
    a12c:	2b00      	cmp	r3, #0
    a12e:	d004      	beq.n	a13a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a130:	4b45      	ldr	r3, [pc, #276]	; (a248 <xTaskIncrementTick+0x1c4>)
    a132:	2201      	movs	r2, #1
    a134:	4252      	negs	r2, r2
    a136:	601a      	str	r2, [r3, #0]
					break;
    a138:	e054      	b.n	a1e4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    a13a:	4b3f      	ldr	r3, [pc, #252]	; (a238 <xTaskIncrementTick+0x1b4>)
    a13c:	681b      	ldr	r3, [r3, #0]
    a13e:	68db      	ldr	r3, [r3, #12]
    a140:	68db      	ldr	r3, [r3, #12]
    a142:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    a144:	68bb      	ldr	r3, [r7, #8]
    a146:	685b      	ldr	r3, [r3, #4]
    a148:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    a14a:	693a      	ldr	r2, [r7, #16]
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	429a      	cmp	r2, r3
    a150:	d203      	bcs.n	a15a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    a152:	4b3d      	ldr	r3, [pc, #244]	; (a248 <xTaskIncrementTick+0x1c4>)
    a154:	687a      	ldr	r2, [r7, #4]
    a156:	601a      	str	r2, [r3, #0]
						break;
    a158:	e044      	b.n	a1e4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    a15a:	68bb      	ldr	r3, [r7, #8]
    a15c:	3304      	adds	r3, #4
    a15e:	0018      	movs	r0, r3
    a160:	4b3a      	ldr	r3, [pc, #232]	; (a24c <xTaskIncrementTick+0x1c8>)
    a162:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    a164:	68bb      	ldr	r3, [r7, #8]
    a166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a168:	2b00      	cmp	r3, #0
    a16a:	d004      	beq.n	a176 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    a16c:	68bb      	ldr	r3, [r7, #8]
    a16e:	3318      	adds	r3, #24
    a170:	0018      	movs	r0, r3
    a172:	4b36      	ldr	r3, [pc, #216]	; (a24c <xTaskIncrementTick+0x1c8>)
    a174:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    a176:	68bb      	ldr	r3, [r7, #8]
    a178:	0018      	movs	r0, r3
    a17a:	4b35      	ldr	r3, [pc, #212]	; (a250 <xTaskIncrementTick+0x1cc>)
    a17c:	4798      	blx	r3
    a17e:	0003      	movs	r3, r0
    a180:	001a      	movs	r2, r3
    a182:	4b34      	ldr	r3, [pc, #208]	; (a254 <xTaskIncrementTick+0x1d0>)
    a184:	881b      	ldrh	r3, [r3, #0]
    a186:	4013      	ands	r3, r2
    a188:	b29b      	uxth	r3, r3
    a18a:	2b00      	cmp	r3, #0
    a18c:	d008      	beq.n	a1a0 <xTaskIncrementTick+0x11c>
    a18e:	68bb      	ldr	r3, [r7, #8]
    a190:	0018      	movs	r0, r3
    a192:	4b31      	ldr	r3, [pc, #196]	; (a258 <xTaskIncrementTick+0x1d4>)
    a194:	4798      	blx	r3
    a196:	0003      	movs	r3, r0
    a198:	b2db      	uxtb	r3, r3
    a19a:	0018      	movs	r0, r3
    a19c:	4b2f      	ldr	r3, [pc, #188]	; (a25c <xTaskIncrementTick+0x1d8>)
    a19e:	4798      	blx	r3
    a1a0:	68bb      	ldr	r3, [r7, #8]
    a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1a4:	4b2e      	ldr	r3, [pc, #184]	; (a260 <xTaskIncrementTick+0x1dc>)
    a1a6:	681b      	ldr	r3, [r3, #0]
    a1a8:	429a      	cmp	r2, r3
    a1aa:	d903      	bls.n	a1b4 <xTaskIncrementTick+0x130>
    a1ac:	68bb      	ldr	r3, [r7, #8]
    a1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1b0:	4b2b      	ldr	r3, [pc, #172]	; (a260 <xTaskIncrementTick+0x1dc>)
    a1b2:	601a      	str	r2, [r3, #0]
    a1b4:	68bb      	ldr	r3, [r7, #8]
    a1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1b8:	0013      	movs	r3, r2
    a1ba:	009b      	lsls	r3, r3, #2
    a1bc:	189b      	adds	r3, r3, r2
    a1be:	009b      	lsls	r3, r3, #2
    a1c0:	4a28      	ldr	r2, [pc, #160]	; (a264 <xTaskIncrementTick+0x1e0>)
    a1c2:	189a      	adds	r2, r3, r2
    a1c4:	68bb      	ldr	r3, [r7, #8]
    a1c6:	3304      	adds	r3, #4
    a1c8:	0019      	movs	r1, r3
    a1ca:	0010      	movs	r0, r2
    a1cc:	4b26      	ldr	r3, [pc, #152]	; (a268 <xTaskIncrementTick+0x1e4>)
    a1ce:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    a1d0:	68bb      	ldr	r3, [r7, #8]
    a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1d4:	4b25      	ldr	r3, [pc, #148]	; (a26c <xTaskIncrementTick+0x1e8>)
    a1d6:	681b      	ldr	r3, [r3, #0]
    a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a1da:	429a      	cmp	r2, r3
    a1dc:	d39e      	bcc.n	a11c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
    a1de:	2301      	movs	r3, #1
    a1e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    a1e2:	e79b      	b.n	a11c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    a1e4:	4b21      	ldr	r3, [pc, #132]	; (a26c <xTaskIncrementTick+0x1e8>)
    a1e6:	681b      	ldr	r3, [r3, #0]
    a1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1ea:	491e      	ldr	r1, [pc, #120]	; (a264 <xTaskIncrementTick+0x1e0>)
    a1ec:	0013      	movs	r3, r2
    a1ee:	009b      	lsls	r3, r3, #2
    a1f0:	189b      	adds	r3, r3, r2
    a1f2:	009b      	lsls	r3, r3, #2
    a1f4:	585b      	ldr	r3, [r3, r1]
    a1f6:	2b01      	cmp	r3, #1
    a1f8:	d907      	bls.n	a20a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
    a1fa:	2301      	movs	r3, #1
    a1fc:	617b      	str	r3, [r7, #20]
    a1fe:	e004      	b.n	a20a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    a200:	4b08      	ldr	r3, [pc, #32]	; (a224 <xTaskIncrementTick+0x1a0>)
    a202:	681b      	ldr	r3, [r3, #0]
    a204:	1c5a      	adds	r2, r3, #1
    a206:	4b07      	ldr	r3, [pc, #28]	; (a224 <xTaskIncrementTick+0x1a0>)
    a208:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    a20a:	4b19      	ldr	r3, [pc, #100]	; (a270 <xTaskIncrementTick+0x1ec>)
    a20c:	681b      	ldr	r3, [r3, #0]
    a20e:	2b00      	cmp	r3, #0
    a210:	d001      	beq.n	a216 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
    a212:	2301      	movs	r3, #1
    a214:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    a216:	697b      	ldr	r3, [r7, #20]
}
    a218:	0018      	movs	r0, r3
    a21a:	46bd      	mov	sp, r7
    a21c:	b006      	add	sp, #24
    a21e:	bd80      	pop	{r7, pc}
    a220:	2000426c 	.word	0x2000426c
    a224:	20004254 	.word	0x20004254
    a228:	20000dcc 	.word	0x20000dcc
    a22c:	000078b1 	.word	0x000078b1
    a230:	20004248 	.word	0x20004248
    a234:	0000691d 	.word	0x0000691d
    a238:	200041fc 	.word	0x200041fc
    a23c:	20004200 	.word	0x20004200
    a240:	2000425c 	.word	0x2000425c
    a244:	0000a8e5 	.word	0x0000a8e5
    a248:	20004264 	.word	0x20004264
    a24c:	00007a97 	.word	0x00007a97
    a250:	00005c1d 	.word	0x00005c1d
    a254:	20000110 	.word	0x20000110
    a258:	00005bfd 	.word	0x00005bfd
    a25c:	000063cd 	.word	0x000063cd
    a260:	2000424c 	.word	0x2000424c
    a264:	20004170 	.word	0x20004170
    a268:	000079e7 	.word	0x000079e7
    a26c:	2000416c 	.word	0x2000416c
    a270:	20004258 	.word	0x20004258

0000a274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    a274:	b580      	push	{r7, lr}
    a276:	b082      	sub	sp, #8
    a278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    a27a:	4b3a      	ldr	r3, [pc, #232]	; (a364 <vTaskSwitchContext+0xf0>)
    a27c:	681b      	ldr	r3, [r3, #0]
    a27e:	2b00      	cmp	r3, #0
    a280:	d003      	beq.n	a28a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    a282:	4b39      	ldr	r3, [pc, #228]	; (a368 <vTaskSwitchContext+0xf4>)
    a284:	2201      	movs	r2, #1
    a286:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    a288:	e067      	b.n	a35a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
    a28a:	4b37      	ldr	r3, [pc, #220]	; (a368 <vTaskSwitchContext+0xf4>)
    a28c:	2200      	movs	r2, #0
    a28e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    a290:	4b36      	ldr	r3, [pc, #216]	; (a36c <vTaskSwitchContext+0xf8>)
    a292:	681b      	ldr	r3, [r3, #0]
    a294:	681a      	ldr	r2, [r3, #0]
    a296:	4b35      	ldr	r3, [pc, #212]	; (a36c <vTaskSwitchContext+0xf8>)
    a298:	681b      	ldr	r3, [r3, #0]
    a29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a29c:	429a      	cmp	r2, r3
    a29e:	d808      	bhi.n	a2b2 <vTaskSwitchContext+0x3e>
    a2a0:	4b32      	ldr	r3, [pc, #200]	; (a36c <vTaskSwitchContext+0xf8>)
    a2a2:	681a      	ldr	r2, [r3, #0]
    a2a4:	4b31      	ldr	r3, [pc, #196]	; (a36c <vTaskSwitchContext+0xf8>)
    a2a6:	681b      	ldr	r3, [r3, #0]
    a2a8:	3334      	adds	r3, #52	; 0x34
    a2aa:	0019      	movs	r1, r3
    a2ac:	0010      	movs	r0, r2
    a2ae:	4b30      	ldr	r3, [pc, #192]	; (a370 <vTaskSwitchContext+0xfc>)
    a2b0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    a2b2:	4b30      	ldr	r3, [pc, #192]	; (a374 <vTaskSwitchContext+0x100>)
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	607b      	str	r3, [r7, #4]
    a2b8:	e007      	b.n	a2ca <vTaskSwitchContext+0x56>
    a2ba:	687b      	ldr	r3, [r7, #4]
    a2bc:	2b00      	cmp	r3, #0
    a2be:	d101      	bne.n	a2c4 <vTaskSwitchContext+0x50>
    a2c0:	b672      	cpsid	i
    a2c2:	e7fe      	b.n	a2c2 <vTaskSwitchContext+0x4e>
    a2c4:	687b      	ldr	r3, [r7, #4]
    a2c6:	3b01      	subs	r3, #1
    a2c8:	607b      	str	r3, [r7, #4]
    a2ca:	492b      	ldr	r1, [pc, #172]	; (a378 <vTaskSwitchContext+0x104>)
    a2cc:	687a      	ldr	r2, [r7, #4]
    a2ce:	0013      	movs	r3, r2
    a2d0:	009b      	lsls	r3, r3, #2
    a2d2:	189b      	adds	r3, r3, r2
    a2d4:	009b      	lsls	r3, r3, #2
    a2d6:	585b      	ldr	r3, [r3, r1]
    a2d8:	2b00      	cmp	r3, #0
    a2da:	d0ee      	beq.n	a2ba <vTaskSwitchContext+0x46>
    a2dc:	687a      	ldr	r2, [r7, #4]
    a2de:	0013      	movs	r3, r2
    a2e0:	009b      	lsls	r3, r3, #2
    a2e2:	189b      	adds	r3, r3, r2
    a2e4:	009b      	lsls	r3, r3, #2
    a2e6:	4a24      	ldr	r2, [pc, #144]	; (a378 <vTaskSwitchContext+0x104>)
    a2e8:	189b      	adds	r3, r3, r2
    a2ea:	603b      	str	r3, [r7, #0]
    a2ec:	683b      	ldr	r3, [r7, #0]
    a2ee:	685b      	ldr	r3, [r3, #4]
    a2f0:	685a      	ldr	r2, [r3, #4]
    a2f2:	683b      	ldr	r3, [r7, #0]
    a2f4:	605a      	str	r2, [r3, #4]
    a2f6:	683b      	ldr	r3, [r7, #0]
    a2f8:	685a      	ldr	r2, [r3, #4]
    a2fa:	683b      	ldr	r3, [r7, #0]
    a2fc:	3308      	adds	r3, #8
    a2fe:	429a      	cmp	r2, r3
    a300:	d104      	bne.n	a30c <vTaskSwitchContext+0x98>
    a302:	683b      	ldr	r3, [r7, #0]
    a304:	685b      	ldr	r3, [r3, #4]
    a306:	685a      	ldr	r2, [r3, #4]
    a308:	683b      	ldr	r3, [r7, #0]
    a30a:	605a      	str	r2, [r3, #4]
    a30c:	683b      	ldr	r3, [r7, #0]
    a30e:	685b      	ldr	r3, [r3, #4]
    a310:	68da      	ldr	r2, [r3, #12]
    a312:	4b16      	ldr	r3, [pc, #88]	; (a36c <vTaskSwitchContext+0xf8>)
    a314:	601a      	str	r2, [r3, #0]
    a316:	4b17      	ldr	r3, [pc, #92]	; (a374 <vTaskSwitchContext+0x100>)
    a318:	687a      	ldr	r2, [r7, #4]
    a31a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
    a31c:	4b17      	ldr	r3, [pc, #92]	; (a37c <vTaskSwitchContext+0x108>)
    a31e:	2201      	movs	r2, #1
    a320:	601a      	str	r2, [r3, #0]
    a322:	4b17      	ldr	r3, [pc, #92]	; (a380 <vTaskSwitchContext+0x10c>)
    a324:	4798      	blx	r3
    a326:	0003      	movs	r3, r0
    a328:	0018      	movs	r0, r3
    a32a:	4b16      	ldr	r3, [pc, #88]	; (a384 <vTaskSwitchContext+0x110>)
    a32c:	4798      	blx	r3
    a32e:	0003      	movs	r3, r0
    a330:	001a      	movs	r2, r3
    a332:	4b15      	ldr	r3, [pc, #84]	; (a388 <vTaskSwitchContext+0x114>)
    a334:	881b      	ldrh	r3, [r3, #0]
    a336:	4013      	ands	r3, r2
    a338:	b29b      	uxth	r3, r3
    a33a:	2b00      	cmp	r3, #0
    a33c:	d00a      	beq.n	a354 <vTaskSwitchContext+0xe0>
    a33e:	4b10      	ldr	r3, [pc, #64]	; (a380 <vTaskSwitchContext+0x10c>)
    a340:	4798      	blx	r3
    a342:	0003      	movs	r3, r0
    a344:	0018      	movs	r0, r3
    a346:	4b11      	ldr	r3, [pc, #68]	; (a38c <vTaskSwitchContext+0x118>)
    a348:	4798      	blx	r3
    a34a:	0003      	movs	r3, r0
    a34c:	b2db      	uxtb	r3, r3
    a34e:	0018      	movs	r0, r3
    a350:	4b0f      	ldr	r3, [pc, #60]	; (a390 <vTaskSwitchContext+0x11c>)
    a352:	4798      	blx	r3
    a354:	4b09      	ldr	r3, [pc, #36]	; (a37c <vTaskSwitchContext+0x108>)
    a356:	2202      	movs	r2, #2
    a358:	601a      	str	r2, [r3, #0]
}
    a35a:	46c0      	nop			; (mov r8, r8)
    a35c:	46bd      	mov	sp, r7
    a35e:	b002      	add	sp, #8
    a360:	bd80      	pop	{r7, pc}
    a362:	46c0      	nop			; (mov r8, r8)
    a364:	2000426c 	.word	0x2000426c
    a368:	20004258 	.word	0x20004258
    a36c:	2000416c 	.word	0x2000416c
    a370:	00020459 	.word	0x00020459
    a374:	2000424c 	.word	0x2000424c
    a378:	20004170 	.word	0x20004170
    a37c:	20000dd8 	.word	0x20000dd8
    a380:	00005eb9 	.word	0x00005eb9
    a384:	00005c1d 	.word	0x00005c1d
    a388:	20000110 	.word	0x20000110
    a38c:	00005bfd 	.word	0x00005bfd
    a390:	00006a19 	.word	0x00006a19

0000a394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    a394:	b580      	push	{r7, lr}
    a396:	b082      	sub	sp, #8
    a398:	af00      	add	r7, sp, #0
    a39a:	6078      	str	r0, [r7, #4]
    a39c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    a39e:	687b      	ldr	r3, [r7, #4]
    a3a0:	2b00      	cmp	r3, #0
    a3a2:	d101      	bne.n	a3a8 <vTaskPlaceOnEventList+0x14>
    a3a4:	b672      	cpsid	i
    a3a6:	e7fe      	b.n	a3a6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    a3a8:	4b08      	ldr	r3, [pc, #32]	; (a3cc <vTaskPlaceOnEventList+0x38>)
    a3aa:	681b      	ldr	r3, [r3, #0]
    a3ac:	3318      	adds	r3, #24
    a3ae:	001a      	movs	r2, r3
    a3b0:	687b      	ldr	r3, [r7, #4]
    a3b2:	0011      	movs	r1, r2
    a3b4:	0018      	movs	r0, r3
    a3b6:	4b06      	ldr	r3, [pc, #24]	; (a3d0 <vTaskPlaceOnEventList+0x3c>)
    a3b8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    a3ba:	683b      	ldr	r3, [r7, #0]
    a3bc:	2101      	movs	r1, #1
    a3be:	0018      	movs	r0, r3
    a3c0:	4b04      	ldr	r3, [pc, #16]	; (a3d4 <vTaskPlaceOnEventList+0x40>)
    a3c2:	4798      	blx	r3
}
    a3c4:	46c0      	nop			; (mov r8, r8)
    a3c6:	46bd      	mov	sp, r7
    a3c8:	b002      	add	sp, #8
    a3ca:	bd80      	pop	{r7, pc}
    a3cc:	2000416c 	.word	0x2000416c
    a3d0:	00007a2b 	.word	0x00007a2b
    a3d4:	0000ae39 	.word	0x0000ae39

0000a3d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    a3d8:	b580      	push	{r7, lr}
    a3da:	b084      	sub	sp, #16
    a3dc:	af00      	add	r7, sp, #0
    a3de:	60f8      	str	r0, [r7, #12]
    a3e0:	60b9      	str	r1, [r7, #8]
    a3e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    a3e4:	68fb      	ldr	r3, [r7, #12]
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d101      	bne.n	a3ee <vTaskPlaceOnEventListRestricted+0x16>
    a3ea:	b672      	cpsid	i
    a3ec:	e7fe      	b.n	a3ec <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    a3ee:	4b28      	ldr	r3, [pc, #160]	; (a490 <vTaskPlaceOnEventListRestricted+0xb8>)
    a3f0:	681b      	ldr	r3, [r3, #0]
    a3f2:	3318      	adds	r3, #24
    a3f4:	001a      	movs	r2, r3
    a3f6:	68fb      	ldr	r3, [r7, #12]
    a3f8:	0011      	movs	r1, r2
    a3fa:	0018      	movs	r0, r3
    a3fc:	4b25      	ldr	r3, [pc, #148]	; (a494 <vTaskPlaceOnEventListRestricted+0xbc>)
    a3fe:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    a400:	687b      	ldr	r3, [r7, #4]
    a402:	2b00      	cmp	r3, #0
    a404:	d002      	beq.n	a40c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    a406:	2301      	movs	r3, #1
    a408:	425b      	negs	r3, r3
    a40a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    a40c:	4b20      	ldr	r3, [pc, #128]	; (a490 <vTaskPlaceOnEventListRestricted+0xb8>)
    a40e:	681b      	ldr	r3, [r3, #0]
    a410:	0018      	movs	r0, r3
    a412:	4b21      	ldr	r3, [pc, #132]	; (a498 <vTaskPlaceOnEventListRestricted+0xc0>)
    a414:	4798      	blx	r3
    a416:	0003      	movs	r3, r0
    a418:	001a      	movs	r2, r3
    a41a:	4b20      	ldr	r3, [pc, #128]	; (a49c <vTaskPlaceOnEventListRestricted+0xc4>)
    a41c:	881b      	ldrh	r3, [r3, #0]
    a41e:	4013      	ands	r3, r2
    a420:	b29b      	uxth	r3, r3
    a422:	2b00      	cmp	r3, #0
    a424:	d011      	beq.n	a44a <vTaskPlaceOnEventListRestricted+0x72>
    a426:	4b1e      	ldr	r3, [pc, #120]	; (a4a0 <vTaskPlaceOnEventListRestricted+0xc8>)
    a428:	681a      	ldr	r2, [r3, #0]
    a42a:	68bb      	ldr	r3, [r7, #8]
    a42c:	18d3      	adds	r3, r2, r3
    a42e:	0019      	movs	r1, r3
    a430:	2088      	movs	r0, #136	; 0x88
    a432:	4b1c      	ldr	r3, [pc, #112]	; (a4a4 <vTaskPlaceOnEventListRestricted+0xcc>)
    a434:	4798      	blx	r3
    a436:	4b16      	ldr	r3, [pc, #88]	; (a490 <vTaskPlaceOnEventListRestricted+0xb8>)
    a438:	681b      	ldr	r3, [r3, #0]
    a43a:	0018      	movs	r0, r3
    a43c:	4b1a      	ldr	r3, [pc, #104]	; (a4a8 <vTaskPlaceOnEventListRestricted+0xd0>)
    a43e:	4798      	blx	r3
    a440:	0003      	movs	r3, r0
    a442:	b2db      	uxtb	r3, r3
    a444:	0018      	movs	r0, r3
    a446:	4b19      	ldr	r3, [pc, #100]	; (a4ac <vTaskPlaceOnEventListRestricted+0xd4>)
    a448:	4798      	blx	r3
    a44a:	4b19      	ldr	r3, [pc, #100]	; (a4b0 <vTaskPlaceOnEventListRestricted+0xd8>)
    a44c:	4798      	blx	r3
    a44e:	0003      	movs	r3, r0
    a450:	0018      	movs	r0, r3
    a452:	4b11      	ldr	r3, [pc, #68]	; (a498 <vTaskPlaceOnEventListRestricted+0xc0>)
    a454:	4798      	blx	r3
    a456:	0003      	movs	r3, r0
    a458:	001a      	movs	r2, r3
    a45a:	4b10      	ldr	r3, [pc, #64]	; (a49c <vTaskPlaceOnEventListRestricted+0xc4>)
    a45c:	881b      	ldrh	r3, [r3, #0]
    a45e:	4013      	ands	r3, r2
    a460:	b29b      	uxth	r3, r3
    a462:	2b00      	cmp	r3, #0
    a464:	d00a      	beq.n	a47c <vTaskPlaceOnEventListRestricted+0xa4>
    a466:	4b12      	ldr	r3, [pc, #72]	; (a4b0 <vTaskPlaceOnEventListRestricted+0xd8>)
    a468:	4798      	blx	r3
    a46a:	0003      	movs	r3, r0
    a46c:	0018      	movs	r0, r3
    a46e:	4b0e      	ldr	r3, [pc, #56]	; (a4a8 <vTaskPlaceOnEventListRestricted+0xd0>)
    a470:	4798      	blx	r3
    a472:	0003      	movs	r3, r0
    a474:	b2db      	uxtb	r3, r3
    a476:	0018      	movs	r0, r3
    a478:	4b0c      	ldr	r3, [pc, #48]	; (a4ac <vTaskPlaceOnEventListRestricted+0xd4>)
    a47a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    a47c:	687a      	ldr	r2, [r7, #4]
    a47e:	68bb      	ldr	r3, [r7, #8]
    a480:	0011      	movs	r1, r2
    a482:	0018      	movs	r0, r3
    a484:	4b0b      	ldr	r3, [pc, #44]	; (a4b4 <vTaskPlaceOnEventListRestricted+0xdc>)
    a486:	4798      	blx	r3
	}
    a488:	46c0      	nop			; (mov r8, r8)
    a48a:	46bd      	mov	sp, r7
    a48c:	b004      	add	sp, #16
    a48e:	bd80      	pop	{r7, pc}
    a490:	2000416c 	.word	0x2000416c
    a494:	000079e7 	.word	0x000079e7
    a498:	00005c1d 	.word	0x00005c1d
    a49c:	20000110 	.word	0x20000110
    a4a0:	20004248 	.word	0x20004248
    a4a4:	0000691d 	.word	0x0000691d
    a4a8:	00005bfd 	.word	0x00005bfd
    a4ac:	00006dad 	.word	0x00006dad
    a4b0:	00005eb9 	.word	0x00005eb9
    a4b4:	0000ae39 	.word	0x0000ae39

0000a4b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    a4b8:	b580      	push	{r7, lr}
    a4ba:	b084      	sub	sp, #16
    a4bc:	af00      	add	r7, sp, #0
    a4be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    a4c0:	687b      	ldr	r3, [r7, #4]
    a4c2:	68db      	ldr	r3, [r3, #12]
    a4c4:	68db      	ldr	r3, [r3, #12]
    a4c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    a4c8:	68bb      	ldr	r3, [r7, #8]
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	d101      	bne.n	a4d2 <xTaskRemoveFromEventList+0x1a>
    a4ce:	b672      	cpsid	i
    a4d0:	e7fe      	b.n	a4d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    a4d2:	68bb      	ldr	r3, [r7, #8]
    a4d4:	3318      	adds	r3, #24
    a4d6:	0018      	movs	r0, r3
    a4d8:	4b2a      	ldr	r3, [pc, #168]	; (a584 <xTaskRemoveFromEventList+0xcc>)
    a4da:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    a4dc:	4b2a      	ldr	r3, [pc, #168]	; (a588 <xTaskRemoveFromEventList+0xd0>)
    a4de:	681b      	ldr	r3, [r3, #0]
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d132      	bne.n	a54a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    a4e4:	68bb      	ldr	r3, [r7, #8]
    a4e6:	3304      	adds	r3, #4
    a4e8:	0018      	movs	r0, r3
    a4ea:	4b26      	ldr	r3, [pc, #152]	; (a584 <xTaskRemoveFromEventList+0xcc>)
    a4ec:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    a4ee:	68bb      	ldr	r3, [r7, #8]
    a4f0:	0018      	movs	r0, r3
    a4f2:	4b26      	ldr	r3, [pc, #152]	; (a58c <xTaskRemoveFromEventList+0xd4>)
    a4f4:	4798      	blx	r3
    a4f6:	0003      	movs	r3, r0
    a4f8:	001a      	movs	r2, r3
    a4fa:	4b25      	ldr	r3, [pc, #148]	; (a590 <xTaskRemoveFromEventList+0xd8>)
    a4fc:	881b      	ldrh	r3, [r3, #0]
    a4fe:	4013      	ands	r3, r2
    a500:	b29b      	uxth	r3, r3
    a502:	2b00      	cmp	r3, #0
    a504:	d008      	beq.n	a518 <xTaskRemoveFromEventList+0x60>
    a506:	68bb      	ldr	r3, [r7, #8]
    a508:	0018      	movs	r0, r3
    a50a:	4b22      	ldr	r3, [pc, #136]	; (a594 <xTaskRemoveFromEventList+0xdc>)
    a50c:	4798      	blx	r3
    a50e:	0003      	movs	r3, r0
    a510:	b2db      	uxtb	r3, r3
    a512:	0018      	movs	r0, r3
    a514:	4b20      	ldr	r3, [pc, #128]	; (a598 <xTaskRemoveFromEventList+0xe0>)
    a516:	4798      	blx	r3
    a518:	68bb      	ldr	r3, [r7, #8]
    a51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a51c:	4b1f      	ldr	r3, [pc, #124]	; (a59c <xTaskRemoveFromEventList+0xe4>)
    a51e:	681b      	ldr	r3, [r3, #0]
    a520:	429a      	cmp	r2, r3
    a522:	d903      	bls.n	a52c <xTaskRemoveFromEventList+0x74>
    a524:	68bb      	ldr	r3, [r7, #8]
    a526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a528:	4b1c      	ldr	r3, [pc, #112]	; (a59c <xTaskRemoveFromEventList+0xe4>)
    a52a:	601a      	str	r2, [r3, #0]
    a52c:	68bb      	ldr	r3, [r7, #8]
    a52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a530:	0013      	movs	r3, r2
    a532:	009b      	lsls	r3, r3, #2
    a534:	189b      	adds	r3, r3, r2
    a536:	009b      	lsls	r3, r3, #2
    a538:	4a19      	ldr	r2, [pc, #100]	; (a5a0 <xTaskRemoveFromEventList+0xe8>)
    a53a:	189a      	adds	r2, r3, r2
    a53c:	68bb      	ldr	r3, [r7, #8]
    a53e:	3304      	adds	r3, #4
    a540:	0019      	movs	r1, r3
    a542:	0010      	movs	r0, r2
    a544:	4b17      	ldr	r3, [pc, #92]	; (a5a4 <xTaskRemoveFromEventList+0xec>)
    a546:	4798      	blx	r3
    a548:	e007      	b.n	a55a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    a54a:	68bb      	ldr	r3, [r7, #8]
    a54c:	3318      	adds	r3, #24
    a54e:	001a      	movs	r2, r3
    a550:	4b15      	ldr	r3, [pc, #84]	; (a5a8 <xTaskRemoveFromEventList+0xf0>)
    a552:	0011      	movs	r1, r2
    a554:	0018      	movs	r0, r3
    a556:	4b13      	ldr	r3, [pc, #76]	; (a5a4 <xTaskRemoveFromEventList+0xec>)
    a558:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    a55a:	68bb      	ldr	r3, [r7, #8]
    a55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a55e:	4b13      	ldr	r3, [pc, #76]	; (a5ac <xTaskRemoveFromEventList+0xf4>)
    a560:	681b      	ldr	r3, [r3, #0]
    a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a564:	429a      	cmp	r2, r3
    a566:	d905      	bls.n	a574 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    a568:	2301      	movs	r3, #1
    a56a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    a56c:	4b10      	ldr	r3, [pc, #64]	; (a5b0 <xTaskRemoveFromEventList+0xf8>)
    a56e:	2201      	movs	r2, #1
    a570:	601a      	str	r2, [r3, #0]
    a572:	e001      	b.n	a578 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    a574:	2300      	movs	r3, #0
    a576:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    a578:	68fb      	ldr	r3, [r7, #12]
}
    a57a:	0018      	movs	r0, r3
    a57c:	46bd      	mov	sp, r7
    a57e:	b004      	add	sp, #16
    a580:	bd80      	pop	{r7, pc}
    a582:	46c0      	nop			; (mov r8, r8)
    a584:	00007a97 	.word	0x00007a97
    a588:	2000426c 	.word	0x2000426c
    a58c:	00005c1d 	.word	0x00005c1d
    a590:	20000110 	.word	0x20000110
    a594:	00005bfd 	.word	0x00005bfd
    a598:	000063cd 	.word	0x000063cd
    a59c:	2000424c 	.word	0x2000424c
    a5a0:	20004170 	.word	0x20004170
    a5a4:	000079e7 	.word	0x000079e7
    a5a8:	20004204 	.word	0x20004204
    a5ac:	2000416c 	.word	0x2000416c
    a5b0:	20004258 	.word	0x20004258

0000a5b4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    a5b4:	b580      	push	{r7, lr}
    a5b6:	b082      	sub	sp, #8
    a5b8:	af00      	add	r7, sp, #0
    a5ba:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	2b00      	cmp	r3, #0
    a5c0:	d101      	bne.n	a5c6 <vTaskSetTimeOutState+0x12>
    a5c2:	b672      	cpsid	i
    a5c4:	e7fe      	b.n	a5c4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
    a5c6:	4b08      	ldr	r3, [pc, #32]	; (a5e8 <vTaskSetTimeOutState+0x34>)
    a5c8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    a5ca:	4b08      	ldr	r3, [pc, #32]	; (a5ec <vTaskSetTimeOutState+0x38>)
    a5cc:	681a      	ldr	r2, [r3, #0]
    a5ce:	687b      	ldr	r3, [r7, #4]
    a5d0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    a5d2:	4b07      	ldr	r3, [pc, #28]	; (a5f0 <vTaskSetTimeOutState+0x3c>)
    a5d4:	681a      	ldr	r2, [r3, #0]
    a5d6:	687b      	ldr	r3, [r7, #4]
    a5d8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
    a5da:	4b06      	ldr	r3, [pc, #24]	; (a5f4 <vTaskSetTimeOutState+0x40>)
    a5dc:	4798      	blx	r3
}
    a5de:	46c0      	nop			; (mov r8, r8)
    a5e0:	46bd      	mov	sp, r7
    a5e2:	b002      	add	sp, #8
    a5e4:	bd80      	pop	{r7, pc}
    a5e6:	46c0      	nop			; (mov r8, r8)
    a5e8:	00007c29 	.word	0x00007c29
    a5ec:	2000425c 	.word	0x2000425c
    a5f0:	20004248 	.word	0x20004248
    a5f4:	00007c4d 	.word	0x00007c4d

0000a5f8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    a5f8:	b580      	push	{r7, lr}
    a5fa:	b082      	sub	sp, #8
    a5fc:	af00      	add	r7, sp, #0
    a5fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    a600:	4b05      	ldr	r3, [pc, #20]	; (a618 <vTaskInternalSetTimeOutState+0x20>)
    a602:	681a      	ldr	r2, [r3, #0]
    a604:	687b      	ldr	r3, [r7, #4]
    a606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    a608:	4b04      	ldr	r3, [pc, #16]	; (a61c <vTaskInternalSetTimeOutState+0x24>)
    a60a:	681a      	ldr	r2, [r3, #0]
    a60c:	687b      	ldr	r3, [r7, #4]
    a60e:	605a      	str	r2, [r3, #4]
}
    a610:	46c0      	nop			; (mov r8, r8)
    a612:	46bd      	mov	sp, r7
    a614:	b002      	add	sp, #8
    a616:	bd80      	pop	{r7, pc}
    a618:	2000425c 	.word	0x2000425c
    a61c:	20004248 	.word	0x20004248

0000a620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    a620:	b580      	push	{r7, lr}
    a622:	b086      	sub	sp, #24
    a624:	af00      	add	r7, sp, #0
    a626:	6078      	str	r0, [r7, #4]
    a628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    a62a:	687b      	ldr	r3, [r7, #4]
    a62c:	2b00      	cmp	r3, #0
    a62e:	d101      	bne.n	a634 <xTaskCheckForTimeOut+0x14>
    a630:	b672      	cpsid	i
    a632:	e7fe      	b.n	a632 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    a634:	683b      	ldr	r3, [r7, #0]
    a636:	2b00      	cmp	r3, #0
    a638:	d101      	bne.n	a63e <xTaskCheckForTimeOut+0x1e>
    a63a:	b672      	cpsid	i
    a63c:	e7fe      	b.n	a63c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    a63e:	4b1e      	ldr	r3, [pc, #120]	; (a6b8 <xTaskCheckForTimeOut+0x98>)
    a640:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    a642:	4b1e      	ldr	r3, [pc, #120]	; (a6bc <xTaskCheckForTimeOut+0x9c>)
    a644:	681b      	ldr	r3, [r3, #0]
    a646:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    a648:	687b      	ldr	r3, [r7, #4]
    a64a:	685b      	ldr	r3, [r3, #4]
    a64c:	693a      	ldr	r2, [r7, #16]
    a64e:	1ad3      	subs	r3, r2, r3
    a650:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    a652:	683b      	ldr	r3, [r7, #0]
    a654:	681b      	ldr	r3, [r3, #0]
    a656:	3301      	adds	r3, #1
    a658:	d102      	bne.n	a660 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    a65a:	2300      	movs	r3, #0
    a65c:	617b      	str	r3, [r7, #20]
    a65e:	e024      	b.n	a6aa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    a660:	687b      	ldr	r3, [r7, #4]
    a662:	681a      	ldr	r2, [r3, #0]
    a664:	4b16      	ldr	r3, [pc, #88]	; (a6c0 <xTaskCheckForTimeOut+0xa0>)
    a666:	681b      	ldr	r3, [r3, #0]
    a668:	429a      	cmp	r2, r3
    a66a:	d007      	beq.n	a67c <xTaskCheckForTimeOut+0x5c>
    a66c:	687b      	ldr	r3, [r7, #4]
    a66e:	685a      	ldr	r2, [r3, #4]
    a670:	693b      	ldr	r3, [r7, #16]
    a672:	429a      	cmp	r2, r3
    a674:	d802      	bhi.n	a67c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    a676:	2301      	movs	r3, #1
    a678:	617b      	str	r3, [r7, #20]
    a67a:	e016      	b.n	a6aa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    a67c:	683b      	ldr	r3, [r7, #0]
    a67e:	681a      	ldr	r2, [r3, #0]
    a680:	68fb      	ldr	r3, [r7, #12]
    a682:	429a      	cmp	r2, r3
    a684:	d90c      	bls.n	a6a0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    a686:	683b      	ldr	r3, [r7, #0]
    a688:	681a      	ldr	r2, [r3, #0]
    a68a:	68fb      	ldr	r3, [r7, #12]
    a68c:	1ad2      	subs	r2, r2, r3
    a68e:	683b      	ldr	r3, [r7, #0]
    a690:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    a692:	687b      	ldr	r3, [r7, #4]
    a694:	0018      	movs	r0, r3
    a696:	4b0b      	ldr	r3, [pc, #44]	; (a6c4 <xTaskCheckForTimeOut+0xa4>)
    a698:	4798      	blx	r3
			xReturn = pdFALSE;
    a69a:	2300      	movs	r3, #0
    a69c:	617b      	str	r3, [r7, #20]
    a69e:	e004      	b.n	a6aa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    a6a0:	683b      	ldr	r3, [r7, #0]
    a6a2:	2200      	movs	r2, #0
    a6a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    a6a6:	2301      	movs	r3, #1
    a6a8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    a6aa:	4b07      	ldr	r3, [pc, #28]	; (a6c8 <xTaskCheckForTimeOut+0xa8>)
    a6ac:	4798      	blx	r3

	return xReturn;
    a6ae:	697b      	ldr	r3, [r7, #20]
}
    a6b0:	0018      	movs	r0, r3
    a6b2:	46bd      	mov	sp, r7
    a6b4:	b006      	add	sp, #24
    a6b6:	bd80      	pop	{r7, pc}
    a6b8:	00007c29 	.word	0x00007c29
    a6bc:	20004248 	.word	0x20004248
    a6c0:	2000425c 	.word	0x2000425c
    a6c4:	0000a5f9 	.word	0x0000a5f9
    a6c8:	00007c4d 	.word	0x00007c4d

0000a6cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    a6cc:	b580      	push	{r7, lr}
    a6ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    a6d0:	4b02      	ldr	r3, [pc, #8]	; (a6dc <vTaskMissedYield+0x10>)
    a6d2:	2201      	movs	r2, #1
    a6d4:	601a      	str	r2, [r3, #0]
}
    a6d6:	46c0      	nop			; (mov r8, r8)
    a6d8:	46bd      	mov	sp, r7
    a6da:	bd80      	pop	{r7, pc}
    a6dc:	20004258 	.word	0x20004258

0000a6e0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
    a6e0:	b580      	push	{r7, lr}
    a6e2:	b084      	sub	sp, #16
    a6e4:	af00      	add	r7, sp, #0
    a6e6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	d005      	beq.n	a6fa <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    a6ee:	687b      	ldr	r3, [r7, #4]
    a6f0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    a6f2:	68bb      	ldr	r3, [r7, #8]
    a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a6f6:	60fb      	str	r3, [r7, #12]
    a6f8:	e001      	b.n	a6fe <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
    a6fa:	2300      	movs	r3, #0
    a6fc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
    a6fe:	68fb      	ldr	r3, [r7, #12]
	}
    a700:	0018      	movs	r0, r3
    a702:	46bd      	mov	sp, r7
    a704:	b004      	add	sp, #16
    a706:	bd80      	pop	{r7, pc}

0000a708 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
    a708:	b580      	push	{r7, lr}
    a70a:	b084      	sub	sp, #16
    a70c:	af00      	add	r7, sp, #0
    a70e:	6078      	str	r0, [r7, #4]
    a710:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
    a712:	687b      	ldr	r3, [r7, #4]
    a714:	2b00      	cmp	r3, #0
    a716:	d004      	beq.n	a722 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    a718:	687b      	ldr	r3, [r7, #4]
    a71a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    a71c:	68fb      	ldr	r3, [r7, #12]
    a71e:	683a      	ldr	r2, [r7, #0]
    a720:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
    a722:	46c0      	nop			; (mov r8, r8)
    a724:	46bd      	mov	sp, r7
    a726:	b004      	add	sp, #16
    a728:	bd80      	pop	{r7, pc}
	...

0000a72c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    a72c:	b580      	push	{r7, lr}
    a72e:	b082      	sub	sp, #8
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    a734:	4b04      	ldr	r3, [pc, #16]	; (a748 <prvIdleTask+0x1c>)
    a736:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    a738:	4b04      	ldr	r3, [pc, #16]	; (a74c <prvIdleTask+0x20>)
    a73a:	681b      	ldr	r3, [r3, #0]
    a73c:	2b01      	cmp	r3, #1
    a73e:	d9f9      	bls.n	a734 <prvIdleTask+0x8>
			{
				taskYIELD();
    a740:	4b03      	ldr	r3, [pc, #12]	; (a750 <prvIdleTask+0x24>)
    a742:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    a744:	e7f6      	b.n	a734 <prvIdleTask+0x8>
    a746:	46c0      	nop			; (mov r8, r8)
    a748:	0000a7e1 	.word	0x0000a7e1
    a74c:	20004170 	.word	0x20004170
    a750:	00007c11 	.word	0x00007c11

0000a754 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    a754:	b580      	push	{r7, lr}
    a756:	b082      	sub	sp, #8
    a758:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    a75a:	2300      	movs	r3, #0
    a75c:	607b      	str	r3, [r7, #4]
    a75e:	e00c      	b.n	a77a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    a760:	687a      	ldr	r2, [r7, #4]
    a762:	0013      	movs	r3, r2
    a764:	009b      	lsls	r3, r3, #2
    a766:	189b      	adds	r3, r3, r2
    a768:	009b      	lsls	r3, r3, #2
    a76a:	4a14      	ldr	r2, [pc, #80]	; (a7bc <prvInitialiseTaskLists+0x68>)
    a76c:	189b      	adds	r3, r3, r2
    a76e:	0018      	movs	r0, r3
    a770:	4b13      	ldr	r3, [pc, #76]	; (a7c0 <prvInitialiseTaskLists+0x6c>)
    a772:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    a774:	687b      	ldr	r3, [r7, #4]
    a776:	3301      	adds	r3, #1
    a778:	607b      	str	r3, [r7, #4]
    a77a:	687b      	ldr	r3, [r7, #4]
    a77c:	2b04      	cmp	r3, #4
    a77e:	d9ef      	bls.n	a760 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    a780:	4b10      	ldr	r3, [pc, #64]	; (a7c4 <prvInitialiseTaskLists+0x70>)
    a782:	0018      	movs	r0, r3
    a784:	4b0e      	ldr	r3, [pc, #56]	; (a7c0 <prvInitialiseTaskLists+0x6c>)
    a786:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    a788:	4b0f      	ldr	r3, [pc, #60]	; (a7c8 <prvInitialiseTaskLists+0x74>)
    a78a:	0018      	movs	r0, r3
    a78c:	4b0c      	ldr	r3, [pc, #48]	; (a7c0 <prvInitialiseTaskLists+0x6c>)
    a78e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    a790:	4b0e      	ldr	r3, [pc, #56]	; (a7cc <prvInitialiseTaskLists+0x78>)
    a792:	0018      	movs	r0, r3
    a794:	4b0a      	ldr	r3, [pc, #40]	; (a7c0 <prvInitialiseTaskLists+0x6c>)
    a796:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    a798:	4b0d      	ldr	r3, [pc, #52]	; (a7d0 <prvInitialiseTaskLists+0x7c>)
    a79a:	0018      	movs	r0, r3
    a79c:	4b08      	ldr	r3, [pc, #32]	; (a7c0 <prvInitialiseTaskLists+0x6c>)
    a79e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    a7a0:	4b0c      	ldr	r3, [pc, #48]	; (a7d4 <prvInitialiseTaskLists+0x80>)
    a7a2:	0018      	movs	r0, r3
    a7a4:	4b06      	ldr	r3, [pc, #24]	; (a7c0 <prvInitialiseTaskLists+0x6c>)
    a7a6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    a7a8:	4b0b      	ldr	r3, [pc, #44]	; (a7d8 <prvInitialiseTaskLists+0x84>)
    a7aa:	4a06      	ldr	r2, [pc, #24]	; (a7c4 <prvInitialiseTaskLists+0x70>)
    a7ac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    a7ae:	4b0b      	ldr	r3, [pc, #44]	; (a7dc <prvInitialiseTaskLists+0x88>)
    a7b0:	4a05      	ldr	r2, [pc, #20]	; (a7c8 <prvInitialiseTaskLists+0x74>)
    a7b2:	601a      	str	r2, [r3, #0]
}
    a7b4:	46c0      	nop			; (mov r8, r8)
    a7b6:	46bd      	mov	sp, r7
    a7b8:	b002      	add	sp, #8
    a7ba:	bd80      	pop	{r7, pc}
    a7bc:	20004170 	.word	0x20004170
    a7c0:	00007995 	.word	0x00007995
    a7c4:	200041d4 	.word	0x200041d4
    a7c8:	200041e8 	.word	0x200041e8
    a7cc:	20004204 	.word	0x20004204
    a7d0:	20004218 	.word	0x20004218
    a7d4:	20004230 	.word	0x20004230
    a7d8:	200041fc 	.word	0x200041fc
    a7dc:	20004200 	.word	0x20004200

0000a7e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    a7e0:	b580      	push	{r7, lr}
    a7e2:	b082      	sub	sp, #8
    a7e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    a7e6:	e01a      	b.n	a81e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    a7e8:	4b11      	ldr	r3, [pc, #68]	; (a830 <prvCheckTasksWaitingTermination+0x50>)
    a7ea:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    a7ec:	4b11      	ldr	r3, [pc, #68]	; (a834 <prvCheckTasksWaitingTermination+0x54>)
    a7ee:	68db      	ldr	r3, [r3, #12]
    a7f0:	68db      	ldr	r3, [r3, #12]
    a7f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    a7f4:	687b      	ldr	r3, [r7, #4]
    a7f6:	3304      	adds	r3, #4
    a7f8:	0018      	movs	r0, r3
    a7fa:	4b0f      	ldr	r3, [pc, #60]	; (a838 <prvCheckTasksWaitingTermination+0x58>)
    a7fc:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    a7fe:	4b0f      	ldr	r3, [pc, #60]	; (a83c <prvCheckTasksWaitingTermination+0x5c>)
    a800:	681b      	ldr	r3, [r3, #0]
    a802:	1e5a      	subs	r2, r3, #1
    a804:	4b0d      	ldr	r3, [pc, #52]	; (a83c <prvCheckTasksWaitingTermination+0x5c>)
    a806:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    a808:	4b0d      	ldr	r3, [pc, #52]	; (a840 <prvCheckTasksWaitingTermination+0x60>)
    a80a:	681b      	ldr	r3, [r3, #0]
    a80c:	1e5a      	subs	r2, r3, #1
    a80e:	4b0c      	ldr	r3, [pc, #48]	; (a840 <prvCheckTasksWaitingTermination+0x60>)
    a810:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    a812:	4b0c      	ldr	r3, [pc, #48]	; (a844 <prvCheckTasksWaitingTermination+0x64>)
    a814:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    a816:	687b      	ldr	r3, [r7, #4]
    a818:	0018      	movs	r0, r3
    a81a:	4b0b      	ldr	r3, [pc, #44]	; (a848 <prvCheckTasksWaitingTermination+0x68>)
    a81c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    a81e:	4b08      	ldr	r3, [pc, #32]	; (a840 <prvCheckTasksWaitingTermination+0x60>)
    a820:	681b      	ldr	r3, [r3, #0]
    a822:	2b00      	cmp	r3, #0
    a824:	d1e0      	bne.n	a7e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    a826:	46c0      	nop			; (mov r8, r8)
    a828:	46bd      	mov	sp, r7
    a82a:	b002      	add	sp, #8
    a82c:	bd80      	pop	{r7, pc}
    a82e:	46c0      	nop			; (mov r8, r8)
    a830:	00007c29 	.word	0x00007c29
    a834:	20004218 	.word	0x20004218
    a838:	00007a97 	.word	0x00007a97
    a83c:	20004244 	.word	0x20004244
    a840:	2000422c 	.word	0x2000422c
    a844:	00007c4d 	.word	0x00007c4d
    a848:	0000a8bd 	.word	0x0000a8bd

0000a84c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    a84c:	b580      	push	{r7, lr}
    a84e:	b084      	sub	sp, #16
    a850:	af00      	add	r7, sp, #0
    a852:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
    a854:	2300      	movs	r3, #0
    a856:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    a858:	e005      	b.n	a866 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
    a85a:	687b      	ldr	r3, [r7, #4]
    a85c:	3301      	adds	r3, #1
    a85e:	607b      	str	r3, [r7, #4]
			ulCount++;
    a860:	68fb      	ldr	r3, [r7, #12]
    a862:	3301      	adds	r3, #1
    a864:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    a866:	687b      	ldr	r3, [r7, #4]
    a868:	781b      	ldrb	r3, [r3, #0]
    a86a:	2ba5      	cmp	r3, #165	; 0xa5
    a86c:	d0f5      	beq.n	a85a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    a86e:	68fb      	ldr	r3, [r7, #12]
    a870:	089b      	lsrs	r3, r3, #2
    a872:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
    a874:	68fb      	ldr	r3, [r7, #12]
    a876:	b29b      	uxth	r3, r3
	}
    a878:	0018      	movs	r0, r3
    a87a:	46bd      	mov	sp, r7
    a87c:	b004      	add	sp, #16
    a87e:	bd80      	pop	{r7, pc}

0000a880 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    a880:	b580      	push	{r7, lr}
    a882:	b086      	sub	sp, #24
    a884:	af00      	add	r7, sp, #0
    a886:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    a888:	687b      	ldr	r3, [r7, #4]
    a88a:	2b00      	cmp	r3, #0
    a88c:	d102      	bne.n	a894 <uxTaskGetStackHighWaterMark+0x14>
    a88e:	4b09      	ldr	r3, [pc, #36]	; (a8b4 <uxTaskGetStackHighWaterMark+0x34>)
    a890:	681b      	ldr	r3, [r3, #0]
    a892:	e000      	b.n	a896 <uxTaskGetStackHighWaterMark+0x16>
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    a898:	697b      	ldr	r3, [r7, #20]
    a89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a89c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    a89e:	693b      	ldr	r3, [r7, #16]
    a8a0:	0018      	movs	r0, r3
    a8a2:	4b05      	ldr	r3, [pc, #20]	; (a8b8 <uxTaskGetStackHighWaterMark+0x38>)
    a8a4:	4798      	blx	r3
    a8a6:	0003      	movs	r3, r0
    a8a8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    a8aa:	68fb      	ldr	r3, [r7, #12]
	}
    a8ac:	0018      	movs	r0, r3
    a8ae:	46bd      	mov	sp, r7
    a8b0:	b006      	add	sp, #24
    a8b2:	bd80      	pop	{r7, pc}
    a8b4:	2000416c 	.word	0x2000416c
    a8b8:	0000a84d 	.word	0x0000a84d

0000a8bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    a8bc:	b580      	push	{r7, lr}
    a8be:	b082      	sub	sp, #8
    a8c0:	af00      	add	r7, sp, #0
    a8c2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a8c8:	0018      	movs	r0, r3
    a8ca:	4b05      	ldr	r3, [pc, #20]	; (a8e0 <prvDeleteTCB+0x24>)
    a8cc:	4798      	blx	r3
			vPortFree( pxTCB );
    a8ce:	687b      	ldr	r3, [r7, #4]
    a8d0:	0018      	movs	r0, r3
    a8d2:	4b03      	ldr	r3, [pc, #12]	; (a8e0 <prvDeleteTCB+0x24>)
    a8d4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    a8d6:	46c0      	nop			; (mov r8, r8)
    a8d8:	46bd      	mov	sp, r7
    a8da:	b002      	add	sp, #8
    a8dc:	bd80      	pop	{r7, pc}
    a8de:	46c0      	nop			; (mov r8, r8)
    a8e0:	00007e25 	.word	0x00007e25

0000a8e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    a8e4:	b580      	push	{r7, lr}
    a8e6:	b082      	sub	sp, #8
    a8e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    a8ea:	4b0e      	ldr	r3, [pc, #56]	; (a924 <prvResetNextTaskUnblockTime+0x40>)
    a8ec:	681b      	ldr	r3, [r3, #0]
    a8ee:	681b      	ldr	r3, [r3, #0]
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	d101      	bne.n	a8f8 <prvResetNextTaskUnblockTime+0x14>
    a8f4:	2301      	movs	r3, #1
    a8f6:	e000      	b.n	a8fa <prvResetNextTaskUnblockTime+0x16>
    a8f8:	2300      	movs	r3, #0
    a8fa:	2b00      	cmp	r3, #0
    a8fc:	d004      	beq.n	a908 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    a8fe:	4b0a      	ldr	r3, [pc, #40]	; (a928 <prvResetNextTaskUnblockTime+0x44>)
    a900:	2201      	movs	r2, #1
    a902:	4252      	negs	r2, r2
    a904:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    a906:	e008      	b.n	a91a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    a908:	4b06      	ldr	r3, [pc, #24]	; (a924 <prvResetNextTaskUnblockTime+0x40>)
    a90a:	681b      	ldr	r3, [r3, #0]
    a90c:	68db      	ldr	r3, [r3, #12]
    a90e:	68db      	ldr	r3, [r3, #12]
    a910:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    a912:	687b      	ldr	r3, [r7, #4]
    a914:	685a      	ldr	r2, [r3, #4]
    a916:	4b04      	ldr	r3, [pc, #16]	; (a928 <prvResetNextTaskUnblockTime+0x44>)
    a918:	601a      	str	r2, [r3, #0]
}
    a91a:	46c0      	nop			; (mov r8, r8)
    a91c:	46bd      	mov	sp, r7
    a91e:	b002      	add	sp, #8
    a920:	bd80      	pop	{r7, pc}
    a922:	46c0      	nop			; (mov r8, r8)
    a924:	200041fc 	.word	0x200041fc
    a928:	20004264 	.word	0x20004264

0000a92c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    a92c:	b580      	push	{r7, lr}
    a92e:	b082      	sub	sp, #8
    a930:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    a932:	4b04      	ldr	r3, [pc, #16]	; (a944 <xTaskGetCurrentTaskHandle+0x18>)
    a934:	681b      	ldr	r3, [r3, #0]
    a936:	607b      	str	r3, [r7, #4]

		return xReturn;
    a938:	687b      	ldr	r3, [r7, #4]
	}
    a93a:	0018      	movs	r0, r3
    a93c:	46bd      	mov	sp, r7
    a93e:	b002      	add	sp, #8
    a940:	bd80      	pop	{r7, pc}
    a942:	46c0      	nop			; (mov r8, r8)
    a944:	2000416c 	.word	0x2000416c

0000a948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    a948:	b580      	push	{r7, lr}
    a94a:	b082      	sub	sp, #8
    a94c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    a94e:	4b0a      	ldr	r3, [pc, #40]	; (a978 <xTaskGetSchedulerState+0x30>)
    a950:	681b      	ldr	r3, [r3, #0]
    a952:	2b00      	cmp	r3, #0
    a954:	d102      	bne.n	a95c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    a956:	2301      	movs	r3, #1
    a958:	607b      	str	r3, [r7, #4]
    a95a:	e008      	b.n	a96e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    a95c:	4b07      	ldr	r3, [pc, #28]	; (a97c <xTaskGetSchedulerState+0x34>)
    a95e:	681b      	ldr	r3, [r3, #0]
    a960:	2b00      	cmp	r3, #0
    a962:	d102      	bne.n	a96a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    a964:	2302      	movs	r3, #2
    a966:	607b      	str	r3, [r7, #4]
    a968:	e001      	b.n	a96e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    a96a:	2300      	movs	r3, #0
    a96c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    a96e:	687b      	ldr	r3, [r7, #4]
	}
    a970:	0018      	movs	r0, r3
    a972:	46bd      	mov	sp, r7
    a974:	b002      	add	sp, #8
    a976:	bd80      	pop	{r7, pc}
    a978:	20004250 	.word	0x20004250
    a97c:	2000426c 	.word	0x2000426c

0000a980 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    a980:	b590      	push	{r4, r7, lr}
    a982:	b085      	sub	sp, #20
    a984:	af00      	add	r7, sp, #0
    a986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    a98c:	2300      	movs	r3, #0
    a98e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    a990:	687b      	ldr	r3, [r7, #4]
    a992:	2b00      	cmp	r3, #0
    a994:	d100      	bne.n	a998 <xTaskPriorityInherit+0x18>
    a996:	e09d      	b.n	aad4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    a998:	68bb      	ldr	r3, [r7, #8]
    a99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a99c:	4b50      	ldr	r3, [pc, #320]	; (aae0 <xTaskPriorityInherit+0x160>)
    a99e:	681b      	ldr	r3, [r3, #0]
    a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9a2:	429a      	cmp	r2, r3
    a9a4:	d300      	bcc.n	a9a8 <xTaskPriorityInherit+0x28>
    a9a6:	e08c      	b.n	aac2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    a9a8:	68bb      	ldr	r3, [r7, #8]
    a9aa:	699b      	ldr	r3, [r3, #24]
    a9ac:	2b00      	cmp	r3, #0
    a9ae:	db06      	blt.n	a9be <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a9b0:	4b4b      	ldr	r3, [pc, #300]	; (aae0 <xTaskPriorityInherit+0x160>)
    a9b2:	681b      	ldr	r3, [r3, #0]
    a9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9b6:	2205      	movs	r2, #5
    a9b8:	1ad2      	subs	r2, r2, r3
    a9ba:	68bb      	ldr	r3, [r7, #8]
    a9bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    a9be:	68bb      	ldr	r3, [r7, #8]
    a9c0:	6959      	ldr	r1, [r3, #20]
    a9c2:	68bb      	ldr	r3, [r7, #8]
    a9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a9c6:	0013      	movs	r3, r2
    a9c8:	009b      	lsls	r3, r3, #2
    a9ca:	189b      	adds	r3, r3, r2
    a9cc:	009b      	lsls	r3, r3, #2
    a9ce:	4a45      	ldr	r2, [pc, #276]	; (aae4 <xTaskPriorityInherit+0x164>)
    a9d0:	189b      	adds	r3, r3, r2
    a9d2:	4299      	cmp	r1, r3
    a9d4:	d101      	bne.n	a9da <xTaskPriorityInherit+0x5a>
    a9d6:	2301      	movs	r3, #1
    a9d8:	e000      	b.n	a9dc <xTaskPriorityInherit+0x5c>
    a9da:	2300      	movs	r3, #0
    a9dc:	2b00      	cmp	r3, #0
    a9de:	d037      	beq.n	aa50 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    a9e0:	68bb      	ldr	r3, [r7, #8]
    a9e2:	3304      	adds	r3, #4
    a9e4:	0018      	movs	r0, r3
    a9e6:	4b40      	ldr	r3, [pc, #256]	; (aae8 <xTaskPriorityInherit+0x168>)
    a9e8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    a9ea:	4b3d      	ldr	r3, [pc, #244]	; (aae0 <xTaskPriorityInherit+0x160>)
    a9ec:	681b      	ldr	r3, [r3, #0]
    a9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a9f0:	68bb      	ldr	r3, [r7, #8]
    a9f2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    a9f4:	68bb      	ldr	r3, [r7, #8]
    a9f6:	0018      	movs	r0, r3
    a9f8:	4b3c      	ldr	r3, [pc, #240]	; (aaec <xTaskPriorityInherit+0x16c>)
    a9fa:	4798      	blx	r3
    a9fc:	0003      	movs	r3, r0
    a9fe:	001a      	movs	r2, r3
    aa00:	4b3b      	ldr	r3, [pc, #236]	; (aaf0 <xTaskPriorityInherit+0x170>)
    aa02:	881b      	ldrh	r3, [r3, #0]
    aa04:	4013      	ands	r3, r2
    aa06:	b29b      	uxth	r3, r3
    aa08:	2b00      	cmp	r3, #0
    aa0a:	d008      	beq.n	aa1e <xTaskPriorityInherit+0x9e>
    aa0c:	68bb      	ldr	r3, [r7, #8]
    aa0e:	0018      	movs	r0, r3
    aa10:	4b38      	ldr	r3, [pc, #224]	; (aaf4 <xTaskPriorityInherit+0x174>)
    aa12:	4798      	blx	r3
    aa14:	0003      	movs	r3, r0
    aa16:	b2db      	uxtb	r3, r3
    aa18:	0018      	movs	r0, r3
    aa1a:	4b37      	ldr	r3, [pc, #220]	; (aaf8 <xTaskPriorityInherit+0x178>)
    aa1c:	4798      	blx	r3
    aa1e:	68bb      	ldr	r3, [r7, #8]
    aa20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    aa22:	4b36      	ldr	r3, [pc, #216]	; (aafc <xTaskPriorityInherit+0x17c>)
    aa24:	681b      	ldr	r3, [r3, #0]
    aa26:	429a      	cmp	r2, r3
    aa28:	d903      	bls.n	aa32 <xTaskPriorityInherit+0xb2>
    aa2a:	68bb      	ldr	r3, [r7, #8]
    aa2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    aa2e:	4b33      	ldr	r3, [pc, #204]	; (aafc <xTaskPriorityInherit+0x17c>)
    aa30:	601a      	str	r2, [r3, #0]
    aa32:	68bb      	ldr	r3, [r7, #8]
    aa34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    aa36:	0013      	movs	r3, r2
    aa38:	009b      	lsls	r3, r3, #2
    aa3a:	189b      	adds	r3, r3, r2
    aa3c:	009b      	lsls	r3, r3, #2
    aa3e:	4a29      	ldr	r2, [pc, #164]	; (aae4 <xTaskPriorityInherit+0x164>)
    aa40:	189a      	adds	r2, r3, r2
    aa42:	68bb      	ldr	r3, [r7, #8]
    aa44:	3304      	adds	r3, #4
    aa46:	0019      	movs	r1, r3
    aa48:	0010      	movs	r0, r2
    aa4a:	4b2d      	ldr	r3, [pc, #180]	; (ab00 <xTaskPriorityInherit+0x180>)
    aa4c:	4798      	blx	r3
    aa4e:	e004      	b.n	aa5a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    aa50:	4b23      	ldr	r3, [pc, #140]	; (aae0 <xTaskPriorityInherit+0x160>)
    aa52:	681b      	ldr	r3, [r3, #0]
    aa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    aa56:	68bb      	ldr	r3, [r7, #8]
    aa58:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    aa5a:	68bb      	ldr	r3, [r7, #8]
    aa5c:	0018      	movs	r0, r3
    aa5e:	4b23      	ldr	r3, [pc, #140]	; (aaec <xTaskPriorityInherit+0x16c>)
    aa60:	4798      	blx	r3
    aa62:	0003      	movs	r3, r0
    aa64:	001a      	movs	r2, r3
    aa66:	4b22      	ldr	r3, [pc, #136]	; (aaf0 <xTaskPriorityInherit+0x170>)
    aa68:	881b      	ldrh	r3, [r3, #0]
    aa6a:	4013      	ands	r3, r2
    aa6c:	b29b      	uxth	r3, r3
    aa6e:	2b00      	cmp	r3, #0
    aa70:	d024      	beq.n	aabc <xTaskPriorityInherit+0x13c>
    aa72:	68bb      	ldr	r3, [r7, #8]
    aa74:	0018      	movs	r0, r3
    aa76:	4b1f      	ldr	r3, [pc, #124]	; (aaf4 <xTaskPriorityInherit+0x174>)
    aa78:	4798      	blx	r3
    aa7a:	0003      	movs	r3, r0
    aa7c:	b2db      	uxtb	r3, r3
    aa7e:	001c      	movs	r4, r3
    aa80:	68bb      	ldr	r3, [r7, #8]
    aa82:	0018      	movs	r0, r3
    aa84:	4b1b      	ldr	r3, [pc, #108]	; (aaf4 <xTaskPriorityInherit+0x174>)
    aa86:	4798      	blx	r3
    aa88:	0003      	movs	r3, r0
    aa8a:	b2db      	uxtb	r3, r3
    aa8c:	0019      	movs	r1, r3
    aa8e:	2003      	movs	r0, #3
    aa90:	4b1c      	ldr	r3, [pc, #112]	; (ab04 <xTaskPriorityInherit+0x184>)
    aa92:	4798      	blx	r3
    aa94:	0003      	movs	r3, r0
    aa96:	0022      	movs	r2, r4
    aa98:	2103      	movs	r1, #3
    aa9a:	208e      	movs	r0, #142	; 0x8e
    aa9c:	4c1a      	ldr	r4, [pc, #104]	; (ab08 <xTaskPriorityInherit+0x188>)
    aa9e:	47a0      	blx	r4
    aaa0:	68bb      	ldr	r3, [r7, #8]
    aaa2:	0018      	movs	r0, r3
    aaa4:	4b13      	ldr	r3, [pc, #76]	; (aaf4 <xTaskPriorityInherit+0x174>)
    aaa6:	4798      	blx	r3
    aaa8:	0003      	movs	r3, r0
    aaaa:	b2d9      	uxtb	r1, r3
    aaac:	4b0c      	ldr	r3, [pc, #48]	; (aae0 <xTaskPriorityInherit+0x160>)
    aaae:	681b      	ldr	r3, [r3, #0]
    aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    aab2:	b2db      	uxtb	r3, r3
    aab4:	001a      	movs	r2, r3
    aab6:	2003      	movs	r0, #3
    aab8:	4b14      	ldr	r3, [pc, #80]	; (ab0c <xTaskPriorityInherit+0x18c>)
    aaba:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    aabc:	2301      	movs	r3, #1
    aabe:	60fb      	str	r3, [r7, #12]
    aac0:	e008      	b.n	aad4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    aac2:	68bb      	ldr	r3, [r7, #8]
    aac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    aac6:	4b06      	ldr	r3, [pc, #24]	; (aae0 <xTaskPriorityInherit+0x160>)
    aac8:	681b      	ldr	r3, [r3, #0]
    aaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    aacc:	429a      	cmp	r2, r3
    aace:	d201      	bcs.n	aad4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    aad0:	2301      	movs	r3, #1
    aad2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    aad4:	68fb      	ldr	r3, [r7, #12]
	}
    aad6:	0018      	movs	r0, r3
    aad8:	46bd      	mov	sp, r7
    aada:	b005      	add	sp, #20
    aadc:	bd90      	pop	{r4, r7, pc}
    aade:	46c0      	nop			; (mov r8, r8)
    aae0:	2000416c 	.word	0x2000416c
    aae4:	20004170 	.word	0x20004170
    aae8:	00007a97 	.word	0x00007a97
    aaec:	00005c1d 	.word	0x00005c1d
    aaf0:	20000110 	.word	0x20000110
    aaf4:	00005bfd 	.word	0x00005bfd
    aaf8:	000063cd 	.word	0x000063cd
    aafc:	2000424c 	.word	0x2000424c
    ab00:	000079e7 	.word	0x000079e7
    ab04:	00006bd5 	.word	0x00006bd5
    ab08:	00006745 	.word	0x00006745
    ab0c:	00006b31 	.word	0x00006b31

0000ab10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    ab10:	b590      	push	{r4, r7, lr}
    ab12:	b085      	sub	sp, #20
    ab14:	af00      	add	r7, sp, #0
    ab16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    ab18:	687b      	ldr	r3, [r7, #4]
    ab1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    ab1c:	2300      	movs	r3, #0
    ab1e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    ab20:	687b      	ldr	r3, [r7, #4]
    ab22:	2b00      	cmp	r3, #0
    ab24:	d100      	bne.n	ab28 <xTaskPriorityDisinherit+0x18>
    ab26:	e089      	b.n	ac3c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    ab28:	4b47      	ldr	r3, [pc, #284]	; (ac48 <xTaskPriorityDisinherit+0x138>)
    ab2a:	681b      	ldr	r3, [r3, #0]
    ab2c:	68ba      	ldr	r2, [r7, #8]
    ab2e:	429a      	cmp	r2, r3
    ab30:	d001      	beq.n	ab36 <xTaskPriorityDisinherit+0x26>
    ab32:	b672      	cpsid	i
    ab34:	e7fe      	b.n	ab34 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
    ab36:	68bb      	ldr	r3, [r7, #8]
    ab38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d101      	bne.n	ab42 <xTaskPriorityDisinherit+0x32>
    ab3e:	b672      	cpsid	i
    ab40:	e7fe      	b.n	ab40 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
    ab42:	68bb      	ldr	r3, [r7, #8]
    ab44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ab46:	1e5a      	subs	r2, r3, #1
    ab48:	68bb      	ldr	r3, [r7, #8]
    ab4a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    ab4c:	68bb      	ldr	r3, [r7, #8]
    ab4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ab50:	68bb      	ldr	r3, [r7, #8]
    ab52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ab54:	429a      	cmp	r2, r3
    ab56:	d071      	beq.n	ac3c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    ab58:	68bb      	ldr	r3, [r7, #8]
    ab5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ab5c:	2b00      	cmp	r3, #0
    ab5e:	d16d      	bne.n	ac3c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ab60:	68bb      	ldr	r3, [r7, #8]
    ab62:	3304      	adds	r3, #4
    ab64:	0018      	movs	r0, r3
    ab66:	4b39      	ldr	r3, [pc, #228]	; (ac4c <xTaskPriorityDisinherit+0x13c>)
    ab68:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    ab6a:	68bb      	ldr	r3, [r7, #8]
    ab6c:	0018      	movs	r0, r3
    ab6e:	4b38      	ldr	r3, [pc, #224]	; (ac50 <xTaskPriorityDisinherit+0x140>)
    ab70:	4798      	blx	r3
    ab72:	0003      	movs	r3, r0
    ab74:	001a      	movs	r2, r3
    ab76:	4b37      	ldr	r3, [pc, #220]	; (ac54 <xTaskPriorityDisinherit+0x144>)
    ab78:	881b      	ldrh	r3, [r3, #0]
    ab7a:	4013      	ands	r3, r2
    ab7c:	b29b      	uxth	r3, r3
    ab7e:	2b00      	cmp	r3, #0
    ab80:	d023      	beq.n	abca <xTaskPriorityDisinherit+0xba>
    ab82:	68bb      	ldr	r3, [r7, #8]
    ab84:	0018      	movs	r0, r3
    ab86:	4b34      	ldr	r3, [pc, #208]	; (ac58 <xTaskPriorityDisinherit+0x148>)
    ab88:	4798      	blx	r3
    ab8a:	0003      	movs	r3, r0
    ab8c:	b2db      	uxtb	r3, r3
    ab8e:	001c      	movs	r4, r3
    ab90:	68bb      	ldr	r3, [r7, #8]
    ab92:	0018      	movs	r0, r3
    ab94:	4b30      	ldr	r3, [pc, #192]	; (ac58 <xTaskPriorityDisinherit+0x148>)
    ab96:	4798      	blx	r3
    ab98:	0003      	movs	r3, r0
    ab9a:	b2db      	uxtb	r3, r3
    ab9c:	0019      	movs	r1, r3
    ab9e:	2003      	movs	r0, #3
    aba0:	4b2e      	ldr	r3, [pc, #184]	; (ac5c <xTaskPriorityDisinherit+0x14c>)
    aba2:	4798      	blx	r3
    aba4:	0003      	movs	r3, r0
    aba6:	0022      	movs	r2, r4
    aba8:	2103      	movs	r1, #3
    abaa:	208f      	movs	r0, #143	; 0x8f
    abac:	4c2c      	ldr	r4, [pc, #176]	; (ac60 <xTaskPriorityDisinherit+0x150>)
    abae:	47a0      	blx	r4
    abb0:	68bb      	ldr	r3, [r7, #8]
    abb2:	0018      	movs	r0, r3
    abb4:	4b28      	ldr	r3, [pc, #160]	; (ac58 <xTaskPriorityDisinherit+0x148>)
    abb6:	4798      	blx	r3
    abb8:	0003      	movs	r3, r0
    abba:	b2d9      	uxtb	r1, r3
    abbc:	68bb      	ldr	r3, [r7, #8]
    abbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    abc0:	b2db      	uxtb	r3, r3
    abc2:	001a      	movs	r2, r3
    abc4:	2003      	movs	r0, #3
    abc6:	4b27      	ldr	r3, [pc, #156]	; (ac64 <xTaskPriorityDisinherit+0x154>)
    abc8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    abca:	68bb      	ldr	r3, [r7, #8]
    abcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    abce:	68bb      	ldr	r3, [r7, #8]
    abd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    abd2:	68bb      	ldr	r3, [r7, #8]
    abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    abd6:	2205      	movs	r2, #5
    abd8:	1ad2      	subs	r2, r2, r3
    abda:	68bb      	ldr	r3, [r7, #8]
    abdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    abde:	68bb      	ldr	r3, [r7, #8]
    abe0:	0018      	movs	r0, r3
    abe2:	4b1b      	ldr	r3, [pc, #108]	; (ac50 <xTaskPriorityDisinherit+0x140>)
    abe4:	4798      	blx	r3
    abe6:	0003      	movs	r3, r0
    abe8:	001a      	movs	r2, r3
    abea:	4b1a      	ldr	r3, [pc, #104]	; (ac54 <xTaskPriorityDisinherit+0x144>)
    abec:	881b      	ldrh	r3, [r3, #0]
    abee:	4013      	ands	r3, r2
    abf0:	b29b      	uxth	r3, r3
    abf2:	2b00      	cmp	r3, #0
    abf4:	d008      	beq.n	ac08 <xTaskPriorityDisinherit+0xf8>
    abf6:	68bb      	ldr	r3, [r7, #8]
    abf8:	0018      	movs	r0, r3
    abfa:	4b17      	ldr	r3, [pc, #92]	; (ac58 <xTaskPriorityDisinherit+0x148>)
    abfc:	4798      	blx	r3
    abfe:	0003      	movs	r3, r0
    ac00:	b2db      	uxtb	r3, r3
    ac02:	0018      	movs	r0, r3
    ac04:	4b18      	ldr	r3, [pc, #96]	; (ac68 <xTaskPriorityDisinherit+0x158>)
    ac06:	4798      	blx	r3
    ac08:	68bb      	ldr	r3, [r7, #8]
    ac0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ac0c:	4b17      	ldr	r3, [pc, #92]	; (ac6c <xTaskPriorityDisinherit+0x15c>)
    ac0e:	681b      	ldr	r3, [r3, #0]
    ac10:	429a      	cmp	r2, r3
    ac12:	d903      	bls.n	ac1c <xTaskPriorityDisinherit+0x10c>
    ac14:	68bb      	ldr	r3, [r7, #8]
    ac16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ac18:	4b14      	ldr	r3, [pc, #80]	; (ac6c <xTaskPriorityDisinherit+0x15c>)
    ac1a:	601a      	str	r2, [r3, #0]
    ac1c:	68bb      	ldr	r3, [r7, #8]
    ac1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ac20:	0013      	movs	r3, r2
    ac22:	009b      	lsls	r3, r3, #2
    ac24:	189b      	adds	r3, r3, r2
    ac26:	009b      	lsls	r3, r3, #2
    ac28:	4a11      	ldr	r2, [pc, #68]	; (ac70 <xTaskPriorityDisinherit+0x160>)
    ac2a:	189a      	adds	r2, r3, r2
    ac2c:	68bb      	ldr	r3, [r7, #8]
    ac2e:	3304      	adds	r3, #4
    ac30:	0019      	movs	r1, r3
    ac32:	0010      	movs	r0, r2
    ac34:	4b0f      	ldr	r3, [pc, #60]	; (ac74 <xTaskPriorityDisinherit+0x164>)
    ac36:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    ac38:	2301      	movs	r3, #1
    ac3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    ac3c:	68fb      	ldr	r3, [r7, #12]
	}
    ac3e:	0018      	movs	r0, r3
    ac40:	46bd      	mov	sp, r7
    ac42:	b005      	add	sp, #20
    ac44:	bd90      	pop	{r4, r7, pc}
    ac46:	46c0      	nop			; (mov r8, r8)
    ac48:	2000416c 	.word	0x2000416c
    ac4c:	00007a97 	.word	0x00007a97
    ac50:	00005c1d 	.word	0x00005c1d
    ac54:	20000110 	.word	0x20000110
    ac58:	00005bfd 	.word	0x00005bfd
    ac5c:	00006bd5 	.word	0x00006bd5
    ac60:	00006745 	.word	0x00006745
    ac64:	00006b31 	.word	0x00006b31
    ac68:	000063cd 	.word	0x000063cd
    ac6c:	2000424c 	.word	0x2000424c
    ac70:	20004170 	.word	0x20004170
    ac74:	000079e7 	.word	0x000079e7

0000ac78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    ac78:	b590      	push	{r4, r7, lr}
    ac7a:	b087      	sub	sp, #28
    ac7c:	af00      	add	r7, sp, #0
    ac7e:	6078      	str	r0, [r7, #4]
    ac80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    ac82:	687b      	ldr	r3, [r7, #4]
    ac84:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    ac86:	2301      	movs	r3, #1
    ac88:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    ac8a:	687b      	ldr	r3, [r7, #4]
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	d100      	bne.n	ac92 <vTaskPriorityDisinheritAfterTimeout+0x1a>
    ac90:	e0a4      	b.n	addc <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    ac92:	693b      	ldr	r3, [r7, #16]
    ac94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ac96:	2b00      	cmp	r3, #0
    ac98:	d101      	bne.n	ac9e <vTaskPriorityDisinheritAfterTimeout+0x26>
    ac9a:	b672      	cpsid	i
    ac9c:	e7fe      	b.n	ac9c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    ac9e:	693b      	ldr	r3, [r7, #16]
    aca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    aca2:	683b      	ldr	r3, [r7, #0]
    aca4:	429a      	cmp	r2, r3
    aca6:	d202      	bcs.n	acae <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    aca8:	683b      	ldr	r3, [r7, #0]
    acaa:	617b      	str	r3, [r7, #20]
    acac:	e002      	b.n	acb4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    acae:	693b      	ldr	r3, [r7, #16]
    acb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    acb2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    acb4:	693b      	ldr	r3, [r7, #16]
    acb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    acb8:	697b      	ldr	r3, [r7, #20]
    acba:	429a      	cmp	r2, r3
    acbc:	d100      	bne.n	acc0 <vTaskPriorityDisinheritAfterTimeout+0x48>
    acbe:	e08d      	b.n	addc <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    acc0:	693b      	ldr	r3, [r7, #16]
    acc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    acc4:	68fb      	ldr	r3, [r7, #12]
    acc6:	429a      	cmp	r2, r3
    acc8:	d000      	beq.n	accc <vTaskPriorityDisinheritAfterTimeout+0x54>
    acca:	e087      	b.n	addc <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    accc:	4b45      	ldr	r3, [pc, #276]	; (ade4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
    acce:	681b      	ldr	r3, [r3, #0]
    acd0:	693a      	ldr	r2, [r7, #16]
    acd2:	429a      	cmp	r2, r3
    acd4:	d101      	bne.n	acda <vTaskPriorityDisinheritAfterTimeout+0x62>
    acd6:	b672      	cpsid	i
    acd8:	e7fe      	b.n	acd8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    acda:	693b      	ldr	r3, [r7, #16]
    acdc:	0018      	movs	r0, r3
    acde:	4b42      	ldr	r3, [pc, #264]	; (ade8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
    ace0:	4798      	blx	r3
    ace2:	0003      	movs	r3, r0
    ace4:	001a      	movs	r2, r3
    ace6:	4b41      	ldr	r3, [pc, #260]	; (adec <vTaskPriorityDisinheritAfterTimeout+0x174>)
    ace8:	881b      	ldrh	r3, [r3, #0]
    acea:	4013      	ands	r3, r2
    acec:	b29b      	uxth	r3, r3
    acee:	2b00      	cmp	r3, #0
    acf0:	d023      	beq.n	ad3a <vTaskPriorityDisinheritAfterTimeout+0xc2>
    acf2:	693b      	ldr	r3, [r7, #16]
    acf4:	0018      	movs	r0, r3
    acf6:	4b3e      	ldr	r3, [pc, #248]	; (adf0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    acf8:	4798      	blx	r3
    acfa:	0003      	movs	r3, r0
    acfc:	b2db      	uxtb	r3, r3
    acfe:	001c      	movs	r4, r3
    ad00:	693b      	ldr	r3, [r7, #16]
    ad02:	0018      	movs	r0, r3
    ad04:	4b3a      	ldr	r3, [pc, #232]	; (adf0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    ad06:	4798      	blx	r3
    ad08:	0003      	movs	r3, r0
    ad0a:	b2db      	uxtb	r3, r3
    ad0c:	0019      	movs	r1, r3
    ad0e:	2003      	movs	r0, #3
    ad10:	4b38      	ldr	r3, [pc, #224]	; (adf4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
    ad12:	4798      	blx	r3
    ad14:	0003      	movs	r3, r0
    ad16:	0022      	movs	r2, r4
    ad18:	2103      	movs	r1, #3
    ad1a:	208f      	movs	r0, #143	; 0x8f
    ad1c:	4c36      	ldr	r4, [pc, #216]	; (adf8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
    ad1e:	47a0      	blx	r4
    ad20:	693b      	ldr	r3, [r7, #16]
    ad22:	0018      	movs	r0, r3
    ad24:	4b32      	ldr	r3, [pc, #200]	; (adf0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    ad26:	4798      	blx	r3
    ad28:	0003      	movs	r3, r0
    ad2a:	b2d9      	uxtb	r1, r3
    ad2c:	693b      	ldr	r3, [r7, #16]
    ad2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ad30:	b2db      	uxtb	r3, r3
    ad32:	001a      	movs	r2, r3
    ad34:	2003      	movs	r0, #3
    ad36:	4b31      	ldr	r3, [pc, #196]	; (adfc <vTaskPriorityDisinheritAfterTimeout+0x184>)
    ad38:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    ad3a:	693b      	ldr	r3, [r7, #16]
    ad3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ad3e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    ad40:	693b      	ldr	r3, [r7, #16]
    ad42:	697a      	ldr	r2, [r7, #20]
    ad44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    ad46:	693b      	ldr	r3, [r7, #16]
    ad48:	699b      	ldr	r3, [r3, #24]
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	db04      	blt.n	ad58 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ad4e:	697b      	ldr	r3, [r7, #20]
    ad50:	2205      	movs	r2, #5
    ad52:	1ad2      	subs	r2, r2, r3
    ad54:	693b      	ldr	r3, [r7, #16]
    ad56:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    ad58:	693b      	ldr	r3, [r7, #16]
    ad5a:	6959      	ldr	r1, [r3, #20]
    ad5c:	68ba      	ldr	r2, [r7, #8]
    ad5e:	0013      	movs	r3, r2
    ad60:	009b      	lsls	r3, r3, #2
    ad62:	189b      	adds	r3, r3, r2
    ad64:	009b      	lsls	r3, r3, #2
    ad66:	4a26      	ldr	r2, [pc, #152]	; (ae00 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    ad68:	189b      	adds	r3, r3, r2
    ad6a:	4299      	cmp	r1, r3
    ad6c:	d101      	bne.n	ad72 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    ad6e:	2301      	movs	r3, #1
    ad70:	e000      	b.n	ad74 <vTaskPriorityDisinheritAfterTimeout+0xfc>
    ad72:	2300      	movs	r3, #0
    ad74:	2b00      	cmp	r3, #0
    ad76:	d031      	beq.n	addc <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ad78:	693b      	ldr	r3, [r7, #16]
    ad7a:	3304      	adds	r3, #4
    ad7c:	0018      	movs	r0, r3
    ad7e:	4b21      	ldr	r3, [pc, #132]	; (ae04 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
    ad80:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    ad82:	693b      	ldr	r3, [r7, #16]
    ad84:	0018      	movs	r0, r3
    ad86:	4b18      	ldr	r3, [pc, #96]	; (ade8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
    ad88:	4798      	blx	r3
    ad8a:	0003      	movs	r3, r0
    ad8c:	001a      	movs	r2, r3
    ad8e:	4b17      	ldr	r3, [pc, #92]	; (adec <vTaskPriorityDisinheritAfterTimeout+0x174>)
    ad90:	881b      	ldrh	r3, [r3, #0]
    ad92:	4013      	ands	r3, r2
    ad94:	b29b      	uxth	r3, r3
    ad96:	2b00      	cmp	r3, #0
    ad98:	d008      	beq.n	adac <vTaskPriorityDisinheritAfterTimeout+0x134>
    ad9a:	693b      	ldr	r3, [r7, #16]
    ad9c:	0018      	movs	r0, r3
    ad9e:	4b14      	ldr	r3, [pc, #80]	; (adf0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    ada0:	4798      	blx	r3
    ada2:	0003      	movs	r3, r0
    ada4:	b2db      	uxtb	r3, r3
    ada6:	0018      	movs	r0, r3
    ada8:	4b17      	ldr	r3, [pc, #92]	; (ae08 <vTaskPriorityDisinheritAfterTimeout+0x190>)
    adaa:	4798      	blx	r3
    adac:	693b      	ldr	r3, [r7, #16]
    adae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    adb0:	4b16      	ldr	r3, [pc, #88]	; (ae0c <vTaskPriorityDisinheritAfterTimeout+0x194>)
    adb2:	681b      	ldr	r3, [r3, #0]
    adb4:	429a      	cmp	r2, r3
    adb6:	d903      	bls.n	adc0 <vTaskPriorityDisinheritAfterTimeout+0x148>
    adb8:	693b      	ldr	r3, [r7, #16]
    adba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    adbc:	4b13      	ldr	r3, [pc, #76]	; (ae0c <vTaskPriorityDisinheritAfterTimeout+0x194>)
    adbe:	601a      	str	r2, [r3, #0]
    adc0:	693b      	ldr	r3, [r7, #16]
    adc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    adc4:	0013      	movs	r3, r2
    adc6:	009b      	lsls	r3, r3, #2
    adc8:	189b      	adds	r3, r3, r2
    adca:	009b      	lsls	r3, r3, #2
    adcc:	4a0c      	ldr	r2, [pc, #48]	; (ae00 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    adce:	189a      	adds	r2, r3, r2
    add0:	693b      	ldr	r3, [r7, #16]
    add2:	3304      	adds	r3, #4
    add4:	0019      	movs	r1, r3
    add6:	0010      	movs	r0, r2
    add8:	4b0d      	ldr	r3, [pc, #52]	; (ae10 <vTaskPriorityDisinheritAfterTimeout+0x198>)
    adda:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    addc:	46c0      	nop			; (mov r8, r8)
    adde:	46bd      	mov	sp, r7
    ade0:	b007      	add	sp, #28
    ade2:	bd90      	pop	{r4, r7, pc}
    ade4:	2000416c 	.word	0x2000416c
    ade8:	00005c1d 	.word	0x00005c1d
    adec:	20000110 	.word	0x20000110
    adf0:	00005bfd 	.word	0x00005bfd
    adf4:	00006bd5 	.word	0x00006bd5
    adf8:	00006745 	.word	0x00006745
    adfc:	00006b31 	.word	0x00006b31
    ae00:	20004170 	.word	0x20004170
    ae04:	00007a97 	.word	0x00007a97
    ae08:	000063cd 	.word	0x000063cd
    ae0c:	2000424c 	.word	0x2000424c
    ae10:	000079e7 	.word	0x000079e7

0000ae14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    ae14:	b580      	push	{r7, lr}
    ae16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    ae18:	4b06      	ldr	r3, [pc, #24]	; (ae34 <pvTaskIncrementMutexHeldCount+0x20>)
    ae1a:	681b      	ldr	r3, [r3, #0]
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	d004      	beq.n	ae2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    ae20:	4b04      	ldr	r3, [pc, #16]	; (ae34 <pvTaskIncrementMutexHeldCount+0x20>)
    ae22:	681b      	ldr	r3, [r3, #0]
    ae24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    ae26:	3201      	adds	r2, #1
    ae28:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    ae2a:	4b02      	ldr	r3, [pc, #8]	; (ae34 <pvTaskIncrementMutexHeldCount+0x20>)
    ae2c:	681b      	ldr	r3, [r3, #0]
	}
    ae2e:	0018      	movs	r0, r3
    ae30:	46bd      	mov	sp, r7
    ae32:	bd80      	pop	{r7, pc}
    ae34:	2000416c 	.word	0x2000416c

0000ae38 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b084      	sub	sp, #16
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	6078      	str	r0, [r7, #4]
    ae40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    ae42:	4b21      	ldr	r3, [pc, #132]	; (aec8 <prvAddCurrentTaskToDelayedList+0x90>)
    ae44:	681b      	ldr	r3, [r3, #0]
    ae46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ae48:	4b20      	ldr	r3, [pc, #128]	; (aecc <prvAddCurrentTaskToDelayedList+0x94>)
    ae4a:	681b      	ldr	r3, [r3, #0]
    ae4c:	3304      	adds	r3, #4
    ae4e:	0018      	movs	r0, r3
    ae50:	4b1f      	ldr	r3, [pc, #124]	; (aed0 <prvAddCurrentTaskToDelayedList+0x98>)
    ae52:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    ae54:	687b      	ldr	r3, [r7, #4]
    ae56:	3301      	adds	r3, #1
    ae58:	d10b      	bne.n	ae72 <prvAddCurrentTaskToDelayedList+0x3a>
    ae5a:	683b      	ldr	r3, [r7, #0]
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d008      	beq.n	ae72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    ae60:	4b1a      	ldr	r3, [pc, #104]	; (aecc <prvAddCurrentTaskToDelayedList+0x94>)
    ae62:	681b      	ldr	r3, [r3, #0]
    ae64:	1d1a      	adds	r2, r3, #4
    ae66:	4b1b      	ldr	r3, [pc, #108]	; (aed4 <prvAddCurrentTaskToDelayedList+0x9c>)
    ae68:	0011      	movs	r1, r2
    ae6a:	0018      	movs	r0, r3
    ae6c:	4b1a      	ldr	r3, [pc, #104]	; (aed8 <prvAddCurrentTaskToDelayedList+0xa0>)
    ae6e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    ae70:	e026      	b.n	aec0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    ae72:	68fa      	ldr	r2, [r7, #12]
    ae74:	687b      	ldr	r3, [r7, #4]
    ae76:	18d3      	adds	r3, r2, r3
    ae78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    ae7a:	4b14      	ldr	r3, [pc, #80]	; (aecc <prvAddCurrentTaskToDelayedList+0x94>)
    ae7c:	681b      	ldr	r3, [r3, #0]
    ae7e:	68ba      	ldr	r2, [r7, #8]
    ae80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    ae82:	68ba      	ldr	r2, [r7, #8]
    ae84:	68fb      	ldr	r3, [r7, #12]
    ae86:	429a      	cmp	r2, r3
    ae88:	d209      	bcs.n	ae9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    ae8a:	4b14      	ldr	r3, [pc, #80]	; (aedc <prvAddCurrentTaskToDelayedList+0xa4>)
    ae8c:	681a      	ldr	r2, [r3, #0]
    ae8e:	4b0f      	ldr	r3, [pc, #60]	; (aecc <prvAddCurrentTaskToDelayedList+0x94>)
    ae90:	681b      	ldr	r3, [r3, #0]
    ae92:	3304      	adds	r3, #4
    ae94:	0019      	movs	r1, r3
    ae96:	0010      	movs	r0, r2
    ae98:	4b11      	ldr	r3, [pc, #68]	; (aee0 <prvAddCurrentTaskToDelayedList+0xa8>)
    ae9a:	4798      	blx	r3
}
    ae9c:	e010      	b.n	aec0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    ae9e:	4b11      	ldr	r3, [pc, #68]	; (aee4 <prvAddCurrentTaskToDelayedList+0xac>)
    aea0:	681a      	ldr	r2, [r3, #0]
    aea2:	4b0a      	ldr	r3, [pc, #40]	; (aecc <prvAddCurrentTaskToDelayedList+0x94>)
    aea4:	681b      	ldr	r3, [r3, #0]
    aea6:	3304      	adds	r3, #4
    aea8:	0019      	movs	r1, r3
    aeaa:	0010      	movs	r0, r2
    aeac:	4b0c      	ldr	r3, [pc, #48]	; (aee0 <prvAddCurrentTaskToDelayedList+0xa8>)
    aeae:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    aeb0:	4b0d      	ldr	r3, [pc, #52]	; (aee8 <prvAddCurrentTaskToDelayedList+0xb0>)
    aeb2:	681b      	ldr	r3, [r3, #0]
    aeb4:	68ba      	ldr	r2, [r7, #8]
    aeb6:	429a      	cmp	r2, r3
    aeb8:	d202      	bcs.n	aec0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    aeba:	4b0b      	ldr	r3, [pc, #44]	; (aee8 <prvAddCurrentTaskToDelayedList+0xb0>)
    aebc:	68ba      	ldr	r2, [r7, #8]
    aebe:	601a      	str	r2, [r3, #0]
}
    aec0:	46c0      	nop			; (mov r8, r8)
    aec2:	46bd      	mov	sp, r7
    aec4:	b004      	add	sp, #16
    aec6:	bd80      	pop	{r7, pc}
    aec8:	20004248 	.word	0x20004248
    aecc:	2000416c 	.word	0x2000416c
    aed0:	00007a97 	.word	0x00007a97
    aed4:	20004230 	.word	0x20004230
    aed8:	000079e7 	.word	0x000079e7
    aedc:	20004200 	.word	0x20004200
    aee0:	00007a2b 	.word	0x00007a2b
    aee4:	200041fc 	.word	0x200041fc
    aee8:	20004264 	.word	0x20004264

0000aeec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    aeec:	b590      	push	{r4, r7, lr}
    aeee:	b085      	sub	sp, #20
    aef0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    aef2:	2300      	movs	r3, #0
    aef4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    aef6:	4b0e      	ldr	r3, [pc, #56]	; (af30 <xTimerCreateTimerTask+0x44>)
    aef8:	4798      	blx	r3

	if( xTimerQueue != NULL )
    aefa:	4b0e      	ldr	r3, [pc, #56]	; (af34 <xTimerCreateTimerTask+0x48>)
    aefc:	681b      	ldr	r3, [r3, #0]
    aefe:	2b00      	cmp	r3, #0
    af00:	d00b      	beq.n	af1a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    af02:	490d      	ldr	r1, [pc, #52]	; (af38 <xTimerCreateTimerTask+0x4c>)
    af04:	480d      	ldr	r0, [pc, #52]	; (af3c <xTimerCreateTimerTask+0x50>)
    af06:	4b0e      	ldr	r3, [pc, #56]	; (af40 <xTimerCreateTimerTask+0x54>)
    af08:	9301      	str	r3, [sp, #4]
    af0a:	2302      	movs	r3, #2
    af0c:	9300      	str	r3, [sp, #0]
    af0e:	2300      	movs	r3, #0
    af10:	2280      	movs	r2, #128	; 0x80
    af12:	4c0c      	ldr	r4, [pc, #48]	; (af44 <xTimerCreateTimerTask+0x58>)
    af14:	47a0      	blx	r4
    af16:	0003      	movs	r3, r0
    af18:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    af1a:	687b      	ldr	r3, [r7, #4]
    af1c:	2b00      	cmp	r3, #0
    af1e:	d101      	bne.n	af24 <xTimerCreateTimerTask+0x38>
    af20:	b672      	cpsid	i
    af22:	e7fe      	b.n	af22 <xTimerCreateTimerTask+0x36>
	return xReturn;
    af24:	687b      	ldr	r3, [r7, #4]
}
    af26:	0018      	movs	r0, r3
    af28:	46bd      	mov	sp, r7
    af2a:	b003      	add	sp, #12
    af2c:	bd90      	pop	{r4, r7, pc}
    af2e:	46c0      	nop			; (mov r8, r8)
    af30:	0000b435 	.word	0x0000b435
    af34:	200042a0 	.word	0x200042a0
    af38:	00027014 	.word	0x00027014
    af3c:	0000b06d 	.word	0x0000b06d
    af40:	200042a4 	.word	0x200042a4
    af44:	00009885 	.word	0x00009885

0000af48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    af48:	b590      	push	{r4, r7, lr}
    af4a:	b089      	sub	sp, #36	; 0x24
    af4c:	af00      	add	r7, sp, #0
    af4e:	60f8      	str	r0, [r7, #12]
    af50:	60b9      	str	r1, [r7, #8]
    af52:	607a      	str	r2, [r7, #4]
    af54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    af56:	2300      	movs	r3, #0
    af58:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    af5a:	68fb      	ldr	r3, [r7, #12]
    af5c:	2b00      	cmp	r3, #0
    af5e:	d101      	bne.n	af64 <xTimerGenericCommand+0x1c>
    af60:	b672      	cpsid	i
    af62:	e7fe      	b.n	af62 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    af64:	4b1e      	ldr	r3, [pc, #120]	; (afe0 <xTimerGenericCommand+0x98>)
    af66:	681b      	ldr	r3, [r3, #0]
    af68:	2b00      	cmp	r3, #0
    af6a:	d033      	beq.n	afd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    af6c:	2310      	movs	r3, #16
    af6e:	18fb      	adds	r3, r7, r3
    af70:	68ba      	ldr	r2, [r7, #8]
    af72:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    af74:	2310      	movs	r3, #16
    af76:	18fb      	adds	r3, r7, r3
    af78:	687a      	ldr	r2, [r7, #4]
    af7a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    af7c:	2310      	movs	r3, #16
    af7e:	18fb      	adds	r3, r7, r3
    af80:	68fa      	ldr	r2, [r7, #12]
    af82:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    af84:	68bb      	ldr	r3, [r7, #8]
    af86:	2b05      	cmp	r3, #5
    af88:	dc1a      	bgt.n	afc0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    af8a:	4b16      	ldr	r3, [pc, #88]	; (afe4 <xTimerGenericCommand+0x9c>)
    af8c:	4798      	blx	r3
    af8e:	0003      	movs	r3, r0
    af90:	2b02      	cmp	r3, #2
    af92:	d10a      	bne.n	afaa <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    af94:	4b12      	ldr	r3, [pc, #72]	; (afe0 <xTimerGenericCommand+0x98>)
    af96:	6818      	ldr	r0, [r3, #0]
    af98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    af9a:	2310      	movs	r3, #16
    af9c:	18f9      	adds	r1, r7, r3
    af9e:	2300      	movs	r3, #0
    afa0:	4c11      	ldr	r4, [pc, #68]	; (afe8 <xTimerGenericCommand+0xa0>)
    afa2:	47a0      	blx	r4
    afa4:	0003      	movs	r3, r0
    afa6:	61fb      	str	r3, [r7, #28]
    afa8:	e014      	b.n	afd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    afaa:	4b0d      	ldr	r3, [pc, #52]	; (afe0 <xTimerGenericCommand+0x98>)
    afac:	6818      	ldr	r0, [r3, #0]
    afae:	2310      	movs	r3, #16
    afb0:	18f9      	adds	r1, r7, r3
    afb2:	2300      	movs	r3, #0
    afb4:	2200      	movs	r2, #0
    afb6:	4c0c      	ldr	r4, [pc, #48]	; (afe8 <xTimerGenericCommand+0xa0>)
    afb8:	47a0      	blx	r4
    afba:	0003      	movs	r3, r0
    afbc:	61fb      	str	r3, [r7, #28]
    afbe:	e009      	b.n	afd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    afc0:	4b07      	ldr	r3, [pc, #28]	; (afe0 <xTimerGenericCommand+0x98>)
    afc2:	6818      	ldr	r0, [r3, #0]
    afc4:	683a      	ldr	r2, [r7, #0]
    afc6:	2310      	movs	r3, #16
    afc8:	18f9      	adds	r1, r7, r3
    afca:	2300      	movs	r3, #0
    afcc:	4c07      	ldr	r4, [pc, #28]	; (afec <xTimerGenericCommand+0xa4>)
    afce:	47a0      	blx	r4
    afd0:	0003      	movs	r3, r0
    afd2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    afd4:	69fb      	ldr	r3, [r7, #28]
}
    afd6:	0018      	movs	r0, r3
    afd8:	46bd      	mov	sp, r7
    afda:	b009      	add	sp, #36	; 0x24
    afdc:	bd90      	pop	{r4, r7, pc}
    afde:	46c0      	nop			; (mov r8, r8)
    afe0:	200042a0 	.word	0x200042a0
    afe4:	0000a949 	.word	0x0000a949
    afe8:	000081bd 	.word	0x000081bd
    afec:	0000861d 	.word	0x0000861d

0000aff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    aff0:	b590      	push	{r4, r7, lr}
    aff2:	b087      	sub	sp, #28
    aff4:	af02      	add	r7, sp, #8
    aff6:	6078      	str	r0, [r7, #4]
    aff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    affa:	4b18      	ldr	r3, [pc, #96]	; (b05c <prvProcessExpiredTimer+0x6c>)
    affc:	681b      	ldr	r3, [r3, #0]
    affe:	68db      	ldr	r3, [r3, #12]
    b000:	68db      	ldr	r3, [r3, #12]
    b002:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    b004:	68fb      	ldr	r3, [r7, #12]
    b006:	3304      	adds	r3, #4
    b008:	0018      	movs	r0, r3
    b00a:	4b15      	ldr	r3, [pc, #84]	; (b060 <prvProcessExpiredTimer+0x70>)
    b00c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    b00e:	68fb      	ldr	r3, [r7, #12]
    b010:	69db      	ldr	r3, [r3, #28]
    b012:	2b01      	cmp	r3, #1
    b014:	d119      	bne.n	b04a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    b016:	68fb      	ldr	r3, [r7, #12]
    b018:	699a      	ldr	r2, [r3, #24]
    b01a:	687b      	ldr	r3, [r7, #4]
    b01c:	18d1      	adds	r1, r2, r3
    b01e:	687b      	ldr	r3, [r7, #4]
    b020:	683a      	ldr	r2, [r7, #0]
    b022:	68f8      	ldr	r0, [r7, #12]
    b024:	4c0f      	ldr	r4, [pc, #60]	; (b064 <prvProcessExpiredTimer+0x74>)
    b026:	47a0      	blx	r4
    b028:	1e03      	subs	r3, r0, #0
    b02a:	d00e      	beq.n	b04a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    b02c:	687a      	ldr	r2, [r7, #4]
    b02e:	68f8      	ldr	r0, [r7, #12]
    b030:	2300      	movs	r3, #0
    b032:	9300      	str	r3, [sp, #0]
    b034:	2300      	movs	r3, #0
    b036:	2100      	movs	r1, #0
    b038:	4c0b      	ldr	r4, [pc, #44]	; (b068 <prvProcessExpiredTimer+0x78>)
    b03a:	47a0      	blx	r4
    b03c:	0003      	movs	r3, r0
    b03e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    b040:	68bb      	ldr	r3, [r7, #8]
    b042:	2b00      	cmp	r3, #0
    b044:	d101      	bne.n	b04a <prvProcessExpiredTimer+0x5a>
    b046:	b672      	cpsid	i
    b048:	e7fe      	b.n	b048 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    b04a:	68fb      	ldr	r3, [r7, #12]
    b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b04e:	68fa      	ldr	r2, [r7, #12]
    b050:	0010      	movs	r0, r2
    b052:	4798      	blx	r3
}
    b054:	46c0      	nop			; (mov r8, r8)
    b056:	46bd      	mov	sp, r7
    b058:	b005      	add	sp, #20
    b05a:	bd90      	pop	{r4, r7, pc}
    b05c:	20004298 	.word	0x20004298
    b060:	00007a97 	.word	0x00007a97
    b064:	0000b1d5 	.word	0x0000b1d5
    b068:	0000af49 	.word	0x0000af49

0000b06c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    b06c:	b580      	push	{r7, lr}
    b06e:	b084      	sub	sp, #16
    b070:	af00      	add	r7, sp, #0
    b072:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    b074:	4b08      	ldr	r3, [pc, #32]	; (b098 <prvTimerTask+0x2c>)
    b076:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    b078:	2308      	movs	r3, #8
    b07a:	18fb      	adds	r3, r7, r3
    b07c:	0018      	movs	r0, r3
    b07e:	4b07      	ldr	r3, [pc, #28]	; (b09c <prvTimerTask+0x30>)
    b080:	4798      	blx	r3
    b082:	0003      	movs	r3, r0
    b084:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    b086:	68ba      	ldr	r2, [r7, #8]
    b088:	68fb      	ldr	r3, [r7, #12]
    b08a:	0011      	movs	r1, r2
    b08c:	0018      	movs	r0, r3
    b08e:	4b04      	ldr	r3, [pc, #16]	; (b0a0 <prvTimerTask+0x34>)
    b090:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    b092:	4b04      	ldr	r3, [pc, #16]	; (b0a4 <prvTimerTask+0x38>)
    b094:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    b096:	e7ef      	b.n	b078 <prvTimerTask+0xc>
    b098:	000202a1 	.word	0x000202a1
    b09c:	0000b14d 	.word	0x0000b14d
    b0a0:	0000b0a9 	.word	0x0000b0a9
    b0a4:	0000b25d 	.word	0x0000b25d

0000b0a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    b0a8:	b580      	push	{r7, lr}
    b0aa:	b084      	sub	sp, #16
    b0ac:	af00      	add	r7, sp, #0
    b0ae:	6078      	str	r0, [r7, #4]
    b0b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    b0b2:	4b1e      	ldr	r3, [pc, #120]	; (b12c <prvProcessTimerOrBlockTask+0x84>)
    b0b4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    b0b6:	2308      	movs	r3, #8
    b0b8:	18fb      	adds	r3, r7, r3
    b0ba:	0018      	movs	r0, r3
    b0bc:	4b1c      	ldr	r3, [pc, #112]	; (b130 <prvProcessTimerOrBlockTask+0x88>)
    b0be:	4798      	blx	r3
    b0c0:	0003      	movs	r3, r0
    b0c2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    b0c4:	68bb      	ldr	r3, [r7, #8]
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	d129      	bne.n	b11e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    b0ca:	683b      	ldr	r3, [r7, #0]
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	d10c      	bne.n	b0ea <prvProcessTimerOrBlockTask+0x42>
    b0d0:	687a      	ldr	r2, [r7, #4]
    b0d2:	68fb      	ldr	r3, [r7, #12]
    b0d4:	429a      	cmp	r2, r3
    b0d6:	d808      	bhi.n	b0ea <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    b0d8:	4b16      	ldr	r3, [pc, #88]	; (b134 <prvProcessTimerOrBlockTask+0x8c>)
    b0da:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    b0dc:	68fa      	ldr	r2, [r7, #12]
    b0de:	687b      	ldr	r3, [r7, #4]
    b0e0:	0011      	movs	r1, r2
    b0e2:	0018      	movs	r0, r3
    b0e4:	4b14      	ldr	r3, [pc, #80]	; (b138 <prvProcessTimerOrBlockTask+0x90>)
    b0e6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    b0e8:	e01b      	b.n	b122 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    b0ea:	683b      	ldr	r3, [r7, #0]
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d006      	beq.n	b0fe <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    b0f0:	4b12      	ldr	r3, [pc, #72]	; (b13c <prvProcessTimerOrBlockTask+0x94>)
    b0f2:	681b      	ldr	r3, [r3, #0]
    b0f4:	681b      	ldr	r3, [r3, #0]
    b0f6:	425a      	negs	r2, r3
    b0f8:	4153      	adcs	r3, r2
    b0fa:	b2db      	uxtb	r3, r3
    b0fc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    b0fe:	4b10      	ldr	r3, [pc, #64]	; (b140 <prvProcessTimerOrBlockTask+0x98>)
    b100:	6818      	ldr	r0, [r3, #0]
    b102:	687a      	ldr	r2, [r7, #4]
    b104:	68fb      	ldr	r3, [r7, #12]
    b106:	1ad3      	subs	r3, r2, r3
    b108:	683a      	ldr	r2, [r7, #0]
    b10a:	0019      	movs	r1, r3
    b10c:	4b0d      	ldr	r3, [pc, #52]	; (b144 <prvProcessTimerOrBlockTask+0x9c>)
    b10e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    b110:	4b08      	ldr	r3, [pc, #32]	; (b134 <prvProcessTimerOrBlockTask+0x8c>)
    b112:	4798      	blx	r3
    b114:	1e03      	subs	r3, r0, #0
    b116:	d104      	bne.n	b122 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    b118:	4b0b      	ldr	r3, [pc, #44]	; (b148 <prvProcessTimerOrBlockTask+0xa0>)
    b11a:	4798      	blx	r3
}
    b11c:	e001      	b.n	b122 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    b11e:	4b05      	ldr	r3, [pc, #20]	; (b134 <prvProcessTimerOrBlockTask+0x8c>)
    b120:	4798      	blx	r3
}
    b122:	46c0      	nop			; (mov r8, r8)
    b124:	46bd      	mov	sp, r7
    b126:	b004      	add	sp, #16
    b128:	bd80      	pop	{r7, pc}
    b12a:	46c0      	nop			; (mov r8, r8)
    b12c:	00009ee1 	.word	0x00009ee1
    b130:	0000b18d 	.word	0x0000b18d
    b134:	00009ef9 	.word	0x00009ef9
    b138:	0000aff1 	.word	0x0000aff1
    b13c:	2000429c 	.word	0x2000429c
    b140:	200042a0 	.word	0x200042a0
    b144:	00009681 	.word	0x00009681
    b148:	00007c11 	.word	0x00007c11

0000b14c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    b14c:	b580      	push	{r7, lr}
    b14e:	b084      	sub	sp, #16
    b150:	af00      	add	r7, sp, #0
    b152:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    b154:	4b0c      	ldr	r3, [pc, #48]	; (b188 <prvGetNextExpireTime+0x3c>)
    b156:	681b      	ldr	r3, [r3, #0]
    b158:	681b      	ldr	r3, [r3, #0]
    b15a:	425a      	negs	r2, r3
    b15c:	4153      	adcs	r3, r2
    b15e:	b2db      	uxtb	r3, r3
    b160:	001a      	movs	r2, r3
    b162:	687b      	ldr	r3, [r7, #4]
    b164:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    b166:	687b      	ldr	r3, [r7, #4]
    b168:	681b      	ldr	r3, [r3, #0]
    b16a:	2b00      	cmp	r3, #0
    b16c:	d105      	bne.n	b17a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    b16e:	4b06      	ldr	r3, [pc, #24]	; (b188 <prvGetNextExpireTime+0x3c>)
    b170:	681b      	ldr	r3, [r3, #0]
    b172:	68db      	ldr	r3, [r3, #12]
    b174:	681b      	ldr	r3, [r3, #0]
    b176:	60fb      	str	r3, [r7, #12]
    b178:	e001      	b.n	b17e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    b17a:	2300      	movs	r3, #0
    b17c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    b17e:	68fb      	ldr	r3, [r7, #12]
}
    b180:	0018      	movs	r0, r3
    b182:	46bd      	mov	sp, r7
    b184:	b004      	add	sp, #16
    b186:	bd80      	pop	{r7, pc}
    b188:	20004298 	.word	0x20004298

0000b18c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    b18c:	b580      	push	{r7, lr}
    b18e:	b084      	sub	sp, #16
    b190:	af00      	add	r7, sp, #0
    b192:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    b194:	4b0c      	ldr	r3, [pc, #48]	; (b1c8 <prvSampleTimeNow+0x3c>)
    b196:	4798      	blx	r3
    b198:	0003      	movs	r3, r0
    b19a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    b19c:	4b0b      	ldr	r3, [pc, #44]	; (b1cc <prvSampleTimeNow+0x40>)
    b19e:	681b      	ldr	r3, [r3, #0]
    b1a0:	68fa      	ldr	r2, [r7, #12]
    b1a2:	429a      	cmp	r2, r3
    b1a4:	d205      	bcs.n	b1b2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    b1a6:	4b0a      	ldr	r3, [pc, #40]	; (b1d0 <prvSampleTimeNow+0x44>)
    b1a8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    b1aa:	687b      	ldr	r3, [r7, #4]
    b1ac:	2201      	movs	r2, #1
    b1ae:	601a      	str	r2, [r3, #0]
    b1b0:	e002      	b.n	b1b8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    b1b2:	687b      	ldr	r3, [r7, #4]
    b1b4:	2200      	movs	r2, #0
    b1b6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    b1b8:	4b04      	ldr	r3, [pc, #16]	; (b1cc <prvSampleTimeNow+0x40>)
    b1ba:	68fa      	ldr	r2, [r7, #12]
    b1bc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    b1be:	68fb      	ldr	r3, [r7, #12]
}
    b1c0:	0018      	movs	r0, r3
    b1c2:	46bd      	mov	sp, r7
    b1c4:	b004      	add	sp, #16
    b1c6:	bd80      	pop	{r7, pc}
    b1c8:	0000a069 	.word	0x0000a069
    b1cc:	200042a8 	.word	0x200042a8
    b1d0:	0000b375 	.word	0x0000b375

0000b1d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    b1d4:	b580      	push	{r7, lr}
    b1d6:	b086      	sub	sp, #24
    b1d8:	af00      	add	r7, sp, #0
    b1da:	60f8      	str	r0, [r7, #12]
    b1dc:	60b9      	str	r1, [r7, #8]
    b1de:	607a      	str	r2, [r7, #4]
    b1e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    b1e2:	2300      	movs	r3, #0
    b1e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    b1e6:	68fb      	ldr	r3, [r7, #12]
    b1e8:	68ba      	ldr	r2, [r7, #8]
    b1ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    b1ec:	68fb      	ldr	r3, [r7, #12]
    b1ee:	68fa      	ldr	r2, [r7, #12]
    b1f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    b1f2:	68ba      	ldr	r2, [r7, #8]
    b1f4:	687b      	ldr	r3, [r7, #4]
    b1f6:	429a      	cmp	r2, r3
    b1f8:	d812      	bhi.n	b220 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b1fa:	687a      	ldr	r2, [r7, #4]
    b1fc:	683b      	ldr	r3, [r7, #0]
    b1fe:	1ad2      	subs	r2, r2, r3
    b200:	68fb      	ldr	r3, [r7, #12]
    b202:	699b      	ldr	r3, [r3, #24]
    b204:	429a      	cmp	r2, r3
    b206:	d302      	bcc.n	b20e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    b208:	2301      	movs	r3, #1
    b20a:	617b      	str	r3, [r7, #20]
    b20c:	e01b      	b.n	b246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    b20e:	4b10      	ldr	r3, [pc, #64]	; (b250 <prvInsertTimerInActiveList+0x7c>)
    b210:	681a      	ldr	r2, [r3, #0]
    b212:	68fb      	ldr	r3, [r7, #12]
    b214:	3304      	adds	r3, #4
    b216:	0019      	movs	r1, r3
    b218:	0010      	movs	r0, r2
    b21a:	4b0e      	ldr	r3, [pc, #56]	; (b254 <prvInsertTimerInActiveList+0x80>)
    b21c:	4798      	blx	r3
    b21e:	e012      	b.n	b246 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    b220:	687a      	ldr	r2, [r7, #4]
    b222:	683b      	ldr	r3, [r7, #0]
    b224:	429a      	cmp	r2, r3
    b226:	d206      	bcs.n	b236 <prvInsertTimerInActiveList+0x62>
    b228:	68ba      	ldr	r2, [r7, #8]
    b22a:	683b      	ldr	r3, [r7, #0]
    b22c:	429a      	cmp	r2, r3
    b22e:	d302      	bcc.n	b236 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    b230:	2301      	movs	r3, #1
    b232:	617b      	str	r3, [r7, #20]
    b234:	e007      	b.n	b246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    b236:	4b08      	ldr	r3, [pc, #32]	; (b258 <prvInsertTimerInActiveList+0x84>)
    b238:	681a      	ldr	r2, [r3, #0]
    b23a:	68fb      	ldr	r3, [r7, #12]
    b23c:	3304      	adds	r3, #4
    b23e:	0019      	movs	r1, r3
    b240:	0010      	movs	r0, r2
    b242:	4b04      	ldr	r3, [pc, #16]	; (b254 <prvInsertTimerInActiveList+0x80>)
    b244:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    b246:	697b      	ldr	r3, [r7, #20]
}
    b248:	0018      	movs	r0, r3
    b24a:	46bd      	mov	sp, r7
    b24c:	b006      	add	sp, #24
    b24e:	bd80      	pop	{r7, pc}
    b250:	2000429c 	.word	0x2000429c
    b254:	00007a2b 	.word	0x00007a2b
    b258:	20004298 	.word	0x20004298

0000b25c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    b25c:	b590      	push	{r4, r7, lr}
    b25e:	b08b      	sub	sp, #44	; 0x2c
    b260:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    b262:	e068      	b.n	b336 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    b264:	2308      	movs	r3, #8
    b266:	18fb      	adds	r3, r7, r3
    b268:	681b      	ldr	r3, [r3, #0]
    b26a:	2b00      	cmp	r3, #0
    b26c:	db63      	blt.n	b336 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    b26e:	2308      	movs	r3, #8
    b270:	18fb      	adds	r3, r7, r3
    b272:	689b      	ldr	r3, [r3, #8]
    b274:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    b276:	69fb      	ldr	r3, [r7, #28]
    b278:	695b      	ldr	r3, [r3, #20]
    b27a:	2b00      	cmp	r3, #0
    b27c:	d004      	beq.n	b288 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    b27e:	69fb      	ldr	r3, [r7, #28]
    b280:	3304      	adds	r3, #4
    b282:	0018      	movs	r0, r3
    b284:	4b33      	ldr	r3, [pc, #204]	; (b354 <prvProcessReceivedCommands+0xf8>)
    b286:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    b288:	1d3b      	adds	r3, r7, #4
    b28a:	0018      	movs	r0, r3
    b28c:	4b32      	ldr	r3, [pc, #200]	; (b358 <prvProcessReceivedCommands+0xfc>)
    b28e:	4798      	blx	r3
    b290:	0003      	movs	r3, r0
    b292:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    b294:	2308      	movs	r3, #8
    b296:	18fb      	adds	r3, r7, r3
    b298:	681b      	ldr	r3, [r3, #0]
    b29a:	2b09      	cmp	r3, #9
    b29c:	d84a      	bhi.n	b334 <prvProcessReceivedCommands+0xd8>
    b29e:	009a      	lsls	r2, r3, #2
    b2a0:	4b2e      	ldr	r3, [pc, #184]	; (b35c <prvProcessReceivedCommands+0x100>)
    b2a2:	18d3      	adds	r3, r2, r3
    b2a4:	681b      	ldr	r3, [r3, #0]
    b2a6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    b2a8:	2308      	movs	r3, #8
    b2aa:	18fb      	adds	r3, r7, r3
    b2ac:	685a      	ldr	r2, [r3, #4]
    b2ae:	69fb      	ldr	r3, [r7, #28]
    b2b0:	699b      	ldr	r3, [r3, #24]
    b2b2:	18d1      	adds	r1, r2, r3
    b2b4:	2308      	movs	r3, #8
    b2b6:	18fb      	adds	r3, r7, r3
    b2b8:	685b      	ldr	r3, [r3, #4]
    b2ba:	69ba      	ldr	r2, [r7, #24]
    b2bc:	69f8      	ldr	r0, [r7, #28]
    b2be:	4c28      	ldr	r4, [pc, #160]	; (b360 <prvProcessReceivedCommands+0x104>)
    b2c0:	47a0      	blx	r4
    b2c2:	1e03      	subs	r3, r0, #0
    b2c4:	d037      	beq.n	b336 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    b2c6:	69fb      	ldr	r3, [r7, #28]
    b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b2ca:	69fa      	ldr	r2, [r7, #28]
    b2cc:	0010      	movs	r0, r2
    b2ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    b2d0:	69fb      	ldr	r3, [r7, #28]
    b2d2:	69db      	ldr	r3, [r3, #28]
    b2d4:	2b01      	cmp	r3, #1
    b2d6:	d12e      	bne.n	b336 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    b2d8:	2308      	movs	r3, #8
    b2da:	18fb      	adds	r3, r7, r3
    b2dc:	685a      	ldr	r2, [r3, #4]
    b2de:	69fb      	ldr	r3, [r7, #28]
    b2e0:	699b      	ldr	r3, [r3, #24]
    b2e2:	18d2      	adds	r2, r2, r3
    b2e4:	69f8      	ldr	r0, [r7, #28]
    b2e6:	2300      	movs	r3, #0
    b2e8:	9300      	str	r3, [sp, #0]
    b2ea:	2300      	movs	r3, #0
    b2ec:	2100      	movs	r1, #0
    b2ee:	4c1d      	ldr	r4, [pc, #116]	; (b364 <prvProcessReceivedCommands+0x108>)
    b2f0:	47a0      	blx	r4
    b2f2:	0003      	movs	r3, r0
    b2f4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    b2f6:	697b      	ldr	r3, [r7, #20]
    b2f8:	2b00      	cmp	r3, #0
    b2fa:	d11c      	bne.n	b336 <prvProcessReceivedCommands+0xda>
    b2fc:	b672      	cpsid	i
    b2fe:	e7fe      	b.n	b2fe <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    b300:	2308      	movs	r3, #8
    b302:	18fb      	adds	r3, r7, r3
    b304:	685a      	ldr	r2, [r3, #4]
    b306:	69fb      	ldr	r3, [r7, #28]
    b308:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    b30a:	69fb      	ldr	r3, [r7, #28]
    b30c:	699b      	ldr	r3, [r3, #24]
    b30e:	2b00      	cmp	r3, #0
    b310:	d101      	bne.n	b316 <prvProcessReceivedCommands+0xba>
    b312:	b672      	cpsid	i
    b314:	e7fe      	b.n	b314 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    b316:	69fb      	ldr	r3, [r7, #28]
    b318:	699a      	ldr	r2, [r3, #24]
    b31a:	69bb      	ldr	r3, [r7, #24]
    b31c:	18d1      	adds	r1, r2, r3
    b31e:	69bb      	ldr	r3, [r7, #24]
    b320:	69ba      	ldr	r2, [r7, #24]
    b322:	69f8      	ldr	r0, [r7, #28]
    b324:	4c0e      	ldr	r4, [pc, #56]	; (b360 <prvProcessReceivedCommands+0x104>)
    b326:	47a0      	blx	r4
					break;
    b328:	e005      	b.n	b336 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    b32a:	69fb      	ldr	r3, [r7, #28]
    b32c:	0018      	movs	r0, r3
    b32e:	4b0e      	ldr	r3, [pc, #56]	; (b368 <prvProcessReceivedCommands+0x10c>)
    b330:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    b332:	e000      	b.n	b336 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    b334:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    b336:	4b0d      	ldr	r3, [pc, #52]	; (b36c <prvProcessReceivedCommands+0x110>)
    b338:	681b      	ldr	r3, [r3, #0]
    b33a:	2208      	movs	r2, #8
    b33c:	18b9      	adds	r1, r7, r2
    b33e:	2200      	movs	r2, #0
    b340:	0018      	movs	r0, r3
    b342:	4b0b      	ldr	r3, [pc, #44]	; (b370 <prvProcessReceivedCommands+0x114>)
    b344:	4798      	blx	r3
    b346:	1e03      	subs	r3, r0, #0
    b348:	d18c      	bne.n	b264 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    b34a:	46c0      	nop			; (mov r8, r8)
    b34c:	46bd      	mov	sp, r7
    b34e:	b009      	add	sp, #36	; 0x24
    b350:	bd90      	pop	{r4, r7, pc}
    b352:	46c0      	nop			; (mov r8, r8)
    b354:	00007a97 	.word	0x00007a97
    b358:	0000b18d 	.word	0x0000b18d
    b35c:	0002701c 	.word	0x0002701c
    b360:	0000b1d5 	.word	0x0000b1d5
    b364:	0000af49 	.word	0x0000af49
    b368:	00007e25 	.word	0x00007e25
    b36c:	200042a0 	.word	0x200042a0
    b370:	00008a75 	.word	0x00008a75

0000b374 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    b374:	b590      	push	{r4, r7, lr}
    b376:	b089      	sub	sp, #36	; 0x24
    b378:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    b37a:	e03e      	b.n	b3fa <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    b37c:	4b28      	ldr	r3, [pc, #160]	; (b420 <prvSwitchTimerLists+0xac>)
    b37e:	681b      	ldr	r3, [r3, #0]
    b380:	68db      	ldr	r3, [r3, #12]
    b382:	681b      	ldr	r3, [r3, #0]
    b384:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    b386:	4b26      	ldr	r3, [pc, #152]	; (b420 <prvSwitchTimerLists+0xac>)
    b388:	681b      	ldr	r3, [r3, #0]
    b38a:	68db      	ldr	r3, [r3, #12]
    b38c:	68db      	ldr	r3, [r3, #12]
    b38e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    b390:	693b      	ldr	r3, [r7, #16]
    b392:	3304      	adds	r3, #4
    b394:	0018      	movs	r0, r3
    b396:	4b23      	ldr	r3, [pc, #140]	; (b424 <prvSwitchTimerLists+0xb0>)
    b398:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    b39a:	693b      	ldr	r3, [r7, #16]
    b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b39e:	693a      	ldr	r2, [r7, #16]
    b3a0:	0010      	movs	r0, r2
    b3a2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    b3a4:	693b      	ldr	r3, [r7, #16]
    b3a6:	69db      	ldr	r3, [r3, #28]
    b3a8:	2b01      	cmp	r3, #1
    b3aa:	d126      	bne.n	b3fa <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    b3ac:	693b      	ldr	r3, [r7, #16]
    b3ae:	699a      	ldr	r2, [r3, #24]
    b3b0:	697b      	ldr	r3, [r7, #20]
    b3b2:	18d3      	adds	r3, r2, r3
    b3b4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    b3b6:	68fa      	ldr	r2, [r7, #12]
    b3b8:	697b      	ldr	r3, [r7, #20]
    b3ba:	429a      	cmp	r2, r3
    b3bc:	d90e      	bls.n	b3dc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    b3be:	693b      	ldr	r3, [r7, #16]
    b3c0:	68fa      	ldr	r2, [r7, #12]
    b3c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    b3c4:	693b      	ldr	r3, [r7, #16]
    b3c6:	693a      	ldr	r2, [r7, #16]
    b3c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    b3ca:	4b15      	ldr	r3, [pc, #84]	; (b420 <prvSwitchTimerLists+0xac>)
    b3cc:	681a      	ldr	r2, [r3, #0]
    b3ce:	693b      	ldr	r3, [r7, #16]
    b3d0:	3304      	adds	r3, #4
    b3d2:	0019      	movs	r1, r3
    b3d4:	0010      	movs	r0, r2
    b3d6:	4b14      	ldr	r3, [pc, #80]	; (b428 <prvSwitchTimerLists+0xb4>)
    b3d8:	4798      	blx	r3
    b3da:	e00e      	b.n	b3fa <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    b3dc:	697a      	ldr	r2, [r7, #20]
    b3de:	6938      	ldr	r0, [r7, #16]
    b3e0:	2300      	movs	r3, #0
    b3e2:	9300      	str	r3, [sp, #0]
    b3e4:	2300      	movs	r3, #0
    b3e6:	2100      	movs	r1, #0
    b3e8:	4c10      	ldr	r4, [pc, #64]	; (b42c <prvSwitchTimerLists+0xb8>)
    b3ea:	47a0      	blx	r4
    b3ec:	0003      	movs	r3, r0
    b3ee:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    b3f0:	68bb      	ldr	r3, [r7, #8]
    b3f2:	2b00      	cmp	r3, #0
    b3f4:	d101      	bne.n	b3fa <prvSwitchTimerLists+0x86>
    b3f6:	b672      	cpsid	i
    b3f8:	e7fe      	b.n	b3f8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    b3fa:	4b09      	ldr	r3, [pc, #36]	; (b420 <prvSwitchTimerLists+0xac>)
    b3fc:	681b      	ldr	r3, [r3, #0]
    b3fe:	681b      	ldr	r3, [r3, #0]
    b400:	2b00      	cmp	r3, #0
    b402:	d1bb      	bne.n	b37c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    b404:	4b06      	ldr	r3, [pc, #24]	; (b420 <prvSwitchTimerLists+0xac>)
    b406:	681b      	ldr	r3, [r3, #0]
    b408:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    b40a:	4b09      	ldr	r3, [pc, #36]	; (b430 <prvSwitchTimerLists+0xbc>)
    b40c:	681a      	ldr	r2, [r3, #0]
    b40e:	4b04      	ldr	r3, [pc, #16]	; (b420 <prvSwitchTimerLists+0xac>)
    b410:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    b412:	4b07      	ldr	r3, [pc, #28]	; (b430 <prvSwitchTimerLists+0xbc>)
    b414:	687a      	ldr	r2, [r7, #4]
    b416:	601a      	str	r2, [r3, #0]
}
    b418:	46c0      	nop			; (mov r8, r8)
    b41a:	46bd      	mov	sp, r7
    b41c:	b007      	add	sp, #28
    b41e:	bd90      	pop	{r4, r7, pc}
    b420:	20004298 	.word	0x20004298
    b424:	00007a97 	.word	0x00007a97
    b428:	00007a2b 	.word	0x00007a2b
    b42c:	0000af49 	.word	0x0000af49
    b430:	2000429c 	.word	0x2000429c

0000b434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    b434:	b580      	push	{r7, lr}
    b436:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    b438:	4b10      	ldr	r3, [pc, #64]	; (b47c <prvCheckForValidListAndQueue+0x48>)
    b43a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    b43c:	4b10      	ldr	r3, [pc, #64]	; (b480 <prvCheckForValidListAndQueue+0x4c>)
    b43e:	681b      	ldr	r3, [r3, #0]
    b440:	2b00      	cmp	r3, #0
    b442:	d115      	bne.n	b470 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    b444:	4b0f      	ldr	r3, [pc, #60]	; (b484 <prvCheckForValidListAndQueue+0x50>)
    b446:	0018      	movs	r0, r3
    b448:	4b0f      	ldr	r3, [pc, #60]	; (b488 <prvCheckForValidListAndQueue+0x54>)
    b44a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    b44c:	4b0f      	ldr	r3, [pc, #60]	; (b48c <prvCheckForValidListAndQueue+0x58>)
    b44e:	0018      	movs	r0, r3
    b450:	4b0d      	ldr	r3, [pc, #52]	; (b488 <prvCheckForValidListAndQueue+0x54>)
    b452:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    b454:	4b0e      	ldr	r3, [pc, #56]	; (b490 <prvCheckForValidListAndQueue+0x5c>)
    b456:	4a0b      	ldr	r2, [pc, #44]	; (b484 <prvCheckForValidListAndQueue+0x50>)
    b458:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    b45a:	4b0e      	ldr	r3, [pc, #56]	; (b494 <prvCheckForValidListAndQueue+0x60>)
    b45c:	4a0b      	ldr	r2, [pc, #44]	; (b48c <prvCheckForValidListAndQueue+0x58>)
    b45e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    b460:	2200      	movs	r2, #0
    b462:	210c      	movs	r1, #12
    b464:	2005      	movs	r0, #5
    b466:	4b0c      	ldr	r3, [pc, #48]	; (b498 <prvCheckForValidListAndQueue+0x64>)
    b468:	4798      	blx	r3
    b46a:	0002      	movs	r2, r0
    b46c:	4b04      	ldr	r3, [pc, #16]	; (b480 <prvCheckForValidListAndQueue+0x4c>)
    b46e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    b470:	4b0a      	ldr	r3, [pc, #40]	; (b49c <prvCheckForValidListAndQueue+0x68>)
    b472:	4798      	blx	r3
}
    b474:	46c0      	nop			; (mov r8, r8)
    b476:	46bd      	mov	sp, r7
    b478:	bd80      	pop	{r7, pc}
    b47a:	46c0      	nop			; (mov r8, r8)
    b47c:	00007c29 	.word	0x00007c29
    b480:	200042a0 	.word	0x200042a0
    b484:	20004270 	.word	0x20004270
    b488:	00007995 	.word	0x00007995
    b48c:	20004284 	.word	0x20004284
    b490:	20004298 	.word	0x20004298
    b494:	2000429c 	.word	0x2000429c
    b498:	00007f15 	.word	0x00007f15
    b49c:	00007c4d 	.word	0x00007c4d

0000b4a0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    b4a0:	b580      	push	{r7, lr}
    b4a2:	b082      	sub	sp, #8
    b4a4:	af00      	add	r7, sp, #0
    b4a6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    b4a8:	687b      	ldr	r3, [r7, #4]
    b4aa:	7c1b      	ldrb	r3, [r3, #16]
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d00b      	beq.n	b4c8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b4b0:	687b      	ldr	r3, [r7, #4]
    b4b2:	689b      	ldr	r3, [r3, #8]
    b4b4:	1c5a      	adds	r2, r3, #1
    b4b6:	687b      	ldr	r3, [r7, #4]
    b4b8:	68d9      	ldr	r1, [r3, #12]
    b4ba:	4b10      	ldr	r3, [pc, #64]	; (b4fc <advance_pointer+0x5c>)
    b4bc:	0010      	movs	r0, r2
    b4be:	4798      	blx	r3
    b4c0:	000b      	movs	r3, r1
    b4c2:	001a      	movs	r2, r3
    b4c4:	687b      	ldr	r3, [r7, #4]
    b4c6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    b4c8:	687b      	ldr	r3, [r7, #4]
    b4ca:	685b      	ldr	r3, [r3, #4]
    b4cc:	1c5a      	adds	r2, r3, #1
    b4ce:	687b      	ldr	r3, [r7, #4]
    b4d0:	68d9      	ldr	r1, [r3, #12]
    b4d2:	4b0a      	ldr	r3, [pc, #40]	; (b4fc <advance_pointer+0x5c>)
    b4d4:	0010      	movs	r0, r2
    b4d6:	4798      	blx	r3
    b4d8:	000b      	movs	r3, r1
    b4da:	001a      	movs	r2, r3
    b4dc:	687b      	ldr	r3, [r7, #4]
    b4de:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    b4e0:	687b      	ldr	r3, [r7, #4]
    b4e2:	685a      	ldr	r2, [r3, #4]
    b4e4:	687b      	ldr	r3, [r7, #4]
    b4e6:	689b      	ldr	r3, [r3, #8]
    b4e8:	1ad3      	subs	r3, r2, r3
    b4ea:	425a      	negs	r2, r3
    b4ec:	4153      	adcs	r3, r2
    b4ee:	b2da      	uxtb	r2, r3
    b4f0:	687b      	ldr	r3, [r7, #4]
    b4f2:	741a      	strb	r2, [r3, #16]
 }
    b4f4:	46c0      	nop			; (mov r8, r8)
    b4f6:	46bd      	mov	sp, r7
    b4f8:	b002      	add	sp, #8
    b4fa:	bd80      	pop	{r7, pc}
    b4fc:	0002057d 	.word	0x0002057d

0000b500 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    b500:	b580      	push	{r7, lr}
    b502:	b082      	sub	sp, #8
    b504:	af00      	add	r7, sp, #0
    b506:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    b508:	687b      	ldr	r3, [r7, #4]
    b50a:	2200      	movs	r2, #0
    b50c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b50e:	687b      	ldr	r3, [r7, #4]
    b510:	689b      	ldr	r3, [r3, #8]
    b512:	1c5a      	adds	r2, r3, #1
    b514:	687b      	ldr	r3, [r7, #4]
    b516:	68d9      	ldr	r1, [r3, #12]
    b518:	4b05      	ldr	r3, [pc, #20]	; (b530 <retreat_pointer+0x30>)
    b51a:	0010      	movs	r0, r2
    b51c:	4798      	blx	r3
    b51e:	000b      	movs	r3, r1
    b520:	001a      	movs	r2, r3
    b522:	687b      	ldr	r3, [r7, #4]
    b524:	609a      	str	r2, [r3, #8]
 }
    b526:	46c0      	nop			; (mov r8, r8)
    b528:	46bd      	mov	sp, r7
    b52a:	b002      	add	sp, #8
    b52c:	bd80      	pop	{r7, pc}
    b52e:	46c0      	nop			; (mov r8, r8)
    b530:	0002057d 	.word	0x0002057d

0000b534 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    b534:	b580      	push	{r7, lr}
    b536:	b084      	sub	sp, #16
    b538:	af00      	add	r7, sp, #0
    b53a:	6078      	str	r0, [r7, #4]
    b53c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    b53e:	2014      	movs	r0, #20
    b540:	4b09      	ldr	r3, [pc, #36]	; (b568 <circular_buf_init+0x34>)
    b542:	4798      	blx	r3
    b544:	0003      	movs	r3, r0
    b546:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    b548:	68fb      	ldr	r3, [r7, #12]
    b54a:	687a      	ldr	r2, [r7, #4]
    b54c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    b54e:	68fb      	ldr	r3, [r7, #12]
    b550:	683a      	ldr	r2, [r7, #0]
    b552:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    b554:	68fb      	ldr	r3, [r7, #12]
    b556:	0018      	movs	r0, r3
    b558:	4b04      	ldr	r3, [pc, #16]	; (b56c <circular_buf_init+0x38>)
    b55a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    b55c:	68fb      	ldr	r3, [r7, #12]
 }
    b55e:	0018      	movs	r0, r3
    b560:	46bd      	mov	sp, r7
    b562:	b004      	add	sp, #16
    b564:	bd80      	pop	{r7, pc}
    b566:	46c0      	nop			; (mov r8, r8)
    b568:	00022d5d 	.word	0x00022d5d
    b56c:	0000b571 	.word	0x0000b571

0000b570 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    b570:	b580      	push	{r7, lr}
    b572:	b082      	sub	sp, #8
    b574:	af00      	add	r7, sp, #0
    b576:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    b578:	687b      	ldr	r3, [r7, #4]
    b57a:	2200      	movs	r2, #0
    b57c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    b57e:	687b      	ldr	r3, [r7, #4]
    b580:	2200      	movs	r2, #0
    b582:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    b584:	687b      	ldr	r3, [r7, #4]
    b586:	2200      	movs	r2, #0
    b588:	741a      	strb	r2, [r3, #16]
 }
    b58a:	46c0      	nop			; (mov r8, r8)
    b58c:	46bd      	mov	sp, r7
    b58e:	b002      	add	sp, #8
    b590:	bd80      	pop	{r7, pc}
	...

0000b594 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    b594:	b580      	push	{r7, lr}
    b596:	b082      	sub	sp, #8
    b598:	af00      	add	r7, sp, #0
    b59a:	6078      	str	r0, [r7, #4]
    b59c:	000a      	movs	r2, r1
    b59e:	1cfb      	adds	r3, r7, #3
    b5a0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    b5a2:	687b      	ldr	r3, [r7, #4]
    b5a4:	681a      	ldr	r2, [r3, #0]
    b5a6:	687b      	ldr	r3, [r7, #4]
    b5a8:	685b      	ldr	r3, [r3, #4]
    b5aa:	18d3      	adds	r3, r2, r3
    b5ac:	1cfa      	adds	r2, r7, #3
    b5ae:	7812      	ldrb	r2, [r2, #0]
    b5b0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    b5b2:	687b      	ldr	r3, [r7, #4]
    b5b4:	0018      	movs	r0, r3
    b5b6:	4b03      	ldr	r3, [pc, #12]	; (b5c4 <circular_buf_put+0x30>)
    b5b8:	4798      	blx	r3
 }
    b5ba:	46c0      	nop			; (mov r8, r8)
    b5bc:	46bd      	mov	sp, r7
    b5be:	b002      	add	sp, #8
    b5c0:	bd80      	pop	{r7, pc}
    b5c2:	46c0      	nop			; (mov r8, r8)
    b5c4:	0000b4a1 	.word	0x0000b4a1

0000b5c8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    b5c8:	b580      	push	{r7, lr}
    b5ca:	b084      	sub	sp, #16
    b5cc:	af00      	add	r7, sp, #0
    b5ce:	6078      	str	r0, [r7, #4]
    b5d0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    b5d2:	2301      	movs	r3, #1
    b5d4:	425b      	negs	r3, r3
    b5d6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    b5d8:	687b      	ldr	r3, [r7, #4]
    b5da:	0018      	movs	r0, r3
    b5dc:	4b0d      	ldr	r3, [pc, #52]	; (b614 <circular_buf_get+0x4c>)
    b5de:	4798      	blx	r3
    b5e0:	0003      	movs	r3, r0
    b5e2:	001a      	movs	r2, r3
    b5e4:	2301      	movs	r3, #1
    b5e6:	4053      	eors	r3, r2
    b5e8:	b2db      	uxtb	r3, r3
    b5ea:	2b00      	cmp	r3, #0
    b5ec:	d00d      	beq.n	b60a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    b5ee:	687b      	ldr	r3, [r7, #4]
    b5f0:	681a      	ldr	r2, [r3, #0]
    b5f2:	687b      	ldr	r3, [r7, #4]
    b5f4:	689b      	ldr	r3, [r3, #8]
    b5f6:	18d3      	adds	r3, r2, r3
    b5f8:	781a      	ldrb	r2, [r3, #0]
    b5fa:	683b      	ldr	r3, [r7, #0]
    b5fc:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    b5fe:	687b      	ldr	r3, [r7, #4]
    b600:	0018      	movs	r0, r3
    b602:	4b05      	ldr	r3, [pc, #20]	; (b618 <circular_buf_get+0x50>)
    b604:	4798      	blx	r3

		 r = 0;
    b606:	2300      	movs	r3, #0
    b608:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    b60a:	68fb      	ldr	r3, [r7, #12]
 }
    b60c:	0018      	movs	r0, r3
    b60e:	46bd      	mov	sp, r7
    b610:	b004      	add	sp, #16
    b612:	bd80      	pop	{r7, pc}
    b614:	0000b61d 	.word	0x0000b61d
    b618:	0000b501 	.word	0x0000b501

0000b61c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    b61c:	b580      	push	{r7, lr}
    b61e:	b082      	sub	sp, #8
    b620:	af00      	add	r7, sp, #0
    b622:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    b624:	687b      	ldr	r3, [r7, #4]
    b626:	7c1b      	ldrb	r3, [r3, #16]
    b628:	2201      	movs	r2, #1
    b62a:	4053      	eors	r3, r2
    b62c:	b2db      	uxtb	r3, r3
    b62e:	2b00      	cmp	r3, #0
    b630:	d007      	beq.n	b642 <circular_buf_empty+0x26>
    b632:	687b      	ldr	r3, [r7, #4]
    b634:	685a      	ldr	r2, [r3, #4]
    b636:	687b      	ldr	r3, [r7, #4]
    b638:	689b      	ldr	r3, [r3, #8]
    b63a:	429a      	cmp	r2, r3
    b63c:	d101      	bne.n	b642 <circular_buf_empty+0x26>
    b63e:	2301      	movs	r3, #1
    b640:	e000      	b.n	b644 <circular_buf_empty+0x28>
    b642:	2300      	movs	r3, #0
    b644:	1c1a      	adds	r2, r3, #0
    b646:	2301      	movs	r3, #1
    b648:	4013      	ands	r3, r2
    b64a:	b2db      	uxtb	r3, r3
 }
    b64c:	0018      	movs	r0, r3
    b64e:	46bd      	mov	sp, r7
    b650:	b002      	add	sp, #8
    b652:	bd80      	pop	{r7, pc}

0000b654 <system_interrupt_enable>:
{
    b654:	b580      	push	{r7, lr}
    b656:	b082      	sub	sp, #8
    b658:	af00      	add	r7, sp, #0
    b65a:	0002      	movs	r2, r0
    b65c:	1dfb      	adds	r3, r7, #7
    b65e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b660:	4b06      	ldr	r3, [pc, #24]	; (b67c <system_interrupt_enable+0x28>)
    b662:	1dfa      	adds	r2, r7, #7
    b664:	7812      	ldrb	r2, [r2, #0]
    b666:	0011      	movs	r1, r2
    b668:	221f      	movs	r2, #31
    b66a:	400a      	ands	r2, r1
    b66c:	2101      	movs	r1, #1
    b66e:	4091      	lsls	r1, r2
    b670:	000a      	movs	r2, r1
    b672:	601a      	str	r2, [r3, #0]
}
    b674:	46c0      	nop			; (mov r8, r8)
    b676:	46bd      	mov	sp, r7
    b678:	b002      	add	sp, #8
    b67a:	bd80      	pop	{r7, pc}
    b67c:	e000e100 	.word	0xe000e100

0000b680 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    b680:	b580      	push	{r7, lr}
    b682:	b084      	sub	sp, #16
    b684:	af00      	add	r7, sp, #0
    b686:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    b688:	687b      	ldr	r3, [r7, #4]
    b68a:	681b      	ldr	r3, [r3, #0]
    b68c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    b68e:	68fb      	ldr	r3, [r7, #12]
    b690:	69db      	ldr	r3, [r3, #28]
    b692:	1e5a      	subs	r2, r3, #1
    b694:	4193      	sbcs	r3, r2
    b696:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    b698:	0018      	movs	r0, r3
    b69a:	46bd      	mov	sp, r7
    b69c:	b004      	add	sp, #16
    b69e:	bd80      	pop	{r7, pc}

0000b6a0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    b6a0:	b580      	push	{r7, lr}
    b6a2:	b082      	sub	sp, #8
    b6a4:	af00      	add	r7, sp, #0
    b6a6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    b6a8:	46c0      	nop			; (mov r8, r8)
    b6aa:	687b      	ldr	r3, [r7, #4]
    b6ac:	0018      	movs	r0, r3
    b6ae:	4b04      	ldr	r3, [pc, #16]	; (b6c0 <_usart_wait_for_sync+0x20>)
    b6b0:	4798      	blx	r3
    b6b2:	1e03      	subs	r3, r0, #0
    b6b4:	d1f9      	bne.n	b6aa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    b6b6:	46c0      	nop			; (mov r8, r8)
    b6b8:	46bd      	mov	sp, r7
    b6ba:	b002      	add	sp, #8
    b6bc:	bd80      	pop	{r7, pc}
    b6be:	46c0      	nop			; (mov r8, r8)
    b6c0:	0000b681 	.word	0x0000b681

0000b6c4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    b6c4:	b580      	push	{r7, lr}
    b6c6:	b082      	sub	sp, #8
    b6c8:	af00      	add	r7, sp, #0
    b6ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b6cc:	687b      	ldr	r3, [r7, #4]
    b6ce:	2280      	movs	r2, #128	; 0x80
    b6d0:	05d2      	lsls	r2, r2, #23
    b6d2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b6d4:	687b      	ldr	r3, [r7, #4]
    b6d6:	2200      	movs	r2, #0
    b6d8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    b6da:	687b      	ldr	r3, [r7, #4]
    b6dc:	22ff      	movs	r2, #255	; 0xff
    b6de:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	2200      	movs	r2, #0
    b6e4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b6e6:	687b      	ldr	r3, [r7, #4]
    b6e8:	2200      	movs	r2, #0
    b6ea:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    b6ec:	687b      	ldr	r3, [r7, #4]
    b6ee:	2296      	movs	r2, #150	; 0x96
    b6f0:	0192      	lsls	r2, r2, #6
    b6f2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    b6f4:	687b      	ldr	r3, [r7, #4]
    b6f6:	2224      	movs	r2, #36	; 0x24
    b6f8:	2101      	movs	r1, #1
    b6fa:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	2225      	movs	r2, #37	; 0x25
    b700:	2101      	movs	r1, #1
    b702:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    b704:	687b      	ldr	r3, [r7, #4]
    b706:	2226      	movs	r2, #38	; 0x26
    b708:	2100      	movs	r1, #0
    b70a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    b70c:	687b      	ldr	r3, [r7, #4]
    b70e:	2227      	movs	r2, #39	; 0x27
    b710:	2100      	movs	r1, #0
    b712:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    b714:	687b      	ldr	r3, [r7, #4]
    b716:	2200      	movs	r2, #0
    b718:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    b71a:	687b      	ldr	r3, [r7, #4]
    b71c:	2288      	movs	r2, #136	; 0x88
    b71e:	0352      	lsls	r2, r2, #13
    b720:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    b722:	687b      	ldr	r3, [r7, #4]
    b724:	222c      	movs	r2, #44	; 0x2c
    b726:	2100      	movs	r1, #0
    b728:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    b72a:	687b      	ldr	r3, [r7, #4]
    b72c:	222d      	movs	r2, #45	; 0x2d
    b72e:	2100      	movs	r1, #0
    b730:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    b732:	687b      	ldr	r3, [r7, #4]
    b734:	2200      	movs	r2, #0
    b736:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    b738:	687b      	ldr	r3, [r7, #4]
    b73a:	2200      	movs	r2, #0
    b73c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    b73e:	687b      	ldr	r3, [r7, #4]
    b740:	2200      	movs	r2, #0
    b742:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    b744:	687b      	ldr	r3, [r7, #4]
    b746:	2200      	movs	r2, #0
    b748:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b74a:	687b      	ldr	r3, [r7, #4]
    b74c:	2200      	movs	r2, #0
    b74e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b750:	687b      	ldr	r3, [r7, #4]
    b752:	2200      	movs	r2, #0
    b754:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b756:	687b      	ldr	r3, [r7, #4]
    b758:	2200      	movs	r2, #0
    b75a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b75c:	687b      	ldr	r3, [r7, #4]
    b75e:	2200      	movs	r2, #0
    b760:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b762:	687b      	ldr	r3, [r7, #4]
    b764:	2200      	movs	r2, #0
    b766:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b768:	687b      	ldr	r3, [r7, #4]
    b76a:	2200      	movs	r2, #0
    b76c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    b76e:	687b      	ldr	r3, [r7, #4]
    b770:	2213      	movs	r2, #19
    b772:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b774:	687b      	ldr	r3, [r7, #4]
    b776:	2200      	movs	r2, #0
    b778:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    b77a:	46c0      	nop			; (mov r8, r8)
    b77c:	46bd      	mov	sp, r7
    b77e:	b002      	add	sp, #8
    b780:	bd80      	pop	{r7, pc}
	...

0000b784 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    b784:	b580      	push	{r7, lr}
    b786:	b084      	sub	sp, #16
    b788:	af00      	add	r7, sp, #0
    b78a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b78c:	687b      	ldr	r3, [r7, #4]
    b78e:	681b      	ldr	r3, [r3, #0]
    b790:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b792:	687b      	ldr	r3, [r7, #4]
    b794:	681b      	ldr	r3, [r3, #0]
    b796:	0018      	movs	r0, r3
    b798:	4b09      	ldr	r3, [pc, #36]	; (b7c0 <usart_enable+0x3c>)
    b79a:	4798      	blx	r3
    b79c:	0003      	movs	r3, r0
    b79e:	0018      	movs	r0, r3
    b7a0:	4b08      	ldr	r3, [pc, #32]	; (b7c4 <usart_enable+0x40>)
    b7a2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b7a4:	687b      	ldr	r3, [r7, #4]
    b7a6:	0018      	movs	r0, r3
    b7a8:	4b07      	ldr	r3, [pc, #28]	; (b7c8 <usart_enable+0x44>)
    b7aa:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b7ac:	68fb      	ldr	r3, [r7, #12]
    b7ae:	681b      	ldr	r3, [r3, #0]
    b7b0:	2202      	movs	r2, #2
    b7b2:	431a      	orrs	r2, r3
    b7b4:	68fb      	ldr	r3, [r7, #12]
    b7b6:	601a      	str	r2, [r3, #0]
}
    b7b8:	46c0      	nop			; (mov r8, r8)
    b7ba:	46bd      	mov	sp, r7
    b7bc:	b004      	add	sp, #16
    b7be:	bd80      	pop	{r7, pc}
    b7c0:	000151ed 	.word	0x000151ed
    b7c4:	0000b655 	.word	0x0000b655
    b7c8:	0000b6a1 	.word	0x0000b6a1

0000b7cc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    b7cc:	b580      	push	{r7, lr}
    b7ce:	b082      	sub	sp, #8
    b7d0:	af00      	add	r7, sp, #0
    b7d2:	6078      	str	r0, [r7, #4]
    b7d4:	000a      	movs	r2, r1
    b7d6:	1cfb      	adds	r3, r7, #3
    b7d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    b7da:	687b      	ldr	r3, [r7, #4]
    b7dc:	2231      	movs	r2, #49	; 0x31
    b7de:	5c9b      	ldrb	r3, [r3, r2]
    b7e0:	b25a      	sxtb	r2, r3
    b7e2:	1cfb      	adds	r3, r7, #3
    b7e4:	781b      	ldrb	r3, [r3, #0]
    b7e6:	2101      	movs	r1, #1
    b7e8:	4099      	lsls	r1, r3
    b7ea:	000b      	movs	r3, r1
    b7ec:	b25b      	sxtb	r3, r3
    b7ee:	4313      	orrs	r3, r2
    b7f0:	b25b      	sxtb	r3, r3
    b7f2:	b2d9      	uxtb	r1, r3
    b7f4:	687b      	ldr	r3, [r7, #4]
    b7f6:	2231      	movs	r2, #49	; 0x31
    b7f8:	5499      	strb	r1, [r3, r2]

}
    b7fa:	46c0      	nop			; (mov r8, r8)
    b7fc:	46bd      	mov	sp, r7
    b7fe:	b002      	add	sp, #8
    b800:	bd80      	pop	{r7, pc}
	...

0000b804 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
    b804:	b580      	push	{r7, lr}
    b806:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
    b808:	2380      	movs	r3, #128	; 0x80
    b80a:	009a      	lsls	r2, r3, #2
    b80c:	4b0f      	ldr	r3, [pc, #60]	; (b84c <InitializeSerialConsole+0x48>)
    b80e:	0011      	movs	r1, r2
    b810:	0018      	movs	r0, r3
    b812:	4b0f      	ldr	r3, [pc, #60]	; (b850 <InitializeSerialConsole+0x4c>)
    b814:	4798      	blx	r3
    b816:	0002      	movs	r2, r0
    b818:	4b0e      	ldr	r3, [pc, #56]	; (b854 <InitializeSerialConsole+0x50>)
    b81a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
    b81c:	2380      	movs	r3, #128	; 0x80
    b81e:	009a      	lsls	r2, r3, #2
    b820:	4b0d      	ldr	r3, [pc, #52]	; (b858 <InitializeSerialConsole+0x54>)
    b822:	0011      	movs	r1, r2
    b824:	0018      	movs	r0, r3
    b826:	4b0a      	ldr	r3, [pc, #40]	; (b850 <InitializeSerialConsole+0x4c>)
    b828:	4798      	blx	r3
    b82a:	0002      	movs	r2, r0
    b82c:	4b0b      	ldr	r3, [pc, #44]	; (b85c <InitializeSerialConsole+0x58>)
    b82e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
    b830:	4b0b      	ldr	r3, [pc, #44]	; (b860 <InitializeSerialConsole+0x5c>)
    b832:	4798      	blx	r3
    configure_usart_callbacks();
    b834:	4b0b      	ldr	r3, [pc, #44]	; (b864 <InitializeSerialConsole+0x60>)
    b836:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
    b838:	490b      	ldr	r1, [pc, #44]	; (b868 <InitializeSerialConsole+0x64>)
    b83a:	4b0c      	ldr	r3, [pc, #48]	; (b86c <InitializeSerialConsole+0x68>)
    b83c:	2201      	movs	r2, #1
    b83e:	0018      	movs	r0, r3
    b840:	4b0b      	ldr	r3, [pc, #44]	; (b870 <InitializeSerialConsole+0x6c>)
    b842:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
    b844:	46c0      	nop			; (mov r8, r8)
    b846:	46bd      	mov	sp, r7
    b848:	bd80      	pop	{r7, pc}
    b84a:	46c0      	nop			; (mov r8, r8)
    b84c:	2000596c 	.word	0x2000596c
    b850:	0000b535 	.word	0x0000b535
    b854:	20005764 	.word	0x20005764
    b858:	2000576c 	.word	0x2000576c
    b85c:	20005b70 	.word	0x20005b70
    b860:	0000b9d9 	.word	0x0000b9d9
    b864:	0000ba51 	.word	0x0000ba51
    b868:	20005768 	.word	0x20005768
    b86c:	20005730 	.word	0x20005730
    b870:	00016a95 	.word	0x00016a95

0000b874 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
    b874:	b580      	push	{r7, lr}
    b876:	b084      	sub	sp, #16
    b878:	af00      	add	r7, sp, #0
    b87a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    b87c:	4b1a      	ldr	r3, [pc, #104]	; (b8e8 <SerialConsoleWriteString+0x74>)
    b87e:	4798      	blx	r3
    if (string != NULL) {
    b880:	687b      	ldr	r3, [r7, #4]
    b882:	2b00      	cmp	r3, #0
    b884:	d02a      	beq.n	b8dc <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
    b886:	2300      	movs	r3, #0
    b888:	60fb      	str	r3, [r7, #12]
    b88a:	e00b      	b.n	b8a4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
    b88c:	4b17      	ldr	r3, [pc, #92]	; (b8ec <SerialConsoleWriteString+0x78>)
    b88e:	6818      	ldr	r0, [r3, #0]
    b890:	687a      	ldr	r2, [r7, #4]
    b892:	68fb      	ldr	r3, [r7, #12]
    b894:	18d3      	adds	r3, r2, r3
    b896:	781b      	ldrb	r3, [r3, #0]
    b898:	0019      	movs	r1, r3
    b89a:	4b15      	ldr	r3, [pc, #84]	; (b8f0 <SerialConsoleWriteString+0x7c>)
    b89c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
    b89e:	68fb      	ldr	r3, [r7, #12]
    b8a0:	3301      	adds	r3, #1
    b8a2:	60fb      	str	r3, [r7, #12]
    b8a4:	687b      	ldr	r3, [r7, #4]
    b8a6:	0018      	movs	r0, r3
    b8a8:	4b12      	ldr	r3, [pc, #72]	; (b8f4 <SerialConsoleWriteString+0x80>)
    b8aa:	4798      	blx	r3
    b8ac:	0002      	movs	r2, r0
    b8ae:	68fb      	ldr	r3, [r7, #12]
    b8b0:	429a      	cmp	r2, r3
    b8b2:	d8eb      	bhi.n	b88c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    b8b4:	4b10      	ldr	r3, [pc, #64]	; (b8f8 <SerialConsoleWriteString+0x84>)
    b8b6:	2101      	movs	r1, #1
    b8b8:	0018      	movs	r0, r3
    b8ba:	4b10      	ldr	r3, [pc, #64]	; (b8fc <SerialConsoleWriteString+0x88>)
    b8bc:	4798      	blx	r3
    b8be:	1e03      	subs	r3, r0, #0
    b8c0:	d10c      	bne.n	b8dc <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
    b8c2:	4b0a      	ldr	r3, [pc, #40]	; (b8ec <SerialConsoleWriteString+0x78>)
    b8c4:	681b      	ldr	r3, [r3, #0]
    b8c6:	4a0e      	ldr	r2, [pc, #56]	; (b900 <SerialConsoleWriteString+0x8c>)
    b8c8:	0011      	movs	r1, r2
    b8ca:	0018      	movs	r0, r3
    b8cc:	4b0d      	ldr	r3, [pc, #52]	; (b904 <SerialConsoleWriteString+0x90>)
    b8ce:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    b8d0:	490b      	ldr	r1, [pc, #44]	; (b900 <SerialConsoleWriteString+0x8c>)
    b8d2:	4b09      	ldr	r3, [pc, #36]	; (b8f8 <SerialConsoleWriteString+0x84>)
    b8d4:	2201      	movs	r2, #1
    b8d6:	0018      	movs	r0, r3
    b8d8:	4b0b      	ldr	r3, [pc, #44]	; (b908 <SerialConsoleWriteString+0x94>)
    b8da:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
    b8dc:	4b0b      	ldr	r3, [pc, #44]	; (b90c <SerialConsoleWriteString+0x98>)
    b8de:	4798      	blx	r3
}
    b8e0:	46c0      	nop			; (mov r8, r8)
    b8e2:	46bd      	mov	sp, r7
    b8e4:	b004      	add	sp, #16
    b8e6:	bd80      	pop	{r7, pc}
    b8e8:	00009ee1 	.word	0x00009ee1
    b8ec:	20005b70 	.word	0x20005b70
    b8f0:	0000b595 	.word	0x0000b595
    b8f4:	00023157 	.word	0x00023157
    b8f8:	20005730 	.word	0x20005730
    b8fc:	00016add 	.word	0x00016add
    b900:	20005b6c 	.word	0x20005b6c
    b904:	0000b5c9 	.word	0x0000b5c9
    b908:	00016a4d 	.word	0x00016a4d
    b90c:	00009ef9 	.word	0x00009ef9

0000b910 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
    b910:	b580      	push	{r7, lr}
    b912:	b084      	sub	sp, #16
    b914:	af00      	add	r7, sp, #0
    b916:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    b918:	4b08      	ldr	r3, [pc, #32]	; (b93c <SerialConsoleReadCharacter+0x2c>)
    b91a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
    b91c:	4b08      	ldr	r3, [pc, #32]	; (b940 <SerialConsoleReadCharacter+0x30>)
    b91e:	681b      	ldr	r3, [r3, #0]
    b920:	687a      	ldr	r2, [r7, #4]
    b922:	0011      	movs	r1, r2
    b924:	0018      	movs	r0, r3
    b926:	4b07      	ldr	r3, [pc, #28]	; (b944 <SerialConsoleReadCharacter+0x34>)
    b928:	4798      	blx	r3
    b92a:	0003      	movs	r3, r0
    b92c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
    b92e:	4b06      	ldr	r3, [pc, #24]	; (b948 <SerialConsoleReadCharacter+0x38>)
    b930:	4798      	blx	r3
    return a;
    b932:	68fb      	ldr	r3, [r7, #12]
}
    b934:	0018      	movs	r0, r3
    b936:	46bd      	mov	sp, r7
    b938:	b004      	add	sp, #16
    b93a:	bd80      	pop	{r7, pc}
    b93c:	00009ee1 	.word	0x00009ee1
    b940:	20005764 	.word	0x20005764
    b944:	0000b5c9 	.word	0x0000b5c9
    b948:	00009ef9 	.word	0x00009ef9

0000b94c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
    b94c:	b580      	push	{r7, lr}
    b94e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
    b950:	4b02      	ldr	r3, [pc, #8]	; (b95c <getLogLevel+0x10>)
    b952:	781b      	ldrb	r3, [r3, #0]
}
    b954:	0018      	movs	r0, r3
    b956:	46bd      	mov	sp, r7
    b958:	bd80      	pop	{r7, pc}
    b95a:	46c0      	nop			; (mov r8, r8)
    b95c:	200042ac 	.word	0x200042ac

0000b960 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    b960:	b40e      	push	{r1, r2, r3}
    b962:	b590      	push	{r4, r7, lr}
    b964:	b084      	sub	sp, #16
    b966:	af00      	add	r7, sp, #0
    b968:	0002      	movs	r2, r0
    b96a:	1dfb      	adds	r3, r7, #7
    b96c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
    b96e:	4b0e      	ldr	r3, [pc, #56]	; (b9a8 <LogMessage+0x48>)
    b970:	4798      	blx	r3
    b972:	0003      	movs	r3, r0
    b974:	001a      	movs	r2, r3
    b976:	1dfb      	adds	r3, r7, #7
    b978:	781b      	ldrb	r3, [r3, #0]
    b97a:	4293      	cmp	r3, r2
    b97c:	d30c      	bcc.n	b998 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
    b97e:	2320      	movs	r3, #32
    b980:	18fb      	adds	r3, r7, r3
    b982:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
    b984:	68fb      	ldr	r3, [r7, #12]
    b986:	69fa      	ldr	r2, [r7, #28]
    b988:	4808      	ldr	r0, [pc, #32]	; (b9ac <LogMessage+0x4c>)
    b98a:	217f      	movs	r1, #127	; 0x7f
    b98c:	4c08      	ldr	r4, [pc, #32]	; (b9b0 <LogMessage+0x50>)
    b98e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
    b990:	4b06      	ldr	r3, [pc, #24]	; (b9ac <LogMessage+0x4c>)
    b992:	0018      	movs	r0, r3
    b994:	4b07      	ldr	r3, [pc, #28]	; (b9b4 <LogMessage+0x54>)
    b996:	4798      	blx	r3
        va_end(ap);
    }
};
    b998:	46c0      	nop			; (mov r8, r8)
    b99a:	46bd      	mov	sp, r7
    b99c:	b004      	add	sp, #16
    b99e:	bc90      	pop	{r4, r7}
    b9a0:	bc08      	pop	{r3}
    b9a2:	b003      	add	sp, #12
    b9a4:	4718      	bx	r3
    b9a6:	46c0      	nop			; (mov r8, r8)
    b9a8:	0000b94d 	.word	0x0000b94d
    b9ac:	200056b0 	.word	0x200056b0
    b9b0:	00023391 	.word	0x00023391
    b9b4:	0000b875 	.word	0x0000b875

0000b9b8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
    b9b8:	b40f      	push	{r0, r1, r2, r3}
    b9ba:	b580      	push	{r7, lr}
    b9bc:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
    b9be:	68bb      	ldr	r3, [r7, #8]
    b9c0:	0019      	movs	r1, r3
    b9c2:	2001      	movs	r0, #1
    b9c4:	4b03      	ldr	r3, [pc, #12]	; (b9d4 <LogMessageDebug+0x1c>)
    b9c6:	4798      	blx	r3
};
    b9c8:	46c0      	nop			; (mov r8, r8)
    b9ca:	46bd      	mov	sp, r7
    b9cc:	bc80      	pop	{r7}
    b9ce:	bc08      	pop	{r3}
    b9d0:	b004      	add	sp, #16
    b9d2:	4718      	bx	r3
    b9d4:	0000b961 	.word	0x0000b961

0000b9d8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
    b9d8:	b580      	push	{r7, lr}
    b9da:	b090      	sub	sp, #64	; 0x40
    b9dc:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    b9de:	003b      	movs	r3, r7
    b9e0:	0018      	movs	r0, r3
    b9e2:	4b14      	ldr	r3, [pc, #80]	; (ba34 <configure_usart+0x5c>)
    b9e4:	4798      	blx	r3

    config_usart.baudrate = 115200;
    b9e6:	003b      	movs	r3, r7
    b9e8:	22e1      	movs	r2, #225	; 0xe1
    b9ea:	0252      	lsls	r2, r2, #9
    b9ec:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b9ee:	003b      	movs	r3, r7
    b9f0:	22c4      	movs	r2, #196	; 0xc4
    b9f2:	0392      	lsls	r2, r2, #14
    b9f4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b9f6:	003b      	movs	r3, r7
    b9f8:	2201      	movs	r2, #1
    b9fa:	4252      	negs	r2, r2
    b9fc:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b9fe:	003b      	movs	r3, r7
    ba00:	2201      	movs	r2, #1
    ba02:	4252      	negs	r2, r2
    ba04:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    ba06:	003b      	movs	r3, r7
    ba08:	4a0b      	ldr	r2, [pc, #44]	; (ba38 <configure_usart+0x60>)
    ba0a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    ba0c:	003b      	movs	r3, r7
    ba0e:	4a0b      	ldr	r2, [pc, #44]	; (ba3c <configure_usart+0x64>)
    ba10:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    ba12:	46c0      	nop			; (mov r8, r8)
    ba14:	003a      	movs	r2, r7
    ba16:	490a      	ldr	r1, [pc, #40]	; (ba40 <configure_usart+0x68>)
    ba18:	4b0a      	ldr	r3, [pc, #40]	; (ba44 <configure_usart+0x6c>)
    ba1a:	0018      	movs	r0, r3
    ba1c:	4b0a      	ldr	r3, [pc, #40]	; (ba48 <configure_usart+0x70>)
    ba1e:	4798      	blx	r3
    ba20:	1e03      	subs	r3, r0, #0
    ba22:	d1f7      	bne.n	ba14 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
    ba24:	4b07      	ldr	r3, [pc, #28]	; (ba44 <configure_usart+0x6c>)
    ba26:	0018      	movs	r0, r3
    ba28:	4b08      	ldr	r3, [pc, #32]	; (ba4c <configure_usart+0x74>)
    ba2a:	4798      	blx	r3
}
    ba2c:	46c0      	nop			; (mov r8, r8)
    ba2e:	46bd      	mov	sp, r7
    ba30:	b010      	add	sp, #64	; 0x40
    ba32:	bd80      	pop	{r7, pc}
    ba34:	0000b6c5 	.word	0x0000b6c5
    ba38:	002a0003 	.word	0x002a0003
    ba3c:	002b0003 	.word	0x002b0003
    ba40:	42001800 	.word	0x42001800
    ba44:	20005730 	.word	0x20005730
    ba48:	00016651 	.word	0x00016651
    ba4c:	0000b785 	.word	0x0000b785

0000ba50 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
    ba50:	b580      	push	{r7, lr}
    ba52:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    ba54:	490c      	ldr	r1, [pc, #48]	; (ba88 <configure_usart_callbacks+0x38>)
    ba56:	4b0d      	ldr	r3, [pc, #52]	; (ba8c <configure_usart_callbacks+0x3c>)
    ba58:	2200      	movs	r2, #0
    ba5a:	0018      	movs	r0, r3
    ba5c:	4b0c      	ldr	r3, [pc, #48]	; (ba90 <configure_usart_callbacks+0x40>)
    ba5e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    ba60:	490c      	ldr	r1, [pc, #48]	; (ba94 <configure_usart_callbacks+0x44>)
    ba62:	4b0a      	ldr	r3, [pc, #40]	; (ba8c <configure_usart_callbacks+0x3c>)
    ba64:	2201      	movs	r2, #1
    ba66:	0018      	movs	r0, r3
    ba68:	4b09      	ldr	r3, [pc, #36]	; (ba90 <configure_usart_callbacks+0x40>)
    ba6a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    ba6c:	4b07      	ldr	r3, [pc, #28]	; (ba8c <configure_usart_callbacks+0x3c>)
    ba6e:	2100      	movs	r1, #0
    ba70:	0018      	movs	r0, r3
    ba72:	4b09      	ldr	r3, [pc, #36]	; (ba98 <configure_usart_callbacks+0x48>)
    ba74:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    ba76:	4b05      	ldr	r3, [pc, #20]	; (ba8c <configure_usart_callbacks+0x3c>)
    ba78:	2101      	movs	r1, #1
    ba7a:	0018      	movs	r0, r3
    ba7c:	4b06      	ldr	r3, [pc, #24]	; (ba98 <configure_usart_callbacks+0x48>)
    ba7e:	4798      	blx	r3
}
    ba80:	46c0      	nop			; (mov r8, r8)
    ba82:	46bd      	mov	sp, r7
    ba84:	bd80      	pop	{r7, pc}
    ba86:	46c0      	nop			; (mov r8, r8)
    ba88:	0000bae5 	.word	0x0000bae5
    ba8c:	20005730 	.word	0x20005730
    ba90:	00016a05 	.word	0x00016a05
    ba94:	0000ba9d 	.word	0x0000ba9d
    ba98:	0000b7cd 	.word	0x0000b7cd

0000ba9c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
    ba9c:	b580      	push	{r7, lr}
    ba9e:	b082      	sub	sp, #8
    baa0:	af00      	add	r7, sp, #0
    baa2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
    baa4:	4b09      	ldr	r3, [pc, #36]	; (bacc <usart_read_callback+0x30>)
    baa6:	681a      	ldr	r2, [r3, #0]
    baa8:	4b09      	ldr	r3, [pc, #36]	; (bad0 <usart_read_callback+0x34>)
    baaa:	781b      	ldrb	r3, [r3, #0]
    baac:	0019      	movs	r1, r3
    baae:	0010      	movs	r0, r2
    bab0:	4b08      	ldr	r3, [pc, #32]	; (bad4 <usart_read_callback+0x38>)
    bab2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
    bab4:	4906      	ldr	r1, [pc, #24]	; (bad0 <usart_read_callback+0x34>)
    bab6:	4b08      	ldr	r3, [pc, #32]	; (bad8 <usart_read_callback+0x3c>)
    bab8:	2201      	movs	r2, #1
    baba:	0018      	movs	r0, r3
    babc:	4b07      	ldr	r3, [pc, #28]	; (badc <usart_read_callback+0x40>)
    babe:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
    bac0:	4b07      	ldr	r3, [pc, #28]	; (bae0 <usart_read_callback+0x44>)
    bac2:	4798      	blx	r3
}
    bac4:	46c0      	nop			; (mov r8, r8)
    bac6:	46bd      	mov	sp, r7
    bac8:	b002      	add	sp, #8
    baca:	bd80      	pop	{r7, pc}
    bacc:	20005764 	.word	0x20005764
    bad0:	20005768 	.word	0x20005768
    bad4:	0000b595 	.word	0x0000b595
    bad8:	20005730 	.word	0x20005730
    badc:	00016a95 	.word	0x00016a95
    bae0:	000024e9 	.word	0x000024e9

0000bae4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
    bae4:	b580      	push	{r7, lr}
    bae6:	b082      	sub	sp, #8
    bae8:	af00      	add	r7, sp, #0
    baea:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
    baec:	4b09      	ldr	r3, [pc, #36]	; (bb14 <usart_write_callback+0x30>)
    baee:	681b      	ldr	r3, [r3, #0]
    baf0:	4a09      	ldr	r2, [pc, #36]	; (bb18 <usart_write_callback+0x34>)
    baf2:	0011      	movs	r1, r2
    baf4:	0018      	movs	r0, r3
    baf6:	4b09      	ldr	r3, [pc, #36]	; (bb1c <usart_write_callback+0x38>)
    baf8:	4798      	blx	r3
    bafa:	0003      	movs	r3, r0
    bafc:	3301      	adds	r3, #1
    bafe:	d005      	beq.n	bb0c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    bb00:	4905      	ldr	r1, [pc, #20]	; (bb18 <usart_write_callback+0x34>)
    bb02:	4b07      	ldr	r3, [pc, #28]	; (bb20 <usart_write_callback+0x3c>)
    bb04:	2201      	movs	r2, #1
    bb06:	0018      	movs	r0, r3
    bb08:	4b06      	ldr	r3, [pc, #24]	; (bb24 <usart_write_callback+0x40>)
    bb0a:	4798      	blx	r3
    }
}
    bb0c:	46c0      	nop			; (mov r8, r8)
    bb0e:	46bd      	mov	sp, r7
    bb10:	b002      	add	sp, #8
    bb12:	bd80      	pop	{r7, pc}
    bb14:	20005b70 	.word	0x20005b70
    bb18:	20005b6c 	.word	0x20005b6c
    bb1c:	0000b5c9 	.word	0x0000b5c9
    bb20:	20005730 	.word	0x20005730
    bb24:	00016a4d 	.word	0x00016a4d

0000bb28 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    bb28:	b590      	push	{r4, r7, lr}
    bb2a:	b087      	sub	sp, #28
    bb2c:	af00      	add	r7, sp, #0
    bb2e:	60f8      	str	r0, [r7, #12]
    bb30:	000c      	movs	r4, r1
    bb32:	0010      	movs	r0, r2
    bb34:	0019      	movs	r1, r3
    bb36:	230a      	movs	r3, #10
    bb38:	18fb      	adds	r3, r7, r3
    bb3a:	1c22      	adds	r2, r4, #0
    bb3c:	801a      	strh	r2, [r3, #0]
    bb3e:	2308      	movs	r3, #8
    bb40:	18fb      	adds	r3, r7, r3
    bb42:	1c02      	adds	r2, r0, #0
    bb44:	801a      	strh	r2, [r3, #0]
    bb46:	1dfb      	adds	r3, r7, #7
    bb48:	1c0a      	adds	r2, r1, #0
    bb4a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bb4c:	230a      	movs	r3, #10
    bb4e:	18fb      	adds	r3, r7, r3
    bb50:	881a      	ldrh	r2, [r3, #0]
    bb52:	2308      	movs	r3, #8
    bb54:	18fb      	adds	r3, r7, r3
    bb56:	881b      	ldrh	r3, [r3, #0]
    bb58:	1ad3      	subs	r3, r2, r3
    bb5a:	3307      	adds	r3, #7
    bb5c:	2b00      	cmp	r3, #0
    bb5e:	da00      	bge.n	bb62 <SDMMC_UNSTUFF_BITS+0x3a>
    bb60:	3307      	adds	r3, #7
    bb62:	10db      	asrs	r3, r3, #3
    bb64:	3b01      	subs	r3, #1
    bb66:	68fa      	ldr	r2, [r7, #12]
    bb68:	18d3      	adds	r3, r2, r3
    bb6a:	781b      	ldrb	r3, [r3, #0]
    bb6c:	0019      	movs	r1, r3
    bb6e:	2308      	movs	r3, #8
    bb70:	18fb      	adds	r3, r7, r3
    bb72:	881b      	ldrh	r3, [r3, #0]
    bb74:	2207      	movs	r2, #7
    bb76:	4013      	ands	r3, r2
    bb78:	4119      	asrs	r1, r3
    bb7a:	000b      	movs	r3, r1
    bb7c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    bb7e:	2308      	movs	r3, #8
    bb80:	18fb      	adds	r3, r7, r3
    bb82:	881b      	ldrh	r3, [r3, #0]
    bb84:	2207      	movs	r2, #7
    bb86:	401a      	ands	r2, r3
    bb88:	1dfb      	adds	r3, r7, #7
    bb8a:	781b      	ldrb	r3, [r3, #0]
    bb8c:	18d3      	adds	r3, r2, r3
    bb8e:	2b08      	cmp	r3, #8
    bb90:	dd1c      	ble.n	bbcc <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bb92:	230a      	movs	r3, #10
    bb94:	18fb      	adds	r3, r7, r3
    bb96:	881a      	ldrh	r2, [r3, #0]
    bb98:	2308      	movs	r3, #8
    bb9a:	18fb      	adds	r3, r7, r3
    bb9c:	881b      	ldrh	r3, [r3, #0]
    bb9e:	1ad3      	subs	r3, r2, r3
    bba0:	3307      	adds	r3, #7
    bba2:	2b00      	cmp	r3, #0
    bba4:	da00      	bge.n	bba8 <SDMMC_UNSTUFF_BITS+0x80>
    bba6:	3307      	adds	r3, #7
    bba8:	10db      	asrs	r3, r3, #3
    bbaa:	3b02      	subs	r3, #2
    bbac:	68fa      	ldr	r2, [r7, #12]
    bbae:	18d3      	adds	r3, r2, r3
    bbb0:	781b      	ldrb	r3, [r3, #0]
    bbb2:	0019      	movs	r1, r3
    bbb4:	2308      	movs	r3, #8
    bbb6:	18fb      	adds	r3, r7, r3
    bbb8:	881b      	ldrh	r3, [r3, #0]
    bbba:	2207      	movs	r2, #7
    bbbc:	4013      	ands	r3, r2
    bbbe:	2208      	movs	r2, #8
    bbc0:	1ad3      	subs	r3, r2, r3
    bbc2:	4099      	lsls	r1, r3
    bbc4:	000b      	movs	r3, r1
    bbc6:	697a      	ldr	r2, [r7, #20]
    bbc8:	4313      	orrs	r3, r2
    bbca:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    bbcc:	2308      	movs	r3, #8
    bbce:	18fb      	adds	r3, r7, r3
    bbd0:	881b      	ldrh	r3, [r3, #0]
    bbd2:	2207      	movs	r2, #7
    bbd4:	401a      	ands	r2, r3
    bbd6:	1dfb      	adds	r3, r7, #7
    bbd8:	781b      	ldrb	r3, [r3, #0]
    bbda:	18d3      	adds	r3, r2, r3
    bbdc:	2b10      	cmp	r3, #16
    bbde:	dd1c      	ble.n	bc1a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bbe0:	230a      	movs	r3, #10
    bbe2:	18fb      	adds	r3, r7, r3
    bbe4:	881a      	ldrh	r2, [r3, #0]
    bbe6:	2308      	movs	r3, #8
    bbe8:	18fb      	adds	r3, r7, r3
    bbea:	881b      	ldrh	r3, [r3, #0]
    bbec:	1ad3      	subs	r3, r2, r3
    bbee:	3307      	adds	r3, #7
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	da00      	bge.n	bbf6 <SDMMC_UNSTUFF_BITS+0xce>
    bbf4:	3307      	adds	r3, #7
    bbf6:	10db      	asrs	r3, r3, #3
    bbf8:	3b03      	subs	r3, #3
    bbfa:	68fa      	ldr	r2, [r7, #12]
    bbfc:	18d3      	adds	r3, r2, r3
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	0019      	movs	r1, r3
    bc02:	2308      	movs	r3, #8
    bc04:	18fb      	adds	r3, r7, r3
    bc06:	881b      	ldrh	r3, [r3, #0]
    bc08:	2207      	movs	r2, #7
    bc0a:	4013      	ands	r3, r2
    bc0c:	2210      	movs	r2, #16
    bc0e:	1ad3      	subs	r3, r2, r3
    bc10:	4099      	lsls	r1, r3
    bc12:	000b      	movs	r3, r1
    bc14:	697a      	ldr	r2, [r7, #20]
    bc16:	4313      	orrs	r3, r2
    bc18:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    bc1a:	2308      	movs	r3, #8
    bc1c:	18fb      	adds	r3, r7, r3
    bc1e:	881b      	ldrh	r3, [r3, #0]
    bc20:	2207      	movs	r2, #7
    bc22:	401a      	ands	r2, r3
    bc24:	1dfb      	adds	r3, r7, #7
    bc26:	781b      	ldrb	r3, [r3, #0]
    bc28:	18d3      	adds	r3, r2, r3
    bc2a:	2b10      	cmp	r3, #16
    bc2c:	dd1c      	ble.n	bc68 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bc2e:	230a      	movs	r3, #10
    bc30:	18fb      	adds	r3, r7, r3
    bc32:	881a      	ldrh	r2, [r3, #0]
    bc34:	2308      	movs	r3, #8
    bc36:	18fb      	adds	r3, r7, r3
    bc38:	881b      	ldrh	r3, [r3, #0]
    bc3a:	1ad3      	subs	r3, r2, r3
    bc3c:	3307      	adds	r3, #7
    bc3e:	2b00      	cmp	r3, #0
    bc40:	da00      	bge.n	bc44 <SDMMC_UNSTUFF_BITS+0x11c>
    bc42:	3307      	adds	r3, #7
    bc44:	10db      	asrs	r3, r3, #3
    bc46:	3b03      	subs	r3, #3
    bc48:	68fa      	ldr	r2, [r7, #12]
    bc4a:	18d3      	adds	r3, r2, r3
    bc4c:	781b      	ldrb	r3, [r3, #0]
    bc4e:	0019      	movs	r1, r3
    bc50:	2308      	movs	r3, #8
    bc52:	18fb      	adds	r3, r7, r3
    bc54:	881b      	ldrh	r3, [r3, #0]
    bc56:	2207      	movs	r2, #7
    bc58:	4013      	ands	r3, r2
    bc5a:	2210      	movs	r2, #16
    bc5c:	1ad3      	subs	r3, r2, r3
    bc5e:	4099      	lsls	r1, r3
    bc60:	000b      	movs	r3, r1
    bc62:	697a      	ldr	r2, [r7, #20]
    bc64:	4313      	orrs	r3, r2
    bc66:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    bc68:	1dfb      	adds	r3, r7, #7
    bc6a:	781b      	ldrb	r3, [r3, #0]
    bc6c:	2201      	movs	r2, #1
    bc6e:	409a      	lsls	r2, r3
    bc70:	0013      	movs	r3, r2
    bc72:	1e5a      	subs	r2, r3, #1
    bc74:	697b      	ldr	r3, [r7, #20]
    bc76:	4013      	ands	r3, r2
    bc78:	617b      	str	r3, [r7, #20]
	return value;
    bc7a:	697b      	ldr	r3, [r7, #20]
}
    bc7c:	0018      	movs	r0, r3
    bc7e:	46bd      	mov	sp, r7
    bc80:	b007      	add	sp, #28
    bc82:	bd90      	pop	{r4, r7, pc}

0000bc84 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    bc84:	b580      	push	{r7, lr}
    bc86:	b082      	sub	sp, #8
    bc88:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    bc8a:	4b23      	ldr	r3, [pc, #140]	; (bd18 <mmc_spi_op_cond+0x94>)
    bc8c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    bc8e:	4b23      	ldr	r3, [pc, #140]	; (bd1c <mmc_spi_op_cond+0x98>)
    bc90:	2100      	movs	r1, #0
    bc92:	0018      	movs	r0, r3
    bc94:	4b22      	ldr	r3, [pc, #136]	; (bd20 <mmc_spi_op_cond+0x9c>)
    bc96:	4798      	blx	r3
    bc98:	0003      	movs	r3, r0
    bc9a:	001a      	movs	r2, r3
    bc9c:	2301      	movs	r3, #1
    bc9e:	4053      	eors	r3, r2
    bca0:	b2db      	uxtb	r3, r3
    bca2:	2b00      	cmp	r3, #0
    bca4:	d001      	beq.n	bcaa <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    bca6:	2300      	movs	r3, #0
    bca8:	e031      	b.n	bd0e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    bcaa:	4b1e      	ldr	r3, [pc, #120]	; (bd24 <mmc_spi_op_cond+0xa0>)
    bcac:	4798      	blx	r3
    bcae:	0003      	movs	r3, r0
    bcb0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    bcb2:	683b      	ldr	r3, [r7, #0]
    bcb4:	2201      	movs	r2, #1
    bcb6:	4013      	ands	r3, r2
    bcb8:	d006      	beq.n	bcc8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    bcba:	687b      	ldr	r3, [r7, #4]
    bcbc:	1e5a      	subs	r2, r3, #1
    bcbe:	607a      	str	r2, [r7, #4]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	d1e4      	bne.n	bc8e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    bcc4:	2300      	movs	r3, #0
    bcc6:	e022      	b.n	bd0e <mmc_spi_op_cond+0x8a>
			break;
    bcc8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    bcca:	4b17      	ldr	r3, [pc, #92]	; (bd28 <mmc_spi_op_cond+0xa4>)
    bccc:	2100      	movs	r1, #0
    bcce:	0018      	movs	r0, r3
    bcd0:	4b13      	ldr	r3, [pc, #76]	; (bd20 <mmc_spi_op_cond+0x9c>)
    bcd2:	4798      	blx	r3
    bcd4:	0003      	movs	r3, r0
    bcd6:	001a      	movs	r2, r3
    bcd8:	2301      	movs	r3, #1
    bcda:	4053      	eors	r3, r2
    bcdc:	b2db      	uxtb	r3, r3
    bcde:	2b00      	cmp	r3, #0
    bce0:	d001      	beq.n	bce6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    bce2:	2300      	movs	r3, #0
    bce4:	e013      	b.n	bd0e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    bce6:	4b0f      	ldr	r3, [pc, #60]	; (bd24 <mmc_spi_op_cond+0xa0>)
    bce8:	4798      	blx	r3
    bcea:	0002      	movs	r2, r0
    bcec:	23c0      	movs	r3, #192	; 0xc0
    bcee:	05db      	lsls	r3, r3, #23
    bcf0:	401a      	ands	r2, r3
    bcf2:	2380      	movs	r3, #128	; 0x80
    bcf4:	05db      	lsls	r3, r3, #23
    bcf6:	429a      	cmp	r2, r3
    bcf8:	d108      	bne.n	bd0c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    bcfa:	4b0c      	ldr	r3, [pc, #48]	; (bd2c <mmc_spi_op_cond+0xa8>)
    bcfc:	681a      	ldr	r2, [r3, #0]
    bcfe:	4b0b      	ldr	r3, [pc, #44]	; (bd2c <mmc_spi_op_cond+0xa8>)
    bd00:	681b      	ldr	r3, [r3, #0]
    bd02:	7adb      	ldrb	r3, [r3, #11]
    bd04:	2108      	movs	r1, #8
    bd06:	430b      	orrs	r3, r1
    bd08:	b2db      	uxtb	r3, r3
    bd0a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    bd0c:	2301      	movs	r3, #1
}
    bd0e:	0018      	movs	r0, r3
    bd10:	46bd      	mov	sp, r7
    bd12:	b002      	add	sp, #8
    bd14:	bd80      	pop	{r7, pc}
    bd16:	46c0      	nop			; (mov r8, r8)
    bd18:	00001bee 	.word	0x00001bee
    bd1c:	00001101 	.word	0x00001101
    bd20:	0000d701 	.word	0x0000d701
    bd24:	0000d941 	.word	0x0000d941
    bd28:	0000053a 	.word	0x0000053a
    bd2c:	200042d4 	.word	0x200042d4

0000bd30 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    bd30:	b580      	push	{r7, lr}
    bd32:	b086      	sub	sp, #24
    bd34:	af00      	add	r7, sp, #0
    bd36:	0002      	movs	r2, r0
    bd38:	1dfb      	adds	r3, r7, #7
    bd3a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    bd3c:	4b2e      	ldr	r3, [pc, #184]	; (bdf8 <sd_spi_op_cond+0xc8>)
    bd3e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    bd40:	4b2e      	ldr	r3, [pc, #184]	; (bdfc <sd_spi_op_cond+0xcc>)
    bd42:	2100      	movs	r1, #0
    bd44:	0018      	movs	r0, r3
    bd46:	4b2e      	ldr	r3, [pc, #184]	; (be00 <sd_spi_op_cond+0xd0>)
    bd48:	4798      	blx	r3
    bd4a:	0003      	movs	r3, r0
    bd4c:	001a      	movs	r2, r3
    bd4e:	2301      	movs	r3, #1
    bd50:	4053      	eors	r3, r2
    bd52:	b2db      	uxtb	r3, r3
    bd54:	2b00      	cmp	r3, #0
    bd56:	d001      	beq.n	bd5c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    bd58:	2300      	movs	r3, #0
    bd5a:	e048      	b.n	bdee <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    bd5c:	2300      	movs	r3, #0
    bd5e:	617b      	str	r3, [r7, #20]
		if (v2) {
    bd60:	1dfb      	adds	r3, r7, #7
    bd62:	781b      	ldrb	r3, [r3, #0]
    bd64:	2b00      	cmp	r3, #0
    bd66:	d004      	beq.n	bd72 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    bd68:	697b      	ldr	r3, [r7, #20]
    bd6a:	2280      	movs	r2, #128	; 0x80
    bd6c:	05d2      	lsls	r2, r2, #23
    bd6e:	4313      	orrs	r3, r2
    bd70:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    bd72:	697b      	ldr	r3, [r7, #20]
    bd74:	4a23      	ldr	r2, [pc, #140]	; (be04 <sd_spi_op_cond+0xd4>)
    bd76:	0019      	movs	r1, r3
    bd78:	0010      	movs	r0, r2
    bd7a:	4b21      	ldr	r3, [pc, #132]	; (be00 <sd_spi_op_cond+0xd0>)
    bd7c:	4798      	blx	r3
    bd7e:	0003      	movs	r3, r0
    bd80:	001a      	movs	r2, r3
    bd82:	2301      	movs	r3, #1
    bd84:	4053      	eors	r3, r2
    bd86:	b2db      	uxtb	r3, r3
    bd88:	2b00      	cmp	r3, #0
    bd8a:	d001      	beq.n	bd90 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    bd8c:	2300      	movs	r3, #0
    bd8e:	e02e      	b.n	bdee <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    bd90:	4b1d      	ldr	r3, [pc, #116]	; (be08 <sd_spi_op_cond+0xd8>)
    bd92:	4798      	blx	r3
    bd94:	0003      	movs	r3, r0
    bd96:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    bd98:	68fb      	ldr	r3, [r7, #12]
    bd9a:	2201      	movs	r2, #1
    bd9c:	4013      	ands	r3, r2
    bd9e:	d006      	beq.n	bdae <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    bda0:	693b      	ldr	r3, [r7, #16]
    bda2:	1e5a      	subs	r2, r3, #1
    bda4:	613a      	str	r2, [r7, #16]
    bda6:	2b00      	cmp	r3, #0
    bda8:	d1ca      	bne.n	bd40 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    bdaa:	2300      	movs	r3, #0
    bdac:	e01f      	b.n	bdee <sd_spi_op_cond+0xbe>
			break;
    bdae:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    bdb0:	4b16      	ldr	r3, [pc, #88]	; (be0c <sd_spi_op_cond+0xdc>)
    bdb2:	2100      	movs	r1, #0
    bdb4:	0018      	movs	r0, r3
    bdb6:	4b12      	ldr	r3, [pc, #72]	; (be00 <sd_spi_op_cond+0xd0>)
    bdb8:	4798      	blx	r3
    bdba:	0003      	movs	r3, r0
    bdbc:	001a      	movs	r2, r3
    bdbe:	2301      	movs	r3, #1
    bdc0:	4053      	eors	r3, r2
    bdc2:	b2db      	uxtb	r3, r3
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d001      	beq.n	bdcc <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    bdc8:	2300      	movs	r3, #0
    bdca:	e010      	b.n	bdee <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    bdcc:	4b0e      	ldr	r3, [pc, #56]	; (be08 <sd_spi_op_cond+0xd8>)
    bdce:	4798      	blx	r3
    bdd0:	0002      	movs	r2, r0
    bdd2:	2380      	movs	r3, #128	; 0x80
    bdd4:	05db      	lsls	r3, r3, #23
    bdd6:	4013      	ands	r3, r2
    bdd8:	d008      	beq.n	bdec <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    bdda:	4b0d      	ldr	r3, [pc, #52]	; (be10 <sd_spi_op_cond+0xe0>)
    bddc:	681a      	ldr	r2, [r3, #0]
    bdde:	4b0c      	ldr	r3, [pc, #48]	; (be10 <sd_spi_op_cond+0xe0>)
    bde0:	681b      	ldr	r3, [r3, #0]
    bde2:	7adb      	ldrb	r3, [r3, #11]
    bde4:	2108      	movs	r1, #8
    bde6:	430b      	orrs	r3, r1
    bde8:	b2db      	uxtb	r3, r3
    bdea:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    bdec:	2301      	movs	r3, #1
}
    bdee:	0018      	movs	r0, r3
    bdf0:	46bd      	mov	sp, r7
    bdf2:	b006      	add	sp, #24
    bdf4:	bd80      	pop	{r7, pc}
    bdf6:	46c0      	nop			; (mov r8, r8)
    bdf8:	00001bee 	.word	0x00001bee
    bdfc:	00001137 	.word	0x00001137
    be00:	0000d701 	.word	0x0000d701
    be04:	00001129 	.word	0x00001129
    be08:	0000d941 	.word	0x0000d941
    be0c:	0000053a 	.word	0x0000053a
    be10:	200042d4 	.word	0x200042d4

0000be14 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    be14:	b580      	push	{r7, lr}
    be16:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    be18:	2301      	movs	r3, #1
}
    be1a:	0018      	movs	r0, r3
    be1c:	46bd      	mov	sp, r7
    be1e:	bd80      	pop	{r7, pc}

0000be20 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    be20:	b580      	push	{r7, lr}
    be22:	b084      	sub	sp, #16
    be24:	af00      	add	r7, sp, #0
    be26:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    be28:	687b      	ldr	r3, [r7, #4]
    be2a:	2200      	movs	r2, #0
    be2c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    be2e:	23d5      	movs	r3, #213	; 0xd5
    be30:	005b      	lsls	r3, r3, #1
    be32:	4a14      	ldr	r2, [pc, #80]	; (be84 <sd_cmd8+0x64>)
    be34:	0019      	movs	r1, r3
    be36:	0010      	movs	r0, r2
    be38:	4b13      	ldr	r3, [pc, #76]	; (be88 <sd_cmd8+0x68>)
    be3a:	4798      	blx	r3
    be3c:	0003      	movs	r3, r0
    be3e:	001a      	movs	r2, r3
    be40:	2301      	movs	r3, #1
    be42:	4053      	eors	r3, r2
    be44:	b2db      	uxtb	r3, r3
    be46:	2b00      	cmp	r3, #0
    be48:	d001      	beq.n	be4e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    be4a:	2301      	movs	r3, #1
    be4c:	e015      	b.n	be7a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    be4e:	4b0f      	ldr	r3, [pc, #60]	; (be8c <sd_cmd8+0x6c>)
    be50:	4798      	blx	r3
    be52:	0003      	movs	r3, r0
    be54:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    be56:	68fb      	ldr	r3, [r7, #12]
    be58:	3301      	adds	r3, #1
    be5a:	d101      	bne.n	be60 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    be5c:	2301      	movs	r3, #1
    be5e:	e00c      	b.n	be7a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    be60:	68fb      	ldr	r3, [r7, #12]
    be62:	051b      	lsls	r3, r3, #20
    be64:	0d1a      	lsrs	r2, r3, #20
    be66:	23d5      	movs	r3, #213	; 0xd5
    be68:	005b      	lsls	r3, r3, #1
    be6a:	429a      	cmp	r2, r3
    be6c:	d001      	beq.n	be72 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    be6e:	2300      	movs	r3, #0
    be70:	e003      	b.n	be7a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    be72:	687b      	ldr	r3, [r7, #4]
    be74:	2201      	movs	r2, #1
    be76:	701a      	strb	r2, [r3, #0]
	return true;
    be78:	2301      	movs	r3, #1
}
    be7a:	0018      	movs	r0, r3
    be7c:	46bd      	mov	sp, r7
    be7e:	b004      	add	sp, #16
    be80:	bd80      	pop	{r7, pc}
    be82:	46c0      	nop			; (mov r8, r8)
    be84:	00005508 	.word	0x00005508
    be88:	0000d701 	.word	0x0000d701
    be8c:	0000d941 	.word	0x0000d941

0000be90 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    be90:	b590      	push	{r4, r7, lr}
    be92:	b089      	sub	sp, #36	; 0x24
    be94:	af02      	add	r7, sp, #8
    be96:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    be98:	2380      	movs	r3, #128	; 0x80
    be9a:	009a      	lsls	r2, r3, #2
    be9c:	4841      	ldr	r0, [pc, #260]	; (bfa4 <mmc_cmd8+0x114>)
    be9e:	2300      	movs	r3, #0
    bea0:	9300      	str	r3, [sp, #0]
    bea2:	2301      	movs	r3, #1
    bea4:	2100      	movs	r1, #0
    bea6:	4c40      	ldr	r4, [pc, #256]	; (bfa8 <mmc_cmd8+0x118>)
    bea8:	47a0      	blx	r4
    beaa:	0003      	movs	r3, r0
    beac:	001a      	movs	r2, r3
    beae:	2301      	movs	r3, #1
    beb0:	4053      	eors	r3, r2
    beb2:	b2db      	uxtb	r3, r3
    beb4:	2b00      	cmp	r3, #0
    beb6:	d001      	beq.n	bebc <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    beb8:	2300      	movs	r3, #0
    beba:	e06e      	b.n	bf9a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    bebc:	2316      	movs	r3, #22
    bebe:	18fb      	adds	r3, r7, r3
    bec0:	2200      	movs	r2, #0
    bec2:	801a      	strh	r2, [r3, #0]
    bec4:	e014      	b.n	bef0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    bec6:	2310      	movs	r3, #16
    bec8:	18fb      	adds	r3, r7, r3
    beca:	0018      	movs	r0, r3
    becc:	4b37      	ldr	r3, [pc, #220]	; (bfac <mmc_cmd8+0x11c>)
    bece:	4798      	blx	r3
    bed0:	0003      	movs	r3, r0
    bed2:	001a      	movs	r2, r3
    bed4:	2301      	movs	r3, #1
    bed6:	4053      	eors	r3, r2
    bed8:	b2db      	uxtb	r3, r3
    beda:	2b00      	cmp	r3, #0
    bedc:	d001      	beq.n	bee2 <mmc_cmd8+0x52>
			return false;
    bede:	2300      	movs	r3, #0
    bee0:	e05b      	b.n	bf9a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    bee2:	2316      	movs	r3, #22
    bee4:	18fb      	adds	r3, r7, r3
    bee6:	881a      	ldrh	r2, [r3, #0]
    bee8:	2316      	movs	r3, #22
    beea:	18fb      	adds	r3, r7, r3
    beec:	3201      	adds	r2, #1
    beee:	801a      	strh	r2, [r3, #0]
    bef0:	2316      	movs	r3, #22
    bef2:	18fb      	adds	r3, r7, r3
    bef4:	881b      	ldrh	r3, [r3, #0]
    bef6:	2b31      	cmp	r3, #49	; 0x31
    bef8:	d9e5      	bls.n	bec6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    befa:	693b      	ldr	r3, [r7, #16]
    befc:	b2db      	uxtb	r3, r3
    befe:	2202      	movs	r2, #2
    bf00:	4013      	ands	r3, r2
    bf02:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    bf04:	687b      	ldr	r3, [r7, #4]
    bf06:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    bf08:	4b29      	ldr	r3, [pc, #164]	; (bfb0 <mmc_cmd8+0x120>)
    bf0a:	681b      	ldr	r3, [r3, #0]
    bf0c:	330e      	adds	r3, #14
    bf0e:	0018      	movs	r0, r3
    bf10:	230c      	movs	r3, #12
    bf12:	223e      	movs	r2, #62	; 0x3e
    bf14:	2180      	movs	r1, #128	; 0x80
    bf16:	4c27      	ldr	r4, [pc, #156]	; (bfb4 <mmc_cmd8+0x124>)
    bf18:	47a0      	blx	r4
    bf1a:	0002      	movs	r2, r0
    bf1c:	4b26      	ldr	r3, [pc, #152]	; (bfb8 <mmc_cmd8+0x128>)
    bf1e:	429a      	cmp	r2, r3
    bf20:	d135      	bne.n	bf8e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    bf22:	e014      	b.n	bf4e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    bf24:	230c      	movs	r3, #12
    bf26:	18fb      	adds	r3, r7, r3
    bf28:	0018      	movs	r0, r3
    bf2a:	4b20      	ldr	r3, [pc, #128]	; (bfac <mmc_cmd8+0x11c>)
    bf2c:	4798      	blx	r3
    bf2e:	0003      	movs	r3, r0
    bf30:	001a      	movs	r2, r3
    bf32:	2301      	movs	r3, #1
    bf34:	4053      	eors	r3, r2
    bf36:	b2db      	uxtb	r3, r3
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d001      	beq.n	bf40 <mmc_cmd8+0xb0>
				return false;
    bf3c:	2300      	movs	r3, #0
    bf3e:	e02c      	b.n	bf9a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    bf40:	2316      	movs	r3, #22
    bf42:	18fb      	adds	r3, r7, r3
    bf44:	881a      	ldrh	r2, [r3, #0]
    bf46:	2316      	movs	r3, #22
    bf48:	18fb      	adds	r3, r7, r3
    bf4a:	3201      	adds	r2, #1
    bf4c:	801a      	strh	r2, [r3, #0]
    bf4e:	2316      	movs	r3, #22
    bf50:	18fb      	adds	r3, r7, r3
    bf52:	881b      	ldrh	r3, [r3, #0]
    bf54:	2b35      	cmp	r3, #53	; 0x35
    bf56:	d9e5      	bls.n	bf24 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    bf58:	4b15      	ldr	r3, [pc, #84]	; (bfb0 <mmc_cmd8+0x120>)
    bf5a:	681b      	ldr	r3, [r3, #0]
    bf5c:	68fa      	ldr	r2, [r7, #12]
    bf5e:	0852      	lsrs	r2, r2, #1
    bf60:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    bf62:	e014      	b.n	bf8e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    bf64:	230c      	movs	r3, #12
    bf66:	18fb      	adds	r3, r7, r3
    bf68:	0018      	movs	r0, r3
    bf6a:	4b10      	ldr	r3, [pc, #64]	; (bfac <mmc_cmd8+0x11c>)
    bf6c:	4798      	blx	r3
    bf6e:	0003      	movs	r3, r0
    bf70:	001a      	movs	r2, r3
    bf72:	2301      	movs	r3, #1
    bf74:	4053      	eors	r3, r2
    bf76:	b2db      	uxtb	r3, r3
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d001      	beq.n	bf80 <mmc_cmd8+0xf0>
			return false;
    bf7c:	2300      	movs	r3, #0
    bf7e:	e00c      	b.n	bf9a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    bf80:	2316      	movs	r3, #22
    bf82:	18fb      	adds	r3, r7, r3
    bf84:	881a      	ldrh	r2, [r3, #0]
    bf86:	2316      	movs	r3, #22
    bf88:	18fb      	adds	r3, r7, r3
    bf8a:	3201      	adds	r2, #1
    bf8c:	801a      	strh	r2, [r3, #0]
    bf8e:	2316      	movs	r3, #22
    bf90:	18fb      	adds	r3, r7, r3
    bf92:	881b      	ldrh	r3, [r3, #0]
    bf94:	2b7f      	cmp	r3, #127	; 0x7f
    bf96:	d9e5      	bls.n	bf64 <mmc_cmd8+0xd4>
		}
	}
	return true;
    bf98:	2301      	movs	r3, #1
}
    bf9a:	0018      	movs	r0, r3
    bf9c:	46bd      	mov	sp, r7
    bf9e:	b007      	add	sp, #28
    bfa0:	bd90      	pop	{r4, r7, pc}
    bfa2:	46c0      	nop			; (mov r8, r8)
    bfa4:	00081108 	.word	0x00081108
    bfa8:	0000d729 	.word	0x0000d729
    bfac:	0000d955 	.word	0x0000d955
    bfb0:	200042d4 	.word	0x200042d4
    bfb4:	0000bb29 	.word	0x0000bb29
    bfb8:	00000fff 	.word	0x00000fff

0000bfbc <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    bfbc:	b590      	push	{r4, r7, lr}
    bfbe:	b083      	sub	sp, #12
    bfc0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    bfc2:	4b15      	ldr	r3, [pc, #84]	; (c018 <sd_mmc_cmd9_spi+0x5c>)
    bfc4:	681b      	ldr	r3, [r3, #0]
    bfc6:	891b      	ldrh	r3, [r3, #8]
    bfc8:	0419      	lsls	r1, r3, #16
    bfca:	4814      	ldr	r0, [pc, #80]	; (c01c <sd_mmc_cmd9_spi+0x60>)
    bfcc:	2301      	movs	r3, #1
    bfce:	9300      	str	r3, [sp, #0]
    bfd0:	2301      	movs	r3, #1
    bfd2:	2210      	movs	r2, #16
    bfd4:	4c12      	ldr	r4, [pc, #72]	; (c020 <sd_mmc_cmd9_spi+0x64>)
    bfd6:	47a0      	blx	r4
    bfd8:	0003      	movs	r3, r0
    bfda:	001a      	movs	r2, r3
    bfdc:	2301      	movs	r3, #1
    bfde:	4053      	eors	r3, r2
    bfe0:	b2db      	uxtb	r3, r3
    bfe2:	2b00      	cmp	r3, #0
    bfe4:	d001      	beq.n	bfea <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    bfe6:	2300      	movs	r3, #0
    bfe8:	e012      	b.n	c010 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    bfea:	4b0b      	ldr	r3, [pc, #44]	; (c018 <sd_mmc_cmd9_spi+0x5c>)
    bfec:	681b      	ldr	r3, [r3, #0]
    bfee:	330e      	adds	r3, #14
    bff0:	2101      	movs	r1, #1
    bff2:	0018      	movs	r0, r3
    bff4:	4b0b      	ldr	r3, [pc, #44]	; (c024 <sd_mmc_cmd9_spi+0x68>)
    bff6:	4798      	blx	r3
    bff8:	0003      	movs	r3, r0
    bffa:	001a      	movs	r2, r3
    bffc:	2301      	movs	r3, #1
    bffe:	4053      	eors	r3, r2
    c000:	b2db      	uxtb	r3, r3
    c002:	2b00      	cmp	r3, #0
    c004:	d001      	beq.n	c00a <sd_mmc_cmd9_spi+0x4e>
		return false;
    c006:	2300      	movs	r3, #0
    c008:	e002      	b.n	c010 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    c00a:	4b07      	ldr	r3, [pc, #28]	; (c028 <sd_mmc_cmd9_spi+0x6c>)
    c00c:	4798      	blx	r3
    c00e:	0003      	movs	r3, r0
}
    c010:	0018      	movs	r0, r3
    c012:	46bd      	mov	sp, r7
    c014:	b001      	add	sp, #4
    c016:	bd90      	pop	{r4, r7, pc}
    c018:	200042d4 	.word	0x200042d4
    c01c:	00081109 	.word	0x00081109
    c020:	0000d729 	.word	0x0000d729
    c024:	0000d9f9 	.word	0x0000d9f9
    c028:	0000da9d 	.word	0x0000da9d

0000c02c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    c02c:	b5b0      	push	{r4, r5, r7, lr}
    c02e:	b084      	sub	sp, #16
    c030:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    c032:	4b45      	ldr	r3, [pc, #276]	; (c148 <mmc_decode_csd+0x11c>)
    c034:	681b      	ldr	r3, [r3, #0]
    c036:	330e      	adds	r3, #14
    c038:	0018      	movs	r0, r3
    c03a:	2304      	movs	r3, #4
    c03c:	227a      	movs	r2, #122	; 0x7a
    c03e:	2180      	movs	r1, #128	; 0x80
    c040:	4c42      	ldr	r4, [pc, #264]	; (c14c <mmc_decode_csd+0x120>)
    c042:	47a0      	blx	r4
    c044:	0003      	movs	r3, r0
    c046:	2b02      	cmp	r3, #2
    c048:	d011      	beq.n	c06e <mmc_decode_csd+0x42>
    c04a:	d802      	bhi.n	c052 <mmc_decode_csd+0x26>
    c04c:	2b01      	cmp	r3, #1
    c04e:	d009      	beq.n	c064 <mmc_decode_csd+0x38>
    c050:	e003      	b.n	c05a <mmc_decode_csd+0x2e>
    c052:	2b03      	cmp	r3, #3
    c054:	d010      	beq.n	c078 <mmc_decode_csd+0x4c>
    c056:	2b04      	cmp	r3, #4
    c058:	d013      	beq.n	c082 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    c05a:	4b3b      	ldr	r3, [pc, #236]	; (c148 <mmc_decode_csd+0x11c>)
    c05c:	681b      	ldr	r3, [r3, #0]
    c05e:	2212      	movs	r2, #18
    c060:	731a      	strb	r2, [r3, #12]
		break;
    c062:	e013      	b.n	c08c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    c064:	4b38      	ldr	r3, [pc, #224]	; (c148 <mmc_decode_csd+0x11c>)
    c066:	681b      	ldr	r3, [r3, #0]
    c068:	2214      	movs	r2, #20
    c06a:	731a      	strb	r2, [r3, #12]
		break;
    c06c:	e00e      	b.n	c08c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    c06e:	4b36      	ldr	r3, [pc, #216]	; (c148 <mmc_decode_csd+0x11c>)
    c070:	681b      	ldr	r3, [r3, #0]
    c072:	2222      	movs	r2, #34	; 0x22
    c074:	731a      	strb	r2, [r3, #12]
		break;
    c076:	e009      	b.n	c08c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    c078:	4b33      	ldr	r3, [pc, #204]	; (c148 <mmc_decode_csd+0x11c>)
    c07a:	681b      	ldr	r3, [r3, #0]
    c07c:	2230      	movs	r2, #48	; 0x30
    c07e:	731a      	strb	r2, [r3, #12]
		break;
    c080:	e004      	b.n	c08c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    c082:	4b31      	ldr	r3, [pc, #196]	; (c148 <mmc_decode_csd+0x11c>)
    c084:	681b      	ldr	r3, [r3, #0]
    c086:	2240      	movs	r2, #64	; 0x40
    c088:	731a      	strb	r2, [r3, #12]
		break;
    c08a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    c08c:	4b2e      	ldr	r3, [pc, #184]	; (c148 <mmc_decode_csd+0x11c>)
    c08e:	681b      	ldr	r3, [r3, #0]
    c090:	330e      	adds	r3, #14
    c092:	0018      	movs	r0, r3
    c094:	2308      	movs	r3, #8
    c096:	2260      	movs	r2, #96	; 0x60
    c098:	2180      	movs	r1, #128	; 0x80
    c09a:	4c2c      	ldr	r4, [pc, #176]	; (c14c <mmc_decode_csd+0x120>)
    c09c:	47a0      	blx	r4
    c09e:	0003      	movs	r3, r0
    c0a0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    c0a2:	68fb      	ldr	r3, [r7, #12]
    c0a4:	2207      	movs	r2, #7
    c0a6:	401a      	ands	r2, r3
    c0a8:	4b29      	ldr	r3, [pc, #164]	; (c150 <mmc_decode_csd+0x124>)
    c0aa:	0092      	lsls	r2, r2, #2
    c0ac:	58d3      	ldr	r3, [r2, r3]
    c0ae:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    c0b0:	68fb      	ldr	r3, [r7, #12]
    c0b2:	08db      	lsrs	r3, r3, #3
    c0b4:	220f      	movs	r2, #15
    c0b6:	401a      	ands	r2, r3
    c0b8:	4b26      	ldr	r3, [pc, #152]	; (c154 <mmc_decode_csd+0x128>)
    c0ba:	0092      	lsls	r2, r2, #2
    c0bc:	58d3      	ldr	r3, [r2, r3]
    c0be:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    c0c0:	4b21      	ldr	r3, [pc, #132]	; (c148 <mmc_decode_csd+0x11c>)
    c0c2:	681b      	ldr	r3, [r3, #0]
    c0c4:	68ba      	ldr	r2, [r7, #8]
    c0c6:	6879      	ldr	r1, [r7, #4]
    c0c8:	434a      	muls	r2, r1
    c0ca:	21fa      	movs	r1, #250	; 0xfa
    c0cc:	0089      	lsls	r1, r1, #2
    c0ce:	434a      	muls	r2, r1
    c0d0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    c0d2:	4b1d      	ldr	r3, [pc, #116]	; (c148 <mmc_decode_csd+0x11c>)
    c0d4:	681b      	ldr	r3, [r3, #0]
    c0d6:	330e      	adds	r3, #14
    c0d8:	0018      	movs	r0, r3
    c0da:	230c      	movs	r3, #12
    c0dc:	223e      	movs	r2, #62	; 0x3e
    c0de:	2180      	movs	r1, #128	; 0x80
    c0e0:	4c1a      	ldr	r4, [pc, #104]	; (c14c <mmc_decode_csd+0x120>)
    c0e2:	47a0      	blx	r4
    c0e4:	0002      	movs	r2, r0
    c0e6:	4b1c      	ldr	r3, [pc, #112]	; (c158 <mmc_decode_csd+0x12c>)
    c0e8:	429a      	cmp	r2, r3
    c0ea:	d028      	beq.n	c13e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    c0ec:	4b16      	ldr	r3, [pc, #88]	; (c148 <mmc_decode_csd+0x11c>)
    c0ee:	681b      	ldr	r3, [r3, #0]
    c0f0:	330e      	adds	r3, #14
    c0f2:	0018      	movs	r0, r3
    c0f4:	230c      	movs	r3, #12
    c0f6:	223e      	movs	r2, #62	; 0x3e
    c0f8:	2180      	movs	r1, #128	; 0x80
    c0fa:	4c14      	ldr	r4, [pc, #80]	; (c14c <mmc_decode_csd+0x120>)
    c0fc:	47a0      	blx	r4
    c0fe:	0003      	movs	r3, r0
    c100:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    c102:	4b11      	ldr	r3, [pc, #68]	; (c148 <mmc_decode_csd+0x11c>)
    c104:	681b      	ldr	r3, [r3, #0]
    c106:	330e      	adds	r3, #14
    c108:	0018      	movs	r0, r3
    c10a:	2303      	movs	r3, #3
    c10c:	222f      	movs	r2, #47	; 0x2f
    c10e:	2180      	movs	r1, #128	; 0x80
    c110:	4d0e      	ldr	r5, [pc, #56]	; (c14c <mmc_decode_csd+0x120>)
    c112:	47a8      	blx	r5
    c114:	0003      	movs	r3, r0
    c116:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    c118:	409c      	lsls	r4, r3
    c11a:	0023      	movs	r3, r4
    c11c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    c11e:	4b0a      	ldr	r3, [pc, #40]	; (c148 <mmc_decode_csd+0x11c>)
    c120:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    c122:	4b09      	ldr	r3, [pc, #36]	; (c148 <mmc_decode_csd+0x11c>)
    c124:	681b      	ldr	r3, [r3, #0]
    c126:	330e      	adds	r3, #14
    c128:	0018      	movs	r0, r3
    c12a:	2304      	movs	r3, #4
    c12c:	2250      	movs	r2, #80	; 0x50
    c12e:	2180      	movs	r1, #128	; 0x80
    c130:	4d06      	ldr	r5, [pc, #24]	; (c14c <mmc_decode_csd+0x120>)
    c132:	47a8      	blx	r5
    c134:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    c136:	683b      	ldr	r3, [r7, #0]
    c138:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    c13a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    c13c:	6063      	str	r3, [r4, #4]
	}
}
    c13e:	46c0      	nop			; (mov r8, r8)
    c140:	46bd      	mov	sp, r7
    c142:	b004      	add	sp, #16
    c144:	bdb0      	pop	{r4, r5, r7, pc}
    c146:	46c0      	nop			; (mov r8, r8)
    c148:	200042d4 	.word	0x200042d4
    c14c:	0000bb29 	.word	0x0000bb29
    c150:	00027044 	.word	0x00027044
    c154:	000270a0 	.word	0x000270a0
    c158:	00000fff 	.word	0x00000fff

0000c15c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    c15c:	b5b0      	push	{r4, r5, r7, lr}
    c15e:	b084      	sub	sp, #16
    c160:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    c162:	4b35      	ldr	r3, [pc, #212]	; (c238 <sd_decode_csd+0xdc>)
    c164:	681b      	ldr	r3, [r3, #0]
    c166:	330e      	adds	r3, #14
    c168:	0018      	movs	r0, r3
    c16a:	2308      	movs	r3, #8
    c16c:	2260      	movs	r2, #96	; 0x60
    c16e:	2180      	movs	r1, #128	; 0x80
    c170:	4c32      	ldr	r4, [pc, #200]	; (c23c <sd_decode_csd+0xe0>)
    c172:	47a0      	blx	r4
    c174:	0003      	movs	r3, r0
    c176:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    c178:	68fb      	ldr	r3, [r7, #12]
    c17a:	2207      	movs	r2, #7
    c17c:	401a      	ands	r2, r3
    c17e:	4b30      	ldr	r3, [pc, #192]	; (c240 <sd_decode_csd+0xe4>)
    c180:	0092      	lsls	r2, r2, #2
    c182:	58d3      	ldr	r3, [r2, r3]
    c184:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    c186:	68fb      	ldr	r3, [r7, #12]
    c188:	08db      	lsrs	r3, r3, #3
    c18a:	220f      	movs	r2, #15
    c18c:	401a      	ands	r2, r3
    c18e:	4b2d      	ldr	r3, [pc, #180]	; (c244 <sd_decode_csd+0xe8>)
    c190:	0092      	lsls	r2, r2, #2
    c192:	58d3      	ldr	r3, [r2, r3]
    c194:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    c196:	4b28      	ldr	r3, [pc, #160]	; (c238 <sd_decode_csd+0xdc>)
    c198:	681b      	ldr	r3, [r3, #0]
    c19a:	68ba      	ldr	r2, [r7, #8]
    c19c:	6879      	ldr	r1, [r7, #4]
    c19e:	434a      	muls	r2, r1
    c1a0:	21fa      	movs	r1, #250	; 0xfa
    c1a2:	0089      	lsls	r1, r1, #2
    c1a4:	434a      	muls	r2, r1
    c1a6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    c1a8:	4b23      	ldr	r3, [pc, #140]	; (c238 <sd_decode_csd+0xdc>)
    c1aa:	681b      	ldr	r3, [r3, #0]
    c1ac:	330e      	adds	r3, #14
    c1ae:	0018      	movs	r0, r3
    c1b0:	2302      	movs	r3, #2
    c1b2:	227e      	movs	r2, #126	; 0x7e
    c1b4:	2180      	movs	r1, #128	; 0x80
    c1b6:	4c21      	ldr	r4, [pc, #132]	; (c23c <sd_decode_csd+0xe0>)
    c1b8:	47a0      	blx	r4
    c1ba:	1e03      	subs	r3, r0, #0
    c1bc:	d00f      	beq.n	c1de <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    c1be:	4b1e      	ldr	r3, [pc, #120]	; (c238 <sd_decode_csd+0xdc>)
    c1c0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    c1c2:	4b1d      	ldr	r3, [pc, #116]	; (c238 <sd_decode_csd+0xdc>)
    c1c4:	681b      	ldr	r3, [r3, #0]
    c1c6:	330e      	adds	r3, #14
    c1c8:	0018      	movs	r0, r3
    c1ca:	2316      	movs	r3, #22
    c1cc:	2230      	movs	r2, #48	; 0x30
    c1ce:	2180      	movs	r1, #128	; 0x80
    c1d0:	4d1a      	ldr	r5, [pc, #104]	; (c23c <sd_decode_csd+0xe0>)
    c1d2:	47a8      	blx	r5
    c1d4:	0003      	movs	r3, r0
				* 512;
    c1d6:	3301      	adds	r3, #1
    c1d8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    c1da:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    c1dc:	e028      	b.n	c230 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    c1de:	4b16      	ldr	r3, [pc, #88]	; (c238 <sd_decode_csd+0xdc>)
    c1e0:	681b      	ldr	r3, [r3, #0]
    c1e2:	330e      	adds	r3, #14
    c1e4:	0018      	movs	r0, r3
    c1e6:	230c      	movs	r3, #12
    c1e8:	223e      	movs	r2, #62	; 0x3e
    c1ea:	2180      	movs	r1, #128	; 0x80
    c1ec:	4c13      	ldr	r4, [pc, #76]	; (c23c <sd_decode_csd+0xe0>)
    c1ee:	47a0      	blx	r4
    c1f0:	0003      	movs	r3, r0
    c1f2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    c1f4:	4b10      	ldr	r3, [pc, #64]	; (c238 <sd_decode_csd+0xdc>)
    c1f6:	681b      	ldr	r3, [r3, #0]
    c1f8:	330e      	adds	r3, #14
    c1fa:	0018      	movs	r0, r3
    c1fc:	2303      	movs	r3, #3
    c1fe:	222f      	movs	r2, #47	; 0x2f
    c200:	2180      	movs	r1, #128	; 0x80
    c202:	4d0e      	ldr	r5, [pc, #56]	; (c23c <sd_decode_csd+0xe0>)
    c204:	47a8      	blx	r5
    c206:	0003      	movs	r3, r0
    c208:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    c20a:	409c      	lsls	r4, r3
    c20c:	0023      	movs	r3, r4
    c20e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    c210:	4b09      	ldr	r3, [pc, #36]	; (c238 <sd_decode_csd+0xdc>)
    c212:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    c214:	4b08      	ldr	r3, [pc, #32]	; (c238 <sd_decode_csd+0xdc>)
    c216:	681b      	ldr	r3, [r3, #0]
    c218:	330e      	adds	r3, #14
    c21a:	0018      	movs	r0, r3
    c21c:	2304      	movs	r3, #4
    c21e:	2250      	movs	r2, #80	; 0x50
    c220:	2180      	movs	r1, #128	; 0x80
    c222:	4d06      	ldr	r5, [pc, #24]	; (c23c <sd_decode_csd+0xe0>)
    c224:	47a8      	blx	r5
    c226:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    c228:	683b      	ldr	r3, [r7, #0]
    c22a:	4093      	lsls	r3, r2
				/ 1024;
    c22c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    c22e:	6063      	str	r3, [r4, #4]
}
    c230:	46c0      	nop			; (mov r8, r8)
    c232:	46bd      	mov	sp, r7
    c234:	b004      	add	sp, #16
    c236:	bdb0      	pop	{r4, r5, r7, pc}
    c238:	200042d4 	.word	0x200042d4
    c23c:	0000bb29 	.word	0x0000bb29
    c240:	00027044 	.word	0x00027044
    c244:	00027060 	.word	0x00027060

0000c248 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    c248:	b580      	push	{r7, lr}
    c24a:	b082      	sub	sp, #8
    c24c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    c24e:	4b11      	ldr	r3, [pc, #68]	; (c294 <sd_mmc_cmd13+0x4c>)
    c250:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    c252:	4b11      	ldr	r3, [pc, #68]	; (c298 <sd_mmc_cmd13+0x50>)
    c254:	2100      	movs	r1, #0
    c256:	0018      	movs	r0, r3
    c258:	4b10      	ldr	r3, [pc, #64]	; (c29c <sd_mmc_cmd13+0x54>)
    c25a:	4798      	blx	r3
    c25c:	0003      	movs	r3, r0
    c25e:	001a      	movs	r2, r3
    c260:	2301      	movs	r3, #1
    c262:	4053      	eors	r3, r2
    c264:	b2db      	uxtb	r3, r3
    c266:	2b00      	cmp	r3, #0
    c268:	d001      	beq.n	c26e <sd_mmc_cmd13+0x26>
				return false;
    c26a:	2300      	movs	r3, #0
    c26c:	e00e      	b.n	c28c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    c26e:	4b0c      	ldr	r3, [pc, #48]	; (c2a0 <sd_mmc_cmd13+0x58>)
    c270:	4798      	blx	r3
    c272:	0002      	movs	r2, r0
    c274:	23ff      	movs	r3, #255	; 0xff
    c276:	4013      	ands	r3, r2
    c278:	d006      	beq.n	c288 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    c27a:	687b      	ldr	r3, [r7, #4]
    c27c:	1e5a      	subs	r2, r3, #1
    c27e:	607a      	str	r2, [r7, #4]
    c280:	2b00      	cmp	r3, #0
    c282:	d1e6      	bne.n	c252 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    c284:	2300      	movs	r3, #0
    c286:	e001      	b.n	c28c <sd_mmc_cmd13+0x44>
				break;
    c288:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    c28a:	2301      	movs	r3, #1
}
    c28c:	0018      	movs	r0, r3
    c28e:	46bd      	mov	sp, r7
    c290:	b002      	add	sp, #8
    c292:	bd80      	pop	{r7, pc}
    c294:	00030d40 	.word	0x00030d40
    c298:	00001b0d 	.word	0x00001b0d
    c29c:	0000d701 	.word	0x0000d701
    c2a0:	0000d941 	.word	0x0000d941

0000c2a4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    c2a4:	b590      	push	{r4, r7, lr}
    c2a6:	b085      	sub	sp, #20
    c2a8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    c2aa:	4b38      	ldr	r3, [pc, #224]	; (c38c <sd_acmd51+0xe8>)
    c2ac:	681b      	ldr	r3, [r3, #0]
    c2ae:	891b      	ldrh	r3, [r3, #8]
    c2b0:	041b      	lsls	r3, r3, #16
    c2b2:	4a37      	ldr	r2, [pc, #220]	; (c390 <sd_acmd51+0xec>)
    c2b4:	0019      	movs	r1, r3
    c2b6:	0010      	movs	r0, r2
    c2b8:	4b36      	ldr	r3, [pc, #216]	; (c394 <sd_acmd51+0xf0>)
    c2ba:	4798      	blx	r3
    c2bc:	0003      	movs	r3, r0
    c2be:	001a      	movs	r2, r3
    c2c0:	2301      	movs	r3, #1
    c2c2:	4053      	eors	r3, r2
    c2c4:	b2db      	uxtb	r3, r3
    c2c6:	2b00      	cmp	r3, #0
    c2c8:	d001      	beq.n	c2ce <sd_acmd51+0x2a>
		return false;
    c2ca:	2300      	movs	r3, #0
    c2cc:	e059      	b.n	c382 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    c2ce:	4832      	ldr	r0, [pc, #200]	; (c398 <sd_acmd51+0xf4>)
    c2d0:	2301      	movs	r3, #1
    c2d2:	9300      	str	r3, [sp, #0]
    c2d4:	2301      	movs	r3, #1
    c2d6:	2208      	movs	r2, #8
    c2d8:	2100      	movs	r1, #0
    c2da:	4c30      	ldr	r4, [pc, #192]	; (c39c <sd_acmd51+0xf8>)
    c2dc:	47a0      	blx	r4
    c2de:	0003      	movs	r3, r0
    c2e0:	001a      	movs	r2, r3
    c2e2:	2301      	movs	r3, #1
    c2e4:	4053      	eors	r3, r2
    c2e6:	b2db      	uxtb	r3, r3
    c2e8:	2b00      	cmp	r3, #0
    c2ea:	d001      	beq.n	c2f0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    c2ec:	2300      	movs	r3, #0
    c2ee:	e048      	b.n	c382 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    c2f0:	003b      	movs	r3, r7
    c2f2:	2101      	movs	r1, #1
    c2f4:	0018      	movs	r0, r3
    c2f6:	4b2a      	ldr	r3, [pc, #168]	; (c3a0 <sd_acmd51+0xfc>)
    c2f8:	4798      	blx	r3
    c2fa:	0003      	movs	r3, r0
    c2fc:	001a      	movs	r2, r3
    c2fe:	2301      	movs	r3, #1
    c300:	4053      	eors	r3, r2
    c302:	b2db      	uxtb	r3, r3
    c304:	2b00      	cmp	r3, #0
    c306:	d001      	beq.n	c30c <sd_acmd51+0x68>
		return false;
    c308:	2300      	movs	r3, #0
    c30a:	e03a      	b.n	c382 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    c30c:	4b25      	ldr	r3, [pc, #148]	; (c3a4 <sd_acmd51+0x100>)
    c30e:	4798      	blx	r3
    c310:	0003      	movs	r3, r0
    c312:	001a      	movs	r2, r3
    c314:	2301      	movs	r3, #1
    c316:	4053      	eors	r3, r2
    c318:	b2db      	uxtb	r3, r3
    c31a:	2b00      	cmp	r3, #0
    c31c:	d001      	beq.n	c322 <sd_acmd51+0x7e>
		return false;
    c31e:	2300      	movs	r3, #0
    c320:	e02f      	b.n	c382 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    c322:	0038      	movs	r0, r7
    c324:	2304      	movs	r3, #4
    c326:	2238      	movs	r2, #56	; 0x38
    c328:	2140      	movs	r1, #64	; 0x40
    c32a:	4c1f      	ldr	r4, [pc, #124]	; (c3a8 <sd_acmd51+0x104>)
    c32c:	47a0      	blx	r4
    c32e:	0003      	movs	r3, r0
    c330:	2b01      	cmp	r3, #1
    c332:	d008      	beq.n	c346 <sd_acmd51+0xa2>
    c334:	d302      	bcc.n	c33c <sd_acmd51+0x98>
    c336:	2b02      	cmp	r3, #2
    c338:	d00a      	beq.n	c350 <sd_acmd51+0xac>
    c33a:	e01c      	b.n	c376 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    c33c:	4b13      	ldr	r3, [pc, #76]	; (c38c <sd_acmd51+0xe8>)
    c33e:	681b      	ldr	r3, [r3, #0]
    c340:	2210      	movs	r2, #16
    c342:	731a      	strb	r2, [r3, #12]
		break;
    c344:	e01c      	b.n	c380 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    c346:	4b11      	ldr	r3, [pc, #68]	; (c38c <sd_acmd51+0xe8>)
    c348:	681b      	ldr	r3, [r3, #0]
    c34a:	221a      	movs	r2, #26
    c34c:	731a      	strb	r2, [r3, #12]
		break;
    c34e:	e017      	b.n	c380 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    c350:	0038      	movs	r0, r7
    c352:	2301      	movs	r3, #1
    c354:	222f      	movs	r2, #47	; 0x2f
    c356:	2140      	movs	r1, #64	; 0x40
    c358:	4c13      	ldr	r4, [pc, #76]	; (c3a8 <sd_acmd51+0x104>)
    c35a:	47a0      	blx	r4
    c35c:	0003      	movs	r3, r0
    c35e:	2b01      	cmp	r3, #1
    c360:	d104      	bne.n	c36c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    c362:	4b0a      	ldr	r3, [pc, #40]	; (c38c <sd_acmd51+0xe8>)
    c364:	681b      	ldr	r3, [r3, #0]
    c366:	2230      	movs	r2, #48	; 0x30
    c368:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    c36a:	e009      	b.n	c380 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    c36c:	4b07      	ldr	r3, [pc, #28]	; (c38c <sd_acmd51+0xe8>)
    c36e:	681b      	ldr	r3, [r3, #0]
    c370:	2220      	movs	r2, #32
    c372:	731a      	strb	r2, [r3, #12]
		break;
    c374:	e004      	b.n	c380 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    c376:	4b05      	ldr	r3, [pc, #20]	; (c38c <sd_acmd51+0xe8>)
    c378:	681b      	ldr	r3, [r3, #0]
    c37a:	2210      	movs	r2, #16
    c37c:	731a      	strb	r2, [r3, #12]
		break;
    c37e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    c380:	2301      	movs	r3, #1
}
    c382:	0018      	movs	r0, r3
    c384:	46bd      	mov	sp, r7
    c386:	b003      	add	sp, #12
    c388:	bd90      	pop	{r4, r7, pc}
    c38a:	46c0      	nop			; (mov r8, r8)
    c38c:	200042d4 	.word	0x200042d4
    c390:	00001137 	.word	0x00001137
    c394:	0000d701 	.word	0x0000d701
    c398:	00081133 	.word	0x00081133
    c39c:	0000d729 	.word	0x0000d729
    c3a0:	0000d9f9 	.word	0x0000d9f9
    c3a4:	0000da9d 	.word	0x0000da9d
    c3a8:	0000bb29 	.word	0x0000bb29

0000c3ac <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    c3ac:	b580      	push	{r7, lr}
    c3ae:	b082      	sub	sp, #8
    c3b0:	af00      	add	r7, sp, #0
    c3b2:	0002      	movs	r2, r0
    c3b4:	1dfb      	adds	r3, r7, #7
    c3b6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    c3b8:	1dfb      	adds	r3, r7, #7
    c3ba:	781b      	ldrb	r3, [r3, #0]
    c3bc:	2b00      	cmp	r3, #0
    c3be:	d001      	beq.n	c3c4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    c3c0:	2304      	movs	r3, #4
    c3c2:	e047      	b.n	c454 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    c3c4:	1dfb      	adds	r3, r7, #7
    c3c6:	781b      	ldrb	r3, [r3, #0]
    c3c8:	4a24      	ldr	r2, [pc, #144]	; (c45c <sd_mmc_select_slot+0xb0>)
    c3ca:	015b      	lsls	r3, r3, #5
    c3cc:	18d3      	adds	r3, r2, r3
    c3ce:	330a      	adds	r3, #10
    c3d0:	781b      	ldrb	r3, [r3, #0]
    c3d2:	2b04      	cmp	r3, #4
    c3d4:	d008      	beq.n	c3e8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    c3d6:	1dfb      	adds	r3, r7, #7
    c3d8:	781b      	ldrb	r3, [r3, #0]
    c3da:	4a20      	ldr	r2, [pc, #128]	; (c45c <sd_mmc_select_slot+0xb0>)
    c3dc:	015b      	lsls	r3, r3, #5
    c3de:	18d3      	adds	r3, r2, r3
    c3e0:	330a      	adds	r3, #10
    c3e2:	781b      	ldrb	r3, [r3, #0]
    c3e4:	2b03      	cmp	r3, #3
    c3e6:	d11d      	bne.n	c424 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    c3e8:	1dfb      	adds	r3, r7, #7
    c3ea:	781b      	ldrb	r3, [r3, #0]
    c3ec:	4a1b      	ldr	r2, [pc, #108]	; (c45c <sd_mmc_select_slot+0xb0>)
    c3ee:	015b      	lsls	r3, r3, #5
    c3f0:	18d3      	adds	r3, r2, r3
    c3f2:	330a      	adds	r3, #10
    c3f4:	2202      	movs	r2, #2
    c3f6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    c3f8:	1dfb      	adds	r3, r7, #7
    c3fa:	781a      	ldrb	r2, [r3, #0]
    c3fc:	4b17      	ldr	r3, [pc, #92]	; (c45c <sd_mmc_select_slot+0xb0>)
    c3fe:	0152      	lsls	r2, r2, #5
    c400:	4917      	ldr	r1, [pc, #92]	; (c460 <sd_mmc_select_slot+0xb4>)
    c402:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    c404:	1dfb      	adds	r3, r7, #7
    c406:	781b      	ldrb	r3, [r3, #0]
    c408:	4a14      	ldr	r2, [pc, #80]	; (c45c <sd_mmc_select_slot+0xb0>)
    c40a:	015b      	lsls	r3, r3, #5
    c40c:	18d3      	adds	r3, r2, r3
    c40e:	330d      	adds	r3, #13
    c410:	2201      	movs	r2, #1
    c412:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    c414:	1dfb      	adds	r3, r7, #7
    c416:	781b      	ldrb	r3, [r3, #0]
    c418:	4a10      	ldr	r2, [pc, #64]	; (c45c <sd_mmc_select_slot+0xb0>)
    c41a:	015b      	lsls	r3, r3, #5
    c41c:	18d3      	adds	r3, r2, r3
    c41e:	331e      	adds	r3, #30
    c420:	2200      	movs	r2, #0
    c422:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    c424:	4b0f      	ldr	r3, [pc, #60]	; (c464 <sd_mmc_select_slot+0xb8>)
    c426:	1dfa      	adds	r2, r7, #7
    c428:	7812      	ldrb	r2, [r2, #0]
    c42a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    c42c:	1dfb      	adds	r3, r7, #7
    c42e:	781b      	ldrb	r3, [r3, #0]
    c430:	015a      	lsls	r2, r3, #5
    c432:	4b0a      	ldr	r3, [pc, #40]	; (c45c <sd_mmc_select_slot+0xb0>)
    c434:	18d2      	adds	r2, r2, r3
    c436:	4b0c      	ldr	r3, [pc, #48]	; (c468 <sd_mmc_select_slot+0xbc>)
    c438:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    c43a:	4b0c      	ldr	r3, [pc, #48]	; (c46c <sd_mmc_select_slot+0xc0>)
    c43c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    c43e:	1dfb      	adds	r3, r7, #7
    c440:	781b      	ldrb	r3, [r3, #0]
    c442:	4a06      	ldr	r2, [pc, #24]	; (c45c <sd_mmc_select_slot+0xb0>)
    c444:	015b      	lsls	r3, r3, #5
    c446:	18d3      	adds	r3, r2, r3
    c448:	330a      	adds	r3, #10
    c44a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    c44c:	3b02      	subs	r3, #2
    c44e:	425a      	negs	r2, r3
    c450:	4153      	adcs	r3, r2
    c452:	b2db      	uxtb	r3, r3
}
    c454:	0018      	movs	r0, r3
    c456:	46bd      	mov	sp, r7
    c458:	b002      	add	sp, #8
    c45a:	bd80      	pop	{r7, pc}
    c45c:	200042b0 	.word	0x200042b0
    c460:	00061a80 	.word	0x00061a80
    c464:	200042d0 	.word	0x200042d0
    c468:	200042d4 	.word	0x200042d4
    c46c:	0000c471 	.word	0x0000c471

0000c470 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    c470:	b5b0      	push	{r4, r5, r7, lr}
    c472:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    c474:	4b09      	ldr	r3, [pc, #36]	; (c49c <sd_mmc_configure_slot+0x2c>)
    c476:	7818      	ldrb	r0, [r3, #0]
    c478:	4b09      	ldr	r3, [pc, #36]	; (c4a0 <sd_mmc_configure_slot+0x30>)
    c47a:	681b      	ldr	r3, [r3, #0]
    c47c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    c47e:	4b08      	ldr	r3, [pc, #32]	; (c4a0 <sd_mmc_configure_slot+0x30>)
    c480:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    c482:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    c484:	4b06      	ldr	r3, [pc, #24]	; (c4a0 <sd_mmc_configure_slot+0x30>)
    c486:	681b      	ldr	r3, [r3, #0]
    c488:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    c48a:	1e5c      	subs	r4, r3, #1
    c48c:	41a3      	sbcs	r3, r4
    c48e:	b2db      	uxtb	r3, r3
    c490:	4c04      	ldr	r4, [pc, #16]	; (c4a4 <sd_mmc_configure_slot+0x34>)
    c492:	47a0      	blx	r4
}
    c494:	46c0      	nop			; (mov r8, r8)
    c496:	46bd      	mov	sp, r7
    c498:	bdb0      	pop	{r4, r5, r7, pc}
    c49a:	46c0      	nop			; (mov r8, r8)
    c49c:	200042d0 	.word	0x200042d0
    c4a0:	200042d4 	.word	0x200042d4
    c4a4:	0000d5e9 	.word	0x0000d5e9

0000c4a8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    c4a8:	b580      	push	{r7, lr}
    c4aa:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    c4ac:	4b05      	ldr	r3, [pc, #20]	; (c4c4 <sd_mmc_deselect_slot+0x1c>)
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d104      	bne.n	c4be <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    c4b4:	4b03      	ldr	r3, [pc, #12]	; (c4c4 <sd_mmc_deselect_slot+0x1c>)
    c4b6:	781b      	ldrb	r3, [r3, #0]
    c4b8:	0018      	movs	r0, r3
    c4ba:	4b03      	ldr	r3, [pc, #12]	; (c4c8 <sd_mmc_deselect_slot+0x20>)
    c4bc:	4798      	blx	r3
	}
}
    c4be:	46c0      	nop			; (mov r8, r8)
    c4c0:	46bd      	mov	sp, r7
    c4c2:	bd80      	pop	{r7, pc}
    c4c4:	200042d0 	.word	0x200042d0
    c4c8:	0000d671 	.word	0x0000d671

0000c4cc <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    c4cc:	b580      	push	{r7, lr}
    c4ce:	b082      	sub	sp, #8
    c4d0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    c4d2:	1dfb      	adds	r3, r7, #7
    c4d4:	2200      	movs	r2, #0
    c4d6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    c4d8:	4b59      	ldr	r3, [pc, #356]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c4da:	681b      	ldr	r3, [r3, #0]
    c4dc:	2201      	movs	r2, #1
    c4de:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    c4e0:	4b57      	ldr	r3, [pc, #348]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c4e2:	681b      	ldr	r3, [r3, #0]
    c4e4:	2200      	movs	r2, #0
    c4e6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    c4e8:	4b55      	ldr	r3, [pc, #340]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c4ea:	681b      	ldr	r3, [r3, #0]
    c4ec:	2200      	movs	r2, #0
    c4ee:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    c4f0:	4b54      	ldr	r3, [pc, #336]	; (c644 <sd_mmc_spi_card_init+0x178>)
    c4f2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    c4f4:	2388      	movs	r3, #136	; 0x88
    c4f6:	015b      	lsls	r3, r3, #5
    c4f8:	2100      	movs	r1, #0
    c4fa:	0018      	movs	r0, r3
    c4fc:	4b52      	ldr	r3, [pc, #328]	; (c648 <sd_mmc_spi_card_init+0x17c>)
    c4fe:	4798      	blx	r3
    c500:	0003      	movs	r3, r0
    c502:	001a      	movs	r2, r3
    c504:	2301      	movs	r3, #1
    c506:	4053      	eors	r3, r2
    c508:	b2db      	uxtb	r3, r3
    c50a:	2b00      	cmp	r3, #0
    c50c:	d001      	beq.n	c512 <sd_mmc_spi_card_init+0x46>
		return false;
    c50e:	2300      	movs	r3, #0
    c510:	e092      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    c512:	1dfb      	adds	r3, r7, #7
    c514:	0018      	movs	r0, r3
    c516:	4b4d      	ldr	r3, [pc, #308]	; (c64c <sd_mmc_spi_card_init+0x180>)
    c518:	4798      	blx	r3
    c51a:	0003      	movs	r3, r0
    c51c:	001a      	movs	r2, r3
    c51e:	2301      	movs	r3, #1
    c520:	4053      	eors	r3, r2
    c522:	b2db      	uxtb	r3, r3
    c524:	2b00      	cmp	r3, #0
    c526:	d001      	beq.n	c52c <sd_mmc_spi_card_init+0x60>
		return false;
    c528:	2300      	movs	r3, #0
    c52a:	e085      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    c52c:	4b48      	ldr	r3, [pc, #288]	; (c650 <sd_mmc_spi_card_init+0x184>)
    c52e:	4798      	blx	r3
    c530:	0003      	movs	r3, r0
    c532:	001a      	movs	r2, r3
    c534:	2301      	movs	r3, #1
    c536:	4053      	eors	r3, r2
    c538:	b2db      	uxtb	r3, r3
    c53a:	2b00      	cmp	r3, #0
    c53c:	d001      	beq.n	c542 <sd_mmc_spi_card_init+0x76>
		return false;
    c53e:	2300      	movs	r3, #0
    c540:	e07a      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    c542:	4b3f      	ldr	r3, [pc, #252]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c544:	681b      	ldr	r3, [r3, #0]
    c546:	7adb      	ldrb	r3, [r3, #11]
    c548:	001a      	movs	r2, r3
    c54a:	2301      	movs	r3, #1
    c54c:	4013      	ands	r3, r2
    c54e:	d021      	beq.n	c594 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    c550:	1dfb      	adds	r3, r7, #7
    c552:	781b      	ldrb	r3, [r3, #0]
    c554:	0018      	movs	r0, r3
    c556:	4b3f      	ldr	r3, [pc, #252]	; (c654 <sd_mmc_spi_card_init+0x188>)
    c558:	4798      	blx	r3
    c55a:	0003      	movs	r3, r0
    c55c:	001a      	movs	r2, r3
    c55e:	2301      	movs	r3, #1
    c560:	4053      	eors	r3, r2
    c562:	b2db      	uxtb	r3, r3
    c564:	2b00      	cmp	r3, #0
    c566:	d007      	beq.n	c578 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    c568:	4b35      	ldr	r3, [pc, #212]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c56a:	681b      	ldr	r3, [r3, #0]
    c56c:	2202      	movs	r2, #2
    c56e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    c570:	4b39      	ldr	r3, [pc, #228]	; (c658 <sd_mmc_spi_card_init+0x18c>)
    c572:	4798      	blx	r3
    c574:	0003      	movs	r3, r0
    c576:	e05f      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    c578:	4b38      	ldr	r3, [pc, #224]	; (c65c <sd_mmc_spi_card_init+0x190>)
    c57a:	2100      	movs	r1, #0
    c57c:	0018      	movs	r0, r3
    c57e:	4b32      	ldr	r3, [pc, #200]	; (c648 <sd_mmc_spi_card_init+0x17c>)
    c580:	4798      	blx	r3
    c582:	0003      	movs	r3, r0
    c584:	001a      	movs	r2, r3
    c586:	2301      	movs	r3, #1
    c588:	4053      	eors	r3, r2
    c58a:	b2db      	uxtb	r3, r3
    c58c:	2b00      	cmp	r3, #0
    c58e:	d001      	beq.n	c594 <sd_mmc_spi_card_init+0xc8>
			return false;
    c590:	2300      	movs	r3, #0
    c592:	e051      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    c594:	4b2a      	ldr	r3, [pc, #168]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c596:	681b      	ldr	r3, [r3, #0]
    c598:	7adb      	ldrb	r3, [r3, #11]
    c59a:	001a      	movs	r2, r3
    c59c:	2301      	movs	r3, #1
    c59e:	4013      	ands	r3, r2
    c5a0:	d017      	beq.n	c5d2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    c5a2:	4b2f      	ldr	r3, [pc, #188]	; (c660 <sd_mmc_spi_card_init+0x194>)
    c5a4:	4798      	blx	r3
    c5a6:	0003      	movs	r3, r0
    c5a8:	001a      	movs	r2, r3
    c5aa:	2301      	movs	r3, #1
    c5ac:	4053      	eors	r3, r2
    c5ae:	b2db      	uxtb	r3, r3
    c5b0:	2b00      	cmp	r3, #0
    c5b2:	d001      	beq.n	c5b8 <sd_mmc_spi_card_init+0xec>
			return false;
    c5b4:	2300      	movs	r3, #0
    c5b6:	e03f      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    c5b8:	4b2a      	ldr	r3, [pc, #168]	; (c664 <sd_mmc_spi_card_init+0x198>)
    c5ba:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    c5bc:	4b2a      	ldr	r3, [pc, #168]	; (c668 <sd_mmc_spi_card_init+0x19c>)
    c5be:	4798      	blx	r3
    c5c0:	0003      	movs	r3, r0
    c5c2:	001a      	movs	r2, r3
    c5c4:	2301      	movs	r3, #1
    c5c6:	4053      	eors	r3, r2
    c5c8:	b2db      	uxtb	r3, r3
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d001      	beq.n	c5d2 <sd_mmc_spi_card_init+0x106>
			return false;
    c5ce:	2300      	movs	r3, #0
    c5d0:	e032      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    c5d2:	4b1b      	ldr	r3, [pc, #108]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c5d4:	681b      	ldr	r3, [r3, #0]
    c5d6:	7adb      	ldrb	r3, [r3, #11]
    c5d8:	001a      	movs	r2, r3
    c5da:	2301      	movs	r3, #1
    c5dc:	4013      	ands	r3, r2
    c5de:	d016      	beq.n	c60e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    c5e0:	4b17      	ldr	r3, [pc, #92]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c5e2:	681b      	ldr	r3, [r3, #0]
    c5e4:	7adb      	ldrb	r3, [r3, #11]
    c5e6:	001a      	movs	r2, r3
    c5e8:	2308      	movs	r3, #8
    c5ea:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    c5ec:	d10f      	bne.n	c60e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    c5ee:	2380      	movs	r3, #128	; 0x80
    c5f0:	009b      	lsls	r3, r3, #2
    c5f2:	4a1e      	ldr	r2, [pc, #120]	; (c66c <sd_mmc_spi_card_init+0x1a0>)
    c5f4:	0019      	movs	r1, r3
    c5f6:	0010      	movs	r0, r2
    c5f8:	4b13      	ldr	r3, [pc, #76]	; (c648 <sd_mmc_spi_card_init+0x17c>)
    c5fa:	4798      	blx	r3
    c5fc:	0003      	movs	r3, r0
    c5fe:	001a      	movs	r2, r3
    c600:	2301      	movs	r3, #1
    c602:	4053      	eors	r3, r2
    c604:	b2db      	uxtb	r3, r3
    c606:	2b00      	cmp	r3, #0
    c608:	d001      	beq.n	c60e <sd_mmc_spi_card_init+0x142>
			return false;
    c60a:	2300      	movs	r3, #0
    c60c:	e014      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    c60e:	4b0c      	ldr	r3, [pc, #48]	; (c640 <sd_mmc_spi_card_init+0x174>)
    c610:	681b      	ldr	r3, [r3, #0]
    c612:	7adb      	ldrb	r3, [r3, #11]
    c614:	001a      	movs	r2, r3
    c616:	2301      	movs	r3, #1
    c618:	4013      	ands	r3, r2
    c61a:	d00a      	beq.n	c632 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    c61c:	4b14      	ldr	r3, [pc, #80]	; (c670 <sd_mmc_spi_card_init+0x1a4>)
    c61e:	4798      	blx	r3
    c620:	0003      	movs	r3, r0
    c622:	001a      	movs	r2, r3
    c624:	2301      	movs	r3, #1
    c626:	4053      	eors	r3, r2
    c628:	b2db      	uxtb	r3, r3
    c62a:	2b00      	cmp	r3, #0
    c62c:	d001      	beq.n	c632 <sd_mmc_spi_card_init+0x166>
			return false;
    c62e:	2300      	movs	r3, #0
    c630:	e002      	b.n	c638 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    c632:	4b10      	ldr	r3, [pc, #64]	; (c674 <sd_mmc_spi_card_init+0x1a8>)
    c634:	4798      	blx	r3
	return true;
    c636:	2301      	movs	r3, #1
}
    c638:	0018      	movs	r0, r3
    c63a:	46bd      	mov	sp, r7
    c63c:	b002      	add	sp, #8
    c63e:	bd80      	pop	{r7, pc}
    c640:	200042d4 	.word	0x200042d4
    c644:	0000d6b5 	.word	0x0000d6b5
    c648:	0000d701 	.word	0x0000d701
    c64c:	0000be21 	.word	0x0000be21
    c650:	0000be15 	.word	0x0000be15
    c654:	0000bd31 	.word	0x0000bd31
    c658:	0000c679 	.word	0x0000c679
    c65c:	0000113b 	.word	0x0000113b
    c660:	0000bfbd 	.word	0x0000bfbd
    c664:	0000c15d 	.word	0x0000c15d
    c668:	0000c2a5 	.word	0x0000c2a5
    c66c:	00001110 	.word	0x00001110
    c670:	0000c249 	.word	0x0000c249
    c674:	0000c471 	.word	0x0000c471

0000c678 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    c678:	b580      	push	{r7, lr}
    c67a:	b082      	sub	sp, #8
    c67c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    c67e:	2388      	movs	r3, #136	; 0x88
    c680:	015b      	lsls	r3, r3, #5
    c682:	2100      	movs	r1, #0
    c684:	0018      	movs	r0, r3
    c686:	4b32      	ldr	r3, [pc, #200]	; (c750 <sd_mmc_spi_install_mmc+0xd8>)
    c688:	4798      	blx	r3
    c68a:	0003      	movs	r3, r0
    c68c:	001a      	movs	r2, r3
    c68e:	2301      	movs	r3, #1
    c690:	4053      	eors	r3, r2
    c692:	b2db      	uxtb	r3, r3
    c694:	2b00      	cmp	r3, #0
    c696:	d001      	beq.n	c69c <sd_mmc_spi_install_mmc+0x24>
		return false;
    c698:	2300      	movs	r3, #0
    c69a:	e055      	b.n	c748 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    c69c:	4b2d      	ldr	r3, [pc, #180]	; (c754 <sd_mmc_spi_install_mmc+0xdc>)
    c69e:	4798      	blx	r3
    c6a0:	0003      	movs	r3, r0
    c6a2:	001a      	movs	r2, r3
    c6a4:	2301      	movs	r3, #1
    c6a6:	4053      	eors	r3, r2
    c6a8:	b2db      	uxtb	r3, r3
    c6aa:	2b00      	cmp	r3, #0
    c6ac:	d001      	beq.n	c6b2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    c6ae:	2300      	movs	r3, #0
    c6b0:	e04a      	b.n	c748 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    c6b2:	4b29      	ldr	r3, [pc, #164]	; (c758 <sd_mmc_spi_install_mmc+0xe0>)
    c6b4:	2100      	movs	r1, #0
    c6b6:	0018      	movs	r0, r3
    c6b8:	4b25      	ldr	r3, [pc, #148]	; (c750 <sd_mmc_spi_install_mmc+0xd8>)
    c6ba:	4798      	blx	r3
    c6bc:	0003      	movs	r3, r0
    c6be:	001a      	movs	r2, r3
    c6c0:	2301      	movs	r3, #1
    c6c2:	4053      	eors	r3, r2
    c6c4:	b2db      	uxtb	r3, r3
    c6c6:	2b00      	cmp	r3, #0
    c6c8:	d001      	beq.n	c6ce <sd_mmc_spi_install_mmc+0x56>
		return false;
    c6ca:	2300      	movs	r3, #0
    c6cc:	e03c      	b.n	c748 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    c6ce:	4b23      	ldr	r3, [pc, #140]	; (c75c <sd_mmc_spi_install_mmc+0xe4>)
    c6d0:	4798      	blx	r3
    c6d2:	0003      	movs	r3, r0
    c6d4:	001a      	movs	r2, r3
    c6d6:	2301      	movs	r3, #1
    c6d8:	4053      	eors	r3, r2
    c6da:	b2db      	uxtb	r3, r3
    c6dc:	2b00      	cmp	r3, #0
    c6de:	d001      	beq.n	c6e4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    c6e0:	2300      	movs	r3, #0
    c6e2:	e031      	b.n	c748 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    c6e4:	4b1e      	ldr	r3, [pc, #120]	; (c760 <sd_mmc_spi_install_mmc+0xe8>)
    c6e6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    c6e8:	4b1e      	ldr	r3, [pc, #120]	; (c764 <sd_mmc_spi_install_mmc+0xec>)
    c6ea:	681b      	ldr	r3, [r3, #0]
    c6ec:	7b1b      	ldrb	r3, [r3, #12]
    c6ee:	2b3f      	cmp	r3, #63	; 0x3f
    c6f0:	d90c      	bls.n	c70c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    c6f2:	1dfb      	adds	r3, r7, #7
    c6f4:	0018      	movs	r0, r3
    c6f6:	4b1c      	ldr	r3, [pc, #112]	; (c768 <sd_mmc_spi_install_mmc+0xf0>)
    c6f8:	4798      	blx	r3
    c6fa:	0003      	movs	r3, r0
    c6fc:	001a      	movs	r2, r3
    c6fe:	2301      	movs	r3, #1
    c700:	4053      	eors	r3, r2
    c702:	b2db      	uxtb	r3, r3
    c704:	2b00      	cmp	r3, #0
    c706:	d001      	beq.n	c70c <sd_mmc_spi_install_mmc+0x94>
			return false;
    c708:	2300      	movs	r3, #0
    c70a:	e01d      	b.n	c748 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    c70c:	2380      	movs	r3, #128	; 0x80
    c70e:	009b      	lsls	r3, r3, #2
    c710:	4a16      	ldr	r2, [pc, #88]	; (c76c <sd_mmc_spi_install_mmc+0xf4>)
    c712:	0019      	movs	r1, r3
    c714:	0010      	movs	r0, r2
    c716:	4b0e      	ldr	r3, [pc, #56]	; (c750 <sd_mmc_spi_install_mmc+0xd8>)
    c718:	4798      	blx	r3
    c71a:	0003      	movs	r3, r0
    c71c:	001a      	movs	r2, r3
    c71e:	2301      	movs	r3, #1
    c720:	4053      	eors	r3, r2
    c722:	b2db      	uxtb	r3, r3
    c724:	2b00      	cmp	r3, #0
    c726:	d001      	beq.n	c72c <sd_mmc_spi_install_mmc+0xb4>
		return false;
    c728:	2300      	movs	r3, #0
    c72a:	e00d      	b.n	c748 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    c72c:	4b10      	ldr	r3, [pc, #64]	; (c770 <sd_mmc_spi_install_mmc+0xf8>)
    c72e:	4798      	blx	r3
    c730:	0003      	movs	r3, r0
    c732:	001a      	movs	r2, r3
    c734:	2301      	movs	r3, #1
    c736:	4053      	eors	r3, r2
    c738:	b2db      	uxtb	r3, r3
    c73a:	2b00      	cmp	r3, #0
    c73c:	d001      	beq.n	c742 <sd_mmc_spi_install_mmc+0xca>
		return false;
    c73e:	2300      	movs	r3, #0
    c740:	e002      	b.n	c748 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    c742:	4b0c      	ldr	r3, [pc, #48]	; (c774 <sd_mmc_spi_install_mmc+0xfc>)
    c744:	4798      	blx	r3
	return true;
    c746:	2301      	movs	r3, #1
}
    c748:	0018      	movs	r0, r3
    c74a:	46bd      	mov	sp, r7
    c74c:	b002      	add	sp, #8
    c74e:	bd80      	pop	{r7, pc}
    c750:	0000d701 	.word	0x0000d701
    c754:	0000bc85 	.word	0x0000bc85
    c758:	0000113b 	.word	0x0000113b
    c75c:	0000bfbd 	.word	0x0000bfbd
    c760:	0000c02d 	.word	0x0000c02d
    c764:	200042d4 	.word	0x200042d4
    c768:	0000be91 	.word	0x0000be91
    c76c:	00001110 	.word	0x00001110
    c770:	0000c249 	.word	0x0000c249
    c774:	0000c471 	.word	0x0000c471

0000c778 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    c778:	b580      	push	{r7, lr}
    c77a:	b082      	sub	sp, #8
    c77c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    c77e:	1dfb      	adds	r3, r7, #7
    c780:	2200      	movs	r2, #0
    c782:	701a      	strb	r2, [r3, #0]
    c784:	e00c      	b.n	c7a0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    c786:	1dfb      	adds	r3, r7, #7
    c788:	781b      	ldrb	r3, [r3, #0]
    c78a:	4a0c      	ldr	r2, [pc, #48]	; (c7bc <sd_mmc_init+0x44>)
    c78c:	015b      	lsls	r3, r3, #5
    c78e:	18d3      	adds	r3, r2, r3
    c790:	330a      	adds	r3, #10
    c792:	2204      	movs	r2, #4
    c794:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    c796:	1dfb      	adds	r3, r7, #7
    c798:	781a      	ldrb	r2, [r3, #0]
    c79a:	1dfb      	adds	r3, r7, #7
    c79c:	3201      	adds	r2, #1
    c79e:	701a      	strb	r2, [r3, #0]
    c7a0:	1dfb      	adds	r3, r7, #7
    c7a2:	781b      	ldrb	r3, [r3, #0]
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	d0ee      	beq.n	c786 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    c7a8:	4b05      	ldr	r3, [pc, #20]	; (c7c0 <sd_mmc_init+0x48>)
    c7aa:	22ff      	movs	r2, #255	; 0xff
    c7ac:	701a      	strb	r2, [r3, #0]
	driver_init();
    c7ae:	4b05      	ldr	r3, [pc, #20]	; (c7c4 <sd_mmc_init+0x4c>)
    c7b0:	4798      	blx	r3
}
    c7b2:	46c0      	nop			; (mov r8, r8)
    c7b4:	46bd      	mov	sp, r7
    c7b6:	b002      	add	sp, #8
    c7b8:	bd80      	pop	{r7, pc}
    c7ba:	46c0      	nop			; (mov r8, r8)
    c7bc:	200042b0 	.word	0x200042b0
    c7c0:	200042d0 	.word	0x200042d0
    c7c4:	0000d521 	.word	0x0000d521

0000c7c8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    c7c8:	b590      	push	{r4, r7, lr}
    c7ca:	b085      	sub	sp, #20
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	0002      	movs	r2, r0
    c7d0:	1dfb      	adds	r3, r7, #7
    c7d2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    c7d4:	230f      	movs	r3, #15
    c7d6:	18fc      	adds	r4, r7, r3
    c7d8:	1dfb      	adds	r3, r7, #7
    c7da:	781b      	ldrb	r3, [r3, #0]
    c7dc:	0018      	movs	r0, r3
    c7de:	4b13      	ldr	r3, [pc, #76]	; (c82c <sd_mmc_check+0x64>)
    c7e0:	4798      	blx	r3
    c7e2:	0003      	movs	r3, r0
    c7e4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    c7e6:	230f      	movs	r3, #15
    c7e8:	18fb      	adds	r3, r7, r3
    c7ea:	781b      	ldrb	r3, [r3, #0]
    c7ec:	2b01      	cmp	r3, #1
    c7ee:	d005      	beq.n	c7fc <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    c7f0:	4b0f      	ldr	r3, [pc, #60]	; (c830 <sd_mmc_check+0x68>)
    c7f2:	4798      	blx	r3
		return sd_mmc_err;
    c7f4:	230f      	movs	r3, #15
    c7f6:	18fb      	adds	r3, r7, r3
    c7f8:	781b      	ldrb	r3, [r3, #0]
    c7fa:	e012      	b.n	c822 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    c7fc:	4b0d      	ldr	r3, [pc, #52]	; (c834 <sd_mmc_check+0x6c>)
    c7fe:	4798      	blx	r3
    c800:	1e03      	subs	r3, r0, #0
    c802:	d007      	beq.n	c814 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    c804:	4b0c      	ldr	r3, [pc, #48]	; (c838 <sd_mmc_check+0x70>)
    c806:	681b      	ldr	r3, [r3, #0]
    c808:	2200      	movs	r2, #0
    c80a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    c80c:	4b08      	ldr	r3, [pc, #32]	; (c830 <sd_mmc_check+0x68>)
    c80e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    c810:	2301      	movs	r3, #1
    c812:	e006      	b.n	c822 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    c814:	4b08      	ldr	r3, [pc, #32]	; (c838 <sd_mmc_check+0x70>)
    c816:	681b      	ldr	r3, [r3, #0]
    c818:	2203      	movs	r2, #3
    c81a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    c81c:	4b04      	ldr	r3, [pc, #16]	; (c830 <sd_mmc_check+0x68>)
    c81e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    c820:	2303      	movs	r3, #3
}
    c822:	0018      	movs	r0, r3
    c824:	46bd      	mov	sp, r7
    c826:	b005      	add	sp, #20
    c828:	bd90      	pop	{r4, r7, pc}
    c82a:	46c0      	nop			; (mov r8, r8)
    c82c:	0000c3ad 	.word	0x0000c3ad
    c830:	0000c4a9 	.word	0x0000c4a9
    c834:	0000c4cd 	.word	0x0000c4cd
    c838:	200042d4 	.word	0x200042d4

0000c83c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    c83c:	b580      	push	{r7, lr}
    c83e:	b082      	sub	sp, #8
    c840:	af00      	add	r7, sp, #0
    c842:	0002      	movs	r2, r0
    c844:	1dfb      	adds	r3, r7, #7
    c846:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    c848:	1dfb      	adds	r3, r7, #7
    c84a:	781b      	ldrb	r3, [r3, #0]
    c84c:	0018      	movs	r0, r3
    c84e:	4b07      	ldr	r3, [pc, #28]	; (c86c <sd_mmc_get_type+0x30>)
    c850:	4798      	blx	r3
    c852:	1e03      	subs	r3, r0, #0
    c854:	d001      	beq.n	c85a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    c856:	2300      	movs	r3, #0
    c858:	e004      	b.n	c864 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    c85a:	4b05      	ldr	r3, [pc, #20]	; (c870 <sd_mmc_get_type+0x34>)
    c85c:	4798      	blx	r3
	return sd_mmc_card->type;
    c85e:	4b05      	ldr	r3, [pc, #20]	; (c874 <sd_mmc_get_type+0x38>)
    c860:	681b      	ldr	r3, [r3, #0]
    c862:	7adb      	ldrb	r3, [r3, #11]
}
    c864:	0018      	movs	r0, r3
    c866:	46bd      	mov	sp, r7
    c868:	b002      	add	sp, #8
    c86a:	bd80      	pop	{r7, pc}
    c86c:	0000c3ad 	.word	0x0000c3ad
    c870:	0000c4a9 	.word	0x0000c4a9
    c874:	200042d4 	.word	0x200042d4

0000c878 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    c878:	b580      	push	{r7, lr}
    c87a:	b082      	sub	sp, #8
    c87c:	af00      	add	r7, sp, #0
    c87e:	0002      	movs	r2, r0
    c880:	1dfb      	adds	r3, r7, #7
    c882:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    c884:	1dfb      	adds	r3, r7, #7
    c886:	781b      	ldrb	r3, [r3, #0]
    c888:	0018      	movs	r0, r3
    c88a:	4b07      	ldr	r3, [pc, #28]	; (c8a8 <sd_mmc_get_capacity+0x30>)
    c88c:	4798      	blx	r3
    c88e:	1e03      	subs	r3, r0, #0
    c890:	d001      	beq.n	c896 <sd_mmc_get_capacity+0x1e>
		return 0;
    c892:	2300      	movs	r3, #0
    c894:	e004      	b.n	c8a0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    c896:	4b05      	ldr	r3, [pc, #20]	; (c8ac <sd_mmc_get_capacity+0x34>)
    c898:	4798      	blx	r3
	return sd_mmc_card->capacity;
    c89a:	4b05      	ldr	r3, [pc, #20]	; (c8b0 <sd_mmc_get_capacity+0x38>)
    c89c:	681b      	ldr	r3, [r3, #0]
    c89e:	685b      	ldr	r3, [r3, #4]
}
    c8a0:	0018      	movs	r0, r3
    c8a2:	46bd      	mov	sp, r7
    c8a4:	b002      	add	sp, #8
    c8a6:	bd80      	pop	{r7, pc}
    c8a8:	0000c3ad 	.word	0x0000c3ad
    c8ac:	0000c4a9 	.word	0x0000c4a9
    c8b0:	200042d4 	.word	0x200042d4

0000c8b4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    c8b4:	b580      	push	{r7, lr}
    c8b6:	b082      	sub	sp, #8
    c8b8:	af00      	add	r7, sp, #0
    c8ba:	0002      	movs	r2, r0
    c8bc:	1dfb      	adds	r3, r7, #7
    c8be:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    c8c0:	2300      	movs	r3, #0
}
    c8c2:	0018      	movs	r0, r3
    c8c4:	46bd      	mov	sp, r7
    c8c6:	b002      	add	sp, #8
    c8c8:	bd80      	pop	{r7, pc}
	...

0000c8cc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    c8cc:	b590      	push	{r4, r7, lr}
    c8ce:	b089      	sub	sp, #36	; 0x24
    c8d0:	af02      	add	r7, sp, #8
    c8d2:	6039      	str	r1, [r7, #0]
    c8d4:	0011      	movs	r1, r2
    c8d6:	1dfb      	adds	r3, r7, #7
    c8d8:	1c02      	adds	r2, r0, #0
    c8da:	701a      	strb	r2, [r3, #0]
    c8dc:	1d3b      	adds	r3, r7, #4
    c8de:	1c0a      	adds	r2, r1, #0
    c8e0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    c8e2:	230f      	movs	r3, #15
    c8e4:	18fc      	adds	r4, r7, r3
    c8e6:	1dfb      	adds	r3, r7, #7
    c8e8:	781b      	ldrb	r3, [r3, #0]
    c8ea:	0018      	movs	r0, r3
    c8ec:	4b29      	ldr	r3, [pc, #164]	; (c994 <sd_mmc_init_read_blocks+0xc8>)
    c8ee:	4798      	blx	r3
    c8f0:	0003      	movs	r3, r0
    c8f2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    c8f4:	230f      	movs	r3, #15
    c8f6:	18fb      	adds	r3, r7, r3
    c8f8:	781b      	ldrb	r3, [r3, #0]
    c8fa:	2b00      	cmp	r3, #0
    c8fc:	d003      	beq.n	c906 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    c8fe:	230f      	movs	r3, #15
    c900:	18fb      	adds	r3, r7, r3
    c902:	781b      	ldrb	r3, [r3, #0]
    c904:	e041      	b.n	c98a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    c906:	4b24      	ldr	r3, [pc, #144]	; (c998 <sd_mmc_init_read_blocks+0xcc>)
    c908:	4798      	blx	r3
    c90a:	0003      	movs	r3, r0
    c90c:	001a      	movs	r2, r3
    c90e:	2301      	movs	r3, #1
    c910:	4053      	eors	r3, r2
    c912:	b2db      	uxtb	r3, r3
    c914:	2b00      	cmp	r3, #0
    c916:	d003      	beq.n	c920 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    c918:	4b20      	ldr	r3, [pc, #128]	; (c99c <sd_mmc_init_read_blocks+0xd0>)
    c91a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    c91c:	2305      	movs	r3, #5
    c91e:	e034      	b.n	c98a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    c920:	1d3b      	adds	r3, r7, #4
    c922:	881b      	ldrh	r3, [r3, #0]
    c924:	2b01      	cmp	r3, #1
    c926:	d902      	bls.n	c92e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    c928:	4b1d      	ldr	r3, [pc, #116]	; (c9a0 <sd_mmc_init_read_blocks+0xd4>)
    c92a:	617b      	str	r3, [r7, #20]
    c92c:	e001      	b.n	c932 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    c92e:	4b1d      	ldr	r3, [pc, #116]	; (c9a4 <sd_mmc_init_read_blocks+0xd8>)
    c930:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    c932:	4b1d      	ldr	r3, [pc, #116]	; (c9a8 <sd_mmc_init_read_blocks+0xdc>)
    c934:	681b      	ldr	r3, [r3, #0]
    c936:	7adb      	ldrb	r3, [r3, #11]
    c938:	001a      	movs	r2, r3
    c93a:	2308      	movs	r3, #8
    c93c:	4013      	ands	r3, r2
    c93e:	d002      	beq.n	c946 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    c940:	683b      	ldr	r3, [r7, #0]
    c942:	613b      	str	r3, [r7, #16]
    c944:	e002      	b.n	c94c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    c946:	683b      	ldr	r3, [r7, #0]
    c948:	025b      	lsls	r3, r3, #9
    c94a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    c94c:	1d3b      	adds	r3, r7, #4
    c94e:	881c      	ldrh	r4, [r3, #0]
    c950:	2380      	movs	r3, #128	; 0x80
    c952:	009a      	lsls	r2, r3, #2
    c954:	6939      	ldr	r1, [r7, #16]
    c956:	6978      	ldr	r0, [r7, #20]
    c958:	2301      	movs	r3, #1
    c95a:	9300      	str	r3, [sp, #0]
    c95c:	0023      	movs	r3, r4
    c95e:	4c13      	ldr	r4, [pc, #76]	; (c9ac <sd_mmc_init_read_blocks+0xe0>)
    c960:	47a0      	blx	r4
    c962:	0003      	movs	r3, r0
    c964:	001a      	movs	r2, r3
    c966:	2301      	movs	r3, #1
    c968:	4053      	eors	r3, r2
    c96a:	b2db      	uxtb	r3, r3
    c96c:	2b00      	cmp	r3, #0
    c96e:	d003      	beq.n	c978 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    c970:	4b0a      	ldr	r3, [pc, #40]	; (c99c <sd_mmc_init_read_blocks+0xd0>)
    c972:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    c974:	2305      	movs	r3, #5
    c976:	e008      	b.n	c98a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    c978:	4b0d      	ldr	r3, [pc, #52]	; (c9b0 <sd_mmc_init_read_blocks+0xe4>)
    c97a:	1d3a      	adds	r2, r7, #4
    c97c:	8812      	ldrh	r2, [r2, #0]
    c97e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    c980:	4b0c      	ldr	r3, [pc, #48]	; (c9b4 <sd_mmc_init_read_blocks+0xe8>)
    c982:	1d3a      	adds	r2, r7, #4
    c984:	8812      	ldrh	r2, [r2, #0]
    c986:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    c988:	2300      	movs	r3, #0
}
    c98a:	0018      	movs	r0, r3
    c98c:	46bd      	mov	sp, r7
    c98e:	b007      	add	sp, #28
    c990:	bd90      	pop	{r4, r7, pc}
    c992:	46c0      	nop			; (mov r8, r8)
    c994:	0000c3ad 	.word	0x0000c3ad
    c998:	0000c249 	.word	0x0000c249
    c99c:	0000c4a9 	.word	0x0000c4a9
    c9a0:	00101112 	.word	0x00101112
    c9a4:	00081111 	.word	0x00081111
    c9a8:	200042d4 	.word	0x200042d4
    c9ac:	0000d729 	.word	0x0000d729
    c9b0:	200042da 	.word	0x200042da
    c9b4:	200042d8 	.word	0x200042d8

0000c9b8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    c9b8:	b580      	push	{r7, lr}
    c9ba:	b082      	sub	sp, #8
    c9bc:	af00      	add	r7, sp, #0
    c9be:	6078      	str	r0, [r7, #4]
    c9c0:	000a      	movs	r2, r1
    c9c2:	1cbb      	adds	r3, r7, #2
    c9c4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    c9c6:	1cbb      	adds	r3, r7, #2
    c9c8:	881a      	ldrh	r2, [r3, #0]
    c9ca:	687b      	ldr	r3, [r7, #4]
    c9cc:	0011      	movs	r1, r2
    c9ce:	0018      	movs	r0, r3
    c9d0:	4b0d      	ldr	r3, [pc, #52]	; (ca08 <sd_mmc_start_read_blocks+0x50>)
    c9d2:	4798      	blx	r3
    c9d4:	0003      	movs	r3, r0
    c9d6:	001a      	movs	r2, r3
    c9d8:	2301      	movs	r3, #1
    c9da:	4053      	eors	r3, r2
    c9dc:	b2db      	uxtb	r3, r3
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d004      	beq.n	c9ec <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    c9e2:	4b0a      	ldr	r3, [pc, #40]	; (ca0c <sd_mmc_start_read_blocks+0x54>)
    c9e4:	2200      	movs	r2, #0
    c9e6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    c9e8:	2305      	movs	r3, #5
    c9ea:	e008      	b.n	c9fe <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    c9ec:	4b07      	ldr	r3, [pc, #28]	; (ca0c <sd_mmc_start_read_blocks+0x54>)
    c9ee:	881a      	ldrh	r2, [r3, #0]
    c9f0:	1cbb      	adds	r3, r7, #2
    c9f2:	881b      	ldrh	r3, [r3, #0]
    c9f4:	1ad3      	subs	r3, r2, r3
    c9f6:	b29a      	uxth	r2, r3
    c9f8:	4b04      	ldr	r3, [pc, #16]	; (ca0c <sd_mmc_start_read_blocks+0x54>)
    c9fa:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    c9fc:	2300      	movs	r3, #0
}
    c9fe:	0018      	movs	r0, r3
    ca00:	46bd      	mov	sp, r7
    ca02:	b002      	add	sp, #8
    ca04:	bd80      	pop	{r7, pc}
    ca06:	46c0      	nop			; (mov r8, r8)
    ca08:	0000d9f9 	.word	0x0000d9f9
    ca0c:	200042da 	.word	0x200042da

0000ca10 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    ca10:	b580      	push	{r7, lr}
    ca12:	b082      	sub	sp, #8
    ca14:	af00      	add	r7, sp, #0
    ca16:	0002      	movs	r2, r0
    ca18:	1dfb      	adds	r3, r7, #7
    ca1a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    ca1c:	4b1c      	ldr	r3, [pc, #112]	; (ca90 <sd_mmc_wait_end_of_read_blocks+0x80>)
    ca1e:	4798      	blx	r3
    ca20:	0003      	movs	r3, r0
    ca22:	001a      	movs	r2, r3
    ca24:	2301      	movs	r3, #1
    ca26:	4053      	eors	r3, r2
    ca28:	b2db      	uxtb	r3, r3
    ca2a:	2b00      	cmp	r3, #0
    ca2c:	d001      	beq.n	ca32 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    ca2e:	2305      	movs	r3, #5
    ca30:	e029      	b.n	ca86 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    ca32:	1dfb      	adds	r3, r7, #7
    ca34:	781b      	ldrb	r3, [r3, #0]
    ca36:	2b00      	cmp	r3, #0
    ca38:	d003      	beq.n	ca42 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    ca3a:	4b16      	ldr	r3, [pc, #88]	; (ca94 <sd_mmc_wait_end_of_read_blocks+0x84>)
    ca3c:	2200      	movs	r2, #0
    ca3e:	801a      	strh	r2, [r3, #0]
    ca40:	e005      	b.n	ca4e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    ca42:	4b14      	ldr	r3, [pc, #80]	; (ca94 <sd_mmc_wait_end_of_read_blocks+0x84>)
    ca44:	881b      	ldrh	r3, [r3, #0]
    ca46:	2b00      	cmp	r3, #0
    ca48:	d001      	beq.n	ca4e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    ca4a:	2300      	movs	r3, #0
    ca4c:	e01b      	b.n	ca86 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    ca4e:	4b12      	ldr	r3, [pc, #72]	; (ca98 <sd_mmc_wait_end_of_read_blocks+0x88>)
    ca50:	881b      	ldrh	r3, [r3, #0]
    ca52:	2b01      	cmp	r3, #1
    ca54:	d103      	bne.n	ca5e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    ca56:	4b11      	ldr	r3, [pc, #68]	; (ca9c <sd_mmc_wait_end_of_read_blocks+0x8c>)
    ca58:	4798      	blx	r3
		return SD_MMC_OK;
    ca5a:	2300      	movs	r3, #0
    ca5c:	e013      	b.n	ca86 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    ca5e:	4b10      	ldr	r3, [pc, #64]	; (caa0 <sd_mmc_wait_end_of_read_blocks+0x90>)
    ca60:	2100      	movs	r1, #0
    ca62:	0018      	movs	r0, r3
    ca64:	4b0f      	ldr	r3, [pc, #60]	; (caa4 <sd_mmc_wait_end_of_read_blocks+0x94>)
    ca66:	4798      	blx	r3
    ca68:	0003      	movs	r3, r0
    ca6a:	001a      	movs	r2, r3
    ca6c:	2301      	movs	r3, #1
    ca6e:	4053      	eors	r3, r2
    ca70:	b2db      	uxtb	r3, r3
    ca72:	2b00      	cmp	r3, #0
    ca74:	d004      	beq.n	ca80 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    ca76:	4b0a      	ldr	r3, [pc, #40]	; (caa0 <sd_mmc_wait_end_of_read_blocks+0x90>)
    ca78:	2100      	movs	r1, #0
    ca7a:	0018      	movs	r0, r3
    ca7c:	4b09      	ldr	r3, [pc, #36]	; (caa4 <sd_mmc_wait_end_of_read_blocks+0x94>)
    ca7e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    ca80:	4b06      	ldr	r3, [pc, #24]	; (ca9c <sd_mmc_wait_end_of_read_blocks+0x8c>)
    ca82:	4798      	blx	r3
	return SD_MMC_OK;
    ca84:	2300      	movs	r3, #0
}
    ca86:	0018      	movs	r0, r3
    ca88:	46bd      	mov	sp, r7
    ca8a:	b002      	add	sp, #8
    ca8c:	bd80      	pop	{r7, pc}
    ca8e:	46c0      	nop			; (mov r8, r8)
    ca90:	0000da9d 	.word	0x0000da9d
    ca94:	200042da 	.word	0x200042da
    ca98:	200042d8 	.word	0x200042d8
    ca9c:	0000c4a9 	.word	0x0000c4a9
    caa0:	0000310c 	.word	0x0000310c
    caa4:	0000d701 	.word	0x0000d701

0000caa8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    caa8:	b590      	push	{r4, r7, lr}
    caaa:	b089      	sub	sp, #36	; 0x24
    caac:	af02      	add	r7, sp, #8
    caae:	6039      	str	r1, [r7, #0]
    cab0:	0011      	movs	r1, r2
    cab2:	1dfb      	adds	r3, r7, #7
    cab4:	1c02      	adds	r2, r0, #0
    cab6:	701a      	strb	r2, [r3, #0]
    cab8:	1d3b      	adds	r3, r7, #4
    caba:	1c0a      	adds	r2, r1, #0
    cabc:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    cabe:	230f      	movs	r3, #15
    cac0:	18fc      	adds	r4, r7, r3
    cac2:	1dfb      	adds	r3, r7, #7
    cac4:	781b      	ldrb	r3, [r3, #0]
    cac6:	0018      	movs	r0, r3
    cac8:	4b28      	ldr	r3, [pc, #160]	; (cb6c <sd_mmc_init_write_blocks+0xc4>)
    caca:	4798      	blx	r3
    cacc:	0003      	movs	r3, r0
    cace:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    cad0:	230f      	movs	r3, #15
    cad2:	18fb      	adds	r3, r7, r3
    cad4:	781b      	ldrb	r3, [r3, #0]
    cad6:	2b00      	cmp	r3, #0
    cad8:	d003      	beq.n	cae2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    cada:	230f      	movs	r3, #15
    cadc:	18fb      	adds	r3, r7, r3
    cade:	781b      	ldrb	r3, [r3, #0]
    cae0:	e03f      	b.n	cb62 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    cae2:	1dfb      	adds	r3, r7, #7
    cae4:	781b      	ldrb	r3, [r3, #0]
    cae6:	0018      	movs	r0, r3
    cae8:	4b21      	ldr	r3, [pc, #132]	; (cb70 <sd_mmc_init_write_blocks+0xc8>)
    caea:	4798      	blx	r3
    caec:	1e03      	subs	r3, r0, #0
    caee:	d003      	beq.n	caf8 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    caf0:	4b20      	ldr	r3, [pc, #128]	; (cb74 <sd_mmc_init_write_blocks+0xcc>)
    caf2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    caf4:	2307      	movs	r3, #7
    caf6:	e034      	b.n	cb62 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    caf8:	1d3b      	adds	r3, r7, #4
    cafa:	881b      	ldrh	r3, [r3, #0]
    cafc:	2b01      	cmp	r3, #1
    cafe:	d902      	bls.n	cb06 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    cb00:	4b1d      	ldr	r3, [pc, #116]	; (cb78 <sd_mmc_init_write_blocks+0xd0>)
    cb02:	617b      	str	r3, [r7, #20]
    cb04:	e001      	b.n	cb0a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    cb06:	4b1d      	ldr	r3, [pc, #116]	; (cb7c <sd_mmc_init_write_blocks+0xd4>)
    cb08:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    cb0a:	4b1d      	ldr	r3, [pc, #116]	; (cb80 <sd_mmc_init_write_blocks+0xd8>)
    cb0c:	681b      	ldr	r3, [r3, #0]
    cb0e:	7adb      	ldrb	r3, [r3, #11]
    cb10:	001a      	movs	r2, r3
    cb12:	2308      	movs	r3, #8
    cb14:	4013      	ands	r3, r2
    cb16:	d002      	beq.n	cb1e <sd_mmc_init_write_blocks+0x76>
		arg = start;
    cb18:	683b      	ldr	r3, [r7, #0]
    cb1a:	613b      	str	r3, [r7, #16]
    cb1c:	e002      	b.n	cb24 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    cb1e:	683b      	ldr	r3, [r7, #0]
    cb20:	025b      	lsls	r3, r3, #9
    cb22:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    cb24:	1d3b      	adds	r3, r7, #4
    cb26:	881c      	ldrh	r4, [r3, #0]
    cb28:	2380      	movs	r3, #128	; 0x80
    cb2a:	009a      	lsls	r2, r3, #2
    cb2c:	6939      	ldr	r1, [r7, #16]
    cb2e:	6978      	ldr	r0, [r7, #20]
    cb30:	2301      	movs	r3, #1
    cb32:	9300      	str	r3, [sp, #0]
    cb34:	0023      	movs	r3, r4
    cb36:	4c13      	ldr	r4, [pc, #76]	; (cb84 <sd_mmc_init_write_blocks+0xdc>)
    cb38:	47a0      	blx	r4
    cb3a:	0003      	movs	r3, r0
    cb3c:	001a      	movs	r2, r3
    cb3e:	2301      	movs	r3, #1
    cb40:	4053      	eors	r3, r2
    cb42:	b2db      	uxtb	r3, r3
    cb44:	2b00      	cmp	r3, #0
    cb46:	d003      	beq.n	cb50 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    cb48:	4b0a      	ldr	r3, [pc, #40]	; (cb74 <sd_mmc_init_write_blocks+0xcc>)
    cb4a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    cb4c:	2305      	movs	r3, #5
    cb4e:	e008      	b.n	cb62 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    cb50:	4b0d      	ldr	r3, [pc, #52]	; (cb88 <sd_mmc_init_write_blocks+0xe0>)
    cb52:	1d3a      	adds	r2, r7, #4
    cb54:	8812      	ldrh	r2, [r2, #0]
    cb56:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    cb58:	4b0c      	ldr	r3, [pc, #48]	; (cb8c <sd_mmc_init_write_blocks+0xe4>)
    cb5a:	1d3a      	adds	r2, r7, #4
    cb5c:	8812      	ldrh	r2, [r2, #0]
    cb5e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    cb60:	2300      	movs	r3, #0
}
    cb62:	0018      	movs	r0, r3
    cb64:	46bd      	mov	sp, r7
    cb66:	b007      	add	sp, #28
    cb68:	bd90      	pop	{r4, r7, pc}
    cb6a:	46c0      	nop			; (mov r8, r8)
    cb6c:	0000c3ad 	.word	0x0000c3ad
    cb70:	0000c8b5 	.word	0x0000c8b5
    cb74:	0000c4a9 	.word	0x0000c4a9
    cb78:	00109119 	.word	0x00109119
    cb7c:	00089118 	.word	0x00089118
    cb80:	200042d4 	.word	0x200042d4
    cb84:	0000d729 	.word	0x0000d729
    cb88:	200042da 	.word	0x200042da
    cb8c:	200042d8 	.word	0x200042d8

0000cb90 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    cb90:	b580      	push	{r7, lr}
    cb92:	b082      	sub	sp, #8
    cb94:	af00      	add	r7, sp, #0
    cb96:	6078      	str	r0, [r7, #4]
    cb98:	000a      	movs	r2, r1
    cb9a:	1cbb      	adds	r3, r7, #2
    cb9c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    cb9e:	1cbb      	adds	r3, r7, #2
    cba0:	881a      	ldrh	r2, [r3, #0]
    cba2:	687b      	ldr	r3, [r7, #4]
    cba4:	0011      	movs	r1, r2
    cba6:	0018      	movs	r0, r3
    cba8:	4b0d      	ldr	r3, [pc, #52]	; (cbe0 <sd_mmc_start_write_blocks+0x50>)
    cbaa:	4798      	blx	r3
    cbac:	0003      	movs	r3, r0
    cbae:	001a      	movs	r2, r3
    cbb0:	2301      	movs	r3, #1
    cbb2:	4053      	eors	r3, r2
    cbb4:	b2db      	uxtb	r3, r3
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d004      	beq.n	cbc4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    cbba:	4b0a      	ldr	r3, [pc, #40]	; (cbe4 <sd_mmc_start_write_blocks+0x54>)
    cbbc:	2200      	movs	r2, #0
    cbbe:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    cbc0:	2305      	movs	r3, #5
    cbc2:	e008      	b.n	cbd6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    cbc4:	4b07      	ldr	r3, [pc, #28]	; (cbe4 <sd_mmc_start_write_blocks+0x54>)
    cbc6:	881a      	ldrh	r2, [r3, #0]
    cbc8:	1cbb      	adds	r3, r7, #2
    cbca:	881b      	ldrh	r3, [r3, #0]
    cbcc:	1ad3      	subs	r3, r2, r3
    cbce:	b29a      	uxth	r2, r3
    cbd0:	4b04      	ldr	r3, [pc, #16]	; (cbe4 <sd_mmc_start_write_blocks+0x54>)
    cbd2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    cbd4:	2300      	movs	r3, #0
}
    cbd6:	0018      	movs	r0, r3
    cbd8:	46bd      	mov	sp, r7
    cbda:	b002      	add	sp, #8
    cbdc:	bd80      	pop	{r7, pc}
    cbde:	46c0      	nop			; (mov r8, r8)
    cbe0:	0000daa9 	.word	0x0000daa9
    cbe4:	200042da 	.word	0x200042da

0000cbe8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    cbe8:	b580      	push	{r7, lr}
    cbea:	b082      	sub	sp, #8
    cbec:	af00      	add	r7, sp, #0
    cbee:	0002      	movs	r2, r0
    cbf0:	1dfb      	adds	r3, r7, #7
    cbf2:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    cbf4:	4b13      	ldr	r3, [pc, #76]	; (cc44 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    cbf6:	4798      	blx	r3
    cbf8:	0003      	movs	r3, r0
    cbfa:	001a      	movs	r2, r3
    cbfc:	2301      	movs	r3, #1
    cbfe:	4053      	eors	r3, r2
    cc00:	b2db      	uxtb	r3, r3
    cc02:	2b00      	cmp	r3, #0
    cc04:	d001      	beq.n	cc0a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    cc06:	2305      	movs	r3, #5
    cc08:	e018      	b.n	cc3c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    cc0a:	1dfb      	adds	r3, r7, #7
    cc0c:	781b      	ldrb	r3, [r3, #0]
    cc0e:	2b00      	cmp	r3, #0
    cc10:	d003      	beq.n	cc1a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    cc12:	4b0d      	ldr	r3, [pc, #52]	; (cc48 <sd_mmc_wait_end_of_write_blocks+0x60>)
    cc14:	2200      	movs	r2, #0
    cc16:	801a      	strh	r2, [r3, #0]
    cc18:	e005      	b.n	cc26 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    cc1a:	4b0b      	ldr	r3, [pc, #44]	; (cc48 <sd_mmc_wait_end_of_write_blocks+0x60>)
    cc1c:	881b      	ldrh	r3, [r3, #0]
    cc1e:	2b00      	cmp	r3, #0
    cc20:	d001      	beq.n	cc26 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    cc22:	2300      	movs	r3, #0
    cc24:	e00a      	b.n	cc3c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    cc26:	4b09      	ldr	r3, [pc, #36]	; (cc4c <sd_mmc_wait_end_of_write_blocks+0x64>)
    cc28:	881b      	ldrh	r3, [r3, #0]
    cc2a:	2b01      	cmp	r3, #1
    cc2c:	d103      	bne.n	cc36 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    cc2e:	4b08      	ldr	r3, [pc, #32]	; (cc50 <sd_mmc_wait_end_of_write_blocks+0x68>)
    cc30:	4798      	blx	r3
		return SD_MMC_OK;
    cc32:	2300      	movs	r3, #0
    cc34:	e002      	b.n	cc3c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    cc36:	4b06      	ldr	r3, [pc, #24]	; (cc50 <sd_mmc_wait_end_of_write_blocks+0x68>)
    cc38:	4798      	blx	r3
	return SD_MMC_OK;
    cc3a:	2300      	movs	r3, #0
}
    cc3c:	0018      	movs	r0, r3
    cc3e:	46bd      	mov	sp, r7
    cc40:	b002      	add	sp, #8
    cc42:	bd80      	pop	{r7, pc}
    cc44:	0000db69 	.word	0x0000db69
    cc48:	200042da 	.word	0x200042da
    cc4c:	200042d8 	.word	0x200042d8
    cc50:	0000c4a9 	.word	0x0000c4a9

0000cc54 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    cc54:	b580      	push	{r7, lr}
    cc56:	b082      	sub	sp, #8
    cc58:	af00      	add	r7, sp, #0
    cc5a:	0002      	movs	r2, r0
    cc5c:	1dfb      	adds	r3, r7, #7
    cc5e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    cc60:	1dfb      	adds	r3, r7, #7
    cc62:	781b      	ldrb	r3, [r3, #0]
    cc64:	0018      	movs	r0, r3
    cc66:	4b16      	ldr	r3, [pc, #88]	; (ccc0 <sd_mmc_test_unit_ready+0x6c>)
    cc68:	4798      	blx	r3
    cc6a:	0003      	movs	r3, r0
    cc6c:	2b01      	cmp	r3, #1
    cc6e:	d019      	beq.n	cca4 <sd_mmc_test_unit_ready+0x50>
    cc70:	2b02      	cmp	r3, #2
    cc72:	d019      	beq.n	cca8 <sd_mmc_test_unit_ready+0x54>
    cc74:	2b00      	cmp	r3, #0
    cc76:	d11e      	bne.n	ccb6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    cc78:	1dfb      	adds	r3, r7, #7
    cc7a:	781b      	ldrb	r3, [r3, #0]
    cc7c:	4a11      	ldr	r2, [pc, #68]	; (ccc4 <sd_mmc_test_unit_ready+0x70>)
    cc7e:	5cd3      	ldrb	r3, [r2, r3]
    cc80:	2b00      	cmp	r3, #0
    cc82:	d001      	beq.n	cc88 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    cc84:	2302      	movs	r3, #2
    cc86:	e017      	b.n	ccb8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    cc88:	1dfb      	adds	r3, r7, #7
    cc8a:	781b      	ldrb	r3, [r3, #0]
    cc8c:	0018      	movs	r0, r3
    cc8e:	4b0e      	ldr	r3, [pc, #56]	; (ccc8 <sd_mmc_test_unit_ready+0x74>)
    cc90:	4798      	blx	r3
    cc92:	0003      	movs	r3, r0
    cc94:	001a      	movs	r2, r3
    cc96:	2303      	movs	r3, #3
    cc98:	4013      	ands	r3, r2
    cc9a:	d001      	beq.n	cca0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    cc9c:	2300      	movs	r3, #0
    cc9e:	e00b      	b.n	ccb8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    cca0:	2302      	movs	r3, #2
    cca2:	e009      	b.n	ccb8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    cca4:	2303      	movs	r3, #3
    cca6:	e007      	b.n	ccb8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    cca8:	1dfb      	adds	r3, r7, #7
    ccaa:	781b      	ldrb	r3, [r3, #0]
    ccac:	4a05      	ldr	r2, [pc, #20]	; (ccc4 <sd_mmc_test_unit_ready+0x70>)
    ccae:	2100      	movs	r1, #0
    ccb0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    ccb2:	2302      	movs	r3, #2
    ccb4:	e000      	b.n	ccb8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    ccb6:	2301      	movs	r3, #1
	}
}
    ccb8:	0018      	movs	r0, r3
    ccba:	46bd      	mov	sp, r7
    ccbc:	b002      	add	sp, #8
    ccbe:	bd80      	pop	{r7, pc}
    ccc0:	0000c7c9 	.word	0x0000c7c9
    ccc4:	200042dc 	.word	0x200042dc
    ccc8:	0000c83d 	.word	0x0000c83d

0000cccc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    cccc:	b580      	push	{r7, lr}
    ccce:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    ccd0:	2000      	movs	r0, #0
    ccd2:	4b03      	ldr	r3, [pc, #12]	; (cce0 <sd_mmc_test_unit_ready_0+0x14>)
    ccd4:	4798      	blx	r3
    ccd6:	0003      	movs	r3, r0
}
    ccd8:	0018      	movs	r0, r3
    ccda:	46bd      	mov	sp, r7
    ccdc:	bd80      	pop	{r7, pc}
    ccde:	46c0      	nop			; (mov r8, r8)
    cce0:	0000cc55 	.word	0x0000cc55

0000cce4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    cce4:	b580      	push	{r7, lr}
    cce6:	b082      	sub	sp, #8
    cce8:	af00      	add	r7, sp, #0
    ccea:	0002      	movs	r2, r0
    ccec:	6039      	str	r1, [r7, #0]
    ccee:	1dfb      	adds	r3, r7, #7
    ccf0:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    ccf2:	1dfb      	adds	r3, r7, #7
    ccf4:	781b      	ldrb	r3, [r3, #0]
    ccf6:	0018      	movs	r0, r3
    ccf8:	4b08      	ldr	r3, [pc, #32]	; (cd1c <sd_mmc_read_capacity+0x38>)
    ccfa:	4798      	blx	r3
    ccfc:	0003      	movs	r3, r0
    ccfe:	005b      	lsls	r3, r3, #1
    cd00:	1e5a      	subs	r2, r3, #1
    cd02:	683b      	ldr	r3, [r7, #0]
    cd04:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    cd06:	1dfb      	adds	r3, r7, #7
    cd08:	781b      	ldrb	r3, [r3, #0]
    cd0a:	0018      	movs	r0, r3
    cd0c:	4b04      	ldr	r3, [pc, #16]	; (cd20 <sd_mmc_read_capacity+0x3c>)
    cd0e:	4798      	blx	r3
    cd10:	0003      	movs	r3, r0
}
    cd12:	0018      	movs	r0, r3
    cd14:	46bd      	mov	sp, r7
    cd16:	b002      	add	sp, #8
    cd18:	bd80      	pop	{r7, pc}
    cd1a:	46c0      	nop			; (mov r8, r8)
    cd1c:	0000c879 	.word	0x0000c879
    cd20:	0000cc55 	.word	0x0000cc55

0000cd24 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    cd24:	b580      	push	{r7, lr}
    cd26:	b082      	sub	sp, #8
    cd28:	af00      	add	r7, sp, #0
    cd2a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    cd2c:	687b      	ldr	r3, [r7, #4]
    cd2e:	0019      	movs	r1, r3
    cd30:	2000      	movs	r0, #0
    cd32:	4b03      	ldr	r3, [pc, #12]	; (cd40 <sd_mmc_read_capacity_0+0x1c>)
    cd34:	4798      	blx	r3
    cd36:	0003      	movs	r3, r0
}
    cd38:	0018      	movs	r0, r3
    cd3a:	46bd      	mov	sp, r7
    cd3c:	b002      	add	sp, #8
    cd3e:	bd80      	pop	{r7, pc}
    cd40:	0000cce5 	.word	0x0000cce5

0000cd44 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    cd44:	b580      	push	{r7, lr}
    cd46:	b082      	sub	sp, #8
    cd48:	af00      	add	r7, sp, #0
    cd4a:	0002      	movs	r2, r0
    cd4c:	1dfb      	adds	r3, r7, #7
    cd4e:	701a      	strb	r2, [r3, #0]
    cd50:	1dbb      	adds	r3, r7, #6
    cd52:	1c0a      	adds	r2, r1, #0
    cd54:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    cd56:	1dfb      	adds	r3, r7, #7
    cd58:	781b      	ldrb	r3, [r3, #0]
    cd5a:	4a04      	ldr	r2, [pc, #16]	; (cd6c <sd_mmc_unload+0x28>)
    cd5c:	1db9      	adds	r1, r7, #6
    cd5e:	7809      	ldrb	r1, [r1, #0]
    cd60:	54d1      	strb	r1, [r2, r3]
	return true;
    cd62:	2301      	movs	r3, #1
}
    cd64:	0018      	movs	r0, r3
    cd66:	46bd      	mov	sp, r7
    cd68:	b002      	add	sp, #8
    cd6a:	bd80      	pop	{r7, pc}
    cd6c:	200042dc 	.word	0x200042dc

0000cd70 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b082      	sub	sp, #8
    cd74:	af00      	add	r7, sp, #0
    cd76:	0002      	movs	r2, r0
    cd78:	1dfb      	adds	r3, r7, #7
    cd7a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    cd7c:	1dfb      	adds	r3, r7, #7
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	0019      	movs	r1, r3
    cd82:	2000      	movs	r0, #0
    cd84:	4b03      	ldr	r3, [pc, #12]	; (cd94 <sd_mmc_unload_0+0x24>)
    cd86:	4798      	blx	r3
    cd88:	0003      	movs	r3, r0
}
    cd8a:	0018      	movs	r0, r3
    cd8c:	46bd      	mov	sp, r7
    cd8e:	b002      	add	sp, #8
    cd90:	bd80      	pop	{r7, pc}
    cd92:	46c0      	nop			; (mov r8, r8)
    cd94:	0000cd45 	.word	0x0000cd45

0000cd98 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    cd98:	b580      	push	{r7, lr}
    cd9a:	b082      	sub	sp, #8
    cd9c:	af00      	add	r7, sp, #0
    cd9e:	0002      	movs	r2, r0
    cda0:	1dfb      	adds	r3, r7, #7
    cda2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    cda4:	1dfb      	adds	r3, r7, #7
    cda6:	781b      	ldrb	r3, [r3, #0]
    cda8:	0018      	movs	r0, r3
    cdaa:	4b03      	ldr	r3, [pc, #12]	; (cdb8 <sd_mmc_wr_protect+0x20>)
    cdac:	4798      	blx	r3
    cdae:	0003      	movs	r3, r0
}
    cdb0:	0018      	movs	r0, r3
    cdb2:	46bd      	mov	sp, r7
    cdb4:	b002      	add	sp, #8
    cdb6:	bd80      	pop	{r7, pc}
    cdb8:	0000c8b5 	.word	0x0000c8b5

0000cdbc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    cdbc:	b580      	push	{r7, lr}
    cdbe:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    cdc0:	2000      	movs	r0, #0
    cdc2:	4b03      	ldr	r3, [pc, #12]	; (cdd0 <sd_mmc_wr_protect_0+0x14>)
    cdc4:	4798      	blx	r3
    cdc6:	0003      	movs	r3, r0
}
    cdc8:	0018      	movs	r0, r3
    cdca:	46bd      	mov	sp, r7
    cdcc:	bd80      	pop	{r7, pc}
    cdce:	46c0      	nop			; (mov r8, r8)
    cdd0:	0000cd99 	.word	0x0000cd99

0000cdd4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    cdd4:	b580      	push	{r7, lr}
    cdd6:	b082      	sub	sp, #8
    cdd8:	af00      	add	r7, sp, #0
    cdda:	0002      	movs	r2, r0
    cddc:	1dfb      	adds	r3, r7, #7
    cdde:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    cde0:	2301      	movs	r3, #1
}
    cde2:	0018      	movs	r0, r3
    cde4:	46bd      	mov	sp, r7
    cde6:	b002      	add	sp, #8
    cde8:	bd80      	pop	{r7, pc}
	...

0000cdec <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    cdec:	b580      	push	{r7, lr}
    cdee:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    cdf0:	2000      	movs	r0, #0
    cdf2:	4b03      	ldr	r3, [pc, #12]	; (ce00 <sd_mmc_removal_0+0x14>)
    cdf4:	4798      	blx	r3
    cdf6:	0003      	movs	r3, r0
}
    cdf8:	0018      	movs	r0, r3
    cdfa:	46bd      	mov	sp, r7
    cdfc:	bd80      	pop	{r7, pc}
    cdfe:	46c0      	nop			; (mov r8, r8)
    ce00:	0000cdd5 	.word	0x0000cdd5

0000ce04 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    ce04:	b580      	push	{r7, lr}
    ce06:	b084      	sub	sp, #16
    ce08:	af00      	add	r7, sp, #0
    ce0a:	60b9      	str	r1, [r7, #8]
    ce0c:	607a      	str	r2, [r7, #4]
    ce0e:	230f      	movs	r3, #15
    ce10:	18fb      	adds	r3, r7, r3
    ce12:	1c02      	adds	r2, r0, #0
    ce14:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    ce16:	68b9      	ldr	r1, [r7, #8]
    ce18:	230f      	movs	r3, #15
    ce1a:	18fb      	adds	r3, r7, r3
    ce1c:	781b      	ldrb	r3, [r3, #0]
    ce1e:	2201      	movs	r2, #1
    ce20:	0018      	movs	r0, r3
    ce22:	4b10      	ldr	r3, [pc, #64]	; (ce64 <sd_mmc_mem_2_ram+0x60>)
    ce24:	4798      	blx	r3
    ce26:	1e03      	subs	r3, r0, #0
    ce28:	d005      	beq.n	ce36 <sd_mmc_mem_2_ram+0x32>
    ce2a:	2b02      	cmp	r3, #2
    ce2c:	d101      	bne.n	ce32 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    ce2e:	2302      	movs	r3, #2
    ce30:	e013      	b.n	ce5a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    ce32:	2301      	movs	r3, #1
    ce34:	e011      	b.n	ce5a <sd_mmc_mem_2_ram+0x56>
		break;
    ce36:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    ce38:	687b      	ldr	r3, [r7, #4]
    ce3a:	2101      	movs	r1, #1
    ce3c:	0018      	movs	r0, r3
    ce3e:	4b0a      	ldr	r3, [pc, #40]	; (ce68 <sd_mmc_mem_2_ram+0x64>)
    ce40:	4798      	blx	r3
    ce42:	1e03      	subs	r3, r0, #0
    ce44:	d001      	beq.n	ce4a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    ce46:	2301      	movs	r3, #1
    ce48:	e007      	b.n	ce5a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    ce4a:	2000      	movs	r0, #0
    ce4c:	4b07      	ldr	r3, [pc, #28]	; (ce6c <sd_mmc_mem_2_ram+0x68>)
    ce4e:	4798      	blx	r3
    ce50:	1e03      	subs	r3, r0, #0
    ce52:	d001      	beq.n	ce58 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    ce54:	2301      	movs	r3, #1
    ce56:	e000      	b.n	ce5a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    ce58:	2300      	movs	r3, #0
}
    ce5a:	0018      	movs	r0, r3
    ce5c:	46bd      	mov	sp, r7
    ce5e:	b004      	add	sp, #16
    ce60:	bd80      	pop	{r7, pc}
    ce62:	46c0      	nop			; (mov r8, r8)
    ce64:	0000c8cd 	.word	0x0000c8cd
    ce68:	0000c9b9 	.word	0x0000c9b9
    ce6c:	0000ca11 	.word	0x0000ca11

0000ce70 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    ce70:	b580      	push	{r7, lr}
    ce72:	b082      	sub	sp, #8
    ce74:	af00      	add	r7, sp, #0
    ce76:	6078      	str	r0, [r7, #4]
    ce78:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    ce7a:	683a      	ldr	r2, [r7, #0]
    ce7c:	687b      	ldr	r3, [r7, #4]
    ce7e:	0019      	movs	r1, r3
    ce80:	2000      	movs	r0, #0
    ce82:	4b03      	ldr	r3, [pc, #12]	; (ce90 <sd_mmc_mem_2_ram_0+0x20>)
    ce84:	4798      	blx	r3
    ce86:	0003      	movs	r3, r0
}
    ce88:	0018      	movs	r0, r3
    ce8a:	46bd      	mov	sp, r7
    ce8c:	b002      	add	sp, #8
    ce8e:	bd80      	pop	{r7, pc}
    ce90:	0000ce05 	.word	0x0000ce05

0000ce94 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    ce94:	b580      	push	{r7, lr}
    ce96:	b084      	sub	sp, #16
    ce98:	af00      	add	r7, sp, #0
    ce9a:	60b9      	str	r1, [r7, #8]
    ce9c:	607a      	str	r2, [r7, #4]
    ce9e:	230f      	movs	r3, #15
    cea0:	18fb      	adds	r3, r7, r3
    cea2:	1c02      	adds	r2, r0, #0
    cea4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    cea6:	68b9      	ldr	r1, [r7, #8]
    cea8:	230f      	movs	r3, #15
    ceaa:	18fb      	adds	r3, r7, r3
    ceac:	781b      	ldrb	r3, [r3, #0]
    ceae:	2201      	movs	r2, #1
    ceb0:	0018      	movs	r0, r3
    ceb2:	4b10      	ldr	r3, [pc, #64]	; (cef4 <sd_mmc_ram_2_mem+0x60>)
    ceb4:	4798      	blx	r3
    ceb6:	1e03      	subs	r3, r0, #0
    ceb8:	d005      	beq.n	cec6 <sd_mmc_ram_2_mem+0x32>
    ceba:	2b02      	cmp	r3, #2
    cebc:	d101      	bne.n	cec2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    cebe:	2302      	movs	r3, #2
    cec0:	e013      	b.n	ceea <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    cec2:	2301      	movs	r3, #1
    cec4:	e011      	b.n	ceea <sd_mmc_ram_2_mem+0x56>
		break;
    cec6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    cec8:	687b      	ldr	r3, [r7, #4]
    ceca:	2101      	movs	r1, #1
    cecc:	0018      	movs	r0, r3
    cece:	4b0a      	ldr	r3, [pc, #40]	; (cef8 <sd_mmc_ram_2_mem+0x64>)
    ced0:	4798      	blx	r3
    ced2:	1e03      	subs	r3, r0, #0
    ced4:	d001      	beq.n	ceda <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    ced6:	2301      	movs	r3, #1
    ced8:	e007      	b.n	ceea <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    ceda:	2000      	movs	r0, #0
    cedc:	4b07      	ldr	r3, [pc, #28]	; (cefc <sd_mmc_ram_2_mem+0x68>)
    cede:	4798      	blx	r3
    cee0:	1e03      	subs	r3, r0, #0
    cee2:	d001      	beq.n	cee8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    cee4:	2301      	movs	r3, #1
    cee6:	e000      	b.n	ceea <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    cee8:	2300      	movs	r3, #0
}
    ceea:	0018      	movs	r0, r3
    ceec:	46bd      	mov	sp, r7
    ceee:	b004      	add	sp, #16
    cef0:	bd80      	pop	{r7, pc}
    cef2:	46c0      	nop			; (mov r8, r8)
    cef4:	0000caa9 	.word	0x0000caa9
    cef8:	0000cb91 	.word	0x0000cb91
    cefc:	0000cbe9 	.word	0x0000cbe9

0000cf00 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    cf00:	b580      	push	{r7, lr}
    cf02:	b082      	sub	sp, #8
    cf04:	af00      	add	r7, sp, #0
    cf06:	6078      	str	r0, [r7, #4]
    cf08:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    cf0a:	683a      	ldr	r2, [r7, #0]
    cf0c:	687b      	ldr	r3, [r7, #4]
    cf0e:	0019      	movs	r1, r3
    cf10:	2000      	movs	r0, #0
    cf12:	4b03      	ldr	r3, [pc, #12]	; (cf20 <sd_mmc_ram_2_mem_0+0x20>)
    cf14:	4798      	blx	r3
    cf16:	0003      	movs	r3, r0
}
    cf18:	0018      	movs	r0, r3
    cf1a:	46bd      	mov	sp, r7
    cf1c:	b002      	add	sp, #8
    cf1e:	bd80      	pop	{r7, pc}
    cf20:	0000ce95 	.word	0x0000ce95

0000cf24 <system_pinmux_get_group_from_gpio_pin>:
{
    cf24:	b580      	push	{r7, lr}
    cf26:	b084      	sub	sp, #16
    cf28:	af00      	add	r7, sp, #0
    cf2a:	0002      	movs	r2, r0
    cf2c:	1dfb      	adds	r3, r7, #7
    cf2e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    cf30:	230f      	movs	r3, #15
    cf32:	18fb      	adds	r3, r7, r3
    cf34:	1dfa      	adds	r2, r7, #7
    cf36:	7812      	ldrb	r2, [r2, #0]
    cf38:	09d2      	lsrs	r2, r2, #7
    cf3a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    cf3c:	230e      	movs	r3, #14
    cf3e:	18fb      	adds	r3, r7, r3
    cf40:	1dfa      	adds	r2, r7, #7
    cf42:	7812      	ldrb	r2, [r2, #0]
    cf44:	0952      	lsrs	r2, r2, #5
    cf46:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cf48:	4b0d      	ldr	r3, [pc, #52]	; (cf80 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cf4a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    cf4c:	230f      	movs	r3, #15
    cf4e:	18fb      	adds	r3, r7, r3
    cf50:	781b      	ldrb	r3, [r3, #0]
    cf52:	2b00      	cmp	r3, #0
    cf54:	d10f      	bne.n	cf76 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    cf56:	230f      	movs	r3, #15
    cf58:	18fb      	adds	r3, r7, r3
    cf5a:	781b      	ldrb	r3, [r3, #0]
    cf5c:	009b      	lsls	r3, r3, #2
    cf5e:	2210      	movs	r2, #16
    cf60:	4694      	mov	ip, r2
    cf62:	44bc      	add	ip, r7
    cf64:	4463      	add	r3, ip
    cf66:	3b08      	subs	r3, #8
    cf68:	681a      	ldr	r2, [r3, #0]
    cf6a:	230e      	movs	r3, #14
    cf6c:	18fb      	adds	r3, r7, r3
    cf6e:	781b      	ldrb	r3, [r3, #0]
    cf70:	01db      	lsls	r3, r3, #7
    cf72:	18d3      	adds	r3, r2, r3
    cf74:	e000      	b.n	cf78 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    cf76:	2300      	movs	r3, #0
}
    cf78:	0018      	movs	r0, r3
    cf7a:	46bd      	mov	sp, r7
    cf7c:	b004      	add	sp, #16
    cf7e:	bd80      	pop	{r7, pc}
    cf80:	41004400 	.word	0x41004400

0000cf84 <system_interrupt_enable>:
{
    cf84:	b580      	push	{r7, lr}
    cf86:	b082      	sub	sp, #8
    cf88:	af00      	add	r7, sp, #0
    cf8a:	0002      	movs	r2, r0
    cf8c:	1dfb      	adds	r3, r7, #7
    cf8e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cf90:	4b06      	ldr	r3, [pc, #24]	; (cfac <system_interrupt_enable+0x28>)
    cf92:	1dfa      	adds	r2, r7, #7
    cf94:	7812      	ldrb	r2, [r2, #0]
    cf96:	0011      	movs	r1, r2
    cf98:	221f      	movs	r2, #31
    cf9a:	400a      	ands	r2, r1
    cf9c:	2101      	movs	r1, #1
    cf9e:	4091      	lsls	r1, r2
    cfa0:	000a      	movs	r2, r1
    cfa2:	601a      	str	r2, [r3, #0]
}
    cfa4:	46c0      	nop			; (mov r8, r8)
    cfa6:	46bd      	mov	sp, r7
    cfa8:	b002      	add	sp, #8
    cfaa:	bd80      	pop	{r7, pc}
    cfac:	e000e100 	.word	0xe000e100

0000cfb0 <port_get_group_from_gpio_pin>:
{
    cfb0:	b580      	push	{r7, lr}
    cfb2:	b082      	sub	sp, #8
    cfb4:	af00      	add	r7, sp, #0
    cfb6:	0002      	movs	r2, r0
    cfb8:	1dfb      	adds	r3, r7, #7
    cfba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cfbc:	1dfb      	adds	r3, r7, #7
    cfbe:	781b      	ldrb	r3, [r3, #0]
    cfc0:	0018      	movs	r0, r3
    cfc2:	4b03      	ldr	r3, [pc, #12]	; (cfd0 <port_get_group_from_gpio_pin+0x20>)
    cfc4:	4798      	blx	r3
    cfc6:	0003      	movs	r3, r0
}
    cfc8:	0018      	movs	r0, r3
    cfca:	46bd      	mov	sp, r7
    cfcc:	b002      	add	sp, #8
    cfce:	bd80      	pop	{r7, pc}
    cfd0:	0000cf25 	.word	0x0000cf25

0000cfd4 <port_get_config_defaults>:
{
    cfd4:	b580      	push	{r7, lr}
    cfd6:	b082      	sub	sp, #8
    cfd8:	af00      	add	r7, sp, #0
    cfda:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    cfdc:	687b      	ldr	r3, [r7, #4]
    cfde:	2200      	movs	r2, #0
    cfe0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    cfe2:	687b      	ldr	r3, [r7, #4]
    cfe4:	2201      	movs	r2, #1
    cfe6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    cfe8:	687b      	ldr	r3, [r7, #4]
    cfea:	2200      	movs	r2, #0
    cfec:	709a      	strb	r2, [r3, #2]
}
    cfee:	46c0      	nop			; (mov r8, r8)
    cff0:	46bd      	mov	sp, r7
    cff2:	b002      	add	sp, #8
    cff4:	bd80      	pop	{r7, pc}
	...

0000cff8 <port_pin_set_output_level>:
{
    cff8:	b580      	push	{r7, lr}
    cffa:	b084      	sub	sp, #16
    cffc:	af00      	add	r7, sp, #0
    cffe:	0002      	movs	r2, r0
    d000:	1dfb      	adds	r3, r7, #7
    d002:	701a      	strb	r2, [r3, #0]
    d004:	1dbb      	adds	r3, r7, #6
    d006:	1c0a      	adds	r2, r1, #0
    d008:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d00a:	1dfb      	adds	r3, r7, #7
    d00c:	781b      	ldrb	r3, [r3, #0]
    d00e:	0018      	movs	r0, r3
    d010:	4b0d      	ldr	r3, [pc, #52]	; (d048 <port_pin_set_output_level+0x50>)
    d012:	4798      	blx	r3
    d014:	0003      	movs	r3, r0
    d016:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d018:	1dfb      	adds	r3, r7, #7
    d01a:	781b      	ldrb	r3, [r3, #0]
    d01c:	221f      	movs	r2, #31
    d01e:	4013      	ands	r3, r2
    d020:	2201      	movs	r2, #1
    d022:	409a      	lsls	r2, r3
    d024:	0013      	movs	r3, r2
    d026:	60bb      	str	r3, [r7, #8]
	if (level) {
    d028:	1dbb      	adds	r3, r7, #6
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	2b00      	cmp	r3, #0
    d02e:	d003      	beq.n	d038 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d030:	68fb      	ldr	r3, [r7, #12]
    d032:	68ba      	ldr	r2, [r7, #8]
    d034:	619a      	str	r2, [r3, #24]
}
    d036:	e002      	b.n	d03e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    d038:	68fb      	ldr	r3, [r7, #12]
    d03a:	68ba      	ldr	r2, [r7, #8]
    d03c:	615a      	str	r2, [r3, #20]
}
    d03e:	46c0      	nop			; (mov r8, r8)
    d040:	46bd      	mov	sp, r7
    d042:	b004      	add	sp, #16
    d044:	bd80      	pop	{r7, pc}
    d046:	46c0      	nop			; (mov r8, r8)
    d048:	0000cfb1 	.word	0x0000cfb1

0000d04c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    d04c:	b580      	push	{r7, lr}
    d04e:	b084      	sub	sp, #16
    d050:	af00      	add	r7, sp, #0
    d052:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d054:	687b      	ldr	r3, [r7, #4]
    d056:	681b      	ldr	r3, [r3, #0]
    d058:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    d05a:	68fb      	ldr	r3, [r7, #12]
    d05c:	69db      	ldr	r3, [r3, #28]
    d05e:	1e5a      	subs	r2, r3, #1
    d060:	4193      	sbcs	r3, r2
    d062:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    d064:	0018      	movs	r0, r3
    d066:	46bd      	mov	sp, r7
    d068:	b004      	add	sp, #16
    d06a:	bd80      	pop	{r7, pc}

0000d06c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    d06c:	b580      	push	{r7, lr}
    d06e:	b082      	sub	sp, #8
    d070:	af00      	add	r7, sp, #0
    d072:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    d074:	687b      	ldr	r3, [r7, #4]
    d076:	2201      	movs	r2, #1
    d078:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    d07a:	687b      	ldr	r3, [r7, #4]
    d07c:	2200      	movs	r2, #0
    d07e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    d080:	687b      	ldr	r3, [r7, #4]
    d082:	2200      	movs	r2, #0
    d084:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    d086:	687b      	ldr	r3, [r7, #4]
    d088:	22c0      	movs	r2, #192	; 0xc0
    d08a:	0392      	lsls	r2, r2, #14
    d08c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    d08e:	687b      	ldr	r3, [r7, #4]
    d090:	2200      	movs	r2, #0
    d092:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    d094:	687b      	ldr	r3, [r7, #4]
    d096:	2200      	movs	r2, #0
    d098:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    d09a:	687b      	ldr	r3, [r7, #4]
    d09c:	2201      	movs	r2, #1
    d09e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    d0a0:	687b      	ldr	r3, [r7, #4]
    d0a2:	2201      	movs	r2, #1
    d0a4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    d0a6:	687b      	ldr	r3, [r7, #4]
    d0a8:	2200      	movs	r2, #0
    d0aa:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    d0ac:	687b      	ldr	r3, [r7, #4]
    d0ae:	2224      	movs	r2, #36	; 0x24
    d0b0:	2100      	movs	r1, #0
    d0b2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    d0b4:	687b      	ldr	r3, [r7, #4]
    d0b6:	3318      	adds	r3, #24
    d0b8:	220c      	movs	r2, #12
    d0ba:	2100      	movs	r1, #0
    d0bc:	0018      	movs	r0, r3
    d0be:	4b0a      	ldr	r3, [pc, #40]	; (d0e8 <spi_get_config_defaults+0x7c>)
    d0c0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    d0c2:	687b      	ldr	r3, [r7, #4]
    d0c4:	4a09      	ldr	r2, [pc, #36]	; (d0ec <spi_get_config_defaults+0x80>)
    d0c6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    d0c8:	687b      	ldr	r3, [r7, #4]
    d0ca:	2200      	movs	r2, #0
    d0cc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    d0ce:	687b      	ldr	r3, [r7, #4]
    d0d0:	2200      	movs	r2, #0
    d0d2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    d0d4:	687b      	ldr	r3, [r7, #4]
    d0d6:	2200      	movs	r2, #0
    d0d8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    d0da:	687b      	ldr	r3, [r7, #4]
    d0dc:	2200      	movs	r2, #0
    d0de:	635a      	str	r2, [r3, #52]	; 0x34

};
    d0e0:	46c0      	nop			; (mov r8, r8)
    d0e2:	46bd      	mov	sp, r7
    d0e4:	b002      	add	sp, #8
    d0e6:	bd80      	pop	{r7, pc}
    d0e8:	00022dbb 	.word	0x00022dbb
    d0ec:	000186a0 	.word	0x000186a0

0000d0f0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    d0f0:	b580      	push	{r7, lr}
    d0f2:	b082      	sub	sp, #8
    d0f4:	af00      	add	r7, sp, #0
    d0f6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    d0f8:	687b      	ldr	r3, [r7, #4]
    d0fa:	220a      	movs	r2, #10
    d0fc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    d0fe:	687b      	ldr	r3, [r7, #4]
    d100:	2200      	movs	r2, #0
    d102:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    d104:	687b      	ldr	r3, [r7, #4]
    d106:	2200      	movs	r2, #0
    d108:	709a      	strb	r2, [r3, #2]
}
    d10a:	46c0      	nop			; (mov r8, r8)
    d10c:	46bd      	mov	sp, r7
    d10e:	b002      	add	sp, #8
    d110:	bd80      	pop	{r7, pc}
	...

0000d114 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    d114:	b580      	push	{r7, lr}
    d116:	b084      	sub	sp, #16
    d118:	af00      	add	r7, sp, #0
    d11a:	6078      	str	r0, [r7, #4]
    d11c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    d11e:	683b      	ldr	r3, [r7, #0]
    d120:	781a      	ldrb	r2, [r3, #0]
    d122:	687b      	ldr	r3, [r7, #4]
    d124:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    d126:	683b      	ldr	r3, [r7, #0]
    d128:	785a      	ldrb	r2, [r3, #1]
    d12a:	687b      	ldr	r3, [r7, #4]
    d12c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    d12e:	683b      	ldr	r3, [r7, #0]
    d130:	789a      	ldrb	r2, [r3, #2]
    d132:	687b      	ldr	r3, [r7, #4]
    d134:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    d136:	230c      	movs	r3, #12
    d138:	18fb      	adds	r3, r7, r3
    d13a:	0018      	movs	r0, r3
    d13c:	4b0b      	ldr	r3, [pc, #44]	; (d16c <spi_attach_slave+0x58>)
    d13e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d140:	230c      	movs	r3, #12
    d142:	18fb      	adds	r3, r7, r3
    d144:	2201      	movs	r2, #1
    d146:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    d148:	687b      	ldr	r3, [r7, #4]
    d14a:	781b      	ldrb	r3, [r3, #0]
    d14c:	220c      	movs	r2, #12
    d14e:	18ba      	adds	r2, r7, r2
    d150:	0011      	movs	r1, r2
    d152:	0018      	movs	r0, r3
    d154:	4b06      	ldr	r3, [pc, #24]	; (d170 <spi_attach_slave+0x5c>)
    d156:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    d158:	687b      	ldr	r3, [r7, #4]
    d15a:	781b      	ldrb	r3, [r3, #0]
    d15c:	2101      	movs	r1, #1
    d15e:	0018      	movs	r0, r3
    d160:	4b04      	ldr	r3, [pc, #16]	; (d174 <spi_attach_slave+0x60>)
    d162:	4798      	blx	r3
}
    d164:	46c0      	nop			; (mov r8, r8)
    d166:	46bd      	mov	sp, r7
    d168:	b004      	add	sp, #16
    d16a:	bd80      	pop	{r7, pc}
    d16c:	0000cfd5 	.word	0x0000cfd5
    d170:	0001451d 	.word	0x0001451d
    d174:	0000cff9 	.word	0x0000cff9

0000d178 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    d178:	b580      	push	{r7, lr}
    d17a:	b084      	sub	sp, #16
    d17c:	af00      	add	r7, sp, #0
    d17e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d180:	687b      	ldr	r3, [r7, #4]
    d182:	681b      	ldr	r3, [r3, #0]
    d184:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d186:	687b      	ldr	r3, [r7, #4]
    d188:	681b      	ldr	r3, [r3, #0]
    d18a:	0018      	movs	r0, r3
    d18c:	4b0b      	ldr	r3, [pc, #44]	; (d1bc <spi_enable+0x44>)
    d18e:	4798      	blx	r3
    d190:	0003      	movs	r3, r0
    d192:	0018      	movs	r0, r3
    d194:	4b0a      	ldr	r3, [pc, #40]	; (d1c0 <spi_enable+0x48>)
    d196:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    d198:	46c0      	nop			; (mov r8, r8)
    d19a:	687b      	ldr	r3, [r7, #4]
    d19c:	0018      	movs	r0, r3
    d19e:	4b09      	ldr	r3, [pc, #36]	; (d1c4 <spi_enable+0x4c>)
    d1a0:	4798      	blx	r3
    d1a2:	1e03      	subs	r3, r0, #0
    d1a4:	d1f9      	bne.n	d19a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    d1a6:	68fb      	ldr	r3, [r7, #12]
    d1a8:	681b      	ldr	r3, [r3, #0]
    d1aa:	2202      	movs	r2, #2
    d1ac:	431a      	orrs	r2, r3
    d1ae:	68fb      	ldr	r3, [r7, #12]
    d1b0:	601a      	str	r2, [r3, #0]
}
    d1b2:	46c0      	nop			; (mov r8, r8)
    d1b4:	46bd      	mov	sp, r7
    d1b6:	b004      	add	sp, #16
    d1b8:	bd80      	pop	{r7, pc}
    d1ba:	46c0      	nop			; (mov r8, r8)
    d1bc:	000151ed 	.word	0x000151ed
    d1c0:	0000cf85 	.word	0x0000cf85
    d1c4:	0000d04d 	.word	0x0000d04d

0000d1c8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    d1c8:	b580      	push	{r7, lr}
    d1ca:	b084      	sub	sp, #16
    d1cc:	af00      	add	r7, sp, #0
    d1ce:	6078      	str	r0, [r7, #4]
    d1d0:	000a      	movs	r2, r1
    d1d2:	1cfb      	adds	r3, r7, #3
    d1d4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    d1d6:	230f      	movs	r3, #15
    d1d8:	18fb      	adds	r3, r7, r3
    d1da:	2200      	movs	r2, #0
    d1dc:	701a      	strb	r2, [r3, #0]
	while (size--) {
    d1de:	e038      	b.n	d252 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    d1e0:	687b      	ldr	r3, [r7, #4]
    d1e2:	1c5a      	adds	r2, r3, #1
    d1e4:	607a      	str	r2, [r7, #4]
    d1e6:	220e      	movs	r2, #14
    d1e8:	18ba      	adds	r2, r7, r2
    d1ea:	781b      	ldrb	r3, [r3, #0]
    d1ec:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    d1ee:	230d      	movs	r3, #13
    d1f0:	18fb      	adds	r3, r7, r3
    d1f2:	2200      	movs	r2, #0
    d1f4:	701a      	strb	r2, [r3, #0]
    d1f6:	e027      	b.n	d248 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    d1f8:	230f      	movs	r3, #15
    d1fa:	18fa      	adds	r2, r7, r3
    d1fc:	230f      	movs	r3, #15
    d1fe:	18fb      	adds	r3, r7, r3
    d200:	781b      	ldrb	r3, [r3, #0]
    d202:	18db      	adds	r3, r3, r3
    d204:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    d206:	230e      	movs	r3, #14
    d208:	18fa      	adds	r2, r7, r3
    d20a:	230f      	movs	r3, #15
    d20c:	18fb      	adds	r3, r7, r3
    d20e:	7812      	ldrb	r2, [r2, #0]
    d210:	781b      	ldrb	r3, [r3, #0]
    d212:	4053      	eors	r3, r2
    d214:	b2db      	uxtb	r3, r3
    d216:	b25b      	sxtb	r3, r3
    d218:	2b00      	cmp	r3, #0
    d21a:	da07      	bge.n	d22c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    d21c:	230f      	movs	r3, #15
    d21e:	18fb      	adds	r3, r7, r3
    d220:	220f      	movs	r2, #15
    d222:	18ba      	adds	r2, r7, r2
    d224:	7812      	ldrb	r2, [r2, #0]
    d226:	2109      	movs	r1, #9
    d228:	404a      	eors	r2, r1
    d22a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    d22c:	230e      	movs	r3, #14
    d22e:	18fa      	adds	r2, r7, r3
    d230:	230e      	movs	r3, #14
    d232:	18fb      	adds	r3, r7, r3
    d234:	781b      	ldrb	r3, [r3, #0]
    d236:	18db      	adds	r3, r3, r3
    d238:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    d23a:	230d      	movs	r3, #13
    d23c:	18fb      	adds	r3, r7, r3
    d23e:	781a      	ldrb	r2, [r3, #0]
    d240:	230d      	movs	r3, #13
    d242:	18fb      	adds	r3, r7, r3
    d244:	3201      	adds	r2, #1
    d246:	701a      	strb	r2, [r3, #0]
    d248:	230d      	movs	r3, #13
    d24a:	18fb      	adds	r3, r7, r3
    d24c:	781b      	ldrb	r3, [r3, #0]
    d24e:	2b07      	cmp	r3, #7
    d250:	d9d2      	bls.n	d1f8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    d252:	1cfb      	adds	r3, r7, #3
    d254:	781b      	ldrb	r3, [r3, #0]
    d256:	1cfa      	adds	r2, r7, #3
    d258:	1e59      	subs	r1, r3, #1
    d25a:	7011      	strb	r1, [r2, #0]
    d25c:	2b00      	cmp	r3, #0
    d25e:	d1bf      	bne.n	d1e0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    d260:	230f      	movs	r3, #15
    d262:	18fb      	adds	r3, r7, r3
    d264:	781b      	ldrb	r3, [r3, #0]
    d266:	005b      	lsls	r3, r3, #1
    d268:	b25b      	sxtb	r3, r3
    d26a:	2201      	movs	r2, #1
    d26c:	4313      	orrs	r3, r2
    d26e:	b25a      	sxtb	r2, r3
    d270:	230f      	movs	r3, #15
    d272:	18fb      	adds	r3, r7, r3
    d274:	701a      	strb	r2, [r3, #0]
	return crc;
    d276:	230f      	movs	r3, #15
    d278:	18fb      	adds	r3, r7, r3
    d27a:	781b      	ldrb	r3, [r3, #0]
}
    d27c:	0018      	movs	r0, r3
    d27e:	46bd      	mov	sp, r7
    d280:	b004      	add	sp, #16
    d282:	bd80      	pop	{r7, pc}

0000d284 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    d284:	b590      	push	{r4, r7, lr}
    d286:	b083      	sub	sp, #12
    d288:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    d28a:	1c7b      	adds	r3, r7, #1
    d28c:	22ff      	movs	r2, #255	; 0xff
    d28e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    d290:	1cbb      	adds	r3, r7, #2
    d292:	22ff      	movs	r2, #255	; 0xff
    d294:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    d296:	1cbb      	adds	r3, r7, #2
    d298:	881b      	ldrh	r3, [r3, #0]
    d29a:	1c79      	adds	r1, r7, #1
    d29c:	4811      	ldr	r0, [pc, #68]	; (d2e4 <sd_mmc_spi_wait_busy+0x60>)
    d29e:	2201      	movs	r2, #1
    d2a0:	4c11      	ldr	r4, [pc, #68]	; (d2e8 <sd_mmc_spi_wait_busy+0x64>)
    d2a2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    d2a4:	4b11      	ldr	r3, [pc, #68]	; (d2ec <sd_mmc_spi_wait_busy+0x68>)
    d2a6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    d2a8:	1cbb      	adds	r3, r7, #2
    d2aa:	881b      	ldrh	r3, [r3, #0]
    d2ac:	1c79      	adds	r1, r7, #1
    d2ae:	480d      	ldr	r0, [pc, #52]	; (d2e4 <sd_mmc_spi_wait_busy+0x60>)
    d2b0:	2201      	movs	r2, #1
    d2b2:	4c0d      	ldr	r4, [pc, #52]	; (d2e8 <sd_mmc_spi_wait_busy+0x64>)
    d2b4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    d2b6:	1cbb      	adds	r3, r7, #2
    d2b8:	881b      	ldrh	r3, [r3, #0]
    d2ba:	1c79      	adds	r1, r7, #1
    d2bc:	4809      	ldr	r0, [pc, #36]	; (d2e4 <sd_mmc_spi_wait_busy+0x60>)
    d2be:	2201      	movs	r2, #1
    d2c0:	4c09      	ldr	r4, [pc, #36]	; (d2e8 <sd_mmc_spi_wait_busy+0x64>)
    d2c2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    d2c4:	687b      	ldr	r3, [r7, #4]
    d2c6:	1e5a      	subs	r2, r3, #1
    d2c8:	607a      	str	r2, [r7, #4]
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	d101      	bne.n	d2d2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    d2ce:	2300      	movs	r3, #0
    d2d0:	e004      	b.n	d2dc <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    d2d2:	1c7b      	adds	r3, r7, #1
    d2d4:	781b      	ldrb	r3, [r3, #0]
    d2d6:	2bff      	cmp	r3, #255	; 0xff
    d2d8:	d1ed      	bne.n	d2b6 <sd_mmc_spi_wait_busy+0x32>
	return true;
    d2da:	2301      	movs	r3, #1
}
    d2dc:	0018      	movs	r0, r3
    d2de:	46bd      	mov	sp, r7
    d2e0:	b003      	add	sp, #12
    d2e2:	bd90      	pop	{r4, r7, pc}
    d2e4:	200042e0 	.word	0x200042e0
    d2e8:	00015b2d 	.word	0x00015b2d
    d2ec:	00030d40 	.word	0x00030d40

0000d2f0 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    d2f0:	b590      	push	{r4, r7, lr}
    d2f2:	b083      	sub	sp, #12
    d2f4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    d2f6:	1cbb      	adds	r3, r7, #2
    d2f8:	22ff      	movs	r2, #255	; 0xff
    d2fa:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    d2fc:	1c7b      	adds	r3, r7, #1
    d2fe:	2200      	movs	r2, #0
    d300:	701a      	strb	r2, [r3, #0]
	i = 500000;
    d302:	4b18      	ldr	r3, [pc, #96]	; (d364 <sd_mmc_spi_start_read_block+0x74>)
    d304:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    d306:	687b      	ldr	r3, [r7, #4]
    d308:	1e5a      	subs	r2, r3, #1
    d30a:	607a      	str	r2, [r7, #4]
    d30c:	2b00      	cmp	r3, #0
    d30e:	d104      	bne.n	d31a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    d310:	4b15      	ldr	r3, [pc, #84]	; (d368 <sd_mmc_spi_start_read_block+0x78>)
    d312:	2204      	movs	r2, #4
    d314:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    d316:	2300      	movs	r3, #0
    d318:	e020      	b.n	d35c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    d31a:	1cbb      	adds	r3, r7, #2
    d31c:	881b      	ldrh	r3, [r3, #0]
    d31e:	1c79      	adds	r1, r7, #1
    d320:	4812      	ldr	r0, [pc, #72]	; (d36c <sd_mmc_spi_start_read_block+0x7c>)
    d322:	2201      	movs	r2, #1
    d324:	4c12      	ldr	r4, [pc, #72]	; (d370 <sd_mmc_spi_start_read_block+0x80>)
    d326:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    d328:	1c7b      	adds	r3, r7, #1
    d32a:	781b      	ldrb	r3, [r3, #0]
    d32c:	001a      	movs	r2, r3
    d32e:	23f0      	movs	r3, #240	; 0xf0
    d330:	4013      	ands	r3, r2
    d332:	d10e      	bne.n	d352 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    d334:	1c7b      	adds	r3, r7, #1
    d336:	781b      	ldrb	r3, [r3, #0]
    d338:	001a      	movs	r2, r3
    d33a:	2307      	movs	r3, #7
    d33c:	4013      	ands	r3, r2
    d33e:	d003      	beq.n	d348 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    d340:	4b09      	ldr	r3, [pc, #36]	; (d368 <sd_mmc_spi_start_read_block+0x78>)
    d342:	2207      	movs	r2, #7
    d344:	701a      	strb	r2, [r3, #0]
    d346:	e002      	b.n	d34e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    d348:	4b07      	ldr	r3, [pc, #28]	; (d368 <sd_mmc_spi_start_read_block+0x78>)
    d34a:	220b      	movs	r2, #11
    d34c:	701a      	strb	r2, [r3, #0]
			}
			return false;
    d34e:	2300      	movs	r3, #0
    d350:	e004      	b.n	d35c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    d352:	1c7b      	adds	r3, r7, #1
    d354:	781b      	ldrb	r3, [r3, #0]
    d356:	2bfe      	cmp	r3, #254	; 0xfe
    d358:	d1d5      	bne.n	d306 <sd_mmc_spi_start_read_block+0x16>

	return true;
    d35a:	2301      	movs	r3, #1
}
    d35c:	0018      	movs	r0, r3
    d35e:	46bd      	mov	sp, r7
    d360:	b003      	add	sp, #12
    d362:	bd90      	pop	{r4, r7, pc}
    d364:	0007a120 	.word	0x0007a120
    d368:	20004323 	.word	0x20004323
    d36c:	200042e0 	.word	0x200042e0
    d370:	00015b2d 	.word	0x00015b2d

0000d374 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    d374:	b590      	push	{r4, r7, lr}
    d376:	b083      	sub	sp, #12
    d378:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    d37a:	1dbb      	adds	r3, r7, #6
    d37c:	22ff      	movs	r2, #255	; 0xff
    d37e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    d380:	1dbb      	adds	r3, r7, #6
    d382:	881b      	ldrh	r3, [r3, #0]
    d384:	1d39      	adds	r1, r7, #4
    d386:	4804      	ldr	r0, [pc, #16]	; (d398 <sd_mmc_spi_stop_read_block+0x24>)
    d388:	2202      	movs	r2, #2
    d38a:	4c04      	ldr	r4, [pc, #16]	; (d39c <sd_mmc_spi_stop_read_block+0x28>)
    d38c:	47a0      	blx	r4
			dummy);
}
    d38e:	46c0      	nop			; (mov r8, r8)
    d390:	46bd      	mov	sp, r7
    d392:	b003      	add	sp, #12
    d394:	bd90      	pop	{r4, r7, pc}
    d396:	46c0      	nop			; (mov r8, r8)
    d398:	200042e0 	.word	0x200042e0
    d39c:	00015b2d 	.word	0x00015b2d

0000d3a0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    d3a0:	b580      	push	{r7, lr}
    d3a2:	b082      	sub	sp, #8
    d3a4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    d3a6:	1dfb      	adds	r3, r7, #7
    d3a8:	22ff      	movs	r2, #255	; 0xff
    d3aa:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    d3ac:	1df9      	adds	r1, r7, #7
    d3ae:	4b0d      	ldr	r3, [pc, #52]	; (d3e4 <sd_mmc_spi_start_write_block+0x44>)
    d3b0:	2201      	movs	r2, #1
    d3b2:	0018      	movs	r0, r3
    d3b4:	4b0c      	ldr	r3, [pc, #48]	; (d3e8 <sd_mmc_spi_start_write_block+0x48>)
    d3b6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    d3b8:	4b0c      	ldr	r3, [pc, #48]	; (d3ec <sd_mmc_spi_start_write_block+0x4c>)
    d3ba:	881b      	ldrh	r3, [r3, #0]
    d3bc:	2b01      	cmp	r3, #1
    d3be:	d103      	bne.n	d3c8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    d3c0:	1dbb      	adds	r3, r7, #6
    d3c2:	22fe      	movs	r2, #254	; 0xfe
    d3c4:	701a      	strb	r2, [r3, #0]
    d3c6:	e002      	b.n	d3ce <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    d3c8:	1dbb      	adds	r3, r7, #6
    d3ca:	22fc      	movs	r2, #252	; 0xfc
    d3cc:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    d3ce:	1db9      	adds	r1, r7, #6
    d3d0:	4b04      	ldr	r3, [pc, #16]	; (d3e4 <sd_mmc_spi_start_write_block+0x44>)
    d3d2:	2201      	movs	r2, #1
    d3d4:	0018      	movs	r0, r3
    d3d6:	4b04      	ldr	r3, [pc, #16]	; (d3e8 <sd_mmc_spi_start_write_block+0x48>)
    d3d8:	4798      	blx	r3
}
    d3da:	46c0      	nop			; (mov r8, r8)
    d3dc:	46bd      	mov	sp, r7
    d3de:	b002      	add	sp, #8
    d3e0:	bd80      	pop	{r7, pc}
    d3e2:	46c0      	nop			; (mov r8, r8)
    d3e4:	200042e0 	.word	0x200042e0
    d3e8:	00015d51 	.word	0x00015d51
    d3ec:	2000432e 	.word	0x2000432e

0000d3f0 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    d3f0:	b590      	push	{r4, r7, lr}
    d3f2:	b083      	sub	sp, #12
    d3f4:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    d3f6:	1dbb      	adds	r3, r7, #6
    d3f8:	22ff      	movs	r2, #255	; 0xff
    d3fa:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    d3fc:	1cbb      	adds	r3, r7, #2
    d3fe:	2201      	movs	r2, #1
    d400:	4252      	negs	r2, r2
    d402:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    d404:	1cb9      	adds	r1, r7, #2
    d406:	4b1b      	ldr	r3, [pc, #108]	; (d474 <sd_mmc_spi_stop_write_block+0x84>)
    d408:	2202      	movs	r2, #2
    d40a:	0018      	movs	r0, r3
    d40c:	4b1a      	ldr	r3, [pc, #104]	; (d478 <sd_mmc_spi_stop_write_block+0x88>)
    d40e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    d410:	1dbb      	adds	r3, r7, #6
    d412:	881b      	ldrh	r3, [r3, #0]
    d414:	1d79      	adds	r1, r7, #5
    d416:	4817      	ldr	r0, [pc, #92]	; (d474 <sd_mmc_spi_stop_write_block+0x84>)
    d418:	2201      	movs	r2, #1
    d41a:	4c18      	ldr	r4, [pc, #96]	; (d47c <sd_mmc_spi_stop_write_block+0x8c>)
    d41c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    d41e:	1d7b      	adds	r3, r7, #5
    d420:	781b      	ldrb	r3, [r3, #0]
    d422:	001a      	movs	r2, r3
    d424:	2310      	movs	r3, #16
    d426:	4013      	ands	r3, r2
    d428:	d105      	bne.n	d436 <sd_mmc_spi_stop_write_block+0x46>
    d42a:	1d7b      	adds	r3, r7, #5
    d42c:	781b      	ldrb	r3, [r3, #0]
    d42e:	001a      	movs	r2, r3
    d430:	2301      	movs	r3, #1
    d432:	4013      	ands	r3, r2
    d434:	d104      	bne.n	d440 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    d436:	4b12      	ldr	r3, [pc, #72]	; (d480 <sd_mmc_spi_stop_write_block+0x90>)
    d438:	2201      	movs	r2, #1
    d43a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    d43c:	2300      	movs	r3, #0
    d43e:	e014      	b.n	d46a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    d440:	1d7b      	adds	r3, r7, #5
    d442:	781b      	ldrb	r3, [r3, #0]
    d444:	001a      	movs	r2, r3
    d446:	231e      	movs	r3, #30
    d448:	4013      	ands	r3, r2
    d44a:	2b04      	cmp	r3, #4
    d44c:	d00b      	beq.n	d466 <sd_mmc_spi_stop_write_block+0x76>
    d44e:	2b0a      	cmp	r3, #10
    d450:	d104      	bne.n	d45c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    d452:	4b0b      	ldr	r3, [pc, #44]	; (d480 <sd_mmc_spi_stop_write_block+0x90>)
    d454:	2208      	movs	r2, #8
    d456:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    d458:	2300      	movs	r3, #0
    d45a:	e006      	b.n	d46a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    d45c:	4b08      	ldr	r3, [pc, #32]	; (d480 <sd_mmc_spi_stop_write_block+0x90>)
    d45e:	220a      	movs	r2, #10
    d460:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    d462:	2300      	movs	r3, #0
    d464:	e001      	b.n	d46a <sd_mmc_spi_stop_write_block+0x7a>
		break;
    d466:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    d468:	2301      	movs	r3, #1
}
    d46a:	0018      	movs	r0, r3
    d46c:	46bd      	mov	sp, r7
    d46e:	b003      	add	sp, #12
    d470:	bd90      	pop	{r4, r7, pc}
    d472:	46c0      	nop			; (mov r8, r8)
    d474:	200042e0 	.word	0x200042e0
    d478:	00015d51 	.word	0x00015d51
    d47c:	00015b2d 	.word	0x00015b2d
    d480:	20004323 	.word	0x20004323

0000d484 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    d484:	b590      	push	{r4, r7, lr}
    d486:	b083      	sub	sp, #12
    d488:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    d48a:	4b1d      	ldr	r3, [pc, #116]	; (d500 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    d48c:	881b      	ldrh	r3, [r3, #0]
    d48e:	2b01      	cmp	r3, #1
    d490:	d101      	bne.n	d496 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    d492:	2301      	movs	r3, #1
    d494:	e030      	b.n	d4f8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    d496:	4b1a      	ldr	r3, [pc, #104]	; (d500 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    d498:	881b      	ldrh	r3, [r3, #0]
    d49a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    d49c:	4b19      	ldr	r3, [pc, #100]	; (d504 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    d49e:	681a      	ldr	r2, [r3, #0]
    d4a0:	4b19      	ldr	r3, [pc, #100]	; (d508 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    d4a2:	881b      	ldrh	r3, [r3, #0]
    d4a4:	0019      	movs	r1, r3
    d4a6:	4b19      	ldr	r3, [pc, #100]	; (d50c <sd_mmc_spi_stop_multiwrite_block+0x88>)
    d4a8:	0010      	movs	r0, r2
    d4aa:	4798      	blx	r3
    d4ac:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    d4ae:	429c      	cmp	r4, r3
    d4b0:	d901      	bls.n	d4b6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    d4b2:	2301      	movs	r3, #1
    d4b4:	e020      	b.n	d4f8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    d4b6:	1dfb      	adds	r3, r7, #7
    d4b8:	22ff      	movs	r2, #255	; 0xff
    d4ba:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    d4bc:	1df9      	adds	r1, r7, #7
    d4be:	4b14      	ldr	r3, [pc, #80]	; (d510 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    d4c0:	2201      	movs	r2, #1
    d4c2:	0018      	movs	r0, r3
    d4c4:	4b13      	ldr	r3, [pc, #76]	; (d514 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    d4c6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    d4c8:	1dfb      	adds	r3, r7, #7
    d4ca:	22fd      	movs	r2, #253	; 0xfd
    d4cc:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    d4ce:	1df9      	adds	r1, r7, #7
    d4d0:	4b0f      	ldr	r3, [pc, #60]	; (d510 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    d4d2:	2201      	movs	r2, #1
    d4d4:	0018      	movs	r0, r3
    d4d6:	4b0f      	ldr	r3, [pc, #60]	; (d514 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    d4d8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    d4da:	4b0f      	ldr	r3, [pc, #60]	; (d518 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    d4dc:	4798      	blx	r3
    d4de:	0003      	movs	r3, r0
    d4e0:	001a      	movs	r2, r3
    d4e2:	2301      	movs	r3, #1
    d4e4:	4053      	eors	r3, r2
    d4e6:	b2db      	uxtb	r3, r3
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	d004      	beq.n	d4f6 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    d4ec:	4b0b      	ldr	r3, [pc, #44]	; (d51c <sd_mmc_spi_stop_multiwrite_block+0x98>)
    d4ee:	2205      	movs	r2, #5
    d4f0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    d4f2:	2300      	movs	r3, #0
    d4f4:	e000      	b.n	d4f8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    d4f6:	2301      	movs	r3, #1
}
    d4f8:	0018      	movs	r0, r3
    d4fa:	46bd      	mov	sp, r7
    d4fc:	b003      	add	sp, #12
    d4fe:	bd90      	pop	{r4, r7, pc}
    d500:	2000432e 	.word	0x2000432e
    d504:	20004328 	.word	0x20004328
    d508:	2000432c 	.word	0x2000432c
    d50c:	00020471 	.word	0x00020471
    d510:	200042e0 	.word	0x200042e0
    d514:	00015d51 	.word	0x00015d51
    d518:	0000d285 	.word	0x0000d285
    d51c:	20004323 	.word	0x20004323

0000d520 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    d520:	b580      	push	{r7, lr}
    d522:	b090      	sub	sp, #64	; 0x40
    d524:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    d526:	4b1f      	ldr	r3, [pc, #124]	; (d5a4 <sd_mmc_spi_init+0x84>)
    d528:	2200      	movs	r2, #0
    d52a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    d52c:	233c      	movs	r3, #60	; 0x3c
    d52e:	18fb      	adds	r3, r7, r3
    d530:	0018      	movs	r0, r3
    d532:	4b1d      	ldr	r3, [pc, #116]	; (d5a8 <sd_mmc_spi_init+0x88>)
    d534:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    d536:	1d3b      	adds	r3, r7, #4
    d538:	0018      	movs	r0, r3
    d53a:	4b1c      	ldr	r3, [pc, #112]	; (d5ac <sd_mmc_spi_init+0x8c>)
    d53c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    d53e:	1d3b      	adds	r3, r7, #4
    d540:	2280      	movs	r2, #128	; 0x80
    d542:	0252      	lsls	r2, r2, #9
    d544:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    d546:	1d3b      	adds	r3, r7, #4
    d548:	4a19      	ldr	r2, [pc, #100]	; (d5b0 <sd_mmc_spi_init+0x90>)
    d54a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    d54c:	1d3b      	adds	r3, r7, #4
    d54e:	4a19      	ldr	r2, [pc, #100]	; (d5b4 <sd_mmc_spi_init+0x94>)
    d550:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    d552:	1d3b      	adds	r3, r7, #4
    d554:	4a18      	ldr	r2, [pc, #96]	; (d5b8 <sd_mmc_spi_init+0x98>)
    d556:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    d558:	1d3b      	adds	r3, r7, #4
    d55a:	4a18      	ldr	r2, [pc, #96]	; (d5bc <sd_mmc_spi_init+0x9c>)
    d55c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    d55e:	1d3b      	adds	r3, r7, #4
    d560:	2224      	movs	r2, #36	; 0x24
    d562:	2100      	movs	r1, #0
    d564:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    d566:	1d3b      	adds	r3, r7, #4
    d568:	4a15      	ldr	r2, [pc, #84]	; (d5c0 <sd_mmc_spi_init+0xa0>)
    d56a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    d56c:	1d3a      	adds	r2, r7, #4
    d56e:	4915      	ldr	r1, [pc, #84]	; (d5c4 <sd_mmc_spi_init+0xa4>)
    d570:	4b15      	ldr	r3, [pc, #84]	; (d5c8 <sd_mmc_spi_init+0xa8>)
    d572:	0018      	movs	r0, r3
    d574:	4b15      	ldr	r3, [pc, #84]	; (d5cc <sd_mmc_spi_init+0xac>)
    d576:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    d578:	4b13      	ldr	r3, [pc, #76]	; (d5c8 <sd_mmc_spi_init+0xa8>)
    d57a:	0018      	movs	r0, r3
    d57c:	4b14      	ldr	r3, [pc, #80]	; (d5d0 <sd_mmc_spi_init+0xb0>)
    d57e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    d580:	4b14      	ldr	r3, [pc, #80]	; (d5d4 <sd_mmc_spi_init+0xb4>)
    d582:	0018      	movs	r0, r3
    d584:	4b14      	ldr	r3, [pc, #80]	; (d5d8 <sd_mmc_spi_init+0xb8>)
    d586:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    d588:	4b14      	ldr	r3, [pc, #80]	; (d5dc <sd_mmc_spi_init+0xbc>)
    d58a:	781a      	ldrb	r2, [r3, #0]
    d58c:	4b11      	ldr	r3, [pc, #68]	; (d5d4 <sd_mmc_spi_init+0xb4>)
    d58e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    d590:	4a10      	ldr	r2, [pc, #64]	; (d5d4 <sd_mmc_spi_init+0xb4>)
    d592:	4b13      	ldr	r3, [pc, #76]	; (d5e0 <sd_mmc_spi_init+0xc0>)
    d594:	0011      	movs	r1, r2
    d596:	0018      	movs	r0, r3
    d598:	4b12      	ldr	r3, [pc, #72]	; (d5e4 <sd_mmc_spi_init+0xc4>)
    d59a:	4798      	blx	r3
}
    d59c:	46c0      	nop			; (mov r8, r8)
    d59e:	46bd      	mov	sp, r7
    d5a0:	b010      	add	sp, #64	; 0x40
    d5a2:	bd80      	pop	{r7, pc}
    d5a4:	20004323 	.word	0x20004323
    d5a8:	0000cfd5 	.word	0x0000cfd5
    d5ac:	0000d06d 	.word	0x0000d06d
    d5b0:	00100002 	.word	0x00100002
    d5b4:	00110002 	.word	0x00110002
    d5b8:	00120002 	.word	0x00120002
    d5bc:	00130002 	.word	0x00130002
    d5c0:	00061a80 	.word	0x00061a80
    d5c4:	42000c00 	.word	0x42000c00
    d5c8:	200042e0 	.word	0x200042e0
    d5cc:	0001599d 	.word	0x0001599d
    d5d0:	0000d179 	.word	0x0000d179
    d5d4:	20004320 	.word	0x20004320
    d5d8:	0000d0f1 	.word	0x0000d0f1
    d5dc:	20000118 	.word	0x20000118
    d5e0:	2000431c 	.word	0x2000431c
    d5e4:	0000d115 	.word	0x0000d115

0000d5e8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    d5e8:	b590      	push	{r4, r7, lr}
    d5ea:	b083      	sub	sp, #12
    d5ec:	af00      	add	r7, sp, #0
    d5ee:	0004      	movs	r4, r0
    d5f0:	6039      	str	r1, [r7, #0]
    d5f2:	0010      	movs	r0, r2
    d5f4:	0019      	movs	r1, r3
    d5f6:	1dfb      	adds	r3, r7, #7
    d5f8:	1c22      	adds	r2, r4, #0
    d5fa:	701a      	strb	r2, [r3, #0]
    d5fc:	1dbb      	adds	r3, r7, #6
    d5fe:	1c02      	adds	r2, r0, #0
    d600:	701a      	strb	r2, [r3, #0]
    d602:	1d7b      	adds	r3, r7, #5
    d604:	1c0a      	adds	r2, r1, #0
    d606:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    d608:	4b13      	ldr	r3, [pc, #76]	; (d658 <sd_mmc_spi_select_device+0x70>)
    d60a:	2200      	movs	r2, #0
    d60c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    d60e:	683b      	ldr	r3, [r7, #0]
    d610:	4a12      	ldr	r2, [pc, #72]	; (d65c <sd_mmc_spi_select_device+0x74>)
    d612:	4293      	cmp	r3, r2
    d614:	d907      	bls.n	d626 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    d616:	4b11      	ldr	r3, [pc, #68]	; (d65c <sd_mmc_spi_select_device+0x74>)
    d618:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    d61a:	e004      	b.n	d626 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    d61c:	683b      	ldr	r3, [r7, #0]
    d61e:	08db      	lsrs	r3, r3, #3
    d620:	683a      	ldr	r2, [r7, #0]
    d622:	1ad3      	subs	r3, r2, r3
    d624:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    d626:	683a      	ldr	r2, [r7, #0]
    d628:	4b0d      	ldr	r3, [pc, #52]	; (d660 <sd_mmc_spi_select_device+0x78>)
    d62a:	0011      	movs	r1, r2
    d62c:	0018      	movs	r0, r3
    d62e:	4b0d      	ldr	r3, [pc, #52]	; (d664 <sd_mmc_spi_select_device+0x7c>)
    d630:	4798      	blx	r3
    d632:	0003      	movs	r3, r0
    d634:	2b17      	cmp	r3, #23
    d636:	d0f1      	beq.n	d61c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    d638:	1dfb      	adds	r3, r7, #7
    d63a:	781a      	ldrb	r2, [r3, #0]
    d63c:	0013      	movs	r3, r2
    d63e:	005b      	lsls	r3, r3, #1
    d640:	189b      	adds	r3, r3, r2
    d642:	4a09      	ldr	r2, [pc, #36]	; (d668 <sd_mmc_spi_select_device+0x80>)
    d644:	1899      	adds	r1, r3, r2
    d646:	4b06      	ldr	r3, [pc, #24]	; (d660 <sd_mmc_spi_select_device+0x78>)
    d648:	2201      	movs	r2, #1
    d64a:	0018      	movs	r0, r3
    d64c:	4b07      	ldr	r3, [pc, #28]	; (d66c <sd_mmc_spi_select_device+0x84>)
    d64e:	4798      	blx	r3
}
    d650:	46c0      	nop			; (mov r8, r8)
    d652:	46bd      	mov	sp, r7
    d654:	b003      	add	sp, #12
    d656:	bd90      	pop	{r4, r7, pc}
    d658:	20004323 	.word	0x20004323
    d65c:	00989680 	.word	0x00989680
    d660:	200042e0 	.word	0x200042e0
    d664:	000156c5 	.word	0x000156c5
    d668:	2000431c 	.word	0x2000431c
    d66c:	00015c61 	.word	0x00015c61

0000d670 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    d670:	b580      	push	{r7, lr}
    d672:	b082      	sub	sp, #8
    d674:	af00      	add	r7, sp, #0
    d676:	0002      	movs	r2, r0
    d678:	1dfb      	adds	r3, r7, #7
    d67a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    d67c:	4b09      	ldr	r3, [pc, #36]	; (d6a4 <sd_mmc_spi_deselect_device+0x34>)
    d67e:	2200      	movs	r2, #0
    d680:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    d682:	1dfb      	adds	r3, r7, #7
    d684:	781a      	ldrb	r2, [r3, #0]
    d686:	0013      	movs	r3, r2
    d688:	005b      	lsls	r3, r3, #1
    d68a:	189b      	adds	r3, r3, r2
    d68c:	4a06      	ldr	r2, [pc, #24]	; (d6a8 <sd_mmc_spi_deselect_device+0x38>)
    d68e:	1899      	adds	r1, r3, r2
    d690:	4b06      	ldr	r3, [pc, #24]	; (d6ac <sd_mmc_spi_deselect_device+0x3c>)
    d692:	2200      	movs	r2, #0
    d694:	0018      	movs	r0, r3
    d696:	4b06      	ldr	r3, [pc, #24]	; (d6b0 <sd_mmc_spi_deselect_device+0x40>)
    d698:	4798      	blx	r3
}
    d69a:	46c0      	nop			; (mov r8, r8)
    d69c:	46bd      	mov	sp, r7
    d69e:	b002      	add	sp, #8
    d6a0:	bd80      	pop	{r7, pc}
    d6a2:	46c0      	nop			; (mov r8, r8)
    d6a4:	20004323 	.word	0x20004323
    d6a8:	2000431c 	.word	0x2000431c
    d6ac:	200042e0 	.word	0x200042e0
    d6b0:	00015c61 	.word	0x00015c61

0000d6b4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    d6b4:	b580      	push	{r7, lr}
    d6b6:	b082      	sub	sp, #8
    d6b8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    d6ba:	1dbb      	adds	r3, r7, #6
    d6bc:	22ff      	movs	r2, #255	; 0xff
    d6be:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    d6c0:	4b0c      	ldr	r3, [pc, #48]	; (d6f4 <sd_mmc_spi_send_clock+0x40>)
    d6c2:	2200      	movs	r2, #0
    d6c4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    d6c6:	1dfb      	adds	r3, r7, #7
    d6c8:	2200      	movs	r2, #0
    d6ca:	701a      	strb	r2, [r3, #0]
    d6cc:	e00a      	b.n	d6e4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    d6ce:	1db9      	adds	r1, r7, #6
    d6d0:	4b09      	ldr	r3, [pc, #36]	; (d6f8 <sd_mmc_spi_send_clock+0x44>)
    d6d2:	2201      	movs	r2, #1
    d6d4:	0018      	movs	r0, r3
    d6d6:	4b09      	ldr	r3, [pc, #36]	; (d6fc <sd_mmc_spi_send_clock+0x48>)
    d6d8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    d6da:	1dfb      	adds	r3, r7, #7
    d6dc:	781a      	ldrb	r2, [r3, #0]
    d6de:	1dfb      	adds	r3, r7, #7
    d6e0:	3201      	adds	r2, #1
    d6e2:	701a      	strb	r2, [r3, #0]
    d6e4:	1dfb      	adds	r3, r7, #7
    d6e6:	781b      	ldrb	r3, [r3, #0]
    d6e8:	2b09      	cmp	r3, #9
    d6ea:	d9f0      	bls.n	d6ce <sd_mmc_spi_send_clock+0x1a>
	}
}
    d6ec:	46c0      	nop			; (mov r8, r8)
    d6ee:	46bd      	mov	sp, r7
    d6f0:	b002      	add	sp, #8
    d6f2:	bd80      	pop	{r7, pc}
    d6f4:	20004323 	.word	0x20004323
    d6f8:	200042e0 	.word	0x200042e0
    d6fc:	00015d51 	.word	0x00015d51

0000d700 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    d700:	b590      	push	{r4, r7, lr}
    d702:	b085      	sub	sp, #20
    d704:	af02      	add	r7, sp, #8
    d706:	6078      	str	r0, [r7, #4]
    d708:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    d70a:	6839      	ldr	r1, [r7, #0]
    d70c:	6878      	ldr	r0, [r7, #4]
    d70e:	2300      	movs	r3, #0
    d710:	9300      	str	r3, [sp, #0]
    d712:	2300      	movs	r3, #0
    d714:	2200      	movs	r2, #0
    d716:	4c03      	ldr	r4, [pc, #12]	; (d724 <sd_mmc_spi_send_cmd+0x24>)
    d718:	47a0      	blx	r4
    d71a:	0003      	movs	r3, r0
}
    d71c:	0018      	movs	r0, r3
    d71e:	46bd      	mov	sp, r7
    d720:	b003      	add	sp, #12
    d722:	bd90      	pop	{r4, r7, pc}
    d724:	0000d729 	.word	0x0000d729

0000d728 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    d728:	b590      	push	{r4, r7, lr}
    d72a:	b089      	sub	sp, #36	; 0x24
    d72c:	af00      	add	r7, sp, #0
    d72e:	60f8      	str	r0, [r7, #12]
    d730:	60b9      	str	r1, [r7, #8]
    d732:	0019      	movs	r1, r3
    d734:	1dbb      	adds	r3, r7, #6
    d736:	801a      	strh	r2, [r3, #0]
    d738:	1d3b      	adds	r3, r7, #4
    d73a:	1c0a      	adds	r2, r1, #0
    d73c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    d73e:	231b      	movs	r3, #27
    d740:	18fb      	adds	r3, r7, r3
    d742:	22ff      	movs	r2, #255	; 0xff
    d744:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    d746:	231c      	movs	r3, #28
    d748:	18fb      	adds	r3, r7, r3
    d74a:	22ff      	movs	r2, #255	; 0xff
    d74c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    d74e:	4b72      	ldr	r3, [pc, #456]	; (d918 <sd_mmc_spi_adtc_start+0x1f0>)
    d750:	2200      	movs	r2, #0
    d752:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    d754:	68fb      	ldr	r3, [r7, #12]
    d756:	b2db      	uxtb	r3, r3
    d758:	223f      	movs	r2, #63	; 0x3f
    d75a:	4013      	ands	r3, r2
    d75c:	b2db      	uxtb	r3, r3
    d75e:	2240      	movs	r2, #64	; 0x40
    d760:	4313      	orrs	r3, r2
    d762:	b2da      	uxtb	r2, r3
    d764:	2314      	movs	r3, #20
    d766:	18fb      	adds	r3, r7, r3
    d768:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    d76a:	68bb      	ldr	r3, [r7, #8]
    d76c:	0e1b      	lsrs	r3, r3, #24
    d76e:	b2da      	uxtb	r2, r3
    d770:	2314      	movs	r3, #20
    d772:	18fb      	adds	r3, r7, r3
    d774:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    d776:	68bb      	ldr	r3, [r7, #8]
    d778:	0c1b      	lsrs	r3, r3, #16
    d77a:	b2da      	uxtb	r2, r3
    d77c:	2314      	movs	r3, #20
    d77e:	18fb      	adds	r3, r7, r3
    d780:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    d782:	68bb      	ldr	r3, [r7, #8]
    d784:	0a1b      	lsrs	r3, r3, #8
    d786:	b2da      	uxtb	r2, r3
    d788:	2314      	movs	r3, #20
    d78a:	18fb      	adds	r3, r7, r3
    d78c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    d78e:	68bb      	ldr	r3, [r7, #8]
    d790:	b2da      	uxtb	r2, r3
    d792:	2314      	movs	r3, #20
    d794:	18fb      	adds	r3, r7, r3
    d796:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    d798:	2314      	movs	r3, #20
    d79a:	18fb      	adds	r3, r7, r3
    d79c:	2105      	movs	r1, #5
    d79e:	0018      	movs	r0, r3
    d7a0:	4b5e      	ldr	r3, [pc, #376]	; (d91c <sd_mmc_spi_adtc_start+0x1f4>)
    d7a2:	4798      	blx	r3
    d7a4:	0003      	movs	r3, r0
    d7a6:	001a      	movs	r2, r3
    d7a8:	2314      	movs	r3, #20
    d7aa:	18fb      	adds	r3, r7, r3
    d7ac:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    d7ae:	231b      	movs	r3, #27
    d7b0:	18f9      	adds	r1, r7, r3
    d7b2:	4b5b      	ldr	r3, [pc, #364]	; (d920 <sd_mmc_spi_adtc_start+0x1f8>)
    d7b4:	2201      	movs	r2, #1
    d7b6:	0018      	movs	r0, r3
    d7b8:	4b5a      	ldr	r3, [pc, #360]	; (d924 <sd_mmc_spi_adtc_start+0x1fc>)
    d7ba:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    d7bc:	2314      	movs	r3, #20
    d7be:	18f9      	adds	r1, r7, r3
    d7c0:	4b57      	ldr	r3, [pc, #348]	; (d920 <sd_mmc_spi_adtc_start+0x1f8>)
    d7c2:	2206      	movs	r2, #6
    d7c4:	0018      	movs	r0, r3
    d7c6:	4b57      	ldr	r3, [pc, #348]	; (d924 <sd_mmc_spi_adtc_start+0x1fc>)
    d7c8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    d7ca:	2313      	movs	r3, #19
    d7cc:	18fb      	adds	r3, r7, r3
    d7ce:	22ff      	movs	r2, #255	; 0xff
    d7d0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    d7d2:	231c      	movs	r3, #28
    d7d4:	18fb      	adds	r3, r7, r3
    d7d6:	881b      	ldrh	r3, [r3, #0]
    d7d8:	2213      	movs	r2, #19
    d7da:	18b9      	adds	r1, r7, r2
    d7dc:	4850      	ldr	r0, [pc, #320]	; (d920 <sd_mmc_spi_adtc_start+0x1f8>)
    d7de:	2201      	movs	r2, #1
    d7e0:	4c51      	ldr	r4, [pc, #324]	; (d928 <sd_mmc_spi_adtc_start+0x200>)
    d7e2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    d7e4:	231f      	movs	r3, #31
    d7e6:	18fb      	adds	r3, r7, r3
    d7e8:	2207      	movs	r2, #7
    d7ea:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    d7ec:	231c      	movs	r3, #28
    d7ee:	18fb      	adds	r3, r7, r3
    d7f0:	881b      	ldrh	r3, [r3, #0]
    d7f2:	2213      	movs	r2, #19
    d7f4:	18b9      	adds	r1, r7, r2
    d7f6:	484a      	ldr	r0, [pc, #296]	; (d920 <sd_mmc_spi_adtc_start+0x1f8>)
    d7f8:	2201      	movs	r2, #1
    d7fa:	4c4b      	ldr	r4, [pc, #300]	; (d928 <sd_mmc_spi_adtc_start+0x200>)
    d7fc:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    d7fe:	2313      	movs	r3, #19
    d800:	18fb      	adds	r3, r7, r3
    d802:	781b      	ldrb	r3, [r3, #0]
    d804:	b25b      	sxtb	r3, r3
    d806:	2b00      	cmp	r3, #0
    d808:	da10      	bge.n	d82c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    d80a:	231f      	movs	r3, #31
    d80c:	18fb      	adds	r3, r7, r3
    d80e:	221f      	movs	r2, #31
    d810:	18ba      	adds	r2, r7, r2
    d812:	7812      	ldrb	r2, [r2, #0]
    d814:	3a01      	subs	r2, #1
    d816:	701a      	strb	r2, [r3, #0]
    d818:	231f      	movs	r3, #31
    d81a:	18fb      	adds	r3, r7, r3
    d81c:	781b      	ldrb	r3, [r3, #0]
    d81e:	2b00      	cmp	r3, #0
    d820:	d1e4      	bne.n	d7ec <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    d822:	4b3d      	ldr	r3, [pc, #244]	; (d918 <sd_mmc_spi_adtc_start+0x1f0>)
    d824:	2202      	movs	r2, #2
    d826:	701a      	strb	r2, [r3, #0]
			return false;
    d828:	2300      	movs	r3, #0
    d82a:	e070      	b.n	d90e <sd_mmc_spi_adtc_start+0x1e6>
			break;
    d82c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    d82e:	2313      	movs	r3, #19
    d830:	18fb      	adds	r3, r7, r3
    d832:	781b      	ldrb	r3, [r3, #0]
    d834:	001a      	movs	r2, r3
    d836:	4b3d      	ldr	r3, [pc, #244]	; (d92c <sd_mmc_spi_adtc_start+0x204>)
    d838:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    d83a:	2313      	movs	r3, #19
    d83c:	18fb      	adds	r3, r7, r3
    d83e:	781b      	ldrb	r3, [r3, #0]
    d840:	001a      	movs	r2, r3
    d842:	2308      	movs	r3, #8
    d844:	4013      	ands	r3, r2
    d846:	d004      	beq.n	d852 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    d848:	4b33      	ldr	r3, [pc, #204]	; (d918 <sd_mmc_spi_adtc_start+0x1f0>)
    d84a:	2206      	movs	r2, #6
    d84c:	701a      	strb	r2, [r3, #0]
		return false;
    d84e:	2300      	movs	r3, #0
    d850:	e05d      	b.n	d90e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    d852:	2313      	movs	r3, #19
    d854:	18fb      	adds	r3, r7, r3
    d856:	781b      	ldrb	r3, [r3, #0]
    d858:	001a      	movs	r2, r3
    d85a:	2304      	movs	r3, #4
    d85c:	4013      	ands	r3, r2
    d85e:	d004      	beq.n	d86a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    d860:	4b2d      	ldr	r3, [pc, #180]	; (d918 <sd_mmc_spi_adtc_start+0x1f0>)
    d862:	2209      	movs	r2, #9
    d864:	701a      	strb	r2, [r3, #0]
		return false;
    d866:	2300      	movs	r3, #0
    d868:	e051      	b.n	d90e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    d86a:	2313      	movs	r3, #19
    d86c:	18fb      	adds	r3, r7, r3
    d86e:	781b      	ldrb	r3, [r3, #0]
    d870:	001a      	movs	r2, r3
    d872:	2301      	movs	r3, #1
    d874:	439a      	bics	r2, r3
    d876:	1e13      	subs	r3, r2, #0
    d878:	d004      	beq.n	d884 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    d87a:	4b27      	ldr	r3, [pc, #156]	; (d918 <sd_mmc_spi_adtc_start+0x1f0>)
    d87c:	2201      	movs	r2, #1
    d87e:	701a      	strb	r2, [r3, #0]
		return false;
    d880:	2300      	movs	r3, #0
    d882:	e044      	b.n	d90e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    d884:	68fa      	ldr	r2, [r7, #12]
    d886:	2380      	movs	r3, #128	; 0x80
    d888:	019b      	lsls	r3, r3, #6
    d88a:	4013      	ands	r3, r2
    d88c:	d00d      	beq.n	d8aa <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    d88e:	4b28      	ldr	r3, [pc, #160]	; (d930 <sd_mmc_spi_adtc_start+0x208>)
    d890:	4798      	blx	r3
    d892:	0003      	movs	r3, r0
    d894:	001a      	movs	r2, r3
    d896:	2301      	movs	r3, #1
    d898:	4053      	eors	r3, r2
    d89a:	b2db      	uxtb	r3, r3
    d89c:	2b00      	cmp	r3, #0
    d89e:	d004      	beq.n	d8aa <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    d8a0:	4b1d      	ldr	r3, [pc, #116]	; (d918 <sd_mmc_spi_adtc_start+0x1f0>)
    d8a2:	2203      	movs	r2, #3
    d8a4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    d8a6:	2300      	movs	r3, #0
    d8a8:	e031      	b.n	d90e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    d8aa:	68fa      	ldr	r2, [r7, #12]
    d8ac:	2380      	movs	r3, #128	; 0x80
    d8ae:	009b      	lsls	r3, r3, #2
    d8b0:	4013      	ands	r3, r2
    d8b2:	d00e      	beq.n	d8d2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    d8b4:	4b1d      	ldr	r3, [pc, #116]	; (d92c <sd_mmc_spi_adtc_start+0x204>)
    d8b6:	2200      	movs	r2, #0
    d8b8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    d8ba:	231c      	movs	r3, #28
    d8bc:	18fb      	adds	r3, r7, r3
    d8be:	881b      	ldrh	r3, [r3, #0]
    d8c0:	491a      	ldr	r1, [pc, #104]	; (d92c <sd_mmc_spi_adtc_start+0x204>)
    d8c2:	4817      	ldr	r0, [pc, #92]	; (d920 <sd_mmc_spi_adtc_start+0x1f8>)
    d8c4:	2201      	movs	r2, #1
    d8c6:	4c18      	ldr	r4, [pc, #96]	; (d928 <sd_mmc_spi_adtc_start+0x200>)
    d8c8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    d8ca:	4b18      	ldr	r3, [pc, #96]	; (d92c <sd_mmc_spi_adtc_start+0x204>)
    d8cc:	681a      	ldr	r2, [r3, #0]
    d8ce:	4b17      	ldr	r3, [pc, #92]	; (d92c <sd_mmc_spi_adtc_start+0x204>)
    d8d0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    d8d2:	68fa      	ldr	r2, [r7, #12]
    d8d4:	2380      	movs	r3, #128	; 0x80
    d8d6:	00db      	lsls	r3, r3, #3
    d8d8:	4013      	ands	r3, r2
    d8da:	d00c      	beq.n	d8f6 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    d8dc:	231c      	movs	r3, #28
    d8de:	18fb      	adds	r3, r7, r3
    d8e0:	881b      	ldrh	r3, [r3, #0]
    d8e2:	4912      	ldr	r1, [pc, #72]	; (d92c <sd_mmc_spi_adtc_start+0x204>)
    d8e4:	480e      	ldr	r0, [pc, #56]	; (d920 <sd_mmc_spi_adtc_start+0x1f8>)
    d8e6:	2204      	movs	r2, #4
    d8e8:	4c0f      	ldr	r4, [pc, #60]	; (d928 <sd_mmc_spi_adtc_start+0x200>)
    d8ea:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    d8ec:	4b0f      	ldr	r3, [pc, #60]	; (d92c <sd_mmc_spi_adtc_start+0x204>)
    d8ee:	681b      	ldr	r3, [r3, #0]
    d8f0:	ba1a      	rev	r2, r3
    d8f2:	4b0e      	ldr	r3, [pc, #56]	; (d92c <sd_mmc_spi_adtc_start+0x204>)
    d8f4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    d8f6:	4b0f      	ldr	r3, [pc, #60]	; (d934 <sd_mmc_spi_adtc_start+0x20c>)
    d8f8:	1dba      	adds	r2, r7, #6
    d8fa:	8812      	ldrh	r2, [r2, #0]
    d8fc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    d8fe:	4b0e      	ldr	r3, [pc, #56]	; (d938 <sd_mmc_spi_adtc_start+0x210>)
    d900:	1d3a      	adds	r2, r7, #4
    d902:	8812      	ldrh	r2, [r2, #0]
    d904:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    d906:	4b0d      	ldr	r3, [pc, #52]	; (d93c <sd_mmc_spi_adtc_start+0x214>)
    d908:	2200      	movs	r2, #0
    d90a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    d90c:	2301      	movs	r3, #1
}
    d90e:	0018      	movs	r0, r3
    d910:	46bd      	mov	sp, r7
    d912:	b009      	add	sp, #36	; 0x24
    d914:	bd90      	pop	{r4, r7, pc}
    d916:	46c0      	nop			; (mov r8, r8)
    d918:	20004323 	.word	0x20004323
    d91c:	0000d1c9 	.word	0x0000d1c9
    d920:	200042e0 	.word	0x200042e0
    d924:	00015d51 	.word	0x00015d51
    d928:	00015b2d 	.word	0x00015b2d
    d92c:	20004324 	.word	0x20004324
    d930:	0000d285 	.word	0x0000d285
    d934:	2000432c 	.word	0x2000432c
    d938:	2000432e 	.word	0x2000432e
    d93c:	20004328 	.word	0x20004328

0000d940 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    d940:	b580      	push	{r7, lr}
    d942:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    d944:	4b02      	ldr	r3, [pc, #8]	; (d950 <sd_mmc_spi_get_response+0x10>)
    d946:	681b      	ldr	r3, [r3, #0]
}
    d948:	0018      	movs	r0, r3
    d94a:	46bd      	mov	sp, r7
    d94c:	bd80      	pop	{r7, pc}
    d94e:	46c0      	nop			; (mov r8, r8)
    d950:	20004324 	.word	0x20004324

0000d954 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    d954:	b590      	push	{r4, r7, lr}
    d956:	b085      	sub	sp, #20
    d958:	af00      	add	r7, sp, #0
    d95a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    d95c:	230e      	movs	r3, #14
    d95e:	18fb      	adds	r3, r7, r3
    d960:	22ff      	movs	r2, #255	; 0xff
    d962:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    d964:	4b1c      	ldr	r3, [pc, #112]	; (d9d8 <sd_mmc_spi_read_word+0x84>)
    d966:	2200      	movs	r2, #0
    d968:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    d96a:	4b1c      	ldr	r3, [pc, #112]	; (d9dc <sd_mmc_spi_read_word+0x88>)
    d96c:	681a      	ldr	r2, [r3, #0]
    d96e:	4b1c      	ldr	r3, [pc, #112]	; (d9e0 <sd_mmc_spi_read_word+0x8c>)
    d970:	881b      	ldrh	r3, [r3, #0]
    d972:	0019      	movs	r1, r3
    d974:	4b1b      	ldr	r3, [pc, #108]	; (d9e4 <sd_mmc_spi_read_word+0x90>)
    d976:	0010      	movs	r0, r2
    d978:	4798      	blx	r3
    d97a:	1e0b      	subs	r3, r1, #0
    d97c:	d10a      	bne.n	d994 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    d97e:	4b1a      	ldr	r3, [pc, #104]	; (d9e8 <sd_mmc_spi_read_word+0x94>)
    d980:	4798      	blx	r3
    d982:	0003      	movs	r3, r0
    d984:	001a      	movs	r2, r3
    d986:	2301      	movs	r3, #1
    d988:	4053      	eors	r3, r2
    d98a:	b2db      	uxtb	r3, r3
    d98c:	2b00      	cmp	r3, #0
    d98e:	d001      	beq.n	d994 <sd_mmc_spi_read_word+0x40>
			return false;
    d990:	2300      	movs	r3, #0
    d992:	e01d      	b.n	d9d0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    d994:	230e      	movs	r3, #14
    d996:	18fb      	adds	r3, r7, r3
    d998:	881b      	ldrh	r3, [r3, #0]
    d99a:	1d39      	adds	r1, r7, #4
    d99c:	4813      	ldr	r0, [pc, #76]	; (d9ec <sd_mmc_spi_read_word+0x98>)
    d99e:	2204      	movs	r2, #4
    d9a0:	4c13      	ldr	r4, [pc, #76]	; (d9f0 <sd_mmc_spi_read_word+0x9c>)
    d9a2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    d9a4:	687b      	ldr	r3, [r7, #4]
    d9a6:	687a      	ldr	r2, [r7, #4]
    d9a8:	6812      	ldr	r2, [r2, #0]
    d9aa:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    d9ac:	4b0b      	ldr	r3, [pc, #44]	; (d9dc <sd_mmc_spi_read_word+0x88>)
    d9ae:	681b      	ldr	r3, [r3, #0]
    d9b0:	1d1a      	adds	r2, r3, #4
    d9b2:	4b0a      	ldr	r3, [pc, #40]	; (d9dc <sd_mmc_spi_read_word+0x88>)
    d9b4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    d9b6:	4b09      	ldr	r3, [pc, #36]	; (d9dc <sd_mmc_spi_read_word+0x88>)
    d9b8:	681a      	ldr	r2, [r3, #0]
    d9ba:	4b09      	ldr	r3, [pc, #36]	; (d9e0 <sd_mmc_spi_read_word+0x8c>)
    d9bc:	881b      	ldrh	r3, [r3, #0]
    d9be:	0019      	movs	r1, r3
    d9c0:	4b08      	ldr	r3, [pc, #32]	; (d9e4 <sd_mmc_spi_read_word+0x90>)
    d9c2:	0010      	movs	r0, r2
    d9c4:	4798      	blx	r3
    d9c6:	1e0b      	subs	r3, r1, #0
    d9c8:	d101      	bne.n	d9ce <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    d9ca:	4b0a      	ldr	r3, [pc, #40]	; (d9f4 <sd_mmc_spi_read_word+0xa0>)
    d9cc:	4798      	blx	r3
	}
	return true;
    d9ce:	2301      	movs	r3, #1
}
    d9d0:	0018      	movs	r0, r3
    d9d2:	46bd      	mov	sp, r7
    d9d4:	b005      	add	sp, #20
    d9d6:	bd90      	pop	{r4, r7, pc}
    d9d8:	20004323 	.word	0x20004323
    d9dc:	20004328 	.word	0x20004328
    d9e0:	2000432c 	.word	0x2000432c
    d9e4:	0002057d 	.word	0x0002057d
    d9e8:	0000d2f1 	.word	0x0000d2f1
    d9ec:	200042e0 	.word	0x200042e0
    d9f0:	00015b2d 	.word	0x00015b2d
    d9f4:	0000d375 	.word	0x0000d375

0000d9f8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    d9f8:	b590      	push	{r4, r7, lr}
    d9fa:	b085      	sub	sp, #20
    d9fc:	af00      	add	r7, sp, #0
    d9fe:	6078      	str	r0, [r7, #4]
    da00:	000a      	movs	r2, r1
    da02:	1cbb      	adds	r3, r7, #2
    da04:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    da06:	230a      	movs	r3, #10
    da08:	18fb      	adds	r3, r7, r3
    da0a:	22ff      	movs	r2, #255	; 0xff
    da0c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    da0e:	4b1c      	ldr	r3, [pc, #112]	; (da80 <sd_mmc_spi_start_read_blocks+0x88>)
    da10:	2200      	movs	r2, #0
    da12:	701a      	strb	r2, [r3, #0]
	pos = 0;
    da14:	2300      	movs	r3, #0
    da16:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    da18:	e025      	b.n	da66 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    da1a:	4b1a      	ldr	r3, [pc, #104]	; (da84 <sd_mmc_spi_start_read_blocks+0x8c>)
    da1c:	4798      	blx	r3
    da1e:	0003      	movs	r3, r0
    da20:	001a      	movs	r2, r3
    da22:	2301      	movs	r3, #1
    da24:	4053      	eors	r3, r2
    da26:	b2db      	uxtb	r3, r3
    da28:	2b00      	cmp	r3, #0
    da2a:	d001      	beq.n	da30 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    da2c:	2300      	movs	r3, #0
    da2e:	e022      	b.n	da76 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    da30:	687a      	ldr	r2, [r7, #4]
    da32:	68fb      	ldr	r3, [r7, #12]
    da34:	18d1      	adds	r1, r2, r3
    da36:	4b14      	ldr	r3, [pc, #80]	; (da88 <sd_mmc_spi_start_read_blocks+0x90>)
    da38:	881a      	ldrh	r2, [r3, #0]
    da3a:	230a      	movs	r3, #10
    da3c:	18fb      	adds	r3, r7, r3
    da3e:	881b      	ldrh	r3, [r3, #0]
    da40:	4812      	ldr	r0, [pc, #72]	; (da8c <sd_mmc_spi_start_read_blocks+0x94>)
    da42:	4c13      	ldr	r4, [pc, #76]	; (da90 <sd_mmc_spi_start_read_blocks+0x98>)
    da44:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    da46:	4b10      	ldr	r3, [pc, #64]	; (da88 <sd_mmc_spi_start_read_blocks+0x90>)
    da48:	881b      	ldrh	r3, [r3, #0]
    da4a:	001a      	movs	r2, r3
    da4c:	68fb      	ldr	r3, [r7, #12]
    da4e:	189b      	adds	r3, r3, r2
    da50:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    da52:	4b0d      	ldr	r3, [pc, #52]	; (da88 <sd_mmc_spi_start_read_blocks+0x90>)
    da54:	881b      	ldrh	r3, [r3, #0]
    da56:	001a      	movs	r2, r3
    da58:	4b0e      	ldr	r3, [pc, #56]	; (da94 <sd_mmc_spi_start_read_blocks+0x9c>)
    da5a:	681b      	ldr	r3, [r3, #0]
    da5c:	18d2      	adds	r2, r2, r3
    da5e:	4b0d      	ldr	r3, [pc, #52]	; (da94 <sd_mmc_spi_start_read_blocks+0x9c>)
    da60:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    da62:	4b0d      	ldr	r3, [pc, #52]	; (da98 <sd_mmc_spi_start_read_blocks+0xa0>)
    da64:	4798      	blx	r3
	while (nb_block--) {
    da66:	1cbb      	adds	r3, r7, #2
    da68:	881b      	ldrh	r3, [r3, #0]
    da6a:	1cba      	adds	r2, r7, #2
    da6c:	1e59      	subs	r1, r3, #1
    da6e:	8011      	strh	r1, [r2, #0]
    da70:	2b00      	cmp	r3, #0
    da72:	d1d2      	bne.n	da1a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    da74:	2301      	movs	r3, #1
}
    da76:	0018      	movs	r0, r3
    da78:	46bd      	mov	sp, r7
    da7a:	b005      	add	sp, #20
    da7c:	bd90      	pop	{r4, r7, pc}
    da7e:	46c0      	nop			; (mov r8, r8)
    da80:	20004323 	.word	0x20004323
    da84:	0000d2f1 	.word	0x0000d2f1
    da88:	2000432c 	.word	0x2000432c
    da8c:	200042e0 	.word	0x200042e0
    da90:	00015b2d 	.word	0x00015b2d
    da94:	20004328 	.word	0x20004328
    da98:	0000d375 	.word	0x0000d375

0000da9c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    da9c:	b580      	push	{r7, lr}
    da9e:	af00      	add	r7, sp, #0
	return true;
    daa0:	2301      	movs	r3, #1
}
    daa2:	0018      	movs	r0, r3
    daa4:	46bd      	mov	sp, r7
    daa6:	bd80      	pop	{r7, pc}

0000daa8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    daa8:	b580      	push	{r7, lr}
    daaa:	b084      	sub	sp, #16
    daac:	af00      	add	r7, sp, #0
    daae:	6078      	str	r0, [r7, #4]
    dab0:	000a      	movs	r2, r1
    dab2:	1cbb      	adds	r3, r7, #2
    dab4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    dab6:	4b24      	ldr	r3, [pc, #144]	; (db48 <sd_mmc_spi_start_write_blocks+0xa0>)
    dab8:	2200      	movs	r2, #0
    daba:	701a      	strb	r2, [r3, #0]
	pos = 0;
    dabc:	2300      	movs	r3, #0
    dabe:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    dac0:	e035      	b.n	db2e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    dac2:	4b22      	ldr	r3, [pc, #136]	; (db4c <sd_mmc_spi_start_write_blocks+0xa4>)
    dac4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    dac6:	687a      	ldr	r2, [r7, #4]
    dac8:	68fb      	ldr	r3, [r7, #12]
    daca:	18d1      	adds	r1, r2, r3
    dacc:	4b20      	ldr	r3, [pc, #128]	; (db50 <sd_mmc_spi_start_write_blocks+0xa8>)
    dace:	881a      	ldrh	r2, [r3, #0]
    dad0:	4b20      	ldr	r3, [pc, #128]	; (db54 <sd_mmc_spi_start_write_blocks+0xac>)
    dad2:	0018      	movs	r0, r3
    dad4:	4b20      	ldr	r3, [pc, #128]	; (db58 <sd_mmc_spi_start_write_blocks+0xb0>)
    dad6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    dad8:	4b1d      	ldr	r3, [pc, #116]	; (db50 <sd_mmc_spi_start_write_blocks+0xa8>)
    dada:	881b      	ldrh	r3, [r3, #0]
    dadc:	001a      	movs	r2, r3
    dade:	68fb      	ldr	r3, [r7, #12]
    dae0:	189b      	adds	r3, r3, r2
    dae2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    dae4:	4b1a      	ldr	r3, [pc, #104]	; (db50 <sd_mmc_spi_start_write_blocks+0xa8>)
    dae6:	881b      	ldrh	r3, [r3, #0]
    dae8:	001a      	movs	r2, r3
    daea:	4b1c      	ldr	r3, [pc, #112]	; (db5c <sd_mmc_spi_start_write_blocks+0xb4>)
    daec:	681b      	ldr	r3, [r3, #0]
    daee:	18d2      	adds	r2, r2, r3
    daf0:	4b1a      	ldr	r3, [pc, #104]	; (db5c <sd_mmc_spi_start_write_blocks+0xb4>)
    daf2:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    daf4:	4b1a      	ldr	r3, [pc, #104]	; (db60 <sd_mmc_spi_start_write_blocks+0xb8>)
    daf6:	4798      	blx	r3
    daf8:	0003      	movs	r3, r0
    dafa:	001a      	movs	r2, r3
    dafc:	2301      	movs	r3, #1
    dafe:	4053      	eors	r3, r2
    db00:	b2db      	uxtb	r3, r3
    db02:	2b00      	cmp	r3, #0
    db04:	d001      	beq.n	db0a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    db06:	2300      	movs	r3, #0
    db08:	e019      	b.n	db3e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    db0a:	1cbb      	adds	r3, r7, #2
    db0c:	881b      	ldrh	r3, [r3, #0]
    db0e:	2b00      	cmp	r3, #0
    db10:	d00d      	beq.n	db2e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    db12:	4b14      	ldr	r3, [pc, #80]	; (db64 <sd_mmc_spi_start_write_blocks+0xbc>)
    db14:	4798      	blx	r3
    db16:	0003      	movs	r3, r0
    db18:	001a      	movs	r2, r3
    db1a:	2301      	movs	r3, #1
    db1c:	4053      	eors	r3, r2
    db1e:	b2db      	uxtb	r3, r3
    db20:	2b00      	cmp	r3, #0
    db22:	d004      	beq.n	db2e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    db24:	4b08      	ldr	r3, [pc, #32]	; (db48 <sd_mmc_spi_start_write_blocks+0xa0>)
    db26:	2205      	movs	r2, #5
    db28:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    db2a:	2300      	movs	r3, #0
    db2c:	e007      	b.n	db3e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    db2e:	1cbb      	adds	r3, r7, #2
    db30:	881b      	ldrh	r3, [r3, #0]
    db32:	1cba      	adds	r2, r7, #2
    db34:	1e59      	subs	r1, r3, #1
    db36:	8011      	strh	r1, [r2, #0]
    db38:	2b00      	cmp	r3, #0
    db3a:	d1c2      	bne.n	dac2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    db3c:	2301      	movs	r3, #1
}
    db3e:	0018      	movs	r0, r3
    db40:	46bd      	mov	sp, r7
    db42:	b004      	add	sp, #16
    db44:	bd80      	pop	{r7, pc}
    db46:	46c0      	nop			; (mov r8, r8)
    db48:	20004323 	.word	0x20004323
    db4c:	0000d3a1 	.word	0x0000d3a1
    db50:	2000432c 	.word	0x2000432c
    db54:	200042e0 	.word	0x200042e0
    db58:	00015d51 	.word	0x00015d51
    db5c:	20004328 	.word	0x20004328
    db60:	0000d3f1 	.word	0x0000d3f1
    db64:	0000d285 	.word	0x0000d285

0000db68 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    db68:	b580      	push	{r7, lr}
    db6a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    db6c:	4b09      	ldr	r3, [pc, #36]	; (db94 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    db6e:	4798      	blx	r3
    db70:	0003      	movs	r3, r0
    db72:	001a      	movs	r2, r3
    db74:	2301      	movs	r3, #1
    db76:	4053      	eors	r3, r2
    db78:	b2db      	uxtb	r3, r3
    db7a:	2b00      	cmp	r3, #0
    db7c:	d004      	beq.n	db88 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    db7e:	4b06      	ldr	r3, [pc, #24]	; (db98 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    db80:	2205      	movs	r2, #5
    db82:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    db84:	2300      	movs	r3, #0
    db86:	e002      	b.n	db8e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    db88:	4b04      	ldr	r3, [pc, #16]	; (db9c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    db8a:	4798      	blx	r3
    db8c:	0003      	movs	r3, r0
}
    db8e:	0018      	movs	r0, r3
    db90:	46bd      	mov	sp, r7
    db92:	bd80      	pop	{r7, pc}
    db94:	0000d285 	.word	0x0000d285
    db98:	20004323 	.word	0x20004323
    db9c:	0000d485 	.word	0x0000d485

0000dba0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    dba0:	b580      	push	{r7, lr}
    dba2:	b082      	sub	sp, #8
    dba4:	af00      	add	r7, sp, #0
    dba6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    dba8:	687b      	ldr	r3, [r7, #4]
    dbaa:	2b00      	cmp	r3, #0
    dbac:	d00c      	beq.n	dbc8 <delay_cycles+0x28>
		SysTick->LOAD = n;
    dbae:	4b08      	ldr	r3, [pc, #32]	; (dbd0 <delay_cycles+0x30>)
    dbb0:	687a      	ldr	r2, [r7, #4]
    dbb2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    dbb4:	4b06      	ldr	r3, [pc, #24]	; (dbd0 <delay_cycles+0x30>)
    dbb6:	2200      	movs	r2, #0
    dbb8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    dbba:	46c0      	nop			; (mov r8, r8)
    dbbc:	4b04      	ldr	r3, [pc, #16]	; (dbd0 <delay_cycles+0x30>)
    dbbe:	681a      	ldr	r2, [r3, #0]
    dbc0:	2380      	movs	r3, #128	; 0x80
    dbc2:	025b      	lsls	r3, r3, #9
    dbc4:	4013      	ands	r3, r2
    dbc6:	d0f9      	beq.n	dbbc <delay_cycles+0x1c>
		};
	}
}
    dbc8:	46c0      	nop			; (mov r8, r8)
    dbca:	46bd      	mov	sp, r7
    dbcc:	b002      	add	sp, #8
    dbce:	bd80      	pop	{r7, pc}
    dbd0:	e000e010 	.word	0xe000e010

0000dbd4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    dbd4:	b580      	push	{r7, lr}
    dbd6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    dbd8:	2000      	movs	r0, #0
    dbda:	4b0f      	ldr	r3, [pc, #60]	; (dc18 <delay_init+0x44>)
    dbdc:	4798      	blx	r3
    dbde:	0002      	movs	r2, r0
    dbe0:	4b0e      	ldr	r3, [pc, #56]	; (dc1c <delay_init+0x48>)
    dbe2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    dbe4:	4b0d      	ldr	r3, [pc, #52]	; (dc1c <delay_init+0x48>)
    dbe6:	6818      	ldr	r0, [r3, #0]
    dbe8:	4b0d      	ldr	r3, [pc, #52]	; (dc20 <delay_init+0x4c>)
    dbea:	22fa      	movs	r2, #250	; 0xfa
    dbec:	0091      	lsls	r1, r2, #2
    dbee:	4798      	blx	r3
    dbf0:	0003      	movs	r3, r0
    dbf2:	001a      	movs	r2, r3
    dbf4:	4b09      	ldr	r3, [pc, #36]	; (dc1c <delay_init+0x48>)
    dbf6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    dbf8:	4b08      	ldr	r3, [pc, #32]	; (dc1c <delay_init+0x48>)
    dbfa:	6818      	ldr	r0, [r3, #0]
    dbfc:	4b08      	ldr	r3, [pc, #32]	; (dc20 <delay_init+0x4c>)
    dbfe:	22fa      	movs	r2, #250	; 0xfa
    dc00:	0091      	lsls	r1, r2, #2
    dc02:	4798      	blx	r3
    dc04:	0003      	movs	r3, r0
    dc06:	001a      	movs	r2, r3
    dc08:	4b06      	ldr	r3, [pc, #24]	; (dc24 <delay_init+0x50>)
    dc0a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    dc0c:	4b06      	ldr	r3, [pc, #24]	; (dc28 <delay_init+0x54>)
    dc0e:	2205      	movs	r2, #5
    dc10:	601a      	str	r2, [r3, #0]
}
    dc12:	46c0      	nop			; (mov r8, r8)
    dc14:	46bd      	mov	sp, r7
    dc16:	bd80      	pop	{r7, pc}
    dc18:	000178d5 	.word	0x000178d5
    dc1c:	2000011c 	.word	0x2000011c
    dc20:	00020471 	.word	0x00020471
    dc24:	20000120 	.word	0x20000120
    dc28:	e000e010 	.word	0xe000e010

0000dc2c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    dc2c:	b580      	push	{r7, lr}
    dc2e:	b082      	sub	sp, #8
    dc30:	af00      	add	r7, sp, #0
    dc32:	6078      	str	r0, [r7, #4]
	while (n--) {
    dc34:	e004      	b.n	dc40 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    dc36:	4b07      	ldr	r3, [pc, #28]	; (dc54 <delay_cycles_ms+0x28>)
    dc38:	681b      	ldr	r3, [r3, #0]
    dc3a:	0018      	movs	r0, r3
    dc3c:	4b06      	ldr	r3, [pc, #24]	; (dc58 <delay_cycles_ms+0x2c>)
    dc3e:	4798      	blx	r3
	while (n--) {
    dc40:	687b      	ldr	r3, [r7, #4]
    dc42:	1e5a      	subs	r2, r3, #1
    dc44:	607a      	str	r2, [r7, #4]
    dc46:	2b00      	cmp	r3, #0
    dc48:	d1f5      	bne.n	dc36 <delay_cycles_ms+0xa>
	}
}
    dc4a:	46c0      	nop			; (mov r8, r8)
    dc4c:	46bd      	mov	sp, r7
    dc4e:	b002      	add	sp, #8
    dc50:	bd80      	pop	{r7, pc}
    dc52:	46c0      	nop			; (mov r8, r8)
    dc54:	2000011c 	.word	0x2000011c
    dc58:	0000dba1 	.word	0x0000dba1

0000dc5c <system_pinmux_get_group_from_gpio_pin>:
{
    dc5c:	b580      	push	{r7, lr}
    dc5e:	b084      	sub	sp, #16
    dc60:	af00      	add	r7, sp, #0
    dc62:	0002      	movs	r2, r0
    dc64:	1dfb      	adds	r3, r7, #7
    dc66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    dc68:	230f      	movs	r3, #15
    dc6a:	18fb      	adds	r3, r7, r3
    dc6c:	1dfa      	adds	r2, r7, #7
    dc6e:	7812      	ldrb	r2, [r2, #0]
    dc70:	09d2      	lsrs	r2, r2, #7
    dc72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    dc74:	230e      	movs	r3, #14
    dc76:	18fb      	adds	r3, r7, r3
    dc78:	1dfa      	adds	r2, r7, #7
    dc7a:	7812      	ldrb	r2, [r2, #0]
    dc7c:	0952      	lsrs	r2, r2, #5
    dc7e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    dc80:	4b0d      	ldr	r3, [pc, #52]	; (dcb8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    dc82:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    dc84:	230f      	movs	r3, #15
    dc86:	18fb      	adds	r3, r7, r3
    dc88:	781b      	ldrb	r3, [r3, #0]
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	d10f      	bne.n	dcae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    dc8e:	230f      	movs	r3, #15
    dc90:	18fb      	adds	r3, r7, r3
    dc92:	781b      	ldrb	r3, [r3, #0]
    dc94:	009b      	lsls	r3, r3, #2
    dc96:	2210      	movs	r2, #16
    dc98:	4694      	mov	ip, r2
    dc9a:	44bc      	add	ip, r7
    dc9c:	4463      	add	r3, ip
    dc9e:	3b08      	subs	r3, #8
    dca0:	681a      	ldr	r2, [r3, #0]
    dca2:	230e      	movs	r3, #14
    dca4:	18fb      	adds	r3, r7, r3
    dca6:	781b      	ldrb	r3, [r3, #0]
    dca8:	01db      	lsls	r3, r3, #7
    dcaa:	18d3      	adds	r3, r2, r3
    dcac:	e000      	b.n	dcb0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    dcae:	2300      	movs	r3, #0
}
    dcb0:	0018      	movs	r0, r3
    dcb2:	46bd      	mov	sp, r7
    dcb4:	b004      	add	sp, #16
    dcb6:	bd80      	pop	{r7, pc}
    dcb8:	41004400 	.word	0x41004400

0000dcbc <system_interrupt_enable_global>:
{
    dcbc:	b580      	push	{r7, lr}
    dcbe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    dcc0:	4b04      	ldr	r3, [pc, #16]	; (dcd4 <system_interrupt_enable_global+0x18>)
    dcc2:	2201      	movs	r2, #1
    dcc4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    dcc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dcca:	b662      	cpsie	i
}
    dccc:	46c0      	nop			; (mov r8, r8)
    dcce:	46bd      	mov	sp, r7
    dcd0:	bd80      	pop	{r7, pc}
    dcd2:	46c0      	nop			; (mov r8, r8)
    dcd4:	20000126 	.word	0x20000126

0000dcd8 <port_get_group_from_gpio_pin>:
{
    dcd8:	b580      	push	{r7, lr}
    dcda:	b082      	sub	sp, #8
    dcdc:	af00      	add	r7, sp, #0
    dcde:	0002      	movs	r2, r0
    dce0:	1dfb      	adds	r3, r7, #7
    dce2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    dce4:	1dfb      	adds	r3, r7, #7
    dce6:	781b      	ldrb	r3, [r3, #0]
    dce8:	0018      	movs	r0, r3
    dcea:	4b03      	ldr	r3, [pc, #12]	; (dcf8 <port_get_group_from_gpio_pin+0x20>)
    dcec:	4798      	blx	r3
    dcee:	0003      	movs	r3, r0
}
    dcf0:	0018      	movs	r0, r3
    dcf2:	46bd      	mov	sp, r7
    dcf4:	b002      	add	sp, #8
    dcf6:	bd80      	pop	{r7, pc}
    dcf8:	0000dc5d 	.word	0x0000dc5d

0000dcfc <port_get_config_defaults>:
{
    dcfc:	b580      	push	{r7, lr}
    dcfe:	b082      	sub	sp, #8
    dd00:	af00      	add	r7, sp, #0
    dd02:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    dd04:	687b      	ldr	r3, [r7, #4]
    dd06:	2200      	movs	r2, #0
    dd08:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	2201      	movs	r2, #1
    dd0e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    dd10:	687b      	ldr	r3, [r7, #4]
    dd12:	2200      	movs	r2, #0
    dd14:	709a      	strb	r2, [r3, #2]
}
    dd16:	46c0      	nop			; (mov r8, r8)
    dd18:	46bd      	mov	sp, r7
    dd1a:	b002      	add	sp, #8
    dd1c:	bd80      	pop	{r7, pc}
	...

0000dd20 <port_pin_set_output_level>:
{
    dd20:	b580      	push	{r7, lr}
    dd22:	b084      	sub	sp, #16
    dd24:	af00      	add	r7, sp, #0
    dd26:	0002      	movs	r2, r0
    dd28:	1dfb      	adds	r3, r7, #7
    dd2a:	701a      	strb	r2, [r3, #0]
    dd2c:	1dbb      	adds	r3, r7, #6
    dd2e:	1c0a      	adds	r2, r1, #0
    dd30:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    dd32:	1dfb      	adds	r3, r7, #7
    dd34:	781b      	ldrb	r3, [r3, #0]
    dd36:	0018      	movs	r0, r3
    dd38:	4b0d      	ldr	r3, [pc, #52]	; (dd70 <port_pin_set_output_level+0x50>)
    dd3a:	4798      	blx	r3
    dd3c:	0003      	movs	r3, r0
    dd3e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dd40:	1dfb      	adds	r3, r7, #7
    dd42:	781b      	ldrb	r3, [r3, #0]
    dd44:	221f      	movs	r2, #31
    dd46:	4013      	ands	r3, r2
    dd48:	2201      	movs	r2, #1
    dd4a:	409a      	lsls	r2, r3
    dd4c:	0013      	movs	r3, r2
    dd4e:	60bb      	str	r3, [r7, #8]
	if (level) {
    dd50:	1dbb      	adds	r3, r7, #6
    dd52:	781b      	ldrb	r3, [r3, #0]
    dd54:	2b00      	cmp	r3, #0
    dd56:	d003      	beq.n	dd60 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    dd58:	68fb      	ldr	r3, [r7, #12]
    dd5a:	68ba      	ldr	r2, [r7, #8]
    dd5c:	619a      	str	r2, [r3, #24]
}
    dd5e:	e002      	b.n	dd66 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    dd60:	68fb      	ldr	r3, [r7, #12]
    dd62:	68ba      	ldr	r2, [r7, #8]
    dd64:	615a      	str	r2, [r3, #20]
}
    dd66:	46c0      	nop			; (mov r8, r8)
    dd68:	46bd      	mov	sp, r7
    dd6a:	b004      	add	sp, #16
    dd6c:	bd80      	pop	{r7, pc}
    dd6e:	46c0      	nop			; (mov r8, r8)
    dd70:	0000dcd9 	.word	0x0000dcd9

0000dd74 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    dd74:	b580      	push	{r7, lr}
    dd76:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    dd78:	4b04      	ldr	r3, [pc, #16]	; (dd8c <chip_isr+0x18>)
    dd7a:	681b      	ldr	r3, [r3, #0]
    dd7c:	2b00      	cmp	r3, #0
    dd7e:	d002      	beq.n	dd86 <chip_isr+0x12>
		gpfIsr();
    dd80:	4b02      	ldr	r3, [pc, #8]	; (dd8c <chip_isr+0x18>)
    dd82:	681b      	ldr	r3, [r3, #0]
    dd84:	4798      	blx	r3
	}
}
    dd86:	46c0      	nop			; (mov r8, r8)
    dd88:	46bd      	mov	sp, r7
    dd8a:	bd80      	pop	{r7, pc}
    dd8c:	20004330 	.word	0x20004330

0000dd90 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    dd90:	b580      	push	{r7, lr}
    dd92:	b082      	sub	sp, #8
    dd94:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    dd96:	1d3b      	adds	r3, r7, #4
    dd98:	0018      	movs	r0, r3
    dd9a:	4b10      	ldr	r3, [pc, #64]	; (dddc <init_chip_pins+0x4c>)
    dd9c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    dd9e:	1d3b      	adds	r3, r7, #4
    dda0:	2201      	movs	r2, #1
    dda2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    dda4:	1d3b      	adds	r3, r7, #4
    dda6:	0019      	movs	r1, r3
    dda8:	201b      	movs	r0, #27
    ddaa:	4b0d      	ldr	r3, [pc, #52]	; (dde0 <init_chip_pins+0x50>)
    ddac:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    ddae:	1d3b      	adds	r3, r7, #4
    ddb0:	0019      	movs	r1, r3
    ddb2:	201c      	movs	r0, #28
    ddb4:	4b0a      	ldr	r3, [pc, #40]	; (dde0 <init_chip_pins+0x50>)
    ddb6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    ddb8:	1d3b      	adds	r3, r7, #4
    ddba:	0019      	movs	r1, r3
    ddbc:	2028      	movs	r0, #40	; 0x28
    ddbe:	4b08      	ldr	r3, [pc, #32]	; (dde0 <init_chip_pins+0x50>)
    ddc0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    ddc2:	2100      	movs	r1, #0
    ddc4:	201c      	movs	r0, #28
    ddc6:	4b07      	ldr	r3, [pc, #28]	; (dde4 <init_chip_pins+0x54>)
    ddc8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    ddca:	2100      	movs	r1, #0
    ddcc:	201b      	movs	r0, #27
    ddce:	4b05      	ldr	r3, [pc, #20]	; (dde4 <init_chip_pins+0x54>)
    ddd0:	4798      	blx	r3
}
    ddd2:	46c0      	nop			; (mov r8, r8)
    ddd4:	46bd      	mov	sp, r7
    ddd6:	b002      	add	sp, #8
    ddd8:	bd80      	pop	{r7, pc}
    ddda:	46c0      	nop			; (mov r8, r8)
    dddc:	0000dcfd 	.word	0x0000dcfd
    dde0:	0001451d 	.word	0x0001451d
    dde4:	0000dd21 	.word	0x0000dd21

0000dde8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    dde8:	b580      	push	{r7, lr}
    ddea:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    ddec:	4b0b      	ldr	r3, [pc, #44]	; (de1c <nm_bsp_init+0x34>)
    ddee:	2200      	movs	r2, #0
    ddf0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    ddf2:	4b0b      	ldr	r3, [pc, #44]	; (de20 <nm_bsp_init+0x38>)
    ddf4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    ddf6:	4b0b      	ldr	r3, [pc, #44]	; (de24 <nm_bsp_init+0x3c>)
    ddf8:	681b      	ldr	r3, [r3, #0]
    ddfa:	2201      	movs	r2, #1
    ddfc:	4013      	ands	r3, r2
    ddfe:	d004      	beq.n	de0a <nm_bsp_init+0x22>
    de00:	4b08      	ldr	r3, [pc, #32]	; (de24 <nm_bsp_init+0x3c>)
    de02:	681b      	ldr	r3, [r3, #0]
    de04:	2202      	movs	r2, #2
    de06:	4013      	ands	r3, r2
    de08:	d101      	bne.n	de0e <nm_bsp_init+0x26>
	    delay_init();
    de0a:	4b07      	ldr	r3, [pc, #28]	; (de28 <nm_bsp_init+0x40>)
    de0c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
    de0e:	4b07      	ldr	r3, [pc, #28]	; (de2c <nm_bsp_init+0x44>)
    de10:	4798      	blx	r3

	return M2M_SUCCESS;
    de12:	2300      	movs	r3, #0
}
    de14:	0018      	movs	r0, r3
    de16:	46bd      	mov	sp, r7
    de18:	bd80      	pop	{r7, pc}
    de1a:	46c0      	nop			; (mov r8, r8)
    de1c:	20004330 	.word	0x20004330
    de20:	0000dd91 	.word	0x0000dd91
    de24:	e000e010 	.word	0xe000e010
    de28:	0000dbd5 	.word	0x0000dbd5
    de2c:	0000dcbd 	.word	0x0000dcbd

0000de30 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    de30:	b580      	push	{r7, lr}
    de32:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    de34:	2100      	movs	r1, #0
    de36:	201c      	movs	r0, #28
    de38:	4b0b      	ldr	r3, [pc, #44]	; (de68 <nm_bsp_reset+0x38>)
    de3a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    de3c:	2100      	movs	r1, #0
    de3e:	201b      	movs	r0, #27
    de40:	4b09      	ldr	r3, [pc, #36]	; (de68 <nm_bsp_reset+0x38>)
    de42:	4798      	blx	r3
	nm_bsp_sleep(1);
    de44:	2001      	movs	r0, #1
    de46:	4b09      	ldr	r3, [pc, #36]	; (de6c <nm_bsp_reset+0x3c>)
    de48:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    de4a:	2101      	movs	r1, #1
    de4c:	201c      	movs	r0, #28
    de4e:	4b06      	ldr	r3, [pc, #24]	; (de68 <nm_bsp_reset+0x38>)
    de50:	4798      	blx	r3
	nm_bsp_sleep(10);
    de52:	200a      	movs	r0, #10
    de54:	4b05      	ldr	r3, [pc, #20]	; (de6c <nm_bsp_reset+0x3c>)
    de56:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    de58:	2101      	movs	r1, #1
    de5a:	201b      	movs	r0, #27
    de5c:	4b02      	ldr	r3, [pc, #8]	; (de68 <nm_bsp_reset+0x38>)
    de5e:	4798      	blx	r3
}
    de60:	46c0      	nop			; (mov r8, r8)
    de62:	46bd      	mov	sp, r7
    de64:	bd80      	pop	{r7, pc}
    de66:	46c0      	nop			; (mov r8, r8)
    de68:	0000dd21 	.word	0x0000dd21
    de6c:	0000de71 	.word	0x0000de71

0000de70 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    de70:	b580      	push	{r7, lr}
    de72:	b082      	sub	sp, #8
    de74:	af00      	add	r7, sp, #0
    de76:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
    de78:	687b      	ldr	r3, [r7, #4]
    de7a:	0018      	movs	r0, r3
    de7c:	4b02      	ldr	r3, [pc, #8]	; (de88 <nm_bsp_sleep+0x18>)
    de7e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
    de80:	46c0      	nop			; (mov r8, r8)
    de82:	46bd      	mov	sp, r7
    de84:	b002      	add	sp, #8
    de86:	bd80      	pop	{r7, pc}
    de88:	00009c21 	.word	0x00009c21

0000de8c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    de8c:	b580      	push	{r7, lr}
    de8e:	b086      	sub	sp, #24
    de90:	af00      	add	r7, sp, #0
    de92:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    de94:	4b15      	ldr	r3, [pc, #84]	; (deec <nm_bsp_register_isr+0x60>)
    de96:	687a      	ldr	r2, [r7, #4]
    de98:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    de9a:	230c      	movs	r3, #12
    de9c:	18fb      	adds	r3, r7, r3
    de9e:	0018      	movs	r0, r3
    dea0:	4b13      	ldr	r3, [pc, #76]	; (def0 <nm_bsp_register_isr+0x64>)
    dea2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    dea4:	230c      	movs	r3, #12
    dea6:	18fb      	adds	r3, r7, r3
    dea8:	2229      	movs	r2, #41	; 0x29
    deaa:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    deac:	230c      	movs	r3, #12
    deae:	18fb      	adds	r3, r7, r3
    deb0:	2200      	movs	r2, #0
    deb2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    deb4:	230c      	movs	r3, #12
    deb6:	18fb      	adds	r3, r7, r3
    deb8:	2201      	movs	r2, #1
    deba:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    debc:	230c      	movs	r3, #12
    debe:	18fb      	adds	r3, r7, r3
    dec0:	2202      	movs	r2, #2
    dec2:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    dec4:	230c      	movs	r3, #12
    dec6:	18fb      	adds	r3, r7, r3
    dec8:	0019      	movs	r1, r3
    deca:	2009      	movs	r0, #9
    decc:	4b09      	ldr	r3, [pc, #36]	; (def4 <nm_bsp_register_isr+0x68>)
    dece:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    ded0:	4b09      	ldr	r3, [pc, #36]	; (def8 <nm_bsp_register_isr+0x6c>)
    ded2:	2200      	movs	r2, #0
    ded4:	2109      	movs	r1, #9
    ded6:	0018      	movs	r0, r3
    ded8:	4b08      	ldr	r3, [pc, #32]	; (defc <nm_bsp_register_isr+0x70>)
    deda:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    dedc:	2100      	movs	r1, #0
    dede:	2009      	movs	r0, #9
    dee0:	4b07      	ldr	r3, [pc, #28]	; (df00 <nm_bsp_register_isr+0x74>)
    dee2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    dee4:	46c0      	nop			; (mov r8, r8)
    dee6:	46bd      	mov	sp, r7
    dee8:	b006      	add	sp, #24
    deea:	bd80      	pop	{r7, pc}
    deec:	20004330 	.word	0x20004330
    def0:	000143c5 	.word	0x000143c5
    def4:	000143f9 	.word	0x000143f9
    def8:	0000dd75 	.word	0x0000dd75
    defc:	00013fc5 	.word	0x00013fc5
    df00:	00014029 	.word	0x00014029

0000df04 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    df04:	b580      	push	{r7, lr}
    df06:	b082      	sub	sp, #8
    df08:	af00      	add	r7, sp, #0
    df0a:	0002      	movs	r2, r0
    df0c:	1dfb      	adds	r3, r7, #7
    df0e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    df10:	1dfb      	adds	r3, r7, #7
    df12:	781b      	ldrb	r3, [r3, #0]
    df14:	2b00      	cmp	r3, #0
    df16:	d004      	beq.n	df22 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    df18:	2100      	movs	r1, #0
    df1a:	2009      	movs	r0, #9
    df1c:	4b05      	ldr	r3, [pc, #20]	; (df34 <nm_bsp_interrupt_ctrl+0x30>)
    df1e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    df20:	e003      	b.n	df2a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    df22:	2100      	movs	r1, #0
    df24:	2009      	movs	r0, #9
    df26:	4b04      	ldr	r3, [pc, #16]	; (df38 <nm_bsp_interrupt_ctrl+0x34>)
    df28:	4798      	blx	r3
}
    df2a:	46c0      	nop			; (mov r8, r8)
    df2c:	46bd      	mov	sp, r7
    df2e:	b002      	add	sp, #8
    df30:	bd80      	pop	{r7, pc}
    df32:	46c0      	nop			; (mov r8, r8)
    df34:	00014029 	.word	0x00014029
    df38:	00014071 	.word	0x00014071

0000df3c <system_pinmux_get_group_from_gpio_pin>:
{
    df3c:	b580      	push	{r7, lr}
    df3e:	b084      	sub	sp, #16
    df40:	af00      	add	r7, sp, #0
    df42:	0002      	movs	r2, r0
    df44:	1dfb      	adds	r3, r7, #7
    df46:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    df48:	230f      	movs	r3, #15
    df4a:	18fb      	adds	r3, r7, r3
    df4c:	1dfa      	adds	r2, r7, #7
    df4e:	7812      	ldrb	r2, [r2, #0]
    df50:	09d2      	lsrs	r2, r2, #7
    df52:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    df54:	230e      	movs	r3, #14
    df56:	18fb      	adds	r3, r7, r3
    df58:	1dfa      	adds	r2, r7, #7
    df5a:	7812      	ldrb	r2, [r2, #0]
    df5c:	0952      	lsrs	r2, r2, #5
    df5e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    df60:	4b0d      	ldr	r3, [pc, #52]	; (df98 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    df62:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    df64:	230f      	movs	r3, #15
    df66:	18fb      	adds	r3, r7, r3
    df68:	781b      	ldrb	r3, [r3, #0]
    df6a:	2b00      	cmp	r3, #0
    df6c:	d10f      	bne.n	df8e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    df6e:	230f      	movs	r3, #15
    df70:	18fb      	adds	r3, r7, r3
    df72:	781b      	ldrb	r3, [r3, #0]
    df74:	009b      	lsls	r3, r3, #2
    df76:	2210      	movs	r2, #16
    df78:	4694      	mov	ip, r2
    df7a:	44bc      	add	ip, r7
    df7c:	4463      	add	r3, ip
    df7e:	3b08      	subs	r3, #8
    df80:	681a      	ldr	r2, [r3, #0]
    df82:	230e      	movs	r3, #14
    df84:	18fb      	adds	r3, r7, r3
    df86:	781b      	ldrb	r3, [r3, #0]
    df88:	01db      	lsls	r3, r3, #7
    df8a:	18d3      	adds	r3, r2, r3
    df8c:	e000      	b.n	df90 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    df8e:	2300      	movs	r3, #0
}
    df90:	0018      	movs	r0, r3
    df92:	46bd      	mov	sp, r7
    df94:	b004      	add	sp, #16
    df96:	bd80      	pop	{r7, pc}
    df98:	41004400 	.word	0x41004400

0000df9c <system_interrupt_enable>:
{
    df9c:	b580      	push	{r7, lr}
    df9e:	b082      	sub	sp, #8
    dfa0:	af00      	add	r7, sp, #0
    dfa2:	0002      	movs	r2, r0
    dfa4:	1dfb      	adds	r3, r7, #7
    dfa6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    dfa8:	4b06      	ldr	r3, [pc, #24]	; (dfc4 <system_interrupt_enable+0x28>)
    dfaa:	1dfa      	adds	r2, r7, #7
    dfac:	7812      	ldrb	r2, [r2, #0]
    dfae:	0011      	movs	r1, r2
    dfb0:	221f      	movs	r2, #31
    dfb2:	400a      	ands	r2, r1
    dfb4:	2101      	movs	r1, #1
    dfb6:	4091      	lsls	r1, r2
    dfb8:	000a      	movs	r2, r1
    dfba:	601a      	str	r2, [r3, #0]
}
    dfbc:	46c0      	nop			; (mov r8, r8)
    dfbe:	46bd      	mov	sp, r7
    dfc0:	b002      	add	sp, #8
    dfc2:	bd80      	pop	{r7, pc}
    dfc4:	e000e100 	.word	0xe000e100

0000dfc8 <system_interrupt_disable>:
{
    dfc8:	b580      	push	{r7, lr}
    dfca:	b082      	sub	sp, #8
    dfcc:	af00      	add	r7, sp, #0
    dfce:	0002      	movs	r2, r0
    dfd0:	1dfb      	adds	r3, r7, #7
    dfd2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    dfd4:	4a07      	ldr	r2, [pc, #28]	; (dff4 <system_interrupt_disable+0x2c>)
    dfd6:	1dfb      	adds	r3, r7, #7
    dfd8:	781b      	ldrb	r3, [r3, #0]
    dfda:	0019      	movs	r1, r3
    dfdc:	231f      	movs	r3, #31
    dfde:	400b      	ands	r3, r1
    dfe0:	2101      	movs	r1, #1
    dfe2:	4099      	lsls	r1, r3
    dfe4:	000b      	movs	r3, r1
    dfe6:	0019      	movs	r1, r3
    dfe8:	2380      	movs	r3, #128	; 0x80
    dfea:	50d1      	str	r1, [r2, r3]
}
    dfec:	46c0      	nop			; (mov r8, r8)
    dfee:	46bd      	mov	sp, r7
    dff0:	b002      	add	sp, #8
    dff2:	bd80      	pop	{r7, pc}
    dff4:	e000e100 	.word	0xe000e100

0000dff8 <port_get_group_from_gpio_pin>:
{
    dff8:	b580      	push	{r7, lr}
    dffa:	b082      	sub	sp, #8
    dffc:	af00      	add	r7, sp, #0
    dffe:	0002      	movs	r2, r0
    e000:	1dfb      	adds	r3, r7, #7
    e002:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    e004:	1dfb      	adds	r3, r7, #7
    e006:	781b      	ldrb	r3, [r3, #0]
    e008:	0018      	movs	r0, r3
    e00a:	4b03      	ldr	r3, [pc, #12]	; (e018 <port_get_group_from_gpio_pin+0x20>)
    e00c:	4798      	blx	r3
    e00e:	0003      	movs	r3, r0
}
    e010:	0018      	movs	r0, r3
    e012:	46bd      	mov	sp, r7
    e014:	b002      	add	sp, #8
    e016:	bd80      	pop	{r7, pc}
    e018:	0000df3d 	.word	0x0000df3d

0000e01c <port_get_config_defaults>:
{
    e01c:	b580      	push	{r7, lr}
    e01e:	b082      	sub	sp, #8
    e020:	af00      	add	r7, sp, #0
    e022:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    e024:	687b      	ldr	r3, [r7, #4]
    e026:	2200      	movs	r2, #0
    e028:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    e02a:	687b      	ldr	r3, [r7, #4]
    e02c:	2201      	movs	r2, #1
    e02e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    e030:	687b      	ldr	r3, [r7, #4]
    e032:	2200      	movs	r2, #0
    e034:	709a      	strb	r2, [r3, #2]
}
    e036:	46c0      	nop			; (mov r8, r8)
    e038:	46bd      	mov	sp, r7
    e03a:	b002      	add	sp, #8
    e03c:	bd80      	pop	{r7, pc}
	...

0000e040 <port_pin_set_output_level>:
{
    e040:	b580      	push	{r7, lr}
    e042:	b084      	sub	sp, #16
    e044:	af00      	add	r7, sp, #0
    e046:	0002      	movs	r2, r0
    e048:	1dfb      	adds	r3, r7, #7
    e04a:	701a      	strb	r2, [r3, #0]
    e04c:	1dbb      	adds	r3, r7, #6
    e04e:	1c0a      	adds	r2, r1, #0
    e050:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    e052:	1dfb      	adds	r3, r7, #7
    e054:	781b      	ldrb	r3, [r3, #0]
    e056:	0018      	movs	r0, r3
    e058:	4b0d      	ldr	r3, [pc, #52]	; (e090 <port_pin_set_output_level+0x50>)
    e05a:	4798      	blx	r3
    e05c:	0003      	movs	r3, r0
    e05e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e060:	1dfb      	adds	r3, r7, #7
    e062:	781b      	ldrb	r3, [r3, #0]
    e064:	221f      	movs	r2, #31
    e066:	4013      	ands	r3, r2
    e068:	2201      	movs	r2, #1
    e06a:	409a      	lsls	r2, r3
    e06c:	0013      	movs	r3, r2
    e06e:	60bb      	str	r3, [r7, #8]
	if (level) {
    e070:	1dbb      	adds	r3, r7, #6
    e072:	781b      	ldrb	r3, [r3, #0]
    e074:	2b00      	cmp	r3, #0
    e076:	d003      	beq.n	e080 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    e078:	68fb      	ldr	r3, [r7, #12]
    e07a:	68ba      	ldr	r2, [r7, #8]
    e07c:	619a      	str	r2, [r3, #24]
}
    e07e:	e002      	b.n	e086 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    e080:	68fb      	ldr	r3, [r7, #12]
    e082:	68ba      	ldr	r2, [r7, #8]
    e084:	615a      	str	r2, [r3, #20]
}
    e086:	46c0      	nop			; (mov r8, r8)
    e088:	46bd      	mov	sp, r7
    e08a:	b004      	add	sp, #16
    e08c:	bd80      	pop	{r7, pc}
    e08e:	46c0      	nop			; (mov r8, r8)
    e090:	0000dff9 	.word	0x0000dff9

0000e094 <spi_is_syncing>:
{
    e094:	b580      	push	{r7, lr}
    e096:	b084      	sub	sp, #16
    e098:	af00      	add	r7, sp, #0
    e09a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e09c:	687b      	ldr	r3, [r7, #4]
    e09e:	681b      	ldr	r3, [r3, #0]
    e0a0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    e0a2:	68fb      	ldr	r3, [r7, #12]
    e0a4:	69db      	ldr	r3, [r3, #28]
    e0a6:	1e5a      	subs	r2, r3, #1
    e0a8:	4193      	sbcs	r3, r2
    e0aa:	b2db      	uxtb	r3, r3
}
    e0ac:	0018      	movs	r0, r3
    e0ae:	46bd      	mov	sp, r7
    e0b0:	b004      	add	sp, #16
    e0b2:	bd80      	pop	{r7, pc}

0000e0b4 <spi_get_config_defaults>:
{
    e0b4:	b580      	push	{r7, lr}
    e0b6:	b082      	sub	sp, #8
    e0b8:	af00      	add	r7, sp, #0
    e0ba:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    e0bc:	687b      	ldr	r3, [r7, #4]
    e0be:	2201      	movs	r2, #1
    e0c0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    e0c2:	687b      	ldr	r3, [r7, #4]
    e0c4:	2200      	movs	r2, #0
    e0c6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    e0c8:	687b      	ldr	r3, [r7, #4]
    e0ca:	2200      	movs	r2, #0
    e0cc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    e0ce:	687b      	ldr	r3, [r7, #4]
    e0d0:	22c0      	movs	r2, #192	; 0xc0
    e0d2:	0392      	lsls	r2, r2, #14
    e0d4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    e0d6:	687b      	ldr	r3, [r7, #4]
    e0d8:	2200      	movs	r2, #0
    e0da:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    e0dc:	687b      	ldr	r3, [r7, #4]
    e0de:	2200      	movs	r2, #0
    e0e0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    e0e2:	687b      	ldr	r3, [r7, #4]
    e0e4:	2201      	movs	r2, #1
    e0e6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    e0e8:	687b      	ldr	r3, [r7, #4]
    e0ea:	2201      	movs	r2, #1
    e0ec:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    e0ee:	687b      	ldr	r3, [r7, #4]
    e0f0:	2200      	movs	r2, #0
    e0f2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    e0f4:	687b      	ldr	r3, [r7, #4]
    e0f6:	2224      	movs	r2, #36	; 0x24
    e0f8:	2100      	movs	r1, #0
    e0fa:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    e0fc:	687b      	ldr	r3, [r7, #4]
    e0fe:	3318      	adds	r3, #24
    e100:	220c      	movs	r2, #12
    e102:	2100      	movs	r1, #0
    e104:	0018      	movs	r0, r3
    e106:	4b0a      	ldr	r3, [pc, #40]	; (e130 <spi_get_config_defaults+0x7c>)
    e108:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    e10a:	687b      	ldr	r3, [r7, #4]
    e10c:	4a09      	ldr	r2, [pc, #36]	; (e134 <spi_get_config_defaults+0x80>)
    e10e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    e110:	687b      	ldr	r3, [r7, #4]
    e112:	2200      	movs	r2, #0
    e114:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    e116:	687b      	ldr	r3, [r7, #4]
    e118:	2200      	movs	r2, #0
    e11a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    e11c:	687b      	ldr	r3, [r7, #4]
    e11e:	2200      	movs	r2, #0
    e120:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    e122:	687b      	ldr	r3, [r7, #4]
    e124:	2200      	movs	r2, #0
    e126:	635a      	str	r2, [r3, #52]	; 0x34
};
    e128:	46c0      	nop			; (mov r8, r8)
    e12a:	46bd      	mov	sp, r7
    e12c:	b002      	add	sp, #8
    e12e:	bd80      	pop	{r7, pc}
    e130:	00022dbb 	.word	0x00022dbb
    e134:	000186a0 	.word	0x000186a0

0000e138 <spi_slave_inst_get_config_defaults>:
{
    e138:	b580      	push	{r7, lr}
    e13a:	b082      	sub	sp, #8
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	220a      	movs	r2, #10
    e144:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    e146:	687b      	ldr	r3, [r7, #4]
    e148:	2200      	movs	r2, #0
    e14a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    e14c:	687b      	ldr	r3, [r7, #4]
    e14e:	2200      	movs	r2, #0
    e150:	709a      	strb	r2, [r3, #2]
}
    e152:	46c0      	nop			; (mov r8, r8)
    e154:	46bd      	mov	sp, r7
    e156:	b002      	add	sp, #8
    e158:	bd80      	pop	{r7, pc}
	...

0000e15c <spi_attach_slave>:
{
    e15c:	b580      	push	{r7, lr}
    e15e:	b084      	sub	sp, #16
    e160:	af00      	add	r7, sp, #0
    e162:	6078      	str	r0, [r7, #4]
    e164:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    e166:	683b      	ldr	r3, [r7, #0]
    e168:	781a      	ldrb	r2, [r3, #0]
    e16a:	687b      	ldr	r3, [r7, #4]
    e16c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    e16e:	683b      	ldr	r3, [r7, #0]
    e170:	785a      	ldrb	r2, [r3, #1]
    e172:	687b      	ldr	r3, [r7, #4]
    e174:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    e176:	683b      	ldr	r3, [r7, #0]
    e178:	789a      	ldrb	r2, [r3, #2]
    e17a:	687b      	ldr	r3, [r7, #4]
    e17c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    e17e:	230c      	movs	r3, #12
    e180:	18fb      	adds	r3, r7, r3
    e182:	0018      	movs	r0, r3
    e184:	4b0b      	ldr	r3, [pc, #44]	; (e1b4 <spi_attach_slave+0x58>)
    e186:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    e188:	230c      	movs	r3, #12
    e18a:	18fb      	adds	r3, r7, r3
    e18c:	2201      	movs	r2, #1
    e18e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    e190:	687b      	ldr	r3, [r7, #4]
    e192:	781b      	ldrb	r3, [r3, #0]
    e194:	220c      	movs	r2, #12
    e196:	18ba      	adds	r2, r7, r2
    e198:	0011      	movs	r1, r2
    e19a:	0018      	movs	r0, r3
    e19c:	4b06      	ldr	r3, [pc, #24]	; (e1b8 <spi_attach_slave+0x5c>)
    e19e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    e1a0:	687b      	ldr	r3, [r7, #4]
    e1a2:	781b      	ldrb	r3, [r3, #0]
    e1a4:	2101      	movs	r1, #1
    e1a6:	0018      	movs	r0, r3
    e1a8:	4b04      	ldr	r3, [pc, #16]	; (e1bc <spi_attach_slave+0x60>)
    e1aa:	4798      	blx	r3
}
    e1ac:	46c0      	nop			; (mov r8, r8)
    e1ae:	46bd      	mov	sp, r7
    e1b0:	b004      	add	sp, #16
    e1b2:	bd80      	pop	{r7, pc}
    e1b4:	0000e01d 	.word	0x0000e01d
    e1b8:	0001451d 	.word	0x0001451d
    e1bc:	0000e041 	.word	0x0000e041

0000e1c0 <spi_enable>:
{
    e1c0:	b580      	push	{r7, lr}
    e1c2:	b084      	sub	sp, #16
    e1c4:	af00      	add	r7, sp, #0
    e1c6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e1c8:	687b      	ldr	r3, [r7, #4]
    e1ca:	681b      	ldr	r3, [r3, #0]
    e1cc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    e1ce:	687b      	ldr	r3, [r7, #4]
    e1d0:	681b      	ldr	r3, [r3, #0]
    e1d2:	0018      	movs	r0, r3
    e1d4:	4b0b      	ldr	r3, [pc, #44]	; (e204 <spi_enable+0x44>)
    e1d6:	4798      	blx	r3
    e1d8:	0003      	movs	r3, r0
    e1da:	0018      	movs	r0, r3
    e1dc:	4b0a      	ldr	r3, [pc, #40]	; (e208 <spi_enable+0x48>)
    e1de:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    e1e0:	46c0      	nop			; (mov r8, r8)
    e1e2:	687b      	ldr	r3, [r7, #4]
    e1e4:	0018      	movs	r0, r3
    e1e6:	4b09      	ldr	r3, [pc, #36]	; (e20c <spi_enable+0x4c>)
    e1e8:	4798      	blx	r3
    e1ea:	1e03      	subs	r3, r0, #0
    e1ec:	d1f9      	bne.n	e1e2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    e1ee:	68fb      	ldr	r3, [r7, #12]
    e1f0:	681b      	ldr	r3, [r3, #0]
    e1f2:	2202      	movs	r2, #2
    e1f4:	431a      	orrs	r2, r3
    e1f6:	68fb      	ldr	r3, [r7, #12]
    e1f8:	601a      	str	r2, [r3, #0]
}
    e1fa:	46c0      	nop			; (mov r8, r8)
    e1fc:	46bd      	mov	sp, r7
    e1fe:	b004      	add	sp, #16
    e200:	bd80      	pop	{r7, pc}
    e202:	46c0      	nop			; (mov r8, r8)
    e204:	000151ed 	.word	0x000151ed
    e208:	0000df9d 	.word	0x0000df9d
    e20c:	0000e095 	.word	0x0000e095

0000e210 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    e210:	b580      	push	{r7, lr}
    e212:	b084      	sub	sp, #16
    e214:	af00      	add	r7, sp, #0
    e216:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e218:	687b      	ldr	r3, [r7, #4]
    e21a:	681b      	ldr	r3, [r3, #0]
    e21c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    e21e:	687b      	ldr	r3, [r7, #4]
    e220:	681b      	ldr	r3, [r3, #0]
    e222:	0018      	movs	r0, r3
    e224:	4b0e      	ldr	r3, [pc, #56]	; (e260 <spi_disable+0x50>)
    e226:	4798      	blx	r3
    e228:	0003      	movs	r3, r0
    e22a:	0018      	movs	r0, r3
    e22c:	4b0d      	ldr	r3, [pc, #52]	; (e264 <spi_disable+0x54>)
    e22e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    e230:	46c0      	nop			; (mov r8, r8)
    e232:	687b      	ldr	r3, [r7, #4]
    e234:	0018      	movs	r0, r3
    e236:	4b0c      	ldr	r3, [pc, #48]	; (e268 <spi_disable+0x58>)
    e238:	4798      	blx	r3
    e23a:	1e03      	subs	r3, r0, #0
    e23c:	d1f9      	bne.n	e232 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    e23e:	68fb      	ldr	r3, [r7, #12]
    e240:	228f      	movs	r2, #143	; 0x8f
    e242:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    e244:	68fb      	ldr	r3, [r7, #12]
    e246:	228f      	movs	r2, #143	; 0x8f
    e248:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    e24a:	68fb      	ldr	r3, [r7, #12]
    e24c:	681b      	ldr	r3, [r3, #0]
    e24e:	2202      	movs	r2, #2
    e250:	4393      	bics	r3, r2
    e252:	001a      	movs	r2, r3
    e254:	68fb      	ldr	r3, [r7, #12]
    e256:	601a      	str	r2, [r3, #0]
}
    e258:	46c0      	nop			; (mov r8, r8)
    e25a:	46bd      	mov	sp, r7
    e25c:	b004      	add	sp, #16
    e25e:	bd80      	pop	{r7, pc}
    e260:	000151ed 	.word	0x000151ed
    e264:	0000dfc9 	.word	0x0000dfc9
    e268:	0000e095 	.word	0x0000e095

0000e26c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    e26c:	b580      	push	{r7, lr}
    e26e:	b084      	sub	sp, #16
    e270:	af00      	add	r7, sp, #0
    e272:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e274:	687b      	ldr	r3, [r7, #4]
    e276:	681b      	ldr	r3, [r3, #0]
    e278:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e27a:	68fb      	ldr	r3, [r7, #12]
    e27c:	7e1b      	ldrb	r3, [r3, #24]
    e27e:	b2db      	uxtb	r3, r3
    e280:	001a      	movs	r2, r3
    e282:	2302      	movs	r3, #2
    e284:	4013      	ands	r3, r2
    e286:	1e5a      	subs	r2, r3, #1
    e288:	4193      	sbcs	r3, r2
    e28a:	b2db      	uxtb	r3, r3
}
    e28c:	0018      	movs	r0, r3
    e28e:	46bd      	mov	sp, r7
    e290:	b004      	add	sp, #16
    e292:	bd80      	pop	{r7, pc}

0000e294 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    e294:	b580      	push	{r7, lr}
    e296:	b084      	sub	sp, #16
    e298:	af00      	add	r7, sp, #0
    e29a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e29c:	687b      	ldr	r3, [r7, #4]
    e29e:	681b      	ldr	r3, [r3, #0]
    e2a0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e2a2:	68fb      	ldr	r3, [r7, #12]
    e2a4:	7e1b      	ldrb	r3, [r3, #24]
    e2a6:	b2db      	uxtb	r3, r3
    e2a8:	001a      	movs	r2, r3
    e2aa:	2301      	movs	r3, #1
    e2ac:	4013      	ands	r3, r2
    e2ae:	1e5a      	subs	r2, r3, #1
    e2b0:	4193      	sbcs	r3, r2
    e2b2:	b2db      	uxtb	r3, r3
}
    e2b4:	0018      	movs	r0, r3
    e2b6:	46bd      	mov	sp, r7
    e2b8:	b004      	add	sp, #16
    e2ba:	bd80      	pop	{r7, pc}

0000e2bc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    e2bc:	b580      	push	{r7, lr}
    e2be:	b084      	sub	sp, #16
    e2c0:	af00      	add	r7, sp, #0
    e2c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e2c4:	687b      	ldr	r3, [r7, #4]
    e2c6:	681b      	ldr	r3, [r3, #0]
    e2c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e2ca:	68fb      	ldr	r3, [r7, #12]
    e2cc:	7e1b      	ldrb	r3, [r3, #24]
    e2ce:	b2db      	uxtb	r3, r3
    e2d0:	001a      	movs	r2, r3
    e2d2:	2304      	movs	r3, #4
    e2d4:	4013      	ands	r3, r2
    e2d6:	1e5a      	subs	r2, r3, #1
    e2d8:	4193      	sbcs	r3, r2
    e2da:	b2db      	uxtb	r3, r3
}
    e2dc:	0018      	movs	r0, r3
    e2de:	46bd      	mov	sp, r7
    e2e0:	b004      	add	sp, #16
    e2e2:	bd80      	pop	{r7, pc}

0000e2e4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    e2e4:	b580      	push	{r7, lr}
    e2e6:	b084      	sub	sp, #16
    e2e8:	af00      	add	r7, sp, #0
    e2ea:	6078      	str	r0, [r7, #4]
    e2ec:	000a      	movs	r2, r1
    e2ee:	1cbb      	adds	r3, r7, #2
    e2f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e2f2:	687b      	ldr	r3, [r7, #4]
    e2f4:	681b      	ldr	r3, [r3, #0]
    e2f6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    e2f8:	687b      	ldr	r3, [r7, #4]
    e2fa:	0018      	movs	r0, r3
    e2fc:	4b0a      	ldr	r3, [pc, #40]	; (e328 <spi_write+0x44>)
    e2fe:	4798      	blx	r3
    e300:	0003      	movs	r3, r0
    e302:	001a      	movs	r2, r3
    e304:	2301      	movs	r3, #1
    e306:	4053      	eors	r3, r2
    e308:	b2db      	uxtb	r3, r3
    e30a:	2b00      	cmp	r3, #0
    e30c:	d001      	beq.n	e312 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    e30e:	2305      	movs	r3, #5
    e310:	e006      	b.n	e320 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e312:	1cbb      	adds	r3, r7, #2
    e314:	881b      	ldrh	r3, [r3, #0]
    e316:	05db      	lsls	r3, r3, #23
    e318:	0dda      	lsrs	r2, r3, #23
    e31a:	68fb      	ldr	r3, [r7, #12]
    e31c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    e31e:	2300      	movs	r3, #0
}
    e320:	0018      	movs	r0, r3
    e322:	46bd      	mov	sp, r7
    e324:	b004      	add	sp, #16
    e326:	bd80      	pop	{r7, pc}
    e328:	0000e295 	.word	0x0000e295

0000e32c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    e32c:	b580      	push	{r7, lr}
    e32e:	b084      	sub	sp, #16
    e330:	af00      	add	r7, sp, #0
    e332:	6078      	str	r0, [r7, #4]
    e334:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e336:	687b      	ldr	r3, [r7, #4]
    e338:	681b      	ldr	r3, [r3, #0]
    e33a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    e33c:	687b      	ldr	r3, [r7, #4]
    e33e:	0018      	movs	r0, r3
    e340:	4b1b      	ldr	r3, [pc, #108]	; (e3b0 <spi_read+0x84>)
    e342:	4798      	blx	r3
    e344:	0003      	movs	r3, r0
    e346:	001a      	movs	r2, r3
    e348:	2301      	movs	r3, #1
    e34a:	4053      	eors	r3, r2
    e34c:	b2db      	uxtb	r3, r3
    e34e:	2b00      	cmp	r3, #0
    e350:	d001      	beq.n	e356 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    e352:	2310      	movs	r3, #16
    e354:	e027      	b.n	e3a6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    e356:	230f      	movs	r3, #15
    e358:	18fb      	adds	r3, r7, r3
    e35a:	2200      	movs	r2, #0
    e35c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e35e:	68bb      	ldr	r3, [r7, #8]
    e360:	8b5b      	ldrh	r3, [r3, #26]
    e362:	b29b      	uxth	r3, r3
    e364:	001a      	movs	r2, r3
    e366:	2304      	movs	r3, #4
    e368:	4013      	ands	r3, r2
    e36a:	d006      	beq.n	e37a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    e36c:	230f      	movs	r3, #15
    e36e:	18fb      	adds	r3, r7, r3
    e370:	221e      	movs	r2, #30
    e372:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e374:	68bb      	ldr	r3, [r7, #8]
    e376:	2204      	movs	r2, #4
    e378:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e37a:	687b      	ldr	r3, [r7, #4]
    e37c:	799b      	ldrb	r3, [r3, #6]
    e37e:	2b01      	cmp	r3, #1
    e380:	d108      	bne.n	e394 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e382:	68bb      	ldr	r3, [r7, #8]
    e384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e386:	b29b      	uxth	r3, r3
    e388:	05db      	lsls	r3, r3, #23
    e38a:	0ddb      	lsrs	r3, r3, #23
    e38c:	b29a      	uxth	r2, r3
    e38e:	683b      	ldr	r3, [r7, #0]
    e390:	801a      	strh	r2, [r3, #0]
    e392:	e005      	b.n	e3a0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e394:	68bb      	ldr	r3, [r7, #8]
    e396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e398:	b2db      	uxtb	r3, r3
    e39a:	b29a      	uxth	r2, r3
    e39c:	683b      	ldr	r3, [r7, #0]
    e39e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    e3a0:	230f      	movs	r3, #15
    e3a2:	18fb      	adds	r3, r7, r3
    e3a4:	781b      	ldrb	r3, [r3, #0]
}
    e3a6:	0018      	movs	r0, r3
    e3a8:	46bd      	mov	sp, r7
    e3aa:	b004      	add	sp, #16
    e3ac:	bd80      	pop	{r7, pc}
    e3ae:	46c0      	nop			; (mov r8, r8)
    e3b0:	0000e2bd 	.word	0x0000e2bd

0000e3b4 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    e3b4:	b580      	push	{r7, lr}
    e3b6:	b086      	sub	sp, #24
    e3b8:	af00      	add	r7, sp, #0
    e3ba:	60f8      	str	r0, [r7, #12]
    e3bc:	60b9      	str	r1, [r7, #8]
    e3be:	1dbb      	adds	r3, r7, #6
    e3c0:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
    e3c2:	2313      	movs	r3, #19
    e3c4:	18fb      	adds	r3, r7, r3
    e3c6:	22ff      	movs	r2, #255	; 0xff
    e3c8:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    e3ca:	2317      	movs	r3, #23
    e3cc:	18fb      	adds	r3, r7, r3
    e3ce:	2200      	movs	r2, #0
    e3d0:	701a      	strb	r2, [r3, #0]
    e3d2:	2316      	movs	r3, #22
    e3d4:	18fb      	adds	r3, r7, r3
    e3d6:	2200      	movs	r2, #0
    e3d8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    e3da:	2314      	movs	r3, #20
    e3dc:	18fb      	adds	r3, r7, r3
    e3de:	2200      	movs	r2, #0
    e3e0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    e3e2:	2310      	movs	r3, #16
    e3e4:	18fb      	adds	r3, r7, r3
    e3e6:	2200      	movs	r2, #0
    e3e8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    e3ea:	68bb      	ldr	r3, [r7, #8]
    e3ec:	2b00      	cmp	r3, #0
    e3ee:	d102      	bne.n	e3f6 <spi_rw+0x42>
    e3f0:	68fb      	ldr	r3, [r7, #12]
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	d003      	beq.n	e3fe <spi_rw+0x4a>
    e3f6:	1dbb      	adds	r3, r7, #6
    e3f8:	881b      	ldrh	r3, [r3, #0]
    e3fa:	2b00      	cmp	r3, #0
    e3fc:	d102      	bne.n	e404 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    e3fe:	230f      	movs	r3, #15
    e400:	425b      	negs	r3, r3
    e402:	e07e      	b.n	e502 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    e404:	68fb      	ldr	r3, [r7, #12]
    e406:	2b00      	cmp	r3, #0
    e408:	d106      	bne.n	e418 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    e40a:	2313      	movs	r3, #19
    e40c:	18fb      	adds	r3, r7, r3
    e40e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    e410:	2317      	movs	r3, #23
    e412:	18fb      	adds	r3, r7, r3
    e414:	2201      	movs	r2, #1
    e416:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    e418:	68bb      	ldr	r3, [r7, #8]
    e41a:	2b00      	cmp	r3, #0
    e41c:	d106      	bne.n	e42c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    e41e:	2313      	movs	r3, #19
    e420:	18fb      	adds	r3, r7, r3
    e422:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    e424:	2316      	movs	r3, #22
    e426:	18fb      	adds	r3, r7, r3
    e428:	2201      	movs	r2, #1
    e42a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    e42c:	4937      	ldr	r1, [pc, #220]	; (e50c <spi_rw+0x158>)
    e42e:	4b38      	ldr	r3, [pc, #224]	; (e510 <spi_rw+0x15c>)
    e430:	2201      	movs	r2, #1
    e432:	0018      	movs	r0, r3
    e434:	4b37      	ldr	r3, [pc, #220]	; (e514 <spi_rw+0x160>)
    e436:	4798      	blx	r3

	while (u16Sz) {
    e438:	e04c      	b.n	e4d4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    e43a:	68fb      	ldr	r3, [r7, #12]
    e43c:	781a      	ldrb	r2, [r3, #0]
    e43e:	2314      	movs	r3, #20
    e440:	18fb      	adds	r3, r7, r3
    e442:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    e444:	46c0      	nop			; (mov r8, r8)
    e446:	4b32      	ldr	r3, [pc, #200]	; (e510 <spi_rw+0x15c>)
    e448:	0018      	movs	r0, r3
    e44a:	4b33      	ldr	r3, [pc, #204]	; (e518 <spi_rw+0x164>)
    e44c:	4798      	blx	r3
    e44e:	0003      	movs	r3, r0
    e450:	001a      	movs	r2, r3
    e452:	2301      	movs	r3, #1
    e454:	4053      	eors	r3, r2
    e456:	b2db      	uxtb	r3, r3
    e458:	2b00      	cmp	r3, #0
    e45a:	d1f4      	bne.n	e446 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    e45c:	46c0      	nop			; (mov r8, r8)
    e45e:	2314      	movs	r3, #20
    e460:	18fb      	adds	r3, r7, r3
    e462:	881a      	ldrh	r2, [r3, #0]
    e464:	4b2a      	ldr	r3, [pc, #168]	; (e510 <spi_rw+0x15c>)
    e466:	0011      	movs	r1, r2
    e468:	0018      	movs	r0, r3
    e46a:	4b2c      	ldr	r3, [pc, #176]	; (e51c <spi_rw+0x168>)
    e46c:	4798      	blx	r3
    e46e:	1e03      	subs	r3, r0, #0
    e470:	d1f5      	bne.n	e45e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    e472:	46c0      	nop			; (mov r8, r8)
    e474:	4b26      	ldr	r3, [pc, #152]	; (e510 <spi_rw+0x15c>)
    e476:	0018      	movs	r0, r3
    e478:	4b29      	ldr	r3, [pc, #164]	; (e520 <spi_rw+0x16c>)
    e47a:	4798      	blx	r3
    e47c:	0003      	movs	r3, r0
    e47e:	001a      	movs	r2, r3
    e480:	2301      	movs	r3, #1
    e482:	4053      	eors	r3, r2
    e484:	b2db      	uxtb	r3, r3
    e486:	2b00      	cmp	r3, #0
    e488:	d1f4      	bne.n	e474 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    e48a:	46c0      	nop			; (mov r8, r8)
    e48c:	2310      	movs	r3, #16
    e48e:	18fa      	adds	r2, r7, r3
    e490:	4b1f      	ldr	r3, [pc, #124]	; (e510 <spi_rw+0x15c>)
    e492:	0011      	movs	r1, r2
    e494:	0018      	movs	r0, r3
    e496:	4b23      	ldr	r3, [pc, #140]	; (e524 <spi_rw+0x170>)
    e498:	4798      	blx	r3
    e49a:	1e03      	subs	r3, r0, #0
    e49c:	d1f6      	bne.n	e48c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    e49e:	2310      	movs	r3, #16
    e4a0:	18fb      	adds	r3, r7, r3
    e4a2:	881b      	ldrh	r3, [r3, #0]
    e4a4:	b2da      	uxtb	r2, r3
    e4a6:	68bb      	ldr	r3, [r7, #8]
    e4a8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    e4aa:	1dbb      	adds	r3, r7, #6
    e4ac:	881a      	ldrh	r2, [r3, #0]
    e4ae:	1dbb      	adds	r3, r7, #6
    e4b0:	3a01      	subs	r2, #1
    e4b2:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    e4b4:	2316      	movs	r3, #22
    e4b6:	18fb      	adds	r3, r7, r3
    e4b8:	781b      	ldrb	r3, [r3, #0]
    e4ba:	2b00      	cmp	r3, #0
    e4bc:	d102      	bne.n	e4c4 <spi_rw+0x110>
			pu8Miso++;
    e4be:	68bb      	ldr	r3, [r7, #8]
    e4c0:	3301      	adds	r3, #1
    e4c2:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    e4c4:	2317      	movs	r3, #23
    e4c6:	18fb      	adds	r3, r7, r3
    e4c8:	781b      	ldrb	r3, [r3, #0]
    e4ca:	2b00      	cmp	r3, #0
    e4cc:	d102      	bne.n	e4d4 <spi_rw+0x120>
			pu8Mosi++;
    e4ce:	68fb      	ldr	r3, [r7, #12]
    e4d0:	3301      	adds	r3, #1
    e4d2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    e4d4:	1dbb      	adds	r3, r7, #6
    e4d6:	881b      	ldrh	r3, [r3, #0]
    e4d8:	2b00      	cmp	r3, #0
    e4da:	d1ae      	bne.n	e43a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    e4dc:	46c0      	nop			; (mov r8, r8)
    e4de:	4b0c      	ldr	r3, [pc, #48]	; (e510 <spi_rw+0x15c>)
    e4e0:	0018      	movs	r0, r3
    e4e2:	4b11      	ldr	r3, [pc, #68]	; (e528 <spi_rw+0x174>)
    e4e4:	4798      	blx	r3
    e4e6:	0003      	movs	r3, r0
    e4e8:	001a      	movs	r2, r3
    e4ea:	2301      	movs	r3, #1
    e4ec:	4053      	eors	r3, r2
    e4ee:	b2db      	uxtb	r3, r3
    e4f0:	2b00      	cmp	r3, #0
    e4f2:	d1f4      	bne.n	e4de <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    e4f4:	4905      	ldr	r1, [pc, #20]	; (e50c <spi_rw+0x158>)
    e4f6:	4b06      	ldr	r3, [pc, #24]	; (e510 <spi_rw+0x15c>)
    e4f8:	2200      	movs	r2, #0
    e4fa:	0018      	movs	r0, r3
    e4fc:	4b05      	ldr	r3, [pc, #20]	; (e514 <spi_rw+0x160>)
    e4fe:	4798      	blx	r3

	return M2M_SUCCESS;
    e500:	2300      	movs	r3, #0
}
    e502:	0018      	movs	r0, r3
    e504:	46bd      	mov	sp, r7
    e506:	b006      	add	sp, #24
    e508:	bd80      	pop	{r7, pc}
    e50a:	46c0      	nop			; (mov r8, r8)
    e50c:	20005b74 	.word	0x20005b74
    e510:	20005b78 	.word	0x20005b78
    e514:	00015c61 	.word	0x00015c61
    e518:	0000e295 	.word	0x0000e295
    e51c:	0000e2e5 	.word	0x0000e2e5
    e520:	0000e2bd 	.word	0x0000e2bd
    e524:	0000e32d 	.word	0x0000e32d
    e528:	0000e26d 	.word	0x0000e26d

0000e52c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    e52c:	b580      	push	{r7, lr}
    e52e:	b092      	sub	sp, #72	; 0x48
    e530:	af00      	add	r7, sp, #0
    e532:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    e534:	2347      	movs	r3, #71	; 0x47
    e536:	18fb      	adds	r3, r7, r3
    e538:	2200      	movs	r2, #0
    e53a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    e53c:	2308      	movs	r3, #8
    e53e:	18fb      	adds	r3, r7, r3
    e540:	0018      	movs	r0, r3
    e542:	4b26      	ldr	r3, [pc, #152]	; (e5dc <nm_bus_init+0xb0>)
    e544:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    e546:	2308      	movs	r3, #8
    e548:	18fb      	adds	r3, r7, r3
    e54a:	220e      	movs	r2, #14
    e54c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    e54e:	2308      	movs	r3, #8
    e550:	18fa      	adds	r2, r7, r3
    e552:	4b23      	ldr	r3, [pc, #140]	; (e5e0 <nm_bus_init+0xb4>)
    e554:	0011      	movs	r1, r2
    e556:	0018      	movs	r0, r3
    e558:	4b22      	ldr	r3, [pc, #136]	; (e5e4 <nm_bus_init+0xb8>)
    e55a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    e55c:	230c      	movs	r3, #12
    e55e:	18fb      	adds	r3, r7, r3
    e560:	0018      	movs	r0, r3
    e562:	4b21      	ldr	r3, [pc, #132]	; (e5e8 <nm_bus_init+0xbc>)
    e564:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    e566:	230c      	movs	r3, #12
    e568:	18fb      	adds	r3, r7, r3
    e56a:	22c0      	movs	r2, #192	; 0xc0
    e56c:	0392      	lsls	r2, r2, #14
    e56e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    e570:	230c      	movs	r3, #12
    e572:	18fb      	adds	r3, r7, r3
    e574:	4a1d      	ldr	r2, [pc, #116]	; (e5ec <nm_bus_init+0xc0>)
    e576:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    e578:	230c      	movs	r3, #12
    e57a:	18fb      	adds	r3, r7, r3
    e57c:	4a1c      	ldr	r2, [pc, #112]	; (e5f0 <nm_bus_init+0xc4>)
    e57e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    e580:	230c      	movs	r3, #12
    e582:	18fb      	adds	r3, r7, r3
    e584:	2201      	movs	r2, #1
    e586:	4252      	negs	r2, r2
    e588:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    e58a:	230c      	movs	r3, #12
    e58c:	18fb      	adds	r3, r7, r3
    e58e:	4a19      	ldr	r2, [pc, #100]	; (e5f4 <nm_bus_init+0xc8>)
    e590:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    e592:	230c      	movs	r3, #12
    e594:	18fb      	adds	r3, r7, r3
    e596:	2200      	movs	r2, #0
    e598:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    e59a:	230c      	movs	r3, #12
    e59c:	18fb      	adds	r3, r7, r3
    e59e:	4a16      	ldr	r2, [pc, #88]	; (e5f8 <nm_bus_init+0xcc>)
    e5a0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    e5a2:	230c      	movs	r3, #12
    e5a4:	18fa      	adds	r2, r7, r3
    e5a6:	4915      	ldr	r1, [pc, #84]	; (e5fc <nm_bus_init+0xd0>)
    e5a8:	4b15      	ldr	r3, [pc, #84]	; (e600 <nm_bus_init+0xd4>)
    e5aa:	0018      	movs	r0, r3
    e5ac:	4b15      	ldr	r3, [pc, #84]	; (e604 <nm_bus_init+0xd8>)
    e5ae:	4798      	blx	r3
    e5b0:	1e03      	subs	r3, r0, #0
    e5b2:	d002      	beq.n	e5ba <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    e5b4:	2306      	movs	r3, #6
    e5b6:	425b      	negs	r3, r3
    e5b8:	e00c      	b.n	e5d4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    e5ba:	4b11      	ldr	r3, [pc, #68]	; (e600 <nm_bus_init+0xd4>)
    e5bc:	0018      	movs	r0, r3
    e5be:	4b12      	ldr	r3, [pc, #72]	; (e608 <nm_bus_init+0xdc>)
    e5c0:	4798      	blx	r3

	nm_bsp_reset();
    e5c2:	4b12      	ldr	r3, [pc, #72]	; (e60c <nm_bus_init+0xe0>)
    e5c4:	4798      	blx	r3
	nm_bsp_sleep(1);
    e5c6:	2001      	movs	r0, #1
    e5c8:	4b11      	ldr	r3, [pc, #68]	; (e610 <nm_bus_init+0xe4>)
    e5ca:	4798      	blx	r3
#endif
	return result;
    e5cc:	2347      	movs	r3, #71	; 0x47
    e5ce:	18fb      	adds	r3, r7, r3
    e5d0:	781b      	ldrb	r3, [r3, #0]
    e5d2:	b25b      	sxtb	r3, r3
}
    e5d4:	0018      	movs	r0, r3
    e5d6:	46bd      	mov	sp, r7
    e5d8:	b012      	add	sp, #72	; 0x48
    e5da:	bd80      	pop	{r7, pc}
    e5dc:	0000e139 	.word	0x0000e139
    e5e0:	20005b74 	.word	0x20005b74
    e5e4:	0000e15d 	.word	0x0000e15d
    e5e8:	0000e0b5 	.word	0x0000e0b5
    e5ec:	000c0002 	.word	0x000c0002
    e5f0:	000d0002 	.word	0x000d0002
    e5f4:	000f0002 	.word	0x000f0002
    e5f8:	00124f80 	.word	0x00124f80
    e5fc:	42001000 	.word	0x42001000
    e600:	20005b78 	.word	0x20005b78
    e604:	0001599d 	.word	0x0001599d
    e608:	0000e1c1 	.word	0x0000e1c1
    e60c:	0000de31 	.word	0x0000de31
    e610:	0000de71 	.word	0x0000de71

0000e614 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    e614:	b590      	push	{r4, r7, lr}
    e616:	b085      	sub	sp, #20
    e618:	af00      	add	r7, sp, #0
    e61a:	0002      	movs	r2, r0
    e61c:	6039      	str	r1, [r7, #0]
    e61e:	1dfb      	adds	r3, r7, #7
    e620:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    e622:	230f      	movs	r3, #15
    e624:	18fb      	adds	r3, r7, r3
    e626:	2200      	movs	r2, #0
    e628:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    e62a:	1dfb      	adds	r3, r7, #7
    e62c:	781b      	ldrb	r3, [r3, #0]
    e62e:	2b03      	cmp	r3, #3
    e630:	d10f      	bne.n	e652 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    e632:	683b      	ldr	r3, [r7, #0]
    e634:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    e636:	68bb      	ldr	r3, [r7, #8]
    e638:	6818      	ldr	r0, [r3, #0]
    e63a:	68bb      	ldr	r3, [r7, #8]
    e63c:	6859      	ldr	r1, [r3, #4]
    e63e:	68bb      	ldr	r3, [r7, #8]
    e640:	891b      	ldrh	r3, [r3, #8]
    e642:	220f      	movs	r2, #15
    e644:	18bc      	adds	r4, r7, r2
    e646:	001a      	movs	r2, r3
    e648:	4b10      	ldr	r3, [pc, #64]	; (e68c <nm_bus_ioctl+0x78>)
    e64a:	4798      	blx	r3
    e64c:	0003      	movs	r3, r0
    e64e:	7023      	strb	r3, [r4, #0]
		}
		break;
    e650:	e013      	b.n	e67a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    e652:	230f      	movs	r3, #15
    e654:	18fb      	adds	r3, r7, r3
    e656:	22ff      	movs	r2, #255	; 0xff
    e658:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    e65a:	2383      	movs	r3, #131	; 0x83
    e65c:	005a      	lsls	r2, r3, #1
    e65e:	490c      	ldr	r1, [pc, #48]	; (e690 <nm_bus_ioctl+0x7c>)
    e660:	4b0c      	ldr	r3, [pc, #48]	; (e694 <nm_bus_ioctl+0x80>)
    e662:	0018      	movs	r0, r3
    e664:	4b0c      	ldr	r3, [pc, #48]	; (e698 <nm_bus_ioctl+0x84>)
    e666:	4798      	blx	r3
    e668:	4b0c      	ldr	r3, [pc, #48]	; (e69c <nm_bus_ioctl+0x88>)
    e66a:	0018      	movs	r0, r3
    e66c:	4b0a      	ldr	r3, [pc, #40]	; (e698 <nm_bus_ioctl+0x84>)
    e66e:	4798      	blx	r3
    e670:	4b0b      	ldr	r3, [pc, #44]	; (e6a0 <nm_bus_ioctl+0x8c>)
    e672:	0018      	movs	r0, r3
    e674:	4b08      	ldr	r3, [pc, #32]	; (e698 <nm_bus_ioctl+0x84>)
    e676:	4798      	blx	r3
			break;
    e678:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    e67a:	230f      	movs	r3, #15
    e67c:	18fb      	adds	r3, r7, r3
    e67e:	781b      	ldrb	r3, [r3, #0]
    e680:	b25b      	sxtb	r3, r3
}
    e682:	0018      	movs	r0, r3
    e684:	46bd      	mov	sp, r7
    e686:	b005      	add	sp, #20
    e688:	bd90      	pop	{r4, r7, pc}
    e68a:	46c0      	nop			; (mov r8, r8)
    e68c:	0000e3b5 	.word	0x0000e3b5
    e690:	0002710c 	.word	0x0002710c
    e694:	000270e0 	.word	0x000270e0
    e698:	0000b9b9 	.word	0x0000b9b9
    e69c:	000270f4 	.word	0x000270f4
    e6a0:	00027108 	.word	0x00027108

0000e6a4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    e6a4:	b580      	push	{r7, lr}
    e6a6:	b082      	sub	sp, #8
    e6a8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    e6aa:	1dfb      	adds	r3, r7, #7
    e6ac:	2200      	movs	r2, #0
    e6ae:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    e6b0:	1d3b      	adds	r3, r7, #4
    e6b2:	0018      	movs	r0, r3
    e6b4:	4b13      	ldr	r3, [pc, #76]	; (e704 <nm_bus_deinit+0x60>)
    e6b6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    e6b8:	1d3b      	adds	r3, r7, #4
    e6ba:	2200      	movs	r2, #0
    e6bc:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    e6be:	1d3b      	adds	r3, r7, #4
    e6c0:	2200      	movs	r2, #0
    e6c2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    e6c4:	4b10      	ldr	r3, [pc, #64]	; (e708 <nm_bus_deinit+0x64>)
    e6c6:	0018      	movs	r0, r3
    e6c8:	4b10      	ldr	r3, [pc, #64]	; (e70c <nm_bus_deinit+0x68>)
    e6ca:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    e6cc:	1d3b      	adds	r3, r7, #4
    e6ce:	0019      	movs	r1, r3
    e6d0:	200c      	movs	r0, #12
    e6d2:	4b0f      	ldr	r3, [pc, #60]	; (e710 <nm_bus_deinit+0x6c>)
    e6d4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    e6d6:	1d3b      	adds	r3, r7, #4
    e6d8:	0019      	movs	r1, r3
    e6da:	200f      	movs	r0, #15
    e6dc:	4b0c      	ldr	r3, [pc, #48]	; (e710 <nm_bus_deinit+0x6c>)
    e6de:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    e6e0:	1d3b      	adds	r3, r7, #4
    e6e2:	0019      	movs	r1, r3
    e6e4:	200d      	movs	r0, #13
    e6e6:	4b0a      	ldr	r3, [pc, #40]	; (e710 <nm_bus_deinit+0x6c>)
    e6e8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    e6ea:	1d3b      	adds	r3, r7, #4
    e6ec:	0019      	movs	r1, r3
    e6ee:	200e      	movs	r0, #14
    e6f0:	4b07      	ldr	r3, [pc, #28]	; (e710 <nm_bus_deinit+0x6c>)
    e6f2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    e6f4:	1dfb      	adds	r3, r7, #7
    e6f6:	781b      	ldrb	r3, [r3, #0]
    e6f8:	b25b      	sxtb	r3, r3
}
    e6fa:	0018      	movs	r0, r3
    e6fc:	46bd      	mov	sp, r7
    e6fe:	b002      	add	sp, #8
    e700:	bd80      	pop	{r7, pc}
    e702:	46c0      	nop			; (mov r8, r8)
    e704:	0000e01d 	.word	0x0000e01d
    e708:	20005b78 	.word	0x20005b78
    e70c:	0000e211 	.word	0x0000e211
    e710:	0001451d 	.word	0x0001451d

0000e714 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    e714:	b580      	push	{r7, lr}
    e716:	b084      	sub	sp, #16
    e718:	af00      	add	r7, sp, #0
    e71a:	60f8      	str	r0, [r7, #12]
    e71c:	60b9      	str	r1, [r7, #8]
    e71e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    e720:	687b      	ldr	r3, [r7, #4]
    e722:	2b00      	cmp	r3, #0
    e724:	d010      	beq.n	e748 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    e726:	68bb      	ldr	r3, [r7, #8]
    e728:	781a      	ldrb	r2, [r3, #0]
    e72a:	68fb      	ldr	r3, [r7, #12]
    e72c:	701a      	strb	r2, [r3, #0]
		pDst++;
    e72e:	68fb      	ldr	r3, [r7, #12]
    e730:	3301      	adds	r3, #1
    e732:	60fb      	str	r3, [r7, #12]
		pSrc++;
    e734:	68bb      	ldr	r3, [r7, #8]
    e736:	3301      	adds	r3, #1
    e738:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    e73a:	687b      	ldr	r3, [r7, #4]
    e73c:	3b01      	subs	r3, #1
    e73e:	607b      	str	r3, [r7, #4]
    e740:	687b      	ldr	r3, [r7, #4]
    e742:	2b00      	cmp	r3, #0
    e744:	d1ef      	bne.n	e726 <m2m_memcpy+0x12>
    e746:	e000      	b.n	e74a <m2m_memcpy+0x36>
	if(sz == 0) return;
    e748:	46c0      	nop			; (mov r8, r8)
}
    e74a:	46bd      	mov	sp, r7
    e74c:	b004      	add	sp, #16
    e74e:	bd80      	pop	{r7, pc}

0000e750 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    e750:	b580      	push	{r7, lr}
    e752:	b084      	sub	sp, #16
    e754:	af00      	add	r7, sp, #0
    e756:	60f8      	str	r0, [r7, #12]
    e758:	607a      	str	r2, [r7, #4]
    e75a:	230b      	movs	r3, #11
    e75c:	18fb      	adds	r3, r7, r3
    e75e:	1c0a      	adds	r2, r1, #0
    e760:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    e762:	687b      	ldr	r3, [r7, #4]
    e764:	2b00      	cmp	r3, #0
    e766:	d00e      	beq.n	e786 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    e768:	68fb      	ldr	r3, [r7, #12]
    e76a:	220b      	movs	r2, #11
    e76c:	18ba      	adds	r2, r7, r2
    e76e:	7812      	ldrb	r2, [r2, #0]
    e770:	701a      	strb	r2, [r3, #0]
		pBuf++;
    e772:	68fb      	ldr	r3, [r7, #12]
    e774:	3301      	adds	r3, #1
    e776:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    e778:	687b      	ldr	r3, [r7, #4]
    e77a:	3b01      	subs	r3, #1
    e77c:	607b      	str	r3, [r7, #4]
    e77e:	687b      	ldr	r3, [r7, #4]
    e780:	2b00      	cmp	r3, #0
    e782:	d1f1      	bne.n	e768 <m2m_memset+0x18>
    e784:	e000      	b.n	e788 <m2m_memset+0x38>
	if(sz == 0) return;
    e786:	46c0      	nop			; (mov r8, r8)
}
    e788:	46bd      	mov	sp, r7
    e78a:	b004      	add	sp, #16
    e78c:	bd80      	pop	{r7, pc}

0000e78e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    e78e:	b580      	push	{r7, lr}
    e790:	b084      	sub	sp, #16
    e792:	af00      	add	r7, sp, #0
    e794:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    e796:	230e      	movs	r3, #14
    e798:	18fb      	adds	r3, r7, r3
    e79a:	2200      	movs	r2, #0
    e79c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    e79e:	e009      	b.n	e7b4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    e7a0:	230e      	movs	r3, #14
    e7a2:	18fb      	adds	r3, r7, r3
    e7a4:	881a      	ldrh	r2, [r3, #0]
    e7a6:	230e      	movs	r3, #14
    e7a8:	18fb      	adds	r3, r7, r3
    e7aa:	3201      	adds	r2, #1
    e7ac:	801a      	strh	r2, [r3, #0]
		pcStr++;
    e7ae:	687b      	ldr	r3, [r7, #4]
    e7b0:	3301      	adds	r3, #1
    e7b2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    e7b4:	687b      	ldr	r3, [r7, #4]
    e7b6:	781b      	ldrb	r3, [r3, #0]
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	d1f1      	bne.n	e7a0 <m2m_strlen+0x12>
	}
	return u16StrLen;
    e7bc:	230e      	movs	r3, #14
    e7be:	18fb      	adds	r3, r7, r3
    e7c0:	881b      	ldrh	r3, [r3, #0]
}
    e7c2:	0018      	movs	r0, r3
    e7c4:	46bd      	mov	sp, r7
    e7c6:	b004      	add	sp, #16
    e7c8:	bd80      	pop	{r7, pc}
	...

0000e7cc <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
    e7cc:	b580      	push	{r7, lr}
    e7ce:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    e7d0:	4b04      	ldr	r3, [pc, #16]	; (e7e4 <isr+0x18>)
    e7d2:	78db      	ldrb	r3, [r3, #3]
    e7d4:	b2db      	uxtb	r3, r3
    e7d6:	3301      	adds	r3, #1
    e7d8:	b2da      	uxtb	r2, r3
    e7da:	4b02      	ldr	r3, [pc, #8]	; (e7e4 <isr+0x18>)
    e7dc:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    e7de:	46c0      	nop			; (mov r8, r8)
    e7e0:	46bd      	mov	sp, r7
    e7e2:	bd80      	pop	{r7, pc}
    e7e4:	20005bb4 	.word	0x20005bb4

0000e7e8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    e7e8:	b590      	push	{r4, r7, lr}
    e7ea:	b083      	sub	sp, #12
    e7ec:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    e7ee:	1dfb      	adds	r3, r7, #7
    e7f0:	2200      	movs	r2, #0
    e7f2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    e7f4:	4b14      	ldr	r3, [pc, #80]	; (e848 <hif_set_rx_done+0x60>)
    e7f6:	2200      	movs	r2, #0
    e7f8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    e7fa:	2001      	movs	r0, #1
    e7fc:	4b13      	ldr	r3, [pc, #76]	; (e84c <hif_set_rx_done+0x64>)
    e7fe:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    e800:	1dfc      	adds	r4, r7, #7
    e802:	003b      	movs	r3, r7
    e804:	4a12      	ldr	r2, [pc, #72]	; (e850 <hif_set_rx_done+0x68>)
    e806:	0019      	movs	r1, r3
    e808:	0010      	movs	r0, r2
    e80a:	4b12      	ldr	r3, [pc, #72]	; (e854 <hif_set_rx_done+0x6c>)
    e80c:	4798      	blx	r3
    e80e:	0003      	movs	r3, r0
    e810:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    e812:	1dfb      	adds	r3, r7, #7
    e814:	781b      	ldrb	r3, [r3, #0]
    e816:	b25b      	sxtb	r3, r3
    e818:	2b00      	cmp	r3, #0
    e81a:	d10d      	bne.n	e838 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    e81c:	683b      	ldr	r3, [r7, #0]
    e81e:	2202      	movs	r2, #2
    e820:	4313      	orrs	r3, r2
    e822:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    e824:	683b      	ldr	r3, [r7, #0]
    e826:	1dfc      	adds	r4, r7, #7
    e828:	4a09      	ldr	r2, [pc, #36]	; (e850 <hif_set_rx_done+0x68>)
    e82a:	0019      	movs	r1, r3
    e82c:	0010      	movs	r0, r2
    e82e:	4b0a      	ldr	r3, [pc, #40]	; (e858 <hif_set_rx_done+0x70>)
    e830:	4798      	blx	r3
    e832:	0003      	movs	r3, r0
    e834:	7023      	strb	r3, [r4, #0]
    e836:	e000      	b.n	e83a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    e838:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    e83a:	1dfb      	adds	r3, r7, #7
    e83c:	781b      	ldrb	r3, [r3, #0]
    e83e:	b25b      	sxtb	r3, r3

}
    e840:	0018      	movs	r0, r3
    e842:	46bd      	mov	sp, r7
    e844:	b003      	add	sp, #12
    e846:	bd90      	pop	{r4, r7, pc}
    e848:	20005bb4 	.word	0x20005bb4
    e84c:	0000df05 	.word	0x0000df05
    e850:	00001070 	.word	0x00001070
    e854:	000107e1 	.word	0x000107e1
    e858:	00010805 	.word	0x00010805

0000e85c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    e85c:	b580      	push	{r7, lr}
    e85e:	b082      	sub	sp, #8
    e860:	af00      	add	r7, sp, #0
    e862:	603a      	str	r2, [r7, #0]
    e864:	1dfb      	adds	r3, r7, #7
    e866:	1c02      	adds	r2, r0, #0
    e868:	701a      	strb	r2, [r3, #0]
    e86a:	1d3b      	adds	r3, r7, #4
    e86c:	1c0a      	adds	r2, r1, #0
    e86e:	801a      	strh	r2, [r3, #0]


}
    e870:	46c0      	nop			; (mov r8, r8)
    e872:	46bd      	mov	sp, r7
    e874:	b002      	add	sp, #8
    e876:	bd80      	pop	{r7, pc}

0000e878 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    e878:	b590      	push	{r4, r7, lr}
    e87a:	b083      	sub	sp, #12
    e87c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    e87e:	1dfb      	adds	r3, r7, #7
    e880:	2200      	movs	r2, #0
    e882:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    e884:	4b16      	ldr	r3, [pc, #88]	; (e8e0 <hif_chip_wake+0x68>)
    e886:	789b      	ldrb	r3, [r3, #2]
    e888:	b2db      	uxtb	r3, r3
    e88a:	2b00      	cmp	r3, #0
    e88c:	d003      	beq.n	e896 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    e88e:	1dfb      	adds	r3, r7, #7
    e890:	781b      	ldrb	r3, [r3, #0]
    e892:	b25b      	sxtb	r3, r3
    e894:	e01f      	b.n	e8d6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    e896:	4b12      	ldr	r3, [pc, #72]	; (e8e0 <hif_chip_wake+0x68>)
    e898:	785b      	ldrb	r3, [r3, #1]
    e89a:	b2db      	uxtb	r3, r3
    e89c:	2b00      	cmp	r3, #0
    e89e:	d10e      	bne.n	e8be <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    e8a0:	4b0f      	ldr	r3, [pc, #60]	; (e8e0 <hif_chip_wake+0x68>)
    e8a2:	781b      	ldrb	r3, [r3, #0]
    e8a4:	b2db      	uxtb	r3, r3
    e8a6:	2b00      	cmp	r3, #0
    e8a8:	d009      	beq.n	e8be <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    e8aa:	1dfc      	adds	r4, r7, #7
    e8ac:	4b0d      	ldr	r3, [pc, #52]	; (e8e4 <hif_chip_wake+0x6c>)
    e8ae:	4798      	blx	r3
    e8b0:	0003      	movs	r3, r0
    e8b2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    e8b4:	1dfb      	adds	r3, r7, #7
    e8b6:	781b      	ldrb	r3, [r3, #0]
    e8b8:	b25b      	sxtb	r3, r3
    e8ba:	2b00      	cmp	r3, #0
    e8bc:	d107      	bne.n	e8ce <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    e8be:	4b08      	ldr	r3, [pc, #32]	; (e8e0 <hif_chip_wake+0x68>)
    e8c0:	785b      	ldrb	r3, [r3, #1]
    e8c2:	b2db      	uxtb	r3, r3
    e8c4:	3301      	adds	r3, #1
    e8c6:	b2da      	uxtb	r2, r3
    e8c8:	4b05      	ldr	r3, [pc, #20]	; (e8e0 <hif_chip_wake+0x68>)
    e8ca:	705a      	strb	r2, [r3, #1]
    e8cc:	e000      	b.n	e8d0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    e8ce:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    e8d0:	1dfb      	adds	r3, r7, #7
    e8d2:	781b      	ldrb	r3, [r3, #0]
    e8d4:	b25b      	sxtb	r3, r3
}
    e8d6:	0018      	movs	r0, r3
    e8d8:	46bd      	mov	sp, r7
    e8da:	b003      	add	sp, #12
    e8dc:	bd90      	pop	{r4, r7, pc}
    e8de:	46c0      	nop			; (mov r8, r8)
    e8e0:	20005bb4 	.word	0x20005bb4
    e8e4:	000102b1 	.word	0x000102b1

0000e8e8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    e8e8:	b580      	push	{r7, lr}
    e8ea:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    e8ec:	4b07      	ldr	r3, [pc, #28]	; (e90c <hif_chip_sleep_sc+0x24>)
    e8ee:	785b      	ldrb	r3, [r3, #1]
    e8f0:	b2db      	uxtb	r3, r3
    e8f2:	2b00      	cmp	r3, #0
    e8f4:	d006      	beq.n	e904 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    e8f6:	4b05      	ldr	r3, [pc, #20]	; (e90c <hif_chip_sleep_sc+0x24>)
    e8f8:	785b      	ldrb	r3, [r3, #1]
    e8fa:	b2db      	uxtb	r3, r3
    e8fc:	3b01      	subs	r3, #1
    e8fe:	b2da      	uxtb	r2, r3
    e900:	4b02      	ldr	r3, [pc, #8]	; (e90c <hif_chip_sleep_sc+0x24>)
    e902:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    e904:	2300      	movs	r3, #0
}
    e906:	0018      	movs	r0, r3
    e908:	46bd      	mov	sp, r7
    e90a:	bd80      	pop	{r7, pc}
    e90c:	20005bb4 	.word	0x20005bb4

0000e910 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    e910:	b590      	push	{r4, r7, lr}
    e912:	b083      	sub	sp, #12
    e914:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    e916:	1dfb      	adds	r3, r7, #7
    e918:	2200      	movs	r2, #0
    e91a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    e91c:	4b10      	ldr	r3, [pc, #64]	; (e960 <hif_chip_sleep+0x50>)
    e91e:	785b      	ldrb	r3, [r3, #1]
    e920:	b2db      	uxtb	r3, r3
    e922:	2b00      	cmp	r3, #0
    e924:	d006      	beq.n	e934 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    e926:	4b0e      	ldr	r3, [pc, #56]	; (e960 <hif_chip_sleep+0x50>)
    e928:	785b      	ldrb	r3, [r3, #1]
    e92a:	b2db      	uxtb	r3, r3
    e92c:	3b01      	subs	r3, #1
    e92e:	b2da      	uxtb	r2, r3
    e930:	4b0b      	ldr	r3, [pc, #44]	; (e960 <hif_chip_sleep+0x50>)
    e932:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    e934:	4b0a      	ldr	r3, [pc, #40]	; (e960 <hif_chip_sleep+0x50>)
    e936:	785b      	ldrb	r3, [r3, #1]
    e938:	b2db      	uxtb	r3, r3
    e93a:	2b00      	cmp	r3, #0
    e93c:	d109      	bne.n	e952 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    e93e:	4b08      	ldr	r3, [pc, #32]	; (e960 <hif_chip_sleep+0x50>)
    e940:	781b      	ldrb	r3, [r3, #0]
    e942:	b2db      	uxtb	r3, r3
    e944:	2b00      	cmp	r3, #0
    e946:	d004      	beq.n	e952 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    e948:	1dfc      	adds	r4, r7, #7
    e94a:	4b06      	ldr	r3, [pc, #24]	; (e964 <hif_chip_sleep+0x54>)
    e94c:	4798      	blx	r3
    e94e:	0003      	movs	r3, r0
    e950:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    e952:	1dfb      	adds	r3, r7, #7
    e954:	781b      	ldrb	r3, [r3, #0]
    e956:	b25b      	sxtb	r3, r3
}
    e958:	0018      	movs	r0, r3
    e95a:	46bd      	mov	sp, r7
    e95c:	b003      	add	sp, #12
    e95e:	bd90      	pop	{r4, r7, pc}
    e960:	20005bb4 	.word	0x20005bb4
    e964:	000101d9 	.word	0x000101d9

0000e968 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    e968:	b580      	push	{r7, lr}
    e96a:	b082      	sub	sp, #8
    e96c:	af00      	add	r7, sp, #0
    e96e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    e970:	4b09      	ldr	r3, [pc, #36]	; (e998 <hif_init+0x30>)
    e972:	222c      	movs	r2, #44	; 0x2c
    e974:	2100      	movs	r1, #0
    e976:	0018      	movs	r0, r3
    e978:	4b08      	ldr	r3, [pc, #32]	; (e99c <hif_init+0x34>)
    e97a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    e97c:	4b08      	ldr	r3, [pc, #32]	; (e9a0 <hif_init+0x38>)
    e97e:	0018      	movs	r0, r3
    e980:	4b08      	ldr	r3, [pc, #32]	; (e9a4 <hif_init+0x3c>)
    e982:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    e984:	4b08      	ldr	r3, [pc, #32]	; (e9a8 <hif_init+0x40>)
    e986:	0019      	movs	r1, r3
    e988:	2003      	movs	r0, #3
    e98a:	4b08      	ldr	r3, [pc, #32]	; (e9ac <hif_init+0x44>)
    e98c:	4798      	blx	r3
	return M2M_SUCCESS;
    e98e:	2300      	movs	r3, #0
}
    e990:	0018      	movs	r0, r3
    e992:	46bd      	mov	sp, r7
    e994:	b002      	add	sp, #8
    e996:	bd80      	pop	{r7, pc}
    e998:	20005bb4 	.word	0x20005bb4
    e99c:	0000e751 	.word	0x0000e751
    e9a0:	0000e7cd 	.word	0x0000e7cd
    e9a4:	0000de8d 	.word	0x0000de8d
    e9a8:	0000e85d 	.word	0x0000e85d
    e9ac:	0000f44d 	.word	0x0000f44d

0000e9b0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    e9b0:	b590      	push	{r4, r7, lr}
    e9b2:	b089      	sub	sp, #36	; 0x24
    e9b4:	af00      	add	r7, sp, #0
    e9b6:	0004      	movs	r4, r0
    e9b8:	0008      	movs	r0, r1
    e9ba:	603a      	str	r2, [r7, #0]
    e9bc:	0019      	movs	r1, r3
    e9be:	1dfb      	adds	r3, r7, #7
    e9c0:	1c22      	adds	r2, r4, #0
    e9c2:	701a      	strb	r2, [r3, #0]
    e9c4:	1dbb      	adds	r3, r7, #6
    e9c6:	1c02      	adds	r2, r0, #0
    e9c8:	701a      	strb	r2, [r3, #0]
    e9ca:	1d3b      	adds	r3, r7, #4
    e9cc:	1c0a      	adds	r2, r1, #0
    e9ce:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    e9d0:	231f      	movs	r3, #31
    e9d2:	18fb      	adds	r3, r7, r3
    e9d4:	22ff      	movs	r2, #255	; 0xff
    e9d6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    e9d8:	1dbb      	adds	r3, r7, #6
    e9da:	781b      	ldrb	r3, [r3, #0]
    e9dc:	227f      	movs	r2, #127	; 0x7f
    e9de:	4013      	ands	r3, r2
    e9e0:	b2da      	uxtb	r2, r3
    e9e2:	2318      	movs	r3, #24
    e9e4:	18fb      	adds	r3, r7, r3
    e9e6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    e9e8:	2318      	movs	r3, #24
    e9ea:	18fb      	adds	r3, r7, r3
    e9ec:	1dfa      	adds	r2, r7, #7
    e9ee:	7812      	ldrb	r2, [r2, #0]
    e9f0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    e9f2:	2318      	movs	r3, #24
    e9f4:	18fb      	adds	r3, r7, r3
    e9f6:	2208      	movs	r2, #8
    e9f8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e9fc:	2b00      	cmp	r3, #0
    e9fe:	d011      	beq.n	ea24 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    ea00:	2318      	movs	r3, #24
    ea02:	18fb      	adds	r3, r7, r3
    ea04:	885b      	ldrh	r3, [r3, #2]
    ea06:	b29a      	uxth	r2, r3
    ea08:	2338      	movs	r3, #56	; 0x38
    ea0a:	18f9      	adds	r1, r7, r3
    ea0c:	2334      	movs	r3, #52	; 0x34
    ea0e:	18fb      	adds	r3, r7, r3
    ea10:	8809      	ldrh	r1, [r1, #0]
    ea12:	881b      	ldrh	r3, [r3, #0]
    ea14:	18cb      	adds	r3, r1, r3
    ea16:	b29b      	uxth	r3, r3
    ea18:	18d3      	adds	r3, r2, r3
    ea1a:	b29a      	uxth	r2, r3
    ea1c:	2318      	movs	r3, #24
    ea1e:	18fb      	adds	r3, r7, r3
    ea20:	805a      	strh	r2, [r3, #2]
    ea22:	e00a      	b.n	ea3a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    ea24:	2318      	movs	r3, #24
    ea26:	18fb      	adds	r3, r7, r3
    ea28:	885b      	ldrh	r3, [r3, #2]
    ea2a:	b29a      	uxth	r2, r3
    ea2c:	1d3b      	adds	r3, r7, #4
    ea2e:	881b      	ldrh	r3, [r3, #0]
    ea30:	18d3      	adds	r3, r2, r3
    ea32:	b29a      	uxth	r2, r3
    ea34:	2318      	movs	r3, #24
    ea36:	18fb      	adds	r3, r7, r3
    ea38:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    ea3a:	231f      	movs	r3, #31
    ea3c:	18fc      	adds	r4, r7, r3
    ea3e:	4bb2      	ldr	r3, [pc, #712]	; (ed08 <hif_send+0x358>)
    ea40:	4798      	blx	r3
    ea42:	0003      	movs	r3, r0
    ea44:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    ea46:	231f      	movs	r3, #31
    ea48:	18fb      	adds	r3, r7, r3
    ea4a:	781b      	ldrb	r3, [r3, #0]
    ea4c:	b25b      	sxtb	r3, r3
    ea4e:	2b00      	cmp	r3, #0
    ea50:	d000      	beq.n	ea54 <hif_send+0xa4>
    ea52:	e129      	b.n	eca8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
    ea54:	2300      	movs	r3, #0
    ea56:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    ea58:	230e      	movs	r3, #14
    ea5a:	18fb      	adds	r3, r7, r3
    ea5c:	2200      	movs	r2, #0
    ea5e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    ea60:	2300      	movs	r3, #0
    ea62:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    ea64:	1dfb      	adds	r3, r7, #7
    ea66:	781a      	ldrb	r2, [r3, #0]
    ea68:	697b      	ldr	r3, [r7, #20]
    ea6a:	4313      	orrs	r3, r2
    ea6c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    ea6e:	1dbb      	adds	r3, r7, #6
    ea70:	781b      	ldrb	r3, [r3, #0]
    ea72:	021a      	lsls	r2, r3, #8
    ea74:	697b      	ldr	r3, [r7, #20]
    ea76:	4313      	orrs	r3, r2
    ea78:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    ea7a:	2318      	movs	r3, #24
    ea7c:	18fb      	adds	r3, r7, r3
    ea7e:	885b      	ldrh	r3, [r3, #2]
    ea80:	b29b      	uxth	r3, r3
    ea82:	041a      	lsls	r2, r3, #16
    ea84:	697b      	ldr	r3, [r7, #20]
    ea86:	4313      	orrs	r3, r2
    ea88:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    ea8a:	697b      	ldr	r3, [r7, #20]
    ea8c:	221f      	movs	r2, #31
    ea8e:	18bc      	adds	r4, r7, r2
    ea90:	4a9e      	ldr	r2, [pc, #632]	; (ed0c <hif_send+0x35c>)
    ea92:	0019      	movs	r1, r3
    ea94:	0010      	movs	r0, r2
    ea96:	4b9e      	ldr	r3, [pc, #632]	; (ed10 <hif_send+0x360>)
    ea98:	4798      	blx	r3
    ea9a:	0003      	movs	r3, r0
    ea9c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    ea9e:	231f      	movs	r3, #31
    eaa0:	18fb      	adds	r3, r7, r3
    eaa2:	781b      	ldrb	r3, [r3, #0]
    eaa4:	b25b      	sxtb	r3, r3
    eaa6:	2b00      	cmp	r3, #0
    eaa8:	d000      	beq.n	eaac <hif_send+0xfc>
    eaaa:	e119      	b.n	ece0 <hif_send+0x330>

		reg = 0UL;
    eaac:	2300      	movs	r3, #0
    eaae:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    eab0:	697b      	ldr	r3, [r7, #20]
    eab2:	2202      	movs	r2, #2
    eab4:	4313      	orrs	r3, r2
    eab6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    eab8:	697b      	ldr	r3, [r7, #20]
    eaba:	221f      	movs	r2, #31
    eabc:	18bc      	adds	r4, r7, r2
    eabe:	4a95      	ldr	r2, [pc, #596]	; (ed14 <hif_send+0x364>)
    eac0:	0019      	movs	r1, r3
    eac2:	0010      	movs	r0, r2
    eac4:	4b92      	ldr	r3, [pc, #584]	; (ed10 <hif_send+0x360>)
    eac6:	4798      	blx	r3
    eac8:	0003      	movs	r3, r0
    eaca:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    eacc:	231f      	movs	r3, #31
    eace:	18fb      	adds	r3, r7, r3
    ead0:	781b      	ldrb	r3, [r3, #0]
    ead2:	b25b      	sxtb	r3, r3
    ead4:	2b00      	cmp	r3, #0
    ead6:	d000      	beq.n	eada <hif_send+0x12a>
    ead8:	e104      	b.n	ece4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    eada:	2300      	movs	r3, #0
    eadc:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    eade:	230e      	movs	r3, #14
    eae0:	18fb      	adds	r3, r7, r3
    eae2:	2200      	movs	r2, #0
    eae4:	801a      	strh	r2, [r3, #0]
    eae6:	e050      	b.n	eb8a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    eae8:	231f      	movs	r3, #31
    eaea:	18fc      	adds	r4, r7, r3
    eaec:	2314      	movs	r3, #20
    eaee:	18fb      	adds	r3, r7, r3
    eaf0:	4a88      	ldr	r2, [pc, #544]	; (ed14 <hif_send+0x364>)
    eaf2:	0019      	movs	r1, r3
    eaf4:	0010      	movs	r0, r2
    eaf6:	4b88      	ldr	r3, [pc, #544]	; (ed18 <hif_send+0x368>)
    eaf8:	4798      	blx	r3
    eafa:	0003      	movs	r3, r0
    eafc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    eafe:	231f      	movs	r3, #31
    eb00:	18fb      	adds	r3, r7, r3
    eb02:	781b      	ldrb	r3, [r3, #0]
    eb04:	b25b      	sxtb	r3, r3
    eb06:	2b00      	cmp	r3, #0
    eb08:	d147      	bne.n	eb9a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    eb0a:	230e      	movs	r3, #14
    eb0c:	18fb      	adds	r3, r7, r3
    eb0e:	881b      	ldrh	r3, [r3, #0]
    eb10:	b29a      	uxth	r2, r3
    eb12:	23f4      	movs	r3, #244	; 0xf4
    eb14:	33ff      	adds	r3, #255	; 0xff
    eb16:	429a      	cmp	r2, r3
    eb18:	d916      	bls.n	eb48 <hif_send+0x198>
				if(cnt < 501) {
    eb1a:	230e      	movs	r3, #14
    eb1c:	18fb      	adds	r3, r7, r3
    eb1e:	881b      	ldrh	r3, [r3, #0]
    eb20:	b29a      	uxth	r2, r3
    eb22:	23fa      	movs	r3, #250	; 0xfa
    eb24:	005b      	lsls	r3, r3, #1
    eb26:	429a      	cmp	r2, r3
    eb28:	d80b      	bhi.n	eb42 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
    eb2a:	4b7c      	ldr	r3, [pc, #496]	; (ed1c <hif_send+0x36c>)
    eb2c:	0018      	movs	r0, r3
    eb2e:	4b7c      	ldr	r3, [pc, #496]	; (ed20 <hif_send+0x370>)
    eb30:	4798      	blx	r3
    eb32:	4b7c      	ldr	r3, [pc, #496]	; (ed24 <hif_send+0x374>)
    eb34:	0018      	movs	r0, r3
    eb36:	4b7a      	ldr	r3, [pc, #488]	; (ed20 <hif_send+0x370>)
    eb38:	4798      	blx	r3
    eb3a:	4b7b      	ldr	r3, [pc, #492]	; (ed28 <hif_send+0x378>)
    eb3c:	0018      	movs	r0, r3
    eb3e:	4b78      	ldr	r3, [pc, #480]	; (ed20 <hif_send+0x370>)
    eb40:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    eb42:	2001      	movs	r0, #1
    eb44:	4b79      	ldr	r3, [pc, #484]	; (ed2c <hif_send+0x37c>)
    eb46:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    eb48:	697b      	ldr	r3, [r7, #20]
    eb4a:	2202      	movs	r2, #2
    eb4c:	4013      	ands	r3, r2
    eb4e:	d113      	bne.n	eb78 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    eb50:	231f      	movs	r3, #31
    eb52:	18fc      	adds	r4, r7, r3
    eb54:	2310      	movs	r3, #16
    eb56:	18fb      	adds	r3, r7, r3
    eb58:	4a75      	ldr	r2, [pc, #468]	; (ed30 <hif_send+0x380>)
    eb5a:	0019      	movs	r1, r3
    eb5c:	0010      	movs	r0, r2
    eb5e:	4b6e      	ldr	r3, [pc, #440]	; (ed18 <hif_send+0x368>)
    eb60:	4798      	blx	r3
    eb62:	0003      	movs	r3, r0
    eb64:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    eb66:	231f      	movs	r3, #31
    eb68:	18fb      	adds	r3, r7, r3
    eb6a:	781b      	ldrb	r3, [r3, #0]
    eb6c:	b25b      	sxtb	r3, r3
    eb6e:	2b00      	cmp	r3, #0
    eb70:	d015      	beq.n	eb9e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    eb72:	2300      	movs	r3, #0
    eb74:	613b      	str	r3, [r7, #16]
					goto ERR1;
    eb76:	e0bc      	b.n	ecf2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
    eb78:	230e      	movs	r3, #14
    eb7a:	18fb      	adds	r3, r7, r3
    eb7c:	881b      	ldrh	r3, [r3, #0]
    eb7e:	b29b      	uxth	r3, r3
    eb80:	3301      	adds	r3, #1
    eb82:	b29a      	uxth	r2, r3
    eb84:	230e      	movs	r3, #14
    eb86:	18fb      	adds	r3, r7, r3
    eb88:	801a      	strh	r2, [r3, #0]
    eb8a:	230e      	movs	r3, #14
    eb8c:	18fb      	adds	r3, r7, r3
    eb8e:	881b      	ldrh	r3, [r3, #0]
    eb90:	b29b      	uxth	r3, r3
    eb92:	4a68      	ldr	r2, [pc, #416]	; (ed34 <hif_send+0x384>)
    eb94:	4293      	cmp	r3, r2
    eb96:	d9a7      	bls.n	eae8 <hif_send+0x138>
    eb98:	e002      	b.n	eba0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
    eb9a:	46c0      	nop			; (mov r8, r8)
    eb9c:	e000      	b.n	eba0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
    eb9e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    eba0:	693b      	ldr	r3, [r7, #16]
    eba2:	2b00      	cmp	r3, #0
    eba4:	d100      	bne.n	eba8 <hif_send+0x1f8>
    eba6:	e074      	b.n	ec92 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    eba8:	693b      	ldr	r3, [r7, #16]
    ebaa:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    ebac:	2318      	movs	r3, #24
    ebae:	18fb      	adds	r3, r7, r3
    ebb0:	885b      	ldrh	r3, [r3, #2]
    ebb2:	b29a      	uxth	r2, r3
    ebb4:	2318      	movs	r3, #24
    ebb6:	18fb      	adds	r3, r7, r3
    ebb8:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    ebba:	68bb      	ldr	r3, [r7, #8]
    ebbc:	221f      	movs	r2, #31
    ebbe:	18bc      	adds	r4, r7, r2
    ebc0:	2218      	movs	r2, #24
    ebc2:	18b9      	adds	r1, r7, r2
    ebc4:	2208      	movs	r2, #8
    ebc6:	0018      	movs	r0, r3
    ebc8:	4b5b      	ldr	r3, [pc, #364]	; (ed38 <hif_send+0x388>)
    ebca:	4798      	blx	r3
    ebcc:	0003      	movs	r3, r0
    ebce:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    ebd0:	231f      	movs	r3, #31
    ebd2:	18fb      	adds	r3, r7, r3
    ebd4:	781b      	ldrb	r3, [r3, #0]
    ebd6:	b25b      	sxtb	r3, r3
    ebd8:	2b00      	cmp	r3, #0
    ebda:	d000      	beq.n	ebde <hif_send+0x22e>
    ebdc:	e084      	b.n	ece8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    ebde:	68bb      	ldr	r3, [r7, #8]
    ebe0:	3308      	adds	r3, #8
    ebe2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    ebe4:	683b      	ldr	r3, [r7, #0]
    ebe6:	2b00      	cmp	r3, #0
    ebe8:	d016      	beq.n	ec18 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    ebea:	68b8      	ldr	r0, [r7, #8]
    ebec:	1d3b      	adds	r3, r7, #4
    ebee:	881a      	ldrh	r2, [r3, #0]
    ebf0:	231f      	movs	r3, #31
    ebf2:	18fc      	adds	r4, r7, r3
    ebf4:	683b      	ldr	r3, [r7, #0]
    ebf6:	0019      	movs	r1, r3
    ebf8:	4b4f      	ldr	r3, [pc, #316]	; (ed38 <hif_send+0x388>)
    ebfa:	4798      	blx	r3
    ebfc:	0003      	movs	r3, r0
    ebfe:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    ec00:	231f      	movs	r3, #31
    ec02:	18fb      	adds	r3, r7, r3
    ec04:	781b      	ldrb	r3, [r3, #0]
    ec06:	b25b      	sxtb	r3, r3
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d000      	beq.n	ec0e <hif_send+0x25e>
    ec0c:	e06e      	b.n	ecec <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
    ec0e:	1d3b      	adds	r3, r7, #4
    ec10:	881a      	ldrh	r2, [r3, #0]
    ec12:	68bb      	ldr	r3, [r7, #8]
    ec14:	18d3      	adds	r3, r2, r3
    ec16:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    ec18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec1a:	2b00      	cmp	r3, #0
    ec1c:	d021      	beq.n	ec62 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    ec1e:	2338      	movs	r3, #56	; 0x38
    ec20:	18fb      	adds	r3, r7, r3
    ec22:	881a      	ldrh	r2, [r3, #0]
    ec24:	1d3b      	adds	r3, r7, #4
    ec26:	881b      	ldrh	r3, [r3, #0]
    ec28:	1ad3      	subs	r3, r2, r3
    ec2a:	001a      	movs	r2, r3
    ec2c:	68bb      	ldr	r3, [r7, #8]
    ec2e:	18d3      	adds	r3, r2, r3
    ec30:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    ec32:	68b8      	ldr	r0, [r7, #8]
    ec34:	2334      	movs	r3, #52	; 0x34
    ec36:	18fb      	adds	r3, r7, r3
    ec38:	881a      	ldrh	r2, [r3, #0]
    ec3a:	231f      	movs	r3, #31
    ec3c:	18fc      	adds	r4, r7, r3
    ec3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec40:	0019      	movs	r1, r3
    ec42:	4b3d      	ldr	r3, [pc, #244]	; (ed38 <hif_send+0x388>)
    ec44:	4798      	blx	r3
    ec46:	0003      	movs	r3, r0
    ec48:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    ec4a:	231f      	movs	r3, #31
    ec4c:	18fb      	adds	r3, r7, r3
    ec4e:	781b      	ldrb	r3, [r3, #0]
    ec50:	b25b      	sxtb	r3, r3
    ec52:	2b00      	cmp	r3, #0
    ec54:	d14c      	bne.n	ecf0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
    ec56:	2334      	movs	r3, #52	; 0x34
    ec58:	18fb      	adds	r3, r7, r3
    ec5a:	881a      	ldrh	r2, [r3, #0]
    ec5c:	68bb      	ldr	r3, [r7, #8]
    ec5e:	18d3      	adds	r3, r2, r3
    ec60:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    ec62:	693b      	ldr	r3, [r7, #16]
    ec64:	009b      	lsls	r3, r3, #2
    ec66:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    ec68:	697b      	ldr	r3, [r7, #20]
    ec6a:	2202      	movs	r2, #2
    ec6c:	4313      	orrs	r3, r2
    ec6e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    ec70:	697b      	ldr	r3, [r7, #20]
    ec72:	221f      	movs	r2, #31
    ec74:	18bc      	adds	r4, r7, r2
    ec76:	4a31      	ldr	r2, [pc, #196]	; (ed3c <hif_send+0x38c>)
    ec78:	0019      	movs	r1, r3
    ec7a:	0010      	movs	r0, r2
    ec7c:	4b24      	ldr	r3, [pc, #144]	; (ed10 <hif_send+0x360>)
    ec7e:	4798      	blx	r3
    ec80:	0003      	movs	r3, r0
    ec82:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    ec84:	231f      	movs	r3, #31
    ec86:	18fb      	adds	r3, r7, r3
    ec88:	781b      	ldrb	r3, [r3, #0]
    ec8a:	b25b      	sxtb	r3, r3
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	d01c      	beq.n	ecca <hif_send+0x31a>
    ec90:	e02f      	b.n	ecf2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
    ec92:	231f      	movs	r3, #31
    ec94:	18fc      	adds	r4, r7, r3
    ec96:	4b2a      	ldr	r3, [pc, #168]	; (ed40 <hif_send+0x390>)
    ec98:	4798      	blx	r3
    ec9a:	0003      	movs	r3, r0
    ec9c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    ec9e:	231f      	movs	r3, #31
    eca0:	18fb      	adds	r3, r7, r3
    eca2:	22fd      	movs	r2, #253	; 0xfd
    eca4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    eca6:	e026      	b.n	ecf6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    eca8:	2398      	movs	r3, #152	; 0x98
    ecaa:	33ff      	adds	r3, #255	; 0xff
    ecac:	001a      	movs	r2, r3
    ecae:	4925      	ldr	r1, [pc, #148]	; (ed44 <hif_send+0x394>)
    ecb0:	4b25      	ldr	r3, [pc, #148]	; (ed48 <hif_send+0x398>)
    ecb2:	0018      	movs	r0, r3
    ecb4:	4b1a      	ldr	r3, [pc, #104]	; (ed20 <hif_send+0x370>)
    ecb6:	4798      	blx	r3
    ecb8:	4b24      	ldr	r3, [pc, #144]	; (ed4c <hif_send+0x39c>)
    ecba:	0018      	movs	r0, r3
    ecbc:	4b18      	ldr	r3, [pc, #96]	; (ed20 <hif_send+0x370>)
    ecbe:	4798      	blx	r3
    ecc0:	4b19      	ldr	r3, [pc, #100]	; (ed28 <hif_send+0x378>)
    ecc2:	0018      	movs	r0, r3
    ecc4:	4b16      	ldr	r3, [pc, #88]	; (ed20 <hif_send+0x370>)
    ecc6:	4798      	blx	r3
		goto ERR2;
    ecc8:	e015      	b.n	ecf6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    ecca:	231f      	movs	r3, #31
    eccc:	18fc      	adds	r4, r7, r3
    ecce:	4b1c      	ldr	r3, [pc, #112]	; (ed40 <hif_send+0x390>)
    ecd0:	4798      	blx	r3
    ecd2:	0003      	movs	r3, r0
    ecd4:	7023      	strb	r3, [r4, #0]
	return ret;
    ecd6:	231f      	movs	r3, #31
    ecd8:	18fb      	adds	r3, r7, r3
    ecda:	781b      	ldrb	r3, [r3, #0]
    ecdc:	b25b      	sxtb	r3, r3
    ecde:	e00e      	b.n	ecfe <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
    ece0:	46c0      	nop			; (mov r8, r8)
    ece2:	e006      	b.n	ecf2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
    ece4:	46c0      	nop			; (mov r8, r8)
    ece6:	e004      	b.n	ecf2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
    ece8:	46c0      	nop			; (mov r8, r8)
    ecea:	e002      	b.n	ecf2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    ecec:	46c0      	nop			; (mov r8, r8)
    ecee:	e000      	b.n	ecf2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    ecf0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    ecf2:	4b17      	ldr	r3, [pc, #92]	; (ed50 <hif_send+0x3a0>)
    ecf4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    ecf6:	231f      	movs	r3, #31
    ecf8:	18fb      	adds	r3, r7, r3
    ecfa:	781b      	ldrb	r3, [r3, #0]
    ecfc:	b25b      	sxtb	r3, r3
}
    ecfe:	0018      	movs	r0, r3
    ed00:	46bd      	mov	sp, r7
    ed02:	b009      	add	sp, #36	; 0x24
    ed04:	bd90      	pop	{r4, r7, pc}
    ed06:	46c0      	nop			; (mov r8, r8)
    ed08:	0000e879 	.word	0x0000e879
    ed0c:	0000108c 	.word	0x0000108c
    ed10:	00010805 	.word	0x00010805
    ed14:	00001078 	.word	0x00001078
    ed18:	000107e1 	.word	0x000107e1
    ed1c:	0002711c 	.word	0x0002711c
    ed20:	0000b9b9 	.word	0x0000b9b9
    ed24:	00027128 	.word	0x00027128
    ed28:	0002713c 	.word	0x0002713c
    ed2c:	0000de71 	.word	0x0000de71
    ed30:	00150400 	.word	0x00150400
    ed34:	000003e7 	.word	0x000003e7
    ed38:	0001094d 	.word	0x0001094d
    ed3c:	0000106c 	.word	0x0000106c
    ed40:	0000e911 	.word	0x0000e911
    ed44:	00027444 	.word	0x00027444
    ed48:	00027140 	.word	0x00027140
    ed4c:	00027154 	.word	0x00027154
    ed50:	0000e8e9 	.word	0x0000e8e9

0000ed54 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    ed54:	b590      	push	{r4, r7, lr}
    ed56:	b087      	sub	sp, #28
    ed58:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    ed5a:	230f      	movs	r3, #15
    ed5c:	18fb      	adds	r3, r7, r3
    ed5e:	2200      	movs	r2, #0
    ed60:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    ed62:	230f      	movs	r3, #15
    ed64:	18fc      	adds	r4, r7, r3
    ed66:	2308      	movs	r3, #8
    ed68:	18fb      	adds	r3, r7, r3
    ed6a:	4adc      	ldr	r2, [pc, #880]	; (f0dc <hif_isr+0x388>)
    ed6c:	0019      	movs	r1, r3
    ed6e:	0010      	movs	r0, r2
    ed70:	4bdb      	ldr	r3, [pc, #876]	; (f0e0 <hif_isr+0x38c>)
    ed72:	4798      	blx	r3
    ed74:	0003      	movs	r3, r0
    ed76:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    ed78:	230f      	movs	r3, #15
    ed7a:	18fb      	adds	r3, r7, r3
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	b25b      	sxtb	r3, r3
    ed80:	2b00      	cmp	r3, #0
    ed82:	d000      	beq.n	ed86 <hif_isr+0x32>
    ed84:	e21e      	b.n	f1c4 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    ed86:	68bb      	ldr	r3, [r7, #8]
    ed88:	2201      	movs	r2, #1
    ed8a:	4013      	ands	r3, r2
    ed8c:	d100      	bne.n	ed90 <hif_isr+0x3c>
    ed8e:	e204      	b.n	f19a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    ed90:	2000      	movs	r0, #0
    ed92:	4bd4      	ldr	r3, [pc, #848]	; (f0e4 <hif_isr+0x390>)
    ed94:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    ed96:	68bb      	ldr	r3, [r7, #8]
    ed98:	2201      	movs	r2, #1
    ed9a:	4393      	bics	r3, r2
    ed9c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    ed9e:	68bb      	ldr	r3, [r7, #8]
    eda0:	220f      	movs	r2, #15
    eda2:	18bc      	adds	r4, r7, r2
    eda4:	4acd      	ldr	r2, [pc, #820]	; (f0dc <hif_isr+0x388>)
    eda6:	0019      	movs	r1, r3
    eda8:	0010      	movs	r0, r2
    edaa:	4bcf      	ldr	r3, [pc, #828]	; (f0e8 <hif_isr+0x394>)
    edac:	4798      	blx	r3
    edae:	0003      	movs	r3, r0
    edb0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    edb2:	230f      	movs	r3, #15
    edb4:	18fb      	adds	r3, r7, r3
    edb6:	781b      	ldrb	r3, [r3, #0]
    edb8:	b25b      	sxtb	r3, r3
    edba:	2b00      	cmp	r3, #0
    edbc:	d000      	beq.n	edc0 <hif_isr+0x6c>
    edbe:	e210      	b.n	f1e2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
    edc0:	4bca      	ldr	r3, [pc, #808]	; (f0ec <hif_isr+0x398>)
    edc2:	2201      	movs	r2, #1
    edc4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    edc6:	68bb      	ldr	r3, [r7, #8]
    edc8:	089b      	lsrs	r3, r3, #2
    edca:	b29a      	uxth	r2, r3
    edcc:	230c      	movs	r3, #12
    edce:	18fb      	adds	r3, r7, r3
    edd0:	0512      	lsls	r2, r2, #20
    edd2:	0d12      	lsrs	r2, r2, #20
    edd4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    edd6:	230c      	movs	r3, #12
    edd8:	18fb      	adds	r3, r7, r3
    edda:	881b      	ldrh	r3, [r3, #0]
    eddc:	2b00      	cmp	r3, #0
    edde:	d100      	bne.n	ede2 <hif_isr+0x8e>
    ede0:	e1c8      	b.n	f174 <hif_isr+0x420>
				uint32 address = 0;
    ede2:	2300      	movs	r3, #0
    ede4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    ede6:	230f      	movs	r3, #15
    ede8:	18fc      	adds	r4, r7, r3
    edea:	003b      	movs	r3, r7
    edec:	4ac0      	ldr	r2, [pc, #768]	; (f0f0 <hif_isr+0x39c>)
    edee:	0019      	movs	r1, r3
    edf0:	0010      	movs	r0, r2
    edf2:	4bbb      	ldr	r3, [pc, #748]	; (f0e0 <hif_isr+0x38c>)
    edf4:	4798      	blx	r3
    edf6:	0003      	movs	r3, r0
    edf8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    edfa:	230f      	movs	r3, #15
    edfc:	18fb      	adds	r3, r7, r3
    edfe:	781b      	ldrb	r3, [r3, #0]
    ee00:	b25b      	sxtb	r3, r3
    ee02:	2b00      	cmp	r3, #0
    ee04:	d012      	beq.n	ee2c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    ee06:	23e4      	movs	r3, #228	; 0xe4
    ee08:	005a      	lsls	r2, r3, #1
    ee0a:	49ba      	ldr	r1, [pc, #744]	; (f0f4 <hif_isr+0x3a0>)
    ee0c:	4bba      	ldr	r3, [pc, #744]	; (f0f8 <hif_isr+0x3a4>)
    ee0e:	0018      	movs	r0, r3
    ee10:	4bba      	ldr	r3, [pc, #744]	; (f0fc <hif_isr+0x3a8>)
    ee12:	4798      	blx	r3
    ee14:	4bba      	ldr	r3, [pc, #744]	; (f100 <hif_isr+0x3ac>)
    ee16:	0018      	movs	r0, r3
    ee18:	4bb8      	ldr	r3, [pc, #736]	; (f0fc <hif_isr+0x3a8>)
    ee1a:	4798      	blx	r3
    ee1c:	4bb9      	ldr	r3, [pc, #740]	; (f104 <hif_isr+0x3b0>)
    ee1e:	0018      	movs	r0, r3
    ee20:	4bb6      	ldr	r3, [pc, #728]	; (f0fc <hif_isr+0x3a8>)
    ee22:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    ee24:	2001      	movs	r0, #1
    ee26:	4baf      	ldr	r3, [pc, #700]	; (f0e4 <hif_isr+0x390>)
    ee28:	4798      	blx	r3
					goto ERR1;
    ee2a:	e1db      	b.n	f1e4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
    ee2c:	683a      	ldr	r2, [r7, #0]
    ee2e:	4baf      	ldr	r3, [pc, #700]	; (f0ec <hif_isr+0x398>)
    ee30:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    ee32:	230c      	movs	r3, #12
    ee34:	18fb      	adds	r3, r7, r3
    ee36:	881a      	ldrh	r2, [r3, #0]
    ee38:	4bac      	ldr	r3, [pc, #688]	; (f0ec <hif_isr+0x398>)
    ee3a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    ee3c:	683b      	ldr	r3, [r7, #0]
    ee3e:	220f      	movs	r2, #15
    ee40:	18bc      	adds	r4, r7, r2
    ee42:	1d39      	adds	r1, r7, #4
    ee44:	2204      	movs	r2, #4
    ee46:	0018      	movs	r0, r3
    ee48:	4baf      	ldr	r3, [pc, #700]	; (f108 <hif_isr+0x3b4>)
    ee4a:	4798      	blx	r3
    ee4c:	0003      	movs	r3, r0
    ee4e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    ee50:	1d3b      	adds	r3, r7, #4
    ee52:	885b      	ldrh	r3, [r3, #2]
    ee54:	b29a      	uxth	r2, r3
    ee56:	1d3b      	adds	r3, r7, #4
    ee58:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    ee5a:	230f      	movs	r3, #15
    ee5c:	18fb      	adds	r3, r7, r3
    ee5e:	781b      	ldrb	r3, [r3, #0]
    ee60:	b25b      	sxtb	r3, r3
    ee62:	2b00      	cmp	r3, #0
    ee64:	d012      	beq.n	ee8c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    ee66:	23e9      	movs	r3, #233	; 0xe9
    ee68:	005a      	lsls	r2, r3, #1
    ee6a:	49a2      	ldr	r1, [pc, #648]	; (f0f4 <hif_isr+0x3a0>)
    ee6c:	4ba2      	ldr	r3, [pc, #648]	; (f0f8 <hif_isr+0x3a4>)
    ee6e:	0018      	movs	r0, r3
    ee70:	4ba2      	ldr	r3, [pc, #648]	; (f0fc <hif_isr+0x3a8>)
    ee72:	4798      	blx	r3
    ee74:	4ba5      	ldr	r3, [pc, #660]	; (f10c <hif_isr+0x3b8>)
    ee76:	0018      	movs	r0, r3
    ee78:	4ba0      	ldr	r3, [pc, #640]	; (f0fc <hif_isr+0x3a8>)
    ee7a:	4798      	blx	r3
    ee7c:	4ba1      	ldr	r3, [pc, #644]	; (f104 <hif_isr+0x3b0>)
    ee7e:	0018      	movs	r0, r3
    ee80:	4b9e      	ldr	r3, [pc, #632]	; (f0fc <hif_isr+0x3a8>)
    ee82:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    ee84:	2001      	movs	r0, #1
    ee86:	4b97      	ldr	r3, [pc, #604]	; (f0e4 <hif_isr+0x390>)
    ee88:	4798      	blx	r3
					goto ERR1;
    ee8a:	e1ab      	b.n	f1e4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
    ee8c:	1d3b      	adds	r3, r7, #4
    ee8e:	885b      	ldrh	r3, [r3, #2]
    ee90:	b29b      	uxth	r3, r3
    ee92:	220c      	movs	r2, #12
    ee94:	18ba      	adds	r2, r7, r2
    ee96:	8812      	ldrh	r2, [r2, #0]
    ee98:	429a      	cmp	r2, r3
    ee9a:	d02f      	beq.n	eefc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
    ee9c:	230c      	movs	r3, #12
    ee9e:	18fb      	adds	r3, r7, r3
    eea0:	881b      	ldrh	r3, [r3, #0]
    eea2:	1d3a      	adds	r2, r7, #4
    eea4:	8852      	ldrh	r2, [r2, #2]
    eea6:	b292      	uxth	r2, r2
    eea8:	1a9b      	subs	r3, r3, r2
    eeaa:	2b04      	cmp	r3, #4
    eeac:	dd26      	ble.n	eefc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    eeae:	23dc      	movs	r3, #220	; 0xdc
    eeb0:	33ff      	adds	r3, #255	; 0xff
    eeb2:	001a      	movs	r2, r3
    eeb4:	498f      	ldr	r1, [pc, #572]	; (f0f4 <hif_isr+0x3a0>)
    eeb6:	4b90      	ldr	r3, [pc, #576]	; (f0f8 <hif_isr+0x3a4>)
    eeb8:	0018      	movs	r0, r3
    eeba:	4b90      	ldr	r3, [pc, #576]	; (f0fc <hif_isr+0x3a8>)
    eebc:	4798      	blx	r3
    eebe:	230c      	movs	r3, #12
    eec0:	18fb      	adds	r3, r7, r3
    eec2:	8819      	ldrh	r1, [r3, #0]
    eec4:	1d3b      	adds	r3, r7, #4
    eec6:	885b      	ldrh	r3, [r3, #2]
    eec8:	b29b      	uxth	r3, r3
    eeca:	001a      	movs	r2, r3
    eecc:	1d3b      	adds	r3, r7, #4
    eece:	781b      	ldrb	r3, [r3, #0]
    eed0:	b2db      	uxtb	r3, r3
    eed2:	001c      	movs	r4, r3
    eed4:	1d3b      	adds	r3, r7, #4
    eed6:	785b      	ldrb	r3, [r3, #1]
    eed8:	b2db      	uxtb	r3, r3
    eeda:	488d      	ldr	r0, [pc, #564]	; (f110 <hif_isr+0x3bc>)
    eedc:	9300      	str	r3, [sp, #0]
    eede:	0023      	movs	r3, r4
    eee0:	4c86      	ldr	r4, [pc, #536]	; (f0fc <hif_isr+0x3a8>)
    eee2:	47a0      	blx	r4
    eee4:	4b87      	ldr	r3, [pc, #540]	; (f104 <hif_isr+0x3b0>)
    eee6:	0018      	movs	r0, r3
    eee8:	4b84      	ldr	r3, [pc, #528]	; (f0fc <hif_isr+0x3a8>)
    eeea:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    eeec:	2001      	movs	r0, #1
    eeee:	4b7d      	ldr	r3, [pc, #500]	; (f0e4 <hif_isr+0x390>)
    eef0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    eef2:	230f      	movs	r3, #15
    eef4:	18fb      	adds	r3, r7, r3
    eef6:	22fa      	movs	r2, #250	; 0xfa
    eef8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    eefa:	e173      	b.n	f1e4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    eefc:	1d3b      	adds	r3, r7, #4
    eefe:	781b      	ldrb	r3, [r3, #0]
    ef00:	b2db      	uxtb	r3, r3
    ef02:	2b01      	cmp	r3, #1
    ef04:	d122      	bne.n	ef4c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
    ef06:	4b79      	ldr	r3, [pc, #484]	; (f0ec <hif_isr+0x398>)
    ef08:	691b      	ldr	r3, [r3, #16]
    ef0a:	2b00      	cmp	r3, #0
    ef0c:	d00d      	beq.n	ef2a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    ef0e:	4b77      	ldr	r3, [pc, #476]	; (f0ec <hif_isr+0x398>)
    ef10:	691b      	ldr	r3, [r3, #16]
    ef12:	1d3a      	adds	r2, r7, #4
    ef14:	7852      	ldrb	r2, [r2, #1]
    ef16:	b2d0      	uxtb	r0, r2
    ef18:	1d3a      	adds	r2, r7, #4
    ef1a:	8852      	ldrh	r2, [r2, #2]
    ef1c:	b292      	uxth	r2, r2
    ef1e:	3a08      	subs	r2, #8
    ef20:	b291      	uxth	r1, r2
    ef22:	683a      	ldr	r2, [r7, #0]
    ef24:	3208      	adds	r2, #8
    ef26:	4798      	blx	r3
    ef28:	e102      	b.n	f130 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
    ef2a:	23e8      	movs	r3, #232	; 0xe8
    ef2c:	33ff      	adds	r3, #255	; 0xff
    ef2e:	001a      	movs	r2, r3
    ef30:	4970      	ldr	r1, [pc, #448]	; (f0f4 <hif_isr+0x3a0>)
    ef32:	4b71      	ldr	r3, [pc, #452]	; (f0f8 <hif_isr+0x3a4>)
    ef34:	0018      	movs	r0, r3
    ef36:	4b71      	ldr	r3, [pc, #452]	; (f0fc <hif_isr+0x3a8>)
    ef38:	4798      	blx	r3
    ef3a:	4b76      	ldr	r3, [pc, #472]	; (f114 <hif_isr+0x3c0>)
    ef3c:	0018      	movs	r0, r3
    ef3e:	4b6f      	ldr	r3, [pc, #444]	; (f0fc <hif_isr+0x3a8>)
    ef40:	4798      	blx	r3
    ef42:	4b70      	ldr	r3, [pc, #448]	; (f104 <hif_isr+0x3b0>)
    ef44:	0018      	movs	r0, r3
    ef46:	4b6d      	ldr	r3, [pc, #436]	; (f0fc <hif_isr+0x3a8>)
    ef48:	4798      	blx	r3
    ef4a:	e0f1      	b.n	f130 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    ef4c:	1d3b      	adds	r3, r7, #4
    ef4e:	781b      	ldrb	r3, [r3, #0]
    ef50:	b2db      	uxtb	r3, r3
    ef52:	2b02      	cmp	r3, #2
    ef54:	d122      	bne.n	ef9c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
    ef56:	4b65      	ldr	r3, [pc, #404]	; (f0ec <hif_isr+0x398>)
    ef58:	695b      	ldr	r3, [r3, #20]
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	d00d      	beq.n	ef7a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    ef5e:	4b63      	ldr	r3, [pc, #396]	; (f0ec <hif_isr+0x398>)
    ef60:	695b      	ldr	r3, [r3, #20]
    ef62:	1d3a      	adds	r2, r7, #4
    ef64:	7852      	ldrb	r2, [r2, #1]
    ef66:	b2d0      	uxtb	r0, r2
    ef68:	1d3a      	adds	r2, r7, #4
    ef6a:	8852      	ldrh	r2, [r2, #2]
    ef6c:	b292      	uxth	r2, r2
    ef6e:	3a08      	subs	r2, #8
    ef70:	b291      	uxth	r1, r2
    ef72:	683a      	ldr	r2, [r7, #0]
    ef74:	3208      	adds	r2, #8
    ef76:	4798      	blx	r3
    ef78:	e0da      	b.n	f130 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
    ef7a:	23f0      	movs	r3, #240	; 0xf0
    ef7c:	33ff      	adds	r3, #255	; 0xff
    ef7e:	001a      	movs	r2, r3
    ef80:	495c      	ldr	r1, [pc, #368]	; (f0f4 <hif_isr+0x3a0>)
    ef82:	4b5d      	ldr	r3, [pc, #372]	; (f0f8 <hif_isr+0x3a4>)
    ef84:	0018      	movs	r0, r3
    ef86:	4b5d      	ldr	r3, [pc, #372]	; (f0fc <hif_isr+0x3a8>)
    ef88:	4798      	blx	r3
    ef8a:	4b63      	ldr	r3, [pc, #396]	; (f118 <hif_isr+0x3c4>)
    ef8c:	0018      	movs	r0, r3
    ef8e:	4b5b      	ldr	r3, [pc, #364]	; (f0fc <hif_isr+0x3a8>)
    ef90:	4798      	blx	r3
    ef92:	4b5c      	ldr	r3, [pc, #368]	; (f104 <hif_isr+0x3b0>)
    ef94:	0018      	movs	r0, r3
    ef96:	4b59      	ldr	r3, [pc, #356]	; (f0fc <hif_isr+0x3a8>)
    ef98:	4798      	blx	r3
    ef9a:	e0c9      	b.n	f130 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    ef9c:	1d3b      	adds	r3, r7, #4
    ef9e:	781b      	ldrb	r3, [r3, #0]
    efa0:	b2db      	uxtb	r3, r3
    efa2:	2b04      	cmp	r3, #4
    efa4:	d122      	bne.n	efec <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
    efa6:	4b51      	ldr	r3, [pc, #324]	; (f0ec <hif_isr+0x398>)
    efa8:	699b      	ldr	r3, [r3, #24]
    efaa:	2b00      	cmp	r3, #0
    efac:	d00d      	beq.n	efca <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    efae:	4b4f      	ldr	r3, [pc, #316]	; (f0ec <hif_isr+0x398>)
    efb0:	699b      	ldr	r3, [r3, #24]
    efb2:	1d3a      	adds	r2, r7, #4
    efb4:	7852      	ldrb	r2, [r2, #1]
    efb6:	b2d0      	uxtb	r0, r2
    efb8:	1d3a      	adds	r2, r7, #4
    efba:	8852      	ldrh	r2, [r2, #2]
    efbc:	b292      	uxth	r2, r2
    efbe:	3a08      	subs	r2, #8
    efc0:	b291      	uxth	r1, r2
    efc2:	683a      	ldr	r2, [r7, #0]
    efc4:	3208      	adds	r2, #8
    efc6:	4798      	blx	r3
    efc8:	e0b2      	b.n	f130 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
    efca:	23f8      	movs	r3, #248	; 0xf8
    efcc:	33ff      	adds	r3, #255	; 0xff
    efce:	001a      	movs	r2, r3
    efd0:	4948      	ldr	r1, [pc, #288]	; (f0f4 <hif_isr+0x3a0>)
    efd2:	4b49      	ldr	r3, [pc, #292]	; (f0f8 <hif_isr+0x3a4>)
    efd4:	0018      	movs	r0, r3
    efd6:	4b49      	ldr	r3, [pc, #292]	; (f0fc <hif_isr+0x3a8>)
    efd8:	4798      	blx	r3
    efda:	4b50      	ldr	r3, [pc, #320]	; (f11c <hif_isr+0x3c8>)
    efdc:	0018      	movs	r0, r3
    efde:	4b47      	ldr	r3, [pc, #284]	; (f0fc <hif_isr+0x3a8>)
    efe0:	4798      	blx	r3
    efe2:	4b48      	ldr	r3, [pc, #288]	; (f104 <hif_isr+0x3b0>)
    efe4:	0018      	movs	r0, r3
    efe6:	4b45      	ldr	r3, [pc, #276]	; (f0fc <hif_isr+0x3a8>)
    efe8:	4798      	blx	r3
    efea:	e0a1      	b.n	f130 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    efec:	1d3b      	adds	r3, r7, #4
    efee:	781b      	ldrb	r3, [r3, #0]
    eff0:	b2db      	uxtb	r3, r3
    eff2:	2b06      	cmp	r3, #6
    eff4:	d121      	bne.n	f03a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
    eff6:	4b3d      	ldr	r3, [pc, #244]	; (f0ec <hif_isr+0x398>)
    eff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    effa:	2b00      	cmp	r3, #0
    effc:	d00d      	beq.n	f01a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    effe:	4b3b      	ldr	r3, [pc, #236]	; (f0ec <hif_isr+0x398>)
    f000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f002:	1d3a      	adds	r2, r7, #4
    f004:	7852      	ldrb	r2, [r2, #1]
    f006:	b2d0      	uxtb	r0, r2
    f008:	1d3a      	adds	r2, r7, #4
    f00a:	8852      	ldrh	r2, [r2, #2]
    f00c:	b292      	uxth	r2, r2
    f00e:	3a08      	subs	r2, #8
    f010:	b291      	uxth	r1, r2
    f012:	683a      	ldr	r2, [r7, #0]
    f014:	3208      	adds	r2, #8
    f016:	4798      	blx	r3
    f018:	e08a      	b.n	f130 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
    f01a:	2380      	movs	r3, #128	; 0x80
    f01c:	009a      	lsls	r2, r3, #2
    f01e:	4935      	ldr	r1, [pc, #212]	; (f0f4 <hif_isr+0x3a0>)
    f020:	4b35      	ldr	r3, [pc, #212]	; (f0f8 <hif_isr+0x3a4>)
    f022:	0018      	movs	r0, r3
    f024:	4b35      	ldr	r3, [pc, #212]	; (f0fc <hif_isr+0x3a8>)
    f026:	4798      	blx	r3
    f028:	4b3d      	ldr	r3, [pc, #244]	; (f120 <hif_isr+0x3cc>)
    f02a:	0018      	movs	r0, r3
    f02c:	4b33      	ldr	r3, [pc, #204]	; (f0fc <hif_isr+0x3a8>)
    f02e:	4798      	blx	r3
    f030:	4b34      	ldr	r3, [pc, #208]	; (f104 <hif_isr+0x3b0>)
    f032:	0018      	movs	r0, r3
    f034:	4b31      	ldr	r3, [pc, #196]	; (f0fc <hif_isr+0x3a8>)
    f036:	4798      	blx	r3
    f038:	e07a      	b.n	f130 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    f03a:	1d3b      	adds	r3, r7, #4
    f03c:	781b      	ldrb	r3, [r3, #0]
    f03e:	b2db      	uxtb	r3, r3
    f040:	2b07      	cmp	r3, #7
    f042:	d120      	bne.n	f086 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
    f044:	4b29      	ldr	r3, [pc, #164]	; (f0ec <hif_isr+0x398>)
    f046:	69db      	ldr	r3, [r3, #28]
    f048:	2b00      	cmp	r3, #0
    f04a:	d00d      	beq.n	f068 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    f04c:	4b27      	ldr	r3, [pc, #156]	; (f0ec <hif_isr+0x398>)
    f04e:	69db      	ldr	r3, [r3, #28]
    f050:	1d3a      	adds	r2, r7, #4
    f052:	7852      	ldrb	r2, [r2, #1]
    f054:	b2d0      	uxtb	r0, r2
    f056:	1d3a      	adds	r2, r7, #4
    f058:	8852      	ldrh	r2, [r2, #2]
    f05a:	b292      	uxth	r2, r2
    f05c:	3a08      	subs	r2, #8
    f05e:	b291      	uxth	r1, r2
    f060:	683a      	ldr	r2, [r7, #0]
    f062:	3208      	adds	r2, #8
    f064:	4798      	blx	r3
    f066:	e063      	b.n	f130 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
    f068:	4a2e      	ldr	r2, [pc, #184]	; (f124 <hif_isr+0x3d0>)
    f06a:	4922      	ldr	r1, [pc, #136]	; (f0f4 <hif_isr+0x3a0>)
    f06c:	4b22      	ldr	r3, [pc, #136]	; (f0f8 <hif_isr+0x3a4>)
    f06e:	0018      	movs	r0, r3
    f070:	4b22      	ldr	r3, [pc, #136]	; (f0fc <hif_isr+0x3a8>)
    f072:	4798      	blx	r3
    f074:	4b2c      	ldr	r3, [pc, #176]	; (f128 <hif_isr+0x3d4>)
    f076:	0018      	movs	r0, r3
    f078:	4b20      	ldr	r3, [pc, #128]	; (f0fc <hif_isr+0x3a8>)
    f07a:	4798      	blx	r3
    f07c:	4b21      	ldr	r3, [pc, #132]	; (f104 <hif_isr+0x3b0>)
    f07e:	0018      	movs	r0, r3
    f080:	4b1e      	ldr	r3, [pc, #120]	; (f0fc <hif_isr+0x3a8>)
    f082:	4798      	blx	r3
    f084:	e054      	b.n	f130 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    f086:	1d3b      	adds	r3, r7, #4
    f088:	781b      	ldrb	r3, [r3, #0]
    f08a:	b2db      	uxtb	r3, r3
    f08c:	2b05      	cmp	r3, #5
    f08e:	d111      	bne.n	f0b4 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
    f090:	4b16      	ldr	r3, [pc, #88]	; (f0ec <hif_isr+0x398>)
    f092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f094:	2b00      	cmp	r3, #0
    f096:	d04b      	beq.n	f130 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    f098:	4b14      	ldr	r3, [pc, #80]	; (f0ec <hif_isr+0x398>)
    f09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f09c:	1d3a      	adds	r2, r7, #4
    f09e:	7852      	ldrb	r2, [r2, #1]
    f0a0:	b2d0      	uxtb	r0, r2
    f0a2:	1d3a      	adds	r2, r7, #4
    f0a4:	8852      	ldrh	r2, [r2, #2]
    f0a6:	b292      	uxth	r2, r2
    f0a8:	3a08      	subs	r2, #8
    f0aa:	b291      	uxth	r1, r2
    f0ac:	683a      	ldr	r2, [r7, #0]
    f0ae:	3208      	adds	r2, #8
    f0b0:	4798      	blx	r3
    f0b2:	e03d      	b.n	f130 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    f0b4:	2384      	movs	r3, #132	; 0x84
    f0b6:	009a      	lsls	r2, r3, #2
    f0b8:	490e      	ldr	r1, [pc, #56]	; (f0f4 <hif_isr+0x3a0>)
    f0ba:	4b0f      	ldr	r3, [pc, #60]	; (f0f8 <hif_isr+0x3a4>)
    f0bc:	0018      	movs	r0, r3
    f0be:	4b0f      	ldr	r3, [pc, #60]	; (f0fc <hif_isr+0x3a8>)
    f0c0:	4798      	blx	r3
    f0c2:	4b1a      	ldr	r3, [pc, #104]	; (f12c <hif_isr+0x3d8>)
    f0c4:	0018      	movs	r0, r3
    f0c6:	4b0d      	ldr	r3, [pc, #52]	; (f0fc <hif_isr+0x3a8>)
    f0c8:	4798      	blx	r3
    f0ca:	4b0e      	ldr	r3, [pc, #56]	; (f104 <hif_isr+0x3b0>)
    f0cc:	0018      	movs	r0, r3
    f0ce:	4b0b      	ldr	r3, [pc, #44]	; (f0fc <hif_isr+0x3a8>)
    f0d0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    f0d2:	230f      	movs	r3, #15
    f0d4:	18fb      	adds	r3, r7, r3
    f0d6:	22fa      	movs	r2, #250	; 0xfa
    f0d8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    f0da:	e083      	b.n	f1e4 <hif_isr+0x490>
    f0dc:	00001070 	.word	0x00001070
    f0e0:	000107e1 	.word	0x000107e1
    f0e4:	0000df05 	.word	0x0000df05
    f0e8:	00010805 	.word	0x00010805
    f0ec:	20005bb4 	.word	0x20005bb4
    f0f0:	00001084 	.word	0x00001084
    f0f4:	00027450 	.word	0x00027450
    f0f8:	00027140 	.word	0x00027140
    f0fc:	0000b9b9 	.word	0x0000b9b9
    f100:	00027174 	.word	0x00027174
    f104:	0002713c 	.word	0x0002713c
    f108:	00010855 	.word	0x00010855
    f10c:	0002719c 	.word	0x0002719c
    f110:	000271b4 	.word	0x000271b4
    f114:	000271f4 	.word	0x000271f4
    f118:	00027218 	.word	0x00027218
    f11c:	0002723c 	.word	0x0002723c
    f120:	0002725c 	.word	0x0002725c
    f124:	00000207 	.word	0x00000207
    f128:	00027280 	.word	0x00027280
    f12c:	000272a4 	.word	0x000272a4
				}
				if(gstrHifCxt.u8HifRXDone)
    f130:	4b30      	ldr	r3, [pc, #192]	; (f1f4 <hif_isr+0x4a0>)
    f132:	789b      	ldrb	r3, [r3, #2]
    f134:	b2db      	uxtb	r3, r3
    f136:	2b00      	cmp	r3, #0
    f138:	d054      	beq.n	f1e4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    f13a:	4a2f      	ldr	r2, [pc, #188]	; (f1f8 <hif_isr+0x4a4>)
    f13c:	492f      	ldr	r1, [pc, #188]	; (f1fc <hif_isr+0x4a8>)
    f13e:	4b30      	ldr	r3, [pc, #192]	; (f200 <hif_isr+0x4ac>)
    f140:	0018      	movs	r0, r3
    f142:	4b30      	ldr	r3, [pc, #192]	; (f204 <hif_isr+0x4b0>)
    f144:	4798      	blx	r3
    f146:	1d3b      	adds	r3, r7, #4
    f148:	781b      	ldrb	r3, [r3, #0]
    f14a:	b2db      	uxtb	r3, r3
    f14c:	0019      	movs	r1, r3
    f14e:	1d3b      	adds	r3, r7, #4
    f150:	785b      	ldrb	r3, [r3, #1]
    f152:	b2db      	uxtb	r3, r3
    f154:	001a      	movs	r2, r3
    f156:	4b2c      	ldr	r3, [pc, #176]	; (f208 <hif_isr+0x4b4>)
    f158:	0018      	movs	r0, r3
    f15a:	4b2a      	ldr	r3, [pc, #168]	; (f204 <hif_isr+0x4b0>)
    f15c:	4798      	blx	r3
    f15e:	4b2b      	ldr	r3, [pc, #172]	; (f20c <hif_isr+0x4b8>)
    f160:	0018      	movs	r0, r3
    f162:	4b28      	ldr	r3, [pc, #160]	; (f204 <hif_isr+0x4b0>)
    f164:	4798      	blx	r3
					ret = hif_set_rx_done();
    f166:	230f      	movs	r3, #15
    f168:	18fc      	adds	r4, r7, r3
    f16a:	4b29      	ldr	r3, [pc, #164]	; (f210 <hif_isr+0x4bc>)
    f16c:	4798      	blx	r3
    f16e:	0003      	movs	r3, r0
    f170:	7023      	strb	r3, [r4, #0]
    f172:	e037      	b.n	f1e4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    f174:	4a27      	ldr	r2, [pc, #156]	; (f214 <hif_isr+0x4c0>)
    f176:	4921      	ldr	r1, [pc, #132]	; (f1fc <hif_isr+0x4a8>)
    f178:	4b21      	ldr	r3, [pc, #132]	; (f200 <hif_isr+0x4ac>)
    f17a:	0018      	movs	r0, r3
    f17c:	4b21      	ldr	r3, [pc, #132]	; (f204 <hif_isr+0x4b0>)
    f17e:	4798      	blx	r3
    f180:	4b25      	ldr	r3, [pc, #148]	; (f218 <hif_isr+0x4c4>)
    f182:	0018      	movs	r0, r3
    f184:	4b1f      	ldr	r3, [pc, #124]	; (f204 <hif_isr+0x4b0>)
    f186:	4798      	blx	r3
    f188:	4b20      	ldr	r3, [pc, #128]	; (f20c <hif_isr+0x4b8>)
    f18a:	0018      	movs	r0, r3
    f18c:	4b1d      	ldr	r3, [pc, #116]	; (f204 <hif_isr+0x4b0>)
    f18e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    f190:	230f      	movs	r3, #15
    f192:	18fb      	adds	r3, r7, r3
    f194:	22fe      	movs	r2, #254	; 0xfe
    f196:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    f198:	e024      	b.n	f1e4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    f19a:	4a20      	ldr	r2, [pc, #128]	; (f21c <hif_isr+0x4c8>)
    f19c:	4917      	ldr	r1, [pc, #92]	; (f1fc <hif_isr+0x4a8>)
    f19e:	4b18      	ldr	r3, [pc, #96]	; (f200 <hif_isr+0x4ac>)
    f1a0:	0018      	movs	r0, r3
    f1a2:	4b18      	ldr	r3, [pc, #96]	; (f204 <hif_isr+0x4b0>)
    f1a4:	4798      	blx	r3
    f1a6:	68ba      	ldr	r2, [r7, #8]
    f1a8:	4b1d      	ldr	r3, [pc, #116]	; (f220 <hif_isr+0x4cc>)
    f1aa:	0011      	movs	r1, r2
    f1ac:	0018      	movs	r0, r3
    f1ae:	4b15      	ldr	r3, [pc, #84]	; (f204 <hif_isr+0x4b0>)
    f1b0:	4798      	blx	r3
    f1b2:	4b16      	ldr	r3, [pc, #88]	; (f20c <hif_isr+0x4b8>)
    f1b4:	0018      	movs	r0, r3
    f1b6:	4b13      	ldr	r3, [pc, #76]	; (f204 <hif_isr+0x4b0>)
    f1b8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    f1ba:	230f      	movs	r3, #15
    f1bc:	18fb      	adds	r3, r7, r3
    f1be:	22f4      	movs	r2, #244	; 0xf4
    f1c0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    f1c2:	e00f      	b.n	f1e4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    f1c4:	4a17      	ldr	r2, [pc, #92]	; (f224 <hif_isr+0x4d0>)
    f1c6:	490d      	ldr	r1, [pc, #52]	; (f1fc <hif_isr+0x4a8>)
    f1c8:	4b0d      	ldr	r3, [pc, #52]	; (f200 <hif_isr+0x4ac>)
    f1ca:	0018      	movs	r0, r3
    f1cc:	4b0d      	ldr	r3, [pc, #52]	; (f204 <hif_isr+0x4b0>)
    f1ce:	4798      	blx	r3
    f1d0:	4b15      	ldr	r3, [pc, #84]	; (f228 <hif_isr+0x4d4>)
    f1d2:	0018      	movs	r0, r3
    f1d4:	4b0b      	ldr	r3, [pc, #44]	; (f204 <hif_isr+0x4b0>)
    f1d6:	4798      	blx	r3
    f1d8:	4b0c      	ldr	r3, [pc, #48]	; (f20c <hif_isr+0x4b8>)
    f1da:	0018      	movs	r0, r3
    f1dc:	4b09      	ldr	r3, [pc, #36]	; (f204 <hif_isr+0x4b0>)
    f1de:	4798      	blx	r3
		goto ERR1;
    f1e0:	e000      	b.n	f1e4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
    f1e2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    f1e4:	230f      	movs	r3, #15
    f1e6:	18fb      	adds	r3, r7, r3
    f1e8:	781b      	ldrb	r3, [r3, #0]
    f1ea:	b25b      	sxtb	r3, r3
}
    f1ec:	0018      	movs	r0, r3
    f1ee:	46bd      	mov	sp, r7
    f1f0:	b005      	add	sp, #20
    f1f2:	bd90      	pop	{r4, r7, pc}
    f1f4:	20005bb4 	.word	0x20005bb4
    f1f8:	00000216 	.word	0x00000216
    f1fc:	00027450 	.word	0x00027450
    f200:	00027140 	.word	0x00027140
    f204:	0000b9b9 	.word	0x0000b9b9
    f208:	000272bc 	.word	0x000272bc
    f20c:	0002713c 	.word	0x0002713c
    f210:	0000e7e9 	.word	0x0000e7e9
    f214:	0000021d 	.word	0x0000021d
    f218:	000272e8 	.word	0x000272e8
    f21c:	00000225 	.word	0x00000225
    f220:	000272fc 	.word	0x000272fc
    f224:	0000022e 	.word	0x0000022e
    f228:	00027318 	.word	0x00027318

0000f22c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    f22c:	b590      	push	{r4, r7, lr}
    f22e:	b083      	sub	sp, #12
    f230:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    f232:	1dfb      	adds	r3, r7, #7
    f234:	2200      	movs	r2, #0
    f236:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
    f238:	4b1c      	ldr	r3, [pc, #112]	; (f2ac <hif_handle_isr+0x80>)
    f23a:	2200      	movs	r2, #0
    f23c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    f23e:	e024      	b.n	f28a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    f240:	4b1a      	ldr	r3, [pc, #104]	; (f2ac <hif_handle_isr+0x80>)
    f242:	78db      	ldrb	r3, [r3, #3]
    f244:	b2db      	uxtb	r3, r3
    f246:	3b01      	subs	r3, #1
    f248:	b2da      	uxtb	r2, r3
    f24a:	4b18      	ldr	r3, [pc, #96]	; (f2ac <hif_handle_isr+0x80>)
    f24c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    f24e:	1dfc      	adds	r4, r7, #7
    f250:	4b17      	ldr	r3, [pc, #92]	; (f2b0 <hif_handle_isr+0x84>)
    f252:	4798      	blx	r3
    f254:	0003      	movs	r3, r0
    f256:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    f258:	1dfb      	adds	r3, r7, #7
    f25a:	781b      	ldrb	r3, [r3, #0]
    f25c:	b25b      	sxtb	r3, r3
    f25e:	2b00      	cmp	r3, #0
    f260:	d100      	bne.n	f264 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    f262:	e012      	b.n	f28a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    f264:	4a13      	ldr	r2, [pc, #76]	; (f2b4 <hif_handle_isr+0x88>)
    f266:	4914      	ldr	r1, [pc, #80]	; (f2b8 <hif_handle_isr+0x8c>)
    f268:	4b14      	ldr	r3, [pc, #80]	; (f2bc <hif_handle_isr+0x90>)
    f26a:	0018      	movs	r0, r3
    f26c:	4b14      	ldr	r3, [pc, #80]	; (f2c0 <hif_handle_isr+0x94>)
    f26e:	4798      	blx	r3
    f270:	1dfb      	adds	r3, r7, #7
    f272:	2200      	movs	r2, #0
    f274:	569a      	ldrsb	r2, [r3, r2]
    f276:	4b13      	ldr	r3, [pc, #76]	; (f2c4 <hif_handle_isr+0x98>)
    f278:	0011      	movs	r1, r2
    f27a:	0018      	movs	r0, r3
    f27c:	4b10      	ldr	r3, [pc, #64]	; (f2c0 <hif_handle_isr+0x94>)
    f27e:	4798      	blx	r3
    f280:	4b11      	ldr	r3, [pc, #68]	; (f2c8 <hif_handle_isr+0x9c>)
    f282:	0018      	movs	r0, r3
    f284:	4b0e      	ldr	r3, [pc, #56]	; (f2c0 <hif_handle_isr+0x94>)
    f286:	4798      	blx	r3
			ret = hif_isr();
    f288:	e7e1      	b.n	f24e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    f28a:	4b08      	ldr	r3, [pc, #32]	; (f2ac <hif_handle_isr+0x80>)
    f28c:	78db      	ldrb	r3, [r3, #3]
    f28e:	b2db      	uxtb	r3, r3
    f290:	2b00      	cmp	r3, #0
    f292:	d004      	beq.n	f29e <hif_handle_isr+0x72>
    f294:	4b05      	ldr	r3, [pc, #20]	; (f2ac <hif_handle_isr+0x80>)
    f296:	791b      	ldrb	r3, [r3, #4]
    f298:	b2db      	uxtb	r3, r3
    f29a:	2b00      	cmp	r3, #0
    f29c:	d0d0      	beq.n	f240 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
    f29e:	1dfb      	adds	r3, r7, #7
    f2a0:	781b      	ldrb	r3, [r3, #0]
    f2a2:	b25b      	sxtb	r3, r3
}
    f2a4:	0018      	movs	r0, r3
    f2a6:	46bd      	mov	sp, r7
    f2a8:	b003      	add	sp, #12
    f2aa:	bd90      	pop	{r4, r7, pc}
    f2ac:	20005bb4 	.word	0x20005bb4
    f2b0:	0000ed55 	.word	0x0000ed55
    f2b4:	00000257 	.word	0x00000257
    f2b8:	00027458 	.word	0x00027458
    f2bc:	00027140 	.word	0x00027140
    f2c0:	0000b9b9 	.word	0x0000b9b9
    f2c4:	0002733c 	.word	0x0002733c
    f2c8:	0002713c 	.word	0x0002713c

0000f2cc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    f2cc:	b590      	push	{r4, r7, lr}
    f2ce:	b087      	sub	sp, #28
    f2d0:	af00      	add	r7, sp, #0
    f2d2:	60f8      	str	r0, [r7, #12]
    f2d4:	60b9      	str	r1, [r7, #8]
    f2d6:	0019      	movs	r1, r3
    f2d8:	1dbb      	adds	r3, r7, #6
    f2da:	801a      	strh	r2, [r3, #0]
    f2dc:	1d7b      	adds	r3, r7, #5
    f2de:	1c0a      	adds	r2, r1, #0
    f2e0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    f2e2:	2317      	movs	r3, #23
    f2e4:	18fb      	adds	r3, r7, r3
    f2e6:	2200      	movs	r2, #0
    f2e8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    f2ea:	68fb      	ldr	r3, [r7, #12]
    f2ec:	2b00      	cmp	r3, #0
    f2ee:	d006      	beq.n	f2fe <hif_receive+0x32>
    f2f0:	68bb      	ldr	r3, [r7, #8]
    f2f2:	2b00      	cmp	r3, #0
    f2f4:	d003      	beq.n	f2fe <hif_receive+0x32>
    f2f6:	1dbb      	adds	r3, r7, #6
    f2f8:	881b      	ldrh	r3, [r3, #0]
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	d11e      	bne.n	f33c <hif_receive+0x70>
	{
		if(isDone)
    f2fe:	1d7b      	adds	r3, r7, #5
    f300:	781b      	ldrb	r3, [r3, #0]
    f302:	2b00      	cmp	r3, #0
    f304:	d006      	beq.n	f314 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    f306:	2317      	movs	r3, #23
    f308:	18fc      	adds	r4, r7, r3
    f30a:	4b45      	ldr	r3, [pc, #276]	; (f420 <hif_receive+0x154>)
    f30c:	4798      	blx	r3
    f30e:	0003      	movs	r3, r0
    f310:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    f312:	e07c      	b.n	f40e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
    f314:	2317      	movs	r3, #23
    f316:	18fb      	adds	r3, r7, r3
    f318:	22f4      	movs	r2, #244	; 0xf4
    f31a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    f31c:	239e      	movs	r3, #158	; 0x9e
    f31e:	009a      	lsls	r2, r3, #2
    f320:	4940      	ldr	r1, [pc, #256]	; (f424 <hif_receive+0x158>)
    f322:	4b41      	ldr	r3, [pc, #260]	; (f428 <hif_receive+0x15c>)
    f324:	0018      	movs	r0, r3
    f326:	4b41      	ldr	r3, [pc, #260]	; (f42c <hif_receive+0x160>)
    f328:	4798      	blx	r3
    f32a:	4b41      	ldr	r3, [pc, #260]	; (f430 <hif_receive+0x164>)
    f32c:	0018      	movs	r0, r3
    f32e:	4b3f      	ldr	r3, [pc, #252]	; (f42c <hif_receive+0x160>)
    f330:	4798      	blx	r3
    f332:	4b40      	ldr	r3, [pc, #256]	; (f434 <hif_receive+0x168>)
    f334:	0018      	movs	r0, r3
    f336:	4b3d      	ldr	r3, [pc, #244]	; (f42c <hif_receive+0x160>)
    f338:	4798      	blx	r3
		goto ERR1;
    f33a:	e068      	b.n	f40e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    f33c:	1dbb      	adds	r3, r7, #6
    f33e:	881a      	ldrh	r2, [r3, #0]
    f340:	4b3d      	ldr	r3, [pc, #244]	; (f438 <hif_receive+0x16c>)
    f342:	68db      	ldr	r3, [r3, #12]
    f344:	429a      	cmp	r2, r3
    f346:	d917      	bls.n	f378 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
    f348:	2317      	movs	r3, #23
    f34a:	18fb      	adds	r3, r7, r3
    f34c:	22f4      	movs	r2, #244	; 0xf4
    f34e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    f350:	23a0      	movs	r3, #160	; 0xa0
    f352:	009a      	lsls	r2, r3, #2
    f354:	4933      	ldr	r1, [pc, #204]	; (f424 <hif_receive+0x158>)
    f356:	4b34      	ldr	r3, [pc, #208]	; (f428 <hif_receive+0x15c>)
    f358:	0018      	movs	r0, r3
    f35a:	4b34      	ldr	r3, [pc, #208]	; (f42c <hif_receive+0x160>)
    f35c:	4798      	blx	r3
    f35e:	1dbb      	adds	r3, r7, #6
    f360:	8819      	ldrh	r1, [r3, #0]
    f362:	4b35      	ldr	r3, [pc, #212]	; (f438 <hif_receive+0x16c>)
    f364:	68da      	ldr	r2, [r3, #12]
    f366:	4b35      	ldr	r3, [pc, #212]	; (f43c <hif_receive+0x170>)
    f368:	0018      	movs	r0, r3
    f36a:	4b30      	ldr	r3, [pc, #192]	; (f42c <hif_receive+0x160>)
    f36c:	4798      	blx	r3
    f36e:	4b31      	ldr	r3, [pc, #196]	; (f434 <hif_receive+0x168>)
    f370:	0018      	movs	r0, r3
    f372:	4b2e      	ldr	r3, [pc, #184]	; (f42c <hif_receive+0x160>)
    f374:	4798      	blx	r3
		goto ERR1;
    f376:	e04a      	b.n	f40e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    f378:	4b2f      	ldr	r3, [pc, #188]	; (f438 <hif_receive+0x16c>)
    f37a:	689a      	ldr	r2, [r3, #8]
    f37c:	68fb      	ldr	r3, [r7, #12]
    f37e:	429a      	cmp	r2, r3
    f380:	d80a      	bhi.n	f398 <hif_receive+0xcc>
    f382:	1dbb      	adds	r3, r7, #6
    f384:	881a      	ldrh	r2, [r3, #0]
    f386:	68fb      	ldr	r3, [r7, #12]
    f388:	18d2      	adds	r2, r2, r3
    f38a:	4b2b      	ldr	r3, [pc, #172]	; (f438 <hif_receive+0x16c>)
    f38c:	6899      	ldr	r1, [r3, #8]
    f38e:	4b2a      	ldr	r3, [pc, #168]	; (f438 <hif_receive+0x16c>)
    f390:	68db      	ldr	r3, [r3, #12]
    f392:	18cb      	adds	r3, r1, r3
    f394:	429a      	cmp	r2, r3
    f396:	d912      	bls.n	f3be <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
    f398:	2317      	movs	r3, #23
    f39a:	18fb      	adds	r3, r7, r3
    f39c:	22f4      	movs	r2, #244	; 0xf4
    f39e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    f3a0:	4a27      	ldr	r2, [pc, #156]	; (f440 <hif_receive+0x174>)
    f3a2:	4920      	ldr	r1, [pc, #128]	; (f424 <hif_receive+0x158>)
    f3a4:	4b20      	ldr	r3, [pc, #128]	; (f428 <hif_receive+0x15c>)
    f3a6:	0018      	movs	r0, r3
    f3a8:	4b20      	ldr	r3, [pc, #128]	; (f42c <hif_receive+0x160>)
    f3aa:	4798      	blx	r3
    f3ac:	4b25      	ldr	r3, [pc, #148]	; (f444 <hif_receive+0x178>)
    f3ae:	0018      	movs	r0, r3
    f3b0:	4b1e      	ldr	r3, [pc, #120]	; (f42c <hif_receive+0x160>)
    f3b2:	4798      	blx	r3
    f3b4:	4b1f      	ldr	r3, [pc, #124]	; (f434 <hif_receive+0x168>)
    f3b6:	0018      	movs	r0, r3
    f3b8:	4b1c      	ldr	r3, [pc, #112]	; (f42c <hif_receive+0x160>)
    f3ba:	4798      	blx	r3
		goto ERR1;
    f3bc:	e027      	b.n	f40e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    f3be:	1dbb      	adds	r3, r7, #6
    f3c0:	881a      	ldrh	r2, [r3, #0]
    f3c2:	2317      	movs	r3, #23
    f3c4:	18fc      	adds	r4, r7, r3
    f3c6:	68b9      	ldr	r1, [r7, #8]
    f3c8:	68fb      	ldr	r3, [r7, #12]
    f3ca:	0018      	movs	r0, r3
    f3cc:	4b1e      	ldr	r3, [pc, #120]	; (f448 <hif_receive+0x17c>)
    f3ce:	4798      	blx	r3
    f3d0:	0003      	movs	r3, r0
    f3d2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    f3d4:	2317      	movs	r3, #23
    f3d6:	18fb      	adds	r3, r7, r3
    f3d8:	781b      	ldrb	r3, [r3, #0]
    f3da:	b25b      	sxtb	r3, r3
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d115      	bne.n	f40c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    f3e0:	4b15      	ldr	r3, [pc, #84]	; (f438 <hif_receive+0x16c>)
    f3e2:	689a      	ldr	r2, [r3, #8]
    f3e4:	4b14      	ldr	r3, [pc, #80]	; (f438 <hif_receive+0x16c>)
    f3e6:	68db      	ldr	r3, [r3, #12]
    f3e8:	18d2      	adds	r2, r2, r3
    f3ea:	1dbb      	adds	r3, r7, #6
    f3ec:	8819      	ldrh	r1, [r3, #0]
    f3ee:	68fb      	ldr	r3, [r7, #12]
    f3f0:	18cb      	adds	r3, r1, r3
    f3f2:	429a      	cmp	r2, r3
    f3f4:	d003      	beq.n	f3fe <hif_receive+0x132>
    f3f6:	1d7b      	adds	r3, r7, #5
    f3f8:	781b      	ldrb	r3, [r3, #0]
    f3fa:	2b00      	cmp	r3, #0
    f3fc:	d007      	beq.n	f40e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    f3fe:	2317      	movs	r3, #23
    f400:	18fc      	adds	r4, r7, r3
    f402:	4b07      	ldr	r3, [pc, #28]	; (f420 <hif_receive+0x154>)
    f404:	4798      	blx	r3
    f406:	0003      	movs	r3, r0
    f408:	7023      	strb	r3, [r4, #0]
    f40a:	e000      	b.n	f40e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
    f40c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    f40e:	2317      	movs	r3, #23
    f410:	18fb      	adds	r3, r7, r3
    f412:	781b      	ldrb	r3, [r3, #0]
    f414:	b25b      	sxtb	r3, r3
}
    f416:	0018      	movs	r0, r3
    f418:	46bd      	mov	sp, r7
    f41a:	b007      	add	sp, #28
    f41c:	bd90      	pop	{r4, r7, pc}
    f41e:	46c0      	nop			; (mov r8, r8)
    f420:	0000e7e9 	.word	0x0000e7e9
    f424:	00027468 	.word	0x00027468
    f428:	00027140 	.word	0x00027140
    f42c:	0000b9b9 	.word	0x0000b9b9
    f430:	0002736c 	.word	0x0002736c
    f434:	0002713c 	.word	0x0002713c
    f438:	20005bb4 	.word	0x20005bb4
    f43c:	0002738c 	.word	0x0002738c
    f440:	00000286 	.word	0x00000286
    f444:	000273d4 	.word	0x000273d4
    f448:	00010855 	.word	0x00010855

0000f44c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    f44c:	b580      	push	{r7, lr}
    f44e:	b084      	sub	sp, #16
    f450:	af00      	add	r7, sp, #0
    f452:	0002      	movs	r2, r0
    f454:	6039      	str	r1, [r7, #0]
    f456:	1dfb      	adds	r3, r7, #7
    f458:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    f45a:	230f      	movs	r3, #15
    f45c:	18fb      	adds	r3, r7, r3
    f45e:	2200      	movs	r2, #0
    f460:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    f462:	1dfb      	adds	r3, r7, #7
    f464:	781b      	ldrb	r3, [r3, #0]
    f466:	2b07      	cmp	r3, #7
    f468:	d820      	bhi.n	f4ac <hif_register_cb+0x60>
    f46a:	009a      	lsls	r2, r3, #2
    f46c:	4b1e      	ldr	r3, [pc, #120]	; (f4e8 <hif_register_cb+0x9c>)
    f46e:	18d3      	adds	r3, r2, r3
    f470:	681b      	ldr	r3, [r3, #0]
    f472:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    f474:	4b1d      	ldr	r3, [pc, #116]	; (f4ec <hif_register_cb+0xa0>)
    f476:	683a      	ldr	r2, [r7, #0]
    f478:	615a      	str	r2, [r3, #20]
			break;
    f47a:	e02d      	b.n	f4d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    f47c:	4b1b      	ldr	r3, [pc, #108]	; (f4ec <hif_register_cb+0xa0>)
    f47e:	683a      	ldr	r2, [r7, #0]
    f480:	611a      	str	r2, [r3, #16]
			break;
    f482:	e029      	b.n	f4d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    f484:	4b19      	ldr	r3, [pc, #100]	; (f4ec <hif_register_cb+0xa0>)
    f486:	683a      	ldr	r2, [r7, #0]
    f488:	619a      	str	r2, [r3, #24]
			break;
    f48a:	e025      	b.n	f4d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    f48c:	4b17      	ldr	r3, [pc, #92]	; (f4ec <hif_register_cb+0xa0>)
    f48e:	683a      	ldr	r2, [r7, #0]
    f490:	621a      	str	r2, [r3, #32]
			break;
    f492:	e021      	b.n	f4d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    f494:	4b15      	ldr	r3, [pc, #84]	; (f4ec <hif_register_cb+0xa0>)
    f496:	683a      	ldr	r2, [r7, #0]
    f498:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    f49a:	e01d      	b.n	f4d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    f49c:	4b13      	ldr	r3, [pc, #76]	; (f4ec <hif_register_cb+0xa0>)
    f49e:	683a      	ldr	r2, [r7, #0]
    f4a0:	61da      	str	r2, [r3, #28]
			break;
    f4a2:	e019      	b.n	f4d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    f4a4:	4b11      	ldr	r3, [pc, #68]	; (f4ec <hif_register_cb+0xa0>)
    f4a6:	683a      	ldr	r2, [r7, #0]
    f4a8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
    f4aa:	e015      	b.n	f4d8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    f4ac:	4a10      	ldr	r2, [pc, #64]	; (f4f0 <hif_register_cb+0xa4>)
    f4ae:	4911      	ldr	r1, [pc, #68]	; (f4f4 <hif_register_cb+0xa8>)
    f4b0:	4b11      	ldr	r3, [pc, #68]	; (f4f8 <hif_register_cb+0xac>)
    f4b2:	0018      	movs	r0, r3
    f4b4:	4b11      	ldr	r3, [pc, #68]	; (f4fc <hif_register_cb+0xb0>)
    f4b6:	4798      	blx	r3
    f4b8:	1dfb      	adds	r3, r7, #7
    f4ba:	781a      	ldrb	r2, [r3, #0]
    f4bc:	4b10      	ldr	r3, [pc, #64]	; (f500 <hif_register_cb+0xb4>)
    f4be:	0011      	movs	r1, r2
    f4c0:	0018      	movs	r0, r3
    f4c2:	4b0e      	ldr	r3, [pc, #56]	; (f4fc <hif_register_cb+0xb0>)
    f4c4:	4798      	blx	r3
    f4c6:	4b0f      	ldr	r3, [pc, #60]	; (f504 <hif_register_cb+0xb8>)
    f4c8:	0018      	movs	r0, r3
    f4ca:	4b0c      	ldr	r3, [pc, #48]	; (f4fc <hif_register_cb+0xb0>)
    f4cc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    f4ce:	230f      	movs	r3, #15
    f4d0:	18fb      	adds	r3, r7, r3
    f4d2:	22f4      	movs	r2, #244	; 0xf4
    f4d4:	701a      	strb	r2, [r3, #0]
			break;
    f4d6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    f4d8:	230f      	movs	r3, #15
    f4da:	18fb      	adds	r3, r7, r3
    f4dc:	781b      	ldrb	r3, [r3, #0]
    f4de:	b25b      	sxtb	r3, r3
}
    f4e0:	0018      	movs	r0, r3
    f4e2:	46bd      	mov	sp, r7
    f4e4:	b004      	add	sp, #16
    f4e6:	bd80      	pop	{r7, pc}
    f4e8:	00027424 	.word	0x00027424
    f4ec:	20005bb4 	.word	0x20005bb4
    f4f0:	000002be 	.word	0x000002be
    f4f4:	00027474 	.word	0x00027474
    f4f8:	00027140 	.word	0x00027140
    f4fc:	0000b9b9 	.word	0x0000b9b9
    f500:	00027418 	.word	0x00027418
    f504:	0002713c 	.word	0x0002713c

0000f508 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    f508:	b590      	push	{r4, r7, lr}
    f50a:	b0af      	sub	sp, #188	; 0xbc
    f50c:	af02      	add	r7, sp, #8
    f50e:	603a      	str	r2, [r7, #0]
    f510:	1dfb      	adds	r3, r7, #7
    f512:	1c02      	adds	r2, r0, #0
    f514:	701a      	strb	r2, [r3, #0]
    f516:	1d3b      	adds	r3, r7, #4
    f518:	1c0a      	adds	r2, r1, #0
    f51a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    f51c:	1dfb      	adds	r3, r7, #7
    f51e:	781b      	ldrb	r3, [r3, #0]
    f520:	2b2c      	cmp	r3, #44	; 0x2c
    f522:	d116      	bne.n	f552 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    f524:	23a4      	movs	r3, #164	; 0xa4
    f526:	18f9      	adds	r1, r7, r3
    f528:	6838      	ldr	r0, [r7, #0]
    f52a:	2300      	movs	r3, #0
    f52c:	2204      	movs	r2, #4
    f52e:	4cca      	ldr	r4, [pc, #808]	; (f858 <m2m_wifi_cb+0x350>)
    f530:	47a0      	blx	r4
    f532:	1e03      	subs	r3, r0, #0
    f534:	d000      	beq.n	f538 <m2m_wifi_cb+0x30>
    f536:	e1b4      	b.n	f8a2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
    f538:	4bc8      	ldr	r3, [pc, #800]	; (f85c <m2m_wifi_cb+0x354>)
    f53a:	681b      	ldr	r3, [r3, #0]
    f53c:	2b00      	cmp	r3, #0
    f53e:	d100      	bne.n	f542 <m2m_wifi_cb+0x3a>
    f540:	e1af      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    f542:	4bc6      	ldr	r3, [pc, #792]	; (f85c <m2m_wifi_cb+0x354>)
    f544:	681b      	ldr	r3, [r3, #0]
    f546:	22a4      	movs	r2, #164	; 0xa4
    f548:	18ba      	adds	r2, r7, r2
    f54a:	0011      	movs	r1, r2
    f54c:	202c      	movs	r0, #44	; 0x2c
    f54e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    f550:	e1a7      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    f552:	1dfb      	adds	r3, r7, #7
    f554:	781b      	ldrb	r3, [r3, #0]
    f556:	2b1b      	cmp	r3, #27
    f558:	d116      	bne.n	f588 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    f55a:	239c      	movs	r3, #156	; 0x9c
    f55c:	18f9      	adds	r1, r7, r3
    f55e:	6838      	ldr	r0, [r7, #0]
    f560:	2300      	movs	r3, #0
    f562:	2208      	movs	r2, #8
    f564:	4cbc      	ldr	r4, [pc, #752]	; (f858 <m2m_wifi_cb+0x350>)
    f566:	47a0      	blx	r4
    f568:	1e03      	subs	r3, r0, #0
    f56a:	d000      	beq.n	f56e <m2m_wifi_cb+0x66>
    f56c:	e199      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    f56e:	4bbb      	ldr	r3, [pc, #748]	; (f85c <m2m_wifi_cb+0x354>)
    f570:	681b      	ldr	r3, [r3, #0]
    f572:	2b00      	cmp	r3, #0
    f574:	d100      	bne.n	f578 <m2m_wifi_cb+0x70>
    f576:	e194      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    f578:	4bb8      	ldr	r3, [pc, #736]	; (f85c <m2m_wifi_cb+0x354>)
    f57a:	681b      	ldr	r3, [r3, #0]
    f57c:	229c      	movs	r2, #156	; 0x9c
    f57e:	18ba      	adds	r2, r7, r2
    f580:	0011      	movs	r1, r2
    f582:	201b      	movs	r0, #27
    f584:	4798      	blx	r3
}
    f586:	e18c      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    f588:	1dfb      	adds	r3, r7, #7
    f58a:	781b      	ldrb	r3, [r3, #0]
    f58c:	2b06      	cmp	r3, #6
    f58e:	d116      	bne.n	f5be <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    f590:	230c      	movs	r3, #12
    f592:	18f9      	adds	r1, r7, r3
    f594:	6838      	ldr	r0, [r7, #0]
    f596:	2301      	movs	r3, #1
    f598:	2230      	movs	r2, #48	; 0x30
    f59a:	4caf      	ldr	r4, [pc, #700]	; (f858 <m2m_wifi_cb+0x350>)
    f59c:	47a0      	blx	r4
    f59e:	1e03      	subs	r3, r0, #0
    f5a0:	d000      	beq.n	f5a4 <m2m_wifi_cb+0x9c>
    f5a2:	e17e      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    f5a4:	4bad      	ldr	r3, [pc, #692]	; (f85c <m2m_wifi_cb+0x354>)
    f5a6:	681b      	ldr	r3, [r3, #0]
    f5a8:	2b00      	cmp	r3, #0
    f5aa:	d100      	bne.n	f5ae <m2m_wifi_cb+0xa6>
    f5ac:	e179      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    f5ae:	4bab      	ldr	r3, [pc, #684]	; (f85c <m2m_wifi_cb+0x354>)
    f5b0:	681b      	ldr	r3, [r3, #0]
    f5b2:	220c      	movs	r2, #12
    f5b4:	18ba      	adds	r2, r7, r2
    f5b6:	0011      	movs	r1, r2
    f5b8:	2006      	movs	r0, #6
    f5ba:	4798      	blx	r3
}
    f5bc:	e171      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    f5be:	1dfb      	adds	r3, r7, #7
    f5c0:	781b      	ldrb	r3, [r3, #0]
    f5c2:	2b0e      	cmp	r3, #14
    f5c4:	d100      	bne.n	f5c8 <m2m_wifi_cb+0xc0>
    f5c6:	e16c      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    f5c8:	1dfb      	adds	r3, r7, #7
    f5ca:	781b      	ldrb	r3, [r3, #0]
    f5cc:	2b32      	cmp	r3, #50	; 0x32
    f5ce:	d116      	bne.n	f5fe <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    f5d0:	2384      	movs	r3, #132	; 0x84
    f5d2:	18f9      	adds	r1, r7, r3
    f5d4:	6838      	ldr	r0, [r7, #0]
    f5d6:	2300      	movs	r3, #0
    f5d8:	2218      	movs	r2, #24
    f5da:	4c9f      	ldr	r4, [pc, #636]	; (f858 <m2m_wifi_cb+0x350>)
    f5dc:	47a0      	blx	r4
    f5de:	1e03      	subs	r3, r0, #0
    f5e0:	d000      	beq.n	f5e4 <m2m_wifi_cb+0xdc>
    f5e2:	e15e      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    f5e4:	4b9d      	ldr	r3, [pc, #628]	; (f85c <m2m_wifi_cb+0x354>)
    f5e6:	681b      	ldr	r3, [r3, #0]
    f5e8:	2b00      	cmp	r3, #0
    f5ea:	d100      	bne.n	f5ee <m2m_wifi_cb+0xe6>
    f5ec:	e159      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    f5ee:	4b9b      	ldr	r3, [pc, #620]	; (f85c <m2m_wifi_cb+0x354>)
    f5f0:	681b      	ldr	r3, [r3, #0]
    f5f2:	2284      	movs	r2, #132	; 0x84
    f5f4:	18ba      	adds	r2, r7, r2
    f5f6:	0011      	movs	r1, r2
    f5f8:	2032      	movs	r0, #50	; 0x32
    f5fa:	4798      	blx	r3
}
    f5fc:	e151      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    f5fe:	1dfb      	adds	r3, r7, #7
    f600:	781b      	ldrb	r3, [r3, #0]
    f602:	2b2f      	cmp	r3, #47	; 0x2f
    f604:	d11d      	bne.n	f642 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    f606:	230c      	movs	r3, #12
    f608:	18fb      	adds	r3, r7, r3
    f60a:	2264      	movs	r2, #100	; 0x64
    f60c:	2100      	movs	r1, #0
    f60e:	0018      	movs	r0, r3
    f610:	4b93      	ldr	r3, [pc, #588]	; (f860 <m2m_wifi_cb+0x358>)
    f612:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    f614:	230c      	movs	r3, #12
    f616:	18f9      	adds	r1, r7, r3
    f618:	6838      	ldr	r0, [r7, #0]
    f61a:	2300      	movs	r3, #0
    f61c:	2264      	movs	r2, #100	; 0x64
    f61e:	4c8e      	ldr	r4, [pc, #568]	; (f858 <m2m_wifi_cb+0x350>)
    f620:	47a0      	blx	r4
    f622:	1e03      	subs	r3, r0, #0
    f624:	d000      	beq.n	f628 <m2m_wifi_cb+0x120>
    f626:	e13c      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    f628:	4b8c      	ldr	r3, [pc, #560]	; (f85c <m2m_wifi_cb+0x354>)
    f62a:	681b      	ldr	r3, [r3, #0]
    f62c:	2b00      	cmp	r3, #0
    f62e:	d100      	bne.n	f632 <m2m_wifi_cb+0x12a>
    f630:	e137      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    f632:	4b8a      	ldr	r3, [pc, #552]	; (f85c <m2m_wifi_cb+0x354>)
    f634:	681b      	ldr	r3, [r3, #0]
    f636:	220c      	movs	r2, #12
    f638:	18ba      	adds	r2, r7, r2
    f63a:	0011      	movs	r1, r2
    f63c:	202f      	movs	r0, #47	; 0x2f
    f63e:	4798      	blx	r3
}
    f640:	e12f      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    f642:	1dfb      	adds	r3, r7, #7
    f644:	781b      	ldrb	r3, [r3, #0]
    f646:	2b34      	cmp	r3, #52	; 0x34
    f648:	d137      	bne.n	f6ba <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    f64a:	2380      	movs	r3, #128	; 0x80
    f64c:	18f9      	adds	r1, r7, r3
    f64e:	6838      	ldr	r0, [r7, #0]
    f650:	2300      	movs	r3, #0
    f652:	2204      	movs	r2, #4
    f654:	4c80      	ldr	r4, [pc, #512]	; (f858 <m2m_wifi_cb+0x350>)
    f656:	47a0      	blx	r4
    f658:	1e03      	subs	r3, r0, #0
    f65a:	d000      	beq.n	f65e <m2m_wifi_cb+0x156>
    f65c:	e121      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    f65e:	4b81      	ldr	r3, [pc, #516]	; (f864 <m2m_wifi_cb+0x35c>)
    f660:	0018      	movs	r0, r3
    f662:	4b81      	ldr	r3, [pc, #516]	; (f868 <m2m_wifi_cb+0x360>)
    f664:	4798      	blx	r3
    f666:	2380      	movs	r3, #128	; 0x80
    f668:	18fb      	adds	r3, r7, r3
    f66a:	681b      	ldr	r3, [r3, #0]
    f66c:	0e1b      	lsrs	r3, r3, #24
    f66e:	b2db      	uxtb	r3, r3
    f670:	0019      	movs	r1, r3
    f672:	2380      	movs	r3, #128	; 0x80
    f674:	18fb      	adds	r3, r7, r3
    f676:	681b      	ldr	r3, [r3, #0]
    f678:	0c1b      	lsrs	r3, r3, #16
    f67a:	b2db      	uxtb	r3, r3
    f67c:	001a      	movs	r2, r3
    f67e:	2380      	movs	r3, #128	; 0x80
    f680:	18fb      	adds	r3, r7, r3
    f682:	681b      	ldr	r3, [r3, #0]
    f684:	0a1b      	lsrs	r3, r3, #8
    f686:	b2db      	uxtb	r3, r3
    f688:	001c      	movs	r4, r3
    f68a:	2380      	movs	r3, #128	; 0x80
    f68c:	18fb      	adds	r3, r7, r3
    f68e:	681b      	ldr	r3, [r3, #0]
    f690:	b2db      	uxtb	r3, r3
    f692:	4876      	ldr	r0, [pc, #472]	; (f86c <m2m_wifi_cb+0x364>)
    f694:	9300      	str	r3, [sp, #0]
    f696:	0023      	movs	r3, r4
    f698:	4c73      	ldr	r4, [pc, #460]	; (f868 <m2m_wifi_cb+0x360>)
    f69a:	47a0      	blx	r4
    f69c:	4b74      	ldr	r3, [pc, #464]	; (f870 <m2m_wifi_cb+0x368>)
    f69e:	0018      	movs	r0, r3
    f6a0:	4b71      	ldr	r3, [pc, #452]	; (f868 <m2m_wifi_cb+0x360>)
    f6a2:	4798      	blx	r3
			if (gpfAppWifiCb)
    f6a4:	4b6d      	ldr	r3, [pc, #436]	; (f85c <m2m_wifi_cb+0x354>)
    f6a6:	681b      	ldr	r3, [r3, #0]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d100      	bne.n	f6ae <m2m_wifi_cb+0x1a6>
    f6ac:	e0f9      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    f6ae:	4b6b      	ldr	r3, [pc, #428]	; (f85c <m2m_wifi_cb+0x354>)
    f6b0:	681b      	ldr	r3, [r3, #0]
    f6b2:	2100      	movs	r1, #0
    f6b4:	2034      	movs	r0, #52	; 0x34
    f6b6:	4798      	blx	r3
}
    f6b8:	e0f3      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    f6ba:	1dfb      	adds	r3, r7, #7
    f6bc:	781b      	ldrb	r3, [r3, #0]
    f6be:	2b11      	cmp	r3, #17
    f6c0:	d11e      	bne.n	f700 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
    f6c2:	4b6c      	ldr	r3, [pc, #432]	; (f874 <m2m_wifi_cb+0x36c>)
    f6c4:	2200      	movs	r2, #0
    f6c6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    f6c8:	237c      	movs	r3, #124	; 0x7c
    f6ca:	18f9      	adds	r1, r7, r3
    f6cc:	6838      	ldr	r0, [r7, #0]
    f6ce:	2300      	movs	r3, #0
    f6d0:	2204      	movs	r2, #4
    f6d2:	4c61      	ldr	r4, [pc, #388]	; (f858 <m2m_wifi_cb+0x350>)
    f6d4:	47a0      	blx	r4
    f6d6:	1e03      	subs	r3, r0, #0
    f6d8:	d000      	beq.n	f6dc <m2m_wifi_cb+0x1d4>
    f6da:	e0e2      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
    f6dc:	237c      	movs	r3, #124	; 0x7c
    f6de:	18fb      	adds	r3, r7, r3
    f6e0:	781a      	ldrb	r2, [r3, #0]
    f6e2:	4b65      	ldr	r3, [pc, #404]	; (f878 <m2m_wifi_cb+0x370>)
    f6e4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    f6e6:	4b5d      	ldr	r3, [pc, #372]	; (f85c <m2m_wifi_cb+0x354>)
    f6e8:	681b      	ldr	r3, [r3, #0]
    f6ea:	2b00      	cmp	r3, #0
    f6ec:	d100      	bne.n	f6f0 <m2m_wifi_cb+0x1e8>
    f6ee:	e0d8      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    f6f0:	4b5a      	ldr	r3, [pc, #360]	; (f85c <m2m_wifi_cb+0x354>)
    f6f2:	681b      	ldr	r3, [r3, #0]
    f6f4:	227c      	movs	r2, #124	; 0x7c
    f6f6:	18ba      	adds	r2, r7, r2
    f6f8:	0011      	movs	r1, r2
    f6fa:	2011      	movs	r0, #17
    f6fc:	4798      	blx	r3
}
    f6fe:	e0d0      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    f700:	1dfb      	adds	r3, r7, #7
    f702:	781b      	ldrb	r3, [r3, #0]
    f704:	2b13      	cmp	r3, #19
    f706:	d116      	bne.n	f736 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    f708:	230c      	movs	r3, #12
    f70a:	18f9      	adds	r1, r7, r3
    f70c:	6838      	ldr	r0, [r7, #0]
    f70e:	2300      	movs	r3, #0
    f710:	222c      	movs	r2, #44	; 0x2c
    f712:	4c51      	ldr	r4, [pc, #324]	; (f858 <m2m_wifi_cb+0x350>)
    f714:	47a0      	blx	r4
    f716:	1e03      	subs	r3, r0, #0
    f718:	d000      	beq.n	f71c <m2m_wifi_cb+0x214>
    f71a:	e0c2      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    f71c:	4b4f      	ldr	r3, [pc, #316]	; (f85c <m2m_wifi_cb+0x354>)
    f71e:	681b      	ldr	r3, [r3, #0]
    f720:	2b00      	cmp	r3, #0
    f722:	d100      	bne.n	f726 <m2m_wifi_cb+0x21e>
    f724:	e0bd      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    f726:	4b4d      	ldr	r3, [pc, #308]	; (f85c <m2m_wifi_cb+0x354>)
    f728:	681b      	ldr	r3, [r3, #0]
    f72a:	220c      	movs	r2, #12
    f72c:	18ba      	adds	r2, r7, r2
    f72e:	0011      	movs	r1, r2
    f730:	2013      	movs	r0, #19
    f732:	4798      	blx	r3
}
    f734:	e0b5      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    f736:	1dfb      	adds	r3, r7, #7
    f738:	781b      	ldrb	r3, [r3, #0]
    f73a:	2b04      	cmp	r3, #4
    f73c:	d116      	bne.n	f76c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    f73e:	23a8      	movs	r3, #168	; 0xa8
    f740:	18f9      	adds	r1, r7, r3
    f742:	6838      	ldr	r0, [r7, #0]
    f744:	2300      	movs	r3, #0
    f746:	2204      	movs	r2, #4
    f748:	4c43      	ldr	r4, [pc, #268]	; (f858 <m2m_wifi_cb+0x350>)
    f74a:	47a0      	blx	r4
    f74c:	1e03      	subs	r3, r0, #0
    f74e:	d000      	beq.n	f752 <m2m_wifi_cb+0x24a>
    f750:	e0a7      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    f752:	4b42      	ldr	r3, [pc, #264]	; (f85c <m2m_wifi_cb+0x354>)
    f754:	681b      	ldr	r3, [r3, #0]
    f756:	2b00      	cmp	r3, #0
    f758:	d100      	bne.n	f75c <m2m_wifi_cb+0x254>
    f75a:	e0a2      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    f75c:	4b3f      	ldr	r3, [pc, #252]	; (f85c <m2m_wifi_cb+0x354>)
    f75e:	681b      	ldr	r3, [r3, #0]
    f760:	22a8      	movs	r2, #168	; 0xa8
    f762:	18ba      	adds	r2, r7, r2
    f764:	0011      	movs	r1, r2
    f766:	2004      	movs	r0, #4
    f768:	4798      	blx	r3
}
    f76a:	e09a      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    f76c:	1dfb      	adds	r3, r7, #7
    f76e:	781b      	ldrb	r3, [r3, #0]
    f770:	2b65      	cmp	r3, #101	; 0x65
    f772:	d116      	bne.n	f7a2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    f774:	23a8      	movs	r3, #168	; 0xa8
    f776:	18f9      	adds	r1, r7, r3
    f778:	6838      	ldr	r0, [r7, #0]
    f77a:	2300      	movs	r3, #0
    f77c:	2204      	movs	r2, #4
    f77e:	4c36      	ldr	r4, [pc, #216]	; (f858 <m2m_wifi_cb+0x350>)
    f780:	47a0      	blx	r4
    f782:	1e03      	subs	r3, r0, #0
    f784:	d000      	beq.n	f788 <m2m_wifi_cb+0x280>
    f786:	e08c      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    f788:	4b34      	ldr	r3, [pc, #208]	; (f85c <m2m_wifi_cb+0x354>)
    f78a:	681b      	ldr	r3, [r3, #0]
    f78c:	2b00      	cmp	r3, #0
    f78e:	d100      	bne.n	f792 <m2m_wifi_cb+0x28a>
    f790:	e087      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    f792:	4b32      	ldr	r3, [pc, #200]	; (f85c <m2m_wifi_cb+0x354>)
    f794:	681b      	ldr	r3, [r3, #0]
    f796:	22a8      	movs	r2, #168	; 0xa8
    f798:	18ba      	adds	r2, r7, r2
    f79a:	0011      	movs	r1, r2
    f79c:	2065      	movs	r0, #101	; 0x65
    f79e:	4798      	blx	r3
}
    f7a0:	e07f      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    f7a2:	1dfb      	adds	r3, r7, #7
    f7a4:	781b      	ldrb	r3, [r3, #0]
    f7a6:	2b09      	cmp	r3, #9
    f7a8:	d116      	bne.n	f7d8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    f7aa:	230c      	movs	r3, #12
    f7ac:	18f9      	adds	r1, r7, r3
    f7ae:	6838      	ldr	r0, [r7, #0]
    f7b0:	2301      	movs	r3, #1
    f7b2:	2264      	movs	r2, #100	; 0x64
    f7b4:	4c28      	ldr	r4, [pc, #160]	; (f858 <m2m_wifi_cb+0x350>)
    f7b6:	47a0      	blx	r4
    f7b8:	1e03      	subs	r3, r0, #0
    f7ba:	d000      	beq.n	f7be <m2m_wifi_cb+0x2b6>
    f7bc:	e071      	b.n	f8a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    f7be:	4b27      	ldr	r3, [pc, #156]	; (f85c <m2m_wifi_cb+0x354>)
    f7c0:	681b      	ldr	r3, [r3, #0]
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	d100      	bne.n	f7c8 <m2m_wifi_cb+0x2c0>
    f7c6:	e06c      	b.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    f7c8:	4b24      	ldr	r3, [pc, #144]	; (f85c <m2m_wifi_cb+0x354>)
    f7ca:	681b      	ldr	r3, [r3, #0]
    f7cc:	220c      	movs	r2, #12
    f7ce:	18ba      	adds	r2, r7, r2
    f7d0:	0011      	movs	r1, r2
    f7d2:	2009      	movs	r0, #9
    f7d4:	4798      	blx	r3
}
    f7d6:	e064      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    f7d8:	1dfb      	adds	r3, r7, #7
    f7da:	781b      	ldrb	r3, [r3, #0]
    f7dc:	2b2a      	cmp	r3, #42	; 0x2a
    f7de:	d114      	bne.n	f80a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    f7e0:	2378      	movs	r3, #120	; 0x78
    f7e2:	18f9      	adds	r1, r7, r3
    f7e4:	6838      	ldr	r0, [r7, #0]
    f7e6:	2301      	movs	r3, #1
    f7e8:	2204      	movs	r2, #4
    f7ea:	4c1b      	ldr	r4, [pc, #108]	; (f858 <m2m_wifi_cb+0x350>)
    f7ec:	47a0      	blx	r4
    f7ee:	1e03      	subs	r3, r0, #0
    f7f0:	d157      	bne.n	f8a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    f7f2:	4b1a      	ldr	r3, [pc, #104]	; (f85c <m2m_wifi_cb+0x354>)
    f7f4:	681b      	ldr	r3, [r3, #0]
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	d053      	beq.n	f8a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    f7fa:	4b18      	ldr	r3, [pc, #96]	; (f85c <m2m_wifi_cb+0x354>)
    f7fc:	681b      	ldr	r3, [r3, #0]
    f7fe:	2278      	movs	r2, #120	; 0x78
    f800:	18ba      	adds	r2, r7, r2
    f802:	0011      	movs	r1, r2
    f804:	202a      	movs	r0, #42	; 0x2a
    f806:	4798      	blx	r3
}
    f808:	e04b      	b.n	f8a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    f80a:	1dfb      	adds	r3, r7, #7
    f80c:	781b      	ldrb	r3, [r3, #0]
    f80e:	2b20      	cmp	r3, #32
    f810:	d134      	bne.n	f87c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    f812:	2370      	movs	r3, #112	; 0x70
    f814:	18f9      	adds	r1, r7, r3
    f816:	6838      	ldr	r0, [r7, #0]
    f818:	2300      	movs	r3, #0
    f81a:	2208      	movs	r2, #8
    f81c:	4c0e      	ldr	r4, [pc, #56]	; (f858 <m2m_wifi_cb+0x350>)
    f81e:	47a0      	blx	r4
    f820:	1e03      	subs	r3, r0, #0
    f822:	d13e      	bne.n	f8a2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    f824:	683b      	ldr	r3, [r7, #0]
    f826:	3308      	adds	r3, #8
    f828:	0018      	movs	r0, r3
    f82a:	2370      	movs	r3, #112	; 0x70
    f82c:	18fb      	adds	r3, r7, r3
    f82e:	6819      	ldr	r1, [r3, #0]
    f830:	2370      	movs	r3, #112	; 0x70
    f832:	18fb      	adds	r3, r7, r3
    f834:	889a      	ldrh	r2, [r3, #4]
    f836:	2301      	movs	r3, #1
    f838:	4c07      	ldr	r4, [pc, #28]	; (f858 <m2m_wifi_cb+0x350>)
    f83a:	47a0      	blx	r4
    f83c:	1e03      	subs	r3, r0, #0
    f83e:	d130      	bne.n	f8a2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
    f840:	4b06      	ldr	r3, [pc, #24]	; (f85c <m2m_wifi_cb+0x354>)
    f842:	681b      	ldr	r3, [r3, #0]
    f844:	2b00      	cmp	r3, #0
    f846:	d02c      	beq.n	f8a2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    f848:	4b04      	ldr	r3, [pc, #16]	; (f85c <m2m_wifi_cb+0x354>)
    f84a:	681b      	ldr	r3, [r3, #0]
    f84c:	2270      	movs	r2, #112	; 0x70
    f84e:	18ba      	adds	r2, r7, r2
    f850:	0011      	movs	r1, r2
    f852:	2020      	movs	r0, #32
    f854:	4798      	blx	r3
}
    f856:	e024      	b.n	f8a2 <m2m_wifi_cb+0x39a>
    f858:	0000f2cd 	.word	0x0000f2cd
    f85c:	20004338 	.word	0x20004338
    f860:	0000e751 	.word	0x0000e751
    f864:	00027484 	.word	0x00027484
    f868:	0000b9b9 	.word	0x0000b9b9
    f86c:	00027490 	.word	0x00027490
    f870:	000274b0 	.word	0x000274b0
    f874:	20004335 	.word	0x20004335
    f878:	20004334 	.word	0x20004334
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    f87c:	2324      	movs	r3, #36	; 0x24
    f87e:	33ff      	adds	r3, #255	; 0xff
    f880:	001a      	movs	r2, r3
    f882:	490a      	ldr	r1, [pc, #40]	; (f8ac <m2m_wifi_cb+0x3a4>)
    f884:	4b0a      	ldr	r3, [pc, #40]	; (f8b0 <m2m_wifi_cb+0x3a8>)
    f886:	0018      	movs	r0, r3
    f888:	4b0a      	ldr	r3, [pc, #40]	; (f8b4 <m2m_wifi_cb+0x3ac>)
    f88a:	4798      	blx	r3
    f88c:	1dfb      	adds	r3, r7, #7
    f88e:	781a      	ldrb	r2, [r3, #0]
    f890:	4b09      	ldr	r3, [pc, #36]	; (f8b8 <m2m_wifi_cb+0x3b0>)
    f892:	0011      	movs	r1, r2
    f894:	0018      	movs	r0, r3
    f896:	4b07      	ldr	r3, [pc, #28]	; (f8b4 <m2m_wifi_cb+0x3ac>)
    f898:	4798      	blx	r3
    f89a:	4b08      	ldr	r3, [pc, #32]	; (f8bc <m2m_wifi_cb+0x3b4>)
    f89c:	0018      	movs	r0, r3
    f89e:	4b05      	ldr	r3, [pc, #20]	; (f8b4 <m2m_wifi_cb+0x3ac>)
    f8a0:	4798      	blx	r3
}
    f8a2:	46c0      	nop			; (mov r8, r8)
    f8a4:	46bd      	mov	sp, r7
    f8a6:	b02d      	add	sp, #180	; 0xb4
    f8a8:	bd90      	pop	{r4, r7, pc}
    f8aa:	46c0      	nop			; (mov r8, r8)
    f8ac:	00027850 	.word	0x00027850
    f8b0:	000274b4 	.word	0x000274b4
    f8b4:	0000b9b9 	.word	0x0000b9b9
    f8b8:	000274c8 	.word	0x000274c8
    f8bc:	000274b0 	.word	0x000274b0

0000f8c0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    f8c0:	b590      	push	{r4, r7, lr}
    f8c2:	b091      	sub	sp, #68	; 0x44
    f8c4:	af02      	add	r7, sp, #8
    f8c6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    f8c8:	2337      	movs	r3, #55	; 0x37
    f8ca:	18fb      	adds	r3, r7, r3
    f8cc:	2200      	movs	r2, #0
    f8ce:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    f8d0:	230b      	movs	r3, #11
    f8d2:	18fb      	adds	r3, r7, r3
    f8d4:	2201      	movs	r2, #1
    f8d6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    f8d8:	687b      	ldr	r3, [r7, #4]
    f8da:	2b00      	cmp	r3, #0
    f8dc:	d104      	bne.n	f8e8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    f8de:	2337      	movs	r3, #55	; 0x37
    f8e0:	18fb      	adds	r3, r7, r3
    f8e2:	22f4      	movs	r2, #244	; 0xf4
    f8e4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    f8e6:	e0b3      	b.n	fa50 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    f8e8:	687b      	ldr	r3, [r7, #4]
    f8ea:	681a      	ldr	r2, [r3, #0]
    f8ec:	4b5c      	ldr	r3, [pc, #368]	; (fa60 <m2m_wifi_init+0x1a0>)
    f8ee:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    f8f0:	4b5c      	ldr	r3, [pc, #368]	; (fa64 <m2m_wifi_init+0x1a4>)
    f8f2:	2200      	movs	r2, #0
    f8f4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    f8f6:	2337      	movs	r3, #55	; 0x37
    f8f8:	18fc      	adds	r4, r7, r3
    f8fa:	230b      	movs	r3, #11
    f8fc:	18fb      	adds	r3, r7, r3
    f8fe:	0018      	movs	r0, r3
    f900:	4b59      	ldr	r3, [pc, #356]	; (fa68 <m2m_wifi_init+0x1a8>)
    f902:	4798      	blx	r3
    f904:	0003      	movs	r3, r0
    f906:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    f908:	2337      	movs	r3, #55	; 0x37
    f90a:	18fb      	adds	r3, r7, r3
    f90c:	781b      	ldrb	r3, [r3, #0]
    f90e:	b25b      	sxtb	r3, r3
    f910:	2b00      	cmp	r3, #0
    f912:	d000      	beq.n	f916 <m2m_wifi_init+0x56>
    f914:	e099      	b.n	fa4a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    f916:	2337      	movs	r3, #55	; 0x37
    f918:	18fc      	adds	r4, r7, r3
    f91a:	2000      	movs	r0, #0
    f91c:	4b53      	ldr	r3, [pc, #332]	; (fa6c <m2m_wifi_init+0x1ac>)
    f91e:	4798      	blx	r3
    f920:	0003      	movs	r3, r0
    f922:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    f924:	2337      	movs	r3, #55	; 0x37
    f926:	18fb      	adds	r3, r7, r3
    f928:	781b      	ldrb	r3, [r3, #0]
    f92a:	b25b      	sxtb	r3, r3
    f92c:	2b00      	cmp	r3, #0
    f92e:	d000      	beq.n	f932 <m2m_wifi_init+0x72>
    f930:	e086      	b.n	fa40 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    f932:	4b4f      	ldr	r3, [pc, #316]	; (fa70 <m2m_wifi_init+0x1b0>)
    f934:	0019      	movs	r1, r3
    f936:	2001      	movs	r0, #1
    f938:	4b4e      	ldr	r3, [pc, #312]	; (fa74 <m2m_wifi_init+0x1b4>)
    f93a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    f93c:	2337      	movs	r3, #55	; 0x37
    f93e:	18fc      	adds	r4, r7, r3
    f940:	230c      	movs	r3, #12
    f942:	18fb      	adds	r3, r7, r3
    f944:	0018      	movs	r0, r3
    f946:	4b4c      	ldr	r3, [pc, #304]	; (fa78 <m2m_wifi_init+0x1b8>)
    f948:	4798      	blx	r3
    f94a:	0003      	movs	r3, r0
    f94c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    f94e:	4b4b      	ldr	r3, [pc, #300]	; (fa7c <m2m_wifi_init+0x1bc>)
    f950:	0018      	movs	r0, r3
    f952:	4b4b      	ldr	r3, [pc, #300]	; (fa80 <m2m_wifi_init+0x1c0>)
    f954:	4798      	blx	r3
    f956:	230c      	movs	r3, #12
    f958:	18fb      	adds	r3, r7, r3
    f95a:	791b      	ldrb	r3, [r3, #4]
    f95c:	0019      	movs	r1, r3
    f95e:	230c      	movs	r3, #12
    f960:	18fb      	adds	r3, r7, r3
    f962:	795b      	ldrb	r3, [r3, #5]
    f964:	001a      	movs	r2, r3
    f966:	230c      	movs	r3, #12
    f968:	18fb      	adds	r3, r7, r3
    f96a:	799b      	ldrb	r3, [r3, #6]
    f96c:	001c      	movs	r4, r3
    f96e:	230c      	movs	r3, #12
    f970:	18fb      	adds	r3, r7, r3
    f972:	8c1b      	ldrh	r3, [r3, #32]
    f974:	4843      	ldr	r0, [pc, #268]	; (fa84 <m2m_wifi_init+0x1c4>)
    f976:	9300      	str	r3, [sp, #0]
    f978:	0023      	movs	r3, r4
    f97a:	4c41      	ldr	r4, [pc, #260]	; (fa80 <m2m_wifi_init+0x1c0>)
    f97c:	47a0      	blx	r4
    f97e:	4b42      	ldr	r3, [pc, #264]	; (fa88 <m2m_wifi_init+0x1c8>)
    f980:	0018      	movs	r0, r3
    f982:	4b3f      	ldr	r3, [pc, #252]	; (fa80 <m2m_wifi_init+0x1c0>)
    f984:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    f986:	4b3d      	ldr	r3, [pc, #244]	; (fa7c <m2m_wifi_init+0x1bc>)
    f988:	0018      	movs	r0, r3
    f98a:	4b3d      	ldr	r3, [pc, #244]	; (fa80 <m2m_wifi_init+0x1c0>)
    f98c:	4798      	blx	r3
    f98e:	230c      	movs	r3, #12
    f990:	18fb      	adds	r3, r7, r3
    f992:	3316      	adds	r3, #22
    f994:	001a      	movs	r2, r3
    f996:	230c      	movs	r3, #12
    f998:	18fb      	adds	r3, r7, r3
    f99a:	330a      	adds	r3, #10
    f99c:	0019      	movs	r1, r3
    f99e:	4b3b      	ldr	r3, [pc, #236]	; (fa8c <m2m_wifi_init+0x1cc>)
    f9a0:	0018      	movs	r0, r3
    f9a2:	4b37      	ldr	r3, [pc, #220]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9a4:	4798      	blx	r3
    f9a6:	4b38      	ldr	r3, [pc, #224]	; (fa88 <m2m_wifi_init+0x1c8>)
    f9a8:	0018      	movs	r0, r3
    f9aa:	4b35      	ldr	r3, [pc, #212]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9ac:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    f9ae:	4b33      	ldr	r3, [pc, #204]	; (fa7c <m2m_wifi_init+0x1bc>)
    f9b0:	0018      	movs	r0, r3
    f9b2:	4b33      	ldr	r3, [pc, #204]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9b4:	4798      	blx	r3
    f9b6:	230c      	movs	r3, #12
    f9b8:	18fb      	adds	r3, r7, r3
    f9ba:	79db      	ldrb	r3, [r3, #7]
    f9bc:	0019      	movs	r1, r3
    f9be:	230c      	movs	r3, #12
    f9c0:	18fb      	adds	r3, r7, r3
    f9c2:	7a1b      	ldrb	r3, [r3, #8]
    f9c4:	001a      	movs	r2, r3
    f9c6:	230c      	movs	r3, #12
    f9c8:	18fb      	adds	r3, r7, r3
    f9ca:	7a5b      	ldrb	r3, [r3, #9]
    f9cc:	4830      	ldr	r0, [pc, #192]	; (fa90 <m2m_wifi_init+0x1d0>)
    f9ce:	4c2c      	ldr	r4, [pc, #176]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9d0:	47a0      	blx	r4
    f9d2:	4b2d      	ldr	r3, [pc, #180]	; (fa88 <m2m_wifi_init+0x1c8>)
    f9d4:	0018      	movs	r0, r3
    f9d6:	4b2a      	ldr	r3, [pc, #168]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9d8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    f9da:	4b28      	ldr	r3, [pc, #160]	; (fa7c <m2m_wifi_init+0x1bc>)
    f9dc:	0018      	movs	r0, r3
    f9de:	4b28      	ldr	r3, [pc, #160]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9e0:	4798      	blx	r3
    f9e2:	482c      	ldr	r0, [pc, #176]	; (fa94 <m2m_wifi_init+0x1d4>)
    f9e4:	2304      	movs	r3, #4
    f9e6:	2205      	movs	r2, #5
    f9e8:	2113      	movs	r1, #19
    f9ea:	4c25      	ldr	r4, [pc, #148]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9ec:	47a0      	blx	r4
    f9ee:	4b26      	ldr	r3, [pc, #152]	; (fa88 <m2m_wifi_init+0x1c8>)
    f9f0:	0018      	movs	r0, r3
    f9f2:	4b23      	ldr	r3, [pc, #140]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9f4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    f9f6:	4b21      	ldr	r3, [pc, #132]	; (fa7c <m2m_wifi_init+0x1bc>)
    f9f8:	0018      	movs	r0, r3
    f9fa:	4b21      	ldr	r3, [pc, #132]	; (fa80 <m2m_wifi_init+0x1c0>)
    f9fc:	4798      	blx	r3
    f9fe:	4a26      	ldr	r2, [pc, #152]	; (fa98 <m2m_wifi_init+0x1d8>)
    fa00:	4926      	ldr	r1, [pc, #152]	; (fa9c <m2m_wifi_init+0x1dc>)
    fa02:	4b27      	ldr	r3, [pc, #156]	; (faa0 <m2m_wifi_init+0x1e0>)
    fa04:	0018      	movs	r0, r3
    fa06:	4b1e      	ldr	r3, [pc, #120]	; (fa80 <m2m_wifi_init+0x1c0>)
    fa08:	4798      	blx	r3
    fa0a:	4b1f      	ldr	r3, [pc, #124]	; (fa88 <m2m_wifi_init+0x1c8>)
    fa0c:	0018      	movs	r0, r3
    fa0e:	4b1c      	ldr	r3, [pc, #112]	; (fa80 <m2m_wifi_init+0x1c0>)
    fa10:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    fa12:	2337      	movs	r3, #55	; 0x37
    fa14:	18fb      	adds	r3, r7, r3
    fa16:	781b      	ldrb	r3, [r3, #0]
    fa18:	b25b      	sxtb	r3, r3
    fa1a:	330d      	adds	r3, #13
    fa1c:	d117      	bne.n	fa4e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    fa1e:	23e8      	movs	r3, #232	; 0xe8
    fa20:	33ff      	adds	r3, #255	; 0xff
    fa22:	001a      	movs	r2, r3
    fa24:	491f      	ldr	r1, [pc, #124]	; (faa4 <m2m_wifi_init+0x1e4>)
    fa26:	4b20      	ldr	r3, [pc, #128]	; (faa8 <m2m_wifi_init+0x1e8>)
    fa28:	0018      	movs	r0, r3
    fa2a:	4b15      	ldr	r3, [pc, #84]	; (fa80 <m2m_wifi_init+0x1c0>)
    fa2c:	4798      	blx	r3
    fa2e:	4b1f      	ldr	r3, [pc, #124]	; (faac <m2m_wifi_init+0x1ec>)
    fa30:	0018      	movs	r0, r3
    fa32:	4b13      	ldr	r3, [pc, #76]	; (fa80 <m2m_wifi_init+0x1c0>)
    fa34:	4798      	blx	r3
    fa36:	4b14      	ldr	r3, [pc, #80]	; (fa88 <m2m_wifi_init+0x1c8>)
    fa38:	0018      	movs	r0, r3
    fa3a:	4b11      	ldr	r3, [pc, #68]	; (fa80 <m2m_wifi_init+0x1c0>)
    fa3c:	4798      	blx	r3
	}

	goto _EXIT0;
    fa3e:	e006      	b.n	fa4e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    fa40:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    fa42:	2000      	movs	r0, #0
    fa44:	4b1a      	ldr	r3, [pc, #104]	; (fab0 <m2m_wifi_init+0x1f0>)
    fa46:	4798      	blx	r3
    fa48:	e002      	b.n	fa50 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    fa4a:	46c0      	nop			; (mov r8, r8)
    fa4c:	e000      	b.n	fa50 <m2m_wifi_init+0x190>
	goto _EXIT0;
    fa4e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    fa50:	2337      	movs	r3, #55	; 0x37
    fa52:	18fb      	adds	r3, r7, r3
    fa54:	781b      	ldrb	r3, [r3, #0]
    fa56:	b25b      	sxtb	r3, r3
}
    fa58:	0018      	movs	r0, r3
    fa5a:	46bd      	mov	sp, r7
    fa5c:	b00f      	add	sp, #60	; 0x3c
    fa5e:	bd90      	pop	{r4, r7, pc}
    fa60:	20004338 	.word	0x20004338
    fa64:	20004335 	.word	0x20004335
    fa68:	00010be5 	.word	0x00010be5
    fa6c:	0000e969 	.word	0x0000e969
    fa70:	0000f509 	.word	0x0000f509
    fa74:	0000f44d 	.word	0x0000f44d
    fa78:	00010a19 	.word	0x00010a19
    fa7c:	00027484 	.word	0x00027484
    fa80:	0000b9b9 	.word	0x0000b9b9
    fa84:	00027628 	.word	0x00027628
    fa88:	000274b0 	.word	0x000274b0
    fa8c:	00027650 	.word	0x00027650
    fa90:	0002766c 	.word	0x0002766c
    fa94:	00027690 	.word	0x00027690
    fa98:	000276a8 	.word	0x000276a8
    fa9c:	000276b4 	.word	0x000276b4
    faa0:	000276c0 	.word	0x000276c0
    faa4:	0002785c 	.word	0x0002785c
    faa8:	000274b4 	.word	0x000274b4
    faac:	000276d8 	.word	0x000276d8
    fab0:	00010d75 	.word	0x00010d75

0000fab4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    fab4:	b580      	push	{r7, lr}
    fab6:	b082      	sub	sp, #8
    fab8:	af00      	add	r7, sp, #0
    faba:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    fabc:	4b03      	ldr	r3, [pc, #12]	; (facc <m2m_wifi_handle_events+0x18>)
    fabe:	4798      	blx	r3
    fac0:	0003      	movs	r3, r0
}
    fac2:	0018      	movs	r0, r3
    fac4:	46bd      	mov	sp, r7
    fac6:	b002      	add	sp, #8
    fac8:	bd80      	pop	{r7, pc}
    faca:	46c0      	nop			; (mov r8, r8)
    facc:	0000f22d 	.word	0x0000f22d

0000fad0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    fad0:	b590      	push	{r4, r7, lr}
    fad2:	b087      	sub	sp, #28
    fad4:	af02      	add	r7, sp, #8
    fad6:	60f8      	str	r0, [r7, #12]
    fad8:	0008      	movs	r0, r1
    fada:	0011      	movs	r1, r2
    fadc:	607b      	str	r3, [r7, #4]
    fade:	230b      	movs	r3, #11
    fae0:	18fb      	adds	r3, r7, r3
    fae2:	1c02      	adds	r2, r0, #0
    fae4:	701a      	strb	r2, [r3, #0]
    fae6:	230a      	movs	r3, #10
    fae8:	18fb      	adds	r3, r7, r3
    faea:	1c0a      	adds	r2, r1, #0
    faec:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    faee:	687c      	ldr	r4, [r7, #4]
    faf0:	230a      	movs	r3, #10
    faf2:	18fb      	adds	r3, r7, r3
    faf4:	781a      	ldrb	r2, [r3, #0]
    faf6:	230b      	movs	r3, #11
    faf8:	18fb      	adds	r3, r7, r3
    fafa:	7819      	ldrb	r1, [r3, #0]
    fafc:	68f8      	ldr	r0, [r7, #12]
    fafe:	2300      	movs	r3, #0
    fb00:	9301      	str	r3, [sp, #4]
    fb02:	2320      	movs	r3, #32
    fb04:	18fb      	adds	r3, r7, r3
    fb06:	881b      	ldrh	r3, [r3, #0]
    fb08:	9300      	str	r3, [sp, #0]
    fb0a:	0023      	movs	r3, r4
    fb0c:	4c03      	ldr	r4, [pc, #12]	; (fb1c <m2m_wifi_connect+0x4c>)
    fb0e:	47a0      	blx	r4
    fb10:	0003      	movs	r3, r0
}
    fb12:	0018      	movs	r0, r3
    fb14:	46bd      	mov	sp, r7
    fb16:	b005      	add	sp, #20
    fb18:	bd90      	pop	{r4, r7, pc}
    fb1a:	46c0      	nop			; (mov r8, r8)
    fb1c:	0000fb21 	.word	0x0000fb21

0000fb20 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    fb20:	b5b0      	push	{r4, r5, r7, lr}
    fb22:	b0aa      	sub	sp, #168	; 0xa8
    fb24:	af04      	add	r7, sp, #16
    fb26:	60f8      	str	r0, [r7, #12]
    fb28:	0008      	movs	r0, r1
    fb2a:	0011      	movs	r1, r2
    fb2c:	607b      	str	r3, [r7, #4]
    fb2e:	230b      	movs	r3, #11
    fb30:	18fb      	adds	r3, r7, r3
    fb32:	1c02      	adds	r2, r0, #0
    fb34:	701a      	strb	r2, [r3, #0]
    fb36:	230a      	movs	r3, #10
    fb38:	18fb      	adds	r3, r7, r3
    fb3a:	1c0a      	adds	r2, r1, #0
    fb3c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    fb3e:	2397      	movs	r3, #151	; 0x97
    fb40:	18fb      	adds	r3, r7, r3
    fb42:	2200      	movs	r2, #0
    fb44:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    fb46:	230a      	movs	r3, #10
    fb48:	18fb      	adds	r3, r7, r3
    fb4a:	781b      	ldrb	r3, [r3, #0]
    fb4c:	2b01      	cmp	r3, #1
    fb4e:	d100      	bne.n	fb52 <m2m_wifi_connect_sc+0x32>
    fb50:	e085      	b.n	fc5e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
    fb52:	687b      	ldr	r3, [r7, #4]
    fb54:	2b00      	cmp	r3, #0
    fb56:	d112      	bne.n	fb7e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
    fb58:	4ad8      	ldr	r2, [pc, #864]	; (febc <m2m_wifi_connect_sc+0x39c>)
    fb5a:	49d9      	ldr	r1, [pc, #868]	; (fec0 <m2m_wifi_connect_sc+0x3a0>)
    fb5c:	4bd9      	ldr	r3, [pc, #868]	; (fec4 <m2m_wifi_connect_sc+0x3a4>)
    fb5e:	0018      	movs	r0, r3
    fb60:	4bd9      	ldr	r3, [pc, #868]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fb62:	4798      	blx	r3
    fb64:	4bd9      	ldr	r3, [pc, #868]	; (fecc <m2m_wifi_connect_sc+0x3ac>)
    fb66:	0018      	movs	r0, r3
    fb68:	4bd7      	ldr	r3, [pc, #860]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fb6a:	4798      	blx	r3
    fb6c:	4bd8      	ldr	r3, [pc, #864]	; (fed0 <m2m_wifi_connect_sc+0x3b0>)
    fb6e:	0018      	movs	r0, r3
    fb70:	4bd5      	ldr	r3, [pc, #852]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fb72:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    fb74:	2397      	movs	r3, #151	; 0x97
    fb76:	18fb      	adds	r3, r7, r3
    fb78:	22f4      	movs	r2, #244	; 0xf4
    fb7a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    fb7c:	e1f9      	b.n	ff72 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    fb7e:	230a      	movs	r3, #10
    fb80:	18fb      	adds	r3, r7, r3
    fb82:	781b      	ldrb	r3, [r3, #0]
    fb84:	2b02      	cmp	r3, #2
    fb86:	d16a      	bne.n	fc5e <m2m_wifi_connect_sc+0x13e>
    fb88:	687b      	ldr	r3, [r7, #4]
    fb8a:	0018      	movs	r0, r3
    fb8c:	4bd1      	ldr	r3, [pc, #836]	; (fed4 <m2m_wifi_connect_sc+0x3b4>)
    fb8e:	4798      	blx	r3
    fb90:	0003      	movs	r3, r0
    fb92:	2b40      	cmp	r3, #64	; 0x40
    fb94:	d163      	bne.n	fc5e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
    fb96:	2396      	movs	r3, #150	; 0x96
    fb98:	18fb      	adds	r3, r7, r3
    fb9a:	2200      	movs	r2, #0
    fb9c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    fb9e:	687b      	ldr	r3, [r7, #4]
    fba0:	2290      	movs	r2, #144	; 0x90
    fba2:	18ba      	adds	r2, r7, r2
    fba4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    fba6:	e055      	b.n	fc54 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    fba8:	2396      	movs	r3, #150	; 0x96
    fbaa:	18fb      	adds	r3, r7, r3
    fbac:	781b      	ldrb	r3, [r3, #0]
    fbae:	2290      	movs	r2, #144	; 0x90
    fbb0:	18ba      	adds	r2, r7, r2
    fbb2:	6812      	ldr	r2, [r2, #0]
    fbb4:	18d3      	adds	r3, r2, r3
    fbb6:	781b      	ldrb	r3, [r3, #0]
    fbb8:	2b2f      	cmp	r3, #47	; 0x2f
    fbba:	d931      	bls.n	fc20 <m2m_wifi_connect_sc+0x100>
    fbbc:	2396      	movs	r3, #150	; 0x96
    fbbe:	18fb      	adds	r3, r7, r3
    fbc0:	781b      	ldrb	r3, [r3, #0]
    fbc2:	2290      	movs	r2, #144	; 0x90
    fbc4:	18ba      	adds	r2, r7, r2
    fbc6:	6812      	ldr	r2, [r2, #0]
    fbc8:	18d3      	adds	r3, r2, r3
    fbca:	781b      	ldrb	r3, [r3, #0]
    fbcc:	2b39      	cmp	r3, #57	; 0x39
    fbce:	d909      	bls.n	fbe4 <m2m_wifi_connect_sc+0xc4>
    fbd0:	2396      	movs	r3, #150	; 0x96
    fbd2:	18fb      	adds	r3, r7, r3
    fbd4:	781b      	ldrb	r3, [r3, #0]
    fbd6:	2290      	movs	r2, #144	; 0x90
    fbd8:	18ba      	adds	r2, r7, r2
    fbda:	6812      	ldr	r2, [r2, #0]
    fbdc:	18d3      	adds	r3, r2, r3
    fbde:	781b      	ldrb	r3, [r3, #0]
    fbe0:	2b40      	cmp	r3, #64	; 0x40
    fbe2:	d91d      	bls.n	fc20 <m2m_wifi_connect_sc+0x100>
    fbe4:	2396      	movs	r3, #150	; 0x96
    fbe6:	18fb      	adds	r3, r7, r3
    fbe8:	781b      	ldrb	r3, [r3, #0]
    fbea:	2290      	movs	r2, #144	; 0x90
    fbec:	18ba      	adds	r2, r7, r2
    fbee:	6812      	ldr	r2, [r2, #0]
    fbf0:	18d3      	adds	r3, r2, r3
    fbf2:	781b      	ldrb	r3, [r3, #0]
    fbf4:	2b46      	cmp	r3, #70	; 0x46
    fbf6:	d909      	bls.n	fc0c <m2m_wifi_connect_sc+0xec>
    fbf8:	2396      	movs	r3, #150	; 0x96
    fbfa:	18fb      	adds	r3, r7, r3
    fbfc:	781b      	ldrb	r3, [r3, #0]
    fbfe:	2290      	movs	r2, #144	; 0x90
    fc00:	18ba      	adds	r2, r7, r2
    fc02:	6812      	ldr	r2, [r2, #0]
    fc04:	18d3      	adds	r3, r2, r3
    fc06:	781b      	ldrb	r3, [r3, #0]
    fc08:	2b60      	cmp	r3, #96	; 0x60
    fc0a:	d909      	bls.n	fc20 <m2m_wifi_connect_sc+0x100>
    fc0c:	2396      	movs	r3, #150	; 0x96
    fc0e:	18fb      	adds	r3, r7, r3
    fc10:	781b      	ldrb	r3, [r3, #0]
    fc12:	2290      	movs	r2, #144	; 0x90
    fc14:	18ba      	adds	r2, r7, r2
    fc16:	6812      	ldr	r2, [r2, #0]
    fc18:	18d3      	adds	r3, r2, r3
    fc1a:	781b      	ldrb	r3, [r3, #0]
    fc1c:	2b66      	cmp	r3, #102	; 0x66
    fc1e:	d912      	bls.n	fc46 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
    fc20:	4aad      	ldr	r2, [pc, #692]	; (fed8 <m2m_wifi_connect_sc+0x3b8>)
    fc22:	49a7      	ldr	r1, [pc, #668]	; (fec0 <m2m_wifi_connect_sc+0x3a0>)
    fc24:	4ba7      	ldr	r3, [pc, #668]	; (fec4 <m2m_wifi_connect_sc+0x3a4>)
    fc26:	0018      	movs	r0, r3
    fc28:	4ba7      	ldr	r3, [pc, #668]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fc2a:	4798      	blx	r3
    fc2c:	4bab      	ldr	r3, [pc, #684]	; (fedc <m2m_wifi_connect_sc+0x3bc>)
    fc2e:	0018      	movs	r0, r3
    fc30:	4ba5      	ldr	r3, [pc, #660]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fc32:	4798      	blx	r3
    fc34:	4ba6      	ldr	r3, [pc, #664]	; (fed0 <m2m_wifi_connect_sc+0x3b0>)
    fc36:	0018      	movs	r0, r3
    fc38:	4ba3      	ldr	r3, [pc, #652]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fc3a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    fc3c:	2397      	movs	r3, #151	; 0x97
    fc3e:	18fb      	adds	r3, r7, r3
    fc40:	22f4      	movs	r2, #244	; 0xf4
    fc42:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    fc44:	e195      	b.n	ff72 <m2m_wifi_connect_sc+0x452>
				}
				i++;
    fc46:	2396      	movs	r3, #150	; 0x96
    fc48:	18fb      	adds	r3, r7, r3
    fc4a:	781a      	ldrb	r2, [r3, #0]
    fc4c:	2396      	movs	r3, #150	; 0x96
    fc4e:	18fb      	adds	r3, r7, r3
    fc50:	3201      	adds	r2, #1
    fc52:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    fc54:	2396      	movs	r3, #150	; 0x96
    fc56:	18fb      	adds	r3, r7, r3
    fc58:	781b      	ldrb	r3, [r3, #0]
    fc5a:	2b3f      	cmp	r3, #63	; 0x3f
    fc5c:	d9a4      	bls.n	fba8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    fc5e:	230b      	movs	r3, #11
    fc60:	18fb      	adds	r3, r7, r3
    fc62:	781b      	ldrb	r3, [r3, #0]
    fc64:	2b00      	cmp	r3, #0
    fc66:	d004      	beq.n	fc72 <m2m_wifi_connect_sc+0x152>
    fc68:	230b      	movs	r3, #11
    fc6a:	18fb      	adds	r3, r7, r3
    fc6c:	781b      	ldrb	r3, [r3, #0]
    fc6e:	2b20      	cmp	r3, #32
    fc70:	d913      	bls.n	fc9a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
    fc72:	238c      	movs	r3, #140	; 0x8c
    fc74:	009a      	lsls	r2, r3, #2
    fc76:	4992      	ldr	r1, [pc, #584]	; (fec0 <m2m_wifi_connect_sc+0x3a0>)
    fc78:	4b92      	ldr	r3, [pc, #584]	; (fec4 <m2m_wifi_connect_sc+0x3a4>)
    fc7a:	0018      	movs	r0, r3
    fc7c:	4b92      	ldr	r3, [pc, #584]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fc7e:	4798      	blx	r3
    fc80:	4b97      	ldr	r3, [pc, #604]	; (fee0 <m2m_wifi_connect_sc+0x3c0>)
    fc82:	0018      	movs	r0, r3
    fc84:	4b90      	ldr	r3, [pc, #576]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fc86:	4798      	blx	r3
    fc88:	4b91      	ldr	r3, [pc, #580]	; (fed0 <m2m_wifi_connect_sc+0x3b0>)
    fc8a:	0018      	movs	r0, r3
    fc8c:	4b8e      	ldr	r3, [pc, #568]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fc8e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    fc90:	2397      	movs	r3, #151	; 0x97
    fc92:	18fb      	adds	r3, r7, r3
    fc94:	22f4      	movs	r2, #244	; 0xf4
    fc96:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    fc98:	e16b      	b.n	ff72 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    fc9a:	23a8      	movs	r3, #168	; 0xa8
    fc9c:	18fb      	adds	r3, r7, r3
    fc9e:	881b      	ldrh	r3, [r3, #0]
    fca0:	2b00      	cmp	r3, #0
    fca2:	d004      	beq.n	fcae <m2m_wifi_connect_sc+0x18e>
    fca4:	23a8      	movs	r3, #168	; 0xa8
    fca6:	18fb      	adds	r3, r7, r3
    fca8:	881b      	ldrh	r3, [r3, #0]
    fcaa:	2b0e      	cmp	r3, #14
    fcac:	d917      	bls.n	fcde <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    fcae:	23a8      	movs	r3, #168	; 0xa8
    fcb0:	18fb      	adds	r3, r7, r3
    fcb2:	881b      	ldrh	r3, [r3, #0]
    fcb4:	2bff      	cmp	r3, #255	; 0xff
    fcb6:	d012      	beq.n	fcde <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
    fcb8:	4a8a      	ldr	r2, [pc, #552]	; (fee4 <m2m_wifi_connect_sc+0x3c4>)
    fcba:	4981      	ldr	r1, [pc, #516]	; (fec0 <m2m_wifi_connect_sc+0x3a0>)
    fcbc:	4b81      	ldr	r3, [pc, #516]	; (fec4 <m2m_wifi_connect_sc+0x3a4>)
    fcbe:	0018      	movs	r0, r3
    fcc0:	4b81      	ldr	r3, [pc, #516]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fcc2:	4798      	blx	r3
    fcc4:	4b88      	ldr	r3, [pc, #544]	; (fee8 <m2m_wifi_connect_sc+0x3c8>)
    fcc6:	0018      	movs	r0, r3
    fcc8:	4b7f      	ldr	r3, [pc, #508]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fcca:	4798      	blx	r3
    fccc:	4b80      	ldr	r3, [pc, #512]	; (fed0 <m2m_wifi_connect_sc+0x3b0>)
    fcce:	0018      	movs	r0, r3
    fcd0:	4b7d      	ldr	r3, [pc, #500]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fcd2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    fcd4:	2397      	movs	r3, #151	; 0x97
    fcd6:	18fb      	adds	r3, r7, r3
    fcd8:	22f4      	movs	r2, #244	; 0xf4
    fcda:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    fcdc:	e149      	b.n	ff72 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    fcde:	230b      	movs	r3, #11
    fce0:	18fb      	adds	r3, r7, r3
    fce2:	781a      	ldrb	r2, [r3, #0]
    fce4:	68f9      	ldr	r1, [r7, #12]
    fce6:	2314      	movs	r3, #20
    fce8:	18fb      	adds	r3, r7, r3
    fcea:	3346      	adds	r3, #70	; 0x46
    fcec:	0018      	movs	r0, r3
    fcee:	4b7f      	ldr	r3, [pc, #508]	; (feec <m2m_wifi_connect_sc+0x3cc>)
    fcf0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    fcf2:	230b      	movs	r3, #11
    fcf4:	18fb      	adds	r3, r7, r3
    fcf6:	781b      	ldrb	r3, [r3, #0]
    fcf8:	2214      	movs	r2, #20
    fcfa:	18ba      	adds	r2, r7, r2
    fcfc:	2146      	movs	r1, #70	; 0x46
    fcfe:	18d3      	adds	r3, r2, r3
    fd00:	185b      	adds	r3, r3, r1
    fd02:	2200      	movs	r2, #0
    fd04:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    fd06:	2314      	movs	r3, #20
    fd08:	18fb      	adds	r3, r7, r3
    fd0a:	22a8      	movs	r2, #168	; 0xa8
    fd0c:	18ba      	adds	r2, r7, r2
    fd0e:	2144      	movs	r1, #68	; 0x44
    fd10:	8812      	ldrh	r2, [r2, #0]
    fd12:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    fd14:	23ac      	movs	r3, #172	; 0xac
    fd16:	18fb      	adds	r3, r7, r3
    fd18:	781b      	ldrb	r3, [r3, #0]
    fd1a:	1e5a      	subs	r2, r3, #1
    fd1c:	4193      	sbcs	r3, r2
    fd1e:	b2db      	uxtb	r3, r3
    fd20:	0019      	movs	r1, r3
    fd22:	2314      	movs	r3, #20
    fd24:	18fb      	adds	r3, r7, r3
    fd26:	2267      	movs	r2, #103	; 0x67
    fd28:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    fd2a:	2314      	movs	r3, #20
    fd2c:	18fb      	adds	r3, r7, r3
    fd2e:	228c      	movs	r2, #140	; 0x8c
    fd30:	18ba      	adds	r2, r7, r2
    fd32:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    fd34:	238c      	movs	r3, #140	; 0x8c
    fd36:	18fb      	adds	r3, r7, r3
    fd38:	681b      	ldr	r3, [r3, #0]
    fd3a:	220a      	movs	r2, #10
    fd3c:	18ba      	adds	r2, r7, r2
    fd3e:	2141      	movs	r1, #65	; 0x41
    fd40:	7812      	ldrb	r2, [r2, #0]
    fd42:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    fd44:	230a      	movs	r3, #10
    fd46:	18fb      	adds	r3, r7, r3
    fd48:	781b      	ldrb	r3, [r3, #0]
    fd4a:	2b03      	cmp	r3, #3
    fd4c:	d000      	beq.n	fd50 <m2m_wifi_connect_sc+0x230>
    fd4e:	e07d      	b.n	fe4c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    fd50:	687b      	ldr	r3, [r7, #4]
    fd52:	2288      	movs	r2, #136	; 0x88
    fd54:	18ba      	adds	r2, r7, r2
    fd56:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    fd58:	238c      	movs	r3, #140	; 0x8c
    fd5a:	18fb      	adds	r3, r7, r3
    fd5c:	681b      	ldr	r3, [r3, #0]
    fd5e:	2284      	movs	r2, #132	; 0x84
    fd60:	18ba      	adds	r2, r7, r2
    fd62:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    fd64:	2388      	movs	r3, #136	; 0x88
    fd66:	18fb      	adds	r3, r7, r3
    fd68:	681b      	ldr	r3, [r3, #0]
    fd6a:	781b      	ldrb	r3, [r3, #0]
    fd6c:	3b01      	subs	r3, #1
    fd6e:	b2da      	uxtb	r2, r3
    fd70:	2384      	movs	r3, #132	; 0x84
    fd72:	18fb      	adds	r3, r7, r3
    fd74:	681b      	ldr	r3, [r3, #0]
    fd76:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    fd78:	2384      	movs	r3, #132	; 0x84
    fd7a:	18fb      	adds	r3, r7, r3
    fd7c:	681b      	ldr	r3, [r3, #0]
    fd7e:	781b      	ldrb	r3, [r3, #0]
    fd80:	2b03      	cmp	r3, #3
    fd82:	d919      	bls.n	fdb8 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    fd84:	2394      	movs	r3, #148	; 0x94
    fd86:	009a      	lsls	r2, r3, #2
    fd88:	494d      	ldr	r1, [pc, #308]	; (fec0 <m2m_wifi_connect_sc+0x3a0>)
    fd8a:	4b4e      	ldr	r3, [pc, #312]	; (fec4 <m2m_wifi_connect_sc+0x3a4>)
    fd8c:	0018      	movs	r0, r3
    fd8e:	4b4e      	ldr	r3, [pc, #312]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fd90:	4798      	blx	r3
    fd92:	2384      	movs	r3, #132	; 0x84
    fd94:	18fb      	adds	r3, r7, r3
    fd96:	681b      	ldr	r3, [r3, #0]
    fd98:	781b      	ldrb	r3, [r3, #0]
    fd9a:	001a      	movs	r2, r3
    fd9c:	4b54      	ldr	r3, [pc, #336]	; (fef0 <m2m_wifi_connect_sc+0x3d0>)
    fd9e:	0011      	movs	r1, r2
    fda0:	0018      	movs	r0, r3
    fda2:	4b49      	ldr	r3, [pc, #292]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fda4:	4798      	blx	r3
    fda6:	4b4a      	ldr	r3, [pc, #296]	; (fed0 <m2m_wifi_connect_sc+0x3b0>)
    fda8:	0018      	movs	r0, r3
    fdaa:	4b47      	ldr	r3, [pc, #284]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fdac:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    fdae:	2397      	movs	r3, #151	; 0x97
    fdb0:	18fb      	adds	r3, r7, r3
    fdb2:	22f4      	movs	r2, #244	; 0xf4
    fdb4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    fdb6:	e0dc      	b.n	ff72 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    fdb8:	2388      	movs	r3, #136	; 0x88
    fdba:	18fb      	adds	r3, r7, r3
    fdbc:	681b      	ldr	r3, [r3, #0]
    fdbe:	785b      	ldrb	r3, [r3, #1]
    fdc0:	3b01      	subs	r3, #1
    fdc2:	b2da      	uxtb	r2, r3
    fdc4:	2384      	movs	r3, #132	; 0x84
    fdc6:	18fb      	adds	r3, r7, r3
    fdc8:	681b      	ldr	r3, [r3, #0]
    fdca:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    fdcc:	2384      	movs	r3, #132	; 0x84
    fdce:	18fb      	adds	r3, r7, r3
    fdd0:	681b      	ldr	r3, [r3, #0]
    fdd2:	785b      	ldrb	r3, [r3, #1]
    fdd4:	2b0a      	cmp	r3, #10
    fdd6:	d01e      	beq.n	fe16 <m2m_wifi_connect_sc+0x2f6>
    fdd8:	2384      	movs	r3, #132	; 0x84
    fdda:	18fb      	adds	r3, r7, r3
    fddc:	681b      	ldr	r3, [r3, #0]
    fdde:	785b      	ldrb	r3, [r3, #1]
    fde0:	2b1a      	cmp	r3, #26
    fde2:	d018      	beq.n	fe16 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    fde4:	4a43      	ldr	r2, [pc, #268]	; (fef4 <m2m_wifi_connect_sc+0x3d4>)
    fde6:	4936      	ldr	r1, [pc, #216]	; (fec0 <m2m_wifi_connect_sc+0x3a0>)
    fde8:	4b36      	ldr	r3, [pc, #216]	; (fec4 <m2m_wifi_connect_sc+0x3a4>)
    fdea:	0018      	movs	r0, r3
    fdec:	4b36      	ldr	r3, [pc, #216]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fdee:	4798      	blx	r3
    fdf0:	2384      	movs	r3, #132	; 0x84
    fdf2:	18fb      	adds	r3, r7, r3
    fdf4:	681b      	ldr	r3, [r3, #0]
    fdf6:	785b      	ldrb	r3, [r3, #1]
    fdf8:	001a      	movs	r2, r3
    fdfa:	4b3f      	ldr	r3, [pc, #252]	; (fef8 <m2m_wifi_connect_sc+0x3d8>)
    fdfc:	0011      	movs	r1, r2
    fdfe:	0018      	movs	r0, r3
    fe00:	4b31      	ldr	r3, [pc, #196]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fe02:	4798      	blx	r3
    fe04:	4b32      	ldr	r3, [pc, #200]	; (fed0 <m2m_wifi_connect_sc+0x3b0>)
    fe06:	0018      	movs	r0, r3
    fe08:	4b2f      	ldr	r3, [pc, #188]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fe0a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    fe0c:	2397      	movs	r3, #151	; 0x97
    fe0e:	18fb      	adds	r3, r7, r3
    fe10:	22f4      	movs	r2, #244	; 0xf4
    fe12:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    fe14:	e0ad      	b.n	ff72 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    fe16:	2384      	movs	r3, #132	; 0x84
    fe18:	18fb      	adds	r3, r7, r3
    fe1a:	681b      	ldr	r3, [r3, #0]
    fe1c:	1c98      	adds	r0, r3, #2
    fe1e:	2388      	movs	r3, #136	; 0x88
    fe20:	18fb      	adds	r3, r7, r3
    fe22:	681b      	ldr	r3, [r3, #0]
    fe24:	1c99      	adds	r1, r3, #2
    fe26:	2388      	movs	r3, #136	; 0x88
    fe28:	18fb      	adds	r3, r7, r3
    fe2a:	681b      	ldr	r3, [r3, #0]
    fe2c:	785b      	ldrb	r3, [r3, #1]
    fe2e:	001a      	movs	r2, r3
    fe30:	4b2e      	ldr	r3, [pc, #184]	; (feec <m2m_wifi_connect_sc+0x3cc>)
    fe32:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    fe34:	2388      	movs	r3, #136	; 0x88
    fe36:	18fb      	adds	r3, r7, r3
    fe38:	681b      	ldr	r3, [r3, #0]
    fe3a:	785b      	ldrb	r3, [r3, #1]
    fe3c:	001a      	movs	r2, r3
    fe3e:	2384      	movs	r3, #132	; 0x84
    fe40:	18fb      	adds	r3, r7, r3
    fe42:	681b      	ldr	r3, [r3, #0]
    fe44:	189b      	adds	r3, r3, r2
    fe46:	2200      	movs	r2, #0
    fe48:	709a      	strb	r2, [r3, #2]
    fe4a:	e081      	b.n	ff50 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    fe4c:	230a      	movs	r3, #10
    fe4e:	18fb      	adds	r3, r7, r3
    fe50:	781b      	ldrb	r3, [r3, #0]
    fe52:	2b02      	cmp	r3, #2
    fe54:	d156      	bne.n	ff04 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    fe56:	2382      	movs	r3, #130	; 0x82
    fe58:	18fc      	adds	r4, r7, r3
    fe5a:	687b      	ldr	r3, [r7, #4]
    fe5c:	0018      	movs	r0, r3
    fe5e:	4b1d      	ldr	r3, [pc, #116]	; (fed4 <m2m_wifi_connect_sc+0x3b4>)
    fe60:	4798      	blx	r3
    fe62:	0003      	movs	r3, r0
    fe64:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    fe66:	2382      	movs	r3, #130	; 0x82
    fe68:	18fb      	adds	r3, r7, r3
    fe6a:	881b      	ldrh	r3, [r3, #0]
    fe6c:	2b00      	cmp	r3, #0
    fe6e:	d004      	beq.n	fe7a <m2m_wifi_connect_sc+0x35a>
    fe70:	2382      	movs	r3, #130	; 0x82
    fe72:	18fb      	adds	r3, r7, r3
    fe74:	881b      	ldrh	r3, [r3, #0]
    fe76:	2b40      	cmp	r3, #64	; 0x40
    fe78:	d912      	bls.n	fea0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
    fe7a:	4a20      	ldr	r2, [pc, #128]	; (fefc <m2m_wifi_connect_sc+0x3dc>)
    fe7c:	4910      	ldr	r1, [pc, #64]	; (fec0 <m2m_wifi_connect_sc+0x3a0>)
    fe7e:	4b11      	ldr	r3, [pc, #68]	; (fec4 <m2m_wifi_connect_sc+0x3a4>)
    fe80:	0018      	movs	r0, r3
    fe82:	4b11      	ldr	r3, [pc, #68]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fe84:	4798      	blx	r3
    fe86:	4b1e      	ldr	r3, [pc, #120]	; (ff00 <m2m_wifi_connect_sc+0x3e0>)
    fe88:	0018      	movs	r0, r3
    fe8a:	4b0f      	ldr	r3, [pc, #60]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fe8c:	4798      	blx	r3
    fe8e:	4b10      	ldr	r3, [pc, #64]	; (fed0 <m2m_wifi_connect_sc+0x3b0>)
    fe90:	0018      	movs	r0, r3
    fe92:	4b0d      	ldr	r3, [pc, #52]	; (fec8 <m2m_wifi_connect_sc+0x3a8>)
    fe94:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    fe96:	2397      	movs	r3, #151	; 0x97
    fe98:	18fb      	adds	r3, r7, r3
    fe9a:	22f4      	movs	r2, #244	; 0xf4
    fe9c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    fe9e:	e068      	b.n	ff72 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    fea0:	238c      	movs	r3, #140	; 0x8c
    fea2:	18fb      	adds	r3, r7, r3
    fea4:	6818      	ldr	r0, [r3, #0]
    fea6:	2382      	movs	r3, #130	; 0x82
    fea8:	18fb      	adds	r3, r7, r3
    feaa:	881b      	ldrh	r3, [r3, #0]
    feac:	3301      	adds	r3, #1
    feae:	001a      	movs	r2, r3
    feb0:	687b      	ldr	r3, [r7, #4]
    feb2:	0019      	movs	r1, r3
    feb4:	4b0d      	ldr	r3, [pc, #52]	; (feec <m2m_wifi_connect_sc+0x3cc>)
    feb6:	4798      	blx	r3
    feb8:	e04a      	b.n	ff50 <m2m_wifi_connect_sc+0x430>
    feba:	46c0      	nop			; (mov r8, r8)
    febc:	0000021a 	.word	0x0000021a
    fec0:	0002786c 	.word	0x0002786c
    fec4:	000274b4 	.word	0x000274b4
    fec8:	0000b9b9 	.word	0x0000b9b9
    fecc:	000276f4 	.word	0x000276f4
    fed0:	000274b0 	.word	0x000274b0
    fed4:	0000e78f 	.word	0x0000e78f
    fed8:	00000226 	.word	0x00000226
    fedc:	00027708 	.word	0x00027708
    fee0:	00027718 	.word	0x00027718
    fee4:	00000239 	.word	0x00000239
    fee8:	0002772c 	.word	0x0002772c
    feec:	0000e715 	.word	0x0000e715
    fef0:	00027738 	.word	0x00027738
    fef4:	00000257 	.word	0x00000257
    fef8:	00027754 	.word	0x00027754
    fefc:	00000266 	.word	0x00000266
    ff00:	00027770 	.word	0x00027770
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    ff04:	230a      	movs	r3, #10
    ff06:	18fb      	adds	r3, r7, r3
    ff08:	781b      	ldrb	r3, [r3, #0]
    ff0a:	2b04      	cmp	r3, #4
    ff0c:	d108      	bne.n	ff20 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    ff0e:	238c      	movs	r3, #140	; 0x8c
    ff10:	18fb      	adds	r3, r7, r3
    ff12:	681b      	ldr	r3, [r3, #0]
    ff14:	6879      	ldr	r1, [r7, #4]
    ff16:	223e      	movs	r2, #62	; 0x3e
    ff18:	0018      	movs	r0, r3
    ff1a:	4b1a      	ldr	r3, [pc, #104]	; (ff84 <m2m_wifi_connect_sc+0x464>)
    ff1c:	4798      	blx	r3
    ff1e:	e017      	b.n	ff50 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    ff20:	230a      	movs	r3, #10
    ff22:	18fb      	adds	r3, r7, r3
    ff24:	781b      	ldrb	r3, [r3, #0]
    ff26:	2b01      	cmp	r3, #1
    ff28:	d012      	beq.n	ff50 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    ff2a:	4a17      	ldr	r2, [pc, #92]	; (ff88 <m2m_wifi_connect_sc+0x468>)
    ff2c:	4917      	ldr	r1, [pc, #92]	; (ff8c <m2m_wifi_connect_sc+0x46c>)
    ff2e:	4b18      	ldr	r3, [pc, #96]	; (ff90 <m2m_wifi_connect_sc+0x470>)
    ff30:	0018      	movs	r0, r3
    ff32:	4b18      	ldr	r3, [pc, #96]	; (ff94 <m2m_wifi_connect_sc+0x474>)
    ff34:	4798      	blx	r3
    ff36:	4b18      	ldr	r3, [pc, #96]	; (ff98 <m2m_wifi_connect_sc+0x478>)
    ff38:	0018      	movs	r0, r3
    ff3a:	4b16      	ldr	r3, [pc, #88]	; (ff94 <m2m_wifi_connect_sc+0x474>)
    ff3c:	4798      	blx	r3
    ff3e:	4b17      	ldr	r3, [pc, #92]	; (ff9c <m2m_wifi_connect_sc+0x47c>)
    ff40:	0018      	movs	r0, r3
    ff42:	4b14      	ldr	r3, [pc, #80]	; (ff94 <m2m_wifi_connect_sc+0x474>)
    ff44:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ff46:	2397      	movs	r3, #151	; 0x97
    ff48:	18fb      	adds	r3, r7, r3
    ff4a:	22f4      	movs	r2, #244	; 0xf4
    ff4c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    ff4e:	e010      	b.n	ff72 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    ff50:	2397      	movs	r3, #151	; 0x97
    ff52:	18fc      	adds	r4, r7, r3
    ff54:	2314      	movs	r3, #20
    ff56:	18fa      	adds	r2, r7, r3
    ff58:	2300      	movs	r3, #0
    ff5a:	9302      	str	r3, [sp, #8]
    ff5c:	2300      	movs	r3, #0
    ff5e:	9301      	str	r3, [sp, #4]
    ff60:	2300      	movs	r3, #0
    ff62:	9300      	str	r3, [sp, #0]
    ff64:	236c      	movs	r3, #108	; 0x6c
    ff66:	2128      	movs	r1, #40	; 0x28
    ff68:	2001      	movs	r0, #1
    ff6a:	4d0d      	ldr	r5, [pc, #52]	; (ffa0 <m2m_wifi_connect_sc+0x480>)
    ff6c:	47a8      	blx	r5
    ff6e:	0003      	movs	r3, r0
    ff70:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    ff72:	2397      	movs	r3, #151	; 0x97
    ff74:	18fb      	adds	r3, r7, r3
    ff76:	781b      	ldrb	r3, [r3, #0]
    ff78:	b25b      	sxtb	r3, r3
}
    ff7a:	0018      	movs	r0, r3
    ff7c:	46bd      	mov	sp, r7
    ff7e:	b026      	add	sp, #152	; 0x98
    ff80:	bdb0      	pop	{r4, r5, r7, pc}
    ff82:	46c0      	nop			; (mov r8, r8)
    ff84:	0000e715 	.word	0x0000e715
    ff88:	00000276 	.word	0x00000276
    ff8c:	0002786c 	.word	0x0002786c
    ff90:	000274b4 	.word	0x000274b4
    ff94:	0000b9b9 	.word	0x0000b9b9
    ff98:	0002778c 	.word	0x0002778c
    ff9c:	000274b0 	.word	0x000274b0
    ffa0:	0000e9b1 	.word	0x0000e9b1

0000ffa4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    ffa4:	b580      	push	{r7, lr}
    ffa6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    ffa8:	2300      	movs	r3, #0
}
    ffaa:	0018      	movs	r0, r3
    ffac:	46bd      	mov	sp, r7
    ffae:	bd80      	pop	{r7, pc}

0000ffb0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    ffb0:	b590      	push	{r4, r7, lr}
    ffb2:	b087      	sub	sp, #28
    ffb4:	af00      	add	r7, sp, #0
    ffb6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    ffb8:	2317      	movs	r3, #23
    ffba:	18fb      	adds	r3, r7, r3
    ffbc:	2200      	movs	r2, #0
    ffbe:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    ffc0:	687b      	ldr	r3, [r7, #4]
    ffc2:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    ffc4:	693b      	ldr	r3, [r7, #16]
    ffc6:	2280      	movs	r2, #128	; 0x80
    ffc8:	0052      	lsls	r2, r2, #1
    ffca:	4313      	orrs	r3, r2
    ffcc:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    ffce:	693a      	ldr	r2, [r7, #16]
    ffd0:	23a5      	movs	r3, #165	; 0xa5
    ffd2:	015b      	lsls	r3, r3, #5
    ffd4:	0011      	movs	r1, r2
    ffd6:	0018      	movs	r0, r3
    ffd8:	4b12      	ldr	r3, [pc, #72]	; (10024 <chip_apply_conf+0x74>)
    ffda:	4798      	blx	r3
		if(val32 != 0) {		
    ffdc:	693b      	ldr	r3, [r7, #16]
    ffde:	2b00      	cmp	r3, #0
    ffe0:	d018      	beq.n	10014 <chip_apply_conf+0x64>
			uint32 reg = 0;
    ffe2:	2300      	movs	r3, #0
    ffe4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    ffe6:	2317      	movs	r3, #23
    ffe8:	18fc      	adds	r4, r7, r3
    ffea:	230c      	movs	r3, #12
    ffec:	18fa      	adds	r2, r7, r3
    ffee:	23a5      	movs	r3, #165	; 0xa5
    fff0:	015b      	lsls	r3, r3, #5
    fff2:	0011      	movs	r1, r2
    fff4:	0018      	movs	r0, r3
    fff6:	4b0c      	ldr	r3, [pc, #48]	; (10028 <chip_apply_conf+0x78>)
    fff8:	4798      	blx	r3
    fffa:	0003      	movs	r3, r0
    fffc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    fffe:	2317      	movs	r3, #23
   10000:	18fb      	adds	r3, r7, r3
   10002:	781b      	ldrb	r3, [r3, #0]
   10004:	b25b      	sxtb	r3, r3
   10006:	2b00      	cmp	r3, #0
   10008:	d1e1      	bne.n	ffce <chip_apply_conf+0x1e>
				if(reg == val32)
   1000a:	68fa      	ldr	r2, [r7, #12]
   1000c:	693b      	ldr	r3, [r7, #16]
   1000e:	429a      	cmp	r2, r3
   10010:	d002      	beq.n	10018 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   10012:	e7dc      	b.n	ffce <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   10014:	46c0      	nop			; (mov r8, r8)
   10016:	e000      	b.n	1001a <chip_apply_conf+0x6a>
					break;
   10018:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   1001a:	2300      	movs	r3, #0
}
   1001c:	0018      	movs	r0, r3
   1001e:	46bd      	mov	sp, r7
   10020:	b007      	add	sp, #28
   10022:	bd90      	pop	{r4, r7, pc}
   10024:	00010805 	.word	0x00010805
   10028:	000107e1 	.word	0x000107e1

0001002c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   1002c:	b590      	push	{r4, r7, lr}
   1002e:	b083      	sub	sp, #12
   10030:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   10032:	2300      	movs	r3, #0
   10034:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   10036:	1dfb      	adds	r3, r7, #7
   10038:	2200      	movs	r2, #0
   1003a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   1003c:	1dfc      	adds	r4, r7, #7
   1003e:	003b      	movs	r3, r7
   10040:	4a24      	ldr	r2, [pc, #144]	; (100d4 <enable_interrupts+0xa8>)
   10042:	0019      	movs	r1, r3
   10044:	0010      	movs	r0, r2
   10046:	4b24      	ldr	r3, [pc, #144]	; (100d8 <enable_interrupts+0xac>)
   10048:	4798      	blx	r3
   1004a:	0003      	movs	r3, r0
   1004c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   1004e:	1dfb      	adds	r3, r7, #7
   10050:	781b      	ldrb	r3, [r3, #0]
   10052:	b25b      	sxtb	r3, r3
   10054:	2b00      	cmp	r3, #0
   10056:	d131      	bne.n	100bc <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   10058:	683b      	ldr	r3, [r7, #0]
   1005a:	2280      	movs	r2, #128	; 0x80
   1005c:	0052      	lsls	r2, r2, #1
   1005e:	4313      	orrs	r3, r2
   10060:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   10062:	683b      	ldr	r3, [r7, #0]
   10064:	1dfc      	adds	r4, r7, #7
   10066:	4a1b      	ldr	r2, [pc, #108]	; (100d4 <enable_interrupts+0xa8>)
   10068:	0019      	movs	r1, r3
   1006a:	0010      	movs	r0, r2
   1006c:	4b1b      	ldr	r3, [pc, #108]	; (100dc <enable_interrupts+0xb0>)
   1006e:	4798      	blx	r3
   10070:	0003      	movs	r3, r0
   10072:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   10074:	1dfb      	adds	r3, r7, #7
   10076:	781b      	ldrb	r3, [r3, #0]
   10078:	b25b      	sxtb	r3, r3
   1007a:	2b00      	cmp	r3, #0
   1007c:	d120      	bne.n	100c0 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   1007e:	1dfc      	adds	r4, r7, #7
   10080:	003a      	movs	r2, r7
   10082:	23d0      	movs	r3, #208	; 0xd0
   10084:	015b      	lsls	r3, r3, #5
   10086:	0011      	movs	r1, r2
   10088:	0018      	movs	r0, r3
   1008a:	4b13      	ldr	r3, [pc, #76]	; (100d8 <enable_interrupts+0xac>)
   1008c:	4798      	blx	r3
   1008e:	0003      	movs	r3, r0
   10090:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   10092:	1dfb      	adds	r3, r7, #7
   10094:	781b      	ldrb	r3, [r3, #0]
   10096:	b25b      	sxtb	r3, r3
   10098:	2b00      	cmp	r3, #0
   1009a:	d113      	bne.n	100c4 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   1009c:	683b      	ldr	r3, [r7, #0]
   1009e:	2280      	movs	r2, #128	; 0x80
   100a0:	0252      	lsls	r2, r2, #9
   100a2:	4313      	orrs	r3, r2
   100a4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   100a6:	683a      	ldr	r2, [r7, #0]
   100a8:	1dfc      	adds	r4, r7, #7
   100aa:	23d0      	movs	r3, #208	; 0xd0
   100ac:	015b      	lsls	r3, r3, #5
   100ae:	0011      	movs	r1, r2
   100b0:	0018      	movs	r0, r3
   100b2:	4b0a      	ldr	r3, [pc, #40]	; (100dc <enable_interrupts+0xb0>)
   100b4:	4798      	blx	r3
   100b6:	0003      	movs	r3, r0
   100b8:	7023      	strb	r3, [r4, #0]
   100ba:	e004      	b.n	100c6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   100bc:	46c0      	nop			; (mov r8, r8)
   100be:	e002      	b.n	100c6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   100c0:	46c0      	nop			; (mov r8, r8)
   100c2:	e000      	b.n	100c6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   100c4:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   100c6:	1dfb      	adds	r3, r7, #7
   100c8:	781b      	ldrb	r3, [r3, #0]
   100ca:	b25b      	sxtb	r3, r3
}
   100cc:	0018      	movs	r0, r3
   100ce:	46bd      	mov	sp, r7
   100d0:	b003      	add	sp, #12
   100d2:	bd90      	pop	{r4, r7, pc}
   100d4:	00001408 	.word	0x00001408
   100d8:	000107e1 	.word	0x000107e1
   100dc:	00010805 	.word	0x00010805

000100e0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   100e0:	b580      	push	{r7, lr}
   100e2:	b082      	sub	sp, #8
   100e4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   100e6:	4b32      	ldr	r3, [pc, #200]	; (101b0 <nmi_get_chipid+0xd0>)
   100e8:	681b      	ldr	r3, [r3, #0]
   100ea:	2b00      	cmp	r3, #0
   100ec:	d159      	bne.n	101a2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   100ee:	4a30      	ldr	r2, [pc, #192]	; (101b0 <nmi_get_chipid+0xd0>)
   100f0:	2380      	movs	r3, #128	; 0x80
   100f2:	015b      	lsls	r3, r3, #5
   100f4:	0011      	movs	r1, r2
   100f6:	0018      	movs	r0, r3
   100f8:	4b2e      	ldr	r3, [pc, #184]	; (101b4 <nmi_get_chipid+0xd4>)
   100fa:	4798      	blx	r3
   100fc:	1e03      	subs	r3, r0, #0
   100fe:	d004      	beq.n	1010a <nmi_get_chipid+0x2a>
			chipid = 0;
   10100:	4b2b      	ldr	r3, [pc, #172]	; (101b0 <nmi_get_chipid+0xd0>)
   10102:	2200      	movs	r2, #0
   10104:	601a      	str	r2, [r3, #0]
			return 0;
   10106:	2300      	movs	r3, #0
   10108:	e04d      	b.n	101a6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   1010a:	1d3b      	adds	r3, r7, #4
   1010c:	4a2a      	ldr	r2, [pc, #168]	; (101b8 <nmi_get_chipid+0xd8>)
   1010e:	0019      	movs	r1, r3
   10110:	0010      	movs	r0, r2
   10112:	4b28      	ldr	r3, [pc, #160]	; (101b4 <nmi_get_chipid+0xd4>)
   10114:	4798      	blx	r3
   10116:	1e03      	subs	r3, r0, #0
   10118:	d004      	beq.n	10124 <nmi_get_chipid+0x44>
			chipid = 0;
   1011a:	4b25      	ldr	r3, [pc, #148]	; (101b0 <nmi_get_chipid+0xd0>)
   1011c:	2200      	movs	r2, #0
   1011e:	601a      	str	r2, [r3, #0]
			return 0;
   10120:	2300      	movs	r3, #0
   10122:	e040      	b.n	101a6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   10124:	4b22      	ldr	r3, [pc, #136]	; (101b0 <nmi_get_chipid+0xd0>)
   10126:	681b      	ldr	r3, [r3, #0]
   10128:	4a24      	ldr	r2, [pc, #144]	; (101bc <nmi_get_chipid+0xdc>)
   1012a:	4293      	cmp	r3, r2
   1012c:	d106      	bne.n	1013c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   1012e:	687b      	ldr	r3, [r7, #4]
   10130:	2b01      	cmp	r3, #1
   10132:	d029      	beq.n	10188 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   10134:	4b1e      	ldr	r3, [pc, #120]	; (101b0 <nmi_get_chipid+0xd0>)
   10136:	4a22      	ldr	r2, [pc, #136]	; (101c0 <nmi_get_chipid+0xe0>)
   10138:	601a      	str	r2, [r3, #0]
   1013a:	e025      	b.n	10188 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   1013c:	4b1c      	ldr	r3, [pc, #112]	; (101b0 <nmi_get_chipid+0xd0>)
   1013e:	681b      	ldr	r3, [r3, #0]
   10140:	4a20      	ldr	r2, [pc, #128]	; (101c4 <nmi_get_chipid+0xe4>)
   10142:	4293      	cmp	r3, r2
   10144:	d10d      	bne.n	10162 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   10146:	687b      	ldr	r3, [r7, #4]
   10148:	2b03      	cmp	r3, #3
   1014a:	d01d      	beq.n	10188 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   1014c:	687b      	ldr	r3, [r7, #4]
   1014e:	2b04      	cmp	r3, #4
   10150:	d103      	bne.n	1015a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   10152:	4b17      	ldr	r3, [pc, #92]	; (101b0 <nmi_get_chipid+0xd0>)
   10154:	4a1c      	ldr	r2, [pc, #112]	; (101c8 <nmi_get_chipid+0xe8>)
   10156:	601a      	str	r2, [r3, #0]
   10158:	e016      	b.n	10188 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   1015a:	4b15      	ldr	r3, [pc, #84]	; (101b0 <nmi_get_chipid+0xd0>)
   1015c:	4a1b      	ldr	r2, [pc, #108]	; (101cc <nmi_get_chipid+0xec>)
   1015e:	601a      	str	r2, [r3, #0]
   10160:	e012      	b.n	10188 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   10162:	4b13      	ldr	r3, [pc, #76]	; (101b0 <nmi_get_chipid+0xd0>)
   10164:	681b      	ldr	r3, [r3, #0]
   10166:	4a1a      	ldr	r2, [pc, #104]	; (101d0 <nmi_get_chipid+0xf0>)
   10168:	4293      	cmp	r3, r2
   1016a:	d10d      	bne.n	10188 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   1016c:	4a10      	ldr	r2, [pc, #64]	; (101b0 <nmi_get_chipid+0xd0>)
   1016e:	23ec      	movs	r3, #236	; 0xec
   10170:	039b      	lsls	r3, r3, #14
   10172:	0011      	movs	r1, r2
   10174:	0018      	movs	r0, r3
   10176:	4b0f      	ldr	r3, [pc, #60]	; (101b4 <nmi_get_chipid+0xd4>)
   10178:	4798      	blx	r3
   1017a:	1e03      	subs	r3, r0, #0
   1017c:	d004      	beq.n	10188 <nmi_get_chipid+0xa8>
			chipid = 0;
   1017e:	4b0c      	ldr	r3, [pc, #48]	; (101b0 <nmi_get_chipid+0xd0>)
   10180:	2200      	movs	r2, #0
   10182:	601a      	str	r2, [r3, #0]
			return 0;
   10184:	2300      	movs	r3, #0
   10186:	e00e      	b.n	101a6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   10188:	4b09      	ldr	r3, [pc, #36]	; (101b0 <nmi_get_chipid+0xd0>)
   1018a:	681b      	ldr	r3, [r3, #0]
   1018c:	4a11      	ldr	r2, [pc, #68]	; (101d4 <nmi_get_chipid+0xf4>)
   1018e:	401a      	ands	r2, r3
   10190:	4b07      	ldr	r3, [pc, #28]	; (101b0 <nmi_get_chipid+0xd0>)
   10192:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   10194:	4b06      	ldr	r3, [pc, #24]	; (101b0 <nmi_get_chipid+0xd0>)
   10196:	681b      	ldr	r3, [r3, #0]
   10198:	22a0      	movs	r2, #160	; 0xa0
   1019a:	02d2      	lsls	r2, r2, #11
   1019c:	431a      	orrs	r2, r3
   1019e:	4b04      	ldr	r3, [pc, #16]	; (101b0 <nmi_get_chipid+0xd0>)
   101a0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   101a2:	4b03      	ldr	r3, [pc, #12]	; (101b0 <nmi_get_chipid+0xd0>)
   101a4:	681b      	ldr	r3, [r3, #0]
}
   101a6:	0018      	movs	r0, r3
   101a8:	46bd      	mov	sp, r7
   101aa:	b002      	add	sp, #8
   101ac:	bd80      	pop	{r7, pc}
   101ae:	46c0      	nop			; (mov r8, r8)
   101b0:	2000433c 	.word	0x2000433c
   101b4:	000107e1 	.word	0x000107e1
   101b8:	000013f4 	.word	0x000013f4
   101bc:	001002a0 	.word	0x001002a0
   101c0:	001002a1 	.word	0x001002a1
   101c4:	001002b0 	.word	0x001002b0
   101c8:	001002b1 	.word	0x001002b1
   101cc:	001002b2 	.word	0x001002b2
   101d0:	001000f0 	.word	0x001000f0
   101d4:	fff0ffff 	.word	0xfff0ffff

000101d8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   101d8:	b590      	push	{r4, r7, lr}
   101da:	b083      	sub	sp, #12
   101dc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   101de:	1dfb      	adds	r3, r7, #7
   101e0:	2200      	movs	r2, #0
   101e2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   101e4:	1dfc      	adds	r4, r7, #7
   101e6:	003b      	movs	r3, r7
   101e8:	0019      	movs	r1, r3
   101ea:	2010      	movs	r0, #16
   101ec:	4b2e      	ldr	r3, [pc, #184]	; (102a8 <chip_sleep+0xd0>)
   101ee:	4798      	blx	r3
   101f0:	0003      	movs	r3, r0
   101f2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   101f4:	1dfb      	adds	r3, r7, #7
   101f6:	781b      	ldrb	r3, [r3, #0]
   101f8:	b25b      	sxtb	r3, r3
   101fa:	2b00      	cmp	r3, #0
   101fc:	d145      	bne.n	1028a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   101fe:	683b      	ldr	r3, [r7, #0]
   10200:	2201      	movs	r2, #1
   10202:	4013      	ands	r3, r2
   10204:	d000      	beq.n	10208 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   10206:	e7ed      	b.n	101e4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   10208:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1020a:	1dfc      	adds	r4, r7, #7
   1020c:	003b      	movs	r3, r7
   1020e:	0019      	movs	r1, r3
   10210:	2001      	movs	r0, #1
   10212:	4b25      	ldr	r3, [pc, #148]	; (102a8 <chip_sleep+0xd0>)
   10214:	4798      	blx	r3
   10216:	0003      	movs	r3, r0
   10218:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1021a:	1dfb      	adds	r3, r7, #7
   1021c:	781b      	ldrb	r3, [r3, #0]
   1021e:	b25b      	sxtb	r3, r3
   10220:	2b00      	cmp	r3, #0
   10222:	d134      	bne.n	1028e <chip_sleep+0xb6>
	if(reg & NBIT1)
   10224:	683b      	ldr	r3, [r7, #0]
   10226:	2202      	movs	r2, #2
   10228:	4013      	ands	r3, r2
   1022a:	d010      	beq.n	1024e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   1022c:	683b      	ldr	r3, [r7, #0]
   1022e:	2202      	movs	r2, #2
   10230:	4393      	bics	r3, r2
   10232:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   10234:	683b      	ldr	r3, [r7, #0]
   10236:	1dfc      	adds	r4, r7, #7
   10238:	0019      	movs	r1, r3
   1023a:	2001      	movs	r0, #1
   1023c:	4b1b      	ldr	r3, [pc, #108]	; (102ac <chip_sleep+0xd4>)
   1023e:	4798      	blx	r3
   10240:	0003      	movs	r3, r0
   10242:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   10244:	1dfb      	adds	r3, r7, #7
   10246:	781b      	ldrb	r3, [r3, #0]
   10248:	b25b      	sxtb	r3, r3
   1024a:	2b00      	cmp	r3, #0
   1024c:	d121      	bne.n	10292 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1024e:	1dfc      	adds	r4, r7, #7
   10250:	003b      	movs	r3, r7
   10252:	0019      	movs	r1, r3
   10254:	200b      	movs	r0, #11
   10256:	4b14      	ldr	r3, [pc, #80]	; (102a8 <chip_sleep+0xd0>)
   10258:	4798      	blx	r3
   1025a:	0003      	movs	r3, r0
   1025c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1025e:	1dfb      	adds	r3, r7, #7
   10260:	781b      	ldrb	r3, [r3, #0]
   10262:	b25b      	sxtb	r3, r3
   10264:	2b00      	cmp	r3, #0
   10266:	d116      	bne.n	10296 <chip_sleep+0xbe>
	if(reg & NBIT0)
   10268:	683b      	ldr	r3, [r7, #0]
   1026a:	2201      	movs	r2, #1
   1026c:	4013      	ands	r3, r2
   1026e:	d013      	beq.n	10298 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   10270:	683b      	ldr	r3, [r7, #0]
   10272:	2201      	movs	r2, #1
   10274:	4393      	bics	r3, r2
   10276:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   10278:	683b      	ldr	r3, [r7, #0]
   1027a:	1dfc      	adds	r4, r7, #7
   1027c:	0019      	movs	r1, r3
   1027e:	200b      	movs	r0, #11
   10280:	4b0a      	ldr	r3, [pc, #40]	; (102ac <chip_sleep+0xd4>)
   10282:	4798      	blx	r3
   10284:	0003      	movs	r3, r0
   10286:	7023      	strb	r3, [r4, #0]
   10288:	e006      	b.n	10298 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   1028a:	46c0      	nop			; (mov r8, r8)
   1028c:	e004      	b.n	10298 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   1028e:	46c0      	nop			; (mov r8, r8)
   10290:	e002      	b.n	10298 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   10292:	46c0      	nop			; (mov r8, r8)
   10294:	e000      	b.n	10298 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   10296:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   10298:	1dfb      	adds	r3, r7, #7
   1029a:	781b      	ldrb	r3, [r3, #0]
   1029c:	b25b      	sxtb	r3, r3
}
   1029e:	0018      	movs	r0, r3
   102a0:	46bd      	mov	sp, r7
   102a2:	b003      	add	sp, #12
   102a4:	bd90      	pop	{r4, r7, pc}
   102a6:	46c0      	nop			; (mov r8, r8)
   102a8:	000107e1 	.word	0x000107e1
   102ac:	00010805 	.word	0x00010805

000102b0 <chip_wake>:
sint8 chip_wake(void)
{
   102b0:	b590      	push	{r4, r7, lr}
   102b2:	b085      	sub	sp, #20
   102b4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   102b6:	230f      	movs	r3, #15
   102b8:	18fb      	adds	r3, r7, r3
   102ba:	2200      	movs	r2, #0
   102bc:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   102be:	2300      	movs	r3, #0
   102c0:	607b      	str	r3, [r7, #4]
   102c2:	2300      	movs	r3, #0
   102c4:	603b      	str	r3, [r7, #0]
   102c6:	2300      	movs	r3, #0
   102c8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   102ca:	230f      	movs	r3, #15
   102cc:	18fc      	adds	r4, r7, r3
   102ce:	1d3b      	adds	r3, r7, #4
   102d0:	0019      	movs	r1, r3
   102d2:	200b      	movs	r0, #11
   102d4:	4b4e      	ldr	r3, [pc, #312]	; (10410 <chip_wake+0x160>)
   102d6:	4798      	blx	r3
   102d8:	0003      	movs	r3, r0
   102da:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   102dc:	230f      	movs	r3, #15
   102de:	18fb      	adds	r3, r7, r3
   102e0:	781b      	ldrb	r3, [r3, #0]
   102e2:	b25b      	sxtb	r3, r3
   102e4:	2b00      	cmp	r3, #0
   102e6:	d000      	beq.n	102ea <chip_wake+0x3a>
   102e8:	e082      	b.n	103f0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   102ea:	687b      	ldr	r3, [r7, #4]
   102ec:	2201      	movs	r2, #1
   102ee:	4013      	ands	r3, r2
   102f0:	d111      	bne.n	10316 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   102f2:	687b      	ldr	r3, [r7, #4]
   102f4:	2201      	movs	r2, #1
   102f6:	4313      	orrs	r3, r2
   102f8:	220f      	movs	r2, #15
   102fa:	18bc      	adds	r4, r7, r2
   102fc:	0019      	movs	r1, r3
   102fe:	200b      	movs	r0, #11
   10300:	4b44      	ldr	r3, [pc, #272]	; (10414 <chip_wake+0x164>)
   10302:	4798      	blx	r3
   10304:	0003      	movs	r3, r0
   10306:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   10308:	230f      	movs	r3, #15
   1030a:	18fb      	adds	r3, r7, r3
   1030c:	781b      	ldrb	r3, [r3, #0]
   1030e:	b25b      	sxtb	r3, r3
   10310:	2b00      	cmp	r3, #0
   10312:	d000      	beq.n	10316 <chip_wake+0x66>
   10314:	e06e      	b.n	103f4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   10316:	230f      	movs	r3, #15
   10318:	18fc      	adds	r4, r7, r3
   1031a:	1d3b      	adds	r3, r7, #4
   1031c:	0019      	movs	r1, r3
   1031e:	2001      	movs	r0, #1
   10320:	4b3b      	ldr	r3, [pc, #236]	; (10410 <chip_wake+0x160>)
   10322:	4798      	blx	r3
   10324:	0003      	movs	r3, r0
   10326:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   10328:	230f      	movs	r3, #15
   1032a:	18fb      	adds	r3, r7, r3
   1032c:	781b      	ldrb	r3, [r3, #0]
   1032e:	b25b      	sxtb	r3, r3
   10330:	2b00      	cmp	r3, #0
   10332:	d161      	bne.n	103f8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   10334:	687b      	ldr	r3, [r7, #4]
   10336:	2202      	movs	r2, #2
   10338:	4013      	ands	r3, r2
   1033a:	d110      	bne.n	1035e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   1033c:	687b      	ldr	r3, [r7, #4]
   1033e:	2202      	movs	r2, #2
   10340:	4313      	orrs	r3, r2
   10342:	220f      	movs	r2, #15
   10344:	18bc      	adds	r4, r7, r2
   10346:	0019      	movs	r1, r3
   10348:	2001      	movs	r0, #1
   1034a:	4b32      	ldr	r3, [pc, #200]	; (10414 <chip_wake+0x164>)
   1034c:	4798      	blx	r3
   1034e:	0003      	movs	r3, r0
   10350:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   10352:	230f      	movs	r3, #15
   10354:	18fb      	adds	r3, r7, r3
   10356:	781b      	ldrb	r3, [r3, #0]
   10358:	b25b      	sxtb	r3, r3
   1035a:	2b00      	cmp	r3, #0
   1035c:	d14e      	bne.n	103fc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1035e:	230f      	movs	r3, #15
   10360:	18fc      	adds	r4, r7, r3
   10362:	003b      	movs	r3, r7
   10364:	0019      	movs	r1, r3
   10366:	200f      	movs	r0, #15
   10368:	4b29      	ldr	r3, [pc, #164]	; (10410 <chip_wake+0x160>)
   1036a:	4798      	blx	r3
   1036c:	0003      	movs	r3, r0
   1036e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   10370:	230f      	movs	r3, #15
   10372:	18fb      	adds	r3, r7, r3
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	b25b      	sxtb	r3, r3
   10378:	2b00      	cmp	r3, #0
   1037a:	d014      	beq.n	103a6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   1037c:	23a8      	movs	r3, #168	; 0xa8
   1037e:	005a      	lsls	r2, r3, #1
   10380:	4925      	ldr	r1, [pc, #148]	; (10418 <chip_wake+0x168>)
   10382:	4b26      	ldr	r3, [pc, #152]	; (1041c <chip_wake+0x16c>)
   10384:	0018      	movs	r0, r3
   10386:	4b26      	ldr	r3, [pc, #152]	; (10420 <chip_wake+0x170>)
   10388:	4798      	blx	r3
   1038a:	230f      	movs	r3, #15
   1038c:	18fb      	adds	r3, r7, r3
   1038e:	2100      	movs	r1, #0
   10390:	5659      	ldrsb	r1, [r3, r1]
   10392:	683a      	ldr	r2, [r7, #0]
   10394:	4b23      	ldr	r3, [pc, #140]	; (10424 <chip_wake+0x174>)
   10396:	0018      	movs	r0, r3
   10398:	4b21      	ldr	r3, [pc, #132]	; (10420 <chip_wake+0x170>)
   1039a:	4798      	blx	r3
   1039c:	4b22      	ldr	r3, [pc, #136]	; (10428 <chip_wake+0x178>)
   1039e:	0018      	movs	r0, r3
   103a0:	4b1f      	ldr	r3, [pc, #124]	; (10420 <chip_wake+0x170>)
   103a2:	4798      	blx	r3
			goto _WAKE_EXIT;
   103a4:	e02b      	b.n	103fe <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   103a6:	683b      	ldr	r3, [r7, #0]
   103a8:	2204      	movs	r2, #4
   103aa:	4013      	ands	r3, r2
   103ac:	d11c      	bne.n	103e8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   103ae:	2002      	movs	r0, #2
   103b0:	4b1e      	ldr	r3, [pc, #120]	; (1042c <chip_wake+0x17c>)
   103b2:	4798      	blx	r3
		trials++;
   103b4:	68bb      	ldr	r3, [r7, #8]
   103b6:	3301      	adds	r3, #1
   103b8:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   103ba:	68bb      	ldr	r3, [r7, #8]
   103bc:	2b04      	cmp	r3, #4
   103be:	d9ce      	bls.n	1035e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   103c0:	23ad      	movs	r3, #173	; 0xad
   103c2:	005a      	lsls	r2, r3, #1
   103c4:	4914      	ldr	r1, [pc, #80]	; (10418 <chip_wake+0x168>)
   103c6:	4b15      	ldr	r3, [pc, #84]	; (1041c <chip_wake+0x16c>)
   103c8:	0018      	movs	r0, r3
   103ca:	4b15      	ldr	r3, [pc, #84]	; (10420 <chip_wake+0x170>)
   103cc:	4798      	blx	r3
   103ce:	4b18      	ldr	r3, [pc, #96]	; (10430 <chip_wake+0x180>)
   103d0:	0018      	movs	r0, r3
   103d2:	4b13      	ldr	r3, [pc, #76]	; (10420 <chip_wake+0x170>)
   103d4:	4798      	blx	r3
   103d6:	4b14      	ldr	r3, [pc, #80]	; (10428 <chip_wake+0x178>)
   103d8:	0018      	movs	r0, r3
   103da:	4b11      	ldr	r3, [pc, #68]	; (10420 <chip_wake+0x170>)
   103dc:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   103de:	230f      	movs	r3, #15
   103e0:	18fb      	adds	r3, r7, r3
   103e2:	22fc      	movs	r2, #252	; 0xfc
   103e4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   103e6:	e00a      	b.n	103fe <chip_wake+0x14e>
			break;
   103e8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   103ea:	4b12      	ldr	r3, [pc, #72]	; (10434 <chip_wake+0x184>)
   103ec:	4798      	blx	r3
   103ee:	e006      	b.n	103fe <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   103f0:	46c0      	nop			; (mov r8, r8)
   103f2:	e004      	b.n	103fe <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   103f4:	46c0      	nop			; (mov r8, r8)
   103f6:	e002      	b.n	103fe <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   103f8:	46c0      	nop			; (mov r8, r8)
   103fa:	e000      	b.n	103fe <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   103fc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   103fe:	230f      	movs	r3, #15
   10400:	18fb      	adds	r3, r7, r3
   10402:	781b      	ldrb	r3, [r3, #0]
   10404:	b25b      	sxtb	r3, r3
}
   10406:	0018      	movs	r0, r3
   10408:	46bd      	mov	sp, r7
   1040a:	b005      	add	sp, #20
   1040c:	bd90      	pop	{r4, r7, pc}
   1040e:	46c0      	nop			; (mov r8, r8)
   10410:	000107e1 	.word	0x000107e1
   10414:	00010805 	.word	0x00010805
   10418:	0002790c 	.word	0x0002790c
   1041c:	00027880 	.word	0x00027880
   10420:	0000b9b9 	.word	0x0000b9b9
   10424:	00027894 	.word	0x00027894
   10428:	000278ac 	.word	0x000278ac
   1042c:	0000de71 	.word	0x0000de71
   10430:	000278b0 	.word	0x000278b0
   10434:	000107a1 	.word	0x000107a1

00010438 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   10438:	b580      	push	{r7, lr}
   1043a:	b088      	sub	sp, #32
   1043c:	af00      	add	r7, sp, #0
   1043e:	0002      	movs	r2, r0
   10440:	1dfb      	adds	r3, r7, #7
   10442:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   10444:	2313      	movs	r3, #19
   10446:	18fb      	adds	r3, r7, r3
   10448:	2200      	movs	r2, #0
   1044a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   1044c:	2300      	movs	r3, #0
   1044e:	61fb      	str	r3, [r7, #28]
   10450:	2300      	movs	r3, #0
   10452:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   10454:	2300      	movs	r3, #0
   10456:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   10458:	4b4a      	ldr	r3, [pc, #296]	; (10584 <wait_for_bootrom+0x14c>)
   1045a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   1045c:	2300      	movs	r3, #0
   1045e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   10460:	4b49      	ldr	r3, [pc, #292]	; (10588 <wait_for_bootrom+0x150>)
   10462:	0018      	movs	r0, r3
   10464:	4b49      	ldr	r3, [pc, #292]	; (1058c <wait_for_bootrom+0x154>)
   10466:	4798      	blx	r3
   10468:	0003      	movs	r3, r0
   1046a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   1046c:	69fb      	ldr	r3, [r7, #28]
   1046e:	2b00      	cmp	r3, #0
   10470:	db03      	blt.n	1047a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   10472:	2001      	movs	r0, #1
   10474:	4b46      	ldr	r3, [pc, #280]	; (10590 <wait_for_bootrom+0x158>)
   10476:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   10478:	e7f2      	b.n	10460 <wait_for_bootrom+0x28>
			break;
   1047a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   1047c:	4b45      	ldr	r3, [pc, #276]	; (10594 <wait_for_bootrom+0x15c>)
   1047e:	0018      	movs	r0, r3
   10480:	4b42      	ldr	r3, [pc, #264]	; (1058c <wait_for_bootrom+0x154>)
   10482:	4798      	blx	r3
   10484:	0003      	movs	r3, r0
   10486:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   10488:	69fb      	ldr	r3, [r7, #28]
   1048a:	2201      	movs	r2, #1
   1048c:	4013      	ands	r3, r2
   1048e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   10490:	69fb      	ldr	r3, [r7, #28]
   10492:	2b00      	cmp	r3, #0
   10494:	d112      	bne.n	104bc <wait_for_bootrom+0x84>
	{
		reg = 0;
   10496:	2300      	movs	r3, #0
   10498:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   1049a:	e00b      	b.n	104b4 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   1049c:	2001      	movs	r0, #1
   1049e:	4b3c      	ldr	r3, [pc, #240]	; (10590 <wait_for_bootrom+0x158>)
   104a0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   104a2:	4b3d      	ldr	r3, [pc, #244]	; (10598 <wait_for_bootrom+0x160>)
   104a4:	0018      	movs	r0, r3
   104a6:	4b39      	ldr	r3, [pc, #228]	; (1058c <wait_for_bootrom+0x154>)
   104a8:	4798      	blx	r3
   104aa:	0003      	movs	r3, r0
   104ac:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   104ae:	69bb      	ldr	r3, [r7, #24]
   104b0:	3301      	adds	r3, #1
   104b2:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   104b4:	69fb      	ldr	r3, [r7, #28]
   104b6:	4a39      	ldr	r2, [pc, #228]	; (1059c <wait_for_bootrom+0x164>)
   104b8:	4293      	cmp	r3, r2
   104ba:	d1ef      	bne.n	1049c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   104bc:	1dfb      	adds	r3, r7, #7
   104be:	781b      	ldrb	r3, [r3, #0]
   104c0:	2b02      	cmp	r3, #2
   104c2:	d10d      	bne.n	104e0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   104c4:	4a36      	ldr	r2, [pc, #216]	; (105a0 <wait_for_bootrom+0x168>)
   104c6:	4b37      	ldr	r3, [pc, #220]	; (105a4 <wait_for_bootrom+0x16c>)
   104c8:	0011      	movs	r1, r2
   104ca:	0018      	movs	r0, r3
   104cc:	4b36      	ldr	r3, [pc, #216]	; (105a8 <wait_for_bootrom+0x170>)
   104ce:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   104d0:	2380      	movs	r3, #128	; 0x80
   104d2:	035b      	lsls	r3, r3, #13
   104d4:	4a35      	ldr	r2, [pc, #212]	; (105ac <wait_for_bootrom+0x174>)
   104d6:	0019      	movs	r1, r3
   104d8:	0010      	movs	r0, r2
   104da:	4b33      	ldr	r3, [pc, #204]	; (105a8 <wait_for_bootrom+0x170>)
   104dc:	4798      	blx	r3
   104de:	e022      	b.n	10526 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   104e0:	1dfb      	adds	r3, r7, #7
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	2b03      	cmp	r3, #3
   104e6:	d10b      	bne.n	10500 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   104e8:	4a2d      	ldr	r2, [pc, #180]	; (105a0 <wait_for_bootrom+0x168>)
   104ea:	4b2e      	ldr	r3, [pc, #184]	; (105a4 <wait_for_bootrom+0x16c>)
   104ec:	0011      	movs	r1, r2
   104ee:	0018      	movs	r0, r3
   104f0:	4b2d      	ldr	r3, [pc, #180]	; (105a8 <wait_for_bootrom+0x170>)
   104f2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   104f4:	4b2d      	ldr	r3, [pc, #180]	; (105ac <wait_for_bootrom+0x174>)
   104f6:	2100      	movs	r1, #0
   104f8:	0018      	movs	r0, r3
   104fa:	4b2b      	ldr	r3, [pc, #172]	; (105a8 <wait_for_bootrom+0x170>)
   104fc:	4798      	blx	r3
   104fe:	e012      	b.n	10526 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   10500:	1dfb      	adds	r3, r7, #7
   10502:	781b      	ldrb	r3, [r3, #0]
   10504:	2b04      	cmp	r3, #4
   10506:	d108      	bne.n	1051a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   10508:	2380      	movs	r3, #128	; 0x80
   1050a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1050c:	68fb      	ldr	r3, [r7, #12]
   1050e:	4a27      	ldr	r2, [pc, #156]	; (105ac <wait_for_bootrom+0x174>)
   10510:	0019      	movs	r1, r3
   10512:	0010      	movs	r0, r2
   10514:	4b24      	ldr	r3, [pc, #144]	; (105a8 <wait_for_bootrom+0x170>)
   10516:	4798      	blx	r3
   10518:	e005      	b.n	10526 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1051a:	68fb      	ldr	r3, [r7, #12]
   1051c:	4a23      	ldr	r2, [pc, #140]	; (105ac <wait_for_bootrom+0x174>)
   1051e:	0019      	movs	r1, r3
   10520:	0010      	movs	r0, r2
   10522:	4b21      	ldr	r3, [pc, #132]	; (105a8 <wait_for_bootrom+0x170>)
   10524:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   10526:	4b22      	ldr	r3, [pc, #136]	; (105b0 <wait_for_bootrom+0x178>)
   10528:	4798      	blx	r3
   1052a:	0003      	movs	r3, r0
   1052c:	051b      	lsls	r3, r3, #20
   1052e:	0d1b      	lsrs	r3, r3, #20
   10530:	4a20      	ldr	r2, [pc, #128]	; (105b4 <wait_for_bootrom+0x17c>)
   10532:	4293      	cmp	r3, r2
   10534:	d906      	bls.n	10544 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   10536:	697b      	ldr	r3, [r7, #20]
   10538:	2202      	movs	r2, #2
   1053a:	4313      	orrs	r3, r2
   1053c:	0018      	movs	r0, r3
   1053e:	4b1e      	ldr	r3, [pc, #120]	; (105b8 <wait_for_bootrom+0x180>)
   10540:	4798      	blx	r3
   10542:	e003      	b.n	1054c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   10544:	697b      	ldr	r3, [r7, #20]
   10546:	0018      	movs	r0, r3
   10548:	4b1b      	ldr	r3, [pc, #108]	; (105b8 <wait_for_bootrom+0x180>)
   1054a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   1054c:	4b1b      	ldr	r3, [pc, #108]	; (105bc <wait_for_bootrom+0x184>)
   1054e:	0018      	movs	r0, r3
   10550:	4b1b      	ldr	r3, [pc, #108]	; (105c0 <wait_for_bootrom+0x188>)
   10552:	4798      	blx	r3
   10554:	68fa      	ldr	r2, [r7, #12]
   10556:	4b1b      	ldr	r3, [pc, #108]	; (105c4 <wait_for_bootrom+0x18c>)
   10558:	0011      	movs	r1, r2
   1055a:	0018      	movs	r0, r3
   1055c:	4b18      	ldr	r3, [pc, #96]	; (105c0 <wait_for_bootrom+0x188>)
   1055e:	4798      	blx	r3
   10560:	4b19      	ldr	r3, [pc, #100]	; (105c8 <wait_for_bootrom+0x190>)
   10562:	0018      	movs	r0, r3
   10564:	4b16      	ldr	r3, [pc, #88]	; (105c0 <wait_for_bootrom+0x188>)
   10566:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   10568:	4a18      	ldr	r2, [pc, #96]	; (105cc <wait_for_bootrom+0x194>)
   1056a:	4b0b      	ldr	r3, [pc, #44]	; (10598 <wait_for_bootrom+0x160>)
   1056c:	0011      	movs	r1, r2
   1056e:	0018      	movs	r0, r3
   10570:	4b0d      	ldr	r3, [pc, #52]	; (105a8 <wait_for_bootrom+0x170>)
   10572:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   10574:	2313      	movs	r3, #19
   10576:	18fb      	adds	r3, r7, r3
   10578:	781b      	ldrb	r3, [r3, #0]
   1057a:	b25b      	sxtb	r3, r3
}
   1057c:	0018      	movs	r0, r3
   1057e:	46bd      	mov	sp, r7
   10580:	b008      	add	sp, #32
   10582:	bd80      	pop	{r7, pc}
   10584:	13301354 	.word	0x13301354
   10588:	00001014 	.word	0x00001014
   1058c:	000107c1 	.word	0x000107c1
   10590:	0000de71 	.word	0x0000de71
   10594:	000207bc 	.word	0x000207bc
   10598:	000c000c 	.word	0x000c000c
   1059c:	10add09e 	.word	0x10add09e
   105a0:	3c1cd57d 	.word	0x3c1cd57d
   105a4:	000207ac 	.word	0x000207ac
   105a8:	00010805 	.word	0x00010805
   105ac:	0000108c 	.word	0x0000108c
   105b0:	000100e1 	.word	0x000100e1
   105b4:	0000039f 	.word	0x0000039f
   105b8:	0000ffb1 	.word	0x0000ffb1
   105bc:	000278cc 	.word	0x000278cc
   105c0:	0000b9b9 	.word	0x0000b9b9
   105c4:	000278d8 	.word	0x000278d8
   105c8:	000278ac 	.word	0x000278ac
   105cc:	ef522f61 	.word	0xef522f61

000105d0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   105d0:	b580      	push	{r7, lr}
   105d2:	b088      	sub	sp, #32
   105d4:	af00      	add	r7, sp, #0
   105d6:	0002      	movs	r2, r0
   105d8:	1dfb      	adds	r3, r7, #7
   105da:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   105dc:	231f      	movs	r3, #31
   105de:	18fb      	adds	r3, r7, r3
   105e0:	2200      	movs	r2, #0
   105e2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   105e4:	2300      	movs	r3, #0
   105e6:	61bb      	str	r3, [r7, #24]
   105e8:	2300      	movs	r3, #0
   105ea:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   105ec:	2301      	movs	r3, #1
   105ee:	425b      	negs	r3, r3
   105f0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   105f2:	4b1d      	ldr	r3, [pc, #116]	; (10668 <wait_for_firmware_start+0x98>)
   105f4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   105f6:	4b1d      	ldr	r3, [pc, #116]	; (1066c <wait_for_firmware_start+0x9c>)
   105f8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   105fa:	1dfb      	adds	r3, r7, #7
   105fc:	781b      	ldrb	r3, [r3, #0]
   105fe:	2b02      	cmp	r3, #2
   10600:	d003      	beq.n	1060a <wait_for_firmware_start+0x3a>
   10602:	1dfb      	adds	r3, r7, #7
   10604:	781b      	ldrb	r3, [r3, #0]
   10606:	2b03      	cmp	r3, #3
   10608:	d119      	bne.n	1063e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   1060a:	4b19      	ldr	r3, [pc, #100]	; (10670 <wait_for_firmware_start+0xa0>)
   1060c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   1060e:	4b19      	ldr	r3, [pc, #100]	; (10674 <wait_for_firmware_start+0xa4>)
   10610:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   10612:	e014      	b.n	1063e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   10614:	2002      	movs	r0, #2
   10616:	4b18      	ldr	r3, [pc, #96]	; (10678 <wait_for_firmware_start+0xa8>)
   10618:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   1061a:	68fb      	ldr	r3, [r7, #12]
   1061c:	0018      	movs	r0, r3
   1061e:	4b17      	ldr	r3, [pc, #92]	; (1067c <wait_for_firmware_start+0xac>)
   10620:	4798      	blx	r3
   10622:	0003      	movs	r3, r0
   10624:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   10626:	697b      	ldr	r3, [r7, #20]
   10628:	3301      	adds	r3, #1
   1062a:	617b      	str	r3, [r7, #20]
   1062c:	697a      	ldr	r2, [r7, #20]
   1062e:	693b      	ldr	r3, [r7, #16]
   10630:	429a      	cmp	r2, r3
   10632:	d304      	bcc.n	1063e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   10634:	231f      	movs	r3, #31
   10636:	18fb      	adds	r3, r7, r3
   10638:	22fb      	movs	r2, #251	; 0xfb
   1063a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   1063c:	e00c      	b.n	10658 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   1063e:	68ba      	ldr	r2, [r7, #8]
   10640:	69bb      	ldr	r3, [r7, #24]
   10642:	429a      	cmp	r2, r3
   10644:	d1e6      	bne.n	10614 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   10646:	68bb      	ldr	r3, [r7, #8]
   10648:	4a08      	ldr	r2, [pc, #32]	; (1066c <wait_for_firmware_start+0x9c>)
   1064a:	4293      	cmp	r3, r2
   1064c:	d104      	bne.n	10658 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   1064e:	4b06      	ldr	r3, [pc, #24]	; (10668 <wait_for_firmware_start+0x98>)
   10650:	2100      	movs	r1, #0
   10652:	0018      	movs	r0, r3
   10654:	4b0a      	ldr	r3, [pc, #40]	; (10680 <wait_for_firmware_start+0xb0>)
   10656:	4798      	blx	r3
	}
ERR:
	return ret;
   10658:	231f      	movs	r3, #31
   1065a:	18fb      	adds	r3, r7, r3
   1065c:	781b      	ldrb	r3, [r3, #0]
   1065e:	b25b      	sxtb	r3, r3
}
   10660:	0018      	movs	r0, r3
   10662:	46bd      	mov	sp, r7
   10664:	b008      	add	sp, #32
   10666:	bd80      	pop	{r7, pc}
   10668:	0000108c 	.word	0x0000108c
   1066c:	02532636 	.word	0x02532636
   10670:	000207ac 	.word	0x000207ac
   10674:	d75dc1c3 	.word	0xd75dc1c3
   10678:	0000de71 	.word	0x0000de71
   1067c:	000107c1 	.word	0x000107c1
   10680:	00010805 	.word	0x00010805

00010684 <chip_deinit>:

sint8 chip_deinit(void)
{
   10684:	b590      	push	{r4, r7, lr}
   10686:	b083      	sub	sp, #12
   10688:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   1068a:	2300      	movs	r3, #0
   1068c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   1068e:	1dfc      	adds	r4, r7, #7
   10690:	003a      	movs	r2, r7
   10692:	23a0      	movs	r3, #160	; 0xa0
   10694:	015b      	lsls	r3, r3, #5
   10696:	0011      	movs	r1, r2
   10698:	0018      	movs	r0, r3
   1069a:	4b20      	ldr	r3, [pc, #128]	; (1071c <chip_deinit+0x98>)
   1069c:	4798      	blx	r3
   1069e:	0003      	movs	r3, r0
   106a0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   106a2:	1dfb      	adds	r3, r7, #7
   106a4:	781b      	ldrb	r3, [r3, #0]
   106a6:	b25b      	sxtb	r3, r3
   106a8:	2b00      	cmp	r3, #0
   106aa:	d00e      	beq.n	106ca <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   106ac:	4a1c      	ldr	r2, [pc, #112]	; (10720 <chip_deinit+0x9c>)
   106ae:	491d      	ldr	r1, [pc, #116]	; (10724 <chip_deinit+0xa0>)
   106b0:	4b1d      	ldr	r3, [pc, #116]	; (10728 <chip_deinit+0xa4>)
   106b2:	0018      	movs	r0, r3
   106b4:	4b1d      	ldr	r3, [pc, #116]	; (1072c <chip_deinit+0xa8>)
   106b6:	4798      	blx	r3
   106b8:	4b1d      	ldr	r3, [pc, #116]	; (10730 <chip_deinit+0xac>)
   106ba:	0018      	movs	r0, r3
   106bc:	4b1b      	ldr	r3, [pc, #108]	; (1072c <chip_deinit+0xa8>)
   106be:	4798      	blx	r3
   106c0:	4b1c      	ldr	r3, [pc, #112]	; (10734 <chip_deinit+0xb0>)
   106c2:	0018      	movs	r0, r3
   106c4:	4b19      	ldr	r3, [pc, #100]	; (1072c <chip_deinit+0xa8>)
   106c6:	4798      	blx	r3
		goto ERR1;
   106c8:	e021      	b.n	1070e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   106ca:	683b      	ldr	r3, [r7, #0]
   106cc:	4a1a      	ldr	r2, [pc, #104]	; (10738 <chip_deinit+0xb4>)
   106ce:	4013      	ands	r3, r2
   106d0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   106d2:	683a      	ldr	r2, [r7, #0]
   106d4:	1dfc      	adds	r4, r7, #7
   106d6:	23a0      	movs	r3, #160	; 0xa0
   106d8:	015b      	lsls	r3, r3, #5
   106da:	0011      	movs	r1, r2
   106dc:	0018      	movs	r0, r3
   106de:	4b17      	ldr	r3, [pc, #92]	; (1073c <chip_deinit+0xb8>)
   106e0:	4798      	blx	r3
   106e2:	0003      	movs	r3, r0
   106e4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   106e6:	1dfb      	adds	r3, r7, #7
   106e8:	781b      	ldrb	r3, [r3, #0]
   106ea:	b25b      	sxtb	r3, r3
   106ec:	2b00      	cmp	r3, #0
   106ee:	d00e      	beq.n	1070e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   106f0:	4a13      	ldr	r2, [pc, #76]	; (10740 <chip_deinit+0xbc>)
   106f2:	490c      	ldr	r1, [pc, #48]	; (10724 <chip_deinit+0xa0>)
   106f4:	4b0c      	ldr	r3, [pc, #48]	; (10728 <chip_deinit+0xa4>)
   106f6:	0018      	movs	r0, r3
   106f8:	4b0c      	ldr	r3, [pc, #48]	; (1072c <chip_deinit+0xa8>)
   106fa:	4798      	blx	r3
   106fc:	4b0c      	ldr	r3, [pc, #48]	; (10730 <chip_deinit+0xac>)
   106fe:	0018      	movs	r0, r3
   10700:	4b0a      	ldr	r3, [pc, #40]	; (1072c <chip_deinit+0xa8>)
   10702:	4798      	blx	r3
   10704:	4b0b      	ldr	r3, [pc, #44]	; (10734 <chip_deinit+0xb0>)
   10706:	0018      	movs	r0, r3
   10708:	4b08      	ldr	r3, [pc, #32]	; (1072c <chip_deinit+0xa8>)
   1070a:	4798      	blx	r3
		goto ERR1;
   1070c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1070e:	1dfb      	adds	r3, r7, #7
   10710:	781b      	ldrb	r3, [r3, #0]
   10712:	b25b      	sxtb	r3, r3
}
   10714:	0018      	movs	r0, r3
   10716:	46bd      	mov	sp, r7
   10718:	b003      	add	sp, #12
   1071a:	bd90      	pop	{r4, r7, pc}
   1071c:	000107e1 	.word	0x000107e1
   10720:	00000201 	.word	0x00000201
   10724:	00027918 	.word	0x00027918
   10728:	00027880 	.word	0x00027880
   1072c:	0000b9b9 	.word	0x0000b9b9
   10730:	000278f0 	.word	0x000278f0
   10734:	000278ac 	.word	0x000278ac
   10738:	fffffbff 	.word	0xfffffbff
   1073c:	00010805 	.word	0x00010805
   10740:	00000207 	.word	0x00000207

00010744 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   10744:	b590      	push	{r4, r7, lr}
   10746:	b085      	sub	sp, #20
   10748:	af00      	add	r7, sp, #0
   1074a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   1074c:	230f      	movs	r3, #15
   1074e:	18fb      	adds	r3, r7, r3
   10750:	2200      	movs	r2, #0
   10752:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   10754:	230f      	movs	r3, #15
   10756:	18fc      	adds	r4, r7, r3
   10758:	687b      	ldr	r3, [r7, #4]
   1075a:	0018      	movs	r0, r3
   1075c:	4b05      	ldr	r3, [pc, #20]	; (10774 <nm_bus_iface_init+0x30>)
   1075e:	4798      	blx	r3
   10760:	0003      	movs	r3, r0
   10762:	7023      	strb	r3, [r4, #0]
	return ret;
   10764:	230f      	movs	r3, #15
   10766:	18fb      	adds	r3, r7, r3
   10768:	781b      	ldrb	r3, [r3, #0]
   1076a:	b25b      	sxtb	r3, r3
}
   1076c:	0018      	movs	r0, r3
   1076e:	46bd      	mov	sp, r7
   10770:	b005      	add	sp, #20
   10772:	bd90      	pop	{r4, r7, pc}
   10774:	0000e52d 	.word	0x0000e52d

00010778 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   10778:	b590      	push	{r4, r7, lr}
   1077a:	b083      	sub	sp, #12
   1077c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1077e:	1dfb      	adds	r3, r7, #7
   10780:	2200      	movs	r2, #0
   10782:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   10784:	1dfc      	adds	r4, r7, #7
   10786:	4b05      	ldr	r3, [pc, #20]	; (1079c <nm_bus_iface_deinit+0x24>)
   10788:	4798      	blx	r3
   1078a:	0003      	movs	r3, r0
   1078c:	7023      	strb	r3, [r4, #0]

	return ret;
   1078e:	1dfb      	adds	r3, r7, #7
   10790:	781b      	ldrb	r3, [r3, #0]
   10792:	b25b      	sxtb	r3, r3
}
   10794:	0018      	movs	r0, r3
   10796:	46bd      	mov	sp, r7
   10798:	b003      	add	sp, #12
   1079a:	bd90      	pop	{r4, r7, pc}
   1079c:	0000e6a5 	.word	0x0000e6a5

000107a0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   107a0:	b580      	push	{r7, lr}
   107a2:	b082      	sub	sp, #8
   107a4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   107a6:	1dfb      	adds	r3, r7, #7
   107a8:	2200      	movs	r2, #0
   107aa:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   107ac:	4b03      	ldr	r3, [pc, #12]	; (107bc <nm_bus_reset+0x1c>)
   107ae:	4798      	blx	r3
   107b0:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   107b2:	0018      	movs	r0, r3
   107b4:	46bd      	mov	sp, r7
   107b6:	b002      	add	sp, #8
   107b8:	bd80      	pop	{r7, pc}
   107ba:	46c0      	nop			; (mov r8, r8)
   107bc:	000125cd 	.word	0x000125cd

000107c0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   107c0:	b580      	push	{r7, lr}
   107c2:	b082      	sub	sp, #8
   107c4:	af00      	add	r7, sp, #0
   107c6:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   107c8:	687b      	ldr	r3, [r7, #4]
   107ca:	0018      	movs	r0, r3
   107cc:	4b03      	ldr	r3, [pc, #12]	; (107dc <nm_read_reg+0x1c>)
   107ce:	4798      	blx	r3
   107d0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   107d2:	0018      	movs	r0, r3
   107d4:	46bd      	mov	sp, r7
   107d6:	b002      	add	sp, #8
   107d8:	bd80      	pop	{r7, pc}
   107da:	46c0      	nop			; (mov r8, r8)
   107dc:	00012761 	.word	0x00012761

000107e0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   107e0:	b580      	push	{r7, lr}
   107e2:	b082      	sub	sp, #8
   107e4:	af00      	add	r7, sp, #0
   107e6:	6078      	str	r0, [r7, #4]
   107e8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   107ea:	683a      	ldr	r2, [r7, #0]
   107ec:	687b      	ldr	r3, [r7, #4]
   107ee:	0011      	movs	r1, r2
   107f0:	0018      	movs	r0, r3
   107f2:	4b03      	ldr	r3, [pc, #12]	; (10800 <nm_read_reg_with_ret+0x20>)
   107f4:	4798      	blx	r3
   107f6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   107f8:	0018      	movs	r0, r3
   107fa:	46bd      	mov	sp, r7
   107fc:	b002      	add	sp, #8
   107fe:	bd80      	pop	{r7, pc}
   10800:	00012785 	.word	0x00012785

00010804 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   10804:	b580      	push	{r7, lr}
   10806:	b082      	sub	sp, #8
   10808:	af00      	add	r7, sp, #0
   1080a:	6078      	str	r0, [r7, #4]
   1080c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   1080e:	683a      	ldr	r2, [r7, #0]
   10810:	687b      	ldr	r3, [r7, #4]
   10812:	0011      	movs	r1, r2
   10814:	0018      	movs	r0, r3
   10816:	4b03      	ldr	r3, [pc, #12]	; (10824 <nm_write_reg+0x20>)
   10818:	4798      	blx	r3
   1081a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   1081c:	0018      	movs	r0, r3
   1081e:	46bd      	mov	sp, r7
   10820:	b002      	add	sp, #8
   10822:	bd80      	pop	{r7, pc}
   10824:	000127d5 	.word	0x000127d5

00010828 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   10828:	b580      	push	{r7, lr}
   1082a:	b084      	sub	sp, #16
   1082c:	af00      	add	r7, sp, #0
   1082e:	60f8      	str	r0, [r7, #12]
   10830:	60b9      	str	r1, [r7, #8]
   10832:	1dbb      	adds	r3, r7, #6
   10834:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   10836:	1dbb      	adds	r3, r7, #6
   10838:	881a      	ldrh	r2, [r3, #0]
   1083a:	68b9      	ldr	r1, [r7, #8]
   1083c:	68fb      	ldr	r3, [r7, #12]
   1083e:	0018      	movs	r0, r3
   10840:	4b03      	ldr	r3, [pc, #12]	; (10850 <p_nm_read_block+0x28>)
   10842:	4798      	blx	r3
   10844:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   10846:	0018      	movs	r0, r3
   10848:	46bd      	mov	sp, r7
   1084a:	b004      	add	sp, #16
   1084c:	bd80      	pop	{r7, pc}
   1084e:	46c0      	nop			; (mov r8, r8)
   10850:	00012825 	.word	0x00012825

00010854 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   10854:	b580      	push	{r7, lr}
   10856:	b086      	sub	sp, #24
   10858:	af00      	add	r7, sp, #0
   1085a:	60f8      	str	r0, [r7, #12]
   1085c:	60b9      	str	r1, [r7, #8]
   1085e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   10860:	4b2d      	ldr	r3, [pc, #180]	; (10918 <nm_read_block+0xc4>)
   10862:	881a      	ldrh	r2, [r3, #0]
   10864:	2310      	movs	r3, #16
   10866:	18fb      	adds	r3, r7, r3
   10868:	3a08      	subs	r2, #8
   1086a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   1086c:	2300      	movs	r3, #0
   1086e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   10870:	2313      	movs	r3, #19
   10872:	18fb      	adds	r3, r7, r3
   10874:	2200      	movs	r2, #0
   10876:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   10878:	2310      	movs	r3, #16
   1087a:	18fb      	adds	r3, r7, r3
   1087c:	881a      	ldrh	r2, [r3, #0]
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	429a      	cmp	r2, r3
   10882:	d313      	bcc.n	108ac <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   10884:	68ba      	ldr	r2, [r7, #8]
   10886:	697b      	ldr	r3, [r7, #20]
   10888:	18d1      	adds	r1, r2, r3
   1088a:	687b      	ldr	r3, [r7, #4]
   1088c:	b29a      	uxth	r2, r3
   1088e:	68fb      	ldr	r3, [r7, #12]
   10890:	0018      	movs	r0, r3
   10892:	4b22      	ldr	r3, [pc, #136]	; (1091c <nm_read_block+0xc8>)
   10894:	4798      	blx	r3
   10896:	0003      	movs	r3, r0
   10898:	b2da      	uxtb	r2, r3
   1089a:	2313      	movs	r3, #19
   1089c:	18fb      	adds	r3, r7, r3
   1089e:	781b      	ldrb	r3, [r3, #0]
   108a0:	18d3      	adds	r3, r2, r3
   108a2:	b2da      	uxtb	r2, r3
   108a4:	2313      	movs	r3, #19
   108a6:	18fb      	adds	r3, r7, r3
   108a8:	701a      	strb	r2, [r3, #0]
			break;
   108aa:	e02d      	b.n	10908 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   108ac:	68ba      	ldr	r2, [r7, #8]
   108ae:	697b      	ldr	r3, [r7, #20]
   108b0:	18d1      	adds	r1, r2, r3
   108b2:	2310      	movs	r3, #16
   108b4:	18fb      	adds	r3, r7, r3
   108b6:	881a      	ldrh	r2, [r3, #0]
   108b8:	68fb      	ldr	r3, [r7, #12]
   108ba:	0018      	movs	r0, r3
   108bc:	4b17      	ldr	r3, [pc, #92]	; (1091c <nm_read_block+0xc8>)
   108be:	4798      	blx	r3
   108c0:	0003      	movs	r3, r0
   108c2:	b2da      	uxtb	r2, r3
   108c4:	2313      	movs	r3, #19
   108c6:	18fb      	adds	r3, r7, r3
   108c8:	781b      	ldrb	r3, [r3, #0]
   108ca:	18d3      	adds	r3, r2, r3
   108cc:	b2da      	uxtb	r2, r3
   108ce:	2313      	movs	r3, #19
   108d0:	18fb      	adds	r3, r7, r3
   108d2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   108d4:	2313      	movs	r3, #19
   108d6:	18fb      	adds	r3, r7, r3
   108d8:	781b      	ldrb	r3, [r3, #0]
   108da:	b25b      	sxtb	r3, r3
   108dc:	2b00      	cmp	r3, #0
   108de:	d112      	bne.n	10906 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   108e0:	2310      	movs	r3, #16
   108e2:	18fb      	adds	r3, r7, r3
   108e4:	881b      	ldrh	r3, [r3, #0]
   108e6:	687a      	ldr	r2, [r7, #4]
   108e8:	1ad3      	subs	r3, r2, r3
   108ea:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   108ec:	2310      	movs	r3, #16
   108ee:	18fb      	adds	r3, r7, r3
   108f0:	881b      	ldrh	r3, [r3, #0]
   108f2:	697a      	ldr	r2, [r7, #20]
   108f4:	18d3      	adds	r3, r2, r3
   108f6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   108f8:	2310      	movs	r3, #16
   108fa:	18fb      	adds	r3, r7, r3
   108fc:	881b      	ldrh	r3, [r3, #0]
   108fe:	68fa      	ldr	r2, [r7, #12]
   10900:	18d3      	adds	r3, r2, r3
   10902:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   10904:	e7b8      	b.n	10878 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   10906:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   10908:	2313      	movs	r3, #19
   1090a:	18fb      	adds	r3, r7, r3
   1090c:	781b      	ldrb	r3, [r3, #0]
   1090e:	b25b      	sxtb	r3, r3
}
   10910:	0018      	movs	r0, r3
   10912:	46bd      	mov	sp, r7
   10914:	b006      	add	sp, #24
   10916:	bd80      	pop	{r7, pc}
   10918:	20000124 	.word	0x20000124
   1091c:	00010829 	.word	0x00010829

00010920 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   10920:	b580      	push	{r7, lr}
   10922:	b084      	sub	sp, #16
   10924:	af00      	add	r7, sp, #0
   10926:	60f8      	str	r0, [r7, #12]
   10928:	60b9      	str	r1, [r7, #8]
   1092a:	1dbb      	adds	r3, r7, #6
   1092c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1092e:	1dbb      	adds	r3, r7, #6
   10930:	881a      	ldrh	r2, [r3, #0]
   10932:	68b9      	ldr	r1, [r7, #8]
   10934:	68fb      	ldr	r3, [r7, #12]
   10936:	0018      	movs	r0, r3
   10938:	4b03      	ldr	r3, [pc, #12]	; (10948 <p_nm_write_block+0x28>)
   1093a:	4798      	blx	r3
   1093c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   1093e:	0018      	movs	r0, r3
   10940:	46bd      	mov	sp, r7
   10942:	b004      	add	sp, #16
   10944:	bd80      	pop	{r7, pc}
   10946:	46c0      	nop			; (mov r8, r8)
   10948:	0001287d 	.word	0x0001287d

0001094c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1094c:	b580      	push	{r7, lr}
   1094e:	b086      	sub	sp, #24
   10950:	af00      	add	r7, sp, #0
   10952:	60f8      	str	r0, [r7, #12]
   10954:	60b9      	str	r1, [r7, #8]
   10956:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   10958:	4b2d      	ldr	r3, [pc, #180]	; (10a10 <nm_write_block+0xc4>)
   1095a:	881a      	ldrh	r2, [r3, #0]
   1095c:	2310      	movs	r3, #16
   1095e:	18fb      	adds	r3, r7, r3
   10960:	3a08      	subs	r2, #8
   10962:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   10964:	2300      	movs	r3, #0
   10966:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   10968:	2313      	movs	r3, #19
   1096a:	18fb      	adds	r3, r7, r3
   1096c:	2200      	movs	r2, #0
   1096e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   10970:	2310      	movs	r3, #16
   10972:	18fb      	adds	r3, r7, r3
   10974:	881a      	ldrh	r2, [r3, #0]
   10976:	687b      	ldr	r3, [r7, #4]
   10978:	429a      	cmp	r2, r3
   1097a:	d313      	bcc.n	109a4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1097c:	68ba      	ldr	r2, [r7, #8]
   1097e:	697b      	ldr	r3, [r7, #20]
   10980:	18d1      	adds	r1, r2, r3
   10982:	687b      	ldr	r3, [r7, #4]
   10984:	b29a      	uxth	r2, r3
   10986:	68fb      	ldr	r3, [r7, #12]
   10988:	0018      	movs	r0, r3
   1098a:	4b22      	ldr	r3, [pc, #136]	; (10a14 <nm_write_block+0xc8>)
   1098c:	4798      	blx	r3
   1098e:	0003      	movs	r3, r0
   10990:	b2da      	uxtb	r2, r3
   10992:	2313      	movs	r3, #19
   10994:	18fb      	adds	r3, r7, r3
   10996:	781b      	ldrb	r3, [r3, #0]
   10998:	18d3      	adds	r3, r2, r3
   1099a:	b2da      	uxtb	r2, r3
   1099c:	2313      	movs	r3, #19
   1099e:	18fb      	adds	r3, r7, r3
   109a0:	701a      	strb	r2, [r3, #0]
			break;
   109a2:	e02d      	b.n	10a00 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   109a4:	68ba      	ldr	r2, [r7, #8]
   109a6:	697b      	ldr	r3, [r7, #20]
   109a8:	18d1      	adds	r1, r2, r3
   109aa:	2310      	movs	r3, #16
   109ac:	18fb      	adds	r3, r7, r3
   109ae:	881a      	ldrh	r2, [r3, #0]
   109b0:	68fb      	ldr	r3, [r7, #12]
   109b2:	0018      	movs	r0, r3
   109b4:	4b17      	ldr	r3, [pc, #92]	; (10a14 <nm_write_block+0xc8>)
   109b6:	4798      	blx	r3
   109b8:	0003      	movs	r3, r0
   109ba:	b2da      	uxtb	r2, r3
   109bc:	2313      	movs	r3, #19
   109be:	18fb      	adds	r3, r7, r3
   109c0:	781b      	ldrb	r3, [r3, #0]
   109c2:	18d3      	adds	r3, r2, r3
   109c4:	b2da      	uxtb	r2, r3
   109c6:	2313      	movs	r3, #19
   109c8:	18fb      	adds	r3, r7, r3
   109ca:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   109cc:	2313      	movs	r3, #19
   109ce:	18fb      	adds	r3, r7, r3
   109d0:	781b      	ldrb	r3, [r3, #0]
   109d2:	b25b      	sxtb	r3, r3
   109d4:	2b00      	cmp	r3, #0
   109d6:	d112      	bne.n	109fe <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   109d8:	2310      	movs	r3, #16
   109da:	18fb      	adds	r3, r7, r3
   109dc:	881b      	ldrh	r3, [r3, #0]
   109de:	687a      	ldr	r2, [r7, #4]
   109e0:	1ad3      	subs	r3, r2, r3
   109e2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   109e4:	2310      	movs	r3, #16
   109e6:	18fb      	adds	r3, r7, r3
   109e8:	881b      	ldrh	r3, [r3, #0]
   109ea:	697a      	ldr	r2, [r7, #20]
   109ec:	18d3      	adds	r3, r2, r3
   109ee:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   109f0:	2310      	movs	r3, #16
   109f2:	18fb      	adds	r3, r7, r3
   109f4:	881b      	ldrh	r3, [r3, #0]
   109f6:	68fa      	ldr	r2, [r7, #12]
   109f8:	18d3      	adds	r3, r2, r3
   109fa:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   109fc:	e7b8      	b.n	10970 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   109fe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   10a00:	2313      	movs	r3, #19
   10a02:	18fb      	adds	r3, r7, r3
   10a04:	781b      	ldrb	r3, [r3, #0]
   10a06:	b25b      	sxtb	r3, r3
}
   10a08:	0018      	movs	r0, r3
   10a0a:	46bd      	mov	sp, r7
   10a0c:	b006      	add	sp, #24
   10a0e:	bd80      	pop	{r7, pc}
   10a10:	20000124 	.word	0x20000124
   10a14:	00010921 	.word	0x00010921

00010a18 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   10a18:	b590      	push	{r4, r7, lr}
   10a1a:	b089      	sub	sp, #36	; 0x24
   10a1c:	af00      	add	r7, sp, #0
   10a1e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   10a20:	2300      	movs	r3, #0
   10a22:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   10a24:	231f      	movs	r3, #31
   10a26:	18fb      	adds	r3, r7, r3
   10a28:	2200      	movs	r2, #0
   10a2a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   10a2c:	230c      	movs	r3, #12
   10a2e:	18fb      	adds	r3, r7, r3
   10a30:	0018      	movs	r0, r3
   10a32:	2308      	movs	r3, #8
   10a34:	001a      	movs	r2, r3
   10a36:	2100      	movs	r1, #0
   10a38:	4b64      	ldr	r3, [pc, #400]	; (10bcc <nm_get_firmware_full_info+0x1b4>)
   10a3a:	4798      	blx	r3
	if (pstrRev != NULL)
   10a3c:	687b      	ldr	r3, [r7, #4]
   10a3e:	2b00      	cmp	r3, #0
   10a40:	d100      	bne.n	10a44 <nm_get_firmware_full_info+0x2c>
   10a42:	e0ba      	b.n	10bba <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   10a44:	687b      	ldr	r3, [r7, #4]
   10a46:	2228      	movs	r2, #40	; 0x28
   10a48:	2100      	movs	r1, #0
   10a4a:	0018      	movs	r0, r3
   10a4c:	4b60      	ldr	r3, [pc, #384]	; (10bd0 <nm_get_firmware_full_info+0x1b8>)
   10a4e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   10a50:	231f      	movs	r3, #31
   10a52:	18fc      	adds	r4, r7, r3
   10a54:	2314      	movs	r3, #20
   10a56:	18fb      	adds	r3, r7, r3
   10a58:	4a5e      	ldr	r2, [pc, #376]	; (10bd4 <nm_get_firmware_full_info+0x1bc>)
   10a5a:	0019      	movs	r1, r3
   10a5c:	0010      	movs	r0, r2
   10a5e:	4b5e      	ldr	r3, [pc, #376]	; (10bd8 <nm_get_firmware_full_info+0x1c0>)
   10a60:	4798      	blx	r3
   10a62:	0003      	movs	r3, r0
   10a64:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   10a66:	231f      	movs	r3, #31
   10a68:	18fb      	adds	r3, r7, r3
   10a6a:	781b      	ldrb	r3, [r3, #0]
   10a6c:	b25b      	sxtb	r3, r3
   10a6e:	2b00      	cmp	r3, #0
   10a70:	d000      	beq.n	10a74 <nm_get_firmware_full_info+0x5c>
   10a72:	e0a2      	b.n	10bba <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   10a74:	697b      	ldr	r3, [r7, #20]
   10a76:	2b00      	cmp	r3, #0
   10a78:	d100      	bne.n	10a7c <nm_get_firmware_full_info+0x64>
   10a7a:	e09a      	b.n	10bb2 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   10a7c:	697b      	ldr	r3, [r7, #20]
   10a7e:	22c0      	movs	r2, #192	; 0xc0
   10a80:	0292      	lsls	r2, r2, #10
   10a82:	4313      	orrs	r3, r2
   10a84:	221f      	movs	r2, #31
   10a86:	18bc      	adds	r4, r7, r2
   10a88:	220c      	movs	r2, #12
   10a8a:	18b9      	adds	r1, r7, r2
   10a8c:	2208      	movs	r2, #8
   10a8e:	0018      	movs	r0, r3
   10a90:	4b52      	ldr	r3, [pc, #328]	; (10bdc <nm_get_firmware_full_info+0x1c4>)
   10a92:	4798      	blx	r3
   10a94:	0003      	movs	r3, r0
   10a96:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   10a98:	231f      	movs	r3, #31
   10a9a:	18fb      	adds	r3, r7, r3
   10a9c:	781b      	ldrb	r3, [r3, #0]
   10a9e:	b25b      	sxtb	r3, r3
   10aa0:	2b00      	cmp	r3, #0
   10aa2:	d000      	beq.n	10aa6 <nm_get_firmware_full_info+0x8e>
   10aa4:	e089      	b.n	10bba <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   10aa6:	230c      	movs	r3, #12
   10aa8:	18fb      	adds	r3, r7, r3
   10aaa:	685b      	ldr	r3, [r3, #4]
   10aac:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   10aae:	697b      	ldr	r3, [r7, #20]
   10ab0:	041b      	lsls	r3, r3, #16
   10ab2:	0c1b      	lsrs	r3, r3, #16
   10ab4:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   10ab6:	697b      	ldr	r3, [r7, #20]
   10ab8:	2b00      	cmp	r3, #0
   10aba:	d100      	bne.n	10abe <nm_get_firmware_full_info+0xa6>
   10abc:	e074      	b.n	10ba8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   10abe:	697b      	ldr	r3, [r7, #20]
   10ac0:	22c0      	movs	r2, #192	; 0xc0
   10ac2:	0292      	lsls	r2, r2, #10
   10ac4:	4313      	orrs	r3, r2
   10ac6:	221f      	movs	r2, #31
   10ac8:	18bc      	adds	r4, r7, r2
   10aca:	6879      	ldr	r1, [r7, #4]
   10acc:	2228      	movs	r2, #40	; 0x28
   10ace:	0018      	movs	r0, r3
   10ad0:	4b42      	ldr	r3, [pc, #264]	; (10bdc <nm_get_firmware_full_info+0x1c4>)
   10ad2:	4798      	blx	r3
   10ad4:	0003      	movs	r3, r0
   10ad6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   10ad8:	231f      	movs	r3, #31
   10ada:	18fb      	adds	r3, r7, r3
   10adc:	781b      	ldrb	r3, [r3, #0]
   10ade:	b25b      	sxtb	r3, r3
   10ae0:	2b00      	cmp	r3, #0
   10ae2:	d16a      	bne.n	10bba <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   10ae4:	687b      	ldr	r3, [r7, #4]
   10ae6:	791b      	ldrb	r3, [r3, #4]
   10ae8:	021b      	lsls	r3, r3, #8
   10aea:	b21a      	sxth	r2, r3
   10aec:	687b      	ldr	r3, [r7, #4]
   10aee:	795b      	ldrb	r3, [r3, #5]
   10af0:	011b      	lsls	r3, r3, #4
   10af2:	b21b      	sxth	r3, r3
   10af4:	21ff      	movs	r1, #255	; 0xff
   10af6:	400b      	ands	r3, r1
   10af8:	b21b      	sxth	r3, r3
   10afa:	4313      	orrs	r3, r2
   10afc:	b21a      	sxth	r2, r3
   10afe:	687b      	ldr	r3, [r7, #4]
   10b00:	799b      	ldrb	r3, [r3, #6]
   10b02:	b21b      	sxth	r3, r3
   10b04:	210f      	movs	r1, #15
   10b06:	400b      	ands	r3, r1
   10b08:	b21b      	sxth	r3, r3
   10b0a:	4313      	orrs	r3, r2
   10b0c:	b21a      	sxth	r2, r3
   10b0e:	231c      	movs	r3, #28
   10b10:	18fb      	adds	r3, r7, r3
   10b12:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   10b14:	231a      	movs	r3, #26
   10b16:	18fb      	adds	r3, r7, r3
   10b18:	4a31      	ldr	r2, [pc, #196]	; (10be0 <nm_get_firmware_full_info+0x1c8>)
   10b1a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   10b1c:	687b      	ldr	r3, [r7, #4]
   10b1e:	79db      	ldrb	r3, [r3, #7]
   10b20:	021b      	lsls	r3, r3, #8
   10b22:	b21a      	sxth	r2, r3
   10b24:	687b      	ldr	r3, [r7, #4]
   10b26:	7a1b      	ldrb	r3, [r3, #8]
   10b28:	011b      	lsls	r3, r3, #4
   10b2a:	b21b      	sxth	r3, r3
   10b2c:	21ff      	movs	r1, #255	; 0xff
   10b2e:	400b      	ands	r3, r1
   10b30:	b21b      	sxth	r3, r3
   10b32:	4313      	orrs	r3, r2
   10b34:	b21a      	sxth	r2, r3
   10b36:	687b      	ldr	r3, [r7, #4]
   10b38:	7a5b      	ldrb	r3, [r3, #9]
   10b3a:	b21b      	sxth	r3, r3
   10b3c:	210f      	movs	r1, #15
   10b3e:	400b      	ands	r3, r1
   10b40:	b21b      	sxth	r3, r3
   10b42:	4313      	orrs	r3, r2
   10b44:	b21a      	sxth	r2, r3
   10b46:	2318      	movs	r3, #24
   10b48:	18fb      	adds	r3, r7, r3
   10b4a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   10b4c:	231c      	movs	r3, #28
   10b4e:	18fb      	adds	r3, r7, r3
   10b50:	881b      	ldrh	r3, [r3, #0]
   10b52:	2b00      	cmp	r3, #0
   10b54:	d009      	beq.n	10b6a <nm_get_firmware_full_info+0x152>
   10b56:	2318      	movs	r3, #24
   10b58:	18fb      	adds	r3, r7, r3
   10b5a:	881b      	ldrh	r3, [r3, #0]
   10b5c:	2b00      	cmp	r3, #0
   10b5e:	d004      	beq.n	10b6a <nm_get_firmware_full_info+0x152>
   10b60:	2318      	movs	r3, #24
   10b62:	18fb      	adds	r3, r7, r3
   10b64:	881b      	ldrh	r3, [r3, #0]
   10b66:	2b00      	cmp	r3, #0
   10b68:	d104      	bne.n	10b74 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   10b6a:	231f      	movs	r3, #31
   10b6c:	18fb      	adds	r3, r7, r3
   10b6e:	22f4      	movs	r2, #244	; 0xf4
   10b70:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   10b72:	e022      	b.n	10bba <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   10b74:	231a      	movs	r3, #26
   10b76:	18fa      	adds	r2, r7, r3
   10b78:	2318      	movs	r3, #24
   10b7a:	18fb      	adds	r3, r7, r3
   10b7c:	8812      	ldrh	r2, [r2, #0]
   10b7e:	881b      	ldrh	r3, [r3, #0]
   10b80:	429a      	cmp	r2, r3
   10b82:	d204      	bcs.n	10b8e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   10b84:	231f      	movs	r3, #31
   10b86:	18fb      	adds	r3, r7, r3
   10b88:	22f3      	movs	r2, #243	; 0xf3
   10b8a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   10b8c:	e015      	b.n	10bba <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   10b8e:	231a      	movs	r3, #26
   10b90:	18fa      	adds	r2, r7, r3
   10b92:	231c      	movs	r3, #28
   10b94:	18fb      	adds	r3, r7, r3
   10b96:	8812      	ldrh	r2, [r2, #0]
   10b98:	881b      	ldrh	r3, [r3, #0]
   10b9a:	429a      	cmp	r2, r3
   10b9c:	d90d      	bls.n	10bba <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   10b9e:	231f      	movs	r3, #31
   10ba0:	18fb      	adds	r3, r7, r3
   10ba2:	22f3      	movs	r2, #243	; 0xf3
   10ba4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   10ba6:	e008      	b.n	10bba <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   10ba8:	231f      	movs	r3, #31
   10baa:	18fb      	adds	r3, r7, r3
   10bac:	22f4      	movs	r2, #244	; 0xf4
   10bae:	701a      	strb	r2, [r3, #0]
   10bb0:	e003      	b.n	10bba <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   10bb2:	231f      	movs	r3, #31
   10bb4:	18fb      	adds	r3, r7, r3
   10bb6:	22f4      	movs	r2, #244	; 0xf4
   10bb8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   10bba:	231f      	movs	r3, #31
   10bbc:	18fb      	adds	r3, r7, r3
   10bbe:	781b      	ldrb	r3, [r3, #0]
   10bc0:	b25b      	sxtb	r3, r3
}
   10bc2:	0018      	movs	r0, r3
   10bc4:	46bd      	mov	sp, r7
   10bc6:	b009      	add	sp, #36	; 0x24
   10bc8:	bd90      	pop	{r4, r7, pc}
   10bca:	46c0      	nop			; (mov r8, r8)
   10bcc:	00022dbb 	.word	0x00022dbb
   10bd0:	0000e751 	.word	0x0000e751
   10bd4:	000c0008 	.word	0x000c0008
   10bd8:	000107e1 	.word	0x000107e1
   10bdc:	00010855 	.word	0x00010855
   10be0:	00001354 	.word	0x00001354

00010be4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   10be4:	b590      	push	{r4, r7, lr}
   10be6:	b085      	sub	sp, #20
   10be8:	af00      	add	r7, sp, #0
   10bea:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   10bec:	230f      	movs	r3, #15
   10bee:	18fb      	adds	r3, r7, r3
   10bf0:	2200      	movs	r2, #0
   10bf2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   10bf4:	687b      	ldr	r3, [r7, #4]
   10bf6:	2b00      	cmp	r3, #0
   10bf8:	d013      	beq.n	10c22 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   10bfa:	230e      	movs	r3, #14
   10bfc:	18fb      	adds	r3, r7, r3
   10bfe:	687a      	ldr	r2, [r7, #4]
   10c00:	7812      	ldrb	r2, [r2, #0]
   10c02:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   10c04:	230e      	movs	r3, #14
   10c06:	18fb      	adds	r3, r7, r3
   10c08:	781b      	ldrb	r3, [r3, #0]
   10c0a:	2b00      	cmp	r3, #0
   10c0c:	d004      	beq.n	10c18 <nm_drv_init+0x34>
   10c0e:	230e      	movs	r3, #14
   10c10:	18fb      	adds	r3, r7, r3
   10c12:	781b      	ldrb	r3, [r3, #0]
   10c14:	2b04      	cmp	r3, #4
   10c16:	d908      	bls.n	10c2a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   10c18:	230e      	movs	r3, #14
   10c1a:	18fb      	adds	r3, r7, r3
   10c1c:	2201      	movs	r2, #1
   10c1e:	701a      	strb	r2, [r3, #0]
   10c20:	e003      	b.n	10c2a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   10c22:	230e      	movs	r3, #14
   10c24:	18fb      	adds	r3, r7, r3
   10c26:	2201      	movs	r2, #1
   10c28:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   10c2a:	230f      	movs	r3, #15
   10c2c:	18fc      	adds	r4, r7, r3
   10c2e:	2000      	movs	r0, #0
   10c30:	4b41      	ldr	r3, [pc, #260]	; (10d38 <nm_drv_init+0x154>)
   10c32:	4798      	blx	r3
   10c34:	0003      	movs	r3, r0
   10c36:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10c38:	230f      	movs	r3, #15
   10c3a:	18fb      	adds	r3, r7, r3
   10c3c:	781b      	ldrb	r3, [r3, #0]
   10c3e:	b25b      	sxtb	r3, r3
   10c40:	2b00      	cmp	r3, #0
   10c42:	d00f      	beq.n	10c64 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   10c44:	2390      	movs	r3, #144	; 0x90
   10c46:	005a      	lsls	r2, r3, #1
   10c48:	493c      	ldr	r1, [pc, #240]	; (10d3c <nm_drv_init+0x158>)
   10c4a:	4b3d      	ldr	r3, [pc, #244]	; (10d40 <nm_drv_init+0x15c>)
   10c4c:	0018      	movs	r0, r3
   10c4e:	4b3d      	ldr	r3, [pc, #244]	; (10d44 <nm_drv_init+0x160>)
   10c50:	4798      	blx	r3
   10c52:	4b3d      	ldr	r3, [pc, #244]	; (10d48 <nm_drv_init+0x164>)
   10c54:	0018      	movs	r0, r3
   10c56:	4b3b      	ldr	r3, [pc, #236]	; (10d44 <nm_drv_init+0x160>)
   10c58:	4798      	blx	r3
   10c5a:	4b3c      	ldr	r3, [pc, #240]	; (10d4c <nm_drv_init+0x168>)
   10c5c:	0018      	movs	r0, r3
   10c5e:	4b39      	ldr	r3, [pc, #228]	; (10d44 <nm_drv_init+0x160>)
   10c60:	4798      	blx	r3
		goto ERR1;
   10c62:	e061      	b.n	10d28 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   10c64:	4b3a      	ldr	r3, [pc, #232]	; (10d50 <nm_drv_init+0x16c>)
   10c66:	0018      	movs	r0, r3
   10c68:	4b36      	ldr	r3, [pc, #216]	; (10d44 <nm_drv_init+0x160>)
   10c6a:	4798      	blx	r3
   10c6c:	4b39      	ldr	r3, [pc, #228]	; (10d54 <nm_drv_init+0x170>)
   10c6e:	4798      	blx	r3
   10c70:	0002      	movs	r2, r0
   10c72:	4b39      	ldr	r3, [pc, #228]	; (10d58 <nm_drv_init+0x174>)
   10c74:	0011      	movs	r1, r2
   10c76:	0018      	movs	r0, r3
   10c78:	4b32      	ldr	r3, [pc, #200]	; (10d44 <nm_drv_init+0x160>)
   10c7a:	4798      	blx	r3
   10c7c:	4b33      	ldr	r3, [pc, #204]	; (10d4c <nm_drv_init+0x168>)
   10c7e:	0018      	movs	r0, r3
   10c80:	4b30      	ldr	r3, [pc, #192]	; (10d44 <nm_drv_init+0x160>)
   10c82:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   10c84:	4b35      	ldr	r3, [pc, #212]	; (10d5c <nm_drv_init+0x178>)
   10c86:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   10c88:	230f      	movs	r3, #15
   10c8a:	18fc      	adds	r4, r7, r3
   10c8c:	230e      	movs	r3, #14
   10c8e:	18fb      	adds	r3, r7, r3
   10c90:	781b      	ldrb	r3, [r3, #0]
   10c92:	0018      	movs	r0, r3
   10c94:	4b32      	ldr	r3, [pc, #200]	; (10d60 <nm_drv_init+0x17c>)
   10c96:	4798      	blx	r3
   10c98:	0003      	movs	r3, r0
   10c9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10c9c:	230f      	movs	r3, #15
   10c9e:	18fb      	adds	r3, r7, r3
   10ca0:	781b      	ldrb	r3, [r3, #0]
   10ca2:	b25b      	sxtb	r3, r3
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	d13a      	bne.n	10d1e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   10ca8:	230f      	movs	r3, #15
   10caa:	18fc      	adds	r4, r7, r3
   10cac:	230e      	movs	r3, #14
   10cae:	18fb      	adds	r3, r7, r3
   10cb0:	781b      	ldrb	r3, [r3, #0]
   10cb2:	0018      	movs	r0, r3
   10cb4:	4b2b      	ldr	r3, [pc, #172]	; (10d64 <nm_drv_init+0x180>)
   10cb6:	4798      	blx	r3
   10cb8:	0003      	movs	r3, r0
   10cba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10cbc:	230f      	movs	r3, #15
   10cbe:	18fb      	adds	r3, r7, r3
   10cc0:	781b      	ldrb	r3, [r3, #0]
   10cc2:	b25b      	sxtb	r3, r3
   10cc4:	2b00      	cmp	r3, #0
   10cc6:	d12c      	bne.n	10d22 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   10cc8:	230e      	movs	r3, #14
   10cca:	18fb      	adds	r3, r7, r3
   10ccc:	781b      	ldrb	r3, [r3, #0]
   10cce:	2b02      	cmp	r3, #2
   10cd0:	d02a      	beq.n	10d28 <nm_drv_init+0x144>
   10cd2:	230e      	movs	r3, #14
   10cd4:	18fb      	adds	r3, r7, r3
   10cd6:	781b      	ldrb	r3, [r3, #0]
   10cd8:	2b03      	cmp	r3, #3
   10cda:	d025      	beq.n	10d28 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   10cdc:	230f      	movs	r3, #15
   10cde:	18fc      	adds	r4, r7, r3
   10ce0:	4b21      	ldr	r3, [pc, #132]	; (10d68 <nm_drv_init+0x184>)
   10ce2:	4798      	blx	r3
   10ce4:	0003      	movs	r3, r0
   10ce6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10ce8:	230f      	movs	r3, #15
   10cea:	18fb      	adds	r3, r7, r3
   10cec:	781b      	ldrb	r3, [r3, #0]
   10cee:	b25b      	sxtb	r3, r3
   10cf0:	2b00      	cmp	r3, #0
   10cf2:	d00f      	beq.n	10d14 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   10cf4:	23a7      	movs	r3, #167	; 0xa7
   10cf6:	005a      	lsls	r2, r3, #1
   10cf8:	4910      	ldr	r1, [pc, #64]	; (10d3c <nm_drv_init+0x158>)
   10cfa:	4b11      	ldr	r3, [pc, #68]	; (10d40 <nm_drv_init+0x15c>)
   10cfc:	0018      	movs	r0, r3
   10cfe:	4b11      	ldr	r3, [pc, #68]	; (10d44 <nm_drv_init+0x160>)
   10d00:	4798      	blx	r3
   10d02:	4b1a      	ldr	r3, [pc, #104]	; (10d6c <nm_drv_init+0x188>)
   10d04:	0018      	movs	r0, r3
   10d06:	4b0f      	ldr	r3, [pc, #60]	; (10d44 <nm_drv_init+0x160>)
   10d08:	4798      	blx	r3
   10d0a:	4b10      	ldr	r3, [pc, #64]	; (10d4c <nm_drv_init+0x168>)
   10d0c:	0018      	movs	r0, r3
   10d0e:	4b0d      	ldr	r3, [pc, #52]	; (10d44 <nm_drv_init+0x160>)
   10d10:	4798      	blx	r3
		goto ERR2;
   10d12:	e007      	b.n	10d24 <nm_drv_init+0x140>
	}
	return ret;
   10d14:	230f      	movs	r3, #15
   10d16:	18fb      	adds	r3, r7, r3
   10d18:	781b      	ldrb	r3, [r3, #0]
   10d1a:	b25b      	sxtb	r3, r3
   10d1c:	e008      	b.n	10d30 <nm_drv_init+0x14c>
		goto ERR2;
   10d1e:	46c0      	nop			; (mov r8, r8)
   10d20:	e000      	b.n	10d24 <nm_drv_init+0x140>
		goto ERR2;
   10d22:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   10d24:	4b12      	ldr	r3, [pc, #72]	; (10d70 <nm_drv_init+0x18c>)
   10d26:	4798      	blx	r3
ERR1:
	return ret;
   10d28:	230f      	movs	r3, #15
   10d2a:	18fb      	adds	r3, r7, r3
   10d2c:	781b      	ldrb	r3, [r3, #0]
   10d2e:	b25b      	sxtb	r3, r3
}
   10d30:	0018      	movs	r0, r3
   10d32:	46bd      	mov	sp, r7
   10d34:	b005      	add	sp, #20
   10d36:	bd90      	pop	{r4, r7, pc}
   10d38:	00010745 	.word	0x00010745
   10d3c:	000279f4 	.word	0x000279f4
   10d40:	00027924 	.word	0x00027924
   10d44:	0000b9b9 	.word	0x0000b9b9
   10d48:	00027938 	.word	0x00027938
   10d4c:	00027954 	.word	0x00027954
   10d50:	00027958 	.word	0x00027958
   10d54:	000100e1 	.word	0x000100e1
   10d58:	00027964 	.word	0x00027964
   10d5c:	000125fd 	.word	0x000125fd
   10d60:	00010439 	.word	0x00010439
   10d64:	000105d1 	.word	0x000105d1
   10d68:	0001002d 	.word	0x0001002d
   10d6c:	00027974 	.word	0x00027974
   10d70:	00010779 	.word	0x00010779

00010d74 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   10d74:	b590      	push	{r4, r7, lr}
   10d76:	b085      	sub	sp, #20
   10d78:	af00      	add	r7, sp, #0
   10d7a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   10d7c:	230f      	movs	r3, #15
   10d7e:	18fc      	adds	r4, r7, r3
   10d80:	4b2e      	ldr	r3, [pc, #184]	; (10e3c <nm_drv_deinit+0xc8>)
   10d82:	4798      	blx	r3
   10d84:	0003      	movs	r3, r0
   10d86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10d88:	230f      	movs	r3, #15
   10d8a:	18fb      	adds	r3, r7, r3
   10d8c:	781b      	ldrb	r3, [r3, #0]
   10d8e:	b25b      	sxtb	r3, r3
   10d90:	2b00      	cmp	r3, #0
   10d92:	d010      	beq.n	10db6 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   10d94:	2366      	movs	r3, #102	; 0x66
   10d96:	33ff      	adds	r3, #255	; 0xff
   10d98:	001a      	movs	r2, r3
   10d9a:	4929      	ldr	r1, [pc, #164]	; (10e40 <nm_drv_deinit+0xcc>)
   10d9c:	4b29      	ldr	r3, [pc, #164]	; (10e44 <nm_drv_deinit+0xd0>)
   10d9e:	0018      	movs	r0, r3
   10da0:	4b29      	ldr	r3, [pc, #164]	; (10e48 <nm_drv_deinit+0xd4>)
   10da2:	4798      	blx	r3
   10da4:	4b29      	ldr	r3, [pc, #164]	; (10e4c <nm_drv_deinit+0xd8>)
   10da6:	0018      	movs	r0, r3
   10da8:	4b27      	ldr	r3, [pc, #156]	; (10e48 <nm_drv_deinit+0xd4>)
   10daa:	4798      	blx	r3
   10dac:	4b28      	ldr	r3, [pc, #160]	; (10e50 <nm_drv_deinit+0xdc>)
   10dae:	0018      	movs	r0, r3
   10db0:	4b25      	ldr	r3, [pc, #148]	; (10e48 <nm_drv_deinit+0xd4>)
   10db2:	4798      	blx	r3
		goto ERR1;
   10db4:	e03a      	b.n	10e2c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   10db6:	230f      	movs	r3, #15
   10db8:	18fc      	adds	r4, r7, r3
   10dba:	2000      	movs	r0, #0
   10dbc:	4b25      	ldr	r3, [pc, #148]	; (10e54 <nm_drv_deinit+0xe0>)
   10dbe:	4798      	blx	r3
   10dc0:	0003      	movs	r3, r0
   10dc2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10dc4:	230f      	movs	r3, #15
   10dc6:	18fb      	adds	r3, r7, r3
   10dc8:	781b      	ldrb	r3, [r3, #0]
   10dca:	b25b      	sxtb	r3, r3
   10dcc:	2b00      	cmp	r3, #0
   10dce:	d00f      	beq.n	10df0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   10dd0:	23b6      	movs	r3, #182	; 0xb6
   10dd2:	005a      	lsls	r2, r3, #1
   10dd4:	491a      	ldr	r1, [pc, #104]	; (10e40 <nm_drv_deinit+0xcc>)
   10dd6:	4b1b      	ldr	r3, [pc, #108]	; (10e44 <nm_drv_deinit+0xd0>)
   10dd8:	0018      	movs	r0, r3
   10dda:	4b1b      	ldr	r3, [pc, #108]	; (10e48 <nm_drv_deinit+0xd4>)
   10ddc:	4798      	blx	r3
   10dde:	4b1e      	ldr	r3, [pc, #120]	; (10e58 <nm_drv_deinit+0xe4>)
   10de0:	0018      	movs	r0, r3
   10de2:	4b19      	ldr	r3, [pc, #100]	; (10e48 <nm_drv_deinit+0xd4>)
   10de4:	4798      	blx	r3
   10de6:	4b1a      	ldr	r3, [pc, #104]	; (10e50 <nm_drv_deinit+0xdc>)
   10de8:	0018      	movs	r0, r3
   10dea:	4b17      	ldr	r3, [pc, #92]	; (10e48 <nm_drv_deinit+0xd4>)
   10dec:	4798      	blx	r3
		goto ERR1;
   10dee:	e01d      	b.n	10e2c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   10df0:	230f      	movs	r3, #15
   10df2:	18fc      	adds	r4, r7, r3
   10df4:	4b19      	ldr	r3, [pc, #100]	; (10e5c <nm_drv_deinit+0xe8>)
   10df6:	4798      	blx	r3
   10df8:	0003      	movs	r3, r0
   10dfa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10dfc:	230f      	movs	r3, #15
   10dfe:	18fb      	adds	r3, r7, r3
   10e00:	781b      	ldrb	r3, [r3, #0]
   10e02:	b25b      	sxtb	r3, r3
   10e04:	2b00      	cmp	r3, #0
   10e06:	d00f      	beq.n	10e28 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   10e08:	23b9      	movs	r3, #185	; 0xb9
   10e0a:	005a      	lsls	r2, r3, #1
   10e0c:	490c      	ldr	r1, [pc, #48]	; (10e40 <nm_drv_deinit+0xcc>)
   10e0e:	4b0d      	ldr	r3, [pc, #52]	; (10e44 <nm_drv_deinit+0xd0>)
   10e10:	0018      	movs	r0, r3
   10e12:	4b0d      	ldr	r3, [pc, #52]	; (10e48 <nm_drv_deinit+0xd4>)
   10e14:	4798      	blx	r3
   10e16:	4b12      	ldr	r3, [pc, #72]	; (10e60 <nm_drv_deinit+0xec>)
   10e18:	0018      	movs	r0, r3
   10e1a:	4b0b      	ldr	r3, [pc, #44]	; (10e48 <nm_drv_deinit+0xd4>)
   10e1c:	4798      	blx	r3
   10e1e:	4b0c      	ldr	r3, [pc, #48]	; (10e50 <nm_drv_deinit+0xdc>)
   10e20:	0018      	movs	r0, r3
   10e22:	4b09      	ldr	r3, [pc, #36]	; (10e48 <nm_drv_deinit+0xd4>)
   10e24:	4798      	blx	r3
		goto ERR1;
   10e26:	e001      	b.n	10e2c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   10e28:	4b0e      	ldr	r3, [pc, #56]	; (10e64 <nm_drv_deinit+0xf0>)
   10e2a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   10e2c:	230f      	movs	r3, #15
   10e2e:	18fb      	adds	r3, r7, r3
   10e30:	781b      	ldrb	r3, [r3, #0]
   10e32:	b25b      	sxtb	r3, r3
}
   10e34:	0018      	movs	r0, r3
   10e36:	46bd      	mov	sp, r7
   10e38:	b005      	add	sp, #20
   10e3a:	bd90      	pop	{r4, r7, pc}
   10e3c:	00010685 	.word	0x00010685
   10e40:	00027a00 	.word	0x00027a00
   10e44:	00027924 	.word	0x00027924
   10e48:	0000b9b9 	.word	0x0000b9b9
   10e4c:	00027994 	.word	0x00027994
   10e50:	00027954 	.word	0x00027954
   10e54:	00013aa5 	.word	0x00013aa5
   10e58:	000279b4 	.word	0x000279b4
   10e5c:	00010779 	.word	0x00010779
   10e60:	000279d8 	.word	0x000279d8
   10e64:	00012749 	.word	0x00012749

00010e68 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   10e68:	b580      	push	{r7, lr}
   10e6a:	b086      	sub	sp, #24
   10e6c:	af00      	add	r7, sp, #0
   10e6e:	6078      	str	r0, [r7, #4]
   10e70:	000a      	movs	r2, r1
   10e72:	1cbb      	adds	r3, r7, #2
   10e74:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   10e76:	230c      	movs	r3, #12
   10e78:	18fb      	adds	r3, r7, r3
   10e7a:	2200      	movs	r2, #0
   10e7c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   10e7e:	230c      	movs	r3, #12
   10e80:	18fb      	adds	r3, r7, r3
   10e82:	687a      	ldr	r2, [r7, #4]
   10e84:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   10e86:	230c      	movs	r3, #12
   10e88:	18fb      	adds	r3, r7, r3
   10e8a:	1cba      	adds	r2, r7, #2
   10e8c:	8812      	ldrh	r2, [r2, #0]
   10e8e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   10e90:	230c      	movs	r3, #12
   10e92:	18fb      	adds	r3, r7, r3
   10e94:	0019      	movs	r1, r3
   10e96:	2003      	movs	r0, #3
   10e98:	4b03      	ldr	r3, [pc, #12]	; (10ea8 <nmi_spi_read+0x40>)
   10e9a:	4798      	blx	r3
   10e9c:	0003      	movs	r3, r0
}
   10e9e:	0018      	movs	r0, r3
   10ea0:	46bd      	mov	sp, r7
   10ea2:	b006      	add	sp, #24
   10ea4:	bd80      	pop	{r7, pc}
   10ea6:	46c0      	nop			; (mov r8, r8)
   10ea8:	0000e615 	.word	0x0000e615

00010eac <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   10eac:	b580      	push	{r7, lr}
   10eae:	b086      	sub	sp, #24
   10eb0:	af00      	add	r7, sp, #0
   10eb2:	6078      	str	r0, [r7, #4]
   10eb4:	000a      	movs	r2, r1
   10eb6:	1cbb      	adds	r3, r7, #2
   10eb8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   10eba:	230c      	movs	r3, #12
   10ebc:	18fb      	adds	r3, r7, r3
   10ebe:	687a      	ldr	r2, [r7, #4]
   10ec0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   10ec2:	230c      	movs	r3, #12
   10ec4:	18fb      	adds	r3, r7, r3
   10ec6:	2200      	movs	r2, #0
   10ec8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   10eca:	230c      	movs	r3, #12
   10ecc:	18fb      	adds	r3, r7, r3
   10ece:	1cba      	adds	r2, r7, #2
   10ed0:	8812      	ldrh	r2, [r2, #0]
   10ed2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   10ed4:	230c      	movs	r3, #12
   10ed6:	18fb      	adds	r3, r7, r3
   10ed8:	0019      	movs	r1, r3
   10eda:	2003      	movs	r0, #3
   10edc:	4b03      	ldr	r3, [pc, #12]	; (10eec <nmi_spi_write+0x40>)
   10ede:	4798      	blx	r3
   10ee0:	0003      	movs	r3, r0
}
   10ee2:	0018      	movs	r0, r3
   10ee4:	46bd      	mov	sp, r7
   10ee6:	b006      	add	sp, #24
   10ee8:	bd80      	pop	{r7, pc}
   10eea:	46c0      	nop			; (mov r8, r8)
   10eec:	0000e615 	.word	0x0000e615

00010ef0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   10ef0:	b580      	push	{r7, lr}
   10ef2:	b088      	sub	sp, #32
   10ef4:	af00      	add	r7, sp, #0
   10ef6:	60f8      	str	r0, [r7, #12]
   10ef8:	60b9      	str	r1, [r7, #8]
   10efa:	1dbb      	adds	r3, r7, #6
   10efc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   10efe:	2314      	movs	r3, #20
   10f00:	18fb      	adds	r3, r7, r3
   10f02:	68fa      	ldr	r2, [r7, #12]
   10f04:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   10f06:	2314      	movs	r3, #20
   10f08:	18fb      	adds	r3, r7, r3
   10f0a:	68ba      	ldr	r2, [r7, #8]
   10f0c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   10f0e:	2314      	movs	r3, #20
   10f10:	18fb      	adds	r3, r7, r3
   10f12:	1dba      	adds	r2, r7, #6
   10f14:	8812      	ldrh	r2, [r2, #0]
   10f16:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   10f18:	2314      	movs	r3, #20
   10f1a:	18fb      	adds	r3, r7, r3
   10f1c:	0019      	movs	r1, r3
   10f1e:	2003      	movs	r0, #3
   10f20:	4b03      	ldr	r3, [pc, #12]	; (10f30 <nmi_spi_rw+0x40>)
   10f22:	4798      	blx	r3
   10f24:	0003      	movs	r3, r0
}
   10f26:	0018      	movs	r0, r3
   10f28:	46bd      	mov	sp, r7
   10f2a:	b008      	add	sp, #32
   10f2c:	bd80      	pop	{r7, pc}
   10f2e:	46c0      	nop			; (mov r8, r8)
   10f30:	0000e615 	.word	0x0000e615

00010f34 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   10f34:	b580      	push	{r7, lr}
   10f36:	b082      	sub	sp, #8
   10f38:	af00      	add	r7, sp, #0
   10f3a:	0002      	movs	r2, r0
   10f3c:	1dfb      	adds	r3, r7, #7
   10f3e:	701a      	strb	r2, [r3, #0]
   10f40:	1dbb      	adds	r3, r7, #6
   10f42:	1c0a      	adds	r2, r1, #0
   10f44:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   10f46:	1dfb      	adds	r3, r7, #7
   10f48:	781b      	ldrb	r3, [r3, #0]
   10f4a:	005a      	lsls	r2, r3, #1
   10f4c:	1dbb      	adds	r3, r7, #6
   10f4e:	781b      	ldrb	r3, [r3, #0]
   10f50:	4053      	eors	r3, r2
   10f52:	4a03      	ldr	r2, [pc, #12]	; (10f60 <crc7_byte+0x2c>)
   10f54:	5cd3      	ldrb	r3, [r2, r3]
}
   10f56:	0018      	movs	r0, r3
   10f58:	46bd      	mov	sp, r7
   10f5a:	b002      	add	sp, #8
   10f5c:	bd80      	pop	{r7, pc}
   10f5e:	46c0      	nop			; (mov r8, r8)
   10f60:	00027a10 	.word	0x00027a10

00010f64 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   10f64:	b590      	push	{r4, r7, lr}
   10f66:	b085      	sub	sp, #20
   10f68:	af00      	add	r7, sp, #0
   10f6a:	60b9      	str	r1, [r7, #8]
   10f6c:	607a      	str	r2, [r7, #4]
   10f6e:	230f      	movs	r3, #15
   10f70:	18fb      	adds	r3, r7, r3
   10f72:	1c02      	adds	r2, r0, #0
   10f74:	701a      	strb	r2, [r3, #0]
	while (len--)
   10f76:	e00e      	b.n	10f96 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   10f78:	68bb      	ldr	r3, [r7, #8]
   10f7a:	1c5a      	adds	r2, r3, #1
   10f7c:	60ba      	str	r2, [r7, #8]
   10f7e:	781a      	ldrb	r2, [r3, #0]
   10f80:	230f      	movs	r3, #15
   10f82:	18fc      	adds	r4, r7, r3
   10f84:	230f      	movs	r3, #15
   10f86:	18fb      	adds	r3, r7, r3
   10f88:	781b      	ldrb	r3, [r3, #0]
   10f8a:	0011      	movs	r1, r2
   10f8c:	0018      	movs	r0, r3
   10f8e:	4b08      	ldr	r3, [pc, #32]	; (10fb0 <crc7+0x4c>)
   10f90:	4798      	blx	r3
   10f92:	0003      	movs	r3, r0
   10f94:	7023      	strb	r3, [r4, #0]
	while (len--)
   10f96:	687b      	ldr	r3, [r7, #4]
   10f98:	1e5a      	subs	r2, r3, #1
   10f9a:	607a      	str	r2, [r7, #4]
   10f9c:	2b00      	cmp	r3, #0
   10f9e:	d1eb      	bne.n	10f78 <crc7+0x14>
	return crc;
   10fa0:	230f      	movs	r3, #15
   10fa2:	18fb      	adds	r3, r7, r3
   10fa4:	781b      	ldrb	r3, [r3, #0]
}
   10fa6:	0018      	movs	r0, r3
   10fa8:	46bd      	mov	sp, r7
   10faa:	b005      	add	sp, #20
   10fac:	bd90      	pop	{r4, r7, pc}
   10fae:	46c0      	nop			; (mov r8, r8)
   10fb0:	00010f35 	.word	0x00010f35

00010fb4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   10fb4:	b590      	push	{r4, r7, lr}
   10fb6:	b089      	sub	sp, #36	; 0x24
   10fb8:	af00      	add	r7, sp, #0
   10fba:	60b9      	str	r1, [r7, #8]
   10fbc:	607a      	str	r2, [r7, #4]
   10fbe:	603b      	str	r3, [r7, #0]
   10fc0:	230f      	movs	r3, #15
   10fc2:	18fb      	adds	r3, r7, r3
   10fc4:	1c02      	adds	r2, r0, #0
   10fc6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   10fc8:	231f      	movs	r3, #31
   10fca:	18fb      	adds	r3, r7, r3
   10fcc:	2205      	movs	r2, #5
   10fce:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   10fd0:	231e      	movs	r3, #30
   10fd2:	18fb      	adds	r3, r7, r3
   10fd4:	2201      	movs	r2, #1
   10fd6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   10fd8:	2314      	movs	r3, #20
   10fda:	18fb      	adds	r3, r7, r3
   10fdc:	220f      	movs	r2, #15
   10fde:	18ba      	adds	r2, r7, r2
   10fe0:	7812      	ldrb	r2, [r2, #0]
   10fe2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   10fe4:	230f      	movs	r3, #15
   10fe6:	18fb      	adds	r3, r7, r3
   10fe8:	781b      	ldrb	r3, [r3, #0]
   10fea:	3bc1      	subs	r3, #193	; 0xc1
   10fec:	2b0e      	cmp	r3, #14
   10fee:	d900      	bls.n	10ff2 <spi_cmd+0x3e>
   10ff0:	e11b      	b.n	1122a <spi_cmd+0x276>
   10ff2:	009a      	lsls	r2, r3, #2
   10ff4:	4bb6      	ldr	r3, [pc, #728]	; (112d0 <spi_cmd+0x31c>)
   10ff6:	18d3      	adds	r3, r2, r3
   10ff8:	681b      	ldr	r3, [r3, #0]
   10ffa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   10ffc:	68bb      	ldr	r3, [r7, #8]
   10ffe:	0c1b      	lsrs	r3, r3, #16
   11000:	b2da      	uxtb	r2, r3
   11002:	2314      	movs	r3, #20
   11004:	18fb      	adds	r3, r7, r3
   11006:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   11008:	68bb      	ldr	r3, [r7, #8]
   1100a:	0a1b      	lsrs	r3, r3, #8
   1100c:	b2da      	uxtb	r2, r3
   1100e:	2314      	movs	r3, #20
   11010:	18fb      	adds	r3, r7, r3
   11012:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   11014:	68bb      	ldr	r3, [r7, #8]
   11016:	b2da      	uxtb	r2, r3
   11018:	2314      	movs	r3, #20
   1101a:	18fb      	adds	r3, r7, r3
   1101c:	70da      	strb	r2, [r3, #3]
		len = 5;
   1101e:	231f      	movs	r3, #31
   11020:	18fb      	adds	r3, r7, r3
   11022:	2205      	movs	r2, #5
   11024:	701a      	strb	r2, [r3, #0]
		break;
   11026:	e105      	b.n	11234 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   11028:	68bb      	ldr	r3, [r7, #8]
   1102a:	0a1b      	lsrs	r3, r3, #8
   1102c:	b2da      	uxtb	r2, r3
   1102e:	2314      	movs	r3, #20
   11030:	18fb      	adds	r3, r7, r3
   11032:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   11034:	2330      	movs	r3, #48	; 0x30
   11036:	18fb      	adds	r3, r7, r3
   11038:	781b      	ldrb	r3, [r3, #0]
   1103a:	2b00      	cmp	r3, #0
   1103c:	d009      	beq.n	11052 <spi_cmd+0x9e>
   1103e:	2314      	movs	r3, #20
   11040:	18fb      	adds	r3, r7, r3
   11042:	785b      	ldrb	r3, [r3, #1]
   11044:	2280      	movs	r2, #128	; 0x80
   11046:	4252      	negs	r2, r2
   11048:	4313      	orrs	r3, r2
   1104a:	b2da      	uxtb	r2, r3
   1104c:	2314      	movs	r3, #20
   1104e:	18fb      	adds	r3, r7, r3
   11050:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   11052:	68bb      	ldr	r3, [r7, #8]
   11054:	b2da      	uxtb	r2, r3
   11056:	2314      	movs	r3, #20
   11058:	18fb      	adds	r3, r7, r3
   1105a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1105c:	2314      	movs	r3, #20
   1105e:	18fb      	adds	r3, r7, r3
   11060:	2200      	movs	r2, #0
   11062:	70da      	strb	r2, [r3, #3]
		len = 5;
   11064:	231f      	movs	r3, #31
   11066:	18fb      	adds	r3, r7, r3
   11068:	2205      	movs	r2, #5
   1106a:	701a      	strb	r2, [r3, #0]
		break;
   1106c:	e0e2      	b.n	11234 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   1106e:	2314      	movs	r3, #20
   11070:	18fb      	adds	r3, r7, r3
   11072:	2200      	movs	r2, #0
   11074:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   11076:	2314      	movs	r3, #20
   11078:	18fb      	adds	r3, r7, r3
   1107a:	2200      	movs	r2, #0
   1107c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1107e:	2314      	movs	r3, #20
   11080:	18fb      	adds	r3, r7, r3
   11082:	2200      	movs	r2, #0
   11084:	70da      	strb	r2, [r3, #3]
		len = 5;
   11086:	231f      	movs	r3, #31
   11088:	18fb      	adds	r3, r7, r3
   1108a:	2205      	movs	r2, #5
   1108c:	701a      	strb	r2, [r3, #0]
		break;
   1108e:	e0d1      	b.n	11234 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   11090:	2314      	movs	r3, #20
   11092:	18fb      	adds	r3, r7, r3
   11094:	2200      	movs	r2, #0
   11096:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   11098:	2314      	movs	r3, #20
   1109a:	18fb      	adds	r3, r7, r3
   1109c:	2200      	movs	r2, #0
   1109e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   110a0:	2314      	movs	r3, #20
   110a2:	18fb      	adds	r3, r7, r3
   110a4:	2200      	movs	r2, #0
   110a6:	70da      	strb	r2, [r3, #3]
		len = 5;
   110a8:	231f      	movs	r3, #31
   110aa:	18fb      	adds	r3, r7, r3
   110ac:	2205      	movs	r2, #5
   110ae:	701a      	strb	r2, [r3, #0]
		break;
   110b0:	e0c0      	b.n	11234 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   110b2:	2314      	movs	r3, #20
   110b4:	18fb      	adds	r3, r7, r3
   110b6:	22ff      	movs	r2, #255	; 0xff
   110b8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   110ba:	2314      	movs	r3, #20
   110bc:	18fb      	adds	r3, r7, r3
   110be:	22ff      	movs	r2, #255	; 0xff
   110c0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   110c2:	2314      	movs	r3, #20
   110c4:	18fb      	adds	r3, r7, r3
   110c6:	22ff      	movs	r2, #255	; 0xff
   110c8:	70da      	strb	r2, [r3, #3]
		len = 5;
   110ca:	231f      	movs	r3, #31
   110cc:	18fb      	adds	r3, r7, r3
   110ce:	2205      	movs	r2, #5
   110d0:	701a      	strb	r2, [r3, #0]
		break;
   110d2:	e0af      	b.n	11234 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   110d4:	68bb      	ldr	r3, [r7, #8]
   110d6:	0c1b      	lsrs	r3, r3, #16
   110d8:	b2da      	uxtb	r2, r3
   110da:	2314      	movs	r3, #20
   110dc:	18fb      	adds	r3, r7, r3
   110de:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   110e0:	68bb      	ldr	r3, [r7, #8]
   110e2:	0a1b      	lsrs	r3, r3, #8
   110e4:	b2da      	uxtb	r2, r3
   110e6:	2314      	movs	r3, #20
   110e8:	18fb      	adds	r3, r7, r3
   110ea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   110ec:	68bb      	ldr	r3, [r7, #8]
   110ee:	b2da      	uxtb	r2, r3
   110f0:	2314      	movs	r3, #20
   110f2:	18fb      	adds	r3, r7, r3
   110f4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   110f6:	683b      	ldr	r3, [r7, #0]
   110f8:	0a1b      	lsrs	r3, r3, #8
   110fa:	b2da      	uxtb	r2, r3
   110fc:	2314      	movs	r3, #20
   110fe:	18fb      	adds	r3, r7, r3
   11100:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   11102:	683b      	ldr	r3, [r7, #0]
   11104:	b2da      	uxtb	r2, r3
   11106:	2314      	movs	r3, #20
   11108:	18fb      	adds	r3, r7, r3
   1110a:	715a      	strb	r2, [r3, #5]
		len = 7;
   1110c:	231f      	movs	r3, #31
   1110e:	18fb      	adds	r3, r7, r3
   11110:	2207      	movs	r2, #7
   11112:	701a      	strb	r2, [r3, #0]
		break;
   11114:	e08e      	b.n	11234 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   11116:	68bb      	ldr	r3, [r7, #8]
   11118:	0c1b      	lsrs	r3, r3, #16
   1111a:	b2da      	uxtb	r2, r3
   1111c:	2314      	movs	r3, #20
   1111e:	18fb      	adds	r3, r7, r3
   11120:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   11122:	68bb      	ldr	r3, [r7, #8]
   11124:	0a1b      	lsrs	r3, r3, #8
   11126:	b2da      	uxtb	r2, r3
   11128:	2314      	movs	r3, #20
   1112a:	18fb      	adds	r3, r7, r3
   1112c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1112e:	68bb      	ldr	r3, [r7, #8]
   11130:	b2da      	uxtb	r2, r3
   11132:	2314      	movs	r3, #20
   11134:	18fb      	adds	r3, r7, r3
   11136:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   11138:	683b      	ldr	r3, [r7, #0]
   1113a:	0c1b      	lsrs	r3, r3, #16
   1113c:	b2da      	uxtb	r2, r3
   1113e:	2314      	movs	r3, #20
   11140:	18fb      	adds	r3, r7, r3
   11142:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   11144:	683b      	ldr	r3, [r7, #0]
   11146:	0a1b      	lsrs	r3, r3, #8
   11148:	b2da      	uxtb	r2, r3
   1114a:	2314      	movs	r3, #20
   1114c:	18fb      	adds	r3, r7, r3
   1114e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   11150:	683b      	ldr	r3, [r7, #0]
   11152:	b2da      	uxtb	r2, r3
   11154:	2314      	movs	r3, #20
   11156:	18fb      	adds	r3, r7, r3
   11158:	719a      	strb	r2, [r3, #6]
		len = 8;
   1115a:	231f      	movs	r3, #31
   1115c:	18fb      	adds	r3, r7, r3
   1115e:	2208      	movs	r2, #8
   11160:	701a      	strb	r2, [r3, #0]
		break;
   11162:	e067      	b.n	11234 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   11164:	68bb      	ldr	r3, [r7, #8]
   11166:	0a1b      	lsrs	r3, r3, #8
   11168:	b2da      	uxtb	r2, r3
   1116a:	2314      	movs	r3, #20
   1116c:	18fb      	adds	r3, r7, r3
   1116e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   11170:	2330      	movs	r3, #48	; 0x30
   11172:	18fb      	adds	r3, r7, r3
   11174:	781b      	ldrb	r3, [r3, #0]
   11176:	2b00      	cmp	r3, #0
   11178:	d009      	beq.n	1118e <spi_cmd+0x1da>
   1117a:	2314      	movs	r3, #20
   1117c:	18fb      	adds	r3, r7, r3
   1117e:	785b      	ldrb	r3, [r3, #1]
   11180:	2280      	movs	r2, #128	; 0x80
   11182:	4252      	negs	r2, r2
   11184:	4313      	orrs	r3, r2
   11186:	b2da      	uxtb	r2, r3
   11188:	2314      	movs	r3, #20
   1118a:	18fb      	adds	r3, r7, r3
   1118c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   1118e:	68bb      	ldr	r3, [r7, #8]
   11190:	b2da      	uxtb	r2, r3
   11192:	2314      	movs	r3, #20
   11194:	18fb      	adds	r3, r7, r3
   11196:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   11198:	687b      	ldr	r3, [r7, #4]
   1119a:	0e1b      	lsrs	r3, r3, #24
   1119c:	b2da      	uxtb	r2, r3
   1119e:	2314      	movs	r3, #20
   111a0:	18fb      	adds	r3, r7, r3
   111a2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   111a4:	687b      	ldr	r3, [r7, #4]
   111a6:	0c1b      	lsrs	r3, r3, #16
   111a8:	b2da      	uxtb	r2, r3
   111aa:	2314      	movs	r3, #20
   111ac:	18fb      	adds	r3, r7, r3
   111ae:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   111b0:	687b      	ldr	r3, [r7, #4]
   111b2:	0a1b      	lsrs	r3, r3, #8
   111b4:	b2da      	uxtb	r2, r3
   111b6:	2314      	movs	r3, #20
   111b8:	18fb      	adds	r3, r7, r3
   111ba:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   111bc:	687b      	ldr	r3, [r7, #4]
   111be:	b2da      	uxtb	r2, r3
   111c0:	2314      	movs	r3, #20
   111c2:	18fb      	adds	r3, r7, r3
   111c4:	719a      	strb	r2, [r3, #6]
		len = 8;
   111c6:	231f      	movs	r3, #31
   111c8:	18fb      	adds	r3, r7, r3
   111ca:	2208      	movs	r2, #8
   111cc:	701a      	strb	r2, [r3, #0]
		break;
   111ce:	e031      	b.n	11234 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   111d0:	68bb      	ldr	r3, [r7, #8]
   111d2:	0c1b      	lsrs	r3, r3, #16
   111d4:	b2da      	uxtb	r2, r3
   111d6:	2314      	movs	r3, #20
   111d8:	18fb      	adds	r3, r7, r3
   111da:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   111dc:	68bb      	ldr	r3, [r7, #8]
   111de:	0a1b      	lsrs	r3, r3, #8
   111e0:	b2da      	uxtb	r2, r3
   111e2:	2314      	movs	r3, #20
   111e4:	18fb      	adds	r3, r7, r3
   111e6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   111e8:	68bb      	ldr	r3, [r7, #8]
   111ea:	b2da      	uxtb	r2, r3
   111ec:	2314      	movs	r3, #20
   111ee:	18fb      	adds	r3, r7, r3
   111f0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   111f2:	687b      	ldr	r3, [r7, #4]
   111f4:	0e1b      	lsrs	r3, r3, #24
   111f6:	b2da      	uxtb	r2, r3
   111f8:	2314      	movs	r3, #20
   111fa:	18fb      	adds	r3, r7, r3
   111fc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   111fe:	687b      	ldr	r3, [r7, #4]
   11200:	0c1b      	lsrs	r3, r3, #16
   11202:	b2da      	uxtb	r2, r3
   11204:	2314      	movs	r3, #20
   11206:	18fb      	adds	r3, r7, r3
   11208:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   1120a:	687b      	ldr	r3, [r7, #4]
   1120c:	0a1b      	lsrs	r3, r3, #8
   1120e:	b2da      	uxtb	r2, r3
   11210:	2314      	movs	r3, #20
   11212:	18fb      	adds	r3, r7, r3
   11214:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   11216:	687b      	ldr	r3, [r7, #4]
   11218:	b2da      	uxtb	r2, r3
   1121a:	2314      	movs	r3, #20
   1121c:	18fb      	adds	r3, r7, r3
   1121e:	71da      	strb	r2, [r3, #7]
		len = 9;
   11220:	231f      	movs	r3, #31
   11222:	18fb      	adds	r3, r7, r3
   11224:	2209      	movs	r2, #9
   11226:	701a      	strb	r2, [r3, #0]
		break;
   11228:	e004      	b.n	11234 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   1122a:	231e      	movs	r3, #30
   1122c:	18fb      	adds	r3, r7, r3
   1122e:	2200      	movs	r2, #0
   11230:	701a      	strb	r2, [r3, #0]
		break;
   11232:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   11234:	231e      	movs	r3, #30
   11236:	18fb      	adds	r3, r7, r3
   11238:	781b      	ldrb	r3, [r3, #0]
   1123a:	b25b      	sxtb	r3, r3
   1123c:	2b00      	cmp	r3, #0
   1123e:	d03f      	beq.n	112c0 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   11240:	4b24      	ldr	r3, [pc, #144]	; (112d4 <spi_cmd+0x320>)
   11242:	781b      	ldrb	r3, [r3, #0]
   11244:	2b00      	cmp	r3, #0
   11246:	d115      	bne.n	11274 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   11248:	231f      	movs	r3, #31
   1124a:	18fb      	adds	r3, r7, r3
   1124c:	781b      	ldrb	r3, [r3, #0]
   1124e:	1e5c      	subs	r4, r3, #1
   11250:	231f      	movs	r3, #31
   11252:	18fb      	adds	r3, r7, r3
   11254:	781b      	ldrb	r3, [r3, #0]
   11256:	3b01      	subs	r3, #1
   11258:	001a      	movs	r2, r3
   1125a:	2314      	movs	r3, #20
   1125c:	18fb      	adds	r3, r7, r3
   1125e:	0019      	movs	r1, r3
   11260:	207f      	movs	r0, #127	; 0x7f
   11262:	4b1d      	ldr	r3, [pc, #116]	; (112d8 <spi_cmd+0x324>)
   11264:	4798      	blx	r3
   11266:	0003      	movs	r3, r0
   11268:	18db      	adds	r3, r3, r3
   1126a:	b2da      	uxtb	r2, r3
   1126c:	2314      	movs	r3, #20
   1126e:	18fb      	adds	r3, r7, r3
   11270:	551a      	strb	r2, [r3, r4]
   11272:	e006      	b.n	11282 <spi_cmd+0x2ce>
		else
			len-=1;
   11274:	231f      	movs	r3, #31
   11276:	18fb      	adds	r3, r7, r3
   11278:	221f      	movs	r2, #31
   1127a:	18ba      	adds	r2, r7, r2
   1127c:	7812      	ldrb	r2, [r2, #0]
   1127e:	3a01      	subs	r2, #1
   11280:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   11282:	231f      	movs	r3, #31
   11284:	18fb      	adds	r3, r7, r3
   11286:	781b      	ldrb	r3, [r3, #0]
   11288:	b29a      	uxth	r2, r3
   1128a:	2314      	movs	r3, #20
   1128c:	18fb      	adds	r3, r7, r3
   1128e:	0011      	movs	r1, r2
   11290:	0018      	movs	r0, r3
   11292:	4b12      	ldr	r3, [pc, #72]	; (112dc <spi_cmd+0x328>)
   11294:	4798      	blx	r3
   11296:	1e03      	subs	r3, r0, #0
   11298:	d012      	beq.n	112c0 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1129a:	2390      	movs	r3, #144	; 0x90
   1129c:	005a      	lsls	r2, r3, #1
   1129e:	4910      	ldr	r1, [pc, #64]	; (112e0 <spi_cmd+0x32c>)
   112a0:	4b10      	ldr	r3, [pc, #64]	; (112e4 <spi_cmd+0x330>)
   112a2:	0018      	movs	r0, r3
   112a4:	4b10      	ldr	r3, [pc, #64]	; (112e8 <spi_cmd+0x334>)
   112a6:	4798      	blx	r3
   112a8:	4b10      	ldr	r3, [pc, #64]	; (112ec <spi_cmd+0x338>)
   112aa:	0018      	movs	r0, r3
   112ac:	4b0e      	ldr	r3, [pc, #56]	; (112e8 <spi_cmd+0x334>)
   112ae:	4798      	blx	r3
   112b0:	4b0f      	ldr	r3, [pc, #60]	; (112f0 <spi_cmd+0x33c>)
   112b2:	0018      	movs	r0, r3
   112b4:	4b0c      	ldr	r3, [pc, #48]	; (112e8 <spi_cmd+0x334>)
   112b6:	4798      	blx	r3
			result = N_FAIL;
   112b8:	231e      	movs	r3, #30
   112ba:	18fb      	adds	r3, r7, r3
   112bc:	2200      	movs	r2, #0
   112be:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   112c0:	231e      	movs	r3, #30
   112c2:	18fb      	adds	r3, r7, r3
   112c4:	781b      	ldrb	r3, [r3, #0]
   112c6:	b25b      	sxtb	r3, r3
}
   112c8:	0018      	movs	r0, r3
   112ca:	46bd      	mov	sp, r7
   112cc:	b009      	add	sp, #36	; 0x24
   112ce:	bd90      	pop	{r4, r7, pc}
   112d0:	00028088 	.word	0x00028088
   112d4:	20004340 	.word	0x20004340
   112d8:	00010f65 	.word	0x00010f65
   112dc:	00010ead 	.word	0x00010ead
   112e0:	00028100 	.word	0x00028100
   112e4:	00027b10 	.word	0x00027b10
   112e8:	0000b9b9 	.word	0x0000b9b9
   112ec:	00027b24 	.word	0x00027b24
   112f0:	00027b50 	.word	0x00027b50

000112f4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   112f4:	b590      	push	{r4, r7, lr}
   112f6:	b085      	sub	sp, #20
   112f8:	af00      	add	r7, sp, #0
   112fa:	0002      	movs	r2, r0
   112fc:	1dfb      	adds	r3, r7, #7
   112fe:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   11300:	230e      	movs	r3, #14
   11302:	18fb      	adds	r3, r7, r3
   11304:	2201      	movs	r2, #1
   11306:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   11308:	4b32      	ldr	r3, [pc, #200]	; (113d4 <spi_data_rsp+0xe0>)
   1130a:	781b      	ldrb	r3, [r3, #0]
   1130c:	2b00      	cmp	r3, #0
   1130e:	d104      	bne.n	1131a <spi_data_rsp+0x26>
		len = 2;
   11310:	230f      	movs	r3, #15
   11312:	18fb      	adds	r3, r7, r3
   11314:	2202      	movs	r2, #2
   11316:	701a      	strb	r2, [r3, #0]
   11318:	e003      	b.n	11322 <spi_data_rsp+0x2e>
	else
		len = 3;
   1131a:	230f      	movs	r3, #15
   1131c:	18fb      	adds	r3, r7, r3
   1131e:	2203      	movs	r2, #3
   11320:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   11322:	230f      	movs	r3, #15
   11324:	18fb      	adds	r3, r7, r3
   11326:	781b      	ldrb	r3, [r3, #0]
   11328:	b29a      	uxth	r2, r3
   1132a:	2308      	movs	r3, #8
   1132c:	18fb      	adds	r3, r7, r3
   1132e:	0011      	movs	r1, r2
   11330:	0018      	movs	r0, r3
   11332:	4b29      	ldr	r3, [pc, #164]	; (113d8 <spi_data_rsp+0xe4>)
   11334:	4798      	blx	r3
   11336:	1e03      	subs	r3, r0, #0
   11338:	d013      	beq.n	11362 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   1133a:	239a      	movs	r3, #154	; 0x9a
   1133c:	005a      	lsls	r2, r3, #1
   1133e:	4927      	ldr	r1, [pc, #156]	; (113dc <spi_data_rsp+0xe8>)
   11340:	4b27      	ldr	r3, [pc, #156]	; (113e0 <spi_data_rsp+0xec>)
   11342:	0018      	movs	r0, r3
   11344:	4b27      	ldr	r3, [pc, #156]	; (113e4 <spi_data_rsp+0xf0>)
   11346:	4798      	blx	r3
   11348:	4b27      	ldr	r3, [pc, #156]	; (113e8 <spi_data_rsp+0xf4>)
   1134a:	0018      	movs	r0, r3
   1134c:	4b25      	ldr	r3, [pc, #148]	; (113e4 <spi_data_rsp+0xf0>)
   1134e:	4798      	blx	r3
   11350:	4b26      	ldr	r3, [pc, #152]	; (113ec <spi_data_rsp+0xf8>)
   11352:	0018      	movs	r0, r3
   11354:	4b23      	ldr	r3, [pc, #140]	; (113e4 <spi_data_rsp+0xf0>)
   11356:	4798      	blx	r3
		result = N_FAIL;
   11358:	230e      	movs	r3, #14
   1135a:	18fb      	adds	r3, r7, r3
   1135c:	2200      	movs	r2, #0
   1135e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   11360:	e030      	b.n	113c4 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   11362:	230f      	movs	r3, #15
   11364:	18fb      	adds	r3, r7, r3
   11366:	781b      	ldrb	r3, [r3, #0]
   11368:	3b01      	subs	r3, #1
   1136a:	2208      	movs	r2, #8
   1136c:	18ba      	adds	r2, r7, r2
   1136e:	5cd3      	ldrb	r3, [r2, r3]
   11370:	2b00      	cmp	r3, #0
   11372:	d108      	bne.n	11386 <spi_data_rsp+0x92>
   11374:	230f      	movs	r3, #15
   11376:	18fb      	adds	r3, r7, r3
   11378:	781b      	ldrb	r3, [r3, #0]
   1137a:	3b02      	subs	r3, #2
   1137c:	2208      	movs	r2, #8
   1137e:	18ba      	adds	r2, r7, r2
   11380:	5cd3      	ldrb	r3, [r2, r3]
   11382:	2bc3      	cmp	r3, #195	; 0xc3
   11384:	d01e      	beq.n	113c4 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   11386:	233c      	movs	r3, #60	; 0x3c
   11388:	33ff      	adds	r3, #255	; 0xff
   1138a:	001a      	movs	r2, r3
   1138c:	4913      	ldr	r1, [pc, #76]	; (113dc <spi_data_rsp+0xe8>)
   1138e:	4b14      	ldr	r3, [pc, #80]	; (113e0 <spi_data_rsp+0xec>)
   11390:	0018      	movs	r0, r3
   11392:	4b14      	ldr	r3, [pc, #80]	; (113e4 <spi_data_rsp+0xf0>)
   11394:	4798      	blx	r3
   11396:	2308      	movs	r3, #8
   11398:	18fb      	adds	r3, r7, r3
   1139a:	781b      	ldrb	r3, [r3, #0]
   1139c:	0019      	movs	r1, r3
   1139e:	2308      	movs	r3, #8
   113a0:	18fb      	adds	r3, r7, r3
   113a2:	785b      	ldrb	r3, [r3, #1]
   113a4:	001a      	movs	r2, r3
   113a6:	2308      	movs	r3, #8
   113a8:	18fb      	adds	r3, r7, r3
   113aa:	789b      	ldrb	r3, [r3, #2]
   113ac:	4810      	ldr	r0, [pc, #64]	; (113f0 <spi_data_rsp+0xfc>)
   113ae:	4c0d      	ldr	r4, [pc, #52]	; (113e4 <spi_data_rsp+0xf0>)
   113b0:	47a0      	blx	r4
   113b2:	4b0e      	ldr	r3, [pc, #56]	; (113ec <spi_data_rsp+0xf8>)
   113b4:	0018      	movs	r0, r3
   113b6:	4b0b      	ldr	r3, [pc, #44]	; (113e4 <spi_data_rsp+0xf0>)
   113b8:	4798      	blx	r3
		result = N_FAIL;
   113ba:	230e      	movs	r3, #14
   113bc:	18fb      	adds	r3, r7, r3
   113be:	2200      	movs	r2, #0
   113c0:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   113c2:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   113c4:	230e      	movs	r3, #14
   113c6:	18fb      	adds	r3, r7, r3
   113c8:	781b      	ldrb	r3, [r3, #0]
   113ca:	b25b      	sxtb	r3, r3
}
   113cc:	0018      	movs	r0, r3
   113ce:	46bd      	mov	sp, r7
   113d0:	b005      	add	sp, #20
   113d2:	bd90      	pop	{r4, r7, pc}
   113d4:	20004340 	.word	0x20004340
   113d8:	00010e69 	.word	0x00010e69
   113dc:	00028108 	.word	0x00028108
   113e0:	00027b10 	.word	0x00027b10
   113e4:	0000b9b9 	.word	0x0000b9b9
   113e8:	00027b54 	.word	0x00027b54
   113ec:	00027b50 	.word	0x00027b50
   113f0:	00027b74 	.word	0x00027b74

000113f4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   113f4:	b580      	push	{r7, lr}
   113f6:	b084      	sub	sp, #16
   113f8:	af00      	add	r7, sp, #0
   113fa:	0002      	movs	r2, r0
   113fc:	1dfb      	adds	r3, r7, #7
   113fe:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   11400:	230f      	movs	r3, #15
   11402:	18fb      	adds	r3, r7, r3
   11404:	2201      	movs	r2, #1
   11406:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   11408:	1dfb      	adds	r3, r7, #7
   1140a:	781b      	ldrb	r3, [r3, #0]
   1140c:	2bcf      	cmp	r3, #207	; 0xcf
   1140e:	d007      	beq.n	11420 <spi_cmd_rsp+0x2c>
   11410:	1dfb      	adds	r3, r7, #7
   11412:	781b      	ldrb	r3, [r3, #0]
   11414:	2bc5      	cmp	r3, #197	; 0xc5
   11416:	d003      	beq.n	11420 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   11418:	1dfb      	adds	r3, r7, #7
   1141a:	781b      	ldrb	r3, [r3, #0]
   1141c:	2bc6      	cmp	r3, #198	; 0xc6
   1141e:	d10c      	bne.n	1143a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   11420:	230d      	movs	r3, #13
   11422:	18fb      	adds	r3, r7, r3
   11424:	2101      	movs	r1, #1
   11426:	0018      	movs	r0, r3
   11428:	4b3b      	ldr	r3, [pc, #236]	; (11518 <spi_cmd_rsp+0x124>)
   1142a:	4798      	blx	r3
   1142c:	1e03      	subs	r3, r0, #0
   1142e:	d004      	beq.n	1143a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   11430:	230f      	movs	r3, #15
   11432:	18fb      	adds	r3, r7, r3
   11434:	2200      	movs	r2, #0
   11436:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   11438:	e065      	b.n	11506 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   1143a:	230e      	movs	r3, #14
   1143c:	18fb      	adds	r3, r7, r3
   1143e:	220a      	movs	r2, #10
   11440:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   11442:	230d      	movs	r3, #13
   11444:	18fb      	adds	r3, r7, r3
   11446:	2101      	movs	r1, #1
   11448:	0018      	movs	r0, r3
   1144a:	4b33      	ldr	r3, [pc, #204]	; (11518 <spi_cmd_rsp+0x124>)
   1144c:	4798      	blx	r3
   1144e:	1e03      	subs	r3, r0, #0
   11450:	d014      	beq.n	1147c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   11452:	235c      	movs	r3, #92	; 0x5c
   11454:	33ff      	adds	r3, #255	; 0xff
   11456:	001a      	movs	r2, r3
   11458:	4930      	ldr	r1, [pc, #192]	; (1151c <spi_cmd_rsp+0x128>)
   1145a:	4b31      	ldr	r3, [pc, #196]	; (11520 <spi_cmd_rsp+0x12c>)
   1145c:	0018      	movs	r0, r3
   1145e:	4b31      	ldr	r3, [pc, #196]	; (11524 <spi_cmd_rsp+0x130>)
   11460:	4798      	blx	r3
   11462:	4b31      	ldr	r3, [pc, #196]	; (11528 <spi_cmd_rsp+0x134>)
   11464:	0018      	movs	r0, r3
   11466:	4b2f      	ldr	r3, [pc, #188]	; (11524 <spi_cmd_rsp+0x130>)
   11468:	4798      	blx	r3
   1146a:	4b30      	ldr	r3, [pc, #192]	; (1152c <spi_cmd_rsp+0x138>)
   1146c:	0018      	movs	r0, r3
   1146e:	4b2d      	ldr	r3, [pc, #180]	; (11524 <spi_cmd_rsp+0x130>)
   11470:	4798      	blx	r3
			result = N_FAIL;
   11472:	230f      	movs	r3, #15
   11474:	18fb      	adds	r3, r7, r3
   11476:	2200      	movs	r2, #0
   11478:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   1147a:	e044      	b.n	11506 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   1147c:	230d      	movs	r3, #13
   1147e:	18fb      	adds	r3, r7, r3
   11480:	781b      	ldrb	r3, [r3, #0]
   11482:	1dfa      	adds	r2, r7, #7
   11484:	7812      	ldrb	r2, [r2, #0]
   11486:	429a      	cmp	r2, r3
   11488:	d00b      	beq.n	114a2 <spi_cmd_rsp+0xae>
   1148a:	230e      	movs	r3, #14
   1148c:	18fb      	adds	r3, r7, r3
   1148e:	781b      	ldrb	r3, [r3, #0]
   11490:	b25b      	sxtb	r3, r3
   11492:	b2da      	uxtb	r2, r3
   11494:	3a01      	subs	r2, #1
   11496:	b2d1      	uxtb	r1, r2
   11498:	220e      	movs	r2, #14
   1149a:	18ba      	adds	r2, r7, r2
   1149c:	7011      	strb	r1, [r2, #0]
   1149e:	2b00      	cmp	r3, #0
   114a0:	dccf      	bgt.n	11442 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   114a2:	230e      	movs	r3, #14
   114a4:	18fb      	adds	r3, r7, r3
   114a6:	220a      	movs	r2, #10
   114a8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   114aa:	230d      	movs	r3, #13
   114ac:	18fb      	adds	r3, r7, r3
   114ae:	2101      	movs	r1, #1
   114b0:	0018      	movs	r0, r3
   114b2:	4b19      	ldr	r3, [pc, #100]	; (11518 <spi_cmd_rsp+0x124>)
   114b4:	4798      	blx	r3
   114b6:	1e03      	subs	r3, r0, #0
   114b8:	d014      	beq.n	114e4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   114ba:	236a      	movs	r3, #106	; 0x6a
   114bc:	33ff      	adds	r3, #255	; 0xff
   114be:	001a      	movs	r2, r3
   114c0:	4916      	ldr	r1, [pc, #88]	; (1151c <spi_cmd_rsp+0x128>)
   114c2:	4b17      	ldr	r3, [pc, #92]	; (11520 <spi_cmd_rsp+0x12c>)
   114c4:	0018      	movs	r0, r3
   114c6:	4b17      	ldr	r3, [pc, #92]	; (11524 <spi_cmd_rsp+0x130>)
   114c8:	4798      	blx	r3
   114ca:	4b17      	ldr	r3, [pc, #92]	; (11528 <spi_cmd_rsp+0x134>)
   114cc:	0018      	movs	r0, r3
   114ce:	4b15      	ldr	r3, [pc, #84]	; (11524 <spi_cmd_rsp+0x130>)
   114d0:	4798      	blx	r3
   114d2:	4b16      	ldr	r3, [pc, #88]	; (1152c <spi_cmd_rsp+0x138>)
   114d4:	0018      	movs	r0, r3
   114d6:	4b13      	ldr	r3, [pc, #76]	; (11524 <spi_cmd_rsp+0x130>)
   114d8:	4798      	blx	r3
			result = N_FAIL;
   114da:	230f      	movs	r3, #15
   114dc:	18fb      	adds	r3, r7, r3
   114de:	2200      	movs	r2, #0
   114e0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   114e2:	e010      	b.n	11506 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   114e4:	230d      	movs	r3, #13
   114e6:	18fb      	adds	r3, r7, r3
   114e8:	781b      	ldrb	r3, [r3, #0]
   114ea:	2b00      	cmp	r3, #0
   114ec:	d00b      	beq.n	11506 <spi_cmd_rsp+0x112>
   114ee:	230e      	movs	r3, #14
   114f0:	18fb      	adds	r3, r7, r3
   114f2:	781b      	ldrb	r3, [r3, #0]
   114f4:	b25b      	sxtb	r3, r3
   114f6:	b2da      	uxtb	r2, r3
   114f8:	3a01      	subs	r2, #1
   114fa:	b2d1      	uxtb	r1, r2
   114fc:	220e      	movs	r2, #14
   114fe:	18ba      	adds	r2, r7, r2
   11500:	7011      	strb	r1, [r2, #0]
   11502:	2b00      	cmp	r3, #0
   11504:	dcd1      	bgt.n	114aa <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   11506:	230f      	movs	r3, #15
   11508:	18fb      	adds	r3, r7, r3
   1150a:	781b      	ldrb	r3, [r3, #0]
   1150c:	b25b      	sxtb	r3, r3
}
   1150e:	0018      	movs	r0, r3
   11510:	46bd      	mov	sp, r7
   11512:	b004      	add	sp, #16
   11514:	bd80      	pop	{r7, pc}
   11516:	46c0      	nop			; (mov r8, r8)
   11518:	00010e69 	.word	0x00010e69
   1151c:	00028118 	.word	0x00028118
   11520:	00027b10 	.word	0x00027b10
   11524:	0000b9b9 	.word	0x0000b9b9
   11528:	00027ba4 	.word	0x00027ba4
   1152c:	00027b50 	.word	0x00027b50

00011530 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   11530:	b590      	push	{r4, r7, lr}
   11532:	b09f      	sub	sp, #124	; 0x7c
   11534:	af00      	add	r7, sp, #0
   11536:	60b9      	str	r1, [r7, #8]
   11538:	607a      	str	r2, [r7, #4]
   1153a:	603b      	str	r3, [r7, #0]
   1153c:	230f      	movs	r3, #15
   1153e:	18fb      	adds	r3, r7, r3
   11540:	1c02      	adds	r2, r0, #0
   11542:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   11544:	2300      	movs	r3, #0
   11546:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   11548:	2301      	movs	r3, #1
   1154a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   1154c:	2338      	movs	r3, #56	; 0x38
   1154e:	18fb      	adds	r3, r7, r3
   11550:	220f      	movs	r2, #15
   11552:	18ba      	adds	r2, r7, r2
   11554:	7812      	ldrb	r2, [r2, #0]
   11556:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   11558:	230f      	movs	r3, #15
   1155a:	18fb      	adds	r3, r7, r3
   1155c:	781b      	ldrb	r3, [r3, #0]
   1155e:	3bc1      	subs	r3, #193	; 0xc1
   11560:	2b0e      	cmp	r3, #14
   11562:	d900      	bls.n	11566 <spi_cmd_complete+0x36>
   11564:	e103      	b.n	1176e <spi_cmd_complete+0x23e>
   11566:	009a      	lsls	r2, r3, #2
   11568:	4bd1      	ldr	r3, [pc, #836]	; (118b0 <spi_cmd_complete+0x380>)
   1156a:	18d3      	adds	r3, r2, r3
   1156c:	681b      	ldr	r3, [r3, #0]
   1156e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   11570:	68bb      	ldr	r3, [r7, #8]
   11572:	0c1b      	lsrs	r3, r3, #16
   11574:	b2da      	uxtb	r2, r3
   11576:	2338      	movs	r3, #56	; 0x38
   11578:	18fb      	adds	r3, r7, r3
   1157a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1157c:	68bb      	ldr	r3, [r7, #8]
   1157e:	0a1b      	lsrs	r3, r3, #8
   11580:	b2da      	uxtb	r2, r3
   11582:	2338      	movs	r3, #56	; 0x38
   11584:	18fb      	adds	r3, r7, r3
   11586:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   11588:	68bb      	ldr	r3, [r7, #8]
   1158a:	b2da      	uxtb	r2, r3
   1158c:	2338      	movs	r3, #56	; 0x38
   1158e:	18fb      	adds	r3, r7, r3
   11590:	70da      	strb	r2, [r3, #3]
		len = 5;
   11592:	2305      	movs	r3, #5
   11594:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   11596:	e0ed      	b.n	11774 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   11598:	68bb      	ldr	r3, [r7, #8]
   1159a:	0a1b      	lsrs	r3, r3, #8
   1159c:	b2da      	uxtb	r2, r3
   1159e:	2338      	movs	r3, #56	; 0x38
   115a0:	18fb      	adds	r3, r7, r3
   115a2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   115a4:	2388      	movs	r3, #136	; 0x88
   115a6:	18fb      	adds	r3, r7, r3
   115a8:	781b      	ldrb	r3, [r3, #0]
   115aa:	2b01      	cmp	r3, #1
   115ac:	d109      	bne.n	115c2 <spi_cmd_complete+0x92>
   115ae:	2338      	movs	r3, #56	; 0x38
   115b0:	18fb      	adds	r3, r7, r3
   115b2:	785b      	ldrb	r3, [r3, #1]
   115b4:	2280      	movs	r2, #128	; 0x80
   115b6:	4252      	negs	r2, r2
   115b8:	4313      	orrs	r3, r2
   115ba:	b2da      	uxtb	r2, r3
   115bc:	2338      	movs	r3, #56	; 0x38
   115be:	18fb      	adds	r3, r7, r3
   115c0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   115c2:	68bb      	ldr	r3, [r7, #8]
   115c4:	b2da      	uxtb	r2, r3
   115c6:	2338      	movs	r3, #56	; 0x38
   115c8:	18fb      	adds	r3, r7, r3
   115ca:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   115cc:	2338      	movs	r3, #56	; 0x38
   115ce:	18fb      	adds	r3, r7, r3
   115d0:	2200      	movs	r2, #0
   115d2:	70da      	strb	r2, [r3, #3]
		len = 5;
   115d4:	2305      	movs	r3, #5
   115d6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   115d8:	e0cc      	b.n	11774 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   115da:	2338      	movs	r3, #56	; 0x38
   115dc:	18fb      	adds	r3, r7, r3
   115de:	2200      	movs	r2, #0
   115e0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   115e2:	2338      	movs	r3, #56	; 0x38
   115e4:	18fb      	adds	r3, r7, r3
   115e6:	2200      	movs	r2, #0
   115e8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   115ea:	2338      	movs	r3, #56	; 0x38
   115ec:	18fb      	adds	r3, r7, r3
   115ee:	2200      	movs	r2, #0
   115f0:	70da      	strb	r2, [r3, #3]
		len = 5;
   115f2:	2305      	movs	r3, #5
   115f4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   115f6:	e0bd      	b.n	11774 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   115f8:	2338      	movs	r3, #56	; 0x38
   115fa:	18fb      	adds	r3, r7, r3
   115fc:	2200      	movs	r2, #0
   115fe:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   11600:	2338      	movs	r3, #56	; 0x38
   11602:	18fb      	adds	r3, r7, r3
   11604:	2200      	movs	r2, #0
   11606:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   11608:	2338      	movs	r3, #56	; 0x38
   1160a:	18fb      	adds	r3, r7, r3
   1160c:	2200      	movs	r2, #0
   1160e:	70da      	strb	r2, [r3, #3]
		len = 5;
   11610:	2305      	movs	r3, #5
   11612:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   11614:	e0ae      	b.n	11774 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   11616:	2338      	movs	r3, #56	; 0x38
   11618:	18fb      	adds	r3, r7, r3
   1161a:	22ff      	movs	r2, #255	; 0xff
   1161c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   1161e:	2338      	movs	r3, #56	; 0x38
   11620:	18fb      	adds	r3, r7, r3
   11622:	22ff      	movs	r2, #255	; 0xff
   11624:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   11626:	2338      	movs	r3, #56	; 0x38
   11628:	18fb      	adds	r3, r7, r3
   1162a:	22ff      	movs	r2, #255	; 0xff
   1162c:	70da      	strb	r2, [r3, #3]
		len = 5;
   1162e:	2305      	movs	r3, #5
   11630:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   11632:	e09f      	b.n	11774 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   11634:	68bb      	ldr	r3, [r7, #8]
   11636:	0c1b      	lsrs	r3, r3, #16
   11638:	b2da      	uxtb	r2, r3
   1163a:	2338      	movs	r3, #56	; 0x38
   1163c:	18fb      	adds	r3, r7, r3
   1163e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   11640:	68bb      	ldr	r3, [r7, #8]
   11642:	0a1b      	lsrs	r3, r3, #8
   11644:	b2da      	uxtb	r2, r3
   11646:	2338      	movs	r3, #56	; 0x38
   11648:	18fb      	adds	r3, r7, r3
   1164a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1164c:	68bb      	ldr	r3, [r7, #8]
   1164e:	b2da      	uxtb	r2, r3
   11650:	2338      	movs	r3, #56	; 0x38
   11652:	18fb      	adds	r3, r7, r3
   11654:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   11656:	683b      	ldr	r3, [r7, #0]
   11658:	0a1b      	lsrs	r3, r3, #8
   1165a:	b2da      	uxtb	r2, r3
   1165c:	2338      	movs	r3, #56	; 0x38
   1165e:	18fb      	adds	r3, r7, r3
   11660:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   11662:	683b      	ldr	r3, [r7, #0]
   11664:	b2da      	uxtb	r2, r3
   11666:	2338      	movs	r3, #56	; 0x38
   11668:	18fb      	adds	r3, r7, r3
   1166a:	715a      	strb	r2, [r3, #5]
		len = 7;
   1166c:	2307      	movs	r3, #7
   1166e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   11670:	e080      	b.n	11774 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   11672:	68bb      	ldr	r3, [r7, #8]
   11674:	0c1b      	lsrs	r3, r3, #16
   11676:	b2da      	uxtb	r2, r3
   11678:	2338      	movs	r3, #56	; 0x38
   1167a:	18fb      	adds	r3, r7, r3
   1167c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1167e:	68bb      	ldr	r3, [r7, #8]
   11680:	0a1b      	lsrs	r3, r3, #8
   11682:	b2da      	uxtb	r2, r3
   11684:	2338      	movs	r3, #56	; 0x38
   11686:	18fb      	adds	r3, r7, r3
   11688:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1168a:	68bb      	ldr	r3, [r7, #8]
   1168c:	b2da      	uxtb	r2, r3
   1168e:	2338      	movs	r3, #56	; 0x38
   11690:	18fb      	adds	r3, r7, r3
   11692:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   11694:	683b      	ldr	r3, [r7, #0]
   11696:	0c1b      	lsrs	r3, r3, #16
   11698:	b2da      	uxtb	r2, r3
   1169a:	2338      	movs	r3, #56	; 0x38
   1169c:	18fb      	adds	r3, r7, r3
   1169e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   116a0:	683b      	ldr	r3, [r7, #0]
   116a2:	0a1b      	lsrs	r3, r3, #8
   116a4:	b2da      	uxtb	r2, r3
   116a6:	2338      	movs	r3, #56	; 0x38
   116a8:	18fb      	adds	r3, r7, r3
   116aa:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   116ac:	683b      	ldr	r3, [r7, #0]
   116ae:	b2da      	uxtb	r2, r3
   116b0:	2338      	movs	r3, #56	; 0x38
   116b2:	18fb      	adds	r3, r7, r3
   116b4:	719a      	strb	r2, [r3, #6]
		len = 8;
   116b6:	2308      	movs	r3, #8
   116b8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   116ba:	e05b      	b.n	11774 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   116bc:	68bb      	ldr	r3, [r7, #8]
   116be:	0a1b      	lsrs	r3, r3, #8
   116c0:	b2da      	uxtb	r2, r3
   116c2:	2338      	movs	r3, #56	; 0x38
   116c4:	18fb      	adds	r3, r7, r3
   116c6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   116c8:	2388      	movs	r3, #136	; 0x88
   116ca:	18fb      	adds	r3, r7, r3
   116cc:	781b      	ldrb	r3, [r3, #0]
   116ce:	2b01      	cmp	r3, #1
   116d0:	d109      	bne.n	116e6 <spi_cmd_complete+0x1b6>
   116d2:	2338      	movs	r3, #56	; 0x38
   116d4:	18fb      	adds	r3, r7, r3
   116d6:	785b      	ldrb	r3, [r3, #1]
   116d8:	2280      	movs	r2, #128	; 0x80
   116da:	4252      	negs	r2, r2
   116dc:	4313      	orrs	r3, r2
   116de:	b2da      	uxtb	r2, r3
   116e0:	2338      	movs	r3, #56	; 0x38
   116e2:	18fb      	adds	r3, r7, r3
   116e4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   116e6:	68bb      	ldr	r3, [r7, #8]
   116e8:	b2da      	uxtb	r2, r3
   116ea:	2338      	movs	r3, #56	; 0x38
   116ec:	18fb      	adds	r3, r7, r3
   116ee:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   116f0:	687b      	ldr	r3, [r7, #4]
   116f2:	78da      	ldrb	r2, [r3, #3]
   116f4:	2338      	movs	r3, #56	; 0x38
   116f6:	18fb      	adds	r3, r7, r3
   116f8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   116fa:	687b      	ldr	r3, [r7, #4]
   116fc:	789a      	ldrb	r2, [r3, #2]
   116fe:	2338      	movs	r3, #56	; 0x38
   11700:	18fb      	adds	r3, r7, r3
   11702:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   11704:	687b      	ldr	r3, [r7, #4]
   11706:	785a      	ldrb	r2, [r3, #1]
   11708:	2338      	movs	r3, #56	; 0x38
   1170a:	18fb      	adds	r3, r7, r3
   1170c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   1170e:	687b      	ldr	r3, [r7, #4]
   11710:	781a      	ldrb	r2, [r3, #0]
   11712:	2338      	movs	r3, #56	; 0x38
   11714:	18fb      	adds	r3, r7, r3
   11716:	719a      	strb	r2, [r3, #6]
		len = 8;
   11718:	2308      	movs	r3, #8
   1171a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   1171c:	e02a      	b.n	11774 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   1171e:	68bb      	ldr	r3, [r7, #8]
   11720:	0c1b      	lsrs	r3, r3, #16
   11722:	b2da      	uxtb	r2, r3
   11724:	2338      	movs	r3, #56	; 0x38
   11726:	18fb      	adds	r3, r7, r3
   11728:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1172a:	68bb      	ldr	r3, [r7, #8]
   1172c:	0a1b      	lsrs	r3, r3, #8
   1172e:	b2da      	uxtb	r2, r3
   11730:	2338      	movs	r3, #56	; 0x38
   11732:	18fb      	adds	r3, r7, r3
   11734:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   11736:	68bb      	ldr	r3, [r7, #8]
   11738:	b2da      	uxtb	r2, r3
   1173a:	2338      	movs	r3, #56	; 0x38
   1173c:	18fb      	adds	r3, r7, r3
   1173e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   11740:	687b      	ldr	r3, [r7, #4]
   11742:	78da      	ldrb	r2, [r3, #3]
   11744:	2338      	movs	r3, #56	; 0x38
   11746:	18fb      	adds	r3, r7, r3
   11748:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   1174a:	687b      	ldr	r3, [r7, #4]
   1174c:	789a      	ldrb	r2, [r3, #2]
   1174e:	2338      	movs	r3, #56	; 0x38
   11750:	18fb      	adds	r3, r7, r3
   11752:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   11754:	687b      	ldr	r3, [r7, #4]
   11756:	785a      	ldrb	r2, [r3, #1]
   11758:	2338      	movs	r3, #56	; 0x38
   1175a:	18fb      	adds	r3, r7, r3
   1175c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   1175e:	687b      	ldr	r3, [r7, #4]
   11760:	781a      	ldrb	r2, [r3, #0]
   11762:	2338      	movs	r3, #56	; 0x38
   11764:	18fb      	adds	r3, r7, r3
   11766:	71da      	strb	r2, [r3, #7]
		len = 9;
   11768:	2309      	movs	r3, #9
   1176a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   1176c:	e002      	b.n	11774 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   1176e:	2300      	movs	r3, #0
   11770:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   11772:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   11774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11776:	2b01      	cmp	r3, #1
   11778:	d001      	beq.n	1177e <spi_cmd_complete+0x24e>
		return result;
   1177a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1177c:	e33a      	b.n	11df4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   1177e:	4b4d      	ldr	r3, [pc, #308]	; (118b4 <spi_cmd_complete+0x384>)
   11780:	781b      	ldrb	r3, [r3, #0]
   11782:	2b00      	cmp	r3, #0
   11784:	d111      	bne.n	117aa <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   11786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   11788:	1e5c      	subs	r4, r3, #1
   1178a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1178c:	3b01      	subs	r3, #1
   1178e:	001a      	movs	r2, r3
   11790:	2338      	movs	r3, #56	; 0x38
   11792:	18fb      	adds	r3, r7, r3
   11794:	0019      	movs	r1, r3
   11796:	207f      	movs	r0, #127	; 0x7f
   11798:	4b47      	ldr	r3, [pc, #284]	; (118b8 <spi_cmd_complete+0x388>)
   1179a:	4798      	blx	r3
   1179c:	0003      	movs	r3, r0
   1179e:	18db      	adds	r3, r3, r3
   117a0:	b2da      	uxtb	r2, r3
   117a2:	2338      	movs	r3, #56	; 0x38
   117a4:	18fb      	adds	r3, r7, r3
   117a6:	551a      	strb	r2, [r3, r4]
   117a8:	e002      	b.n	117b0 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   117aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   117ac:	3b01      	subs	r3, #1
   117ae:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   117b0:	230f      	movs	r3, #15
   117b2:	18fb      	adds	r3, r7, r3
   117b4:	781b      	ldrb	r3, [r3, #0]
   117b6:	2bcf      	cmp	r3, #207	; 0xcf
   117b8:	d009      	beq.n	117ce <spi_cmd_complete+0x29e>
   117ba:	230f      	movs	r3, #15
   117bc:	18fb      	adds	r3, r7, r3
   117be:	781b      	ldrb	r3, [r3, #0]
   117c0:	2bc5      	cmp	r3, #197	; 0xc5
   117c2:	d004      	beq.n	117ce <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   117c4:	230f      	movs	r3, #15
   117c6:	18fb      	adds	r3, r7, r3
   117c8:	781b      	ldrb	r3, [r3, #0]
   117ca:	2bc6      	cmp	r3, #198	; 0xc6
   117cc:	d103      	bne.n	117d6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   117ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   117d0:	3306      	adds	r3, #6
   117d2:	673b      	str	r3, [r7, #112]	; 0x70
   117d4:	e018      	b.n	11808 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   117d6:	230f      	movs	r3, #15
   117d8:	18fb      	adds	r3, r7, r3
   117da:	781b      	ldrb	r3, [r3, #0]
   117dc:	2bc4      	cmp	r3, #196	; 0xc4
   117de:	d004      	beq.n	117ea <spi_cmd_complete+0x2ba>
   117e0:	230f      	movs	r3, #15
   117e2:	18fb      	adds	r3, r7, r3
   117e4:	781b      	ldrb	r3, [r3, #0]
   117e6:	2bca      	cmp	r3, #202	; 0xca
   117e8:	d10b      	bne.n	11802 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   117ea:	4b32      	ldr	r3, [pc, #200]	; (118b4 <spi_cmd_complete+0x384>)
   117ec:	781b      	ldrb	r3, [r3, #0]
   117ee:	2b00      	cmp	r3, #0
   117f0:	d103      	bne.n	117fa <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   117f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   117f4:	330c      	adds	r3, #12
   117f6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   117f8:	e006      	b.n	11808 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   117fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   117fc:	330a      	adds	r3, #10
   117fe:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   11800:	e002      	b.n	11808 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   11802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   11804:	3305      	adds	r3, #5
   11806:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   11808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1180a:	2b20      	cmp	r3, #32
   1180c:	d914      	bls.n	11838 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   1180e:	23f7      	movs	r3, #247	; 0xf7
   11810:	005a      	lsls	r2, r3, #1
   11812:	492a      	ldr	r1, [pc, #168]	; (118bc <spi_cmd_complete+0x38c>)
   11814:	4b2a      	ldr	r3, [pc, #168]	; (118c0 <spi_cmd_complete+0x390>)
   11816:	0018      	movs	r0, r3
   11818:	4b2a      	ldr	r3, [pc, #168]	; (118c4 <spi_cmd_complete+0x394>)
   1181a:	4798      	blx	r3
   1181c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1181e:	4b2a      	ldr	r3, [pc, #168]	; (118c8 <spi_cmd_complete+0x398>)
   11820:	2220      	movs	r2, #32
   11822:	0018      	movs	r0, r3
   11824:	4b27      	ldr	r3, [pc, #156]	; (118c4 <spi_cmd_complete+0x394>)
   11826:	4798      	blx	r3
   11828:	4b28      	ldr	r3, [pc, #160]	; (118cc <spi_cmd_complete+0x39c>)
   1182a:	0018      	movs	r0, r3
   1182c:	4b25      	ldr	r3, [pc, #148]	; (118c4 <spi_cmd_complete+0x394>)
   1182e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   11830:	2300      	movs	r3, #0
   11832:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   11834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11836:	e2dd      	b.n	11df4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   11838:	2377      	movs	r3, #119	; 0x77
   1183a:	18fb      	adds	r3, r7, r3
   1183c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1183e:	701a      	strb	r2, [r3, #0]
   11840:	e00d      	b.n	1185e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   11842:	2377      	movs	r3, #119	; 0x77
   11844:	18fb      	adds	r3, r7, r3
   11846:	781b      	ldrb	r3, [r3, #0]
   11848:	2238      	movs	r2, #56	; 0x38
   1184a:	18ba      	adds	r2, r7, r2
   1184c:	2100      	movs	r1, #0
   1184e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   11850:	2377      	movs	r3, #119	; 0x77
   11852:	18fb      	adds	r3, r7, r3
   11854:	781a      	ldrb	r2, [r3, #0]
   11856:	2377      	movs	r3, #119	; 0x77
   11858:	18fb      	adds	r3, r7, r3
   1185a:	3201      	adds	r2, #1
   1185c:	701a      	strb	r2, [r3, #0]
   1185e:	2377      	movs	r3, #119	; 0x77
   11860:	18fb      	adds	r3, r7, r3
   11862:	781a      	ldrb	r2, [r3, #0]
   11864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   11866:	429a      	cmp	r2, r3
   11868:	d3eb      	bcc.n	11842 <spi_cmd_complete+0x312>
	}
	rix = len;
   1186a:	2376      	movs	r3, #118	; 0x76
   1186c:	18fb      	adds	r3, r7, r3
   1186e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   11870:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   11872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   11874:	b29a      	uxth	r2, r3
   11876:	2318      	movs	r3, #24
   11878:	18f9      	adds	r1, r7, r3
   1187a:	2338      	movs	r3, #56	; 0x38
   1187c:	18fb      	adds	r3, r7, r3
   1187e:	0018      	movs	r0, r3
   11880:	4b13      	ldr	r3, [pc, #76]	; (118d0 <spi_cmd_complete+0x3a0>)
   11882:	4798      	blx	r3
   11884:	1e03      	subs	r3, r0, #0
   11886:	d027      	beq.n	118d8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   11888:	23fa      	movs	r3, #250	; 0xfa
   1188a:	33ff      	adds	r3, #255	; 0xff
   1188c:	001a      	movs	r2, r3
   1188e:	490b      	ldr	r1, [pc, #44]	; (118bc <spi_cmd_complete+0x38c>)
   11890:	4b0b      	ldr	r3, [pc, #44]	; (118c0 <spi_cmd_complete+0x390>)
   11892:	0018      	movs	r0, r3
   11894:	4b0b      	ldr	r3, [pc, #44]	; (118c4 <spi_cmd_complete+0x394>)
   11896:	4798      	blx	r3
   11898:	4b0e      	ldr	r3, [pc, #56]	; (118d4 <spi_cmd_complete+0x3a4>)
   1189a:	0018      	movs	r0, r3
   1189c:	4b09      	ldr	r3, [pc, #36]	; (118c4 <spi_cmd_complete+0x394>)
   1189e:	4798      	blx	r3
   118a0:	4b0a      	ldr	r3, [pc, #40]	; (118cc <spi_cmd_complete+0x39c>)
   118a2:	0018      	movs	r0, r3
   118a4:	4b07      	ldr	r3, [pc, #28]	; (118c4 <spi_cmd_complete+0x394>)
   118a6:	4798      	blx	r3
		result = N_FAIL;
   118a8:	2300      	movs	r3, #0
   118aa:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   118ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   118ae:	e2a1      	b.n	11df4 <spi_cmd_complete+0x8c4>
   118b0:	000280c4 	.word	0x000280c4
   118b4:	20004340 	.word	0x20004340
   118b8:	00010f65 	.word	0x00010f65
   118bc:	00028124 	.word	0x00028124
   118c0:	00027b10 	.word	0x00027b10
   118c4:	0000b9b9 	.word	0x0000b9b9
   118c8:	00027bd8 	.word	0x00027bd8
   118cc:	00027b50 	.word	0x00027b50
   118d0:	00010ef1 	.word	0x00010ef1
   118d4:	00027b24 	.word	0x00027b24
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   118d8:	230f      	movs	r3, #15
   118da:	18fb      	adds	r3, r7, r3
   118dc:	781b      	ldrb	r3, [r3, #0]
   118de:	2bcf      	cmp	r3, #207	; 0xcf
   118e0:	d009      	beq.n	118f6 <spi_cmd_complete+0x3c6>
   118e2:	230f      	movs	r3, #15
   118e4:	18fb      	adds	r3, r7, r3
   118e6:	781b      	ldrb	r3, [r3, #0]
   118e8:	2bc5      	cmp	r3, #197	; 0xc5
   118ea:	d004      	beq.n	118f6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   118ec:	230f      	movs	r3, #15
   118ee:	18fb      	adds	r3, r7, r3
   118f0:	781b      	ldrb	r3, [r3, #0]
   118f2:	2bc6      	cmp	r3, #198	; 0xc6
   118f4:	d106      	bne.n	11904 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   118f6:	2376      	movs	r3, #118	; 0x76
   118f8:	18fb      	adds	r3, r7, r3
   118fa:	781a      	ldrb	r2, [r3, #0]
   118fc:	2376      	movs	r3, #118	; 0x76
   118fe:	18fb      	adds	r3, r7, r3
   11900:	3201      	adds	r2, #1
   11902:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   11904:	2376      	movs	r3, #118	; 0x76
   11906:	18fb      	adds	r3, r7, r3
   11908:	781b      	ldrb	r3, [r3, #0]
   1190a:	2276      	movs	r2, #118	; 0x76
   1190c:	18ba      	adds	r2, r7, r2
   1190e:	1c59      	adds	r1, r3, #1
   11910:	7011      	strb	r1, [r2, #0]
   11912:	001a      	movs	r2, r3
   11914:	2318      	movs	r3, #24
   11916:	18fb      	adds	r3, r7, r3
   11918:	5c9a      	ldrb	r2, [r3, r2]
   1191a:	2317      	movs	r3, #23
   1191c:	18fb      	adds	r3, r7, r3
   1191e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   11920:	2317      	movs	r3, #23
   11922:	18fb      	adds	r3, r7, r3
   11924:	781b      	ldrb	r3, [r3, #0]
   11926:	220f      	movs	r2, #15
   11928:	18ba      	adds	r2, r7, r2
   1192a:	7812      	ldrb	r2, [r2, #0]
   1192c:	429a      	cmp	r2, r3
   1192e:	d018      	beq.n	11962 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   11930:	4add      	ldr	r2, [pc, #884]	; (11ca8 <spi_cmd_complete+0x778>)
   11932:	49de      	ldr	r1, [pc, #888]	; (11cac <spi_cmd_complete+0x77c>)
   11934:	4bde      	ldr	r3, [pc, #888]	; (11cb0 <spi_cmd_complete+0x780>)
   11936:	0018      	movs	r0, r3
   11938:	4bde      	ldr	r3, [pc, #888]	; (11cb4 <spi_cmd_complete+0x784>)
   1193a:	4798      	blx	r3
   1193c:	230f      	movs	r3, #15
   1193e:	18fb      	adds	r3, r7, r3
   11940:	7819      	ldrb	r1, [r3, #0]
   11942:	2317      	movs	r3, #23
   11944:	18fb      	adds	r3, r7, r3
   11946:	781b      	ldrb	r3, [r3, #0]
   11948:	001a      	movs	r2, r3
   1194a:	4bdb      	ldr	r3, [pc, #876]	; (11cb8 <spi_cmd_complete+0x788>)
   1194c:	0018      	movs	r0, r3
   1194e:	4bd9      	ldr	r3, [pc, #868]	; (11cb4 <spi_cmd_complete+0x784>)
   11950:	4798      	blx	r3
   11952:	4bda      	ldr	r3, [pc, #872]	; (11cbc <spi_cmd_complete+0x78c>)
   11954:	0018      	movs	r0, r3
   11956:	4bd7      	ldr	r3, [pc, #860]	; (11cb4 <spi_cmd_complete+0x784>)
   11958:	4798      	blx	r3
		result = N_FAIL;
   1195a:	2300      	movs	r3, #0
   1195c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   1195e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11960:	e248      	b.n	11df4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   11962:	2376      	movs	r3, #118	; 0x76
   11964:	18fb      	adds	r3, r7, r3
   11966:	781b      	ldrb	r3, [r3, #0]
   11968:	2276      	movs	r2, #118	; 0x76
   1196a:	18ba      	adds	r2, r7, r2
   1196c:	1c59      	adds	r1, r3, #1
   1196e:	7011      	strb	r1, [r2, #0]
   11970:	001a      	movs	r2, r3
   11972:	2318      	movs	r3, #24
   11974:	18fb      	adds	r3, r7, r3
   11976:	5c9a      	ldrb	r2, [r3, r2]
   11978:	2317      	movs	r3, #23
   1197a:	18fb      	adds	r3, r7, r3
   1197c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   1197e:	2317      	movs	r3, #23
   11980:	18fb      	adds	r3, r7, r3
   11982:	781b      	ldrb	r3, [r3, #0]
   11984:	2b00      	cmp	r3, #0
   11986:	d016      	beq.n	119b6 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   11988:	4acd      	ldr	r2, [pc, #820]	; (11cc0 <spi_cmd_complete+0x790>)
   1198a:	49c8      	ldr	r1, [pc, #800]	; (11cac <spi_cmd_complete+0x77c>)
   1198c:	4bc8      	ldr	r3, [pc, #800]	; (11cb0 <spi_cmd_complete+0x780>)
   1198e:	0018      	movs	r0, r3
   11990:	4bc8      	ldr	r3, [pc, #800]	; (11cb4 <spi_cmd_complete+0x784>)
   11992:	4798      	blx	r3
   11994:	2317      	movs	r3, #23
   11996:	18fb      	adds	r3, r7, r3
   11998:	781b      	ldrb	r3, [r3, #0]
   1199a:	001a      	movs	r2, r3
   1199c:	4bc9      	ldr	r3, [pc, #804]	; (11cc4 <spi_cmd_complete+0x794>)
   1199e:	0011      	movs	r1, r2
   119a0:	0018      	movs	r0, r3
   119a2:	4bc4      	ldr	r3, [pc, #784]	; (11cb4 <spi_cmd_complete+0x784>)
   119a4:	4798      	blx	r3
   119a6:	4bc5      	ldr	r3, [pc, #788]	; (11cbc <spi_cmd_complete+0x78c>)
   119a8:	0018      	movs	r0, r3
   119aa:	4bc2      	ldr	r3, [pc, #776]	; (11cb4 <spi_cmd_complete+0x784>)
   119ac:	4798      	blx	r3
		result = N_FAIL;
   119ae:	2300      	movs	r3, #0
   119b0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   119b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   119b4:	e21e      	b.n	11df4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   119b6:	230f      	movs	r3, #15
   119b8:	18fb      	adds	r3, r7, r3
   119ba:	781b      	ldrb	r3, [r3, #0]
   119bc:	2bc4      	cmp	r3, #196	; 0xc4
   119be:	d00f      	beq.n	119e0 <spi_cmd_complete+0x4b0>
   119c0:	230f      	movs	r3, #15
   119c2:	18fb      	adds	r3, r7, r3
   119c4:	781b      	ldrb	r3, [r3, #0]
   119c6:	2bca      	cmp	r3, #202	; 0xca
   119c8:	d00a      	beq.n	119e0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   119ca:	230f      	movs	r3, #15
   119cc:	18fb      	adds	r3, r7, r3
   119ce:	781b      	ldrb	r3, [r3, #0]
   119d0:	2bc2      	cmp	r3, #194	; 0xc2
   119d2:	d005      	beq.n	119e0 <spi_cmd_complete+0x4b0>
   119d4:	230f      	movs	r3, #15
   119d6:	18fb      	adds	r3, r7, r3
   119d8:	781b      	ldrb	r3, [r3, #0]
   119da:	2bc8      	cmp	r3, #200	; 0xc8
   119dc:	d000      	beq.n	119e0 <spi_cmd_complete+0x4b0>
   119de:	e208      	b.n	11df2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   119e0:	230a      	movs	r3, #10
   119e2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   119e4:	2376      	movs	r3, #118	; 0x76
   119e6:	18fb      	adds	r3, r7, r3
   119e8:	781a      	ldrb	r2, [r3, #0]
   119ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   119ec:	429a      	cmp	r2, r3
   119ee:	d218      	bcs.n	11a22 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   119f0:	2376      	movs	r3, #118	; 0x76
   119f2:	18fb      	adds	r3, r7, r3
   119f4:	781b      	ldrb	r3, [r3, #0]
   119f6:	2276      	movs	r2, #118	; 0x76
   119f8:	18ba      	adds	r2, r7, r2
   119fa:	1c59      	adds	r1, r3, #1
   119fc:	7011      	strb	r1, [r2, #0]
   119fe:	001a      	movs	r2, r3
   11a00:	2318      	movs	r3, #24
   11a02:	18fb      	adds	r3, r7, r3
   11a04:	5c9a      	ldrb	r2, [r3, r2]
   11a06:	2317      	movs	r3, #23
   11a08:	18fb      	adds	r3, r7, r3
   11a0a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   11a0c:	2317      	movs	r3, #23
   11a0e:	18fb      	adds	r3, r7, r3
   11a10:	781b      	ldrb	r3, [r3, #0]
   11a12:	091b      	lsrs	r3, r3, #4
   11a14:	b2db      	uxtb	r3, r3
   11a16:	001a      	movs	r2, r3
   11a18:	230f      	movs	r3, #15
   11a1a:	4013      	ands	r3, r2
   11a1c:	2b0f      	cmp	r3, #15
   11a1e:	d103      	bne.n	11a28 <spi_cmd_complete+0x4f8>
					break;
   11a20:	e007      	b.n	11a32 <spi_cmd_complete+0x502>
					retry = 0;
   11a22:	2300      	movs	r3, #0
   11a24:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   11a26:	e004      	b.n	11a32 <spi_cmd_complete+0x502>
			} while (retry--);
   11a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   11a2a:	1e5a      	subs	r2, r3, #1
   11a2c:	667a      	str	r2, [r7, #100]	; 0x64
   11a2e:	2b00      	cmp	r3, #0
   11a30:	d1d8      	bne.n	119e4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   11a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   11a34:	2b00      	cmp	r3, #0
   11a36:	dc18      	bgt.n	11a6a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   11a38:	2395      	movs	r3, #149	; 0x95
   11a3a:	009a      	lsls	r2, r3, #2
   11a3c:	499b      	ldr	r1, [pc, #620]	; (11cac <spi_cmd_complete+0x77c>)
   11a3e:	4b9c      	ldr	r3, [pc, #624]	; (11cb0 <spi_cmd_complete+0x780>)
   11a40:	0018      	movs	r0, r3
   11a42:	4b9c      	ldr	r3, [pc, #624]	; (11cb4 <spi_cmd_complete+0x784>)
   11a44:	4798      	blx	r3
   11a46:	2317      	movs	r3, #23
   11a48:	18fb      	adds	r3, r7, r3
   11a4a:	781b      	ldrb	r3, [r3, #0]
   11a4c:	001a      	movs	r2, r3
   11a4e:	4b9e      	ldr	r3, [pc, #632]	; (11cc8 <spi_cmd_complete+0x798>)
   11a50:	0011      	movs	r1, r2
   11a52:	0018      	movs	r0, r3
   11a54:	4b97      	ldr	r3, [pc, #604]	; (11cb4 <spi_cmd_complete+0x784>)
   11a56:	4798      	blx	r3
   11a58:	4b98      	ldr	r3, [pc, #608]	; (11cbc <spi_cmd_complete+0x78c>)
   11a5a:	0018      	movs	r0, r3
   11a5c:	4b95      	ldr	r3, [pc, #596]	; (11cb4 <spi_cmd_complete+0x784>)
   11a5e:	4798      	blx	r3
				result = N_RESET;
   11a60:	2301      	movs	r3, #1
   11a62:	425b      	negs	r3, r3
   11a64:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   11a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11a68:	e1c4      	b.n	11df4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   11a6a:	230f      	movs	r3, #15
   11a6c:	18fb      	adds	r3, r7, r3
   11a6e:	781b      	ldrb	r3, [r3, #0]
   11a70:	2bc4      	cmp	r3, #196	; 0xc4
   11a72:	d005      	beq.n	11a80 <spi_cmd_complete+0x550>
   11a74:	230f      	movs	r3, #15
   11a76:	18fb      	adds	r3, r7, r3
   11a78:	781b      	ldrb	r3, [r3, #0]
   11a7a:	2bca      	cmp	r3, #202	; 0xca
   11a7c:	d000      	beq.n	11a80 <spi_cmd_complete+0x550>
   11a7e:	e08e      	b.n	11b9e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   11a80:	2376      	movs	r3, #118	; 0x76
   11a82:	18fb      	adds	r3, r7, r3
   11a84:	781b      	ldrb	r3, [r3, #0]
   11a86:	3303      	adds	r3, #3
   11a88:	001a      	movs	r2, r3
   11a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   11a8c:	429a      	cmp	r2, r3
   11a8e:	d23c      	bcs.n	11b0a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   11a90:	2376      	movs	r3, #118	; 0x76
   11a92:	18fb      	adds	r3, r7, r3
   11a94:	781b      	ldrb	r3, [r3, #0]
   11a96:	2276      	movs	r2, #118	; 0x76
   11a98:	18ba      	adds	r2, r7, r2
   11a9a:	1c59      	adds	r1, r3, #1
   11a9c:	7011      	strb	r1, [r2, #0]
   11a9e:	001a      	movs	r2, r3
   11aa0:	2318      	movs	r3, #24
   11aa2:	18fb      	adds	r3, r7, r3
   11aa4:	5c9a      	ldrb	r2, [r3, r2]
   11aa6:	687b      	ldr	r3, [r7, #4]
   11aa8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   11aaa:	687b      	ldr	r3, [r7, #4]
   11aac:	1c5a      	adds	r2, r3, #1
   11aae:	2376      	movs	r3, #118	; 0x76
   11ab0:	18fb      	adds	r3, r7, r3
   11ab2:	781b      	ldrb	r3, [r3, #0]
   11ab4:	2176      	movs	r1, #118	; 0x76
   11ab6:	1879      	adds	r1, r7, r1
   11ab8:	1c58      	adds	r0, r3, #1
   11aba:	7008      	strb	r0, [r1, #0]
   11abc:	0019      	movs	r1, r3
   11abe:	2318      	movs	r3, #24
   11ac0:	18fb      	adds	r3, r7, r3
   11ac2:	5c5b      	ldrb	r3, [r3, r1]
   11ac4:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   11ac6:	687b      	ldr	r3, [r7, #4]
   11ac8:	1c9a      	adds	r2, r3, #2
   11aca:	2376      	movs	r3, #118	; 0x76
   11acc:	18fb      	adds	r3, r7, r3
   11ace:	781b      	ldrb	r3, [r3, #0]
   11ad0:	2176      	movs	r1, #118	; 0x76
   11ad2:	1879      	adds	r1, r7, r1
   11ad4:	1c58      	adds	r0, r3, #1
   11ad6:	7008      	strb	r0, [r1, #0]
   11ad8:	0019      	movs	r1, r3
   11ada:	2318      	movs	r3, #24
   11adc:	18fb      	adds	r3, r7, r3
   11ade:	5c5b      	ldrb	r3, [r3, r1]
   11ae0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   11ae2:	687b      	ldr	r3, [r7, #4]
   11ae4:	1cda      	adds	r2, r3, #3
   11ae6:	2376      	movs	r3, #118	; 0x76
   11ae8:	18fb      	adds	r3, r7, r3
   11aea:	781b      	ldrb	r3, [r3, #0]
   11aec:	2176      	movs	r1, #118	; 0x76
   11aee:	1879      	adds	r1, r7, r1
   11af0:	1c58      	adds	r0, r3, #1
   11af2:	7008      	strb	r0, [r1, #0]
   11af4:	0019      	movs	r1, r3
   11af6:	2318      	movs	r3, #24
   11af8:	18fb      	adds	r3, r7, r3
   11afa:	5c5b      	ldrb	r3, [r3, r1]
   11afc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   11afe:	4b73      	ldr	r3, [pc, #460]	; (11ccc <spi_cmd_complete+0x79c>)
   11b00:	781b      	ldrb	r3, [r3, #0]
   11b02:	2b00      	cmp	r3, #0
   11b04:	d000      	beq.n	11b08 <spi_cmd_complete+0x5d8>
   11b06:	e174      	b.n	11df2 <spi_cmd_complete+0x8c2>
   11b08:	e011      	b.n	11b2e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   11b0a:	4a71      	ldr	r2, [pc, #452]	; (11cd0 <spi_cmd_complete+0x7a0>)
   11b0c:	4967      	ldr	r1, [pc, #412]	; (11cac <spi_cmd_complete+0x77c>)
   11b0e:	4b68      	ldr	r3, [pc, #416]	; (11cb0 <spi_cmd_complete+0x780>)
   11b10:	0018      	movs	r0, r3
   11b12:	4b68      	ldr	r3, [pc, #416]	; (11cb4 <spi_cmd_complete+0x784>)
   11b14:	4798      	blx	r3
   11b16:	4b6f      	ldr	r3, [pc, #444]	; (11cd4 <spi_cmd_complete+0x7a4>)
   11b18:	0018      	movs	r0, r3
   11b1a:	4b66      	ldr	r3, [pc, #408]	; (11cb4 <spi_cmd_complete+0x784>)
   11b1c:	4798      	blx	r3
   11b1e:	4b67      	ldr	r3, [pc, #412]	; (11cbc <spi_cmd_complete+0x78c>)
   11b20:	0018      	movs	r0, r3
   11b22:	4b64      	ldr	r3, [pc, #400]	; (11cb4 <spi_cmd_complete+0x784>)
   11b24:	4798      	blx	r3
					result = N_FAIL;
   11b26:	2300      	movs	r3, #0
   11b28:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   11b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11b2c:	e162      	b.n	11df4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   11b2e:	2376      	movs	r3, #118	; 0x76
   11b30:	18fb      	adds	r3, r7, r3
   11b32:	781b      	ldrb	r3, [r3, #0]
   11b34:	3301      	adds	r3, #1
   11b36:	001a      	movs	r2, r3
   11b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   11b3a:	429a      	cmp	r2, r3
   11b3c:	d21c      	bcs.n	11b78 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   11b3e:	2376      	movs	r3, #118	; 0x76
   11b40:	18fb      	adds	r3, r7, r3
   11b42:	781b      	ldrb	r3, [r3, #0]
   11b44:	2276      	movs	r2, #118	; 0x76
   11b46:	18ba      	adds	r2, r7, r2
   11b48:	1c59      	adds	r1, r3, #1
   11b4a:	7011      	strb	r1, [r2, #0]
   11b4c:	001a      	movs	r2, r3
   11b4e:	2318      	movs	r3, #24
   11b50:	18fb      	adds	r3, r7, r3
   11b52:	5c9a      	ldrb	r2, [r3, r2]
   11b54:	2314      	movs	r3, #20
   11b56:	18fb      	adds	r3, r7, r3
   11b58:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   11b5a:	2376      	movs	r3, #118	; 0x76
   11b5c:	18fb      	adds	r3, r7, r3
   11b5e:	781b      	ldrb	r3, [r3, #0]
   11b60:	2276      	movs	r2, #118	; 0x76
   11b62:	18ba      	adds	r2, r7, r2
   11b64:	1c59      	adds	r1, r3, #1
   11b66:	7011      	strb	r1, [r2, #0]
   11b68:	001a      	movs	r2, r3
   11b6a:	2318      	movs	r3, #24
   11b6c:	18fb      	adds	r3, r7, r3
   11b6e:	5c9a      	ldrb	r2, [r3, r2]
   11b70:	2314      	movs	r3, #20
   11b72:	18fb      	adds	r3, r7, r3
   11b74:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   11b76:	e13c      	b.n	11df2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   11b78:	239c      	movs	r3, #156	; 0x9c
   11b7a:	009a      	lsls	r2, r3, #2
   11b7c:	494b      	ldr	r1, [pc, #300]	; (11cac <spi_cmd_complete+0x77c>)
   11b7e:	4b4c      	ldr	r3, [pc, #304]	; (11cb0 <spi_cmd_complete+0x780>)
   11b80:	0018      	movs	r0, r3
   11b82:	4b4c      	ldr	r3, [pc, #304]	; (11cb4 <spi_cmd_complete+0x784>)
   11b84:	4798      	blx	r3
   11b86:	4b54      	ldr	r3, [pc, #336]	; (11cd8 <spi_cmd_complete+0x7a8>)
   11b88:	0018      	movs	r0, r3
   11b8a:	4b4a      	ldr	r3, [pc, #296]	; (11cb4 <spi_cmd_complete+0x784>)
   11b8c:	4798      	blx	r3
   11b8e:	4b4b      	ldr	r3, [pc, #300]	; (11cbc <spi_cmd_complete+0x78c>)
   11b90:	0018      	movs	r0, r3
   11b92:	4b48      	ldr	r3, [pc, #288]	; (11cb4 <spi_cmd_complete+0x784>)
   11b94:	4798      	blx	r3
						result = N_FAIL;
   11b96:	2300      	movs	r3, #0
   11b98:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   11b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11b9c:	e12a      	b.n	11df4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   11b9e:	230f      	movs	r3, #15
   11ba0:	18fb      	adds	r3, r7, r3
   11ba2:	781b      	ldrb	r3, [r3, #0]
   11ba4:	2bc2      	cmp	r3, #194	; 0xc2
   11ba6:	d005      	beq.n	11bb4 <spi_cmd_complete+0x684>
   11ba8:	230f      	movs	r3, #15
   11baa:	18fb      	adds	r3, r7, r3
   11bac:	781b      	ldrb	r3, [r3, #0]
   11bae:	2bc8      	cmp	r3, #200	; 0xc8
   11bb0:	d000      	beq.n	11bb4 <spi_cmd_complete+0x684>
   11bb2:	e11e      	b.n	11df2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   11bb4:	2300      	movs	r3, #0
   11bb6:	663b      	str	r3, [r7, #96]	; 0x60
   11bb8:	e011      	b.n	11bde <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   11bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   11bbc:	1c5a      	adds	r2, r3, #1
   11bbe:	663a      	str	r2, [r7, #96]	; 0x60
   11bc0:	001a      	movs	r2, r3
   11bc2:	687b      	ldr	r3, [r7, #4]
   11bc4:	189a      	adds	r2, r3, r2
   11bc6:	2376      	movs	r3, #118	; 0x76
   11bc8:	18fb      	adds	r3, r7, r3
   11bca:	781b      	ldrb	r3, [r3, #0]
   11bcc:	2176      	movs	r1, #118	; 0x76
   11bce:	1879      	adds	r1, r7, r1
   11bd0:	1c58      	adds	r0, r3, #1
   11bd2:	7008      	strb	r0, [r1, #0]
   11bd4:	0019      	movs	r1, r3
   11bd6:	2318      	movs	r3, #24
   11bd8:	18fb      	adds	r3, r7, r3
   11bda:	5c5b      	ldrb	r3, [r3, r1]
   11bdc:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   11bde:	2376      	movs	r3, #118	; 0x76
   11be0:	18fb      	adds	r3, r7, r3
   11be2:	781a      	ldrb	r2, [r3, #0]
   11be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   11be6:	429a      	cmp	r2, r3
   11be8:	d203      	bcs.n	11bf2 <spi_cmd_complete+0x6c2>
   11bea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   11bec:	683b      	ldr	r3, [r7, #0]
   11bee:	429a      	cmp	r2, r3
   11bf0:	d3e3      	bcc.n	11bba <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   11bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   11bf4:	683a      	ldr	r2, [r7, #0]
   11bf6:	1ad3      	subs	r3, r2, r3
   11bf8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   11bfa:	683b      	ldr	r3, [r7, #0]
   11bfc:	2b00      	cmp	r3, #0
   11bfe:	d100      	bne.n	11c02 <spi_cmd_complete+0x6d2>
   11c00:	e0f1      	b.n	11de6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   11c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   11c04:	2280      	movs	r2, #128	; 0x80
   11c06:	0192      	lsls	r2, r2, #6
   11c08:	1ad3      	subs	r3, r2, r3
   11c0a:	001a      	movs	r2, r3
   11c0c:	683b      	ldr	r3, [r7, #0]
   11c0e:	429a      	cmp	r2, r3
   11c10:	d302      	bcc.n	11c18 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   11c12:	683b      	ldr	r3, [r7, #0]
   11c14:	65fb      	str	r3, [r7, #92]	; 0x5c
   11c16:	e004      	b.n	11c22 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   11c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   11c1a:	2280      	movs	r2, #128	; 0x80
   11c1c:	0192      	lsls	r2, r2, #6
   11c1e:	1ad3      	subs	r3, r2, r3
   11c20:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   11c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   11c24:	687a      	ldr	r2, [r7, #4]
   11c26:	18d3      	adds	r3, r2, r3
   11c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   11c2a:	b292      	uxth	r2, r2
   11c2c:	0011      	movs	r1, r2
   11c2e:	0018      	movs	r0, r3
   11c30:	4b2a      	ldr	r3, [pc, #168]	; (11cdc <spi_cmd_complete+0x7ac>)
   11c32:	4798      	blx	r3
   11c34:	1e03      	subs	r3, r0, #0
   11c36:	d010      	beq.n	11c5a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   11c38:	4a29      	ldr	r2, [pc, #164]	; (11ce0 <spi_cmd_complete+0x7b0>)
   11c3a:	491c      	ldr	r1, [pc, #112]	; (11cac <spi_cmd_complete+0x77c>)
   11c3c:	4b1c      	ldr	r3, [pc, #112]	; (11cb0 <spi_cmd_complete+0x780>)
   11c3e:	0018      	movs	r0, r3
   11c40:	4b1c      	ldr	r3, [pc, #112]	; (11cb4 <spi_cmd_complete+0x784>)
   11c42:	4798      	blx	r3
   11c44:	4b27      	ldr	r3, [pc, #156]	; (11ce4 <spi_cmd_complete+0x7b4>)
   11c46:	0018      	movs	r0, r3
   11c48:	4b1a      	ldr	r3, [pc, #104]	; (11cb4 <spi_cmd_complete+0x784>)
   11c4a:	4798      	blx	r3
   11c4c:	4b1b      	ldr	r3, [pc, #108]	; (11cbc <spi_cmd_complete+0x78c>)
   11c4e:	0018      	movs	r0, r3
   11c50:	4b18      	ldr	r3, [pc, #96]	; (11cb4 <spi_cmd_complete+0x784>)
   11c52:	4798      	blx	r3
						result = N_FAIL;
   11c54:	2300      	movs	r3, #0
   11c56:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   11c58:	e0cb      	b.n	11df2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   11c5a:	4b1c      	ldr	r3, [pc, #112]	; (11ccc <spi_cmd_complete+0x79c>)
   11c5c:	781b      	ldrb	r3, [r3, #0]
   11c5e:	2b00      	cmp	r3, #0
   11c60:	d119      	bne.n	11c96 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   11c62:	2314      	movs	r3, #20
   11c64:	18fb      	adds	r3, r7, r3
   11c66:	2102      	movs	r1, #2
   11c68:	0018      	movs	r0, r3
   11c6a:	4b1c      	ldr	r3, [pc, #112]	; (11cdc <spi_cmd_complete+0x7ac>)
   11c6c:	4798      	blx	r3
   11c6e:	1e03      	subs	r3, r0, #0
   11c70:	d011      	beq.n	11c96 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   11c72:	23a6      	movs	r3, #166	; 0xa6
   11c74:	009a      	lsls	r2, r3, #2
   11c76:	490d      	ldr	r1, [pc, #52]	; (11cac <spi_cmd_complete+0x77c>)
   11c78:	4b0d      	ldr	r3, [pc, #52]	; (11cb0 <spi_cmd_complete+0x780>)
   11c7a:	0018      	movs	r0, r3
   11c7c:	4b0d      	ldr	r3, [pc, #52]	; (11cb4 <spi_cmd_complete+0x784>)
   11c7e:	4798      	blx	r3
   11c80:	4b19      	ldr	r3, [pc, #100]	; (11ce8 <spi_cmd_complete+0x7b8>)
   11c82:	0018      	movs	r0, r3
   11c84:	4b0b      	ldr	r3, [pc, #44]	; (11cb4 <spi_cmd_complete+0x784>)
   11c86:	4798      	blx	r3
   11c88:	4b0c      	ldr	r3, [pc, #48]	; (11cbc <spi_cmd_complete+0x78c>)
   11c8a:	0018      	movs	r0, r3
   11c8c:	4b09      	ldr	r3, [pc, #36]	; (11cb4 <spi_cmd_complete+0x784>)
   11c8e:	4798      	blx	r3
							result = N_FAIL;
   11c90:	2300      	movs	r3, #0
   11c92:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   11c94:	e0ad      	b.n	11df2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   11c96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   11c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   11c9a:	18d3      	adds	r3, r2, r3
   11c9c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   11c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   11ca0:	683a      	ldr	r2, [r7, #0]
   11ca2:	1ad3      	subs	r3, r2, r3
   11ca4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   11ca6:	e09e      	b.n	11de6 <spi_cmd_complete+0x8b6>
   11ca8:	0000022f 	.word	0x0000022f
   11cac:	00028124 	.word	0x00028124
   11cb0:	00027b10 	.word	0x00027b10
   11cb4:	0000b9b9 	.word	0x0000b9b9
   11cb8:	00027c08 	.word	0x00027c08
   11cbc:	00027b50 	.word	0x00027b50
   11cc0:	00000239 	.word	0x00000239
   11cc4:	00027c44 	.word	0x00027c44
   11cc8:	00027c78 	.word	0x00027c78
   11ccc:	20004340 	.word	0x20004340
   11cd0:	00000263 	.word	0x00000263
   11cd4:	00027ca8 	.word	0x00027ca8
   11cd8:	00027cd8 	.word	0x00027cd8
   11cdc:	00010e69 	.word	0x00010e69
   11ce0:	0000028e 	.word	0x0000028e
   11ce4:	00027d08 	.word	0x00027d08
   11ce8:	00027d3c 	.word	0x00027d3c
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   11cec:	683a      	ldr	r2, [r7, #0]
   11cee:	2380      	movs	r3, #128	; 0x80
   11cf0:	019b      	lsls	r3, r3, #6
   11cf2:	429a      	cmp	r2, r3
   11cf4:	d802      	bhi.n	11cfc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   11cf6:	683b      	ldr	r3, [r7, #0]
   11cf8:	65bb      	str	r3, [r7, #88]	; 0x58
   11cfa:	e002      	b.n	11d02 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   11cfc:	2380      	movs	r3, #128	; 0x80
   11cfe:	019b      	lsls	r3, r3, #6
   11d00:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   11d02:	230a      	movs	r3, #10
   11d04:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   11d06:	2317      	movs	r3, #23
   11d08:	18fb      	adds	r3, r7, r3
   11d0a:	2101      	movs	r1, #1
   11d0c:	0018      	movs	r0, r3
   11d0e:	4b3b      	ldr	r3, [pc, #236]	; (11dfc <spi_cmd_complete+0x8cc>)
   11d10:	4798      	blx	r3
   11d12:	1e03      	subs	r3, r0, #0
   11d14:	d011      	beq.n	11d3a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   11d16:	23ae      	movs	r3, #174	; 0xae
   11d18:	009a      	lsls	r2, r3, #2
   11d1a:	4939      	ldr	r1, [pc, #228]	; (11e00 <spi_cmd_complete+0x8d0>)
   11d1c:	4b39      	ldr	r3, [pc, #228]	; (11e04 <spi_cmd_complete+0x8d4>)
   11d1e:	0018      	movs	r0, r3
   11d20:	4b39      	ldr	r3, [pc, #228]	; (11e08 <spi_cmd_complete+0x8d8>)
   11d22:	4798      	blx	r3
   11d24:	4b39      	ldr	r3, [pc, #228]	; (11e0c <spi_cmd_complete+0x8dc>)
   11d26:	0018      	movs	r0, r3
   11d28:	4b37      	ldr	r3, [pc, #220]	; (11e08 <spi_cmd_complete+0x8d8>)
   11d2a:	4798      	blx	r3
   11d2c:	4b38      	ldr	r3, [pc, #224]	; (11e10 <spi_cmd_complete+0x8e0>)
   11d2e:	0018      	movs	r0, r3
   11d30:	4b35      	ldr	r3, [pc, #212]	; (11e08 <spi_cmd_complete+0x8d8>)
   11d32:	4798      	blx	r3
							result = N_FAIL;
   11d34:	2300      	movs	r3, #0
   11d36:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   11d38:	e010      	b.n	11d5c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   11d3a:	2317      	movs	r3, #23
   11d3c:	18fb      	adds	r3, r7, r3
   11d3e:	781b      	ldrb	r3, [r3, #0]
   11d40:	091b      	lsrs	r3, r3, #4
   11d42:	b2db      	uxtb	r3, r3
   11d44:	001a      	movs	r2, r3
   11d46:	230f      	movs	r3, #15
   11d48:	4013      	ands	r3, r2
   11d4a:	2b0f      	cmp	r3, #15
   11d4c:	d005      	beq.n	11d5a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   11d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   11d50:	1e5a      	subs	r2, r3, #1
   11d52:	667a      	str	r2, [r7, #100]	; 0x64
   11d54:	2b00      	cmp	r3, #0
   11d56:	d1d6      	bne.n	11d06 <spi_cmd_complete+0x7d6>
   11d58:	e000      	b.n	11d5c <spi_cmd_complete+0x82c>
							break;
   11d5a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   11d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11d5e:	2b00      	cmp	r3, #0
   11d60:	d046      	beq.n	11df0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   11d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   11d64:	687a      	ldr	r2, [r7, #4]
   11d66:	18d3      	adds	r3, r2, r3
   11d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
   11d6a:	b292      	uxth	r2, r2
   11d6c:	0011      	movs	r1, r2
   11d6e:	0018      	movs	r0, r3
   11d70:	4b22      	ldr	r3, [pc, #136]	; (11dfc <spi_cmd_complete+0x8cc>)
   11d72:	4798      	blx	r3
   11d74:	1e03      	subs	r3, r0, #0
   11d76:	d011      	beq.n	11d9c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   11d78:	23b2      	movs	r3, #178	; 0xb2
   11d7a:	009a      	lsls	r2, r3, #2
   11d7c:	4920      	ldr	r1, [pc, #128]	; (11e00 <spi_cmd_complete+0x8d0>)
   11d7e:	4b21      	ldr	r3, [pc, #132]	; (11e04 <spi_cmd_complete+0x8d4>)
   11d80:	0018      	movs	r0, r3
   11d82:	4b21      	ldr	r3, [pc, #132]	; (11e08 <spi_cmd_complete+0x8d8>)
   11d84:	4798      	blx	r3
   11d86:	4b23      	ldr	r3, [pc, #140]	; (11e14 <spi_cmd_complete+0x8e4>)
   11d88:	0018      	movs	r0, r3
   11d8a:	4b1f      	ldr	r3, [pc, #124]	; (11e08 <spi_cmd_complete+0x8d8>)
   11d8c:	4798      	blx	r3
   11d8e:	4b20      	ldr	r3, [pc, #128]	; (11e10 <spi_cmd_complete+0x8e0>)
   11d90:	0018      	movs	r0, r3
   11d92:	4b1d      	ldr	r3, [pc, #116]	; (11e08 <spi_cmd_complete+0x8d8>)
   11d94:	4798      	blx	r3
						result = N_FAIL;
   11d96:	2300      	movs	r3, #0
   11d98:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   11d9a:	e02a      	b.n	11df2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   11d9c:	4b1e      	ldr	r3, [pc, #120]	; (11e18 <spi_cmd_complete+0x8e8>)
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	2b00      	cmp	r3, #0
   11da2:	d118      	bne.n	11dd6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   11da4:	2314      	movs	r3, #20
   11da6:	18fb      	adds	r3, r7, r3
   11da8:	2102      	movs	r1, #2
   11daa:	0018      	movs	r0, r3
   11dac:	4b13      	ldr	r3, [pc, #76]	; (11dfc <spi_cmd_complete+0x8cc>)
   11dae:	4798      	blx	r3
   11db0:	1e03      	subs	r3, r0, #0
   11db2:	d010      	beq.n	11dd6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   11db4:	4a19      	ldr	r2, [pc, #100]	; (11e1c <spi_cmd_complete+0x8ec>)
   11db6:	4912      	ldr	r1, [pc, #72]	; (11e00 <spi_cmd_complete+0x8d0>)
   11db8:	4b12      	ldr	r3, [pc, #72]	; (11e04 <spi_cmd_complete+0x8d4>)
   11dba:	0018      	movs	r0, r3
   11dbc:	4b12      	ldr	r3, [pc, #72]	; (11e08 <spi_cmd_complete+0x8d8>)
   11dbe:	4798      	blx	r3
   11dc0:	4b17      	ldr	r3, [pc, #92]	; (11e20 <spi_cmd_complete+0x8f0>)
   11dc2:	0018      	movs	r0, r3
   11dc4:	4b10      	ldr	r3, [pc, #64]	; (11e08 <spi_cmd_complete+0x8d8>)
   11dc6:	4798      	blx	r3
   11dc8:	4b11      	ldr	r3, [pc, #68]	; (11e10 <spi_cmd_complete+0x8e0>)
   11dca:	0018      	movs	r0, r3
   11dcc:	4b0e      	ldr	r3, [pc, #56]	; (11e08 <spi_cmd_complete+0x8d8>)
   11dce:	4798      	blx	r3
							result = N_FAIL;
   11dd0:	2300      	movs	r3, #0
   11dd2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   11dd4:	e00d      	b.n	11df2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   11dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   11dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   11dda:	18d3      	adds	r3, r2, r3
   11ddc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   11dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   11de0:	683a      	ldr	r2, [r7, #0]
   11de2:	1ad3      	subs	r3, r2, r3
   11de4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   11de6:	683b      	ldr	r3, [r7, #0]
   11de8:	2b00      	cmp	r3, #0
   11dea:	d000      	beq.n	11dee <spi_cmd_complete+0x8be>
   11dec:	e77e      	b.n	11cec <spi_cmd_complete+0x7bc>
   11dee:	e000      	b.n	11df2 <spi_cmd_complete+0x8c2>
						break;
   11df0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   11df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   11df4:	0018      	movs	r0, r3
   11df6:	46bd      	mov	sp, r7
   11df8:	b01f      	add	sp, #124	; 0x7c
   11dfa:	bd90      	pop	{r4, r7, pc}
   11dfc:	00010e69 	.word	0x00010e69
   11e00:	00028124 	.word	0x00028124
   11e04:	00027b10 	.word	0x00027b10
   11e08:	0000b9b9 	.word	0x0000b9b9
   11e0c:	00027d74 	.word	0x00027d74
   11e10:	00027b50 	.word	0x00027b50
   11e14:	00027d08 	.word	0x00027d08
   11e18:	20004340 	.word	0x20004340
   11e1c:	000002d2 	.word	0x000002d2
   11e20:	00027d3c 	.word	0x00027d3c

00011e24 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   11e24:	b580      	push	{r7, lr}
   11e26:	b086      	sub	sp, #24
   11e28:	af00      	add	r7, sp, #0
   11e2a:	6078      	str	r0, [r7, #4]
   11e2c:	000a      	movs	r2, r1
   11e2e:	1cbb      	adds	r3, r7, #2
   11e30:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   11e32:	2313      	movs	r3, #19
   11e34:	18fb      	adds	r3, r7, r3
   11e36:	2201      	movs	r2, #1
   11e38:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   11e3a:	230c      	movs	r3, #12
   11e3c:	18fb      	adds	r3, r7, r3
   11e3e:	2200      	movs	r2, #0
   11e40:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   11e42:	2316      	movs	r3, #22
   11e44:	18fb      	adds	r3, r7, r3
   11e46:	2200      	movs	r2, #0
   11e48:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   11e4a:	1cbb      	adds	r3, r7, #2
   11e4c:	881a      	ldrh	r2, [r3, #0]
   11e4e:	2380      	movs	r3, #128	; 0x80
   11e50:	019b      	lsls	r3, r3, #6
   11e52:	429a      	cmp	r2, r3
   11e54:	d805      	bhi.n	11e62 <spi_data_write+0x3e>
			nbytes = sz;
   11e56:	2314      	movs	r3, #20
   11e58:	18fb      	adds	r3, r7, r3
   11e5a:	1cba      	adds	r2, r7, #2
   11e5c:	8812      	ldrh	r2, [r2, #0]
   11e5e:	801a      	strh	r2, [r3, #0]
   11e60:	e004      	b.n	11e6c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   11e62:	2314      	movs	r3, #20
   11e64:	18fb      	adds	r3, r7, r3
   11e66:	2280      	movs	r2, #128	; 0x80
   11e68:	0192      	lsls	r2, r2, #6
   11e6a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   11e6c:	2311      	movs	r3, #17
   11e6e:	18fb      	adds	r3, r7, r3
   11e70:	22f0      	movs	r2, #240	; 0xf0
   11e72:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   11e74:	2316      	movs	r3, #22
   11e76:	18fb      	adds	r3, r7, r3
   11e78:	2200      	movs	r2, #0
   11e7a:	5e9b      	ldrsh	r3, [r3, r2]
   11e7c:	2b00      	cmp	r3, #0
   11e7e:	d10f      	bne.n	11ea0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   11e80:	1cbb      	adds	r3, r7, #2
   11e82:	881a      	ldrh	r2, [r3, #0]
   11e84:	2380      	movs	r3, #128	; 0x80
   11e86:	019b      	lsls	r3, r3, #6
   11e88:	429a      	cmp	r2, r3
   11e8a:	d804      	bhi.n	11e96 <spi_data_write+0x72>
				order = 0x3;
   11e8c:	2312      	movs	r3, #18
   11e8e:	18fb      	adds	r3, r7, r3
   11e90:	2203      	movs	r2, #3
   11e92:	701a      	strb	r2, [r3, #0]
   11e94:	e013      	b.n	11ebe <spi_data_write+0x9a>
			else
				order = 0x1;
   11e96:	2312      	movs	r3, #18
   11e98:	18fb      	adds	r3, r7, r3
   11e9a:	2201      	movs	r2, #1
   11e9c:	701a      	strb	r2, [r3, #0]
   11e9e:	e00e      	b.n	11ebe <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   11ea0:	1cbb      	adds	r3, r7, #2
   11ea2:	881a      	ldrh	r2, [r3, #0]
   11ea4:	2380      	movs	r3, #128	; 0x80
   11ea6:	019b      	lsls	r3, r3, #6
   11ea8:	429a      	cmp	r2, r3
   11eaa:	d804      	bhi.n	11eb6 <spi_data_write+0x92>
				order = 0x3;
   11eac:	2312      	movs	r3, #18
   11eae:	18fb      	adds	r3, r7, r3
   11eb0:	2203      	movs	r2, #3
   11eb2:	701a      	strb	r2, [r3, #0]
   11eb4:	e003      	b.n	11ebe <spi_data_write+0x9a>
			else
				order = 0x2;
   11eb6:	2312      	movs	r3, #18
   11eb8:	18fb      	adds	r3, r7, r3
   11eba:	2202      	movs	r2, #2
   11ebc:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   11ebe:	2311      	movs	r3, #17
   11ec0:	18fb      	adds	r3, r7, r3
   11ec2:	781a      	ldrb	r2, [r3, #0]
   11ec4:	2312      	movs	r3, #18
   11ec6:	18fb      	adds	r3, r7, r3
   11ec8:	781b      	ldrb	r3, [r3, #0]
   11eca:	4313      	orrs	r3, r2
   11ecc:	b2da      	uxtb	r2, r3
   11ece:	2311      	movs	r3, #17
   11ed0:	18fb      	adds	r3, r7, r3
   11ed2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   11ed4:	2311      	movs	r3, #17
   11ed6:	18fb      	adds	r3, r7, r3
   11ed8:	2101      	movs	r1, #1
   11eda:	0018      	movs	r0, r3
   11edc:	4b3c      	ldr	r3, [pc, #240]	; (11fd0 <spi_data_write+0x1ac>)
   11ede:	4798      	blx	r3
   11ee0:	1e03      	subs	r3, r0, #0
   11ee2:	d012      	beq.n	11f0a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   11ee4:	4a3b      	ldr	r2, [pc, #236]	; (11fd4 <spi_data_write+0x1b0>)
   11ee6:	493c      	ldr	r1, [pc, #240]	; (11fd8 <spi_data_write+0x1b4>)
   11ee8:	4b3c      	ldr	r3, [pc, #240]	; (11fdc <spi_data_write+0x1b8>)
   11eea:	0018      	movs	r0, r3
   11eec:	4b3c      	ldr	r3, [pc, #240]	; (11fe0 <spi_data_write+0x1bc>)
   11eee:	4798      	blx	r3
   11ef0:	4b3c      	ldr	r3, [pc, #240]	; (11fe4 <spi_data_write+0x1c0>)
   11ef2:	0018      	movs	r0, r3
   11ef4:	4b3a      	ldr	r3, [pc, #232]	; (11fe0 <spi_data_write+0x1bc>)
   11ef6:	4798      	blx	r3
   11ef8:	4b3b      	ldr	r3, [pc, #236]	; (11fe8 <spi_data_write+0x1c4>)
   11efa:	0018      	movs	r0, r3
   11efc:	4b38      	ldr	r3, [pc, #224]	; (11fe0 <spi_data_write+0x1bc>)
   11efe:	4798      	blx	r3
			result = N_FAIL;
   11f00:	2313      	movs	r3, #19
   11f02:	18fb      	adds	r3, r7, r3
   11f04:	2200      	movs	r2, #0
   11f06:	701a      	strb	r2, [r3, #0]
			break;
   11f08:	e059      	b.n	11fbe <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   11f0a:	2316      	movs	r3, #22
   11f0c:	18fb      	adds	r3, r7, r3
   11f0e:	2200      	movs	r2, #0
   11f10:	5e9b      	ldrsh	r3, [r3, r2]
   11f12:	687a      	ldr	r2, [r7, #4]
   11f14:	18d2      	adds	r2, r2, r3
   11f16:	2314      	movs	r3, #20
   11f18:	18fb      	adds	r3, r7, r3
   11f1a:	881b      	ldrh	r3, [r3, #0]
   11f1c:	0019      	movs	r1, r3
   11f1e:	0010      	movs	r0, r2
   11f20:	4b2b      	ldr	r3, [pc, #172]	; (11fd0 <spi_data_write+0x1ac>)
   11f22:	4798      	blx	r3
   11f24:	1e03      	subs	r3, r0, #0
   11f26:	d012      	beq.n	11f4e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   11f28:	4a30      	ldr	r2, [pc, #192]	; (11fec <spi_data_write+0x1c8>)
   11f2a:	492b      	ldr	r1, [pc, #172]	; (11fd8 <spi_data_write+0x1b4>)
   11f2c:	4b2b      	ldr	r3, [pc, #172]	; (11fdc <spi_data_write+0x1b8>)
   11f2e:	0018      	movs	r0, r3
   11f30:	4b2b      	ldr	r3, [pc, #172]	; (11fe0 <spi_data_write+0x1bc>)
   11f32:	4798      	blx	r3
   11f34:	4b2e      	ldr	r3, [pc, #184]	; (11ff0 <spi_data_write+0x1cc>)
   11f36:	0018      	movs	r0, r3
   11f38:	4b29      	ldr	r3, [pc, #164]	; (11fe0 <spi_data_write+0x1bc>)
   11f3a:	4798      	blx	r3
   11f3c:	4b2a      	ldr	r3, [pc, #168]	; (11fe8 <spi_data_write+0x1c4>)
   11f3e:	0018      	movs	r0, r3
   11f40:	4b27      	ldr	r3, [pc, #156]	; (11fe0 <spi_data_write+0x1bc>)
   11f42:	4798      	blx	r3
			result = N_FAIL;
   11f44:	2313      	movs	r3, #19
   11f46:	18fb      	adds	r3, r7, r3
   11f48:	2200      	movs	r2, #0
   11f4a:	701a      	strb	r2, [r3, #0]
			break;
   11f4c:	e037      	b.n	11fbe <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   11f4e:	4b29      	ldr	r3, [pc, #164]	; (11ff4 <spi_data_write+0x1d0>)
   11f50:	781b      	ldrb	r3, [r3, #0]
   11f52:	2b00      	cmp	r3, #0
   11f54:	d11b      	bne.n	11f8e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   11f56:	230c      	movs	r3, #12
   11f58:	18fb      	adds	r3, r7, r3
   11f5a:	2102      	movs	r1, #2
   11f5c:	0018      	movs	r0, r3
   11f5e:	4b1c      	ldr	r3, [pc, #112]	; (11fd0 <spi_data_write+0x1ac>)
   11f60:	4798      	blx	r3
   11f62:	1e03      	subs	r3, r0, #0
   11f64:	d013      	beq.n	11f8e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   11f66:	23d7      	movs	r3, #215	; 0xd7
   11f68:	009a      	lsls	r2, r3, #2
   11f6a:	491b      	ldr	r1, [pc, #108]	; (11fd8 <spi_data_write+0x1b4>)
   11f6c:	4b1b      	ldr	r3, [pc, #108]	; (11fdc <spi_data_write+0x1b8>)
   11f6e:	0018      	movs	r0, r3
   11f70:	4b1b      	ldr	r3, [pc, #108]	; (11fe0 <spi_data_write+0x1bc>)
   11f72:	4798      	blx	r3
   11f74:	4b20      	ldr	r3, [pc, #128]	; (11ff8 <spi_data_write+0x1d4>)
   11f76:	0018      	movs	r0, r3
   11f78:	4b19      	ldr	r3, [pc, #100]	; (11fe0 <spi_data_write+0x1bc>)
   11f7a:	4798      	blx	r3
   11f7c:	4b1a      	ldr	r3, [pc, #104]	; (11fe8 <spi_data_write+0x1c4>)
   11f7e:	0018      	movs	r0, r3
   11f80:	4b17      	ldr	r3, [pc, #92]	; (11fe0 <spi_data_write+0x1bc>)
   11f82:	4798      	blx	r3
				result = N_FAIL;
   11f84:	2313      	movs	r3, #19
   11f86:	18fb      	adds	r3, r7, r3
   11f88:	2200      	movs	r2, #0
   11f8a:	701a      	strb	r2, [r3, #0]
				break;
   11f8c:	e017      	b.n	11fbe <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   11f8e:	2316      	movs	r3, #22
   11f90:	18fb      	adds	r3, r7, r3
   11f92:	881a      	ldrh	r2, [r3, #0]
   11f94:	2314      	movs	r3, #20
   11f96:	18fb      	adds	r3, r7, r3
   11f98:	881b      	ldrh	r3, [r3, #0]
   11f9a:	18d3      	adds	r3, r2, r3
   11f9c:	b29a      	uxth	r2, r3
   11f9e:	2316      	movs	r3, #22
   11fa0:	18fb      	adds	r3, r7, r3
   11fa2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   11fa4:	1cbb      	adds	r3, r7, #2
   11fa6:	1cb9      	adds	r1, r7, #2
   11fa8:	2214      	movs	r2, #20
   11faa:	18ba      	adds	r2, r7, r2
   11fac:	8809      	ldrh	r1, [r1, #0]
   11fae:	8812      	ldrh	r2, [r2, #0]
   11fb0:	1a8a      	subs	r2, r1, r2
   11fb2:	801a      	strh	r2, [r3, #0]
	} while (sz);
   11fb4:	1cbb      	adds	r3, r7, #2
   11fb6:	881b      	ldrh	r3, [r3, #0]
   11fb8:	2b00      	cmp	r3, #0
   11fba:	d000      	beq.n	11fbe <spi_data_write+0x19a>
   11fbc:	e745      	b.n	11e4a <spi_data_write+0x26>


	return result;
   11fbe:	2313      	movs	r3, #19
   11fc0:	18fb      	adds	r3, r7, r3
   11fc2:	781b      	ldrb	r3, [r3, #0]
   11fc4:	b25b      	sxtb	r3, r3
}
   11fc6:	0018      	movs	r0, r3
   11fc8:	46bd      	mov	sp, r7
   11fca:	b006      	add	sp, #24
   11fcc:	bd80      	pop	{r7, pc}
   11fce:	46c0      	nop			; (mov r8, r8)
   11fd0:	00010ead 	.word	0x00010ead
   11fd4:	00000349 	.word	0x00000349
   11fd8:	00028138 	.word	0x00028138
   11fdc:	00027b10 	.word	0x00027b10
   11fe0:	0000b9b9 	.word	0x0000b9b9
   11fe4:	00027dd8 	.word	0x00027dd8
   11fe8:	00027b50 	.word	0x00027b50
   11fec:	00000352 	.word	0x00000352
   11ff0:	00027e10 	.word	0x00027e10
   11ff4:	20004340 	.word	0x20004340
   11ff8:	00027e44 	.word	0x00027e44

00011ffc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   11ffc:	b590      	push	{r4, r7, lr}
   11ffe:	b087      	sub	sp, #28
   12000:	af02      	add	r7, sp, #8
   12002:	6078      	str	r0, [r7, #4]
   12004:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   12006:	230f      	movs	r3, #15
   12008:	18fb      	adds	r3, r7, r3
   1200a:	220a      	movs	r2, #10
   1200c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   1200e:	230c      	movs	r3, #12
   12010:	18fb      	adds	r3, r7, r3
   12012:	2201      	movs	r2, #1
   12014:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   12016:	230e      	movs	r3, #14
   12018:	18fb      	adds	r3, r7, r3
   1201a:	22c9      	movs	r2, #201	; 0xc9
   1201c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   1201e:	230d      	movs	r3, #13
   12020:	18fb      	adds	r3, r7, r3
   12022:	2200      	movs	r2, #0
   12024:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   12026:	687b      	ldr	r3, [r7, #4]
   12028:	2b30      	cmp	r3, #48	; 0x30
   1202a:	d808      	bhi.n	1203e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   1202c:	230e      	movs	r3, #14
   1202e:	18fb      	adds	r3, r7, r3
   12030:	22c3      	movs	r2, #195	; 0xc3
   12032:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   12034:	230d      	movs	r3, #13
   12036:	18fb      	adds	r3, r7, r3
   12038:	2201      	movs	r2, #1
   1203a:	701a      	strb	r2, [r3, #0]
   1203c:	e007      	b.n	1204e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   1203e:	230e      	movs	r3, #14
   12040:	18fb      	adds	r3, r7, r3
   12042:	22c9      	movs	r2, #201	; 0xc9
   12044:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   12046:	230d      	movs	r3, #13
   12048:	18fb      	adds	r3, r7, r3
   1204a:	2200      	movs	r2, #0
   1204c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1204e:	003a      	movs	r2, r7
   12050:	6879      	ldr	r1, [r7, #4]
   12052:	230e      	movs	r3, #14
   12054:	18fb      	adds	r3, r7, r3
   12056:	7818      	ldrb	r0, [r3, #0]
   12058:	230d      	movs	r3, #13
   1205a:	18fb      	adds	r3, r7, r3
   1205c:	781b      	ldrb	r3, [r3, #0]
   1205e:	9300      	str	r3, [sp, #0]
   12060:	2304      	movs	r3, #4
   12062:	4c2e      	ldr	r4, [pc, #184]	; (1211c <spi_write_reg+0x120>)
   12064:	47a0      	blx	r4
   12066:	0002      	movs	r2, r0
   12068:	230c      	movs	r3, #12
   1206a:	18fb      	adds	r3, r7, r3
   1206c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   1206e:	230c      	movs	r3, #12
   12070:	18fb      	adds	r3, r7, r3
   12072:	781b      	ldrb	r3, [r3, #0]
   12074:	b25b      	sxtb	r3, r3
   12076:	2b01      	cmp	r3, #1
   12078:	d010      	beq.n	1209c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   1207a:	4a29      	ldr	r2, [pc, #164]	; (12120 <spi_write_reg+0x124>)
   1207c:	4929      	ldr	r1, [pc, #164]	; (12124 <spi_write_reg+0x128>)
   1207e:	4b2a      	ldr	r3, [pc, #168]	; (12128 <spi_write_reg+0x12c>)
   12080:	0018      	movs	r0, r3
   12082:	4b2a      	ldr	r3, [pc, #168]	; (1212c <spi_write_reg+0x130>)
   12084:	4798      	blx	r3
   12086:	687a      	ldr	r2, [r7, #4]
   12088:	4b29      	ldr	r3, [pc, #164]	; (12130 <spi_write_reg+0x134>)
   1208a:	0011      	movs	r1, r2
   1208c:	0018      	movs	r0, r3
   1208e:	4b27      	ldr	r3, [pc, #156]	; (1212c <spi_write_reg+0x130>)
   12090:	4798      	blx	r3
   12092:	4b28      	ldr	r3, [pc, #160]	; (12134 <spi_write_reg+0x138>)
   12094:	0018      	movs	r0, r3
   12096:	4b25      	ldr	r3, [pc, #148]	; (1212c <spi_write_reg+0x130>)
   12098:	4798      	blx	r3
		goto _FAIL_;
   1209a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   1209c:	230c      	movs	r3, #12
   1209e:	18fb      	adds	r3, r7, r3
   120a0:	781b      	ldrb	r3, [r3, #0]
   120a2:	b25b      	sxtb	r3, r3
   120a4:	2b01      	cmp	r3, #1
   120a6:	d030      	beq.n	1210a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   120a8:	2001      	movs	r0, #1
   120aa:	4b23      	ldr	r3, [pc, #140]	; (12138 <spi_write_reg+0x13c>)
   120ac:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   120ae:	2300      	movs	r3, #0
   120b0:	9300      	str	r3, [sp, #0]
   120b2:	2300      	movs	r3, #0
   120b4:	2200      	movs	r2, #0
   120b6:	2100      	movs	r1, #0
   120b8:	20cf      	movs	r0, #207	; 0xcf
   120ba:	4c20      	ldr	r4, [pc, #128]	; (1213c <spi_write_reg+0x140>)
   120bc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   120be:	20cf      	movs	r0, #207	; 0xcf
   120c0:	4b1f      	ldr	r3, [pc, #124]	; (12140 <spi_write_reg+0x144>)
   120c2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   120c4:	23ea      	movs	r3, #234	; 0xea
   120c6:	009a      	lsls	r2, r3, #2
   120c8:	4916      	ldr	r1, [pc, #88]	; (12124 <spi_write_reg+0x128>)
   120ca:	4b17      	ldr	r3, [pc, #92]	; (12128 <spi_write_reg+0x12c>)
   120cc:	0018      	movs	r0, r3
   120ce:	4b17      	ldr	r3, [pc, #92]	; (1212c <spi_write_reg+0x130>)
   120d0:	4798      	blx	r3
   120d2:	230f      	movs	r3, #15
   120d4:	18fb      	adds	r3, r7, r3
   120d6:	7819      	ldrb	r1, [r3, #0]
   120d8:	683b      	ldr	r3, [r7, #0]
   120da:	687a      	ldr	r2, [r7, #4]
   120dc:	4819      	ldr	r0, [pc, #100]	; (12144 <spi_write_reg+0x148>)
   120de:	4c13      	ldr	r4, [pc, #76]	; (1212c <spi_write_reg+0x130>)
   120e0:	47a0      	blx	r4
   120e2:	4b14      	ldr	r3, [pc, #80]	; (12134 <spi_write_reg+0x138>)
   120e4:	0018      	movs	r0, r3
   120e6:	4b11      	ldr	r3, [pc, #68]	; (1212c <spi_write_reg+0x130>)
   120e8:	4798      	blx	r3
		nm_bsp_sleep(1);
   120ea:	2001      	movs	r0, #1
   120ec:	4b12      	ldr	r3, [pc, #72]	; (12138 <spi_write_reg+0x13c>)
   120ee:	4798      	blx	r3
		retry--;
   120f0:	230f      	movs	r3, #15
   120f2:	18fb      	adds	r3, r7, r3
   120f4:	781a      	ldrb	r2, [r3, #0]
   120f6:	230f      	movs	r3, #15
   120f8:	18fb      	adds	r3, r7, r3
   120fa:	3a01      	subs	r2, #1
   120fc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   120fe:	230f      	movs	r3, #15
   12100:	18fb      	adds	r3, r7, r3
   12102:	781b      	ldrb	r3, [r3, #0]
   12104:	2b00      	cmp	r3, #0
   12106:	d000      	beq.n	1210a <spi_write_reg+0x10e>
   12108:	e78d      	b.n	12026 <spi_write_reg+0x2a>
	}

	return result;
   1210a:	230c      	movs	r3, #12
   1210c:	18fb      	adds	r3, r7, r3
   1210e:	781b      	ldrb	r3, [r3, #0]
   12110:	b25b      	sxtb	r3, r3
}
   12112:	0018      	movs	r0, r3
   12114:	46bd      	mov	sp, r7
   12116:	b005      	add	sp, #20
   12118:	bd90      	pop	{r4, r7, pc}
   1211a:	46c0      	nop			; (mov r8, r8)
   1211c:	00011531 	.word	0x00011531
   12120:	0000039d 	.word	0x0000039d
   12124:	00028148 	.word	0x00028148
   12128:	00027b10 	.word	0x00027b10
   1212c:	0000b9b9 	.word	0x0000b9b9
   12130:	00027e7c 	.word	0x00027e7c
   12134:	00027b50 	.word	0x00027b50
   12138:	0000de71 	.word	0x0000de71
   1213c:	00010fb5 	.word	0x00010fb5
   12140:	000113f5 	.word	0x000113f5
   12144:	00027ea8 	.word	0x00027ea8

00012148 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   12148:	b590      	push	{r4, r7, lr}
   1214a:	b089      	sub	sp, #36	; 0x24
   1214c:	af02      	add	r7, sp, #8
   1214e:	60f8      	str	r0, [r7, #12]
   12150:	60b9      	str	r1, [r7, #8]
   12152:	1dbb      	adds	r3, r7, #6
   12154:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   12156:	2316      	movs	r3, #22
   12158:	18fb      	adds	r3, r7, r3
   1215a:	220a      	movs	r2, #10
   1215c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   1215e:	2315      	movs	r3, #21
   12160:	18fb      	adds	r3, r7, r3
   12162:	22c7      	movs	r2, #199	; 0xc7
   12164:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   12166:	1dbb      	adds	r3, r7, #6
   12168:	881a      	ldrh	r2, [r3, #0]
   1216a:	68f9      	ldr	r1, [r7, #12]
   1216c:	2315      	movs	r3, #21
   1216e:	18fb      	adds	r3, r7, r3
   12170:	7818      	ldrb	r0, [r3, #0]
   12172:	2300      	movs	r3, #0
   12174:	9300      	str	r3, [sp, #0]
   12176:	0013      	movs	r3, r2
   12178:	2200      	movs	r2, #0
   1217a:	4c4d      	ldr	r4, [pc, #308]	; (122b0 <nm_spi_write+0x168>)
   1217c:	47a0      	blx	r4
   1217e:	0002      	movs	r2, r0
   12180:	2317      	movs	r3, #23
   12182:	18fb      	adds	r3, r7, r3
   12184:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   12186:	2317      	movs	r3, #23
   12188:	18fb      	adds	r3, r7, r3
   1218a:	781b      	ldrb	r3, [r3, #0]
   1218c:	b25b      	sxtb	r3, r3
   1218e:	2b01      	cmp	r3, #1
   12190:	d010      	beq.n	121b4 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   12192:	4a48      	ldr	r2, [pc, #288]	; (122b4 <nm_spi_write+0x16c>)
   12194:	4948      	ldr	r1, [pc, #288]	; (122b8 <nm_spi_write+0x170>)
   12196:	4b49      	ldr	r3, [pc, #292]	; (122bc <nm_spi_write+0x174>)
   12198:	0018      	movs	r0, r3
   1219a:	4b49      	ldr	r3, [pc, #292]	; (122c0 <nm_spi_write+0x178>)
   1219c:	4798      	blx	r3
   1219e:	68fa      	ldr	r2, [r7, #12]
   121a0:	4b48      	ldr	r3, [pc, #288]	; (122c4 <nm_spi_write+0x17c>)
   121a2:	0011      	movs	r1, r2
   121a4:	0018      	movs	r0, r3
   121a6:	4b46      	ldr	r3, [pc, #280]	; (122c0 <nm_spi_write+0x178>)
   121a8:	4798      	blx	r3
   121aa:	4b47      	ldr	r3, [pc, #284]	; (122c8 <nm_spi_write+0x180>)
   121ac:	0018      	movs	r0, r3
   121ae:	4b44      	ldr	r3, [pc, #272]	; (122c0 <nm_spi_write+0x178>)
   121b0:	4798      	blx	r3
		goto _FAIL_;
   121b2:	e03e      	b.n	12232 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   121b4:	2317      	movs	r3, #23
   121b6:	18fc      	adds	r4, r7, r3
   121b8:	1dbb      	adds	r3, r7, #6
   121ba:	881a      	ldrh	r2, [r3, #0]
   121bc:	68bb      	ldr	r3, [r7, #8]
   121be:	0011      	movs	r1, r2
   121c0:	0018      	movs	r0, r3
   121c2:	4b42      	ldr	r3, [pc, #264]	; (122cc <nm_spi_write+0x184>)
   121c4:	4798      	blx	r3
   121c6:	0003      	movs	r3, r0
   121c8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   121ca:	2317      	movs	r3, #23
   121cc:	18fb      	adds	r3, r7, r3
   121ce:	781b      	ldrb	r3, [r3, #0]
   121d0:	b25b      	sxtb	r3, r3
   121d2:	2b01      	cmp	r3, #1
   121d4:	d00e      	beq.n	121f4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   121d6:	4a3e      	ldr	r2, [pc, #248]	; (122d0 <nm_spi_write+0x188>)
   121d8:	4937      	ldr	r1, [pc, #220]	; (122b8 <nm_spi_write+0x170>)
   121da:	4b38      	ldr	r3, [pc, #224]	; (122bc <nm_spi_write+0x174>)
   121dc:	0018      	movs	r0, r3
   121de:	4b38      	ldr	r3, [pc, #224]	; (122c0 <nm_spi_write+0x178>)
   121e0:	4798      	blx	r3
   121e2:	4b3c      	ldr	r3, [pc, #240]	; (122d4 <nm_spi_write+0x18c>)
   121e4:	0018      	movs	r0, r3
   121e6:	4b36      	ldr	r3, [pc, #216]	; (122c0 <nm_spi_write+0x178>)
   121e8:	4798      	blx	r3
   121ea:	4b37      	ldr	r3, [pc, #220]	; (122c8 <nm_spi_write+0x180>)
   121ec:	0018      	movs	r0, r3
   121ee:	4b34      	ldr	r3, [pc, #208]	; (122c0 <nm_spi_write+0x178>)
   121f0:	4798      	blx	r3
		goto _FAIL_;
   121f2:	e01e      	b.n	12232 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   121f4:	2317      	movs	r3, #23
   121f6:	18fc      	adds	r4, r7, r3
   121f8:	2315      	movs	r3, #21
   121fa:	18fb      	adds	r3, r7, r3
   121fc:	781b      	ldrb	r3, [r3, #0]
   121fe:	0018      	movs	r0, r3
   12200:	4b35      	ldr	r3, [pc, #212]	; (122d8 <nm_spi_write+0x190>)
   12202:	4798      	blx	r3
   12204:	0003      	movs	r3, r0
   12206:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   12208:	2317      	movs	r3, #23
   1220a:	18fb      	adds	r3, r7, r3
   1220c:	781b      	ldrb	r3, [r3, #0]
   1220e:	b25b      	sxtb	r3, r3
   12210:	2b01      	cmp	r3, #1
   12212:	d00e      	beq.n	12232 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   12214:	4a31      	ldr	r2, [pc, #196]	; (122dc <nm_spi_write+0x194>)
   12216:	4928      	ldr	r1, [pc, #160]	; (122b8 <nm_spi_write+0x170>)
   12218:	4b28      	ldr	r3, [pc, #160]	; (122bc <nm_spi_write+0x174>)
   1221a:	0018      	movs	r0, r3
   1221c:	4b28      	ldr	r3, [pc, #160]	; (122c0 <nm_spi_write+0x178>)
   1221e:	4798      	blx	r3
   12220:	4b2c      	ldr	r3, [pc, #176]	; (122d4 <nm_spi_write+0x18c>)
   12222:	0018      	movs	r0, r3
   12224:	4b26      	ldr	r3, [pc, #152]	; (122c0 <nm_spi_write+0x178>)
   12226:	4798      	blx	r3
   12228:	4b27      	ldr	r3, [pc, #156]	; (122c8 <nm_spi_write+0x180>)
   1222a:	0018      	movs	r0, r3
   1222c:	4b24      	ldr	r3, [pc, #144]	; (122c0 <nm_spi_write+0x178>)
   1222e:	4798      	blx	r3
		goto _FAIL_;
   12230:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   12232:	2317      	movs	r3, #23
   12234:	18fb      	adds	r3, r7, r3
   12236:	781b      	ldrb	r3, [r3, #0]
   12238:	b25b      	sxtb	r3, r3
   1223a:	2b01      	cmp	r3, #1
   1223c:	d030      	beq.n	122a0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   1223e:	2001      	movs	r0, #1
   12240:	4b27      	ldr	r3, [pc, #156]	; (122e0 <nm_spi_write+0x198>)
   12242:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   12244:	2300      	movs	r3, #0
   12246:	9300      	str	r3, [sp, #0]
   12248:	2300      	movs	r3, #0
   1224a:	2200      	movs	r2, #0
   1224c:	2100      	movs	r1, #0
   1224e:	20cf      	movs	r0, #207	; 0xcf
   12250:	4c24      	ldr	r4, [pc, #144]	; (122e4 <nm_spi_write+0x19c>)
   12252:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   12254:	20cf      	movs	r0, #207	; 0xcf
   12256:	4b24      	ldr	r3, [pc, #144]	; (122e8 <nm_spi_write+0x1a0>)
   12258:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1225a:	4a24      	ldr	r2, [pc, #144]	; (122ec <nm_spi_write+0x1a4>)
   1225c:	4916      	ldr	r1, [pc, #88]	; (122b8 <nm_spi_write+0x170>)
   1225e:	4b17      	ldr	r3, [pc, #92]	; (122bc <nm_spi_write+0x174>)
   12260:	0018      	movs	r0, r3
   12262:	4b17      	ldr	r3, [pc, #92]	; (122c0 <nm_spi_write+0x178>)
   12264:	4798      	blx	r3
   12266:	2316      	movs	r3, #22
   12268:	18fb      	adds	r3, r7, r3
   1226a:	7819      	ldrb	r1, [r3, #0]
   1226c:	1dbb      	adds	r3, r7, #6
   1226e:	881b      	ldrh	r3, [r3, #0]
   12270:	68fa      	ldr	r2, [r7, #12]
   12272:	481f      	ldr	r0, [pc, #124]	; (122f0 <nm_spi_write+0x1a8>)
   12274:	4c12      	ldr	r4, [pc, #72]	; (122c0 <nm_spi_write+0x178>)
   12276:	47a0      	blx	r4
   12278:	4b13      	ldr	r3, [pc, #76]	; (122c8 <nm_spi_write+0x180>)
   1227a:	0018      	movs	r0, r3
   1227c:	4b10      	ldr	r3, [pc, #64]	; (122c0 <nm_spi_write+0x178>)
   1227e:	4798      	blx	r3
		nm_bsp_sleep(1);
   12280:	2001      	movs	r0, #1
   12282:	4b17      	ldr	r3, [pc, #92]	; (122e0 <nm_spi_write+0x198>)
   12284:	4798      	blx	r3
		retry--;
   12286:	2316      	movs	r3, #22
   12288:	18fb      	adds	r3, r7, r3
   1228a:	781a      	ldrb	r2, [r3, #0]
   1228c:	2316      	movs	r3, #22
   1228e:	18fb      	adds	r3, r7, r3
   12290:	3a01      	subs	r2, #1
   12292:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   12294:	2316      	movs	r3, #22
   12296:	18fb      	adds	r3, r7, r3
   12298:	781b      	ldrb	r3, [r3, #0]
   1229a:	2b00      	cmp	r3, #0
   1229c:	d000      	beq.n	122a0 <nm_spi_write+0x158>
   1229e:	e762      	b.n	12166 <nm_spi_write+0x1e>
	}


	return result;
   122a0:	2317      	movs	r3, #23
   122a2:	18fb      	adds	r3, r7, r3
   122a4:	781b      	ldrb	r3, [r3, #0]
   122a6:	b25b      	sxtb	r3, r3
}
   122a8:	0018      	movs	r0, r3
   122aa:	46bd      	mov	sp, r7
   122ac:	b007      	add	sp, #28
   122ae:	bd90      	pop	{r4, r7, pc}
   122b0:	00011531 	.word	0x00011531
   122b4:	000003cf 	.word	0x000003cf
   122b8:	00028158 	.word	0x00028158
   122bc:	00027b10 	.word	0x00027b10
   122c0:	0000b9b9 	.word	0x0000b9b9
   122c4:	00027ec4 	.word	0x00027ec4
   122c8:	00027b50 	.word	0x00027b50
   122cc:	00011e25 	.word	0x00011e25
   122d0:	000003d9 	.word	0x000003d9
   122d4:	00027ef4 	.word	0x00027ef4
   122d8:	000112f5 	.word	0x000112f5
   122dc:	000003e1 	.word	0x000003e1
   122e0:	0000de71 	.word	0x0000de71
   122e4:	00010fb5 	.word	0x00010fb5
   122e8:	000113f5 	.word	0x000113f5
   122ec:	000003eb 	.word	0x000003eb
   122f0:	00027f1c 	.word	0x00027f1c

000122f4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   122f4:	b590      	push	{r4, r7, lr}
   122f6:	b087      	sub	sp, #28
   122f8:	af02      	add	r7, sp, #8
   122fa:	6078      	str	r0, [r7, #4]
   122fc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   122fe:	230f      	movs	r3, #15
   12300:	18fb      	adds	r3, r7, r3
   12302:	220a      	movs	r2, #10
   12304:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   12306:	230c      	movs	r3, #12
   12308:	18fb      	adds	r3, r7, r3
   1230a:	2201      	movs	r2, #1
   1230c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   1230e:	230e      	movs	r3, #14
   12310:	18fb      	adds	r3, r7, r3
   12312:	22ca      	movs	r2, #202	; 0xca
   12314:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   12316:	230d      	movs	r3, #13
   12318:	18fb      	adds	r3, r7, r3
   1231a:	2200      	movs	r2, #0
   1231c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   1231e:	687b      	ldr	r3, [r7, #4]
   12320:	2bff      	cmp	r3, #255	; 0xff
   12322:	d808      	bhi.n	12336 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   12324:	230e      	movs	r3, #14
   12326:	18fb      	adds	r3, r7, r3
   12328:	22c4      	movs	r2, #196	; 0xc4
   1232a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   1232c:	230d      	movs	r3, #13
   1232e:	18fb      	adds	r3, r7, r3
   12330:	2201      	movs	r2, #1
   12332:	701a      	strb	r2, [r3, #0]
   12334:	e007      	b.n	12346 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   12336:	230e      	movs	r3, #14
   12338:	18fb      	adds	r3, r7, r3
   1233a:	22ca      	movs	r2, #202	; 0xca
   1233c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   1233e:	230d      	movs	r3, #13
   12340:	18fb      	adds	r3, r7, r3
   12342:	2200      	movs	r2, #0
   12344:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   12346:	2308      	movs	r3, #8
   12348:	18fa      	adds	r2, r7, r3
   1234a:	6879      	ldr	r1, [r7, #4]
   1234c:	230e      	movs	r3, #14
   1234e:	18fb      	adds	r3, r7, r3
   12350:	7818      	ldrb	r0, [r3, #0]
   12352:	230d      	movs	r3, #13
   12354:	18fb      	adds	r3, r7, r3
   12356:	781b      	ldrb	r3, [r3, #0]
   12358:	9300      	str	r3, [sp, #0]
   1235a:	2304      	movs	r3, #4
   1235c:	4c37      	ldr	r4, [pc, #220]	; (1243c <spi_read_reg+0x148>)
   1235e:	47a0      	blx	r4
   12360:	0002      	movs	r2, r0
   12362:	230c      	movs	r3, #12
   12364:	18fb      	adds	r3, r7, r3
   12366:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   12368:	230c      	movs	r3, #12
   1236a:	18fb      	adds	r3, r7, r3
   1236c:	781b      	ldrb	r3, [r3, #0]
   1236e:	b25b      	sxtb	r3, r3
   12370:	2b01      	cmp	r3, #1
   12372:	d010      	beq.n	12396 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   12374:	4a32      	ldr	r2, [pc, #200]	; (12440 <spi_read_reg+0x14c>)
   12376:	4933      	ldr	r1, [pc, #204]	; (12444 <spi_read_reg+0x150>)
   12378:	4b33      	ldr	r3, [pc, #204]	; (12448 <spi_read_reg+0x154>)
   1237a:	0018      	movs	r0, r3
   1237c:	4b33      	ldr	r3, [pc, #204]	; (1244c <spi_read_reg+0x158>)
   1237e:	4798      	blx	r3
   12380:	687a      	ldr	r2, [r7, #4]
   12382:	4b33      	ldr	r3, [pc, #204]	; (12450 <spi_read_reg+0x15c>)
   12384:	0011      	movs	r1, r2
   12386:	0018      	movs	r0, r3
   12388:	4b30      	ldr	r3, [pc, #192]	; (1244c <spi_read_reg+0x158>)
   1238a:	4798      	blx	r3
   1238c:	4b31      	ldr	r3, [pc, #196]	; (12454 <spi_read_reg+0x160>)
   1238e:	0018      	movs	r0, r3
   12390:	4b2e      	ldr	r3, [pc, #184]	; (1244c <spi_read_reg+0x158>)
   12392:	4798      	blx	r3
		goto _FAIL_;
   12394:	e014      	b.n	123c0 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   12396:	2308      	movs	r3, #8
   12398:	18fb      	adds	r3, r7, r3
   1239a:	781b      	ldrb	r3, [r3, #0]
   1239c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   1239e:	2308      	movs	r3, #8
   123a0:	18fb      	adds	r3, r7, r3
   123a2:	785b      	ldrb	r3, [r3, #1]
   123a4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   123a6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   123a8:	2308      	movs	r3, #8
   123aa:	18fb      	adds	r3, r7, r3
   123ac:	789b      	ldrb	r3, [r3, #2]
   123ae:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   123b0:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   123b2:	2308      	movs	r3, #8
   123b4:	18fb      	adds	r3, r7, r3
   123b6:	78db      	ldrb	r3, [r3, #3]
   123b8:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   123ba:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   123bc:	683b      	ldr	r3, [r7, #0]
   123be:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   123c0:	230c      	movs	r3, #12
   123c2:	18fb      	adds	r3, r7, r3
   123c4:	781b      	ldrb	r3, [r3, #0]
   123c6:	b25b      	sxtb	r3, r3
   123c8:	2b01      	cmp	r3, #1
   123ca:	d02f      	beq.n	1242c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   123cc:	2001      	movs	r0, #1
   123ce:	4b22      	ldr	r3, [pc, #136]	; (12458 <spi_read_reg+0x164>)
   123d0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   123d2:	2300      	movs	r3, #0
   123d4:	9300      	str	r3, [sp, #0]
   123d6:	2300      	movs	r3, #0
   123d8:	2200      	movs	r2, #0
   123da:	2100      	movs	r1, #0
   123dc:	20cf      	movs	r0, #207	; 0xcf
   123de:	4c1f      	ldr	r4, [pc, #124]	; (1245c <spi_read_reg+0x168>)
   123e0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   123e2:	20cf      	movs	r0, #207	; 0xcf
   123e4:	4b1e      	ldr	r3, [pc, #120]	; (12460 <spi_read_reg+0x16c>)
   123e6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   123e8:	4a1e      	ldr	r2, [pc, #120]	; (12464 <spi_read_reg+0x170>)
   123ea:	4916      	ldr	r1, [pc, #88]	; (12444 <spi_read_reg+0x150>)
   123ec:	4b16      	ldr	r3, [pc, #88]	; (12448 <spi_read_reg+0x154>)
   123ee:	0018      	movs	r0, r3
   123f0:	4b16      	ldr	r3, [pc, #88]	; (1244c <spi_read_reg+0x158>)
   123f2:	4798      	blx	r3
   123f4:	230f      	movs	r3, #15
   123f6:	18fb      	adds	r3, r7, r3
   123f8:	7819      	ldrb	r1, [r3, #0]
   123fa:	687a      	ldr	r2, [r7, #4]
   123fc:	4b1a      	ldr	r3, [pc, #104]	; (12468 <spi_read_reg+0x174>)
   123fe:	0018      	movs	r0, r3
   12400:	4b12      	ldr	r3, [pc, #72]	; (1244c <spi_read_reg+0x158>)
   12402:	4798      	blx	r3
   12404:	4b13      	ldr	r3, [pc, #76]	; (12454 <spi_read_reg+0x160>)
   12406:	0018      	movs	r0, r3
   12408:	4b10      	ldr	r3, [pc, #64]	; (1244c <spi_read_reg+0x158>)
   1240a:	4798      	blx	r3
		nm_bsp_sleep(1);
   1240c:	2001      	movs	r0, #1
   1240e:	4b12      	ldr	r3, [pc, #72]	; (12458 <spi_read_reg+0x164>)
   12410:	4798      	blx	r3
		retry--;
   12412:	230f      	movs	r3, #15
   12414:	18fb      	adds	r3, r7, r3
   12416:	781a      	ldrb	r2, [r3, #0]
   12418:	230f      	movs	r3, #15
   1241a:	18fb      	adds	r3, r7, r3
   1241c:	3a01      	subs	r2, #1
   1241e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   12420:	230f      	movs	r3, #15
   12422:	18fb      	adds	r3, r7, r3
   12424:	781b      	ldrb	r3, [r3, #0]
   12426:	2b00      	cmp	r3, #0
   12428:	d000      	beq.n	1242c <spi_read_reg+0x138>
   1242a:	e778      	b.n	1231e <spi_read_reg+0x2a>
	}
		
	return result;
   1242c:	230c      	movs	r3, #12
   1242e:	18fb      	adds	r3, r7, r3
   12430:	781b      	ldrb	r3, [r3, #0]
   12432:	b25b      	sxtb	r3, r3
}
   12434:	0018      	movs	r0, r3
   12436:	46bd      	mov	sp, r7
   12438:	b005      	add	sp, #20
   1243a:	bd90      	pop	{r4, r7, pc}
   1243c:	00011531 	.word	0x00011531
   12440:	00000423 	.word	0x00000423
   12444:	00028168 	.word	0x00028168
   12448:	00027b10 	.word	0x00027b10
   1244c:	0000b9b9 	.word	0x0000b9b9
   12450:	00027f38 	.word	0x00027f38
   12454:	00027b50 	.word	0x00027b50
   12458:	0000de71 	.word	0x0000de71
   1245c:	00010fb5 	.word	0x00010fb5
   12460:	000113f5 	.word	0x000113f5
   12464:	00000435 	.word	0x00000435
   12468:	00027f64 	.word	0x00027f64

0001246c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   1246c:	b590      	push	{r4, r7, lr}
   1246e:	b089      	sub	sp, #36	; 0x24
   12470:	af02      	add	r7, sp, #8
   12472:	60f8      	str	r0, [r7, #12]
   12474:	60b9      	str	r1, [r7, #8]
   12476:	1dbb      	adds	r3, r7, #6
   12478:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   1247a:	2316      	movs	r3, #22
   1247c:	18fb      	adds	r3, r7, r3
   1247e:	22c8      	movs	r2, #200	; 0xc8
   12480:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   12482:	2317      	movs	r3, #23
   12484:	18fb      	adds	r3, r7, r3
   12486:	220a      	movs	r2, #10
   12488:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1248a:	1dbb      	adds	r3, r7, #6
   1248c:	881c      	ldrh	r4, [r3, #0]
   1248e:	68ba      	ldr	r2, [r7, #8]
   12490:	68f9      	ldr	r1, [r7, #12]
   12492:	2316      	movs	r3, #22
   12494:	18fb      	adds	r3, r7, r3
   12496:	7818      	ldrb	r0, [r3, #0]
   12498:	2300      	movs	r3, #0
   1249a:	9300      	str	r3, [sp, #0]
   1249c:	0023      	movs	r3, r4
   1249e:	4c2e      	ldr	r4, [pc, #184]	; (12558 <nm_spi_read+0xec>)
   124a0:	47a0      	blx	r4
   124a2:	0002      	movs	r2, r0
   124a4:	2315      	movs	r3, #21
   124a6:	18fb      	adds	r3, r7, r3
   124a8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   124aa:	2315      	movs	r3, #21
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781b      	ldrb	r3, [r3, #0]
   124b0:	b25b      	sxtb	r3, r3
   124b2:	2b01      	cmp	r3, #1
   124b4:	d010      	beq.n	124d8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   124b6:	4a29      	ldr	r2, [pc, #164]	; (1255c <nm_spi_read+0xf0>)
   124b8:	4929      	ldr	r1, [pc, #164]	; (12560 <nm_spi_read+0xf4>)
   124ba:	4b2a      	ldr	r3, [pc, #168]	; (12564 <nm_spi_read+0xf8>)
   124bc:	0018      	movs	r0, r3
   124be:	4b2a      	ldr	r3, [pc, #168]	; (12568 <nm_spi_read+0xfc>)
   124c0:	4798      	blx	r3
   124c2:	68fa      	ldr	r2, [r7, #12]
   124c4:	4b29      	ldr	r3, [pc, #164]	; (1256c <nm_spi_read+0x100>)
   124c6:	0011      	movs	r1, r2
   124c8:	0018      	movs	r0, r3
   124ca:	4b27      	ldr	r3, [pc, #156]	; (12568 <nm_spi_read+0xfc>)
   124cc:	4798      	blx	r3
   124ce:	4b28      	ldr	r3, [pc, #160]	; (12570 <nm_spi_read+0x104>)
   124d0:	0018      	movs	r0, r3
   124d2:	4b25      	ldr	r3, [pc, #148]	; (12568 <nm_spi_read+0xfc>)
   124d4:	4798      	blx	r3
		goto _FAIL_;
   124d6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   124d8:	2315      	movs	r3, #21
   124da:	18fb      	adds	r3, r7, r3
   124dc:	781b      	ldrb	r3, [r3, #0]
   124de:	b25b      	sxtb	r3, r3
   124e0:	2b01      	cmp	r3, #1
   124e2:	d030      	beq.n	12546 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   124e4:	2001      	movs	r0, #1
   124e6:	4b23      	ldr	r3, [pc, #140]	; (12574 <nm_spi_read+0x108>)
   124e8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   124ea:	2300      	movs	r3, #0
   124ec:	9300      	str	r3, [sp, #0]
   124ee:	2300      	movs	r3, #0
   124f0:	2200      	movs	r2, #0
   124f2:	2100      	movs	r1, #0
   124f4:	20cf      	movs	r0, #207	; 0xcf
   124f6:	4c20      	ldr	r4, [pc, #128]	; (12578 <nm_spi_read+0x10c>)
   124f8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   124fa:	20cf      	movs	r0, #207	; 0xcf
   124fc:	4b1f      	ldr	r3, [pc, #124]	; (1257c <nm_spi_read+0x110>)
   124fe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   12500:	4a1f      	ldr	r2, [pc, #124]	; (12580 <nm_spi_read+0x114>)
   12502:	4917      	ldr	r1, [pc, #92]	; (12560 <nm_spi_read+0xf4>)
   12504:	4b17      	ldr	r3, [pc, #92]	; (12564 <nm_spi_read+0xf8>)
   12506:	0018      	movs	r0, r3
   12508:	4b17      	ldr	r3, [pc, #92]	; (12568 <nm_spi_read+0xfc>)
   1250a:	4798      	blx	r3
   1250c:	2317      	movs	r3, #23
   1250e:	18fb      	adds	r3, r7, r3
   12510:	7819      	ldrb	r1, [r3, #0]
   12512:	1dbb      	adds	r3, r7, #6
   12514:	881b      	ldrh	r3, [r3, #0]
   12516:	68fa      	ldr	r2, [r7, #12]
   12518:	481a      	ldr	r0, [pc, #104]	; (12584 <nm_spi_read+0x118>)
   1251a:	4c13      	ldr	r4, [pc, #76]	; (12568 <nm_spi_read+0xfc>)
   1251c:	47a0      	blx	r4
   1251e:	4b14      	ldr	r3, [pc, #80]	; (12570 <nm_spi_read+0x104>)
   12520:	0018      	movs	r0, r3
   12522:	4b11      	ldr	r3, [pc, #68]	; (12568 <nm_spi_read+0xfc>)
   12524:	4798      	blx	r3
		nm_bsp_sleep(1);
   12526:	2001      	movs	r0, #1
   12528:	4b12      	ldr	r3, [pc, #72]	; (12574 <nm_spi_read+0x108>)
   1252a:	4798      	blx	r3
		retry--;
   1252c:	2317      	movs	r3, #23
   1252e:	18fb      	adds	r3, r7, r3
   12530:	781a      	ldrb	r2, [r3, #0]
   12532:	2317      	movs	r3, #23
   12534:	18fb      	adds	r3, r7, r3
   12536:	3a01      	subs	r2, #1
   12538:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   1253a:	2317      	movs	r3, #23
   1253c:	18fb      	adds	r3, r7, r3
   1253e:	781b      	ldrb	r3, [r3, #0]
   12540:	2b00      	cmp	r3, #0
   12542:	d000      	beq.n	12546 <nm_spi_read+0xda>
   12544:	e7a1      	b.n	1248a <nm_spi_read+0x1e>
	}

	return result;
   12546:	2315      	movs	r3, #21
   12548:	18fb      	adds	r3, r7, r3
   1254a:	781b      	ldrb	r3, [r3, #0]
   1254c:	b25b      	sxtb	r3, r3
}
   1254e:	0018      	movs	r0, r3
   12550:	46bd      	mov	sp, r7
   12552:	b007      	add	sp, #28
   12554:	bd90      	pop	{r4, r7, pc}
   12556:	46c0      	nop			; (mov r8, r8)
   12558:	00011531 	.word	0x00011531
   1255c:	00000472 	.word	0x00000472
   12560:	00028178 	.word	0x00028178
   12564:	00027b10 	.word	0x00027b10
   12568:	0000b9b9 	.word	0x0000b9b9
   1256c:	00027f7c 	.word	0x00027f7c
   12570:	00027b50 	.word	0x00027b50
   12574:	0000de71 	.word	0x0000de71
   12578:	00010fb5 	.word	0x00010fb5
   1257c:	000113f5 	.word	0x000113f5
   12580:	0000047d 	.word	0x0000047d
   12584:	00027f1c 	.word	0x00027f1c

00012588 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   12588:	b580      	push	{r7, lr}
   1258a:	b082      	sub	sp, #8
   1258c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   1258e:	4b0c      	ldr	r3, [pc, #48]	; (125c0 <spi_init_pkt_sz+0x38>)
   12590:	0018      	movs	r0, r3
   12592:	4b0c      	ldr	r3, [pc, #48]	; (125c4 <spi_init_pkt_sz+0x3c>)
   12594:	4798      	blx	r3
   12596:	0003      	movs	r3, r0
   12598:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   1259a:	687b      	ldr	r3, [r7, #4]
   1259c:	2270      	movs	r2, #112	; 0x70
   1259e:	4393      	bics	r3, r2
   125a0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   125a2:	687b      	ldr	r3, [r7, #4]
   125a4:	2250      	movs	r2, #80	; 0x50
   125a6:	4313      	orrs	r3, r2
   125a8:	607b      	str	r3, [r7, #4]
   125aa:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   125ac:	687b      	ldr	r3, [r7, #4]
   125ae:	4a04      	ldr	r2, [pc, #16]	; (125c0 <spi_init_pkt_sz+0x38>)
   125b0:	0019      	movs	r1, r3
   125b2:	0010      	movs	r0, r2
   125b4:	4b04      	ldr	r3, [pc, #16]	; (125c8 <spi_init_pkt_sz+0x40>)
   125b6:	4798      	blx	r3
}
   125b8:	46c0      	nop			; (mov r8, r8)
   125ba:	46bd      	mov	sp, r7
   125bc:	b002      	add	sp, #8
   125be:	bd80      	pop	{r7, pc}
   125c0:	0000e824 	.word	0x0000e824
   125c4:	00012761 	.word	0x00012761
   125c8:	000127d5 	.word	0x000127d5

000125cc <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   125cc:	b590      	push	{r4, r7, lr}
   125ce:	b083      	sub	sp, #12
   125d0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   125d2:	2300      	movs	r3, #0
   125d4:	9300      	str	r3, [sp, #0]
   125d6:	2300      	movs	r3, #0
   125d8:	2200      	movs	r2, #0
   125da:	2100      	movs	r1, #0
   125dc:	20cf      	movs	r0, #207	; 0xcf
   125de:	4c05      	ldr	r4, [pc, #20]	; (125f4 <nm_spi_reset+0x28>)
   125e0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   125e2:	20cf      	movs	r0, #207	; 0xcf
   125e4:	4b04      	ldr	r3, [pc, #16]	; (125f8 <nm_spi_reset+0x2c>)
   125e6:	4798      	blx	r3
	return M2M_SUCCESS;
   125e8:	2300      	movs	r3, #0
}
   125ea:	0018      	movs	r0, r3
   125ec:	46bd      	mov	sp, r7
   125ee:	b001      	add	sp, #4
   125f0:	bd90      	pop	{r4, r7, pc}
   125f2:	46c0      	nop			; (mov r8, r8)
   125f4:	00010fb5 	.word	0x00010fb5
   125f8:	000113f5 	.word	0x000113f5

000125fc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   125fc:	b580      	push	{r7, lr}
   125fe:	b082      	sub	sp, #8
   12600:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   12602:	2300      	movs	r3, #0
   12604:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   12606:	4b40      	ldr	r3, [pc, #256]	; (12708 <nm_spi_init+0x10c>)
   12608:	2200      	movs	r2, #0
   1260a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   1260c:	003b      	movs	r3, r7
   1260e:	4a3f      	ldr	r2, [pc, #252]	; (1270c <nm_spi_init+0x110>)
   12610:	0019      	movs	r1, r3
   12612:	0010      	movs	r0, r2
   12614:	4b3e      	ldr	r3, [pc, #248]	; (12710 <nm_spi_init+0x114>)
   12616:	4798      	blx	r3
   12618:	1e03      	subs	r3, r0, #0
   1261a:	d129      	bne.n	12670 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   1261c:	4b3a      	ldr	r3, [pc, #232]	; (12708 <nm_spi_init+0x10c>)
   1261e:	2201      	movs	r2, #1
   12620:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   12622:	2398      	movs	r3, #152	; 0x98
   12624:	00da      	lsls	r2, r3, #3
   12626:	493b      	ldr	r1, [pc, #236]	; (12714 <nm_spi_init+0x118>)
   12628:	4b3b      	ldr	r3, [pc, #236]	; (12718 <nm_spi_init+0x11c>)
   1262a:	0018      	movs	r0, r3
   1262c:	4b3b      	ldr	r3, [pc, #236]	; (1271c <nm_spi_init+0x120>)
   1262e:	4798      	blx	r3
   12630:	4b3b      	ldr	r3, [pc, #236]	; (12720 <nm_spi_init+0x124>)
   12632:	0018      	movs	r0, r3
   12634:	4b39      	ldr	r3, [pc, #228]	; (1271c <nm_spi_init+0x120>)
   12636:	4798      	blx	r3
   12638:	4b3a      	ldr	r3, [pc, #232]	; (12724 <nm_spi_init+0x128>)
   1263a:	0018      	movs	r0, r3
   1263c:	4b37      	ldr	r3, [pc, #220]	; (1271c <nm_spi_init+0x120>)
   1263e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   12640:	003b      	movs	r3, r7
   12642:	4a32      	ldr	r2, [pc, #200]	; (1270c <nm_spi_init+0x110>)
   12644:	0019      	movs	r1, r3
   12646:	0010      	movs	r0, r2
   12648:	4b31      	ldr	r3, [pc, #196]	; (12710 <nm_spi_init+0x114>)
   1264a:	4798      	blx	r3
   1264c:	1e03      	subs	r3, r0, #0
   1264e:	d10f      	bne.n	12670 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   12650:	4a35      	ldr	r2, [pc, #212]	; (12728 <nm_spi_init+0x12c>)
   12652:	4930      	ldr	r1, [pc, #192]	; (12714 <nm_spi_init+0x118>)
   12654:	4b30      	ldr	r3, [pc, #192]	; (12718 <nm_spi_init+0x11c>)
   12656:	0018      	movs	r0, r3
   12658:	4b30      	ldr	r3, [pc, #192]	; (1271c <nm_spi_init+0x120>)
   1265a:	4798      	blx	r3
   1265c:	4b33      	ldr	r3, [pc, #204]	; (1272c <nm_spi_init+0x130>)
   1265e:	0018      	movs	r0, r3
   12660:	4b2e      	ldr	r3, [pc, #184]	; (1271c <nm_spi_init+0x120>)
   12662:	4798      	blx	r3
   12664:	4b2f      	ldr	r3, [pc, #188]	; (12724 <nm_spi_init+0x128>)
   12666:	0018      	movs	r0, r3
   12668:	4b2c      	ldr	r3, [pc, #176]	; (1271c <nm_spi_init+0x120>)
   1266a:	4798      	blx	r3
			return 0;
   1266c:	2300      	movs	r3, #0
   1266e:	e047      	b.n	12700 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   12670:	4b25      	ldr	r3, [pc, #148]	; (12708 <nm_spi_init+0x10c>)
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	2b00      	cmp	r3, #0
   12676:	d126      	bne.n	126c6 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   12678:	683b      	ldr	r3, [r7, #0]
   1267a:	220c      	movs	r2, #12
   1267c:	4393      	bics	r3, r2
   1267e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   12680:	683b      	ldr	r3, [r7, #0]
   12682:	2270      	movs	r2, #112	; 0x70
   12684:	4393      	bics	r3, r2
   12686:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   12688:	683b      	ldr	r3, [r7, #0]
   1268a:	2250      	movs	r2, #80	; 0x50
   1268c:	4313      	orrs	r3, r2
   1268e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   12690:	683b      	ldr	r3, [r7, #0]
   12692:	4a1e      	ldr	r2, [pc, #120]	; (1270c <nm_spi_init+0x110>)
   12694:	0019      	movs	r1, r3
   12696:	0010      	movs	r0, r2
   12698:	4b25      	ldr	r3, [pc, #148]	; (12730 <nm_spi_init+0x134>)
   1269a:	4798      	blx	r3
   1269c:	1e03      	subs	r3, r0, #0
   1269e:	d10f      	bne.n	126c0 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   126a0:	4a24      	ldr	r2, [pc, #144]	; (12734 <nm_spi_init+0x138>)
   126a2:	491c      	ldr	r1, [pc, #112]	; (12714 <nm_spi_init+0x118>)
   126a4:	4b1c      	ldr	r3, [pc, #112]	; (12718 <nm_spi_init+0x11c>)
   126a6:	0018      	movs	r0, r3
   126a8:	4b1c      	ldr	r3, [pc, #112]	; (1271c <nm_spi_init+0x120>)
   126aa:	4798      	blx	r3
   126ac:	4b22      	ldr	r3, [pc, #136]	; (12738 <nm_spi_init+0x13c>)
   126ae:	0018      	movs	r0, r3
   126b0:	4b1a      	ldr	r3, [pc, #104]	; (1271c <nm_spi_init+0x120>)
   126b2:	4798      	blx	r3
   126b4:	4b1b      	ldr	r3, [pc, #108]	; (12724 <nm_spi_init+0x128>)
   126b6:	0018      	movs	r0, r3
   126b8:	4b18      	ldr	r3, [pc, #96]	; (1271c <nm_spi_init+0x120>)
   126ba:	4798      	blx	r3
			return 0;
   126bc:	2300      	movs	r3, #0
   126be:	e01f      	b.n	12700 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   126c0:	4b11      	ldr	r3, [pc, #68]	; (12708 <nm_spi_init+0x10c>)
   126c2:	2201      	movs	r2, #1
   126c4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   126c6:	1d3a      	adds	r2, r7, #4
   126c8:	2380      	movs	r3, #128	; 0x80
   126ca:	015b      	lsls	r3, r3, #5
   126cc:	0011      	movs	r1, r2
   126ce:	0018      	movs	r0, r3
   126d0:	4b0f      	ldr	r3, [pc, #60]	; (12710 <nm_spi_init+0x114>)
   126d2:	4798      	blx	r3
   126d4:	1e03      	subs	r3, r0, #0
   126d6:	d110      	bne.n	126fa <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   126d8:	4a18      	ldr	r2, [pc, #96]	; (1273c <nm_spi_init+0x140>)
   126da:	490e      	ldr	r1, [pc, #56]	; (12714 <nm_spi_init+0x118>)
   126dc:	4b0e      	ldr	r3, [pc, #56]	; (12718 <nm_spi_init+0x11c>)
   126de:	0018      	movs	r0, r3
   126e0:	4b0e      	ldr	r3, [pc, #56]	; (1271c <nm_spi_init+0x120>)
   126e2:	4798      	blx	r3
   126e4:	4b16      	ldr	r3, [pc, #88]	; (12740 <nm_spi_init+0x144>)
   126e6:	0018      	movs	r0, r3
   126e8:	4b0c      	ldr	r3, [pc, #48]	; (1271c <nm_spi_init+0x120>)
   126ea:	4798      	blx	r3
   126ec:	4b0d      	ldr	r3, [pc, #52]	; (12724 <nm_spi_init+0x128>)
   126ee:	0018      	movs	r0, r3
   126f0:	4b0a      	ldr	r3, [pc, #40]	; (1271c <nm_spi_init+0x120>)
   126f2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   126f4:	2306      	movs	r3, #6
   126f6:	425b      	negs	r3, r3
   126f8:	e002      	b.n	12700 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   126fa:	4b12      	ldr	r3, [pc, #72]	; (12744 <nm_spi_init+0x148>)
   126fc:	4798      	blx	r3


	return M2M_SUCCESS;
   126fe:	2300      	movs	r3, #0
}
   12700:	0018      	movs	r0, r3
   12702:	46bd      	mov	sp, r7
   12704:	b002      	add	sp, #8
   12706:	bd80      	pop	{r7, pc}
   12708:	20004340 	.word	0x20004340
   1270c:	0000e824 	.word	0x0000e824
   12710:	000122f5 	.word	0x000122f5
   12714:	00028184 	.word	0x00028184
   12718:	00027b10 	.word	0x00027b10
   1271c:	0000b9b9 	.word	0x0000b9b9
   12720:	00027fac 	.word	0x00027fac
   12724:	00027b50 	.word	0x00027b50
   12728:	000004c3 	.word	0x000004c3
   1272c:	00027ffc 	.word	0x00027ffc
   12730:	00011ffd 	.word	0x00011ffd
   12734:	000004cd 	.word	0x000004cd
   12738:	0002802c 	.word	0x0002802c
   1273c:	000004d7 	.word	0x000004d7
   12740:	00028060 	.word	0x00028060
   12744:	00012589 	.word	0x00012589

00012748 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   12748:	b580      	push	{r7, lr}
   1274a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   1274c:	4b03      	ldr	r3, [pc, #12]	; (1275c <nm_spi_deinit+0x14>)
   1274e:	2200      	movs	r2, #0
   12750:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   12752:	2300      	movs	r3, #0
}
   12754:	0018      	movs	r0, r3
   12756:	46bd      	mov	sp, r7
   12758:	bd80      	pop	{r7, pc}
   1275a:	46c0      	nop			; (mov r8, r8)
   1275c:	20004340 	.word	0x20004340

00012760 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   12760:	b580      	push	{r7, lr}
   12762:	b084      	sub	sp, #16
   12764:	af00      	add	r7, sp, #0
   12766:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   12768:	230c      	movs	r3, #12
   1276a:	18fa      	adds	r2, r7, r3
   1276c:	687b      	ldr	r3, [r7, #4]
   1276e:	0011      	movs	r1, r2
   12770:	0018      	movs	r0, r3
   12772:	4b03      	ldr	r3, [pc, #12]	; (12780 <nm_spi_read_reg+0x20>)
   12774:	4798      	blx	r3

	return u32Val;
   12776:	68fb      	ldr	r3, [r7, #12]
}
   12778:	0018      	movs	r0, r3
   1277a:	46bd      	mov	sp, r7
   1277c:	b004      	add	sp, #16
   1277e:	bd80      	pop	{r7, pc}
   12780:	000122f5 	.word	0x000122f5

00012784 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   12784:	b590      	push	{r4, r7, lr}
   12786:	b085      	sub	sp, #20
   12788:	af00      	add	r7, sp, #0
   1278a:	6078      	str	r0, [r7, #4]
   1278c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   1278e:	230f      	movs	r3, #15
   12790:	18fc      	adds	r4, r7, r3
   12792:	683a      	ldr	r2, [r7, #0]
   12794:	687b      	ldr	r3, [r7, #4]
   12796:	0011      	movs	r1, r2
   12798:	0018      	movs	r0, r3
   1279a:	4b0d      	ldr	r3, [pc, #52]	; (127d0 <nm_spi_read_reg_with_ret+0x4c>)
   1279c:	4798      	blx	r3
   1279e:	0003      	movs	r3, r0
   127a0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   127a2:	230f      	movs	r3, #15
   127a4:	18fb      	adds	r3, r7, r3
   127a6:	781b      	ldrb	r3, [r3, #0]
   127a8:	b25b      	sxtb	r3, r3
   127aa:	2b01      	cmp	r3, #1
   127ac:	d104      	bne.n	127b8 <nm_spi_read_reg_with_ret+0x34>
   127ae:	230f      	movs	r3, #15
   127b0:	18fb      	adds	r3, r7, r3
   127b2:	2200      	movs	r2, #0
   127b4:	701a      	strb	r2, [r3, #0]
   127b6:	e003      	b.n	127c0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   127b8:	230f      	movs	r3, #15
   127ba:	18fb      	adds	r3, r7, r3
   127bc:	22fa      	movs	r2, #250	; 0xfa
   127be:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   127c0:	230f      	movs	r3, #15
   127c2:	18fb      	adds	r3, r7, r3
   127c4:	781b      	ldrb	r3, [r3, #0]
   127c6:	b25b      	sxtb	r3, r3
}
   127c8:	0018      	movs	r0, r3
   127ca:	46bd      	mov	sp, r7
   127cc:	b005      	add	sp, #20
   127ce:	bd90      	pop	{r4, r7, pc}
   127d0:	000122f5 	.word	0x000122f5

000127d4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   127d4:	b590      	push	{r4, r7, lr}
   127d6:	b085      	sub	sp, #20
   127d8:	af00      	add	r7, sp, #0
   127da:	6078      	str	r0, [r7, #4]
   127dc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   127de:	230f      	movs	r3, #15
   127e0:	18fc      	adds	r4, r7, r3
   127e2:	683a      	ldr	r2, [r7, #0]
   127e4:	687b      	ldr	r3, [r7, #4]
   127e6:	0011      	movs	r1, r2
   127e8:	0018      	movs	r0, r3
   127ea:	4b0d      	ldr	r3, [pc, #52]	; (12820 <nm_spi_write_reg+0x4c>)
   127ec:	4798      	blx	r3
   127ee:	0003      	movs	r3, r0
   127f0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   127f2:	230f      	movs	r3, #15
   127f4:	18fb      	adds	r3, r7, r3
   127f6:	781b      	ldrb	r3, [r3, #0]
   127f8:	b25b      	sxtb	r3, r3
   127fa:	2b01      	cmp	r3, #1
   127fc:	d104      	bne.n	12808 <nm_spi_write_reg+0x34>
   127fe:	230f      	movs	r3, #15
   12800:	18fb      	adds	r3, r7, r3
   12802:	2200      	movs	r2, #0
   12804:	701a      	strb	r2, [r3, #0]
   12806:	e003      	b.n	12810 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   12808:	230f      	movs	r3, #15
   1280a:	18fb      	adds	r3, r7, r3
   1280c:	22fa      	movs	r2, #250	; 0xfa
   1280e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   12810:	230f      	movs	r3, #15
   12812:	18fb      	adds	r3, r7, r3
   12814:	781b      	ldrb	r3, [r3, #0]
   12816:	b25b      	sxtb	r3, r3
}
   12818:	0018      	movs	r0, r3
   1281a:	46bd      	mov	sp, r7
   1281c:	b005      	add	sp, #20
   1281e:	bd90      	pop	{r4, r7, pc}
   12820:	00011ffd 	.word	0x00011ffd

00012824 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   12824:	b590      	push	{r4, r7, lr}
   12826:	b087      	sub	sp, #28
   12828:	af00      	add	r7, sp, #0
   1282a:	60f8      	str	r0, [r7, #12]
   1282c:	60b9      	str	r1, [r7, #8]
   1282e:	1dbb      	adds	r3, r7, #6
   12830:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   12832:	2317      	movs	r3, #23
   12834:	18fc      	adds	r4, r7, r3
   12836:	1dbb      	adds	r3, r7, #6
   12838:	881a      	ldrh	r2, [r3, #0]
   1283a:	68b9      	ldr	r1, [r7, #8]
   1283c:	68fb      	ldr	r3, [r7, #12]
   1283e:	0018      	movs	r0, r3
   12840:	4b0d      	ldr	r3, [pc, #52]	; (12878 <nm_spi_read_block+0x54>)
   12842:	4798      	blx	r3
   12844:	0003      	movs	r3, r0
   12846:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   12848:	2317      	movs	r3, #23
   1284a:	18fb      	adds	r3, r7, r3
   1284c:	781b      	ldrb	r3, [r3, #0]
   1284e:	b25b      	sxtb	r3, r3
   12850:	2b01      	cmp	r3, #1
   12852:	d104      	bne.n	1285e <nm_spi_read_block+0x3a>
   12854:	2317      	movs	r3, #23
   12856:	18fb      	adds	r3, r7, r3
   12858:	2200      	movs	r2, #0
   1285a:	701a      	strb	r2, [r3, #0]
   1285c:	e003      	b.n	12866 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   1285e:	2317      	movs	r3, #23
   12860:	18fb      	adds	r3, r7, r3
   12862:	22fa      	movs	r2, #250	; 0xfa
   12864:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   12866:	2317      	movs	r3, #23
   12868:	18fb      	adds	r3, r7, r3
   1286a:	781b      	ldrb	r3, [r3, #0]
   1286c:	b25b      	sxtb	r3, r3
}
   1286e:	0018      	movs	r0, r3
   12870:	46bd      	mov	sp, r7
   12872:	b007      	add	sp, #28
   12874:	bd90      	pop	{r4, r7, pc}
   12876:	46c0      	nop			; (mov r8, r8)
   12878:	0001246d 	.word	0x0001246d

0001287c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b087      	sub	sp, #28
   12880:	af00      	add	r7, sp, #0
   12882:	60f8      	str	r0, [r7, #12]
   12884:	60b9      	str	r1, [r7, #8]
   12886:	1dbb      	adds	r3, r7, #6
   12888:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   1288a:	2317      	movs	r3, #23
   1288c:	18fc      	adds	r4, r7, r3
   1288e:	1dbb      	adds	r3, r7, #6
   12890:	881a      	ldrh	r2, [r3, #0]
   12892:	68b9      	ldr	r1, [r7, #8]
   12894:	68fb      	ldr	r3, [r7, #12]
   12896:	0018      	movs	r0, r3
   12898:	4b0d      	ldr	r3, [pc, #52]	; (128d0 <nm_spi_write_block+0x54>)
   1289a:	4798      	blx	r3
   1289c:	0003      	movs	r3, r0
   1289e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   128a0:	2317      	movs	r3, #23
   128a2:	18fb      	adds	r3, r7, r3
   128a4:	781b      	ldrb	r3, [r3, #0]
   128a6:	b25b      	sxtb	r3, r3
   128a8:	2b01      	cmp	r3, #1
   128aa:	d104      	bne.n	128b6 <nm_spi_write_block+0x3a>
   128ac:	2317      	movs	r3, #23
   128ae:	18fb      	adds	r3, r7, r3
   128b0:	2200      	movs	r2, #0
   128b2:	701a      	strb	r2, [r3, #0]
   128b4:	e003      	b.n	128be <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   128b6:	2317      	movs	r3, #23
   128b8:	18fb      	adds	r3, r7, r3
   128ba:	22fa      	movs	r2, #250	; 0xfa
   128bc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   128be:	2317      	movs	r3, #23
   128c0:	18fb      	adds	r3, r7, r3
   128c2:	781b      	ldrb	r3, [r3, #0]
   128c4:	b25b      	sxtb	r3, r3
}
   128c6:	0018      	movs	r0, r3
   128c8:	46bd      	mov	sp, r7
   128ca:	b007      	add	sp, #28
   128cc:	bd90      	pop	{r4, r7, pc}
   128ce:	46c0      	nop			; (mov r8, r8)
   128d0:	00012149 	.word	0x00012149

000128d4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   128d4:	b590      	push	{r4, r7, lr}
   128d6:	b089      	sub	sp, #36	; 0x24
   128d8:	af00      	add	r7, sp, #0
   128da:	60b9      	str	r1, [r7, #8]
   128dc:	0011      	movs	r1, r2
   128de:	607b      	str	r3, [r7, #4]
   128e0:	230f      	movs	r3, #15
   128e2:	18fb      	adds	r3, r7, r3
   128e4:	1c02      	adds	r2, r0, #0
   128e6:	701a      	strb	r2, [r3, #0]
   128e8:	230e      	movs	r3, #14
   128ea:	18fb      	adds	r3, r7, r3
   128ec:	1c0a      	adds	r2, r1, #0
   128ee:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   128f0:	2330      	movs	r3, #48	; 0x30
   128f2:	18fb      	adds	r3, r7, r3
   128f4:	881b      	ldrh	r3, [r3, #0]
   128f6:	2b00      	cmp	r3, #0
   128f8:	d100      	bne.n	128fc <Socket_ReadSocketData+0x28>
   128fa:	e0d7      	b.n	12aac <Socket_ReadSocketData+0x1d8>
   128fc:	230f      	movs	r3, #15
   128fe:	18fb      	adds	r3, r7, r3
   12900:	2200      	movs	r2, #0
   12902:	569a      	ldrsb	r2, [r3, r2]
   12904:	4b6b      	ldr	r3, [pc, #428]	; (12ab4 <Socket_ReadSocketData+0x1e0>)
   12906:	0112      	lsls	r2, r2, #4
   12908:	58d3      	ldr	r3, [r2, r3]
   1290a:	2b00      	cmp	r3, #0
   1290c:	d100      	bne.n	12910 <Socket_ReadSocketData+0x3c>
   1290e:	e0cd      	b.n	12aac <Socket_ReadSocketData+0x1d8>
   12910:	230f      	movs	r3, #15
   12912:	18fb      	adds	r3, r7, r3
   12914:	781b      	ldrb	r3, [r3, #0]
   12916:	b25b      	sxtb	r3, r3
   12918:	4a66      	ldr	r2, [pc, #408]	; (12ab4 <Socket_ReadSocketData+0x1e0>)
   1291a:	011b      	lsls	r3, r3, #4
   1291c:	18d3      	adds	r3, r2, r3
   1291e:	3304      	adds	r3, #4
   12920:	881b      	ldrh	r3, [r3, #0]
   12922:	b29b      	uxth	r3, r3
   12924:	2b00      	cmp	r3, #0
   12926:	d100      	bne.n	1292a <Socket_ReadSocketData+0x56>
   12928:	e0c0      	b.n	12aac <Socket_ReadSocketData+0x1d8>
   1292a:	230f      	movs	r3, #15
   1292c:	18fb      	adds	r3, r7, r3
   1292e:	781b      	ldrb	r3, [r3, #0]
   12930:	b25b      	sxtb	r3, r3
   12932:	4a60      	ldr	r2, [pc, #384]	; (12ab4 <Socket_ReadSocketData+0x1e0>)
   12934:	011b      	lsls	r3, r3, #4
   12936:	18d3      	adds	r3, r2, r3
   12938:	330a      	adds	r3, #10
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	b2db      	uxtb	r3, r3
   1293e:	2b01      	cmp	r3, #1
   12940:	d000      	beq.n	12944 <Socket_ReadSocketData+0x70>
   12942:	e0b3      	b.n	12aac <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   12944:	687b      	ldr	r3, [r7, #4]
   12946:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   12948:	68bb      	ldr	r3, [r7, #8]
   1294a:	2230      	movs	r2, #48	; 0x30
   1294c:	18ba      	adds	r2, r7, r2
   1294e:	8812      	ldrh	r2, [r2, #0]
   12950:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   12952:	2319      	movs	r3, #25
   12954:	18fb      	adds	r3, r7, r3
   12956:	2201      	movs	r2, #1
   12958:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   1295a:	231a      	movs	r3, #26
   1295c:	18fb      	adds	r3, r7, r3
   1295e:	2230      	movs	r2, #48	; 0x30
   12960:	18ba      	adds	r2, r7, r2
   12962:	8812      	ldrh	r2, [r2, #0]
   12964:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   12966:	230f      	movs	r3, #15
   12968:	18fb      	adds	r3, r7, r3
   1296a:	781b      	ldrb	r3, [r3, #0]
   1296c:	b25b      	sxtb	r3, r3
   1296e:	4a51      	ldr	r2, [pc, #324]	; (12ab4 <Socket_ReadSocketData+0x1e0>)
   12970:	011b      	lsls	r3, r3, #4
   12972:	18d3      	adds	r3, r2, r3
   12974:	3304      	adds	r3, #4
   12976:	881b      	ldrh	r3, [r3, #0]
   12978:	b29b      	uxth	r3, r3
   1297a:	221a      	movs	r2, #26
   1297c:	18ba      	adds	r2, r7, r2
   1297e:	8812      	ldrh	r2, [r2, #0]
   12980:	1ad3      	subs	r3, r2, r3
   12982:	b29a      	uxth	r2, r3
   12984:	2316      	movs	r3, #22
   12986:	18fb      	adds	r3, r7, r3
   12988:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   1298a:	2316      	movs	r3, #22
   1298c:	18fb      	adds	r3, r7, r3
   1298e:	2200      	movs	r2, #0
   12990:	5e9b      	ldrsh	r3, [r3, r2]
   12992:	2b00      	cmp	r3, #0
   12994:	dd0f      	ble.n	129b6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   12996:	2319      	movs	r3, #25
   12998:	18fb      	adds	r3, r7, r3
   1299a:	2200      	movs	r2, #0
   1299c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   1299e:	230f      	movs	r3, #15
   129a0:	18fb      	adds	r3, r7, r3
   129a2:	2200      	movs	r2, #0
   129a4:	569a      	ldrsb	r2, [r3, r2]
   129a6:	231a      	movs	r3, #26
   129a8:	18fb      	adds	r3, r7, r3
   129aa:	4942      	ldr	r1, [pc, #264]	; (12ab4 <Socket_ReadSocketData+0x1e0>)
   129ac:	0112      	lsls	r2, r2, #4
   129ae:	188a      	adds	r2, r1, r2
   129b0:	3204      	adds	r2, #4
   129b2:	8812      	ldrh	r2, [r2, #0]
   129b4:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   129b6:	230f      	movs	r3, #15
   129b8:	18fb      	adds	r3, r7, r3
   129ba:	2200      	movs	r2, #0
   129bc:	569a      	ldrsb	r2, [r3, r2]
   129be:	4b3d      	ldr	r3, [pc, #244]	; (12ab4 <Socket_ReadSocketData+0x1e0>)
   129c0:	0112      	lsls	r2, r2, #4
   129c2:	58d1      	ldr	r1, [r2, r3]
   129c4:	2319      	movs	r3, #25
   129c6:	18fb      	adds	r3, r7, r3
   129c8:	781c      	ldrb	r4, [r3, #0]
   129ca:	231a      	movs	r3, #26
   129cc:	18fb      	adds	r3, r7, r3
   129ce:	881a      	ldrh	r2, [r3, #0]
   129d0:	69f8      	ldr	r0, [r7, #28]
   129d2:	0023      	movs	r3, r4
   129d4:	4c38      	ldr	r4, [pc, #224]	; (12ab8 <Socket_ReadSocketData+0x1e4>)
   129d6:	47a0      	blx	r4
   129d8:	1e03      	subs	r3, r0, #0
   129da:	d14f      	bne.n	12a7c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   129dc:	230f      	movs	r3, #15
   129de:	18fb      	adds	r3, r7, r3
   129e0:	2200      	movs	r2, #0
   129e2:	569a      	ldrsb	r2, [r3, r2]
   129e4:	4b33      	ldr	r3, [pc, #204]	; (12ab4 <Socket_ReadSocketData+0x1e0>)
   129e6:	0112      	lsls	r2, r2, #4
   129e8:	58d2      	ldr	r2, [r2, r3]
   129ea:	68bb      	ldr	r3, [r7, #8]
   129ec:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   129ee:	231a      	movs	r3, #26
   129f0:	18fb      	adds	r3, r7, r3
   129f2:	2200      	movs	r2, #0
   129f4:	5e9a      	ldrsh	r2, [r3, r2]
   129f6:	68bb      	ldr	r3, [r7, #8]
   129f8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   129fa:	68bb      	ldr	r3, [r7, #8]
   129fc:	88da      	ldrh	r2, [r3, #6]
   129fe:	231a      	movs	r3, #26
   12a00:	18fb      	adds	r3, r7, r3
   12a02:	881b      	ldrh	r3, [r3, #0]
   12a04:	1ad3      	subs	r3, r2, r3
   12a06:	b29a      	uxth	r2, r3
   12a08:	68bb      	ldr	r3, [r7, #8]
   12a0a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   12a0c:	4b2b      	ldr	r3, [pc, #172]	; (12abc <Socket_ReadSocketData+0x1e8>)
   12a0e:	681b      	ldr	r3, [r3, #0]
   12a10:	2b00      	cmp	r3, #0
   12a12:	d00b      	beq.n	12a2c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   12a14:	4b29      	ldr	r3, [pc, #164]	; (12abc <Socket_ReadSocketData+0x1e8>)
   12a16:	681b      	ldr	r3, [r3, #0]
   12a18:	68bc      	ldr	r4, [r7, #8]
   12a1a:	220e      	movs	r2, #14
   12a1c:	18ba      	adds	r2, r7, r2
   12a1e:	7811      	ldrb	r1, [r2, #0]
   12a20:	220f      	movs	r2, #15
   12a22:	18ba      	adds	r2, r7, r2
   12a24:	2000      	movs	r0, #0
   12a26:	5610      	ldrsb	r0, [r2, r0]
   12a28:	0022      	movs	r2, r4
   12a2a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   12a2c:	2330      	movs	r3, #48	; 0x30
   12a2e:	18f9      	adds	r1, r7, r3
   12a30:	2330      	movs	r3, #48	; 0x30
   12a32:	18fa      	adds	r2, r7, r3
   12a34:	231a      	movs	r3, #26
   12a36:	18fb      	adds	r3, r7, r3
   12a38:	8812      	ldrh	r2, [r2, #0]
   12a3a:	881b      	ldrh	r3, [r3, #0]
   12a3c:	1ad3      	subs	r3, r2, r3
   12a3e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   12a40:	231a      	movs	r3, #26
   12a42:	18fb      	adds	r3, r7, r3
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	69fa      	ldr	r2, [r7, #28]
   12a48:	18d3      	adds	r3, r2, r3
   12a4a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   12a4c:	230f      	movs	r3, #15
   12a4e:	18fb      	adds	r3, r7, r3
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	b25b      	sxtb	r3, r3
   12a54:	4a17      	ldr	r2, [pc, #92]	; (12ab4 <Socket_ReadSocketData+0x1e0>)
   12a56:	011b      	lsls	r3, r3, #4
   12a58:	18d3      	adds	r3, r2, r3
   12a5a:	330a      	adds	r3, #10
   12a5c:	781b      	ldrb	r3, [r3, #0]
   12a5e:	b2db      	uxtb	r3, r3
   12a60:	2b00      	cmp	r3, #0
   12a62:	d11c      	bne.n	12a9e <Socket_ReadSocketData+0x1ca>
   12a64:	2330      	movs	r3, #48	; 0x30
   12a66:	18fb      	adds	r3, r7, r3
   12a68:	881b      	ldrh	r3, [r3, #0]
   12a6a:	2b00      	cmp	r3, #0
   12a6c:	d017      	beq.n	12a9e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   12a6e:	2301      	movs	r3, #1
   12a70:	2200      	movs	r2, #0
   12a72:	2100      	movs	r1, #0
   12a74:	2000      	movs	r0, #0
   12a76:	4c10      	ldr	r4, [pc, #64]	; (12ab8 <Socket_ReadSocketData+0x1e4>)
   12a78:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   12a7a:	e017      	b.n	12aac <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   12a7c:	4b10      	ldr	r3, [pc, #64]	; (12ac0 <Socket_ReadSocketData+0x1ec>)
   12a7e:	0018      	movs	r0, r3
   12a80:	4b10      	ldr	r3, [pc, #64]	; (12ac4 <Socket_ReadSocketData+0x1f0>)
   12a82:	4798      	blx	r3
   12a84:	2330      	movs	r3, #48	; 0x30
   12a86:	18fb      	adds	r3, r7, r3
   12a88:	881a      	ldrh	r2, [r3, #0]
   12a8a:	4b0f      	ldr	r3, [pc, #60]	; (12ac8 <Socket_ReadSocketData+0x1f4>)
   12a8c:	0011      	movs	r1, r2
   12a8e:	0018      	movs	r0, r3
   12a90:	4b0c      	ldr	r3, [pc, #48]	; (12ac4 <Socket_ReadSocketData+0x1f0>)
   12a92:	4798      	blx	r3
   12a94:	4b0d      	ldr	r3, [pc, #52]	; (12acc <Socket_ReadSocketData+0x1f8>)
   12a96:	0018      	movs	r0, r3
   12a98:	4b0a      	ldr	r3, [pc, #40]	; (12ac4 <Socket_ReadSocketData+0x1f0>)
   12a9a:	4798      	blx	r3
				break;
   12a9c:	e006      	b.n	12aac <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   12a9e:	2330      	movs	r3, #48	; 0x30
   12aa0:	18fb      	adds	r3, r7, r3
   12aa2:	881b      	ldrh	r3, [r3, #0]
   12aa4:	2b00      	cmp	r3, #0
   12aa6:	d000      	beq.n	12aaa <Socket_ReadSocketData+0x1d6>
   12aa8:	e753      	b.n	12952 <Socket_ReadSocketData+0x7e>
	}
}
   12aaa:	e7ff      	b.n	12aac <Socket_ReadSocketData+0x1d8>
   12aac:	46c0      	nop			; (mov r8, r8)
   12aae:	46bd      	mov	sp, r7
   12ab0:	b009      	add	sp, #36	; 0x24
   12ab2:	bd90      	pop	{r4, r7, pc}
   12ab4:	20005be4 	.word	0x20005be4
   12ab8:	0000f2cd 	.word	0x0000f2cd
   12abc:	20005c94 	.word	0x20005c94
   12ac0:	00028190 	.word	0x00028190
   12ac4:	0000b9b9 	.word	0x0000b9b9
   12ac8:	0002819c 	.word	0x0002819c
   12acc:	000281b0 	.word	0x000281b0

00012ad0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   12ad0:	b590      	push	{r4, r7, lr}
   12ad2:	b0bb      	sub	sp, #236	; 0xec
   12ad4:	af02      	add	r7, sp, #8
   12ad6:	603a      	str	r2, [r7, #0]
   12ad8:	1dfb      	adds	r3, r7, #7
   12ada:	1c02      	adds	r2, r0, #0
   12adc:	701a      	strb	r2, [r3, #0]
   12ade:	1d3b      	adds	r3, r7, #4
   12ae0:	1c0a      	adds	r2, r1, #0
   12ae2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   12ae4:	1dfb      	adds	r3, r7, #7
   12ae6:	781b      	ldrb	r3, [r3, #0]
   12ae8:	2b41      	cmp	r3, #65	; 0x41
   12aea:	d003      	beq.n	12af4 <m2m_ip_cb+0x24>
   12aec:	1dfb      	adds	r3, r7, #7
   12aee:	781b      	ldrb	r3, [r3, #0]
   12af0:	2b54      	cmp	r3, #84	; 0x54
   12af2:	d120      	bne.n	12b36 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   12af4:	23cc      	movs	r3, #204	; 0xcc
   12af6:	18f9      	adds	r1, r7, r3
   12af8:	6838      	ldr	r0, [r7, #0]
   12afa:	2300      	movs	r3, #0
   12afc:	2204      	movs	r2, #4
   12afe:	4c98      	ldr	r4, [pc, #608]	; (12d60 <m2m_ip_cb+0x290>)
   12b00:	47a0      	blx	r4
   12b02:	1e03      	subs	r3, r0, #0
   12b04:	d000      	beq.n	12b08 <m2m_ip_cb+0x38>
   12b06:	e275      	b.n	12ff4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   12b08:	23cc      	movs	r3, #204	; 0xcc
   12b0a:	18fb      	adds	r3, r7, r3
   12b0c:	2201      	movs	r2, #1
   12b0e:	569a      	ldrsb	r2, [r3, r2]
   12b10:	23c8      	movs	r3, #200	; 0xc8
   12b12:	18fb      	adds	r3, r7, r3
   12b14:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   12b16:	4b93      	ldr	r3, [pc, #588]	; (12d64 <m2m_ip_cb+0x294>)
   12b18:	681b      	ldr	r3, [r3, #0]
   12b1a:	2b00      	cmp	r3, #0
   12b1c:	d100      	bne.n	12b20 <m2m_ip_cb+0x50>
   12b1e:	e269      	b.n	12ff4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   12b20:	4b90      	ldr	r3, [pc, #576]	; (12d64 <m2m_ip_cb+0x294>)
   12b22:	681b      	ldr	r3, [r3, #0]
   12b24:	22cc      	movs	r2, #204	; 0xcc
   12b26:	18ba      	adds	r2, r7, r2
   12b28:	2000      	movs	r0, #0
   12b2a:	5610      	ldrsb	r0, [r2, r0]
   12b2c:	22c8      	movs	r2, #200	; 0xc8
   12b2e:	18ba      	adds	r2, r7, r2
   12b30:	2101      	movs	r1, #1
   12b32:	4798      	blx	r3
	{
   12b34:	e25e      	b.n	12ff4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   12b36:	1dfb      	adds	r3, r7, #7
   12b38:	781b      	ldrb	r3, [r3, #0]
   12b3a:	2b42      	cmp	r3, #66	; 0x42
   12b3c:	d120      	bne.n	12b80 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   12b3e:	23c4      	movs	r3, #196	; 0xc4
   12b40:	18f9      	adds	r1, r7, r3
   12b42:	6838      	ldr	r0, [r7, #0]
   12b44:	2300      	movs	r3, #0
   12b46:	2204      	movs	r2, #4
   12b48:	4c85      	ldr	r4, [pc, #532]	; (12d60 <m2m_ip_cb+0x290>)
   12b4a:	47a0      	blx	r4
   12b4c:	1e03      	subs	r3, r0, #0
   12b4e:	d000      	beq.n	12b52 <m2m_ip_cb+0x82>
   12b50:	e257      	b.n	13002 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   12b52:	23c4      	movs	r3, #196	; 0xc4
   12b54:	18fb      	adds	r3, r7, r3
   12b56:	2201      	movs	r2, #1
   12b58:	569a      	ldrsb	r2, [r3, r2]
   12b5a:	23c0      	movs	r3, #192	; 0xc0
   12b5c:	18fb      	adds	r3, r7, r3
   12b5e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   12b60:	4b80      	ldr	r3, [pc, #512]	; (12d64 <m2m_ip_cb+0x294>)
   12b62:	681b      	ldr	r3, [r3, #0]
   12b64:	2b00      	cmp	r3, #0
   12b66:	d100      	bne.n	12b6a <m2m_ip_cb+0x9a>
   12b68:	e24b      	b.n	13002 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   12b6a:	4b7e      	ldr	r3, [pc, #504]	; (12d64 <m2m_ip_cb+0x294>)
   12b6c:	681b      	ldr	r3, [r3, #0]
   12b6e:	22c4      	movs	r2, #196	; 0xc4
   12b70:	18ba      	adds	r2, r7, r2
   12b72:	2000      	movs	r0, #0
   12b74:	5610      	ldrsb	r0, [r2, r0]
   12b76:	22c0      	movs	r2, #192	; 0xc0
   12b78:	18ba      	adds	r2, r7, r2
   12b7a:	2102      	movs	r1, #2
   12b7c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   12b7e:	e240      	b.n	13002 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   12b80:	1dfb      	adds	r3, r7, #7
   12b82:	781b      	ldrb	r3, [r3, #0]
   12b84:	2b43      	cmp	r3, #67	; 0x43
   12b86:	d000      	beq.n	12b8a <m2m_ip_cb+0xba>
   12b88:	e086      	b.n	12c98 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   12b8a:	23b4      	movs	r3, #180	; 0xb4
   12b8c:	18f9      	adds	r1, r7, r3
   12b8e:	6838      	ldr	r0, [r7, #0]
   12b90:	2300      	movs	r3, #0
   12b92:	220c      	movs	r2, #12
   12b94:	4c72      	ldr	r4, [pc, #456]	; (12d60 <m2m_ip_cb+0x290>)
   12b96:	47a0      	blx	r4
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d000      	beq.n	12b9e <m2m_ip_cb+0xce>
   12b9c:	e231      	b.n	13002 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   12b9e:	23b4      	movs	r3, #180	; 0xb4
   12ba0:	18fb      	adds	r3, r7, r3
   12ba2:	7a5b      	ldrb	r3, [r3, #9]
   12ba4:	b25b      	sxtb	r3, r3
   12ba6:	2b00      	cmp	r3, #0
   12ba8:	db4f      	blt.n	12c4a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   12baa:	23b4      	movs	r3, #180	; 0xb4
   12bac:	18fb      	adds	r3, r7, r3
   12bae:	7a5b      	ldrb	r3, [r3, #9]
   12bb0:	b25b      	sxtb	r3, r3
   12bb2:	0018      	movs	r0, r3
   12bb4:	23b4      	movs	r3, #180	; 0xb4
   12bb6:	18fb      	adds	r3, r7, r3
   12bb8:	7a1b      	ldrb	r3, [r3, #8]
   12bba:	b25b      	sxtb	r3, r3
   12bbc:	4a6a      	ldr	r2, [pc, #424]	; (12d68 <m2m_ip_cb+0x298>)
   12bbe:	011b      	lsls	r3, r3, #4
   12bc0:	18d3      	adds	r3, r2, r3
   12bc2:	330b      	adds	r3, #11
   12bc4:	781b      	ldrb	r3, [r3, #0]
   12bc6:	b2d9      	uxtb	r1, r3
   12bc8:	4a67      	ldr	r2, [pc, #412]	; (12d68 <m2m_ip_cb+0x298>)
   12bca:	0103      	lsls	r3, r0, #4
   12bcc:	18d3      	adds	r3, r2, r3
   12bce:	330b      	adds	r3, #11
   12bd0:	1c0a      	adds	r2, r1, #0
   12bd2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   12bd4:	23b4      	movs	r3, #180	; 0xb4
   12bd6:	18fb      	adds	r3, r7, r3
   12bd8:	7a5b      	ldrb	r3, [r3, #9]
   12bda:	b25b      	sxtb	r3, r3
   12bdc:	4a62      	ldr	r2, [pc, #392]	; (12d68 <m2m_ip_cb+0x298>)
   12bde:	011b      	lsls	r3, r3, #4
   12be0:	18d3      	adds	r3, r2, r3
   12be2:	330a      	adds	r3, #10
   12be4:	2201      	movs	r2, #1
   12be6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   12be8:	23b4      	movs	r3, #180	; 0xb4
   12bea:	18fb      	adds	r3, r7, r3
   12bec:	7a5b      	ldrb	r3, [r3, #9]
   12bee:	b25b      	sxtb	r3, r3
   12bf0:	0018      	movs	r0, r3
   12bf2:	23b4      	movs	r3, #180	; 0xb4
   12bf4:	18fb      	adds	r3, r7, r3
   12bf6:	895b      	ldrh	r3, [r3, #10]
   12bf8:	3b08      	subs	r3, #8
   12bfa:	b299      	uxth	r1, r3
   12bfc:	4a5a      	ldr	r2, [pc, #360]	; (12d68 <m2m_ip_cb+0x298>)
   12bfe:	0103      	lsls	r3, r0, #4
   12c00:	18d3      	adds	r3, r2, r3
   12c02:	3308      	adds	r3, #8
   12c04:	1c0a      	adds	r2, r1, #0
   12c06:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   12c08:	4b58      	ldr	r3, [pc, #352]	; (12d6c <m2m_ip_cb+0x29c>)
   12c0a:	881b      	ldrh	r3, [r3, #0]
   12c0c:	b29b      	uxth	r3, r3
   12c0e:	3301      	adds	r3, #1
   12c10:	b29a      	uxth	r2, r3
   12c12:	4b56      	ldr	r3, [pc, #344]	; (12d6c <m2m_ip_cb+0x29c>)
   12c14:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   12c16:	4b55      	ldr	r3, [pc, #340]	; (12d6c <m2m_ip_cb+0x29c>)
   12c18:	881b      	ldrh	r3, [r3, #0]
   12c1a:	b29b      	uxth	r3, r3
   12c1c:	2b00      	cmp	r3, #0
   12c1e:	d106      	bne.n	12c2e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   12c20:	4b52      	ldr	r3, [pc, #328]	; (12d6c <m2m_ip_cb+0x29c>)
   12c22:	881b      	ldrh	r3, [r3, #0]
   12c24:	b29b      	uxth	r3, r3
   12c26:	3301      	adds	r3, #1
   12c28:	b29a      	uxth	r2, r3
   12c2a:	4b50      	ldr	r3, [pc, #320]	; (12d6c <m2m_ip_cb+0x29c>)
   12c2c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   12c2e:	23b4      	movs	r3, #180	; 0xb4
   12c30:	18fb      	adds	r3, r7, r3
   12c32:	7a5b      	ldrb	r3, [r3, #9]
   12c34:	b25b      	sxtb	r3, r3
   12c36:	0018      	movs	r0, r3
   12c38:	4b4c      	ldr	r3, [pc, #304]	; (12d6c <m2m_ip_cb+0x29c>)
   12c3a:	881b      	ldrh	r3, [r3, #0]
   12c3c:	b299      	uxth	r1, r3
   12c3e:	4a4a      	ldr	r2, [pc, #296]	; (12d68 <m2m_ip_cb+0x298>)
   12c40:	0103      	lsls	r3, r0, #4
   12c42:	18d3      	adds	r3, r2, r3
   12c44:	3306      	adds	r3, #6
   12c46:	1c0a      	adds	r2, r1, #0
   12c48:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   12c4a:	23b4      	movs	r3, #180	; 0xb4
   12c4c:	18fb      	adds	r3, r7, r3
   12c4e:	2209      	movs	r2, #9
   12c50:	569a      	ldrsb	r2, [r3, r2]
   12c52:	23a0      	movs	r3, #160	; 0xa0
   12c54:	18fb      	adds	r3, r7, r3
   12c56:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   12c58:	23a0      	movs	r3, #160	; 0xa0
   12c5a:	18fb      	adds	r3, r7, r3
   12c5c:	2202      	movs	r2, #2
   12c5e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   12c60:	23b4      	movs	r3, #180	; 0xb4
   12c62:	18fb      	adds	r3, r7, r3
   12c64:	885a      	ldrh	r2, [r3, #2]
   12c66:	23a0      	movs	r3, #160	; 0xa0
   12c68:	18fb      	adds	r3, r7, r3
   12c6a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   12c6c:	23b4      	movs	r3, #180	; 0xb4
   12c6e:	18fb      	adds	r3, r7, r3
   12c70:	685a      	ldr	r2, [r3, #4]
   12c72:	23a0      	movs	r3, #160	; 0xa0
   12c74:	18fb      	adds	r3, r7, r3
   12c76:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   12c78:	4b3a      	ldr	r3, [pc, #232]	; (12d64 <m2m_ip_cb+0x294>)
   12c7a:	681b      	ldr	r3, [r3, #0]
   12c7c:	2b00      	cmp	r3, #0
   12c7e:	d100      	bne.n	12c82 <m2m_ip_cb+0x1b2>
   12c80:	e1bf      	b.n	13002 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   12c82:	4b38      	ldr	r3, [pc, #224]	; (12d64 <m2m_ip_cb+0x294>)
   12c84:	681b      	ldr	r3, [r3, #0]
   12c86:	22b4      	movs	r2, #180	; 0xb4
   12c88:	18ba      	adds	r2, r7, r2
   12c8a:	2008      	movs	r0, #8
   12c8c:	5610      	ldrsb	r0, [r2, r0]
   12c8e:	22a0      	movs	r2, #160	; 0xa0
   12c90:	18ba      	adds	r2, r7, r2
   12c92:	2104      	movs	r1, #4
   12c94:	4798      	blx	r3
}
   12c96:	e1b4      	b.n	13002 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   12c98:	1dfb      	adds	r3, r7, #7
   12c9a:	781b      	ldrb	r3, [r3, #0]
   12c9c:	2b44      	cmp	r3, #68	; 0x44
   12c9e:	d003      	beq.n	12ca8 <m2m_ip_cb+0x1d8>
   12ca0:	1dfb      	adds	r3, r7, #7
   12ca2:	781b      	ldrb	r3, [r3, #0]
   12ca4:	2b4b      	cmp	r3, #75	; 0x4b
   12ca6:	d13d      	bne.n	12d24 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   12ca8:	239c      	movs	r3, #156	; 0x9c
   12caa:	18f9      	adds	r1, r7, r3
   12cac:	6838      	ldr	r0, [r7, #0]
   12cae:	2300      	movs	r3, #0
   12cb0:	2204      	movs	r2, #4
   12cb2:	4c2b      	ldr	r4, [pc, #172]	; (12d60 <m2m_ip_cb+0x290>)
   12cb4:	47a0      	blx	r4
   12cb6:	1e03      	subs	r3, r0, #0
   12cb8:	d000      	beq.n	12cbc <m2m_ip_cb+0x1ec>
   12cba:	e19d      	b.n	12ff8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   12cbc:	239c      	movs	r3, #156	; 0x9c
   12cbe:	18fb      	adds	r3, r7, r3
   12cc0:	2200      	movs	r2, #0
   12cc2:	569a      	ldrsb	r2, [r3, r2]
   12cc4:	2398      	movs	r3, #152	; 0x98
   12cc6:	18fb      	adds	r3, r7, r3
   12cc8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   12cca:	239c      	movs	r3, #156	; 0x9c
   12ccc:	18fb      	adds	r3, r7, r3
   12cce:	2201      	movs	r2, #1
   12cd0:	569a      	ldrsb	r2, [r3, r2]
   12cd2:	2398      	movs	r3, #152	; 0x98
   12cd4:	18fb      	adds	r3, r7, r3
   12cd6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   12cd8:	239c      	movs	r3, #156	; 0x9c
   12cda:	18fb      	adds	r3, r7, r3
   12cdc:	785b      	ldrb	r3, [r3, #1]
   12cde:	b25b      	sxtb	r3, r3
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d10f      	bne.n	12d04 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   12ce4:	239c      	movs	r3, #156	; 0x9c
   12ce6:	18fb      	adds	r3, r7, r3
   12ce8:	781b      	ldrb	r3, [r3, #0]
   12cea:	b25b      	sxtb	r3, r3
   12cec:	0018      	movs	r0, r3
   12cee:	239c      	movs	r3, #156	; 0x9c
   12cf0:	18fb      	adds	r3, r7, r3
   12cf2:	885b      	ldrh	r3, [r3, #2]
   12cf4:	3b08      	subs	r3, #8
   12cf6:	b299      	uxth	r1, r3
   12cf8:	4a1b      	ldr	r2, [pc, #108]	; (12d68 <m2m_ip_cb+0x298>)
   12cfa:	0103      	lsls	r3, r0, #4
   12cfc:	18d3      	adds	r3, r2, r3
   12cfe:	3308      	adds	r3, #8
   12d00:	1c0a      	adds	r2, r1, #0
   12d02:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   12d04:	4b17      	ldr	r3, [pc, #92]	; (12d64 <m2m_ip_cb+0x294>)
   12d06:	681b      	ldr	r3, [r3, #0]
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d100      	bne.n	12d0e <m2m_ip_cb+0x23e>
   12d0c:	e174      	b.n	12ff8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   12d0e:	4b15      	ldr	r3, [pc, #84]	; (12d64 <m2m_ip_cb+0x294>)
   12d10:	681b      	ldr	r3, [r3, #0]
   12d12:	229c      	movs	r2, #156	; 0x9c
   12d14:	18ba      	adds	r2, r7, r2
   12d16:	2000      	movs	r0, #0
   12d18:	5610      	ldrsb	r0, [r2, r0]
   12d1a:	2298      	movs	r2, #152	; 0x98
   12d1c:	18ba      	adds	r2, r7, r2
   12d1e:	2105      	movs	r1, #5
   12d20:	4798      	blx	r3
	{
   12d22:	e169      	b.n	12ff8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   12d24:	1dfb      	adds	r3, r7, #7
   12d26:	781b      	ldrb	r3, [r3, #0]
   12d28:	2b4a      	cmp	r3, #74	; 0x4a
   12d2a:	d123      	bne.n	12d74 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   12d2c:	230c      	movs	r3, #12
   12d2e:	18f9      	adds	r1, r7, r3
   12d30:	6838      	ldr	r0, [r7, #0]
   12d32:	2300      	movs	r3, #0
   12d34:	2244      	movs	r2, #68	; 0x44
   12d36:	4c0a      	ldr	r4, [pc, #40]	; (12d60 <m2m_ip_cb+0x290>)
   12d38:	47a0      	blx	r4
   12d3a:	1e03      	subs	r3, r0, #0
   12d3c:	d000      	beq.n	12d40 <m2m_ip_cb+0x270>
   12d3e:	e160      	b.n	13002 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   12d40:	4b0b      	ldr	r3, [pc, #44]	; (12d70 <m2m_ip_cb+0x2a0>)
   12d42:	681b      	ldr	r3, [r3, #0]
   12d44:	2b00      	cmp	r3, #0
   12d46:	d100      	bne.n	12d4a <m2m_ip_cb+0x27a>
   12d48:	e15b      	b.n	13002 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   12d4a:	4b09      	ldr	r3, [pc, #36]	; (12d70 <m2m_ip_cb+0x2a0>)
   12d4c:	681a      	ldr	r2, [r3, #0]
   12d4e:	230c      	movs	r3, #12
   12d50:	18fb      	adds	r3, r7, r3
   12d52:	6c19      	ldr	r1, [r3, #64]	; 0x40
   12d54:	230c      	movs	r3, #12
   12d56:	18fb      	adds	r3, r7, r3
   12d58:	0018      	movs	r0, r3
   12d5a:	4790      	blx	r2
}
   12d5c:	e151      	b.n	13002 <m2m_ip_cb+0x532>
   12d5e:	46c0      	nop			; (mov r8, r8)
   12d60:	0000f2cd 	.word	0x0000f2cd
   12d64:	20005c94 	.word	0x20005c94
   12d68:	20005be4 	.word	0x20005be4
   12d6c:	20004342 	.word	0x20004342
   12d70:	20005c9c 	.word	0x20005c9c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   12d74:	1dfb      	adds	r3, r7, #7
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2b46      	cmp	r3, #70	; 0x46
   12d7a:	d008      	beq.n	12d8e <m2m_ip_cb+0x2be>
   12d7c:	1dfb      	adds	r3, r7, #7
   12d7e:	781b      	ldrb	r3, [r3, #0]
   12d80:	2b48      	cmp	r3, #72	; 0x48
   12d82:	d004      	beq.n	12d8e <m2m_ip_cb+0x2be>
   12d84:	1dfb      	adds	r3, r7, #7
   12d86:	781b      	ldrb	r3, [r3, #0]
   12d88:	2b4d      	cmp	r3, #77	; 0x4d
   12d8a:	d000      	beq.n	12d8e <m2m_ip_cb+0x2be>
   12d8c:	e0b4      	b.n	12ef8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   12d8e:	23df      	movs	r3, #223	; 0xdf
   12d90:	18fb      	adds	r3, r7, r3
   12d92:	2206      	movs	r2, #6
   12d94:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   12d96:	1dfb      	adds	r3, r7, #7
   12d98:	781b      	ldrb	r3, [r3, #0]
   12d9a:	2b48      	cmp	r3, #72	; 0x48
   12d9c:	d103      	bne.n	12da6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   12d9e:	23df      	movs	r3, #223	; 0xdf
   12da0:	18fb      	adds	r3, r7, r3
   12da2:	2209      	movs	r2, #9
   12da4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   12da6:	23d8      	movs	r3, #216	; 0xd8
   12da8:	18fb      	adds	r3, r7, r3
   12daa:	2210      	movs	r2, #16
   12dac:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   12dae:	23d8      	movs	r3, #216	; 0xd8
   12db0:	18fb      	adds	r3, r7, r3
   12db2:	881a      	ldrh	r2, [r3, #0]
   12db4:	2388      	movs	r3, #136	; 0x88
   12db6:	18f9      	adds	r1, r7, r3
   12db8:	6838      	ldr	r0, [r7, #0]
   12dba:	2300      	movs	r3, #0
   12dbc:	4c93      	ldr	r4, [pc, #588]	; (1300c <m2m_ip_cb+0x53c>)
   12dbe:	47a0      	blx	r4
   12dc0:	1e03      	subs	r3, r0, #0
   12dc2:	d000      	beq.n	12dc6 <m2m_ip_cb+0x2f6>
   12dc4:	e11a      	b.n	12ffc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   12dc6:	23d6      	movs	r3, #214	; 0xd6
   12dc8:	18fb      	adds	r3, r7, r3
   12dca:	2200      	movs	r2, #0
   12dcc:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   12dce:	23d5      	movs	r3, #213	; 0xd5
   12dd0:	18fb      	adds	r3, r7, r3
   12dd2:	2288      	movs	r2, #136	; 0x88
   12dd4:	18ba      	adds	r2, r7, r2
   12dd6:	7b12      	ldrb	r2, [r2, #12]
   12dd8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   12dda:	23d6      	movs	r3, #214	; 0xd6
   12ddc:	18fb      	adds	r3, r7, r3
   12dde:	2288      	movs	r2, #136	; 0x88
   12de0:	18ba      	adds	r2, r7, r2
   12de2:	89d2      	ldrh	r2, [r2, #14]
   12de4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   12de6:	23d5      	movs	r3, #213	; 0xd5
   12de8:	18fb      	adds	r3, r7, r3
   12dea:	781b      	ldrb	r3, [r3, #0]
   12dec:	b25b      	sxtb	r3, r3
   12dee:	4a88      	ldr	r2, [pc, #544]	; (13010 <m2m_ip_cb+0x540>)
   12df0:	011b      	lsls	r3, r3, #4
   12df2:	18d3      	adds	r3, r2, r3
   12df4:	330c      	adds	r3, #12
   12df6:	2200      	movs	r2, #0
   12df8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   12dfa:	23d2      	movs	r3, #210	; 0xd2
   12dfc:	18fb      	adds	r3, r7, r3
   12dfe:	2288      	movs	r2, #136	; 0x88
   12e00:	18ba      	adds	r2, r7, r2
   12e02:	8912      	ldrh	r2, [r2, #8]
   12e04:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   12e06:	23d0      	movs	r3, #208	; 0xd0
   12e08:	18fb      	adds	r3, r7, r3
   12e0a:	2288      	movs	r2, #136	; 0x88
   12e0c:	18ba      	adds	r2, r7, r2
   12e0e:	8952      	ldrh	r2, [r2, #10]
   12e10:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   12e12:	2388      	movs	r3, #136	; 0x88
   12e14:	18fb      	adds	r3, r7, r3
   12e16:	885a      	ldrh	r2, [r3, #2]
   12e18:	2370      	movs	r3, #112	; 0x70
   12e1a:	18fb      	adds	r3, r7, r3
   12e1c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   12e1e:	2388      	movs	r3, #136	; 0x88
   12e20:	18fb      	adds	r3, r7, r3
   12e22:	685a      	ldr	r2, [r3, #4]
   12e24:	2370      	movs	r3, #112	; 0x70
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   12e2a:	23d5      	movs	r3, #213	; 0xd5
   12e2c:	18fb      	adds	r3, r7, r3
   12e2e:	781b      	ldrb	r3, [r3, #0]
   12e30:	b25b      	sxtb	r3, r3
   12e32:	4a77      	ldr	r2, [pc, #476]	; (13010 <m2m_ip_cb+0x540>)
   12e34:	011b      	lsls	r3, r3, #4
   12e36:	18d3      	adds	r3, r2, r3
   12e38:	3306      	adds	r3, #6
   12e3a:	881b      	ldrh	r3, [r3, #0]
   12e3c:	b29b      	uxth	r3, r3
   12e3e:	22d6      	movs	r2, #214	; 0xd6
   12e40:	18ba      	adds	r2, r7, r2
   12e42:	8812      	ldrh	r2, [r2, #0]
   12e44:	429a      	cmp	r2, r3
   12e46:	d148      	bne.n	12eda <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   12e48:	23d2      	movs	r3, #210	; 0xd2
   12e4a:	18fb      	adds	r3, r7, r3
   12e4c:	2200      	movs	r2, #0
   12e4e:	5e9b      	ldrsh	r3, [r3, r2]
   12e50:	2b00      	cmp	r3, #0
   12e52:	dd25      	ble.n	12ea0 <m2m_ip_cb+0x3d0>
   12e54:	23d2      	movs	r3, #210	; 0xd2
   12e56:	18fb      	adds	r3, r7, r3
   12e58:	2200      	movs	r2, #0
   12e5a:	5e9a      	ldrsh	r2, [r3, r2]
   12e5c:	1d3b      	adds	r3, r7, #4
   12e5e:	881b      	ldrh	r3, [r3, #0]
   12e60:	429a      	cmp	r2, r3
   12e62:	da1d      	bge.n	12ea0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   12e64:	23d0      	movs	r3, #208	; 0xd0
   12e66:	18fb      	adds	r3, r7, r3
   12e68:	881b      	ldrh	r3, [r3, #0]
   12e6a:	683a      	ldr	r2, [r7, #0]
   12e6c:	18d3      	adds	r3, r2, r3
   12e6e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   12e70:	23d8      	movs	r3, #216	; 0xd8
   12e72:	18fb      	adds	r3, r7, r3
   12e74:	22d2      	movs	r2, #210	; 0xd2
   12e76:	18ba      	adds	r2, r7, r2
   12e78:	8812      	ldrh	r2, [r2, #0]
   12e7a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   12e7c:	683c      	ldr	r4, [r7, #0]
   12e7e:	23df      	movs	r3, #223	; 0xdf
   12e80:	18fb      	adds	r3, r7, r3
   12e82:	781a      	ldrb	r2, [r3, #0]
   12e84:	2370      	movs	r3, #112	; 0x70
   12e86:	18f9      	adds	r1, r7, r3
   12e88:	23d5      	movs	r3, #213	; 0xd5
   12e8a:	18fb      	adds	r3, r7, r3
   12e8c:	2000      	movs	r0, #0
   12e8e:	5618      	ldrsb	r0, [r3, r0]
   12e90:	23d8      	movs	r3, #216	; 0xd8
   12e92:	18fb      	adds	r3, r7, r3
   12e94:	881b      	ldrh	r3, [r3, #0]
   12e96:	9300      	str	r3, [sp, #0]
   12e98:	0023      	movs	r3, r4
   12e9a:	4c5e      	ldr	r4, [pc, #376]	; (13014 <m2m_ip_cb+0x544>)
   12e9c:	47a0      	blx	r4
	{
   12e9e:	e0ad      	b.n	12ffc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   12ea0:	2370      	movs	r3, #112	; 0x70
   12ea2:	18fb      	adds	r3, r7, r3
   12ea4:	22d2      	movs	r2, #210	; 0xd2
   12ea6:	18ba      	adds	r2, r7, r2
   12ea8:	8812      	ldrh	r2, [r2, #0]
   12eaa:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   12eac:	2370      	movs	r3, #112	; 0x70
   12eae:	18fb      	adds	r3, r7, r3
   12eb0:	2200      	movs	r2, #0
   12eb2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   12eb4:	4b58      	ldr	r3, [pc, #352]	; (13018 <m2m_ip_cb+0x548>)
   12eb6:	681b      	ldr	r3, [r3, #0]
   12eb8:	2b00      	cmp	r3, #0
   12eba:	d100      	bne.n	12ebe <m2m_ip_cb+0x3ee>
   12ebc:	e09e      	b.n	12ffc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   12ebe:	4b56      	ldr	r3, [pc, #344]	; (13018 <m2m_ip_cb+0x548>)
   12ec0:	681b      	ldr	r3, [r3, #0]
   12ec2:	2270      	movs	r2, #112	; 0x70
   12ec4:	18bc      	adds	r4, r7, r2
   12ec6:	22df      	movs	r2, #223	; 0xdf
   12ec8:	18ba      	adds	r2, r7, r2
   12eca:	7811      	ldrb	r1, [r2, #0]
   12ecc:	22d5      	movs	r2, #213	; 0xd5
   12ece:	18ba      	adds	r2, r7, r2
   12ed0:	2000      	movs	r0, #0
   12ed2:	5610      	ldrsb	r0, [r2, r0]
   12ed4:	0022      	movs	r2, r4
   12ed6:	4798      	blx	r3
	{
   12ed8:	e090      	b.n	12ffc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   12eda:	23d8      	movs	r3, #216	; 0xd8
   12edc:	18fa      	adds	r2, r7, r3
   12ede:	1d3b      	adds	r3, r7, #4
   12ee0:	8812      	ldrh	r2, [r2, #0]
   12ee2:	881b      	ldrh	r3, [r3, #0]
   12ee4:	429a      	cmp	r2, r3
   12ee6:	d300      	bcc.n	12eea <m2m_ip_cb+0x41a>
   12ee8:	e088      	b.n	12ffc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   12eea:	2301      	movs	r3, #1
   12eec:	2200      	movs	r2, #0
   12eee:	2100      	movs	r1, #0
   12ef0:	2000      	movs	r0, #0
   12ef2:	4c46      	ldr	r4, [pc, #280]	; (1300c <m2m_ip_cb+0x53c>)
   12ef4:	47a0      	blx	r4
	{
   12ef6:	e081      	b.n	12ffc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   12ef8:	1dfb      	adds	r3, r7, #7
   12efa:	781b      	ldrb	r3, [r3, #0]
   12efc:	2b45      	cmp	r3, #69	; 0x45
   12efe:	d007      	beq.n	12f10 <m2m_ip_cb+0x440>
   12f00:	1dfb      	adds	r3, r7, #7
   12f02:	781b      	ldrb	r3, [r3, #0]
   12f04:	2b47      	cmp	r3, #71	; 0x47
   12f06:	d003      	beq.n	12f10 <m2m_ip_cb+0x440>
   12f08:	1dfb      	adds	r3, r7, #7
   12f0a:	781b      	ldrb	r3, [r3, #0]
   12f0c:	2b4c      	cmp	r3, #76	; 0x4c
   12f0e:	d14c      	bne.n	12faa <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   12f10:	23de      	movs	r3, #222	; 0xde
   12f12:	18fb      	adds	r3, r7, r3
   12f14:	2207      	movs	r2, #7
   12f16:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   12f18:	1dfb      	adds	r3, r7, #7
   12f1a:	781b      	ldrb	r3, [r3, #0]
   12f1c:	2b47      	cmp	r3, #71	; 0x47
   12f1e:	d103      	bne.n	12f28 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   12f20:	23de      	movs	r3, #222	; 0xde
   12f22:	18fb      	adds	r3, r7, r3
   12f24:	2208      	movs	r2, #8
   12f26:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   12f28:	2364      	movs	r3, #100	; 0x64
   12f2a:	18f9      	adds	r1, r7, r3
   12f2c:	6838      	ldr	r0, [r7, #0]
   12f2e:	2300      	movs	r3, #0
   12f30:	2208      	movs	r2, #8
   12f32:	4c36      	ldr	r4, [pc, #216]	; (1300c <m2m_ip_cb+0x53c>)
   12f34:	47a0      	blx	r4
   12f36:	1e03      	subs	r3, r0, #0
   12f38:	d162      	bne.n	13000 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   12f3a:	23dc      	movs	r3, #220	; 0xdc
   12f3c:	18fb      	adds	r3, r7, r3
   12f3e:	2200      	movs	r2, #0
   12f40:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   12f42:	23db      	movs	r3, #219	; 0xdb
   12f44:	18fb      	adds	r3, r7, r3
   12f46:	2264      	movs	r2, #100	; 0x64
   12f48:	18ba      	adds	r2, r7, r2
   12f4a:	7812      	ldrb	r2, [r2, #0]
   12f4c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   12f4e:	23dc      	movs	r3, #220	; 0xdc
   12f50:	18fb      	adds	r3, r7, r3
   12f52:	2264      	movs	r2, #100	; 0x64
   12f54:	18ba      	adds	r2, r7, r2
   12f56:	8892      	ldrh	r2, [r2, #4]
   12f58:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   12f5a:	2364      	movs	r3, #100	; 0x64
   12f5c:	18fb      	adds	r3, r7, r3
   12f5e:	2202      	movs	r2, #2
   12f60:	5e9a      	ldrsh	r2, [r3, r2]
   12f62:	236e      	movs	r3, #110	; 0x6e
   12f64:	18fb      	adds	r3, r7, r3
   12f66:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   12f68:	23db      	movs	r3, #219	; 0xdb
   12f6a:	18fb      	adds	r3, r7, r3
   12f6c:	781b      	ldrb	r3, [r3, #0]
   12f6e:	b25b      	sxtb	r3, r3
   12f70:	4a27      	ldr	r2, [pc, #156]	; (13010 <m2m_ip_cb+0x540>)
   12f72:	011b      	lsls	r3, r3, #4
   12f74:	18d3      	adds	r3, r2, r3
   12f76:	3306      	adds	r3, #6
   12f78:	881b      	ldrh	r3, [r3, #0]
   12f7a:	b29b      	uxth	r3, r3
   12f7c:	22dc      	movs	r2, #220	; 0xdc
   12f7e:	18ba      	adds	r2, r7, r2
   12f80:	8812      	ldrh	r2, [r2, #0]
   12f82:	429a      	cmp	r2, r3
   12f84:	d13c      	bne.n	13000 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   12f86:	4b24      	ldr	r3, [pc, #144]	; (13018 <m2m_ip_cb+0x548>)
   12f88:	681b      	ldr	r3, [r3, #0]
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d038      	beq.n	13000 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   12f8e:	4b22      	ldr	r3, [pc, #136]	; (13018 <m2m_ip_cb+0x548>)
   12f90:	681b      	ldr	r3, [r3, #0]
   12f92:	226e      	movs	r2, #110	; 0x6e
   12f94:	18bc      	adds	r4, r7, r2
   12f96:	22de      	movs	r2, #222	; 0xde
   12f98:	18ba      	adds	r2, r7, r2
   12f9a:	7811      	ldrb	r1, [r2, #0]
   12f9c:	22db      	movs	r2, #219	; 0xdb
   12f9e:	18ba      	adds	r2, r7, r2
   12fa0:	2000      	movs	r0, #0
   12fa2:	5610      	ldrsb	r0, [r2, r0]
   12fa4:	0022      	movs	r2, r4
   12fa6:	4798      	blx	r3
	{
   12fa8:	e02a      	b.n	13000 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   12faa:	1dfb      	adds	r3, r7, #7
   12fac:	781b      	ldrb	r3, [r3, #0]
   12fae:	2b52      	cmp	r3, #82	; 0x52
   12fb0:	d127      	bne.n	13002 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   12fb2:	2350      	movs	r3, #80	; 0x50
   12fb4:	18f9      	adds	r1, r7, r3
   12fb6:	6838      	ldr	r0, [r7, #0]
   12fb8:	2301      	movs	r3, #1
   12fba:	2214      	movs	r2, #20
   12fbc:	4c13      	ldr	r4, [pc, #76]	; (1300c <m2m_ip_cb+0x53c>)
   12fbe:	47a0      	blx	r4
   12fc0:	1e03      	subs	r3, r0, #0
   12fc2:	d11e      	bne.n	13002 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   12fc4:	2350      	movs	r3, #80	; 0x50
   12fc6:	18fb      	adds	r3, r7, r3
   12fc8:	685b      	ldr	r3, [r3, #4]
   12fca:	001a      	movs	r2, r3
   12fcc:	4b13      	ldr	r3, [pc, #76]	; (1301c <m2m_ip_cb+0x54c>)
   12fce:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   12fd0:	4b12      	ldr	r3, [pc, #72]	; (1301c <m2m_ip_cb+0x54c>)
   12fd2:	681b      	ldr	r3, [r3, #0]
   12fd4:	2b00      	cmp	r3, #0
   12fd6:	d014      	beq.n	13002 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   12fd8:	4b10      	ldr	r3, [pc, #64]	; (1301c <m2m_ip_cb+0x54c>)
   12fda:	681c      	ldr	r4, [r3, #0]
   12fdc:	2350      	movs	r3, #80	; 0x50
   12fde:	18fb      	adds	r3, r7, r3
   12fe0:	6818      	ldr	r0, [r3, #0]
   12fe2:	2350      	movs	r3, #80	; 0x50
   12fe4:	18fb      	adds	r3, r7, r3
   12fe6:	6899      	ldr	r1, [r3, #8]
   12fe8:	2350      	movs	r3, #80	; 0x50
   12fea:	18fb      	adds	r3, r7, r3
   12fec:	7c1b      	ldrb	r3, [r3, #16]
   12fee:	001a      	movs	r2, r3
   12ff0:	47a0      	blx	r4
}
   12ff2:	e006      	b.n	13002 <m2m_ip_cb+0x532>
	{
   12ff4:	46c0      	nop			; (mov r8, r8)
   12ff6:	e004      	b.n	13002 <m2m_ip_cb+0x532>
	{
   12ff8:	46c0      	nop			; (mov r8, r8)
   12ffa:	e002      	b.n	13002 <m2m_ip_cb+0x532>
	{
   12ffc:	46c0      	nop			; (mov r8, r8)
   12ffe:	e000      	b.n	13002 <m2m_ip_cb+0x532>
	{
   13000:	46c0      	nop			; (mov r8, r8)
}
   13002:	46c0      	nop			; (mov r8, r8)
   13004:	46bd      	mov	sp, r7
   13006:	b039      	add	sp, #228	; 0xe4
   13008:	bd90      	pop	{r4, r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	0000f2cd 	.word	0x0000f2cd
   13010:	20005be4 	.word	0x20005be4
   13014:	000128d5 	.word	0x000128d5
   13018:	20005c94 	.word	0x20005c94
   1301c:	20005c98 	.word	0x20005c98

00013020 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   13020:	b580      	push	{r7, lr}
   13022:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   13024:	4b0c      	ldr	r3, [pc, #48]	; (13058 <socketInit+0x38>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	2b00      	cmp	r3, #0
   1302c:	d110      	bne.n	13050 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1302e:	4b0b      	ldr	r3, [pc, #44]	; (1305c <socketInit+0x3c>)
   13030:	22b0      	movs	r2, #176	; 0xb0
   13032:	2100      	movs	r1, #0
   13034:	0018      	movs	r0, r3
   13036:	4b0a      	ldr	r3, [pc, #40]	; (13060 <socketInit+0x40>)
   13038:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   1303a:	4b0a      	ldr	r3, [pc, #40]	; (13064 <socketInit+0x44>)
   1303c:	0019      	movs	r1, r3
   1303e:	2002      	movs	r0, #2
   13040:	4b09      	ldr	r3, [pc, #36]	; (13068 <socketInit+0x48>)
   13042:	4798      	blx	r3
		gbSocketInit	= 1;
   13044:	4b04      	ldr	r3, [pc, #16]	; (13058 <socketInit+0x38>)
   13046:	2201      	movs	r2, #1
   13048:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   1304a:	4b08      	ldr	r3, [pc, #32]	; (1306c <socketInit+0x4c>)
   1304c:	2200      	movs	r2, #0
   1304e:	801a      	strh	r2, [r3, #0]
	}
}
   13050:	46c0      	nop			; (mov r8, r8)
   13052:	46bd      	mov	sp, r7
   13054:	bd80      	pop	{r7, pc}
   13056:	46c0      	nop			; (mov r8, r8)
   13058:	20004344 	.word	0x20004344
   1305c:	20005be4 	.word	0x20005be4
   13060:	0000e751 	.word	0x0000e751
   13064:	00012ad1 	.word	0x00012ad1
   13068:	0000f44d 	.word	0x0000f44d
   1306c:	20004342 	.word	0x20004342

00013070 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   13070:	b580      	push	{r7, lr}
   13072:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   13074:	4b0a      	ldr	r3, [pc, #40]	; (130a0 <socketDeinit+0x30>)
   13076:	22b0      	movs	r2, #176	; 0xb0
   13078:	2100      	movs	r1, #0
   1307a:	0018      	movs	r0, r3
   1307c:	4b09      	ldr	r3, [pc, #36]	; (130a4 <socketDeinit+0x34>)
   1307e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   13080:	2100      	movs	r1, #0
   13082:	2002      	movs	r0, #2
   13084:	4b08      	ldr	r3, [pc, #32]	; (130a8 <socketDeinit+0x38>)
   13086:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   13088:	4b08      	ldr	r3, [pc, #32]	; (130ac <socketDeinit+0x3c>)
   1308a:	2200      	movs	r2, #0
   1308c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   1308e:	4b08      	ldr	r3, [pc, #32]	; (130b0 <socketDeinit+0x40>)
   13090:	2200      	movs	r2, #0
   13092:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   13094:	4b07      	ldr	r3, [pc, #28]	; (130b4 <socketDeinit+0x44>)
   13096:	2200      	movs	r2, #0
   13098:	701a      	strb	r2, [r3, #0]
}
   1309a:	46c0      	nop			; (mov r8, r8)
   1309c:	46bd      	mov	sp, r7
   1309e:	bd80      	pop	{r7, pc}
   130a0:	20005be4 	.word	0x20005be4
   130a4:	0000e751 	.word	0x0000e751
   130a8:	0000f44d 	.word	0x0000f44d
   130ac:	20005c94 	.word	0x20005c94
   130b0:	20005c9c 	.word	0x20005c9c
   130b4:	20004344 	.word	0x20004344

000130b8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   130b8:	b580      	push	{r7, lr}
   130ba:	b082      	sub	sp, #8
   130bc:	af00      	add	r7, sp, #0
   130be:	6078      	str	r0, [r7, #4]
   130c0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   130c2:	4b05      	ldr	r3, [pc, #20]	; (130d8 <registerSocketCallback+0x20>)
   130c4:	687a      	ldr	r2, [r7, #4]
   130c6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   130c8:	4b04      	ldr	r3, [pc, #16]	; (130dc <registerSocketCallback+0x24>)
   130ca:	683a      	ldr	r2, [r7, #0]
   130cc:	601a      	str	r2, [r3, #0]
}
   130ce:	46c0      	nop			; (mov r8, r8)
   130d0:	46bd      	mov	sp, r7
   130d2:	b002      	add	sp, #8
   130d4:	bd80      	pop	{r7, pc}
   130d6:	46c0      	nop			; (mov r8, r8)
   130d8:	20005c94 	.word	0x20005c94
   130dc:	20005c9c 	.word	0x20005c9c

000130e0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   130e0:	b590      	push	{r4, r7, lr}
   130e2:	b08d      	sub	sp, #52	; 0x34
   130e4:	af04      	add	r7, sp, #16
   130e6:	0004      	movs	r4, r0
   130e8:	0008      	movs	r0, r1
   130ea:	0011      	movs	r1, r2
   130ec:	1dbb      	adds	r3, r7, #6
   130ee:	1c22      	adds	r2, r4, #0
   130f0:	801a      	strh	r2, [r3, #0]
   130f2:	1d7b      	adds	r3, r7, #5
   130f4:	1c02      	adds	r2, r0, #0
   130f6:	701a      	strb	r2, [r3, #0]
   130f8:	1d3b      	adds	r3, r7, #4
   130fa:	1c0a      	adds	r2, r1, #0
   130fc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   130fe:	231f      	movs	r3, #31
   13100:	18fb      	adds	r3, r7, r3
   13102:	22ff      	movs	r2, #255	; 0xff
   13104:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   13106:	1dbb      	adds	r3, r7, #6
   13108:	881b      	ldrh	r3, [r3, #0]
   1310a:	2b02      	cmp	r3, #2
   1310c:	d000      	beq.n	13110 <socket+0x30>
   1310e:	e0ce      	b.n	132ae <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   13110:	1d7b      	adds	r3, r7, #5
   13112:	781b      	ldrb	r3, [r3, #0]
   13114:	2b01      	cmp	r3, #1
   13116:	d135      	bne.n	13184 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   13118:	231e      	movs	r3, #30
   1311a:	18fb      	adds	r3, r7, r3
   1311c:	2200      	movs	r2, #0
   1311e:	701a      	strb	r2, [r3, #0]
   13120:	e02a      	b.n	13178 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   13122:	2317      	movs	r3, #23
   13124:	18fb      	adds	r3, r7, r3
   13126:	4a66      	ldr	r2, [pc, #408]	; (132c0 <socket+0x1e0>)
   13128:	7812      	ldrb	r2, [r2, #0]
   1312a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1312c:	4b64      	ldr	r3, [pc, #400]	; (132c0 <socket+0x1e0>)
   1312e:	781b      	ldrb	r3, [r3, #0]
   13130:	b2db      	uxtb	r3, r3
   13132:	011a      	lsls	r2, r3, #4
   13134:	4b63      	ldr	r3, [pc, #396]	; (132c4 <socket+0x1e4>)
   13136:	18d3      	adds	r3, r2, r3
   13138:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1313a:	4b61      	ldr	r3, [pc, #388]	; (132c0 <socket+0x1e0>)
   1313c:	781b      	ldrb	r3, [r3, #0]
   1313e:	b2db      	uxtb	r3, r3
   13140:	1c5a      	adds	r2, r3, #1
   13142:	4b61      	ldr	r3, [pc, #388]	; (132c8 <socket+0x1e8>)
   13144:	2107      	movs	r1, #7
   13146:	0010      	movs	r0, r2
   13148:	4798      	blx	r3
   1314a:	000b      	movs	r3, r1
   1314c:	b2da      	uxtb	r2, r3
   1314e:	4b5c      	ldr	r3, [pc, #368]	; (132c0 <socket+0x1e0>)
   13150:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   13152:	69bb      	ldr	r3, [r7, #24]
   13154:	7a9b      	ldrb	r3, [r3, #10]
   13156:	b2db      	uxtb	r3, r3
   13158:	2b00      	cmp	r3, #0
   1315a:	d106      	bne.n	1316a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   1315c:	231f      	movs	r3, #31
   1315e:	18fb      	adds	r3, r7, r3
   13160:	2217      	movs	r2, #23
   13162:	18ba      	adds	r2, r7, r2
   13164:	7812      	ldrb	r2, [r2, #0]
   13166:	701a      	strb	r2, [r3, #0]
					break;
   13168:	e04c      	b.n	13204 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   1316a:	231e      	movs	r3, #30
   1316c:	18fb      	adds	r3, r7, r3
   1316e:	781a      	ldrb	r2, [r3, #0]
   13170:	231e      	movs	r3, #30
   13172:	18fb      	adds	r3, r7, r3
   13174:	3201      	adds	r2, #1
   13176:	701a      	strb	r2, [r3, #0]
   13178:	231e      	movs	r3, #30
   1317a:	18fb      	adds	r3, r7, r3
   1317c:	781b      	ldrb	r3, [r3, #0]
   1317e:	2b06      	cmp	r3, #6
   13180:	d9cf      	bls.n	13122 <socket+0x42>
   13182:	e03f      	b.n	13204 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   13184:	1d7b      	adds	r3, r7, #5
   13186:	781b      	ldrb	r3, [r3, #0]
   13188:	2b02      	cmp	r3, #2
   1318a:	d13b      	bne.n	13204 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   1318c:	4b4f      	ldr	r3, [pc, #316]	; (132cc <socket+0x1ec>)
   1318e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   13190:	231e      	movs	r3, #30
   13192:	18fb      	adds	r3, r7, r3
   13194:	2200      	movs	r2, #0
   13196:	701a      	strb	r2, [r3, #0]
   13198:	e02f      	b.n	131fa <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   1319a:	2317      	movs	r3, #23
   1319c:	18fb      	adds	r3, r7, r3
   1319e:	4a4c      	ldr	r2, [pc, #304]	; (132d0 <socket+0x1f0>)
   131a0:	7812      	ldrb	r2, [r2, #0]
   131a2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   131a4:	4b4a      	ldr	r3, [pc, #296]	; (132d0 <socket+0x1f0>)
   131a6:	781b      	ldrb	r3, [r3, #0]
   131a8:	b2db      	uxtb	r3, r3
   131aa:	011b      	lsls	r3, r3, #4
   131ac:	693a      	ldr	r2, [r7, #16]
   131ae:	18d3      	adds	r3, r2, r3
   131b0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   131b2:	4b47      	ldr	r3, [pc, #284]	; (132d0 <socket+0x1f0>)
   131b4:	781b      	ldrb	r3, [r3, #0]
   131b6:	b2db      	uxtb	r3, r3
   131b8:	3301      	adds	r3, #1
   131ba:	4a46      	ldr	r2, [pc, #280]	; (132d4 <socket+0x1f4>)
   131bc:	4013      	ands	r3, r2
   131be:	d504      	bpl.n	131ca <socket+0xea>
   131c0:	3b01      	subs	r3, #1
   131c2:	2204      	movs	r2, #4
   131c4:	4252      	negs	r2, r2
   131c6:	4313      	orrs	r3, r2
   131c8:	3301      	adds	r3, #1
   131ca:	b2da      	uxtb	r2, r3
   131cc:	4b40      	ldr	r3, [pc, #256]	; (132d0 <socket+0x1f0>)
   131ce:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   131d0:	69bb      	ldr	r3, [r7, #24]
   131d2:	7a9b      	ldrb	r3, [r3, #10]
   131d4:	b2db      	uxtb	r3, r3
   131d6:	2b00      	cmp	r3, #0
   131d8:	d108      	bne.n	131ec <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   131da:	2317      	movs	r3, #23
   131dc:	18fb      	adds	r3, r7, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	3307      	adds	r3, #7
   131e2:	b2da      	uxtb	r2, r3
   131e4:	231f      	movs	r3, #31
   131e6:	18fb      	adds	r3, r7, r3
   131e8:	701a      	strb	r2, [r3, #0]
					break;
   131ea:	e00b      	b.n	13204 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   131ec:	231e      	movs	r3, #30
   131ee:	18fb      	adds	r3, r7, r3
   131f0:	781a      	ldrb	r2, [r3, #0]
   131f2:	231e      	movs	r3, #30
   131f4:	18fb      	adds	r3, r7, r3
   131f6:	3201      	adds	r2, #1
   131f8:	701a      	strb	r2, [r3, #0]
   131fa:	231e      	movs	r3, #30
   131fc:	18fb      	adds	r3, r7, r3
   131fe:	781b      	ldrb	r3, [r3, #0]
   13200:	2b03      	cmp	r3, #3
   13202:	d9ca      	bls.n	1319a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   13204:	231f      	movs	r3, #31
   13206:	18fb      	adds	r3, r7, r3
   13208:	781b      	ldrb	r3, [r3, #0]
   1320a:	2b7f      	cmp	r3, #127	; 0x7f
   1320c:	d84f      	bhi.n	132ae <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   1320e:	69bb      	ldr	r3, [r7, #24]
   13210:	2210      	movs	r2, #16
   13212:	2100      	movs	r1, #0
   13214:	0018      	movs	r0, r3
   13216:	4b30      	ldr	r3, [pc, #192]	; (132d8 <socket+0x1f8>)
   13218:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   1321a:	69bb      	ldr	r3, [r7, #24]
   1321c:	2201      	movs	r2, #1
   1321e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   13220:	4b2e      	ldr	r3, [pc, #184]	; (132dc <socket+0x1fc>)
   13222:	881b      	ldrh	r3, [r3, #0]
   13224:	b29b      	uxth	r3, r3
   13226:	3301      	adds	r3, #1
   13228:	b29a      	uxth	r2, r3
   1322a:	4b2c      	ldr	r3, [pc, #176]	; (132dc <socket+0x1fc>)
   1322c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   1322e:	4b2b      	ldr	r3, [pc, #172]	; (132dc <socket+0x1fc>)
   13230:	881b      	ldrh	r3, [r3, #0]
   13232:	b29b      	uxth	r3, r3
   13234:	2b00      	cmp	r3, #0
   13236:	d106      	bne.n	13246 <socket+0x166>
				++gu16SessionID;
   13238:	4b28      	ldr	r3, [pc, #160]	; (132dc <socket+0x1fc>)
   1323a:	881b      	ldrh	r3, [r3, #0]
   1323c:	b29b      	uxth	r3, r3
   1323e:	3301      	adds	r3, #1
   13240:	b29a      	uxth	r2, r3
   13242:	4b26      	ldr	r3, [pc, #152]	; (132dc <socket+0x1fc>)
   13244:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   13246:	4b25      	ldr	r3, [pc, #148]	; (132dc <socket+0x1fc>)
   13248:	881b      	ldrh	r3, [r3, #0]
   1324a:	b29a      	uxth	r2, r3
   1324c:	69bb      	ldr	r3, [r7, #24]
   1324e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   13250:	4b23      	ldr	r3, [pc, #140]	; (132e0 <socket+0x200>)
   13252:	0018      	movs	r0, r3
   13254:	4b23      	ldr	r3, [pc, #140]	; (132e4 <socket+0x204>)
   13256:	4798      	blx	r3
   13258:	231f      	movs	r3, #31
   1325a:	18fb      	adds	r3, r7, r3
   1325c:	2100      	movs	r1, #0
   1325e:	5659      	ldrsb	r1, [r3, r1]
   13260:	4b1e      	ldr	r3, [pc, #120]	; (132dc <socket+0x1fc>)
   13262:	881b      	ldrh	r3, [r3, #0]
   13264:	b29b      	uxth	r3, r3
   13266:	001a      	movs	r2, r3
   13268:	4b1f      	ldr	r3, [pc, #124]	; (132e8 <socket+0x208>)
   1326a:	0018      	movs	r0, r3
   1326c:	4b1d      	ldr	r3, [pc, #116]	; (132e4 <socket+0x204>)
   1326e:	4798      	blx	r3
   13270:	4b1e      	ldr	r3, [pc, #120]	; (132ec <socket+0x20c>)
   13272:	0018      	movs	r0, r3
   13274:	4b1b      	ldr	r3, [pc, #108]	; (132e4 <socket+0x204>)
   13276:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   13278:	1d3b      	adds	r3, r7, #4
   1327a:	781b      	ldrb	r3, [r3, #0]
   1327c:	2201      	movs	r2, #1
   1327e:	4013      	ands	r3, r2
   13280:	d015      	beq.n	132ae <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   13282:	230c      	movs	r3, #12
   13284:	18fb      	adds	r3, r7, r3
   13286:	221f      	movs	r2, #31
   13288:	18ba      	adds	r2, r7, r2
   1328a:	7812      	ldrb	r2, [r2, #0]
   1328c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   1328e:	69bb      	ldr	r3, [r7, #24]
   13290:	2221      	movs	r2, #33	; 0x21
   13292:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   13294:	230c      	movs	r3, #12
   13296:	18fa      	adds	r2, r7, r3
   13298:	2300      	movs	r3, #0
   1329a:	9302      	str	r3, [sp, #8]
   1329c:	2300      	movs	r3, #0
   1329e:	9301      	str	r3, [sp, #4]
   132a0:	2300      	movs	r3, #0
   132a2:	9300      	str	r3, [sp, #0]
   132a4:	2304      	movs	r3, #4
   132a6:	2150      	movs	r1, #80	; 0x50
   132a8:	2002      	movs	r0, #2
   132aa:	4c11      	ldr	r4, [pc, #68]	; (132f0 <socket+0x210>)
   132ac:	47a0      	blx	r4
			}
		}
	}
	return sock;
   132ae:	231f      	movs	r3, #31
   132b0:	18fb      	adds	r3, r7, r3
   132b2:	781b      	ldrb	r3, [r3, #0]
   132b4:	b25b      	sxtb	r3, r3
}
   132b6:	0018      	movs	r0, r3
   132b8:	46bd      	mov	sp, r7
   132ba:	b009      	add	sp, #36	; 0x24
   132bc:	bd90      	pop	{r4, r7, pc}
   132be:	46c0      	nop			; (mov r8, r8)
   132c0:	20004345 	.word	0x20004345
   132c4:	20005be4 	.word	0x20005be4
   132c8:	00020751 	.word	0x00020751
   132cc:	20005c54 	.word	0x20005c54
   132d0:	20004346 	.word	0x20004346
   132d4:	80000003 	.word	0x80000003
   132d8:	0000e751 	.word	0x0000e751
   132dc:	20004342 	.word	0x20004342
   132e0:	00028190 	.word	0x00028190
   132e4:	0000b9b9 	.word	0x0000b9b9
   132e8:	000281b4 	.word	0x000281b4
   132ec:	000281b0 	.word	0x000281b0
   132f0:	0000e9b1 	.word	0x0000e9b1

000132f4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   132f4:	b5b0      	push	{r4, r5, r7, lr}
   132f6:	b08a      	sub	sp, #40	; 0x28
   132f8:	af04      	add	r7, sp, #16
   132fa:	6039      	str	r1, [r7, #0]
   132fc:	0011      	movs	r1, r2
   132fe:	1dfb      	adds	r3, r7, #7
   13300:	1c02      	adds	r2, r0, #0
   13302:	701a      	strb	r2, [r3, #0]
   13304:	1dbb      	adds	r3, r7, #6
   13306:	1c0a      	adds	r2, r1, #0
   13308:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1330a:	2317      	movs	r3, #23
   1330c:	18fb      	adds	r3, r7, r3
   1330e:	22fa      	movs	r2, #250	; 0xfa
   13310:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   13312:	1dfb      	adds	r3, r7, #7
   13314:	781b      	ldrb	r3, [r3, #0]
   13316:	2b7f      	cmp	r3, #127	; 0x7f
   13318:	d867      	bhi.n	133ea <connect+0xf6>
   1331a:	683b      	ldr	r3, [r7, #0]
   1331c:	2b00      	cmp	r3, #0
   1331e:	d064      	beq.n	133ea <connect+0xf6>
   13320:	1dfb      	adds	r3, r7, #7
   13322:	781b      	ldrb	r3, [r3, #0]
   13324:	b25b      	sxtb	r3, r3
   13326:	4a35      	ldr	r2, [pc, #212]	; (133fc <connect+0x108>)
   13328:	011b      	lsls	r3, r3, #4
   1332a:	18d3      	adds	r3, r2, r3
   1332c:	330a      	adds	r3, #10
   1332e:	781b      	ldrb	r3, [r3, #0]
   13330:	b2db      	uxtb	r3, r3
   13332:	2b01      	cmp	r3, #1
   13334:	d159      	bne.n	133ea <connect+0xf6>
   13336:	1dbb      	adds	r3, r7, #6
   13338:	781b      	ldrb	r3, [r3, #0]
   1333a:	2b00      	cmp	r3, #0
   1333c:	d055      	beq.n	133ea <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   1333e:	2316      	movs	r3, #22
   13340:	18fb      	adds	r3, r7, r3
   13342:	2244      	movs	r2, #68	; 0x44
   13344:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   13346:	1dfb      	adds	r3, r7, #7
   13348:	781b      	ldrb	r3, [r3, #0]
   1334a:	b25b      	sxtb	r3, r3
   1334c:	4a2b      	ldr	r2, [pc, #172]	; (133fc <connect+0x108>)
   1334e:	011b      	lsls	r3, r3, #4
   13350:	18d3      	adds	r3, r2, r3
   13352:	330b      	adds	r3, #11
   13354:	781b      	ldrb	r3, [r3, #0]
   13356:	b2db      	uxtb	r3, r3
   13358:	001a      	movs	r2, r3
   1335a:	2301      	movs	r3, #1
   1335c:	4013      	ands	r3, r2
   1335e:	d00f      	beq.n	13380 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   13360:	2316      	movs	r3, #22
   13362:	18fb      	adds	r3, r7, r3
   13364:	224b      	movs	r2, #75	; 0x4b
   13366:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   13368:	1dfb      	adds	r3, r7, #7
   1336a:	781b      	ldrb	r3, [r3, #0]
   1336c:	b25b      	sxtb	r3, r3
   1336e:	4a23      	ldr	r2, [pc, #140]	; (133fc <connect+0x108>)
   13370:	011b      	lsls	r3, r3, #4
   13372:	18d3      	adds	r3, r2, r3
   13374:	330b      	adds	r3, #11
   13376:	781b      	ldrb	r3, [r3, #0]
   13378:	b2da      	uxtb	r2, r3
   1337a:	2308      	movs	r3, #8
   1337c:	18fb      	adds	r3, r7, r3
   1337e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   13380:	2308      	movs	r3, #8
   13382:	18fb      	adds	r3, r7, r3
   13384:	1dfa      	adds	r2, r7, #7
   13386:	7812      	ldrb	r2, [r2, #0]
   13388:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   1338a:	6839      	ldr	r1, [r7, #0]
   1338c:	2308      	movs	r3, #8
   1338e:	18fb      	adds	r3, r7, r3
   13390:	2208      	movs	r2, #8
   13392:	0018      	movs	r0, r3
   13394:	4b1a      	ldr	r3, [pc, #104]	; (13400 <connect+0x10c>)
   13396:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   13398:	1dfb      	adds	r3, r7, #7
   1339a:	781b      	ldrb	r3, [r3, #0]
   1339c:	b25b      	sxtb	r3, r3
   1339e:	4a17      	ldr	r2, [pc, #92]	; (133fc <connect+0x108>)
   133a0:	011b      	lsls	r3, r3, #4
   133a2:	18d3      	adds	r3, r2, r3
   133a4:	3306      	adds	r3, #6
   133a6:	881b      	ldrh	r3, [r3, #0]
   133a8:	b29a      	uxth	r2, r3
   133aa:	2308      	movs	r3, #8
   133ac:	18fb      	adds	r3, r7, r3
   133ae:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   133b0:	2317      	movs	r3, #23
   133b2:	18fc      	adds	r4, r7, r3
   133b4:	2308      	movs	r3, #8
   133b6:	18fa      	adds	r2, r7, r3
   133b8:	2316      	movs	r3, #22
   133ba:	18fb      	adds	r3, r7, r3
   133bc:	7819      	ldrb	r1, [r3, #0]
   133be:	2300      	movs	r3, #0
   133c0:	9302      	str	r3, [sp, #8]
   133c2:	2300      	movs	r3, #0
   133c4:	9301      	str	r3, [sp, #4]
   133c6:	2300      	movs	r3, #0
   133c8:	9300      	str	r3, [sp, #0]
   133ca:	230c      	movs	r3, #12
   133cc:	2002      	movs	r0, #2
   133ce:	4d0d      	ldr	r5, [pc, #52]	; (13404 <connect+0x110>)
   133d0:	47a8      	blx	r5
   133d2:	0003      	movs	r3, r0
   133d4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   133d6:	2317      	movs	r3, #23
   133d8:	18fb      	adds	r3, r7, r3
   133da:	781b      	ldrb	r3, [r3, #0]
   133dc:	b25b      	sxtb	r3, r3
   133de:	2b00      	cmp	r3, #0
   133e0:	d003      	beq.n	133ea <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   133e2:	2317      	movs	r3, #23
   133e4:	18fb      	adds	r3, r7, r3
   133e6:	22f7      	movs	r2, #247	; 0xf7
   133e8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   133ea:	2317      	movs	r3, #23
   133ec:	18fb      	adds	r3, r7, r3
   133ee:	781b      	ldrb	r3, [r3, #0]
   133f0:	b25b      	sxtb	r3, r3
}
   133f2:	0018      	movs	r0, r3
   133f4:	46bd      	mov	sp, r7
   133f6:	b006      	add	sp, #24
   133f8:	bdb0      	pop	{r4, r5, r7, pc}
   133fa:	46c0      	nop			; (mov r8, r8)
   133fc:	20005be4 	.word	0x20005be4
   13400:	0000e715 	.word	0x0000e715
   13404:	0000e9b1 	.word	0x0000e9b1

00013408 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   13408:	b590      	push	{r4, r7, lr}
   1340a:	b08f      	sub	sp, #60	; 0x3c
   1340c:	af04      	add	r7, sp, #16
   1340e:	0004      	movs	r4, r0
   13410:	60b9      	str	r1, [r7, #8]
   13412:	0010      	movs	r0, r2
   13414:	0019      	movs	r1, r3
   13416:	230f      	movs	r3, #15
   13418:	18fb      	adds	r3, r7, r3
   1341a:	1c22      	adds	r2, r4, #0
   1341c:	701a      	strb	r2, [r3, #0]
   1341e:	230c      	movs	r3, #12
   13420:	18fb      	adds	r3, r7, r3
   13422:	1c02      	adds	r2, r0, #0
   13424:	801a      	strh	r2, [r3, #0]
   13426:	1dbb      	adds	r3, r7, #6
   13428:	1c0a      	adds	r2, r1, #0
   1342a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1342c:	2326      	movs	r3, #38	; 0x26
   1342e:	18fb      	adds	r3, r7, r3
   13430:	2206      	movs	r2, #6
   13432:	4252      	negs	r2, r2
   13434:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   13436:	230f      	movs	r3, #15
   13438:	18fb      	adds	r3, r7, r3
   1343a:	781b      	ldrb	r3, [r3, #0]
   1343c:	2b7f      	cmp	r3, #127	; 0x7f
   1343e:	d900      	bls.n	13442 <send+0x3a>
   13440:	e087      	b.n	13552 <send+0x14a>
   13442:	68bb      	ldr	r3, [r7, #8]
   13444:	2b00      	cmp	r3, #0
   13446:	d100      	bne.n	1344a <send+0x42>
   13448:	e083      	b.n	13552 <send+0x14a>
   1344a:	230c      	movs	r3, #12
   1344c:	18fb      	adds	r3, r7, r3
   1344e:	881a      	ldrh	r2, [r3, #0]
   13450:	23af      	movs	r3, #175	; 0xaf
   13452:	00db      	lsls	r3, r3, #3
   13454:	429a      	cmp	r2, r3
   13456:	d900      	bls.n	1345a <send+0x52>
   13458:	e07b      	b.n	13552 <send+0x14a>
   1345a:	230f      	movs	r3, #15
   1345c:	18fb      	adds	r3, r7, r3
   1345e:	781b      	ldrb	r3, [r3, #0]
   13460:	b25b      	sxtb	r3, r3
   13462:	4a40      	ldr	r2, [pc, #256]	; (13564 <send+0x15c>)
   13464:	011b      	lsls	r3, r3, #4
   13466:	18d3      	adds	r3, r2, r3
   13468:	330a      	adds	r3, #10
   1346a:	781b      	ldrb	r3, [r3, #0]
   1346c:	b2db      	uxtb	r3, r3
   1346e:	2b01      	cmp	r3, #1
   13470:	d16f      	bne.n	13552 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   13472:	2323      	movs	r3, #35	; 0x23
   13474:	18fb      	adds	r3, r7, r3
   13476:	2245      	movs	r2, #69	; 0x45
   13478:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   1347a:	2324      	movs	r3, #36	; 0x24
   1347c:	18fb      	adds	r3, r7, r3
   1347e:	2250      	movs	r2, #80	; 0x50
   13480:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   13482:	2310      	movs	r3, #16
   13484:	18fb      	adds	r3, r7, r3
   13486:	220f      	movs	r2, #15
   13488:	18ba      	adds	r2, r7, r2
   1348a:	7812      	ldrb	r2, [r2, #0]
   1348c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   1348e:	2310      	movs	r3, #16
   13490:	18fb      	adds	r3, r7, r3
   13492:	220c      	movs	r2, #12
   13494:	18ba      	adds	r2, r7, r2
   13496:	8812      	ldrh	r2, [r2, #0]
   13498:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   1349a:	230f      	movs	r3, #15
   1349c:	18fb      	adds	r3, r7, r3
   1349e:	781b      	ldrb	r3, [r3, #0]
   134a0:	b25b      	sxtb	r3, r3
   134a2:	4a30      	ldr	r2, [pc, #192]	; (13564 <send+0x15c>)
   134a4:	011b      	lsls	r3, r3, #4
   134a6:	18d3      	adds	r3, r2, r3
   134a8:	3306      	adds	r3, #6
   134aa:	881b      	ldrh	r3, [r3, #0]
   134ac:	b29a      	uxth	r2, r3
   134ae:	2310      	movs	r3, #16
   134b0:	18fb      	adds	r3, r7, r3
   134b2:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   134b4:	230f      	movs	r3, #15
   134b6:	18fb      	adds	r3, r7, r3
   134b8:	781b      	ldrb	r3, [r3, #0]
   134ba:	b25b      	sxtb	r3, r3
   134bc:	2b06      	cmp	r3, #6
   134be:	dd03      	ble.n	134c8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   134c0:	2324      	movs	r3, #36	; 0x24
   134c2:	18fb      	adds	r3, r7, r3
   134c4:	2244      	movs	r2, #68	; 0x44
   134c6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   134c8:	230f      	movs	r3, #15
   134ca:	18fb      	adds	r3, r7, r3
   134cc:	781b      	ldrb	r3, [r3, #0]
   134ce:	b25b      	sxtb	r3, r3
   134d0:	4a24      	ldr	r2, [pc, #144]	; (13564 <send+0x15c>)
   134d2:	011b      	lsls	r3, r3, #4
   134d4:	18d3      	adds	r3, r2, r3
   134d6:	330b      	adds	r3, #11
   134d8:	781b      	ldrb	r3, [r3, #0]
   134da:	b2db      	uxtb	r3, r3
   134dc:	001a      	movs	r2, r3
   134de:	2301      	movs	r3, #1
   134e0:	4013      	ands	r3, r2
   134e2:	d00f      	beq.n	13504 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   134e4:	2323      	movs	r3, #35	; 0x23
   134e6:	18fb      	adds	r3, r7, r3
   134e8:	224c      	movs	r2, #76	; 0x4c
   134ea:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   134ec:	230f      	movs	r3, #15
   134ee:	18fb      	adds	r3, r7, r3
   134f0:	2200      	movs	r2, #0
   134f2:	569a      	ldrsb	r2, [r3, r2]
   134f4:	2324      	movs	r3, #36	; 0x24
   134f6:	18fb      	adds	r3, r7, r3
   134f8:	491a      	ldr	r1, [pc, #104]	; (13564 <send+0x15c>)
   134fa:	0112      	lsls	r2, r2, #4
   134fc:	188a      	adds	r2, r1, r2
   134fe:	3208      	adds	r2, #8
   13500:	8812      	ldrh	r2, [r2, #0]
   13502:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   13504:	2323      	movs	r3, #35	; 0x23
   13506:	18fb      	adds	r3, r7, r3
   13508:	781b      	ldrb	r3, [r3, #0]
   1350a:	2280      	movs	r2, #128	; 0x80
   1350c:	4252      	negs	r2, r2
   1350e:	4313      	orrs	r3, r2
   13510:	b2d9      	uxtb	r1, r3
   13512:	2310      	movs	r3, #16
   13514:	18fa      	adds	r2, r7, r3
   13516:	2324      	movs	r3, #36	; 0x24
   13518:	18fb      	adds	r3, r7, r3
   1351a:	881b      	ldrh	r3, [r3, #0]
   1351c:	9302      	str	r3, [sp, #8]
   1351e:	230c      	movs	r3, #12
   13520:	18fb      	adds	r3, r7, r3
   13522:	881b      	ldrh	r3, [r3, #0]
   13524:	9301      	str	r3, [sp, #4]
   13526:	68bb      	ldr	r3, [r7, #8]
   13528:	9300      	str	r3, [sp, #0]
   1352a:	2310      	movs	r3, #16
   1352c:	2002      	movs	r0, #2
   1352e:	4c0e      	ldr	r4, [pc, #56]	; (13568 <send+0x160>)
   13530:	47a0      	blx	r4
   13532:	0003      	movs	r3, r0
   13534:	001a      	movs	r2, r3
   13536:	2326      	movs	r3, #38	; 0x26
   13538:	18fb      	adds	r3, r7, r3
   1353a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   1353c:	2326      	movs	r3, #38	; 0x26
   1353e:	18fb      	adds	r3, r7, r3
   13540:	2200      	movs	r2, #0
   13542:	5e9b      	ldrsh	r3, [r3, r2]
   13544:	2b00      	cmp	r3, #0
   13546:	d004      	beq.n	13552 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   13548:	2326      	movs	r3, #38	; 0x26
   1354a:	18fb      	adds	r3, r7, r3
   1354c:	220e      	movs	r2, #14
   1354e:	4252      	negs	r2, r2
   13550:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   13552:	2326      	movs	r3, #38	; 0x26
   13554:	18fb      	adds	r3, r7, r3
   13556:	2200      	movs	r2, #0
   13558:	5e9b      	ldrsh	r3, [r3, r2]
}
   1355a:	0018      	movs	r0, r3
   1355c:	46bd      	mov	sp, r7
   1355e:	b00b      	add	sp, #44	; 0x2c
   13560:	bd90      	pop	{r4, r7, pc}
   13562:	46c0      	nop			; (mov r8, r8)
   13564:	20005be4 	.word	0x20005be4
   13568:	0000e9b1 	.word	0x0000e9b1

0001356c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   1356c:	b590      	push	{r4, r7, lr}
   1356e:	b08d      	sub	sp, #52	; 0x34
   13570:	af04      	add	r7, sp, #16
   13572:	60b9      	str	r1, [r7, #8]
   13574:	0011      	movs	r1, r2
   13576:	607b      	str	r3, [r7, #4]
   13578:	230f      	movs	r3, #15
   1357a:	18fb      	adds	r3, r7, r3
   1357c:	1c02      	adds	r2, r0, #0
   1357e:	701a      	strb	r2, [r3, #0]
   13580:	230c      	movs	r3, #12
   13582:	18fb      	adds	r3, r7, r3
   13584:	1c0a      	adds	r2, r1, #0
   13586:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   13588:	231e      	movs	r3, #30
   1358a:	18fb      	adds	r3, r7, r3
   1358c:	2206      	movs	r2, #6
   1358e:	4252      	negs	r2, r2
   13590:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   13592:	230f      	movs	r3, #15
   13594:	18fb      	adds	r3, r7, r3
   13596:	781b      	ldrb	r3, [r3, #0]
   13598:	2b7f      	cmp	r3, #127	; 0x7f
   1359a:	d900      	bls.n	1359e <recv+0x32>
   1359c:	e099      	b.n	136d2 <recv+0x166>
   1359e:	68bb      	ldr	r3, [r7, #8]
   135a0:	2b00      	cmp	r3, #0
   135a2:	d100      	bne.n	135a6 <recv+0x3a>
   135a4:	e095      	b.n	136d2 <recv+0x166>
   135a6:	230c      	movs	r3, #12
   135a8:	18fb      	adds	r3, r7, r3
   135aa:	881b      	ldrh	r3, [r3, #0]
   135ac:	2b00      	cmp	r3, #0
   135ae:	d100      	bne.n	135b2 <recv+0x46>
   135b0:	e08f      	b.n	136d2 <recv+0x166>
   135b2:	230f      	movs	r3, #15
   135b4:	18fb      	adds	r3, r7, r3
   135b6:	781b      	ldrb	r3, [r3, #0]
   135b8:	b25b      	sxtb	r3, r3
   135ba:	4a4a      	ldr	r2, [pc, #296]	; (136e4 <recv+0x178>)
   135bc:	011b      	lsls	r3, r3, #4
   135be:	18d3      	adds	r3, r2, r3
   135c0:	330a      	adds	r3, #10
   135c2:	781b      	ldrb	r3, [r3, #0]
   135c4:	b2db      	uxtb	r3, r3
   135c6:	2b01      	cmp	r3, #1
   135c8:	d000      	beq.n	135cc <recv+0x60>
   135ca:	e082      	b.n	136d2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   135cc:	231e      	movs	r3, #30
   135ce:	18fb      	adds	r3, r7, r3
   135d0:	2200      	movs	r2, #0
   135d2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   135d4:	230f      	movs	r3, #15
   135d6:	18fb      	adds	r3, r7, r3
   135d8:	2200      	movs	r2, #0
   135da:	569a      	ldrsb	r2, [r3, r2]
   135dc:	4b41      	ldr	r3, [pc, #260]	; (136e4 <recv+0x178>)
   135de:	0112      	lsls	r2, r2, #4
   135e0:	68b9      	ldr	r1, [r7, #8]
   135e2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   135e4:	230f      	movs	r3, #15
   135e6:	18fb      	adds	r3, r7, r3
   135e8:	781b      	ldrb	r3, [r3, #0]
   135ea:	b25b      	sxtb	r3, r3
   135ec:	4a3d      	ldr	r2, [pc, #244]	; (136e4 <recv+0x178>)
   135ee:	011b      	lsls	r3, r3, #4
   135f0:	18d3      	adds	r3, r2, r3
   135f2:	3304      	adds	r3, #4
   135f4:	220c      	movs	r2, #12
   135f6:	18ba      	adds	r2, r7, r2
   135f8:	8812      	ldrh	r2, [r2, #0]
   135fa:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   135fc:	230f      	movs	r3, #15
   135fe:	18fb      	adds	r3, r7, r3
   13600:	781b      	ldrb	r3, [r3, #0]
   13602:	b25b      	sxtb	r3, r3
   13604:	4a37      	ldr	r2, [pc, #220]	; (136e4 <recv+0x178>)
   13606:	011b      	lsls	r3, r3, #4
   13608:	18d3      	adds	r3, r2, r3
   1360a:	330c      	adds	r3, #12
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	b2db      	uxtb	r3, r3
   13610:	2b00      	cmp	r3, #0
   13612:	d15e      	bne.n	136d2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   13614:	231d      	movs	r3, #29
   13616:	18fb      	adds	r3, r7, r3
   13618:	2246      	movs	r2, #70	; 0x46
   1361a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   1361c:	230f      	movs	r3, #15
   1361e:	18fb      	adds	r3, r7, r3
   13620:	781b      	ldrb	r3, [r3, #0]
   13622:	b25b      	sxtb	r3, r3
   13624:	4a2f      	ldr	r2, [pc, #188]	; (136e4 <recv+0x178>)
   13626:	011b      	lsls	r3, r3, #4
   13628:	18d3      	adds	r3, r2, r3
   1362a:	330c      	adds	r3, #12
   1362c:	2201      	movs	r2, #1
   1362e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   13630:	230f      	movs	r3, #15
   13632:	18fb      	adds	r3, r7, r3
   13634:	781b      	ldrb	r3, [r3, #0]
   13636:	b25b      	sxtb	r3, r3
   13638:	4a2a      	ldr	r2, [pc, #168]	; (136e4 <recv+0x178>)
   1363a:	011b      	lsls	r3, r3, #4
   1363c:	18d3      	adds	r3, r2, r3
   1363e:	330b      	adds	r3, #11
   13640:	781b      	ldrb	r3, [r3, #0]
   13642:	b2db      	uxtb	r3, r3
   13644:	001a      	movs	r2, r3
   13646:	2301      	movs	r3, #1
   13648:	4013      	ands	r3, r2
   1364a:	d003      	beq.n	13654 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   1364c:	231d      	movs	r3, #29
   1364e:	18fb      	adds	r3, r7, r3
   13650:	224d      	movs	r2, #77	; 0x4d
   13652:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   13654:	687b      	ldr	r3, [r7, #4]
   13656:	2b00      	cmp	r3, #0
   13658:	d105      	bne.n	13666 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   1365a:	2314      	movs	r3, #20
   1365c:	18fb      	adds	r3, r7, r3
   1365e:	2201      	movs	r2, #1
   13660:	4252      	negs	r2, r2
   13662:	601a      	str	r2, [r3, #0]
   13664:	e003      	b.n	1366e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   13666:	2314      	movs	r3, #20
   13668:	18fb      	adds	r3, r7, r3
   1366a:	687a      	ldr	r2, [r7, #4]
   1366c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   1366e:	2314      	movs	r3, #20
   13670:	18fb      	adds	r3, r7, r3
   13672:	220f      	movs	r2, #15
   13674:	18ba      	adds	r2, r7, r2
   13676:	7812      	ldrb	r2, [r2, #0]
   13678:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   1367a:	230f      	movs	r3, #15
   1367c:	18fb      	adds	r3, r7, r3
   1367e:	781b      	ldrb	r3, [r3, #0]
   13680:	b25b      	sxtb	r3, r3
   13682:	4a18      	ldr	r2, [pc, #96]	; (136e4 <recv+0x178>)
   13684:	011b      	lsls	r3, r3, #4
   13686:	18d3      	adds	r3, r2, r3
   13688:	3306      	adds	r3, #6
   1368a:	881b      	ldrh	r3, [r3, #0]
   1368c:	b29a      	uxth	r2, r3
   1368e:	2314      	movs	r3, #20
   13690:	18fb      	adds	r3, r7, r3
   13692:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   13694:	2314      	movs	r3, #20
   13696:	18fa      	adds	r2, r7, r3
   13698:	231d      	movs	r3, #29
   1369a:	18fb      	adds	r3, r7, r3
   1369c:	7819      	ldrb	r1, [r3, #0]
   1369e:	2300      	movs	r3, #0
   136a0:	9302      	str	r3, [sp, #8]
   136a2:	2300      	movs	r3, #0
   136a4:	9301      	str	r3, [sp, #4]
   136a6:	2300      	movs	r3, #0
   136a8:	9300      	str	r3, [sp, #0]
   136aa:	2308      	movs	r3, #8
   136ac:	2002      	movs	r0, #2
   136ae:	4c0e      	ldr	r4, [pc, #56]	; (136e8 <recv+0x17c>)
   136b0:	47a0      	blx	r4
   136b2:	0003      	movs	r3, r0
   136b4:	001a      	movs	r2, r3
   136b6:	231e      	movs	r3, #30
   136b8:	18fb      	adds	r3, r7, r3
   136ba:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   136bc:	231e      	movs	r3, #30
   136be:	18fb      	adds	r3, r7, r3
   136c0:	2200      	movs	r2, #0
   136c2:	5e9b      	ldrsh	r3, [r3, r2]
   136c4:	2b00      	cmp	r3, #0
   136c6:	d004      	beq.n	136d2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   136c8:	231e      	movs	r3, #30
   136ca:	18fb      	adds	r3, r7, r3
   136cc:	220e      	movs	r2, #14
   136ce:	4252      	negs	r2, r2
   136d0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   136d2:	231e      	movs	r3, #30
   136d4:	18fb      	adds	r3, r7, r3
   136d6:	2200      	movs	r2, #0
   136d8:	5e9b      	ldrsh	r3, [r3, r2]
}
   136da:	0018      	movs	r0, r3
   136dc:	46bd      	mov	sp, r7
   136de:	b009      	add	sp, #36	; 0x24
   136e0:	bd90      	pop	{r4, r7, pc}
   136e2:	46c0      	nop			; (mov r8, r8)
   136e4:	20005be4 	.word	0x20005be4
   136e8:	0000e9b1 	.word	0x0000e9b1

000136ec <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   136ec:	b5b0      	push	{r4, r5, r7, lr}
   136ee:	b088      	sub	sp, #32
   136f0:	af04      	add	r7, sp, #16
   136f2:	0002      	movs	r2, r0
   136f4:	1dfb      	adds	r3, r7, #7
   136f6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   136f8:	230f      	movs	r3, #15
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	22fa      	movs	r2, #250	; 0xfa
   136fe:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   13700:	4b43      	ldr	r3, [pc, #268]	; (13810 <close+0x124>)
   13702:	0018      	movs	r0, r3
   13704:	4b43      	ldr	r3, [pc, #268]	; (13814 <close+0x128>)
   13706:	4798      	blx	r3
   13708:	1dfb      	adds	r3, r7, #7
   1370a:	2200      	movs	r2, #0
   1370c:	569a      	ldrsb	r2, [r3, r2]
   1370e:	4b42      	ldr	r3, [pc, #264]	; (13818 <close+0x12c>)
   13710:	0011      	movs	r1, r2
   13712:	0018      	movs	r0, r3
   13714:	4b3f      	ldr	r3, [pc, #252]	; (13814 <close+0x128>)
   13716:	4798      	blx	r3
   13718:	4b40      	ldr	r3, [pc, #256]	; (1381c <close+0x130>)
   1371a:	0018      	movs	r0, r3
   1371c:	4b3d      	ldr	r3, [pc, #244]	; (13814 <close+0x128>)
   1371e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   13720:	1dfb      	adds	r3, r7, #7
   13722:	781b      	ldrb	r3, [r3, #0]
   13724:	2b7f      	cmp	r3, #127	; 0x7f
   13726:	d86a      	bhi.n	137fe <close+0x112>
   13728:	1dfb      	adds	r3, r7, #7
   1372a:	781b      	ldrb	r3, [r3, #0]
   1372c:	b25b      	sxtb	r3, r3
   1372e:	4a3c      	ldr	r2, [pc, #240]	; (13820 <close+0x134>)
   13730:	011b      	lsls	r3, r3, #4
   13732:	18d3      	adds	r3, r2, r3
   13734:	330a      	adds	r3, #10
   13736:	781b      	ldrb	r3, [r3, #0]
   13738:	b2db      	uxtb	r3, r3
   1373a:	2b01      	cmp	r3, #1
   1373c:	d15f      	bne.n	137fe <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	2249      	movs	r2, #73	; 0x49
   13744:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   13746:	2308      	movs	r3, #8
   13748:	18fb      	adds	r3, r7, r3
   1374a:	1dfa      	adds	r2, r7, #7
   1374c:	7812      	ldrb	r2, [r2, #0]
   1374e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   13750:	1dfb      	adds	r3, r7, #7
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	b25b      	sxtb	r3, r3
   13756:	4a32      	ldr	r2, [pc, #200]	; (13820 <close+0x134>)
   13758:	011b      	lsls	r3, r3, #4
   1375a:	18d3      	adds	r3, r2, r3
   1375c:	3306      	adds	r3, #6
   1375e:	881b      	ldrh	r3, [r3, #0]
   13760:	b29a      	uxth	r2, r3
   13762:	2308      	movs	r3, #8
   13764:	18fb      	adds	r3, r7, r3
   13766:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   13768:	1dfb      	adds	r3, r7, #7
   1376a:	781b      	ldrb	r3, [r3, #0]
   1376c:	b25b      	sxtb	r3, r3
   1376e:	4a2c      	ldr	r2, [pc, #176]	; (13820 <close+0x134>)
   13770:	011b      	lsls	r3, r3, #4
   13772:	18d3      	adds	r3, r2, r3
   13774:	330a      	adds	r3, #10
   13776:	2200      	movs	r2, #0
   13778:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   1377a:	1dfb      	adds	r3, r7, #7
   1377c:	781b      	ldrb	r3, [r3, #0]
   1377e:	b25b      	sxtb	r3, r3
   13780:	4a27      	ldr	r2, [pc, #156]	; (13820 <close+0x134>)
   13782:	011b      	lsls	r3, r3, #4
   13784:	18d3      	adds	r3, r2, r3
   13786:	3306      	adds	r3, #6
   13788:	2200      	movs	r2, #0
   1378a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1378c:	1dfb      	adds	r3, r7, #7
   1378e:	781b      	ldrb	r3, [r3, #0]
   13790:	b25b      	sxtb	r3, r3
   13792:	4a23      	ldr	r2, [pc, #140]	; (13820 <close+0x134>)
   13794:	011b      	lsls	r3, r3, #4
   13796:	18d3      	adds	r3, r2, r3
   13798:	330b      	adds	r3, #11
   1379a:	781b      	ldrb	r3, [r3, #0]
   1379c:	b2db      	uxtb	r3, r3
   1379e:	001a      	movs	r2, r3
   137a0:	2301      	movs	r3, #1
   137a2:	4013      	ands	r3, r2
   137a4:	d003      	beq.n	137ae <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   137a6:	230e      	movs	r3, #14
   137a8:	18fb      	adds	r3, r7, r3
   137aa:	224e      	movs	r2, #78	; 0x4e
   137ac:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   137ae:	230f      	movs	r3, #15
   137b0:	18fc      	adds	r4, r7, r3
   137b2:	2308      	movs	r3, #8
   137b4:	18fa      	adds	r2, r7, r3
   137b6:	230e      	movs	r3, #14
   137b8:	18fb      	adds	r3, r7, r3
   137ba:	7819      	ldrb	r1, [r3, #0]
   137bc:	2300      	movs	r3, #0
   137be:	9302      	str	r3, [sp, #8]
   137c0:	2300      	movs	r3, #0
   137c2:	9301      	str	r3, [sp, #4]
   137c4:	2300      	movs	r3, #0
   137c6:	9300      	str	r3, [sp, #0]
   137c8:	2304      	movs	r3, #4
   137ca:	2002      	movs	r0, #2
   137cc:	4d15      	ldr	r5, [pc, #84]	; (13824 <close+0x138>)
   137ce:	47a8      	blx	r5
   137d0:	0003      	movs	r3, r0
   137d2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   137d4:	230f      	movs	r3, #15
   137d6:	18fb      	adds	r3, r7, r3
   137d8:	781b      	ldrb	r3, [r3, #0]
   137da:	b25b      	sxtb	r3, r3
   137dc:	2b00      	cmp	r3, #0
   137de:	d003      	beq.n	137e8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   137e0:	230f      	movs	r3, #15
   137e2:	18fb      	adds	r3, r7, r3
   137e4:	22f7      	movs	r2, #247	; 0xf7
   137e6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   137e8:	1dfb      	adds	r3, r7, #7
   137ea:	781b      	ldrb	r3, [r3, #0]
   137ec:	b25b      	sxtb	r3, r3
   137ee:	011a      	lsls	r2, r3, #4
   137f0:	4b0b      	ldr	r3, [pc, #44]	; (13820 <close+0x134>)
   137f2:	18d3      	adds	r3, r2, r3
   137f4:	2210      	movs	r2, #16
   137f6:	2100      	movs	r1, #0
   137f8:	0018      	movs	r0, r3
   137fa:	4b0b      	ldr	r3, [pc, #44]	; (13828 <close+0x13c>)
   137fc:	4798      	blx	r3
	}
	return s8Ret;
   137fe:	230f      	movs	r3, #15
   13800:	18fb      	adds	r3, r7, r3
   13802:	781b      	ldrb	r3, [r3, #0]
   13804:	b25b      	sxtb	r3, r3
}
   13806:	0018      	movs	r0, r3
   13808:	46bd      	mov	sp, r7
   1380a:	b004      	add	sp, #16
   1380c:	bdb0      	pop	{r4, r5, r7, pc}
   1380e:	46c0      	nop			; (mov r8, r8)
   13810:	00028190 	.word	0x00028190
   13814:	0000b9b9 	.word	0x0000b9b9
   13818:	000281d0 	.word	0x000281d0
   1381c:	000281b0 	.word	0x000281b0
   13820:	20005be4 	.word	0x20005be4
   13824:	0000e9b1 	.word	0x0000e9b1
   13828:	0000e751 	.word	0x0000e751

0001382c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   1382c:	b580      	push	{r7, lr}
   1382e:	b086      	sub	sp, #24
   13830:	af00      	add	r7, sp, #0
   13832:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   13834:	2300      	movs	r3, #0
   13836:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   13838:	2317      	movs	r3, #23
   1383a:	18fb      	adds	r3, r7, r3
   1383c:	2200      	movs	r2, #0
   1383e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   13840:	2316      	movs	r3, #22
   13842:	18fb      	adds	r3, r7, r3
   13844:	2200      	movs	r2, #0
   13846:	701a      	strb	r2, [r3, #0]
   13848:	e060      	b.n	1390c <nmi_inet_addr+0xe0>
	{
		j = 0;
   1384a:	2315      	movs	r3, #21
   1384c:	18fb      	adds	r3, r7, r3
   1384e:	2200      	movs	r2, #0
   13850:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   13852:	2314      	movs	r3, #20
   13854:	18fb      	adds	r3, r7, r3
   13856:	687a      	ldr	r2, [r7, #4]
   13858:	7812      	ldrb	r2, [r2, #0]
   1385a:	701a      	strb	r2, [r3, #0]
			++j;
   1385c:	2315      	movs	r3, #21
   1385e:	18fb      	adds	r3, r7, r3
   13860:	2215      	movs	r2, #21
   13862:	18ba      	adds	r2, r7, r2
   13864:	7812      	ldrb	r2, [r2, #0]
   13866:	3201      	adds	r2, #1
   13868:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   1386a:	2315      	movs	r3, #21
   1386c:	18fb      	adds	r3, r7, r3
   1386e:	781b      	ldrb	r3, [r3, #0]
   13870:	2b04      	cmp	r3, #4
   13872:	d901      	bls.n	13878 <nmi_inet_addr+0x4c>
			{
				return 0;
   13874:	2300      	movs	r3, #0
   13876:	e057      	b.n	13928 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   13878:	2314      	movs	r3, #20
   1387a:	18fb      	adds	r3, r7, r3
   1387c:	781b      	ldrb	r3, [r3, #0]
   1387e:	2b2e      	cmp	r3, #46	; 0x2e
   13880:	d004      	beq.n	1388c <nmi_inet_addr+0x60>
   13882:	2314      	movs	r3, #20
   13884:	18fb      	adds	r3, r7, r3
   13886:	781b      	ldrb	r3, [r3, #0]
   13888:	2b00      	cmp	r3, #0
   1388a:	d10d      	bne.n	138a8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   1388c:	2316      	movs	r3, #22
   1388e:	18fb      	adds	r3, r7, r3
   13890:	781b      	ldrb	r3, [r3, #0]
   13892:	220c      	movs	r2, #12
   13894:	18ba      	adds	r2, r7, r2
   13896:	2117      	movs	r1, #23
   13898:	1879      	adds	r1, r7, r1
   1389a:	7809      	ldrb	r1, [r1, #0]
   1389c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   1389e:	2317      	movs	r3, #23
   138a0:	18fb      	adds	r3, r7, r3
   138a2:	2200      	movs	r2, #0
   138a4:	701a      	strb	r2, [r3, #0]
   138a6:	e01d      	b.n	138e4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   138a8:	2314      	movs	r3, #20
   138aa:	18fb      	adds	r3, r7, r3
   138ac:	781b      	ldrb	r3, [r3, #0]
   138ae:	2b2f      	cmp	r3, #47	; 0x2f
   138b0:	d916      	bls.n	138e0 <nmi_inet_addr+0xb4>
   138b2:	2314      	movs	r3, #20
   138b4:	18fb      	adds	r3, r7, r3
   138b6:	781b      	ldrb	r3, [r3, #0]
   138b8:	2b39      	cmp	r3, #57	; 0x39
   138ba:	d811      	bhi.n	138e0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   138bc:	2317      	movs	r3, #23
   138be:	18fb      	adds	r3, r7, r3
   138c0:	781b      	ldrb	r3, [r3, #0]
   138c2:	1c1a      	adds	r2, r3, #0
   138c4:	0092      	lsls	r2, r2, #2
   138c6:	18d3      	adds	r3, r2, r3
   138c8:	18db      	adds	r3, r3, r3
   138ca:	b2da      	uxtb	r2, r3
   138cc:	2314      	movs	r3, #20
   138ce:	18fb      	adds	r3, r7, r3
   138d0:	781b      	ldrb	r3, [r3, #0]
   138d2:	18d3      	adds	r3, r2, r3
   138d4:	b2da      	uxtb	r2, r3
   138d6:	2317      	movs	r3, #23
   138d8:	18fb      	adds	r3, r7, r3
   138da:	3a30      	subs	r2, #48	; 0x30
   138dc:	701a      	strb	r2, [r3, #0]
   138de:	e001      	b.n	138e4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   138e0:	2300      	movs	r3, #0
   138e2:	e021      	b.n	13928 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   138e4:	687b      	ldr	r3, [r7, #4]
   138e6:	3301      	adds	r3, #1
   138e8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   138ea:	2314      	movs	r3, #20
   138ec:	18fb      	adds	r3, r7, r3
   138ee:	781b      	ldrb	r3, [r3, #0]
   138f0:	2b2e      	cmp	r3, #46	; 0x2e
   138f2:	d004      	beq.n	138fe <nmi_inet_addr+0xd2>
   138f4:	2314      	movs	r3, #20
   138f6:	18fb      	adds	r3, r7, r3
   138f8:	781b      	ldrb	r3, [r3, #0]
   138fa:	2b00      	cmp	r3, #0
   138fc:	d1a9      	bne.n	13852 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   138fe:	2316      	movs	r3, #22
   13900:	18fb      	adds	r3, r7, r3
   13902:	2216      	movs	r2, #22
   13904:	18ba      	adds	r2, r7, r2
   13906:	7812      	ldrb	r2, [r2, #0]
   13908:	3201      	adds	r2, #1
   1390a:	701a      	strb	r2, [r3, #0]
   1390c:	2316      	movs	r3, #22
   1390e:	18fb      	adds	r3, r7, r3
   13910:	781b      	ldrb	r3, [r3, #0]
   13912:	2b03      	cmp	r3, #3
   13914:	d999      	bls.n	1384a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   13916:	230c      	movs	r3, #12
   13918:	18f9      	adds	r1, r7, r3
   1391a:	2310      	movs	r3, #16
   1391c:	18fb      	adds	r3, r7, r3
   1391e:	2204      	movs	r2, #4
   13920:	0018      	movs	r0, r3
   13922:	4b03      	ldr	r3, [pc, #12]	; (13930 <nmi_inet_addr+0x104>)
   13924:	4798      	blx	r3
	return u32IP;
   13926:	693b      	ldr	r3, [r7, #16]
}
   13928:	0018      	movs	r0, r3
   1392a:	46bd      	mov	sp, r7
   1392c:	b006      	add	sp, #24
   1392e:	bd80      	pop	{r7, pc}
   13930:	0000e715 	.word	0x0000e715

00013934 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   13934:	b5b0      	push	{r4, r5, r7, lr}
   13936:	b088      	sub	sp, #32
   13938:	af04      	add	r7, sp, #16
   1393a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   1393c:	230f      	movs	r3, #15
   1393e:	18fb      	adds	r3, r7, r3
   13940:	22fa      	movs	r2, #250	; 0xfa
   13942:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   13944:	687b      	ldr	r3, [r7, #4]
   13946:	0018      	movs	r0, r3
   13948:	4b14      	ldr	r3, [pc, #80]	; (1399c <gethostbyname+0x68>)
   1394a:	4798      	blx	r3
   1394c:	0003      	movs	r3, r0
   1394e:	001a      	movs	r2, r3
   13950:	230e      	movs	r3, #14
   13952:	18fb      	adds	r3, r7, r3
   13954:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   13956:	230e      	movs	r3, #14
   13958:	18fb      	adds	r3, r7, r3
   1395a:	781b      	ldrb	r3, [r3, #0]
   1395c:	2b40      	cmp	r3, #64	; 0x40
   1395e:	d815      	bhi.n	1398c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   13960:	230e      	movs	r3, #14
   13962:	18fb      	adds	r3, r7, r3
   13964:	781b      	ldrb	r3, [r3, #0]
   13966:	b29b      	uxth	r3, r3
   13968:	3301      	adds	r3, #1
   1396a:	b299      	uxth	r1, r3
   1396c:	230f      	movs	r3, #15
   1396e:	18fc      	adds	r4, r7, r3
   13970:	687a      	ldr	r2, [r7, #4]
   13972:	2300      	movs	r3, #0
   13974:	9302      	str	r3, [sp, #8]
   13976:	2300      	movs	r3, #0
   13978:	9301      	str	r3, [sp, #4]
   1397a:	2300      	movs	r3, #0
   1397c:	9300      	str	r3, [sp, #0]
   1397e:	000b      	movs	r3, r1
   13980:	214a      	movs	r1, #74	; 0x4a
   13982:	2002      	movs	r0, #2
   13984:	4d06      	ldr	r5, [pc, #24]	; (139a0 <gethostbyname+0x6c>)
   13986:	47a8      	blx	r5
   13988:	0003      	movs	r3, r0
   1398a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   1398c:	230f      	movs	r3, #15
   1398e:	18fb      	adds	r3, r7, r3
   13990:	781b      	ldrb	r3, [r3, #0]
   13992:	b25b      	sxtb	r3, r3
}
   13994:	0018      	movs	r0, r3
   13996:	46bd      	mov	sp, r7
   13998:	b004      	add	sp, #16
   1399a:	bdb0      	pop	{r4, r5, r7, pc}
   1399c:	0000e78f 	.word	0x0000e78f
   139a0:	0000e9b1 	.word	0x0000e9b1

000139a4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   139a4:	b580      	push	{r7, lr}
   139a6:	b082      	sub	sp, #8
   139a8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   139aa:	003b      	movs	r3, r7
   139ac:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   139ae:	687b      	ldr	r3, [r7, #4]
   139b0:	22b9      	movs	r2, #185	; 0xb9
   139b2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   139b4:	4b13      	ldr	r3, [pc, #76]	; (13a04 <spi_flash_enter_low_power_mode+0x60>)
   139b6:	2100      	movs	r1, #0
   139b8:	0018      	movs	r0, r3
   139ba:	4b13      	ldr	r3, [pc, #76]	; (13a08 <spi_flash_enter_low_power_mode+0x64>)
   139bc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   139be:	687b      	ldr	r3, [r7, #4]
   139c0:	781b      	ldrb	r3, [r3, #0]
   139c2:	001a      	movs	r2, r3
   139c4:	4b11      	ldr	r3, [pc, #68]	; (13a0c <spi_flash_enter_low_power_mode+0x68>)
   139c6:	0011      	movs	r1, r2
   139c8:	0018      	movs	r0, r3
   139ca:	4b0f      	ldr	r3, [pc, #60]	; (13a08 <spi_flash_enter_low_power_mode+0x64>)
   139cc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   139ce:	4b10      	ldr	r3, [pc, #64]	; (13a10 <spi_flash_enter_low_power_mode+0x6c>)
   139d0:	2101      	movs	r1, #1
   139d2:	0018      	movs	r0, r3
   139d4:	4b0c      	ldr	r3, [pc, #48]	; (13a08 <spi_flash_enter_low_power_mode+0x64>)
   139d6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   139d8:	4b0e      	ldr	r3, [pc, #56]	; (13a14 <spi_flash_enter_low_power_mode+0x70>)
   139da:	2100      	movs	r1, #0
   139dc:	0018      	movs	r0, r3
   139de:	4b0a      	ldr	r3, [pc, #40]	; (13a08 <spi_flash_enter_low_power_mode+0x64>)
   139e0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   139e2:	4b0d      	ldr	r3, [pc, #52]	; (13a18 <spi_flash_enter_low_power_mode+0x74>)
   139e4:	2181      	movs	r1, #129	; 0x81
   139e6:	0018      	movs	r0, r3
   139e8:	4b07      	ldr	r3, [pc, #28]	; (13a08 <spi_flash_enter_low_power_mode+0x64>)
   139ea:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   139ec:	46c0      	nop			; (mov r8, r8)
   139ee:	4b0b      	ldr	r3, [pc, #44]	; (13a1c <spi_flash_enter_low_power_mode+0x78>)
   139f0:	0018      	movs	r0, r3
   139f2:	4b0b      	ldr	r3, [pc, #44]	; (13a20 <spi_flash_enter_low_power_mode+0x7c>)
   139f4:	4798      	blx	r3
   139f6:	0003      	movs	r3, r0
   139f8:	2b01      	cmp	r3, #1
   139fa:	d1f8      	bne.n	139ee <spi_flash_enter_low_power_mode+0x4a>
}
   139fc:	46c0      	nop			; (mov r8, r8)
   139fe:	46bd      	mov	sp, r7
   13a00:	b002      	add	sp, #8
   13a02:	bd80      	pop	{r7, pc}
   13a04:	00010208 	.word	0x00010208
   13a08:	00010805 	.word	0x00010805
   13a0c:	0001020c 	.word	0x0001020c
   13a10:	00010214 	.word	0x00010214
   13a14:	0001021c 	.word	0x0001021c
   13a18:	00010204 	.word	0x00010204
   13a1c:	00010218 	.word	0x00010218
   13a20:	000107c1 	.word	0x000107c1

00013a24 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   13a24:	b580      	push	{r7, lr}
   13a26:	b082      	sub	sp, #8
   13a28:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   13a2a:	003b      	movs	r3, r7
   13a2c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   13a2e:	687b      	ldr	r3, [r7, #4]
   13a30:	22ab      	movs	r2, #171	; 0xab
   13a32:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   13a34:	4b13      	ldr	r3, [pc, #76]	; (13a84 <spi_flash_leave_low_power_mode+0x60>)
   13a36:	2100      	movs	r1, #0
   13a38:	0018      	movs	r0, r3
   13a3a:	4b13      	ldr	r3, [pc, #76]	; (13a88 <spi_flash_leave_low_power_mode+0x64>)
   13a3c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   13a3e:	687b      	ldr	r3, [r7, #4]
   13a40:	781b      	ldrb	r3, [r3, #0]
   13a42:	001a      	movs	r2, r3
   13a44:	4b11      	ldr	r3, [pc, #68]	; (13a8c <spi_flash_leave_low_power_mode+0x68>)
   13a46:	0011      	movs	r1, r2
   13a48:	0018      	movs	r0, r3
   13a4a:	4b0f      	ldr	r3, [pc, #60]	; (13a88 <spi_flash_leave_low_power_mode+0x64>)
   13a4c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   13a4e:	4b10      	ldr	r3, [pc, #64]	; (13a90 <spi_flash_leave_low_power_mode+0x6c>)
   13a50:	2101      	movs	r1, #1
   13a52:	0018      	movs	r0, r3
   13a54:	4b0c      	ldr	r3, [pc, #48]	; (13a88 <spi_flash_leave_low_power_mode+0x64>)
   13a56:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   13a58:	4b0e      	ldr	r3, [pc, #56]	; (13a94 <spi_flash_leave_low_power_mode+0x70>)
   13a5a:	2100      	movs	r1, #0
   13a5c:	0018      	movs	r0, r3
   13a5e:	4b0a      	ldr	r3, [pc, #40]	; (13a88 <spi_flash_leave_low_power_mode+0x64>)
   13a60:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   13a62:	4b0d      	ldr	r3, [pc, #52]	; (13a98 <spi_flash_leave_low_power_mode+0x74>)
   13a64:	2181      	movs	r1, #129	; 0x81
   13a66:	0018      	movs	r0, r3
   13a68:	4b07      	ldr	r3, [pc, #28]	; (13a88 <spi_flash_leave_low_power_mode+0x64>)
   13a6a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   13a6c:	46c0      	nop			; (mov r8, r8)
   13a6e:	4b0b      	ldr	r3, [pc, #44]	; (13a9c <spi_flash_leave_low_power_mode+0x78>)
   13a70:	0018      	movs	r0, r3
   13a72:	4b0b      	ldr	r3, [pc, #44]	; (13aa0 <spi_flash_leave_low_power_mode+0x7c>)
   13a74:	4798      	blx	r3
   13a76:	0003      	movs	r3, r0
   13a78:	2b01      	cmp	r3, #1
   13a7a:	d1f8      	bne.n	13a6e <spi_flash_leave_low_power_mode+0x4a>
}
   13a7c:	46c0      	nop			; (mov r8, r8)
   13a7e:	46bd      	mov	sp, r7
   13a80:	b002      	add	sp, #8
   13a82:	bd80      	pop	{r7, pc}
   13a84:	00010208 	.word	0x00010208
   13a88:	00010805 	.word	0x00010805
   13a8c:	0001020c 	.word	0x0001020c
   13a90:	00010214 	.word	0x00010214
   13a94:	0001021c 	.word	0x0001021c
   13a98:	00010204 	.word	0x00010204
   13a9c:	00010218 	.word	0x00010218
   13aa0:	000107c1 	.word	0x000107c1

00013aa4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   13aa4:	b590      	push	{r4, r7, lr}
   13aa6:	b085      	sub	sp, #20
   13aa8:	af00      	add	r7, sp, #0
   13aaa:	0002      	movs	r2, r0
   13aac:	1dfb      	adds	r3, r7, #7
   13aae:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   13ab0:	230f      	movs	r3, #15
   13ab2:	18fb      	adds	r3, r7, r3
   13ab4:	2200      	movs	r2, #0
   13ab6:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   13ab8:	4b24      	ldr	r3, [pc, #144]	; (13b4c <spi_flash_enable+0xa8>)
   13aba:	4798      	blx	r3
   13abc:	0003      	movs	r3, r0
   13abe:	051b      	lsls	r3, r3, #20
   13ac0:	0d1b      	lsrs	r3, r3, #20
   13ac2:	4a23      	ldr	r2, [pc, #140]	; (13b50 <spi_flash_enable+0xac>)
   13ac4:	4293      	cmp	r3, r2
   13ac6:	d938      	bls.n	13b3a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   13ac8:	230f      	movs	r3, #15
   13aca:	18fc      	adds	r4, r7, r3
   13acc:	2308      	movs	r3, #8
   13ace:	18fb      	adds	r3, r7, r3
   13ad0:	4a20      	ldr	r2, [pc, #128]	; (13b54 <spi_flash_enable+0xb0>)
   13ad2:	0019      	movs	r1, r3
   13ad4:	0010      	movs	r0, r2
   13ad6:	4b20      	ldr	r3, [pc, #128]	; (13b58 <spi_flash_enable+0xb4>)
   13ad8:	4798      	blx	r3
   13ada:	0003      	movs	r3, r0
   13adc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   13ade:	230f      	movs	r3, #15
   13ae0:	18fb      	adds	r3, r7, r3
   13ae2:	781b      	ldrb	r3, [r3, #0]
   13ae4:	b25b      	sxtb	r3, r3
   13ae6:	2b00      	cmp	r3, #0
   13ae8:	d126      	bne.n	13b38 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   13aea:	68bb      	ldr	r3, [r7, #8]
   13aec:	4a1b      	ldr	r2, [pc, #108]	; (13b5c <spi_flash_enable+0xb8>)
   13aee:	4013      	ands	r3, r2
   13af0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   13af2:	68bb      	ldr	r3, [r7, #8]
   13af4:	4a1a      	ldr	r2, [pc, #104]	; (13b60 <spi_flash_enable+0xbc>)
   13af6:	4313      	orrs	r3, r2
   13af8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   13afa:	68bb      	ldr	r3, [r7, #8]
   13afc:	4a15      	ldr	r2, [pc, #84]	; (13b54 <spi_flash_enable+0xb0>)
   13afe:	0019      	movs	r1, r3
   13b00:	0010      	movs	r0, r2
   13b02:	4b18      	ldr	r3, [pc, #96]	; (13b64 <spi_flash_enable+0xc0>)
   13b04:	4798      	blx	r3
		if(enable) {
   13b06:	1dfb      	adds	r3, r7, #7
   13b08:	781b      	ldrb	r3, [r3, #0]
   13b0a:	2b00      	cmp	r3, #0
   13b0c:	d002      	beq.n	13b14 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   13b0e:	4b16      	ldr	r3, [pc, #88]	; (13b68 <spi_flash_enable+0xc4>)
   13b10:	4798      	blx	r3
   13b12:	e001      	b.n	13b18 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   13b14:	4b15      	ldr	r3, [pc, #84]	; (13b6c <spi_flash_enable+0xc8>)
   13b16:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   13b18:	68bb      	ldr	r3, [r7, #8]
   13b1a:	4a10      	ldr	r2, [pc, #64]	; (13b5c <spi_flash_enable+0xb8>)
   13b1c:	4013      	ands	r3, r2
   13b1e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   13b20:	68bb      	ldr	r3, [r7, #8]
   13b22:	2280      	movs	r2, #128	; 0x80
   13b24:	0252      	lsls	r2, r2, #9
   13b26:	4313      	orrs	r3, r2
   13b28:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   13b2a:	68bb      	ldr	r3, [r7, #8]
   13b2c:	4a09      	ldr	r2, [pc, #36]	; (13b54 <spi_flash_enable+0xb0>)
   13b2e:	0019      	movs	r1, r3
   13b30:	0010      	movs	r0, r2
   13b32:	4b0c      	ldr	r3, [pc, #48]	; (13b64 <spi_flash_enable+0xc0>)
   13b34:	4798      	blx	r3
   13b36:	e000      	b.n	13b3a <spi_flash_enable+0x96>
			goto ERR1;
   13b38:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   13b3a:	230f      	movs	r3, #15
   13b3c:	18fb      	adds	r3, r7, r3
   13b3e:	781b      	ldrb	r3, [r3, #0]
   13b40:	b25b      	sxtb	r3, r3
}
   13b42:	0018      	movs	r0, r3
   13b44:	46bd      	mov	sp, r7
   13b46:	b005      	add	sp, #20
   13b48:	bd90      	pop	{r4, r7, pc}
   13b4a:	46c0      	nop			; (mov r8, r8)
   13b4c:	000100e1 	.word	0x000100e1
   13b50:	0000039f 	.word	0x0000039f
   13b54:	00001410 	.word	0x00001410
   13b58:	000107e1 	.word	0x000107e1
   13b5c:	f8888fff 	.word	0xf8888fff
   13b60:	01111000 	.word	0x01111000
   13b64:	00010805 	.word	0x00010805
   13b68:	00013a25 	.word	0x00013a25
   13b6c:	000139a5 	.word	0x000139a5

00013b70 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   13b70:	b580      	push	{r7, lr}
   13b72:	b084      	sub	sp, #16
   13b74:	af00      	add	r7, sp, #0
   13b76:	0002      	movs	r2, r0
   13b78:	1dfb      	adds	r3, r7, #7
   13b7a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   13b7c:	1dfb      	adds	r3, r7, #7
   13b7e:	781b      	ldrb	r3, [r3, #0]
   13b80:	2b00      	cmp	r3, #0
   13b82:	d108      	bne.n	13b96 <mem_test_unit_ready+0x26>
   13b84:	1dfb      	adds	r3, r7, #7
   13b86:	781a      	ldrb	r2, [r3, #0]
   13b88:	4b08      	ldr	r3, [pc, #32]	; (13bac <mem_test_unit_ready+0x3c>)
   13b8a:	0152      	lsls	r2, r2, #5
   13b8c:	58d3      	ldr	r3, [r2, r3]
   13b8e:	4798      	blx	r3
   13b90:	0003      	movs	r3, r0
   13b92:	001a      	movs	r2, r3
   13b94:	e000      	b.n	13b98 <mem_test_unit_ready+0x28>
   13b96:	2201      	movs	r2, #1
  status =
   13b98:	230f      	movs	r3, #15
   13b9a:	18fb      	adds	r3, r7, r3
   13b9c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   13b9e:	230f      	movs	r3, #15
   13ba0:	18fb      	adds	r3, r7, r3
   13ba2:	781b      	ldrb	r3, [r3, #0]
}
   13ba4:	0018      	movs	r0, r3
   13ba6:	46bd      	mov	sp, r7
   13ba8:	b004      	add	sp, #16
   13baa:	bd80      	pop	{r7, pc}
   13bac:	0002825c 	.word	0x0002825c

00013bb0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   13bb0:	b580      	push	{r7, lr}
   13bb2:	b084      	sub	sp, #16
   13bb4:	af00      	add	r7, sp, #0
   13bb6:	0002      	movs	r2, r0
   13bb8:	6039      	str	r1, [r7, #0]
   13bba:	1dfb      	adds	r3, r7, #7
   13bbc:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   13bbe:	1dfb      	adds	r3, r7, #7
   13bc0:	781b      	ldrb	r3, [r3, #0]
   13bc2:	2b00      	cmp	r3, #0
   13bc4:	d10c      	bne.n	13be0 <mem_read_capacity+0x30>
   13bc6:	1dfb      	adds	r3, r7, #7
   13bc8:	781b      	ldrb	r3, [r3, #0]
   13bca:	4a0b      	ldr	r2, [pc, #44]	; (13bf8 <mem_read_capacity+0x48>)
   13bcc:	015b      	lsls	r3, r3, #5
   13bce:	18d3      	adds	r3, r2, r3
   13bd0:	3304      	adds	r3, #4
   13bd2:	681b      	ldr	r3, [r3, #0]
   13bd4:	683a      	ldr	r2, [r7, #0]
   13bd6:	0010      	movs	r0, r2
   13bd8:	4798      	blx	r3
   13bda:	0003      	movs	r3, r0
   13bdc:	001a      	movs	r2, r3
   13bde:	e000      	b.n	13be2 <mem_read_capacity+0x32>
   13be0:	2201      	movs	r2, #1
  status =
   13be2:	230f      	movs	r3, #15
   13be4:	18fb      	adds	r3, r7, r3
   13be6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   13be8:	230f      	movs	r3, #15
   13bea:	18fb      	adds	r3, r7, r3
   13bec:	781b      	ldrb	r3, [r3, #0]
}
   13bee:	0018      	movs	r0, r3
   13bf0:	46bd      	mov	sp, r7
   13bf2:	b004      	add	sp, #16
   13bf4:	bd80      	pop	{r7, pc}
   13bf6:	46c0      	nop			; (mov r8, r8)
   13bf8:	0002825c 	.word	0x0002825c

00013bfc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   13bfc:	b580      	push	{r7, lr}
   13bfe:	b084      	sub	sp, #16
   13c00:	af00      	add	r7, sp, #0
   13c02:	0002      	movs	r2, r0
   13c04:	1dfb      	adds	r3, r7, #7
   13c06:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   13c08:	1dfb      	adds	r3, r7, #7
   13c0a:	781b      	ldrb	r3, [r3, #0]
   13c0c:	425a      	negs	r2, r3
   13c0e:	4153      	adcs	r3, r2
   13c10:	b2da      	uxtb	r2, r3
  sector_size =
   13c12:	230f      	movs	r3, #15
   13c14:	18fb      	adds	r3, r7, r3
   13c16:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   13c18:	230f      	movs	r3, #15
   13c1a:	18fb      	adds	r3, r7, r3
   13c1c:	781b      	ldrb	r3, [r3, #0]
}
   13c1e:	0018      	movs	r0, r3
   13c20:	46bd      	mov	sp, r7
   13c22:	b004      	add	sp, #16
   13c24:	bd80      	pop	{r7, pc}
	...

00013c28 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   13c28:	b580      	push	{r7, lr}
   13c2a:	b084      	sub	sp, #16
   13c2c:	af00      	add	r7, sp, #0
   13c2e:	0002      	movs	r2, r0
   13c30:	1dfb      	adds	r3, r7, #7
   13c32:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   13c34:	1dfb      	adds	r3, r7, #7
   13c36:	781b      	ldrb	r3, [r3, #0]
   13c38:	2b00      	cmp	r3, #0
   13c3a:	d109      	bne.n	13c50 <mem_wr_protect+0x28>
   13c3c:	1dfb      	adds	r3, r7, #7
   13c3e:	781b      	ldrb	r3, [r3, #0]
   13c40:	4a0a      	ldr	r2, [pc, #40]	; (13c6c <mem_wr_protect+0x44>)
   13c42:	015b      	lsls	r3, r3, #5
   13c44:	18d3      	adds	r3, r2, r3
   13c46:	330c      	adds	r3, #12
   13c48:	681b      	ldr	r3, [r3, #0]
   13c4a:	4798      	blx	r3
   13c4c:	1e03      	subs	r3, r0, #0
   13c4e:	d001      	beq.n	13c54 <mem_wr_protect+0x2c>
   13c50:	2201      	movs	r2, #1
   13c52:	e000      	b.n	13c56 <mem_wr_protect+0x2e>
   13c54:	2200      	movs	r2, #0
  wr_protect =
   13c56:	230f      	movs	r3, #15
   13c58:	18fb      	adds	r3, r7, r3
   13c5a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   13c5c:	230f      	movs	r3, #15
   13c5e:	18fb      	adds	r3, r7, r3
   13c60:	781b      	ldrb	r3, [r3, #0]
}
   13c62:	0018      	movs	r0, r3
   13c64:	46bd      	mov	sp, r7
   13c66:	b004      	add	sp, #16
   13c68:	bd80      	pop	{r7, pc}
   13c6a:	46c0      	nop			; (mov r8, r8)
   13c6c:	0002825c 	.word	0x0002825c

00013c70 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   13c70:	b580      	push	{r7, lr}
   13c72:	b086      	sub	sp, #24
   13c74:	af00      	add	r7, sp, #0
   13c76:	60b9      	str	r1, [r7, #8]
   13c78:	607a      	str	r2, [r7, #4]
   13c7a:	230f      	movs	r3, #15
   13c7c:	18fb      	adds	r3, r7, r3
   13c7e:	1c02      	adds	r2, r0, #0
   13c80:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   13c82:	230f      	movs	r3, #15
   13c84:	18fb      	adds	r3, r7, r3
   13c86:	781b      	ldrb	r3, [r3, #0]
   13c88:	2b00      	cmp	r3, #0
   13c8a:	d10e      	bne.n	13caa <memory_2_ram+0x3a>
   13c8c:	230f      	movs	r3, #15
   13c8e:	18fb      	adds	r3, r7, r3
   13c90:	781b      	ldrb	r3, [r3, #0]
   13c92:	4a0b      	ldr	r2, [pc, #44]	; (13cc0 <memory_2_ram+0x50>)
   13c94:	015b      	lsls	r3, r3, #5
   13c96:	18d3      	adds	r3, r2, r3
   13c98:	3314      	adds	r3, #20
   13c9a:	681b      	ldr	r3, [r3, #0]
   13c9c:	6879      	ldr	r1, [r7, #4]
   13c9e:	68ba      	ldr	r2, [r7, #8]
   13ca0:	0010      	movs	r0, r2
   13ca2:	4798      	blx	r3
   13ca4:	0003      	movs	r3, r0
   13ca6:	001a      	movs	r2, r3
   13ca8:	e000      	b.n	13cac <memory_2_ram+0x3c>
   13caa:	2201      	movs	r2, #1
  status =
   13cac:	2317      	movs	r3, #23
   13cae:	18fb      	adds	r3, r7, r3
   13cb0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   13cb2:	2317      	movs	r3, #23
   13cb4:	18fb      	adds	r3, r7, r3
   13cb6:	781b      	ldrb	r3, [r3, #0]
}
   13cb8:	0018      	movs	r0, r3
   13cba:	46bd      	mov	sp, r7
   13cbc:	b006      	add	sp, #24
   13cbe:	bd80      	pop	{r7, pc}
   13cc0:	0002825c 	.word	0x0002825c

00013cc4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   13cc4:	b580      	push	{r7, lr}
   13cc6:	b086      	sub	sp, #24
   13cc8:	af00      	add	r7, sp, #0
   13cca:	60b9      	str	r1, [r7, #8]
   13ccc:	607a      	str	r2, [r7, #4]
   13cce:	230f      	movs	r3, #15
   13cd0:	18fb      	adds	r3, r7, r3
   13cd2:	1c02      	adds	r2, r0, #0
   13cd4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   13cd6:	230f      	movs	r3, #15
   13cd8:	18fb      	adds	r3, r7, r3
   13cda:	781b      	ldrb	r3, [r3, #0]
   13cdc:	2b00      	cmp	r3, #0
   13cde:	d10e      	bne.n	13cfe <ram_2_memory+0x3a>
   13ce0:	230f      	movs	r3, #15
   13ce2:	18fb      	adds	r3, r7, r3
   13ce4:	781b      	ldrb	r3, [r3, #0]
   13ce6:	4a0b      	ldr	r2, [pc, #44]	; (13d14 <ram_2_memory+0x50>)
   13ce8:	015b      	lsls	r3, r3, #5
   13cea:	18d3      	adds	r3, r2, r3
   13cec:	3318      	adds	r3, #24
   13cee:	681b      	ldr	r3, [r3, #0]
   13cf0:	6879      	ldr	r1, [r7, #4]
   13cf2:	68ba      	ldr	r2, [r7, #8]
   13cf4:	0010      	movs	r0, r2
   13cf6:	4798      	blx	r3
   13cf8:	0003      	movs	r3, r0
   13cfa:	001a      	movs	r2, r3
   13cfc:	e000      	b.n	13d00 <ram_2_memory+0x3c>
   13cfe:	2201      	movs	r2, #1
  status =
   13d00:	2317      	movs	r3, #23
   13d02:	18fb      	adds	r3, r7, r3
   13d04:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   13d06:	2317      	movs	r3, #23
   13d08:	18fb      	adds	r3, r7, r3
   13d0a:	781b      	ldrb	r3, [r3, #0]
}
   13d0c:	0018      	movs	r0, r3
   13d0e:	46bd      	mov	sp, r7
   13d10:	b006      	add	sp, #24
   13d12:	bd80      	pop	{r7, pc}
   13d14:	0002825c 	.word	0x0002825c

00013d18 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   13d18:	b580      	push	{r7, lr}
   13d1a:	b082      	sub	sp, #8
   13d1c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   13d1e:	4b10      	ldr	r3, [pc, #64]	; (13d60 <cpu_irq_enter_critical+0x48>)
   13d20:	681b      	ldr	r3, [r3, #0]
   13d22:	2b00      	cmp	r3, #0
   13d24:	d112      	bne.n	13d4c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   13d26:	f3ef 8310 	mrs	r3, PRIMASK
   13d2a:	607b      	str	r3, [r7, #4]
  return(result);
   13d2c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   13d2e:	2b00      	cmp	r3, #0
   13d30:	d109      	bne.n	13d46 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   13d32:	b672      	cpsid	i
   13d34:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   13d38:	4b0a      	ldr	r3, [pc, #40]	; (13d64 <cpu_irq_enter_critical+0x4c>)
   13d3a:	2200      	movs	r2, #0
   13d3c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   13d3e:	4b0a      	ldr	r3, [pc, #40]	; (13d68 <cpu_irq_enter_critical+0x50>)
   13d40:	2201      	movs	r2, #1
   13d42:	701a      	strb	r2, [r3, #0]
   13d44:	e002      	b.n	13d4c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   13d46:	4b08      	ldr	r3, [pc, #32]	; (13d68 <cpu_irq_enter_critical+0x50>)
   13d48:	2200      	movs	r2, #0
   13d4a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   13d4c:	4b04      	ldr	r3, [pc, #16]	; (13d60 <cpu_irq_enter_critical+0x48>)
   13d4e:	681b      	ldr	r3, [r3, #0]
   13d50:	1c5a      	adds	r2, r3, #1
   13d52:	4b03      	ldr	r3, [pc, #12]	; (13d60 <cpu_irq_enter_critical+0x48>)
   13d54:	601a      	str	r2, [r3, #0]
}
   13d56:	46c0      	nop			; (mov r8, r8)
   13d58:	46bd      	mov	sp, r7
   13d5a:	b002      	add	sp, #8
   13d5c:	bd80      	pop	{r7, pc}
   13d5e:	46c0      	nop			; (mov r8, r8)
   13d60:	20004348 	.word	0x20004348
   13d64:	20000126 	.word	0x20000126
   13d68:	2000434c 	.word	0x2000434c

00013d6c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   13d6c:	b580      	push	{r7, lr}
   13d6e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   13d70:	4b0b      	ldr	r3, [pc, #44]	; (13da0 <cpu_irq_leave_critical+0x34>)
   13d72:	681b      	ldr	r3, [r3, #0]
   13d74:	1e5a      	subs	r2, r3, #1
   13d76:	4b0a      	ldr	r3, [pc, #40]	; (13da0 <cpu_irq_leave_critical+0x34>)
   13d78:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   13d7a:	4b09      	ldr	r3, [pc, #36]	; (13da0 <cpu_irq_leave_critical+0x34>)
   13d7c:	681b      	ldr	r3, [r3, #0]
   13d7e:	2b00      	cmp	r3, #0
   13d80:	d10a      	bne.n	13d98 <cpu_irq_leave_critical+0x2c>
   13d82:	4b08      	ldr	r3, [pc, #32]	; (13da4 <cpu_irq_leave_critical+0x38>)
   13d84:	781b      	ldrb	r3, [r3, #0]
   13d86:	b2db      	uxtb	r3, r3
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d005      	beq.n	13d98 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   13d8c:	4b06      	ldr	r3, [pc, #24]	; (13da8 <cpu_irq_leave_critical+0x3c>)
   13d8e:	2201      	movs	r2, #1
   13d90:	701a      	strb	r2, [r3, #0]
   13d92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   13d96:	b662      	cpsie	i
	}
}
   13d98:	46c0      	nop			; (mov r8, r8)
   13d9a:	46bd      	mov	sp, r7
   13d9c:	bd80      	pop	{r7, pc}
   13d9e:	46c0      	nop			; (mov r8, r8)
   13da0:	20004348 	.word	0x20004348
   13da4:	2000434c 	.word	0x2000434c
   13da8:	20000126 	.word	0x20000126

00013dac <system_pinmux_get_group_from_gpio_pin>:
{
   13dac:	b580      	push	{r7, lr}
   13dae:	b084      	sub	sp, #16
   13db0:	af00      	add	r7, sp, #0
   13db2:	0002      	movs	r2, r0
   13db4:	1dfb      	adds	r3, r7, #7
   13db6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13db8:	230f      	movs	r3, #15
   13dba:	18fb      	adds	r3, r7, r3
   13dbc:	1dfa      	adds	r2, r7, #7
   13dbe:	7812      	ldrb	r2, [r2, #0]
   13dc0:	09d2      	lsrs	r2, r2, #7
   13dc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13dc4:	230e      	movs	r3, #14
   13dc6:	18fb      	adds	r3, r7, r3
   13dc8:	1dfa      	adds	r2, r7, #7
   13dca:	7812      	ldrb	r2, [r2, #0]
   13dcc:	0952      	lsrs	r2, r2, #5
   13dce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13dd0:	4b0d      	ldr	r3, [pc, #52]	; (13e08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13dd2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13dd4:	230f      	movs	r3, #15
   13dd6:	18fb      	adds	r3, r7, r3
   13dd8:	781b      	ldrb	r3, [r3, #0]
   13dda:	2b00      	cmp	r3, #0
   13ddc:	d10f      	bne.n	13dfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13dde:	230f      	movs	r3, #15
   13de0:	18fb      	adds	r3, r7, r3
   13de2:	781b      	ldrb	r3, [r3, #0]
   13de4:	009b      	lsls	r3, r3, #2
   13de6:	2210      	movs	r2, #16
   13de8:	4694      	mov	ip, r2
   13dea:	44bc      	add	ip, r7
   13dec:	4463      	add	r3, ip
   13dee:	3b08      	subs	r3, #8
   13df0:	681a      	ldr	r2, [r3, #0]
   13df2:	230e      	movs	r3, #14
   13df4:	18fb      	adds	r3, r7, r3
   13df6:	781b      	ldrb	r3, [r3, #0]
   13df8:	01db      	lsls	r3, r3, #7
   13dfa:	18d3      	adds	r3, r2, r3
   13dfc:	e000      	b.n	13e00 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13dfe:	2300      	movs	r3, #0
}
   13e00:	0018      	movs	r0, r3
   13e02:	46bd      	mov	sp, r7
   13e04:	b004      	add	sp, #16
   13e06:	bd80      	pop	{r7, pc}
   13e08:	41004400 	.word	0x41004400

00013e0c <port_get_group_from_gpio_pin>:
{
   13e0c:	b580      	push	{r7, lr}
   13e0e:	b082      	sub	sp, #8
   13e10:	af00      	add	r7, sp, #0
   13e12:	0002      	movs	r2, r0
   13e14:	1dfb      	adds	r3, r7, #7
   13e16:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13e18:	1dfb      	adds	r3, r7, #7
   13e1a:	781b      	ldrb	r3, [r3, #0]
   13e1c:	0018      	movs	r0, r3
   13e1e:	4b03      	ldr	r3, [pc, #12]	; (13e2c <port_get_group_from_gpio_pin+0x20>)
   13e20:	4798      	blx	r3
   13e22:	0003      	movs	r3, r0
}
   13e24:	0018      	movs	r0, r3
   13e26:	46bd      	mov	sp, r7
   13e28:	b002      	add	sp, #8
   13e2a:	bd80      	pop	{r7, pc}
   13e2c:	00013dad 	.word	0x00013dad

00013e30 <port_get_config_defaults>:
{
   13e30:	b580      	push	{r7, lr}
   13e32:	b082      	sub	sp, #8
   13e34:	af00      	add	r7, sp, #0
   13e36:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   13e38:	687b      	ldr	r3, [r7, #4]
   13e3a:	2200      	movs	r2, #0
   13e3c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13e3e:	687b      	ldr	r3, [r7, #4]
   13e40:	2201      	movs	r2, #1
   13e42:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   13e44:	687b      	ldr	r3, [r7, #4]
   13e46:	2200      	movs	r2, #0
   13e48:	709a      	strb	r2, [r3, #2]
}
   13e4a:	46c0      	nop			; (mov r8, r8)
   13e4c:	46bd      	mov	sp, r7
   13e4e:	b002      	add	sp, #8
   13e50:	bd80      	pop	{r7, pc}
	...

00013e54 <port_pin_set_output_level>:
{
   13e54:	b580      	push	{r7, lr}
   13e56:	b084      	sub	sp, #16
   13e58:	af00      	add	r7, sp, #0
   13e5a:	0002      	movs	r2, r0
   13e5c:	1dfb      	adds	r3, r7, #7
   13e5e:	701a      	strb	r2, [r3, #0]
   13e60:	1dbb      	adds	r3, r7, #6
   13e62:	1c0a      	adds	r2, r1, #0
   13e64:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13e66:	1dfb      	adds	r3, r7, #7
   13e68:	781b      	ldrb	r3, [r3, #0]
   13e6a:	0018      	movs	r0, r3
   13e6c:	4b0d      	ldr	r3, [pc, #52]	; (13ea4 <port_pin_set_output_level+0x50>)
   13e6e:	4798      	blx	r3
   13e70:	0003      	movs	r3, r0
   13e72:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13e74:	1dfb      	adds	r3, r7, #7
   13e76:	781b      	ldrb	r3, [r3, #0]
   13e78:	221f      	movs	r2, #31
   13e7a:	4013      	ands	r3, r2
   13e7c:	2201      	movs	r2, #1
   13e7e:	409a      	lsls	r2, r3
   13e80:	0013      	movs	r3, r2
   13e82:	60bb      	str	r3, [r7, #8]
	if (level) {
   13e84:	1dbb      	adds	r3, r7, #6
   13e86:	781b      	ldrb	r3, [r3, #0]
   13e88:	2b00      	cmp	r3, #0
   13e8a:	d003      	beq.n	13e94 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13e8c:	68fb      	ldr	r3, [r7, #12]
   13e8e:	68ba      	ldr	r2, [r7, #8]
   13e90:	619a      	str	r2, [r3, #24]
}
   13e92:	e002      	b.n	13e9a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13e94:	68fb      	ldr	r3, [r7, #12]
   13e96:	68ba      	ldr	r2, [r7, #8]
   13e98:	615a      	str	r2, [r3, #20]
}
   13e9a:	46c0      	nop			; (mov r8, r8)
   13e9c:	46bd      	mov	sp, r7
   13e9e:	b004      	add	sp, #16
   13ea0:	bd80      	pop	{r7, pc}
   13ea2:	46c0      	nop			; (mov r8, r8)
   13ea4:	00013e0d 	.word	0x00013e0d

00013ea8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   13ea8:	b580      	push	{r7, lr}
   13eaa:	b082      	sub	sp, #8
   13eac:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   13eae:	1d3b      	adds	r3, r7, #4
   13eb0:	0018      	movs	r0, r3
   13eb2:	4b0e      	ldr	r3, [pc, #56]	; (13eec <system_board_init+0x44>)
   13eb4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   13eb6:	1d3b      	adds	r3, r7, #4
   13eb8:	2201      	movs	r2, #1
   13eba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   13ebc:	1d3b      	adds	r3, r7, #4
   13ebe:	0019      	movs	r1, r3
   13ec0:	2017      	movs	r0, #23
   13ec2:	4b0b      	ldr	r3, [pc, #44]	; (13ef0 <system_board_init+0x48>)
   13ec4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   13ec6:	2101      	movs	r1, #1
   13ec8:	2017      	movs	r0, #23
   13eca:	4b0a      	ldr	r3, [pc, #40]	; (13ef4 <system_board_init+0x4c>)
   13ecc:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   13ece:	1d3b      	adds	r3, r7, #4
   13ed0:	2200      	movs	r2, #0
   13ed2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   13ed4:	1d3b      	adds	r3, r7, #4
   13ed6:	2201      	movs	r2, #1
   13ed8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   13eda:	1d3b      	adds	r3, r7, #4
   13edc:	0019      	movs	r1, r3
   13ede:	2037      	movs	r0, #55	; 0x37
   13ee0:	4b03      	ldr	r3, [pc, #12]	; (13ef0 <system_board_init+0x48>)
   13ee2:	4798      	blx	r3
}
   13ee4:	46c0      	nop			; (mov r8, r8)
   13ee6:	46bd      	mov	sp, r7
   13ee8:	b002      	add	sp, #8
   13eea:	bd80      	pop	{r7, pc}
   13eec:	00013e31 	.word	0x00013e31
   13ef0:	0001451d 	.word	0x0001451d
   13ef4:	00013e55 	.word	0x00013e55

00013ef8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   13ef8:	b580      	push	{r7, lr}
   13efa:	b084      	sub	sp, #16
   13efc:	af00      	add	r7, sp, #0
   13efe:	0002      	movs	r2, r0
   13f00:	1dfb      	adds	r3, r7, #7
   13f02:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   13f04:	230f      	movs	r3, #15
   13f06:	18fb      	adds	r3, r7, r3
   13f08:	1dfa      	adds	r2, r7, #7
   13f0a:	7812      	ldrb	r2, [r2, #0]
   13f0c:	0952      	lsrs	r2, r2, #5
   13f0e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   13f10:	230f      	movs	r3, #15
   13f12:	18fb      	adds	r3, r7, r3
   13f14:	781b      	ldrb	r3, [r3, #0]
   13f16:	2b00      	cmp	r3, #0
   13f18:	d10c      	bne.n	13f34 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   13f1a:	4b09      	ldr	r3, [pc, #36]	; (13f40 <_extint_get_eic_from_channel+0x48>)
   13f1c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   13f1e:	230f      	movs	r3, #15
   13f20:	18fb      	adds	r3, r7, r3
   13f22:	781b      	ldrb	r3, [r3, #0]
   13f24:	009b      	lsls	r3, r3, #2
   13f26:	2210      	movs	r2, #16
   13f28:	4694      	mov	ip, r2
   13f2a:	44bc      	add	ip, r7
   13f2c:	4463      	add	r3, ip
   13f2e:	3b08      	subs	r3, #8
   13f30:	681b      	ldr	r3, [r3, #0]
   13f32:	e000      	b.n	13f36 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   13f34:	2300      	movs	r3, #0
	}
}
   13f36:	0018      	movs	r0, r3
   13f38:	46bd      	mov	sp, r7
   13f3a:	b004      	add	sp, #16
   13f3c:	bd80      	pop	{r7, pc}
   13f3e:	46c0      	nop			; (mov r8, r8)
   13f40:	40001800 	.word	0x40001800

00013f44 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   13f44:	b580      	push	{r7, lr}
   13f46:	b084      	sub	sp, #16
   13f48:	af00      	add	r7, sp, #0
   13f4a:	0002      	movs	r2, r0
   13f4c:	1dfb      	adds	r3, r7, #7
   13f4e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   13f50:	1dfb      	adds	r3, r7, #7
   13f52:	781b      	ldrb	r3, [r3, #0]
   13f54:	0018      	movs	r0, r3
   13f56:	4b0b      	ldr	r3, [pc, #44]	; (13f84 <extint_chan_is_detected+0x40>)
   13f58:	4798      	blx	r3
   13f5a:	0003      	movs	r3, r0
   13f5c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   13f5e:	1dfb      	adds	r3, r7, #7
   13f60:	781b      	ldrb	r3, [r3, #0]
   13f62:	221f      	movs	r2, #31
   13f64:	4013      	ands	r3, r2
   13f66:	2201      	movs	r2, #1
   13f68:	409a      	lsls	r2, r3
   13f6a:	0013      	movs	r3, r2
   13f6c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   13f6e:	68fb      	ldr	r3, [r7, #12]
   13f70:	691b      	ldr	r3, [r3, #16]
   13f72:	68ba      	ldr	r2, [r7, #8]
   13f74:	4013      	ands	r3, r2
   13f76:	1e5a      	subs	r2, r3, #1
   13f78:	4193      	sbcs	r3, r2
   13f7a:	b2db      	uxtb	r3, r3
}
   13f7c:	0018      	movs	r0, r3
   13f7e:	46bd      	mov	sp, r7
   13f80:	b004      	add	sp, #16
   13f82:	bd80      	pop	{r7, pc}
   13f84:	00013ef9 	.word	0x00013ef9

00013f88 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   13f88:	b580      	push	{r7, lr}
   13f8a:	b084      	sub	sp, #16
   13f8c:	af00      	add	r7, sp, #0
   13f8e:	0002      	movs	r2, r0
   13f90:	1dfb      	adds	r3, r7, #7
   13f92:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   13f94:	1dfb      	adds	r3, r7, #7
   13f96:	781b      	ldrb	r3, [r3, #0]
   13f98:	0018      	movs	r0, r3
   13f9a:	4b09      	ldr	r3, [pc, #36]	; (13fc0 <extint_chan_clear_detected+0x38>)
   13f9c:	4798      	blx	r3
   13f9e:	0003      	movs	r3, r0
   13fa0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   13fa2:	1dfb      	adds	r3, r7, #7
   13fa4:	781b      	ldrb	r3, [r3, #0]
   13fa6:	221f      	movs	r2, #31
   13fa8:	4013      	ands	r3, r2
   13faa:	2201      	movs	r2, #1
   13fac:	409a      	lsls	r2, r3
   13fae:	0013      	movs	r3, r2
   13fb0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   13fb2:	68fb      	ldr	r3, [r7, #12]
   13fb4:	68ba      	ldr	r2, [r7, #8]
   13fb6:	611a      	str	r2, [r3, #16]
}
   13fb8:	46c0      	nop			; (mov r8, r8)
   13fba:	46bd      	mov	sp, r7
   13fbc:	b004      	add	sp, #16
   13fbe:	bd80      	pop	{r7, pc}
   13fc0:	00013ef9 	.word	0x00013ef9

00013fc4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   13fc4:	b580      	push	{r7, lr}
   13fc6:	b082      	sub	sp, #8
   13fc8:	af00      	add	r7, sp, #0
   13fca:	6078      	str	r0, [r7, #4]
   13fcc:	0008      	movs	r0, r1
   13fce:	0011      	movs	r1, r2
   13fd0:	1cfb      	adds	r3, r7, #3
   13fd2:	1c02      	adds	r2, r0, #0
   13fd4:	701a      	strb	r2, [r3, #0]
   13fd6:	1cbb      	adds	r3, r7, #2
   13fd8:	1c0a      	adds	r2, r1, #0
   13fda:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   13fdc:	1cbb      	adds	r3, r7, #2
   13fde:	781b      	ldrb	r3, [r3, #0]
   13fe0:	2b00      	cmp	r3, #0
   13fe2:	d001      	beq.n	13fe8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   13fe4:	2317      	movs	r3, #23
   13fe6:	e019      	b.n	1401c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   13fe8:	1cfb      	adds	r3, r7, #3
   13fea:	781a      	ldrb	r2, [r3, #0]
   13fec:	4b0d      	ldr	r3, [pc, #52]	; (14024 <extint_register_callback+0x60>)
   13fee:	0092      	lsls	r2, r2, #2
   13ff0:	58d3      	ldr	r3, [r2, r3]
   13ff2:	2b00      	cmp	r3, #0
   13ff4:	d107      	bne.n	14006 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   13ff6:	1cfb      	adds	r3, r7, #3
   13ff8:	781a      	ldrb	r2, [r3, #0]
   13ffa:	4b0a      	ldr	r3, [pc, #40]	; (14024 <extint_register_callback+0x60>)
   13ffc:	0092      	lsls	r2, r2, #2
   13ffe:	6879      	ldr	r1, [r7, #4]
   14000:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   14002:	2300      	movs	r3, #0
   14004:	e00a      	b.n	1401c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   14006:	1cfb      	adds	r3, r7, #3
   14008:	781a      	ldrb	r2, [r3, #0]
   1400a:	4b06      	ldr	r3, [pc, #24]	; (14024 <extint_register_callback+0x60>)
   1400c:	0092      	lsls	r2, r2, #2
   1400e:	58d2      	ldr	r2, [r2, r3]
   14010:	687b      	ldr	r3, [r7, #4]
   14012:	429a      	cmp	r2, r3
   14014:	d101      	bne.n	1401a <extint_register_callback+0x56>
		return STATUS_OK;
   14016:	2300      	movs	r3, #0
   14018:	e000      	b.n	1401c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   1401a:	231d      	movs	r3, #29
}
   1401c:	0018      	movs	r0, r3
   1401e:	46bd      	mov	sp, r7
   14020:	b002      	add	sp, #8
   14022:	bd80      	pop	{r7, pc}
   14024:	20005ca4 	.word	0x20005ca4

00014028 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   14028:	b580      	push	{r7, lr}
   1402a:	b084      	sub	sp, #16
   1402c:	af00      	add	r7, sp, #0
   1402e:	0002      	movs	r2, r0
   14030:	1dfb      	adds	r3, r7, #7
   14032:	701a      	strb	r2, [r3, #0]
   14034:	1dbb      	adds	r3, r7, #6
   14036:	1c0a      	adds	r2, r1, #0
   14038:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1403a:	1dbb      	adds	r3, r7, #6
   1403c:	781b      	ldrb	r3, [r3, #0]
   1403e:	2b00      	cmp	r3, #0
   14040:	d10e      	bne.n	14060 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   14042:	1dfb      	adds	r3, r7, #7
   14044:	781b      	ldrb	r3, [r3, #0]
   14046:	0018      	movs	r0, r3
   14048:	4b08      	ldr	r3, [pc, #32]	; (1406c <extint_chan_enable_callback+0x44>)
   1404a:	4798      	blx	r3
   1404c:	0003      	movs	r3, r0
   1404e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   14050:	1dfb      	adds	r3, r7, #7
   14052:	781b      	ldrb	r3, [r3, #0]
   14054:	2201      	movs	r2, #1
   14056:	409a      	lsls	r2, r3
   14058:	68fb      	ldr	r3, [r7, #12]
   1405a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   1405c:	2300      	movs	r3, #0
   1405e:	e000      	b.n	14062 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   14060:	2317      	movs	r3, #23
}
   14062:	0018      	movs	r0, r3
   14064:	46bd      	mov	sp, r7
   14066:	b004      	add	sp, #16
   14068:	bd80      	pop	{r7, pc}
   1406a:	46c0      	nop			; (mov r8, r8)
   1406c:	00013ef9 	.word	0x00013ef9

00014070 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   14070:	b580      	push	{r7, lr}
   14072:	b084      	sub	sp, #16
   14074:	af00      	add	r7, sp, #0
   14076:	0002      	movs	r2, r0
   14078:	1dfb      	adds	r3, r7, #7
   1407a:	701a      	strb	r2, [r3, #0]
   1407c:	1dbb      	adds	r3, r7, #6
   1407e:	1c0a      	adds	r2, r1, #0
   14080:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   14082:	1dbb      	adds	r3, r7, #6
   14084:	781b      	ldrb	r3, [r3, #0]
   14086:	2b00      	cmp	r3, #0
   14088:	d10e      	bne.n	140a8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   1408a:	1dfb      	adds	r3, r7, #7
   1408c:	781b      	ldrb	r3, [r3, #0]
   1408e:	0018      	movs	r0, r3
   14090:	4b08      	ldr	r3, [pc, #32]	; (140b4 <extint_chan_disable_callback+0x44>)
   14092:	4798      	blx	r3
   14094:	0003      	movs	r3, r0
   14096:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   14098:	1dfb      	adds	r3, r7, #7
   1409a:	781b      	ldrb	r3, [r3, #0]
   1409c:	2201      	movs	r2, #1
   1409e:	409a      	lsls	r2, r3
   140a0:	68fb      	ldr	r3, [r7, #12]
   140a2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   140a4:	2300      	movs	r3, #0
   140a6:	e000      	b.n	140aa <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   140a8:	2317      	movs	r3, #23
}
   140aa:	0018      	movs	r0, r3
   140ac:	46bd      	mov	sp, r7
   140ae:	b004      	add	sp, #16
   140b0:	bd80      	pop	{r7, pc}
   140b2:	46c0      	nop			; (mov r8, r8)
   140b4:	00013ef9 	.word	0x00013ef9

000140b8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   140b8:	b580      	push	{r7, lr}
   140ba:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   140bc:	4b15      	ldr	r3, [pc, #84]	; (14114 <EIC_Handler+0x5c>)
   140be:	2200      	movs	r2, #0
   140c0:	701a      	strb	r2, [r3, #0]
   140c2:	e020      	b.n	14106 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   140c4:	4b13      	ldr	r3, [pc, #76]	; (14114 <EIC_Handler+0x5c>)
   140c6:	781b      	ldrb	r3, [r3, #0]
   140c8:	0018      	movs	r0, r3
   140ca:	4b13      	ldr	r3, [pc, #76]	; (14118 <EIC_Handler+0x60>)
   140cc:	4798      	blx	r3
   140ce:	1e03      	subs	r3, r0, #0
   140d0:	d013      	beq.n	140fa <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   140d2:	4b10      	ldr	r3, [pc, #64]	; (14114 <EIC_Handler+0x5c>)
   140d4:	781b      	ldrb	r3, [r3, #0]
   140d6:	0018      	movs	r0, r3
   140d8:	4b10      	ldr	r3, [pc, #64]	; (1411c <EIC_Handler+0x64>)
   140da:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   140dc:	4b0d      	ldr	r3, [pc, #52]	; (14114 <EIC_Handler+0x5c>)
   140de:	781b      	ldrb	r3, [r3, #0]
   140e0:	001a      	movs	r2, r3
   140e2:	4b0f      	ldr	r3, [pc, #60]	; (14120 <EIC_Handler+0x68>)
   140e4:	0092      	lsls	r2, r2, #2
   140e6:	58d3      	ldr	r3, [r2, r3]
   140e8:	2b00      	cmp	r3, #0
   140ea:	d006      	beq.n	140fa <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   140ec:	4b09      	ldr	r3, [pc, #36]	; (14114 <EIC_Handler+0x5c>)
   140ee:	781b      	ldrb	r3, [r3, #0]
   140f0:	001a      	movs	r2, r3
   140f2:	4b0b      	ldr	r3, [pc, #44]	; (14120 <EIC_Handler+0x68>)
   140f4:	0092      	lsls	r2, r2, #2
   140f6:	58d3      	ldr	r3, [r2, r3]
   140f8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   140fa:	4b06      	ldr	r3, [pc, #24]	; (14114 <EIC_Handler+0x5c>)
   140fc:	781b      	ldrb	r3, [r3, #0]
   140fe:	3301      	adds	r3, #1
   14100:	b2da      	uxtb	r2, r3
   14102:	4b04      	ldr	r3, [pc, #16]	; (14114 <EIC_Handler+0x5c>)
   14104:	701a      	strb	r2, [r3, #0]
   14106:	4b03      	ldr	r3, [pc, #12]	; (14114 <EIC_Handler+0x5c>)
   14108:	781b      	ldrb	r3, [r3, #0]
   1410a:	2b0f      	cmp	r3, #15
   1410c:	d9da      	bls.n	140c4 <EIC_Handler+0xc>
			}
		}
	}
}
   1410e:	46c0      	nop			; (mov r8, r8)
   14110:	46bd      	mov	sp, r7
   14112:	bd80      	pop	{r7, pc}
   14114:	20005ca0 	.word	0x20005ca0
   14118:	00013f45 	.word	0x00013f45
   1411c:	00013f89 	.word	0x00013f89
   14120:	20005ca4 	.word	0x20005ca4

00014124 <system_gclk_chan_get_config_defaults>:
{
   14124:	b580      	push	{r7, lr}
   14126:	b082      	sub	sp, #8
   14128:	af00      	add	r7, sp, #0
   1412a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1412c:	687b      	ldr	r3, [r7, #4]
   1412e:	2200      	movs	r2, #0
   14130:	701a      	strb	r2, [r3, #0]
}
   14132:	46c0      	nop			; (mov r8, r8)
   14134:	46bd      	mov	sp, r7
   14136:	b002      	add	sp, #8
   14138:	bd80      	pop	{r7, pc}
	...

0001413c <system_apb_clock_set_mask>:
{
   1413c:	b580      	push	{r7, lr}
   1413e:	b082      	sub	sp, #8
   14140:	af00      	add	r7, sp, #0
   14142:	0002      	movs	r2, r0
   14144:	6039      	str	r1, [r7, #0]
   14146:	1dfb      	adds	r3, r7, #7
   14148:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1414a:	1dfb      	adds	r3, r7, #7
   1414c:	781b      	ldrb	r3, [r3, #0]
   1414e:	2b01      	cmp	r3, #1
   14150:	d00a      	beq.n	14168 <system_apb_clock_set_mask+0x2c>
   14152:	2b02      	cmp	r3, #2
   14154:	d00f      	beq.n	14176 <system_apb_clock_set_mask+0x3a>
   14156:	2b00      	cmp	r3, #0
   14158:	d114      	bne.n	14184 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1415a:	4b0e      	ldr	r3, [pc, #56]	; (14194 <system_apb_clock_set_mask+0x58>)
   1415c:	4a0d      	ldr	r2, [pc, #52]	; (14194 <system_apb_clock_set_mask+0x58>)
   1415e:	6991      	ldr	r1, [r2, #24]
   14160:	683a      	ldr	r2, [r7, #0]
   14162:	430a      	orrs	r2, r1
   14164:	619a      	str	r2, [r3, #24]
			break;
   14166:	e00f      	b.n	14188 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   14168:	4b0a      	ldr	r3, [pc, #40]	; (14194 <system_apb_clock_set_mask+0x58>)
   1416a:	4a0a      	ldr	r2, [pc, #40]	; (14194 <system_apb_clock_set_mask+0x58>)
   1416c:	69d1      	ldr	r1, [r2, #28]
   1416e:	683a      	ldr	r2, [r7, #0]
   14170:	430a      	orrs	r2, r1
   14172:	61da      	str	r2, [r3, #28]
			break;
   14174:	e008      	b.n	14188 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   14176:	4b07      	ldr	r3, [pc, #28]	; (14194 <system_apb_clock_set_mask+0x58>)
   14178:	4a06      	ldr	r2, [pc, #24]	; (14194 <system_apb_clock_set_mask+0x58>)
   1417a:	6a11      	ldr	r1, [r2, #32]
   1417c:	683a      	ldr	r2, [r7, #0]
   1417e:	430a      	orrs	r2, r1
   14180:	621a      	str	r2, [r3, #32]
			break;
   14182:	e001      	b.n	14188 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   14184:	2317      	movs	r3, #23
   14186:	e000      	b.n	1418a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   14188:	2300      	movs	r3, #0
}
   1418a:	0018      	movs	r0, r3
   1418c:	46bd      	mov	sp, r7
   1418e:	b002      	add	sp, #8
   14190:	bd80      	pop	{r7, pc}
   14192:	46c0      	nop			; (mov r8, r8)
   14194:	40000400 	.word	0x40000400

00014198 <system_pinmux_get_config_defaults>:
{
   14198:	b580      	push	{r7, lr}
   1419a:	b082      	sub	sp, #8
   1419c:	af00      	add	r7, sp, #0
   1419e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   141a0:	687b      	ldr	r3, [r7, #4]
   141a2:	2280      	movs	r2, #128	; 0x80
   141a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   141a6:	687b      	ldr	r3, [r7, #4]
   141a8:	2200      	movs	r2, #0
   141aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   141ac:	687b      	ldr	r3, [r7, #4]
   141ae:	2201      	movs	r2, #1
   141b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   141b2:	687b      	ldr	r3, [r7, #4]
   141b4:	2200      	movs	r2, #0
   141b6:	70da      	strb	r2, [r3, #3]
}
   141b8:	46c0      	nop			; (mov r8, r8)
   141ba:	46bd      	mov	sp, r7
   141bc:	b002      	add	sp, #8
   141be:	bd80      	pop	{r7, pc}

000141c0 <system_interrupt_enable>:
{
   141c0:	b580      	push	{r7, lr}
   141c2:	b082      	sub	sp, #8
   141c4:	af00      	add	r7, sp, #0
   141c6:	0002      	movs	r2, r0
   141c8:	1dfb      	adds	r3, r7, #7
   141ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   141cc:	4b06      	ldr	r3, [pc, #24]	; (141e8 <system_interrupt_enable+0x28>)
   141ce:	1dfa      	adds	r2, r7, #7
   141d0:	7812      	ldrb	r2, [r2, #0]
   141d2:	0011      	movs	r1, r2
   141d4:	221f      	movs	r2, #31
   141d6:	400a      	ands	r2, r1
   141d8:	2101      	movs	r1, #1
   141da:	4091      	lsls	r1, r2
   141dc:	000a      	movs	r2, r1
   141de:	601a      	str	r2, [r3, #0]
}
   141e0:	46c0      	nop			; (mov r8, r8)
   141e2:	46bd      	mov	sp, r7
   141e4:	b002      	add	sp, #8
   141e6:	bd80      	pop	{r7, pc}
   141e8:	e000e100 	.word	0xe000e100

000141ec <_extint_get_eic_from_channel>:
{
   141ec:	b580      	push	{r7, lr}
   141ee:	b084      	sub	sp, #16
   141f0:	af00      	add	r7, sp, #0
   141f2:	0002      	movs	r2, r0
   141f4:	1dfb      	adds	r3, r7, #7
   141f6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   141f8:	230f      	movs	r3, #15
   141fa:	18fb      	adds	r3, r7, r3
   141fc:	1dfa      	adds	r2, r7, #7
   141fe:	7812      	ldrb	r2, [r2, #0]
   14200:	0952      	lsrs	r2, r2, #5
   14202:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   14204:	230f      	movs	r3, #15
   14206:	18fb      	adds	r3, r7, r3
   14208:	781b      	ldrb	r3, [r3, #0]
   1420a:	2b00      	cmp	r3, #0
   1420c:	d10c      	bne.n	14228 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1420e:	4b09      	ldr	r3, [pc, #36]	; (14234 <_extint_get_eic_from_channel+0x48>)
   14210:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   14212:	230f      	movs	r3, #15
   14214:	18fb      	adds	r3, r7, r3
   14216:	781b      	ldrb	r3, [r3, #0]
   14218:	009b      	lsls	r3, r3, #2
   1421a:	2210      	movs	r2, #16
   1421c:	4694      	mov	ip, r2
   1421e:	44bc      	add	ip, r7
   14220:	4463      	add	r3, ip
   14222:	3b08      	subs	r3, #8
   14224:	681b      	ldr	r3, [r3, #0]
   14226:	e000      	b.n	1422a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   14228:	2300      	movs	r3, #0
}
   1422a:	0018      	movs	r0, r3
   1422c:	46bd      	mov	sp, r7
   1422e:	b004      	add	sp, #16
   14230:	bd80      	pop	{r7, pc}
   14232:	46c0      	nop			; (mov r8, r8)
   14234:	40001800 	.word	0x40001800

00014238 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   14238:	b580      	push	{r7, lr}
   1423a:	b082      	sub	sp, #8
   1423c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1423e:	4b0f      	ldr	r3, [pc, #60]	; (1427c <extint_is_syncing+0x44>)
   14240:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   14242:	2300      	movs	r3, #0
   14244:	607b      	str	r3, [r7, #4]
   14246:	e011      	b.n	1426c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   14248:	687b      	ldr	r3, [r7, #4]
   1424a:	009b      	lsls	r3, r3, #2
   1424c:	2208      	movs	r2, #8
   1424e:	4694      	mov	ip, r2
   14250:	44bc      	add	ip, r7
   14252:	4463      	add	r3, ip
   14254:	3b08      	subs	r3, #8
   14256:	681b      	ldr	r3, [r3, #0]
   14258:	785b      	ldrb	r3, [r3, #1]
   1425a:	b2db      	uxtb	r3, r3
   1425c:	b25b      	sxtb	r3, r3
   1425e:	2b00      	cmp	r3, #0
   14260:	da01      	bge.n	14266 <extint_is_syncing+0x2e>
			return true;
   14262:	2301      	movs	r3, #1
   14264:	e006      	b.n	14274 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   14266:	687b      	ldr	r3, [r7, #4]
   14268:	3301      	adds	r3, #1
   1426a:	607b      	str	r3, [r7, #4]
   1426c:	687b      	ldr	r3, [r7, #4]
   1426e:	2b00      	cmp	r3, #0
   14270:	d0ea      	beq.n	14248 <extint_is_syncing+0x10>
		}
	}
	return false;
   14272:	2300      	movs	r3, #0
}
   14274:	0018      	movs	r0, r3
   14276:	46bd      	mov	sp, r7
   14278:	b002      	add	sp, #8
   1427a:	bd80      	pop	{r7, pc}
   1427c:	40001800 	.word	0x40001800

00014280 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   14280:	b580      	push	{r7, lr}
   14282:	b084      	sub	sp, #16
   14284:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   14286:	4b2d      	ldr	r3, [pc, #180]	; (1433c <_system_extint_init+0xbc>)
   14288:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1428a:	2140      	movs	r1, #64	; 0x40
   1428c:	2000      	movs	r0, #0
   1428e:	4b2c      	ldr	r3, [pc, #176]	; (14340 <_system_extint_init+0xc0>)
   14290:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14292:	003b      	movs	r3, r7
   14294:	0018      	movs	r0, r3
   14296:	4b2b      	ldr	r3, [pc, #172]	; (14344 <_system_extint_init+0xc4>)
   14298:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1429a:	003b      	movs	r3, r7
   1429c:	2200      	movs	r2, #0
   1429e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   142a0:	003b      	movs	r3, r7
   142a2:	0019      	movs	r1, r3
   142a4:	2005      	movs	r0, #5
   142a6:	4b28      	ldr	r3, [pc, #160]	; (14348 <_system_extint_init+0xc8>)
   142a8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   142aa:	2005      	movs	r0, #5
   142ac:	4b27      	ldr	r3, [pc, #156]	; (1434c <_system_extint_init+0xcc>)
   142ae:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   142b0:	2300      	movs	r3, #0
   142b2:	60fb      	str	r3, [r7, #12]
   142b4:	e018      	b.n	142e8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   142b6:	68fb      	ldr	r3, [r7, #12]
   142b8:	009b      	lsls	r3, r3, #2
   142ba:	2210      	movs	r2, #16
   142bc:	4694      	mov	ip, r2
   142be:	44bc      	add	ip, r7
   142c0:	4463      	add	r3, ip
   142c2:	3b0c      	subs	r3, #12
   142c4:	681a      	ldr	r2, [r3, #0]
   142c6:	68fb      	ldr	r3, [r7, #12]
   142c8:	009b      	lsls	r3, r3, #2
   142ca:	2110      	movs	r1, #16
   142cc:	468c      	mov	ip, r1
   142ce:	44bc      	add	ip, r7
   142d0:	4463      	add	r3, ip
   142d2:	3b0c      	subs	r3, #12
   142d4:	681b      	ldr	r3, [r3, #0]
   142d6:	781b      	ldrb	r3, [r3, #0]
   142d8:	b2db      	uxtb	r3, r3
   142da:	2101      	movs	r1, #1
   142dc:	430b      	orrs	r3, r1
   142de:	b2db      	uxtb	r3, r3
   142e0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   142e2:	68fb      	ldr	r3, [r7, #12]
   142e4:	3301      	adds	r3, #1
   142e6:	60fb      	str	r3, [r7, #12]
   142e8:	68fb      	ldr	r3, [r7, #12]
   142ea:	2b00      	cmp	r3, #0
   142ec:	d0e3      	beq.n	142b6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   142ee:	46c0      	nop			; (mov r8, r8)
   142f0:	4b17      	ldr	r3, [pc, #92]	; (14350 <_system_extint_init+0xd0>)
   142f2:	4798      	blx	r3
   142f4:	1e03      	subs	r3, r0, #0
   142f6:	d1fb      	bne.n	142f0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   142f8:	230b      	movs	r3, #11
   142fa:	18fb      	adds	r3, r7, r3
   142fc:	2200      	movs	r2, #0
   142fe:	701a      	strb	r2, [r3, #0]
   14300:	e00d      	b.n	1431e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   14302:	230b      	movs	r3, #11
   14304:	18fb      	adds	r3, r7, r3
   14306:	781a      	ldrb	r2, [r3, #0]
   14308:	4b12      	ldr	r3, [pc, #72]	; (14354 <_system_extint_init+0xd4>)
   1430a:	0092      	lsls	r2, r2, #2
   1430c:	2100      	movs	r1, #0
   1430e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   14310:	230b      	movs	r3, #11
   14312:	18fb      	adds	r3, r7, r3
   14314:	781a      	ldrb	r2, [r3, #0]
   14316:	230b      	movs	r3, #11
   14318:	18fb      	adds	r3, r7, r3
   1431a:	3201      	adds	r2, #1
   1431c:	701a      	strb	r2, [r3, #0]
   1431e:	230b      	movs	r3, #11
   14320:	18fb      	adds	r3, r7, r3
   14322:	781b      	ldrb	r3, [r3, #0]
   14324:	2b0f      	cmp	r3, #15
   14326:	d9ec      	bls.n	14302 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   14328:	2004      	movs	r0, #4
   1432a:	4b0b      	ldr	r3, [pc, #44]	; (14358 <_system_extint_init+0xd8>)
   1432c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1432e:	4b0b      	ldr	r3, [pc, #44]	; (1435c <_system_extint_init+0xdc>)
   14330:	4798      	blx	r3
}
   14332:	46c0      	nop			; (mov r8, r8)
   14334:	46bd      	mov	sp, r7
   14336:	b004      	add	sp, #16
   14338:	bd80      	pop	{r7, pc}
   1433a:	46c0      	nop			; (mov r8, r8)
   1433c:	40001800 	.word	0x40001800
   14340:	0001413d 	.word	0x0001413d
   14344:	00014125 	.word	0x00014125
   14348:	000179ad 	.word	0x000179ad
   1434c:	000179f1 	.word	0x000179f1
   14350:	00014239 	.word	0x00014239
   14354:	20005ca4 	.word	0x20005ca4
   14358:	000141c1 	.word	0x000141c1
   1435c:	00014361 	.word	0x00014361

00014360 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   14360:	b580      	push	{r7, lr}
   14362:	b082      	sub	sp, #8
   14364:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   14366:	4b15      	ldr	r3, [pc, #84]	; (143bc <_extint_enable+0x5c>)
   14368:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1436a:	2300      	movs	r3, #0
   1436c:	607b      	str	r3, [r7, #4]
   1436e:	e018      	b.n	143a2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   14370:	687b      	ldr	r3, [r7, #4]
   14372:	009b      	lsls	r3, r3, #2
   14374:	2208      	movs	r2, #8
   14376:	4694      	mov	ip, r2
   14378:	44bc      	add	ip, r7
   1437a:	4463      	add	r3, ip
   1437c:	3b08      	subs	r3, #8
   1437e:	681a      	ldr	r2, [r3, #0]
   14380:	687b      	ldr	r3, [r7, #4]
   14382:	009b      	lsls	r3, r3, #2
   14384:	2108      	movs	r1, #8
   14386:	468c      	mov	ip, r1
   14388:	44bc      	add	ip, r7
   1438a:	4463      	add	r3, ip
   1438c:	3b08      	subs	r3, #8
   1438e:	681b      	ldr	r3, [r3, #0]
   14390:	781b      	ldrb	r3, [r3, #0]
   14392:	b2db      	uxtb	r3, r3
   14394:	2102      	movs	r1, #2
   14396:	430b      	orrs	r3, r1
   14398:	b2db      	uxtb	r3, r3
   1439a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1439c:	687b      	ldr	r3, [r7, #4]
   1439e:	3301      	adds	r3, #1
   143a0:	607b      	str	r3, [r7, #4]
   143a2:	687b      	ldr	r3, [r7, #4]
   143a4:	2b00      	cmp	r3, #0
   143a6:	d0e3      	beq.n	14370 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   143a8:	46c0      	nop			; (mov r8, r8)
   143aa:	4b05      	ldr	r3, [pc, #20]	; (143c0 <_extint_enable+0x60>)
   143ac:	4798      	blx	r3
   143ae:	1e03      	subs	r3, r0, #0
   143b0:	d1fb      	bne.n	143aa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   143b2:	46c0      	nop			; (mov r8, r8)
   143b4:	46bd      	mov	sp, r7
   143b6:	b002      	add	sp, #8
   143b8:	bd80      	pop	{r7, pc}
   143ba:	46c0      	nop			; (mov r8, r8)
   143bc:	40001800 	.word	0x40001800
   143c0:	00014239 	.word	0x00014239

000143c4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   143c4:	b580      	push	{r7, lr}
   143c6:	b082      	sub	sp, #8
   143c8:	af00      	add	r7, sp, #0
   143ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   143cc:	687b      	ldr	r3, [r7, #4]
   143ce:	2200      	movs	r2, #0
   143d0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   143d2:	687b      	ldr	r3, [r7, #4]
   143d4:	2200      	movs	r2, #0
   143d6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   143d8:	687b      	ldr	r3, [r7, #4]
   143da:	2201      	movs	r2, #1
   143dc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   143de:	687b      	ldr	r3, [r7, #4]
   143e0:	2201      	movs	r2, #1
   143e2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   143e4:	687b      	ldr	r3, [r7, #4]
   143e6:	2200      	movs	r2, #0
   143e8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   143ea:	687b      	ldr	r3, [r7, #4]
   143ec:	2202      	movs	r2, #2
   143ee:	72da      	strb	r2, [r3, #11]
}
   143f0:	46c0      	nop			; (mov r8, r8)
   143f2:	46bd      	mov	sp, r7
   143f4:	b002      	add	sp, #8
   143f6:	bd80      	pop	{r7, pc}

000143f8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   143f8:	b580      	push	{r7, lr}
   143fa:	b086      	sub	sp, #24
   143fc:	af00      	add	r7, sp, #0
   143fe:	0002      	movs	r2, r0
   14400:	6039      	str	r1, [r7, #0]
   14402:	1dfb      	adds	r3, r7, #7
   14404:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   14406:	2308      	movs	r3, #8
   14408:	18fb      	adds	r3, r7, r3
   1440a:	0018      	movs	r0, r3
   1440c:	4b36      	ldr	r3, [pc, #216]	; (144e8 <extint_chan_set_config+0xf0>)
   1440e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   14410:	683b      	ldr	r3, [r7, #0]
   14412:	685b      	ldr	r3, [r3, #4]
   14414:	b2da      	uxtb	r2, r3
   14416:	2308      	movs	r3, #8
   14418:	18fb      	adds	r3, r7, r3
   1441a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1441c:	2308      	movs	r3, #8
   1441e:	18fb      	adds	r3, r7, r3
   14420:	2200      	movs	r2, #0
   14422:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   14424:	683b      	ldr	r3, [r7, #0]
   14426:	7a1a      	ldrb	r2, [r3, #8]
   14428:	2308      	movs	r3, #8
   1442a:	18fb      	adds	r3, r7, r3
   1442c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1442e:	683b      	ldr	r3, [r7, #0]
   14430:	681b      	ldr	r3, [r3, #0]
   14432:	b2db      	uxtb	r3, r3
   14434:	2208      	movs	r2, #8
   14436:	18ba      	adds	r2, r7, r2
   14438:	0011      	movs	r1, r2
   1443a:	0018      	movs	r0, r3
   1443c:	4b2b      	ldr	r3, [pc, #172]	; (144ec <extint_chan_set_config+0xf4>)
   1443e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   14440:	1dfb      	adds	r3, r7, #7
   14442:	781b      	ldrb	r3, [r3, #0]
   14444:	0018      	movs	r0, r3
   14446:	4b2a      	ldr	r3, [pc, #168]	; (144f0 <extint_chan_set_config+0xf8>)
   14448:	4798      	blx	r3
   1444a:	0003      	movs	r3, r0
   1444c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1444e:	1dfb      	adds	r3, r7, #7
   14450:	781b      	ldrb	r3, [r3, #0]
   14452:	2207      	movs	r2, #7
   14454:	4013      	ands	r3, r2
   14456:	009b      	lsls	r3, r3, #2
   14458:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1445a:	683b      	ldr	r3, [r7, #0]
   1445c:	7adb      	ldrb	r3, [r3, #11]
   1445e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   14460:	683b      	ldr	r3, [r7, #0]
   14462:	7a9b      	ldrb	r3, [r3, #10]
   14464:	2b00      	cmp	r3, #0
   14466:	d003      	beq.n	14470 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   14468:	697b      	ldr	r3, [r7, #20]
   1446a:	2208      	movs	r2, #8
   1446c:	4313      	orrs	r3, r2
   1446e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   14470:	1dfb      	adds	r3, r7, #7
   14472:	781b      	ldrb	r3, [r3, #0]
   14474:	08db      	lsrs	r3, r3, #3
   14476:	b2db      	uxtb	r3, r3
   14478:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1447a:	1dfb      	adds	r3, r7, #7
   1447c:	781b      	ldrb	r3, [r3, #0]
   1447e:	08db      	lsrs	r3, r3, #3
   14480:	b2db      	uxtb	r3, r3
   14482:	001a      	movs	r2, r3
   14484:	693b      	ldr	r3, [r7, #16]
   14486:	3206      	adds	r2, #6
   14488:	0092      	lsls	r2, r2, #2
   1448a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1448c:	210f      	movs	r1, #15
   1448e:	68fa      	ldr	r2, [r7, #12]
   14490:	4091      	lsls	r1, r2
   14492:	000a      	movs	r2, r1
   14494:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   14496:	401a      	ands	r2, r3
			(new_config << config_pos);
   14498:	6979      	ldr	r1, [r7, #20]
   1449a:	68fb      	ldr	r3, [r7, #12]
   1449c:	4099      	lsls	r1, r3
   1449e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   144a0:	431a      	orrs	r2, r3
   144a2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   144a4:	693b      	ldr	r3, [r7, #16]
   144a6:	1d82      	adds	r2, r0, #6
   144a8:	0092      	lsls	r2, r2, #2
   144aa:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   144ac:	683b      	ldr	r3, [r7, #0]
   144ae:	7a5b      	ldrb	r3, [r3, #9]
   144b0:	2b00      	cmp	r3, #0
   144b2:	d00a      	beq.n	144ca <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   144b4:	693b      	ldr	r3, [r7, #16]
   144b6:	695a      	ldr	r2, [r3, #20]
   144b8:	1dfb      	adds	r3, r7, #7
   144ba:	781b      	ldrb	r3, [r3, #0]
   144bc:	2101      	movs	r1, #1
   144be:	4099      	lsls	r1, r3
   144c0:	000b      	movs	r3, r1
   144c2:	431a      	orrs	r2, r3
   144c4:	693b      	ldr	r3, [r7, #16]
   144c6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   144c8:	e00a      	b.n	144e0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   144ca:	693b      	ldr	r3, [r7, #16]
   144cc:	695b      	ldr	r3, [r3, #20]
   144ce:	1dfa      	adds	r2, r7, #7
   144d0:	7812      	ldrb	r2, [r2, #0]
   144d2:	2101      	movs	r1, #1
   144d4:	4091      	lsls	r1, r2
   144d6:	000a      	movs	r2, r1
   144d8:	43d2      	mvns	r2, r2
   144da:	401a      	ands	r2, r3
   144dc:	693b      	ldr	r3, [r7, #16]
   144de:	615a      	str	r2, [r3, #20]
}
   144e0:	46c0      	nop			; (mov r8, r8)
   144e2:	46bd      	mov	sp, r7
   144e4:	b006      	add	sp, #24
   144e6:	bd80      	pop	{r7, pc}
   144e8:	00014199 	.word	0x00014199
   144ec:	00017d0d 	.word	0x00017d0d
   144f0:	000141ed 	.word	0x000141ed

000144f4 <system_pinmux_get_config_defaults>:
{
   144f4:	b580      	push	{r7, lr}
   144f6:	b082      	sub	sp, #8
   144f8:	af00      	add	r7, sp, #0
   144fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   144fc:	687b      	ldr	r3, [r7, #4]
   144fe:	2280      	movs	r2, #128	; 0x80
   14500:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14502:	687b      	ldr	r3, [r7, #4]
   14504:	2200      	movs	r2, #0
   14506:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14508:	687b      	ldr	r3, [r7, #4]
   1450a:	2201      	movs	r2, #1
   1450c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1450e:	687b      	ldr	r3, [r7, #4]
   14510:	2200      	movs	r2, #0
   14512:	70da      	strb	r2, [r3, #3]
}
   14514:	46c0      	nop			; (mov r8, r8)
   14516:	46bd      	mov	sp, r7
   14518:	b002      	add	sp, #8
   1451a:	bd80      	pop	{r7, pc}

0001451c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1451c:	b580      	push	{r7, lr}
   1451e:	b084      	sub	sp, #16
   14520:	af00      	add	r7, sp, #0
   14522:	0002      	movs	r2, r0
   14524:	6039      	str	r1, [r7, #0]
   14526:	1dfb      	adds	r3, r7, #7
   14528:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1452a:	230c      	movs	r3, #12
   1452c:	18fb      	adds	r3, r7, r3
   1452e:	0018      	movs	r0, r3
   14530:	4b10      	ldr	r3, [pc, #64]	; (14574 <port_pin_set_config+0x58>)
   14532:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   14534:	230c      	movs	r3, #12
   14536:	18fb      	adds	r3, r7, r3
   14538:	2280      	movs	r2, #128	; 0x80
   1453a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1453c:	683b      	ldr	r3, [r7, #0]
   1453e:	781a      	ldrb	r2, [r3, #0]
   14540:	230c      	movs	r3, #12
   14542:	18fb      	adds	r3, r7, r3
   14544:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   14546:	683b      	ldr	r3, [r7, #0]
   14548:	785a      	ldrb	r2, [r3, #1]
   1454a:	230c      	movs	r3, #12
   1454c:	18fb      	adds	r3, r7, r3
   1454e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   14550:	683b      	ldr	r3, [r7, #0]
   14552:	789a      	ldrb	r2, [r3, #2]
   14554:	230c      	movs	r3, #12
   14556:	18fb      	adds	r3, r7, r3
   14558:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1455a:	230c      	movs	r3, #12
   1455c:	18fa      	adds	r2, r7, r3
   1455e:	1dfb      	adds	r3, r7, #7
   14560:	781b      	ldrb	r3, [r3, #0]
   14562:	0011      	movs	r1, r2
   14564:	0018      	movs	r0, r3
   14566:	4b04      	ldr	r3, [pc, #16]	; (14578 <port_pin_set_config+0x5c>)
   14568:	4798      	blx	r3
}
   1456a:	46c0      	nop			; (mov r8, r8)
   1456c:	46bd      	mov	sp, r7
   1456e:	b004      	add	sp, #16
   14570:	bd80      	pop	{r7, pc}
   14572:	46c0      	nop			; (mov r8, r8)
   14574:	000144f5 	.word	0x000144f5
   14578:	00017d0d 	.word	0x00017d0d

0001457c <system_gclk_chan_get_config_defaults>:
{
   1457c:	b580      	push	{r7, lr}
   1457e:	b082      	sub	sp, #8
   14580:	af00      	add	r7, sp, #0
   14582:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14584:	687b      	ldr	r3, [r7, #4]
   14586:	2200      	movs	r2, #0
   14588:	701a      	strb	r2, [r3, #0]
}
   1458a:	46c0      	nop			; (mov r8, r8)
   1458c:	46bd      	mov	sp, r7
   1458e:	b002      	add	sp, #8
   14590:	bd80      	pop	{r7, pc}
	...

00014594 <system_apb_clock_set_mask>:
{
   14594:	b580      	push	{r7, lr}
   14596:	b082      	sub	sp, #8
   14598:	af00      	add	r7, sp, #0
   1459a:	0002      	movs	r2, r0
   1459c:	6039      	str	r1, [r7, #0]
   1459e:	1dfb      	adds	r3, r7, #7
   145a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   145a2:	1dfb      	adds	r3, r7, #7
   145a4:	781b      	ldrb	r3, [r3, #0]
   145a6:	2b01      	cmp	r3, #1
   145a8:	d00a      	beq.n	145c0 <system_apb_clock_set_mask+0x2c>
   145aa:	2b02      	cmp	r3, #2
   145ac:	d00f      	beq.n	145ce <system_apb_clock_set_mask+0x3a>
   145ae:	2b00      	cmp	r3, #0
   145b0:	d114      	bne.n	145dc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   145b2:	4b0e      	ldr	r3, [pc, #56]	; (145ec <system_apb_clock_set_mask+0x58>)
   145b4:	4a0d      	ldr	r2, [pc, #52]	; (145ec <system_apb_clock_set_mask+0x58>)
   145b6:	6991      	ldr	r1, [r2, #24]
   145b8:	683a      	ldr	r2, [r7, #0]
   145ba:	430a      	orrs	r2, r1
   145bc:	619a      	str	r2, [r3, #24]
			break;
   145be:	e00f      	b.n	145e0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   145c0:	4b0a      	ldr	r3, [pc, #40]	; (145ec <system_apb_clock_set_mask+0x58>)
   145c2:	4a0a      	ldr	r2, [pc, #40]	; (145ec <system_apb_clock_set_mask+0x58>)
   145c4:	69d1      	ldr	r1, [r2, #28]
   145c6:	683a      	ldr	r2, [r7, #0]
   145c8:	430a      	orrs	r2, r1
   145ca:	61da      	str	r2, [r3, #28]
			break;
   145cc:	e008      	b.n	145e0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   145ce:	4b07      	ldr	r3, [pc, #28]	; (145ec <system_apb_clock_set_mask+0x58>)
   145d0:	4a06      	ldr	r2, [pc, #24]	; (145ec <system_apb_clock_set_mask+0x58>)
   145d2:	6a11      	ldr	r1, [r2, #32]
   145d4:	683a      	ldr	r2, [r7, #0]
   145d6:	430a      	orrs	r2, r1
   145d8:	621a      	str	r2, [r3, #32]
			break;
   145da:	e001      	b.n	145e0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   145dc:	2317      	movs	r3, #23
   145de:	e000      	b.n	145e2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   145e0:	2300      	movs	r3, #0
}
   145e2:	0018      	movs	r0, r3
   145e4:	46bd      	mov	sp, r7
   145e6:	b002      	add	sp, #8
   145e8:	bd80      	pop	{r7, pc}
   145ea:	46c0      	nop			; (mov r8, r8)
   145ec:	40000400 	.word	0x40000400

000145f0 <system_interrupt_enable>:
{
   145f0:	b580      	push	{r7, lr}
   145f2:	b082      	sub	sp, #8
   145f4:	af00      	add	r7, sp, #0
   145f6:	0002      	movs	r2, r0
   145f8:	1dfb      	adds	r3, r7, #7
   145fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   145fc:	4b06      	ldr	r3, [pc, #24]	; (14618 <system_interrupt_enable+0x28>)
   145fe:	1dfa      	adds	r2, r7, #7
   14600:	7812      	ldrb	r2, [r2, #0]
   14602:	0011      	movs	r1, r2
   14604:	221f      	movs	r2, #31
   14606:	400a      	ands	r2, r1
   14608:	2101      	movs	r1, #1
   1460a:	4091      	lsls	r1, r2
   1460c:	000a      	movs	r2, r1
   1460e:	601a      	str	r2, [r3, #0]
}
   14610:	46c0      	nop			; (mov r8, r8)
   14612:	46bd      	mov	sp, r7
   14614:	b002      	add	sp, #8
   14616:	bd80      	pop	{r7, pc}
   14618:	e000e100 	.word	0xe000e100

0001461c <system_interrupt_disable>:
{
   1461c:	b580      	push	{r7, lr}
   1461e:	b082      	sub	sp, #8
   14620:	af00      	add	r7, sp, #0
   14622:	0002      	movs	r2, r0
   14624:	1dfb      	adds	r3, r7, #7
   14626:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14628:	4a07      	ldr	r2, [pc, #28]	; (14648 <system_interrupt_disable+0x2c>)
   1462a:	1dfb      	adds	r3, r7, #7
   1462c:	781b      	ldrb	r3, [r3, #0]
   1462e:	0019      	movs	r1, r3
   14630:	231f      	movs	r3, #31
   14632:	400b      	ands	r3, r1
   14634:	2101      	movs	r1, #1
   14636:	4099      	lsls	r1, r3
   14638:	000b      	movs	r3, r1
   1463a:	0019      	movs	r1, r3
   1463c:	2380      	movs	r3, #128	; 0x80
   1463e:	50d1      	str	r1, [r2, r3]
}
   14640:	46c0      	nop			; (mov r8, r8)
   14642:	46bd      	mov	sp, r7
   14644:	b002      	add	sp, #8
   14646:	bd80      	pop	{r7, pc}
   14648:	e000e100 	.word	0xe000e100

0001464c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   1464c:	b580      	push	{r7, lr}
   1464e:	b084      	sub	sp, #16
   14650:	af00      	add	r7, sp, #0
   14652:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   14654:	687b      	ldr	r3, [r7, #4]
   14656:	681b      	ldr	r3, [r3, #0]
   14658:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1465a:	68fb      	ldr	r3, [r7, #12]
   1465c:	7a9b      	ldrb	r3, [r3, #10]
   1465e:	b2db      	uxtb	r3, r3
   14660:	b25b      	sxtb	r3, r3
   14662:	2b00      	cmp	r3, #0
   14664:	da01      	bge.n	1466a <rtc_calendar_is_syncing+0x1e>
                return true;
   14666:	2301      	movs	r3, #1
   14668:	e000      	b.n	1466c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   1466a:	2300      	movs	r3, #0
}
   1466c:	0018      	movs	r0, r3
   1466e:	46bd      	mov	sp, r7
   14670:	b004      	add	sp, #16
   14672:	bd80      	pop	{r7, pc}

00014674 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   14674:	b580      	push	{r7, lr}
   14676:	b084      	sub	sp, #16
   14678:	af00      	add	r7, sp, #0
   1467a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1467c:	687b      	ldr	r3, [r7, #4]
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   14682:	2003      	movs	r0, #3
   14684:	4b0a      	ldr	r3, [pc, #40]	; (146b0 <rtc_calendar_enable+0x3c>)
   14686:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   14688:	46c0      	nop			; (mov r8, r8)
   1468a:	687b      	ldr	r3, [r7, #4]
   1468c:	0018      	movs	r0, r3
   1468e:	4b09      	ldr	r3, [pc, #36]	; (146b4 <rtc_calendar_enable+0x40>)
   14690:	4798      	blx	r3
   14692:	1e03      	subs	r3, r0, #0
   14694:	d1f9      	bne.n	1468a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   14696:	68fb      	ldr	r3, [r7, #12]
   14698:	881b      	ldrh	r3, [r3, #0]
   1469a:	b29b      	uxth	r3, r3
   1469c:	2202      	movs	r2, #2
   1469e:	4313      	orrs	r3, r2
   146a0:	b29a      	uxth	r2, r3
   146a2:	68fb      	ldr	r3, [r7, #12]
   146a4:	801a      	strh	r2, [r3, #0]
}
   146a6:	46c0      	nop			; (mov r8, r8)
   146a8:	46bd      	mov	sp, r7
   146aa:	b004      	add	sp, #16
   146ac:	bd80      	pop	{r7, pc}
   146ae:	46c0      	nop			; (mov r8, r8)
   146b0:	000145f1 	.word	0x000145f1
   146b4:	0001464d 	.word	0x0001464d

000146b8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   146b8:	b580      	push	{r7, lr}
   146ba:	b084      	sub	sp, #16
   146bc:	af00      	add	r7, sp, #0
   146be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   146c0:	687b      	ldr	r3, [r7, #4]
   146c2:	681b      	ldr	r3, [r3, #0]
   146c4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   146c6:	2003      	movs	r0, #3
   146c8:	4b0d      	ldr	r3, [pc, #52]	; (14700 <rtc_calendar_disable+0x48>)
   146ca:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   146cc:	46c0      	nop			; (mov r8, r8)
   146ce:	687b      	ldr	r3, [r7, #4]
   146d0:	0018      	movs	r0, r3
   146d2:	4b0c      	ldr	r3, [pc, #48]	; (14704 <rtc_calendar_disable+0x4c>)
   146d4:	4798      	blx	r3
   146d6:	1e03      	subs	r3, r0, #0
   146d8:	d1f9      	bne.n	146ce <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   146da:	68fb      	ldr	r3, [r7, #12]
   146dc:	22c1      	movs	r2, #193	; 0xc1
   146de:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   146e0:	68fb      	ldr	r3, [r7, #12]
   146e2:	22c1      	movs	r2, #193	; 0xc1
   146e4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   146e6:	68fb      	ldr	r3, [r7, #12]
   146e8:	881b      	ldrh	r3, [r3, #0]
   146ea:	b29b      	uxth	r3, r3
   146ec:	2202      	movs	r2, #2
   146ee:	4393      	bics	r3, r2
   146f0:	b29a      	uxth	r2, r3
   146f2:	68fb      	ldr	r3, [r7, #12]
   146f4:	801a      	strh	r2, [r3, #0]
}
   146f6:	46c0      	nop			; (mov r8, r8)
   146f8:	46bd      	mov	sp, r7
   146fa:	b004      	add	sp, #16
   146fc:	bd80      	pop	{r7, pc}
   146fe:	46c0      	nop			; (mov r8, r8)
   14700:	0001461d 	.word	0x0001461d
   14704:	0001464d 	.word	0x0001464d

00014708 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   14708:	b580      	push	{r7, lr}
   1470a:	b084      	sub	sp, #16
   1470c:	af00      	add	r7, sp, #0
   1470e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   14710:	687b      	ldr	r3, [r7, #4]
   14712:	681b      	ldr	r3, [r3, #0]
   14714:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   14716:	687b      	ldr	r3, [r7, #4]
   14718:	0018      	movs	r0, r3
   1471a:	4b0d      	ldr	r3, [pc, #52]	; (14750 <rtc_calendar_reset+0x48>)
   1471c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   1471e:	687b      	ldr	r3, [r7, #4]
   14720:	2200      	movs	r2, #0
   14722:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   14724:	687b      	ldr	r3, [r7, #4]
   14726:	2200      	movs	r2, #0
   14728:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   1472a:	46c0      	nop			; (mov r8, r8)
   1472c:	687b      	ldr	r3, [r7, #4]
   1472e:	0018      	movs	r0, r3
   14730:	4b08      	ldr	r3, [pc, #32]	; (14754 <rtc_calendar_reset+0x4c>)
   14732:	4798      	blx	r3
   14734:	1e03      	subs	r3, r0, #0
   14736:	d1f9      	bne.n	1472c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   14738:	68fb      	ldr	r3, [r7, #12]
   1473a:	881b      	ldrh	r3, [r3, #0]
   1473c:	b29b      	uxth	r3, r3
   1473e:	2201      	movs	r2, #1
   14740:	4313      	orrs	r3, r2
   14742:	b29a      	uxth	r2, r3
   14744:	68fb      	ldr	r3, [r7, #12]
   14746:	801a      	strh	r2, [r3, #0]
}
   14748:	46c0      	nop			; (mov r8, r8)
   1474a:	46bd      	mov	sp, r7
   1474c:	b004      	add	sp, #16
   1474e:	bd80      	pop	{r7, pc}
   14750:	000146b9 	.word	0x000146b9
   14754:	0001464d 	.word	0x0001464d

00014758 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   14758:	b580      	push	{r7, lr}
   1475a:	b084      	sub	sp, #16
   1475c:	af00      	add	r7, sp, #0
   1475e:	6078      	str	r0, [r7, #4]
   14760:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   14762:	683b      	ldr	r3, [r7, #0]
   14764:	88db      	ldrh	r3, [r3, #6]
   14766:	001a      	movs	r2, r3
   14768:	687b      	ldr	r3, [r7, #4]
   1476a:	88db      	ldrh	r3, [r3, #6]
   1476c:	1ad3      	subs	r3, r2, r3
   1476e:	069b      	lsls	r3, r3, #26
   14770:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   14772:	683b      	ldr	r3, [r7, #0]
   14774:	795b      	ldrb	r3, [r3, #5]
   14776:	059b      	lsls	r3, r3, #22
   14778:	001a      	movs	r2, r3
   1477a:	68fb      	ldr	r3, [r7, #12]
   1477c:	4313      	orrs	r3, r2
   1477e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   14780:	683b      	ldr	r3, [r7, #0]
   14782:	791b      	ldrb	r3, [r3, #4]
   14784:	045b      	lsls	r3, r3, #17
   14786:	001a      	movs	r2, r3
   14788:	68fb      	ldr	r3, [r7, #12]
   1478a:	4313      	orrs	r3, r2
   1478c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   1478e:	683b      	ldr	r3, [r7, #0]
   14790:	789b      	ldrb	r3, [r3, #2]
   14792:	031b      	lsls	r3, r3, #12
   14794:	001a      	movs	r2, r3
   14796:	68fb      	ldr	r3, [r7, #12]
   14798:	4313      	orrs	r3, r2
   1479a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   1479c:	687b      	ldr	r3, [r7, #4]
   1479e:	791b      	ldrb	r3, [r3, #4]
   147a0:	2201      	movs	r2, #1
   147a2:	4053      	eors	r3, r2
   147a4:	b2db      	uxtb	r3, r3
   147a6:	2b00      	cmp	r3, #0
   147a8:	d008      	beq.n	147bc <rtc_calendar_time_to_register_value+0x64>
   147aa:	683b      	ldr	r3, [r7, #0]
   147ac:	78db      	ldrb	r3, [r3, #3]
   147ae:	2b00      	cmp	r3, #0
   147b0:	d004      	beq.n	147bc <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   147b2:	68fb      	ldr	r3, [r7, #12]
   147b4:	2280      	movs	r2, #128	; 0x80
   147b6:	0252      	lsls	r2, r2, #9
   147b8:	4313      	orrs	r3, r2
   147ba:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   147bc:	683b      	ldr	r3, [r7, #0]
   147be:	785b      	ldrb	r3, [r3, #1]
   147c0:	019b      	lsls	r3, r3, #6
   147c2:	001a      	movs	r2, r3
   147c4:	68fb      	ldr	r3, [r7, #12]
   147c6:	4313      	orrs	r3, r2
   147c8:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   147ca:	683b      	ldr	r3, [r7, #0]
   147cc:	781b      	ldrb	r3, [r3, #0]
   147ce:	001a      	movs	r2, r3
   147d0:	68fb      	ldr	r3, [r7, #12]
   147d2:	4313      	orrs	r3, r2
   147d4:	60fb      	str	r3, [r7, #12]

	return register_value;
   147d6:	68fb      	ldr	r3, [r7, #12]
}
   147d8:	0018      	movs	r0, r3
   147da:	46bd      	mov	sp, r7
   147dc:	b004      	add	sp, #16
   147de:	bd80      	pop	{r7, pc}

000147e0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   147e0:	b580      	push	{r7, lr}
   147e2:	b084      	sub	sp, #16
   147e4:	af00      	add	r7, sp, #0
   147e6:	60f8      	str	r0, [r7, #12]
   147e8:	60b9      	str	r1, [r7, #8]
   147ea:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   147ec:	68bb      	ldr	r3, [r7, #8]
   147ee:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   147f0:	b29a      	uxth	r2, r3
   147f2:	68fb      	ldr	r3, [r7, #12]
   147f4:	88db      	ldrh	r3, [r3, #6]
   147f6:	18d3      	adds	r3, r2, r3
   147f8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   147fa:	687b      	ldr	r3, [r7, #4]
   147fc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   147fe:	68bb      	ldr	r3, [r7, #8]
   14800:	0d9b      	lsrs	r3, r3, #22
   14802:	b2db      	uxtb	r3, r3
   14804:	220f      	movs	r2, #15
   14806:	4013      	ands	r3, r2
   14808:	b2da      	uxtb	r2, r3
   1480a:	687b      	ldr	r3, [r7, #4]
   1480c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   1480e:	68bb      	ldr	r3, [r7, #8]
   14810:	0c5b      	lsrs	r3, r3, #17
   14812:	b2db      	uxtb	r3, r3
   14814:	221f      	movs	r2, #31
   14816:	4013      	ands	r3, r2
   14818:	b2da      	uxtb	r2, r3
   1481a:	687b      	ldr	r3, [r7, #4]
   1481c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   1481e:	68fb      	ldr	r3, [r7, #12]
   14820:	791b      	ldrb	r3, [r3, #4]
   14822:	2b00      	cmp	r3, #0
   14824:	d008      	beq.n	14838 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   14826:	68bb      	ldr	r3, [r7, #8]
   14828:	0b1b      	lsrs	r3, r3, #12
   1482a:	b2db      	uxtb	r3, r3
   1482c:	221f      	movs	r2, #31
   1482e:	4013      	ands	r3, r2
   14830:	b2da      	uxtb	r2, r3
   14832:	687b      	ldr	r3, [r7, #4]
   14834:	709a      	strb	r2, [r3, #2]
   14836:	e010      	b.n	1485a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   14838:	68bb      	ldr	r3, [r7, #8]
   1483a:	0b1b      	lsrs	r3, r3, #12
   1483c:	b2db      	uxtb	r3, r3
   1483e:	220f      	movs	r2, #15
   14840:	4013      	ands	r3, r2
   14842:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   14844:	687b      	ldr	r3, [r7, #4]
   14846:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   14848:	68ba      	ldr	r2, [r7, #8]
   1484a:	2380      	movs	r3, #128	; 0x80
   1484c:	025b      	lsls	r3, r3, #9
   1484e:	4013      	ands	r3, r2
   14850:	1e5a      	subs	r2, r3, #1
   14852:	4193      	sbcs	r3, r2
   14854:	b2da      	uxtb	r2, r3
   14856:	687b      	ldr	r3, [r7, #4]
   14858:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   1485a:	68bb      	ldr	r3, [r7, #8]
   1485c:	099b      	lsrs	r3, r3, #6
   1485e:	b2db      	uxtb	r3, r3
   14860:	223f      	movs	r2, #63	; 0x3f
   14862:	4013      	ands	r3, r2
   14864:	b2da      	uxtb	r2, r3
   14866:	687b      	ldr	r3, [r7, #4]
   14868:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   1486a:	68bb      	ldr	r3, [r7, #8]
   1486c:	b2db      	uxtb	r3, r3
   1486e:	223f      	movs	r2, #63	; 0x3f
   14870:	4013      	ands	r3, r2
   14872:	b2da      	uxtb	r2, r3
   14874:	687b      	ldr	r3, [r7, #4]
   14876:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   14878:	46c0      	nop			; (mov r8, r8)
   1487a:	46bd      	mov	sp, r7
   1487c:	b004      	add	sp, #16
   1487e:	bd80      	pop	{r7, pc}

00014880 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   14880:	b580      	push	{r7, lr}
   14882:	b084      	sub	sp, #16
   14884:	af00      	add	r7, sp, #0
   14886:	6078      	str	r0, [r7, #4]
   14888:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1488a:	687b      	ldr	r3, [r7, #4]
   1488c:	681b      	ldr	r3, [r3, #0]
   1488e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   14890:	683b      	ldr	r3, [r7, #0]
   14892:	881a      	ldrh	r2, [r3, #0]
   14894:	230e      	movs	r3, #14
   14896:	18fb      	adds	r3, r7, r3
   14898:	2108      	movs	r1, #8
   1489a:	430a      	orrs	r2, r1
   1489c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   1489e:	683b      	ldr	r3, [r7, #0]
   148a0:	791b      	ldrb	r3, [r3, #4]
   148a2:	2201      	movs	r2, #1
   148a4:	4053      	eors	r3, r2
   148a6:	b2db      	uxtb	r3, r3
   148a8:	2b00      	cmp	r3, #0
   148aa:	d007      	beq.n	148bc <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   148ac:	230e      	movs	r3, #14
   148ae:	18fb      	adds	r3, r7, r3
   148b0:	220e      	movs	r2, #14
   148b2:	18ba      	adds	r2, r7, r2
   148b4:	8812      	ldrh	r2, [r2, #0]
   148b6:	2140      	movs	r1, #64	; 0x40
   148b8:	430a      	orrs	r2, r1
   148ba:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   148bc:	683b      	ldr	r3, [r7, #0]
   148be:	789b      	ldrb	r3, [r3, #2]
   148c0:	2b00      	cmp	r3, #0
   148c2:	d007      	beq.n	148d4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   148c4:	230e      	movs	r3, #14
   148c6:	18fb      	adds	r3, r7, r3
   148c8:	220e      	movs	r2, #14
   148ca:	18ba      	adds	r2, r7, r2
   148cc:	8812      	ldrh	r2, [r2, #0]
   148ce:	2180      	movs	r1, #128	; 0x80
   148d0:	430a      	orrs	r2, r1
   148d2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   148d4:	68bb      	ldr	r3, [r7, #8]
   148d6:	220e      	movs	r2, #14
   148d8:	18ba      	adds	r2, r7, r2
   148da:	8812      	ldrh	r2, [r2, #0]
   148dc:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   148de:	683b      	ldr	r3, [r7, #0]
   148e0:	78db      	ldrb	r3, [r3, #3]
   148e2:	2b00      	cmp	r3, #0
   148e4:	d008      	beq.n	148f8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   148e6:	68bb      	ldr	r3, [r7, #8]
   148e8:	885b      	ldrh	r3, [r3, #2]
   148ea:	b29b      	uxth	r3, r3
   148ec:	2280      	movs	r2, #128	; 0x80
   148ee:	01d2      	lsls	r2, r2, #7
   148f0:	4313      	orrs	r3, r2
   148f2:	b29a      	uxth	r2, r3
   148f4:	68bb      	ldr	r3, [r7, #8]
   148f6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   148f8:	230d      	movs	r3, #13
   148fa:	18fb      	adds	r3, r7, r3
   148fc:	2200      	movs	r2, #0
   148fe:	701a      	strb	r2, [r3, #0]
   14900:	e017      	b.n	14932 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   14902:	230d      	movs	r3, #13
   14904:	18fb      	adds	r3, r7, r3
   14906:	781a      	ldrb	r2, [r3, #0]
   14908:	0013      	movs	r3, r2
   1490a:	009b      	lsls	r3, r3, #2
   1490c:	189b      	adds	r3, r3, r2
   1490e:	005b      	lsls	r3, r3, #1
   14910:	3308      	adds	r3, #8
   14912:	683a      	ldr	r2, [r7, #0]
   14914:	18d1      	adds	r1, r2, r3
   14916:	230d      	movs	r3, #13
   14918:	18fb      	adds	r3, r7, r3
   1491a:	781a      	ldrb	r2, [r3, #0]
   1491c:	687b      	ldr	r3, [r7, #4]
   1491e:	0018      	movs	r0, r3
   14920:	4b08      	ldr	r3, [pc, #32]	; (14944 <_rtc_calendar_set_config+0xc4>)
   14922:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   14924:	230d      	movs	r3, #13
   14926:	18fb      	adds	r3, r7, r3
   14928:	781a      	ldrb	r2, [r3, #0]
   1492a:	230d      	movs	r3, #13
   1492c:	18fb      	adds	r3, r7, r3
   1492e:	3201      	adds	r2, #1
   14930:	701a      	strb	r2, [r3, #0]
   14932:	230d      	movs	r3, #13
   14934:	18fb      	adds	r3, r7, r3
   14936:	781b      	ldrb	r3, [r3, #0]
   14938:	2b00      	cmp	r3, #0
   1493a:	d0e2      	beq.n	14902 <_rtc_calendar_set_config+0x82>
	}
}
   1493c:	46c0      	nop			; (mov r8, r8)
   1493e:	46bd      	mov	sp, r7
   14940:	b004      	add	sp, #16
   14942:	bd80      	pop	{r7, pc}
   14944:	00014a69 	.word	0x00014a69

00014948 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   14948:	b580      	push	{r7, lr}
   1494a:	b086      	sub	sp, #24
   1494c:	af00      	add	r7, sp, #0
   1494e:	60f8      	str	r0, [r7, #12]
   14950:	60b9      	str	r1, [r7, #8]
   14952:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   14954:	68fb      	ldr	r3, [r7, #12]
   14956:	68ba      	ldr	r2, [r7, #8]
   14958:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1495a:	2120      	movs	r1, #32
   1495c:	2000      	movs	r0, #0
   1495e:	4b18      	ldr	r3, [pc, #96]	; (149c0 <rtc_calendar_init+0x78>)
   14960:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14962:	2314      	movs	r3, #20
   14964:	18fb      	adds	r3, r7, r3
   14966:	0018      	movs	r0, r3
   14968:	4b16      	ldr	r3, [pc, #88]	; (149c4 <rtc_calendar_init+0x7c>)
   1496a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1496c:	2314      	movs	r3, #20
   1496e:	18fb      	adds	r3, r7, r3
   14970:	2202      	movs	r2, #2
   14972:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   14974:	2314      	movs	r3, #20
   14976:	18fb      	adds	r3, r7, r3
   14978:	0019      	movs	r1, r3
   1497a:	2004      	movs	r0, #4
   1497c:	4b12      	ldr	r3, [pc, #72]	; (149c8 <rtc_calendar_init+0x80>)
   1497e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   14980:	2004      	movs	r0, #4
   14982:	4b12      	ldr	r3, [pc, #72]	; (149cc <rtc_calendar_init+0x84>)
   14984:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   14986:	68fb      	ldr	r3, [r7, #12]
   14988:	0018      	movs	r0, r3
   1498a:	4b11      	ldr	r3, [pc, #68]	; (149d0 <rtc_calendar_init+0x88>)
   1498c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   1498e:	687b      	ldr	r3, [r7, #4]
   14990:	791a      	ldrb	r2, [r3, #4]
   14992:	68fb      	ldr	r3, [r7, #12]
   14994:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   14996:	687b      	ldr	r3, [r7, #4]
   14998:	78da      	ldrb	r2, [r3, #3]
   1499a:	68fb      	ldr	r3, [r7, #12]
   1499c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   1499e:	687b      	ldr	r3, [r7, #4]
   149a0:	88da      	ldrh	r2, [r3, #6]
   149a2:	68fb      	ldr	r3, [r7, #12]
   149a4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   149a6:	4b0b      	ldr	r3, [pc, #44]	; (149d4 <rtc_calendar_init+0x8c>)
   149a8:	68fa      	ldr	r2, [r7, #12]
   149aa:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   149ac:	687a      	ldr	r2, [r7, #4]
   149ae:	68fb      	ldr	r3, [r7, #12]
   149b0:	0011      	movs	r1, r2
   149b2:	0018      	movs	r0, r3
   149b4:	4b08      	ldr	r3, [pc, #32]	; (149d8 <rtc_calendar_init+0x90>)
   149b6:	4798      	blx	r3
}
   149b8:	46c0      	nop			; (mov r8, r8)
   149ba:	46bd      	mov	sp, r7
   149bc:	b006      	add	sp, #24
   149be:	bd80      	pop	{r7, pc}
   149c0:	00014595 	.word	0x00014595
   149c4:	0001457d 	.word	0x0001457d
   149c8:	000179ad 	.word	0x000179ad
   149cc:	000179f1 	.word	0x000179f1
   149d0:	00014709 	.word	0x00014709
   149d4:	20005ce4 	.word	0x20005ce4
   149d8:	00014881 	.word	0x00014881

000149dc <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   149dc:	b580      	push	{r7, lr}
   149de:	b084      	sub	sp, #16
   149e0:	af00      	add	r7, sp, #0
   149e2:	6078      	str	r0, [r7, #4]
   149e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   149e6:	687b      	ldr	r3, [r7, #4]
   149e8:	681b      	ldr	r3, [r3, #0]
   149ea:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   149ec:	687b      	ldr	r3, [r7, #4]
   149ee:	795b      	ldrb	r3, [r3, #5]
   149f0:	2201      	movs	r2, #1
   149f2:	4053      	eors	r3, r2
   149f4:	b2db      	uxtb	r3, r3
   149f6:	2b00      	cmp	r3, #0
   149f8:	d00a      	beq.n	14a10 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   149fa:	68fb      	ldr	r3, [r7, #12]
   149fc:	4a16      	ldr	r2, [pc, #88]	; (14a58 <rtc_calendar_get_time+0x7c>)
   149fe:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   14a00:	46c0      	nop			; (mov r8, r8)
   14a02:	687b      	ldr	r3, [r7, #4]
   14a04:	0018      	movs	r0, r3
   14a06:	4b15      	ldr	r3, [pc, #84]	; (14a5c <rtc_calendar_get_time+0x80>)
   14a08:	4798      	blx	r3
   14a0a:	1e03      	subs	r3, r0, #0
   14a0c:	d1f9      	bne.n	14a02 <rtc_calendar_get_time+0x26>
   14a0e:	e016      	b.n	14a3e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   14a10:	68fb      	ldr	r3, [r7, #12]
   14a12:	885b      	ldrh	r3, [r3, #2]
   14a14:	b29b      	uxth	r3, r3
   14a16:	001a      	movs	r2, r3
   14a18:	2380      	movs	r3, #128	; 0x80
   14a1a:	01db      	lsls	r3, r3, #7
   14a1c:	4013      	ands	r3, r2
   14a1e:	d10e      	bne.n	14a3e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   14a20:	68fb      	ldr	r3, [r7, #12]
   14a22:	885b      	ldrh	r3, [r3, #2]
   14a24:	b29b      	uxth	r3, r3
   14a26:	4a0e      	ldr	r2, [pc, #56]	; (14a60 <rtc_calendar_get_time+0x84>)
   14a28:	4313      	orrs	r3, r2
   14a2a:	b29a      	uxth	r2, r3
   14a2c:	68fb      	ldr	r3, [r7, #12]
   14a2e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   14a30:	46c0      	nop			; (mov r8, r8)
   14a32:	687b      	ldr	r3, [r7, #4]
   14a34:	0018      	movs	r0, r3
   14a36:	4b09      	ldr	r3, [pc, #36]	; (14a5c <rtc_calendar_get_time+0x80>)
   14a38:	4798      	blx	r3
   14a3a:	1e03      	subs	r3, r0, #0
   14a3c:	d1f9      	bne.n	14a32 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   14a3e:	68fb      	ldr	r3, [r7, #12]
   14a40:	691b      	ldr	r3, [r3, #16]
   14a42:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   14a44:	683a      	ldr	r2, [r7, #0]
   14a46:	68b9      	ldr	r1, [r7, #8]
   14a48:	687b      	ldr	r3, [r7, #4]
   14a4a:	0018      	movs	r0, r3
   14a4c:	4b05      	ldr	r3, [pc, #20]	; (14a64 <rtc_calendar_get_time+0x88>)
   14a4e:	4798      	blx	r3
}
   14a50:	46c0      	nop			; (mov r8, r8)
   14a52:	46bd      	mov	sp, r7
   14a54:	b004      	add	sp, #16
   14a56:	bd80      	pop	{r7, pc}
   14a58:	ffff8000 	.word	0xffff8000
   14a5c:	0001464d 	.word	0x0001464d
   14a60:	ffffc000 	.word	0xffffc000
   14a64:	000147e1 	.word	0x000147e1

00014a68 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   14a68:	b580      	push	{r7, lr}
   14a6a:	b086      	sub	sp, #24
   14a6c:	af00      	add	r7, sp, #0
   14a6e:	60f8      	str	r0, [r7, #12]
   14a70:	60b9      	str	r1, [r7, #8]
   14a72:	1dfb      	adds	r3, r7, #7
   14a74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   14a76:	68fb      	ldr	r3, [r7, #12]
   14a78:	681b      	ldr	r3, [r3, #0]
   14a7a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   14a7c:	1dfb      	adds	r3, r7, #7
   14a7e:	781b      	ldrb	r3, [r3, #0]
   14a80:	2b01      	cmp	r3, #1
   14a82:	d901      	bls.n	14a88 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   14a84:	2317      	movs	r3, #23
   14a86:	e021      	b.n	14acc <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   14a88:	68ba      	ldr	r2, [r7, #8]
   14a8a:	68fb      	ldr	r3, [r7, #12]
   14a8c:	0011      	movs	r1, r2
   14a8e:	0018      	movs	r0, r3
   14a90:	4b10      	ldr	r3, [pc, #64]	; (14ad4 <rtc_calendar_set_alarm+0x6c>)
   14a92:	4798      	blx	r3
   14a94:	0003      	movs	r3, r0
   14a96:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   14a98:	46c0      	nop			; (mov r8, r8)
   14a9a:	68fb      	ldr	r3, [r7, #12]
   14a9c:	0018      	movs	r0, r3
   14a9e:	4b0e      	ldr	r3, [pc, #56]	; (14ad8 <rtc_calendar_set_alarm+0x70>)
   14aa0:	4798      	blx	r3
   14aa2:	1e03      	subs	r3, r0, #0
   14aa4:	d1f9      	bne.n	14a9a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   14aa6:	1dfb      	adds	r3, r7, #7
   14aa8:	781a      	ldrb	r2, [r3, #0]
   14aaa:	697b      	ldr	r3, [r7, #20]
   14aac:	3203      	adds	r2, #3
   14aae:	00d2      	lsls	r2, r2, #3
   14ab0:	6939      	ldr	r1, [r7, #16]
   14ab2:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   14ab4:	1dfb      	adds	r3, r7, #7
   14ab6:	781b      	ldrb	r3, [r3, #0]
   14ab8:	68ba      	ldr	r2, [r7, #8]
   14aba:	7a11      	ldrb	r1, [r2, #8]
   14abc:	697a      	ldr	r2, [r7, #20]
   14abe:	3303      	adds	r3, #3
   14ac0:	00db      	lsls	r3, r3, #3
   14ac2:	18d3      	adds	r3, r2, r3
   14ac4:	3304      	adds	r3, #4
   14ac6:	1c0a      	adds	r2, r1, #0
   14ac8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   14aca:	2300      	movs	r3, #0
}
   14acc:	0018      	movs	r0, r3
   14ace:	46bd      	mov	sp, r7
   14ad0:	b006      	add	sp, #24
   14ad2:	bd80      	pop	{r7, pc}
   14ad4:	00014759 	.word	0x00014759
   14ad8:	0001464d 	.word	0x0001464d

00014adc <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   14adc:	b580      	push	{r7, lr}
   14ade:	b086      	sub	sp, #24
   14ae0:	af00      	add	r7, sp, #0
   14ae2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   14ae4:	4b28      	ldr	r3, [pc, #160]	; (14b88 <_rtc_interrupt_handler+0xac>)
   14ae6:	687a      	ldr	r2, [r7, #4]
   14ae8:	0092      	lsls	r2, r2, #2
   14aea:	58d3      	ldr	r3, [r2, r3]
   14aec:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   14aee:	697b      	ldr	r3, [r7, #20]
   14af0:	681b      	ldr	r3, [r3, #0]
   14af2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   14af4:	230e      	movs	r3, #14
   14af6:	18fb      	adds	r3, r7, r3
   14af8:	697a      	ldr	r2, [r7, #20]
   14afa:	8a52      	ldrh	r2, [r2, #18]
   14afc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   14afe:	697b      	ldr	r3, [r7, #20]
   14b00:	8a1b      	ldrh	r3, [r3, #16]
   14b02:	b29a      	uxth	r2, r3
   14b04:	230e      	movs	r3, #14
   14b06:	18fb      	adds	r3, r7, r3
   14b08:	210e      	movs	r1, #14
   14b0a:	1879      	adds	r1, r7, r1
   14b0c:	8809      	ldrh	r1, [r1, #0]
   14b0e:	400a      	ands	r2, r1
   14b10:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   14b12:	693b      	ldr	r3, [r7, #16]
   14b14:	7a1b      	ldrb	r3, [r3, #8]
   14b16:	b2da      	uxtb	r2, r3
   14b18:	230c      	movs	r3, #12
   14b1a:	18fb      	adds	r3, r7, r3
   14b1c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   14b1e:	693b      	ldr	r3, [r7, #16]
   14b20:	79db      	ldrb	r3, [r3, #7]
   14b22:	b2db      	uxtb	r3, r3
   14b24:	b29a      	uxth	r2, r3
   14b26:	230c      	movs	r3, #12
   14b28:	18fb      	adds	r3, r7, r3
   14b2a:	210c      	movs	r1, #12
   14b2c:	1879      	adds	r1, r7, r1
   14b2e:	8809      	ldrh	r1, [r1, #0]
   14b30:	400a      	ands	r2, r1
   14b32:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   14b34:	230c      	movs	r3, #12
   14b36:	18fb      	adds	r3, r7, r3
   14b38:	881b      	ldrh	r3, [r3, #0]
   14b3a:	2280      	movs	r2, #128	; 0x80
   14b3c:	4013      	ands	r3, r2
   14b3e:	d00c      	beq.n	14b5a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   14b40:	230e      	movs	r3, #14
   14b42:	18fb      	adds	r3, r7, r3
   14b44:	881b      	ldrh	r3, [r3, #0]
   14b46:	2202      	movs	r2, #2
   14b48:	4013      	ands	r3, r2
   14b4a:	d002      	beq.n	14b52 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   14b4c:	697b      	ldr	r3, [r7, #20]
   14b4e:	68db      	ldr	r3, [r3, #12]
   14b50:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   14b52:	693b      	ldr	r3, [r7, #16]
   14b54:	2280      	movs	r2, #128	; 0x80
   14b56:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   14b58:	e011      	b.n	14b7e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   14b5a:	230c      	movs	r3, #12
   14b5c:	18fb      	adds	r3, r7, r3
   14b5e:	881b      	ldrh	r3, [r3, #0]
   14b60:	2201      	movs	r2, #1
   14b62:	4013      	ands	r3, r2
   14b64:	d00b      	beq.n	14b7e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   14b66:	230e      	movs	r3, #14
   14b68:	18fb      	adds	r3, r7, r3
   14b6a:	881b      	ldrh	r3, [r3, #0]
   14b6c:	2201      	movs	r2, #1
   14b6e:	4013      	ands	r3, r2
   14b70:	d002      	beq.n	14b78 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   14b72:	697b      	ldr	r3, [r7, #20]
   14b74:	689b      	ldr	r3, [r3, #8]
   14b76:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   14b78:	693b      	ldr	r3, [r7, #16]
   14b7a:	2201      	movs	r2, #1
   14b7c:	721a      	strb	r2, [r3, #8]
}
   14b7e:	46c0      	nop			; (mov r8, r8)
   14b80:	46bd      	mov	sp, r7
   14b82:	b006      	add	sp, #24
   14b84:	bd80      	pop	{r7, pc}
   14b86:	46c0      	nop			; (mov r8, r8)
   14b88:	20005ce4 	.word	0x20005ce4

00014b8c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   14b8c:	b580      	push	{r7, lr}
   14b8e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   14b90:	2000      	movs	r0, #0
   14b92:	4b02      	ldr	r3, [pc, #8]	; (14b9c <RTC_Handler+0x10>)
   14b94:	4798      	blx	r3
}
   14b96:	46c0      	nop			; (mov r8, r8)
   14b98:	46bd      	mov	sp, r7
   14b9a:	bd80      	pop	{r7, pc}
   14b9c:	00014add 	.word	0x00014add

00014ba0 <system_gclk_chan_get_config_defaults>:
{
   14ba0:	b580      	push	{r7, lr}
   14ba2:	b082      	sub	sp, #8
   14ba4:	af00      	add	r7, sp, #0
   14ba6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14ba8:	687b      	ldr	r3, [r7, #4]
   14baa:	2200      	movs	r2, #0
   14bac:	701a      	strb	r2, [r3, #0]
}
   14bae:	46c0      	nop			; (mov r8, r8)
   14bb0:	46bd      	mov	sp, r7
   14bb2:	b002      	add	sp, #8
   14bb4:	bd80      	pop	{r7, pc}

00014bb6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   14bb6:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bb8:	b08d      	sub	sp, #52	; 0x34
   14bba:	af00      	add	r7, sp, #0
   14bbc:	60b8      	str	r0, [r7, #8]
   14bbe:	60f9      	str	r1, [r7, #12]
   14bc0:	603a      	str	r2, [r7, #0]
   14bc2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   14bc4:	2300      	movs	r3, #0
   14bc6:	2400      	movs	r4, #0
   14bc8:	623b      	str	r3, [r7, #32]
   14bca:	627c      	str	r4, [r7, #36]	; 0x24
   14bcc:	2300      	movs	r3, #0
   14bce:	2400      	movs	r4, #0
   14bd0:	61bb      	str	r3, [r7, #24]
   14bd2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   14bd4:	233f      	movs	r3, #63	; 0x3f
   14bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   14bd8:	e053      	b.n	14c82 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   14bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14bdc:	3b20      	subs	r3, #32
   14bde:	2b00      	cmp	r3, #0
   14be0:	db04      	blt.n	14bec <long_division+0x36>
   14be2:	2201      	movs	r2, #1
   14be4:	409a      	lsls	r2, r3
   14be6:	0013      	movs	r3, r2
   14be8:	617b      	str	r3, [r7, #20]
   14bea:	e00b      	b.n	14c04 <long_division+0x4e>
   14bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14bee:	2220      	movs	r2, #32
   14bf0:	1ad3      	subs	r3, r2, r3
   14bf2:	2201      	movs	r2, #1
   14bf4:	40da      	lsrs	r2, r3
   14bf6:	0013      	movs	r3, r2
   14bf8:	2100      	movs	r1, #0
   14bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14bfc:	4091      	lsls	r1, r2
   14bfe:	000a      	movs	r2, r1
   14c00:	4313      	orrs	r3, r2
   14c02:	617b      	str	r3, [r7, #20]
   14c04:	2201      	movs	r2, #1
   14c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c08:	409a      	lsls	r2, r3
   14c0a:	0013      	movs	r3, r2
   14c0c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   14c0e:	69bb      	ldr	r3, [r7, #24]
   14c10:	69fc      	ldr	r4, [r7, #28]
   14c12:	18db      	adds	r3, r3, r3
   14c14:	4164      	adcs	r4, r4
   14c16:	61bb      	str	r3, [r7, #24]
   14c18:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   14c1a:	68bb      	ldr	r3, [r7, #8]
   14c1c:	693a      	ldr	r2, [r7, #16]
   14c1e:	401a      	ands	r2, r3
   14c20:	0015      	movs	r5, r2
   14c22:	68fb      	ldr	r3, [r7, #12]
   14c24:	697a      	ldr	r2, [r7, #20]
   14c26:	401a      	ands	r2, r3
   14c28:	0016      	movs	r6, r2
   14c2a:	002b      	movs	r3, r5
   14c2c:	4333      	orrs	r3, r6
   14c2e:	d007      	beq.n	14c40 <long_division+0x8a>
			r |= 0x01;
   14c30:	69bb      	ldr	r3, [r7, #24]
   14c32:	2201      	movs	r2, #1
   14c34:	4313      	orrs	r3, r2
   14c36:	61bb      	str	r3, [r7, #24]
   14c38:	69fb      	ldr	r3, [r7, #28]
   14c3a:	2200      	movs	r2, #0
   14c3c:	4313      	orrs	r3, r2
   14c3e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   14c40:	687a      	ldr	r2, [r7, #4]
   14c42:	69fb      	ldr	r3, [r7, #28]
   14c44:	429a      	cmp	r2, r3
   14c46:	d819      	bhi.n	14c7c <long_division+0xc6>
   14c48:	687a      	ldr	r2, [r7, #4]
   14c4a:	69fb      	ldr	r3, [r7, #28]
   14c4c:	429a      	cmp	r2, r3
   14c4e:	d103      	bne.n	14c58 <long_division+0xa2>
   14c50:	683a      	ldr	r2, [r7, #0]
   14c52:	69bb      	ldr	r3, [r7, #24]
   14c54:	429a      	cmp	r2, r3
   14c56:	d811      	bhi.n	14c7c <long_division+0xc6>
			r = r - d;
   14c58:	69b9      	ldr	r1, [r7, #24]
   14c5a:	69fa      	ldr	r2, [r7, #28]
   14c5c:	683b      	ldr	r3, [r7, #0]
   14c5e:	687c      	ldr	r4, [r7, #4]
   14c60:	1ac9      	subs	r1, r1, r3
   14c62:	41a2      	sbcs	r2, r4
   14c64:	000b      	movs	r3, r1
   14c66:	0014      	movs	r4, r2
   14c68:	61bb      	str	r3, [r7, #24]
   14c6a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   14c6c:	6a3a      	ldr	r2, [r7, #32]
   14c6e:	693b      	ldr	r3, [r7, #16]
   14c70:	4313      	orrs	r3, r2
   14c72:	623b      	str	r3, [r7, #32]
   14c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14c76:	697b      	ldr	r3, [r7, #20]
   14c78:	4313      	orrs	r3, r2
   14c7a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   14c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c7e:	3b01      	subs	r3, #1
   14c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   14c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c84:	2b00      	cmp	r3, #0
   14c86:	daa8      	bge.n	14bda <long_division+0x24>
		}
	}

	return q;
   14c88:	6a3b      	ldr	r3, [r7, #32]
   14c8a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   14c8c:	0018      	movs	r0, r3
   14c8e:	0021      	movs	r1, r4
   14c90:	46bd      	mov	sp, r7
   14c92:	b00d      	add	sp, #52	; 0x34
   14c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014c96 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   14c96:	b580      	push	{r7, lr}
   14c98:	b086      	sub	sp, #24
   14c9a:	af00      	add	r7, sp, #0
   14c9c:	60f8      	str	r0, [r7, #12]
   14c9e:	60b9      	str	r1, [r7, #8]
   14ca0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   14ca2:	2316      	movs	r3, #22
   14ca4:	18fb      	adds	r3, r7, r3
   14ca6:	2200      	movs	r2, #0
   14ca8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   14caa:	68bb      	ldr	r3, [r7, #8]
   14cac:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   14cae:	68bb      	ldr	r3, [r7, #8]
   14cb0:	085a      	lsrs	r2, r3, #1
   14cb2:	68fb      	ldr	r3, [r7, #12]
   14cb4:	429a      	cmp	r2, r3
   14cb6:	d201      	bcs.n	14cbc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14cb8:	2340      	movs	r3, #64	; 0x40
   14cba:	e026      	b.n	14d0a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   14cbc:	68bb      	ldr	r3, [r7, #8]
   14cbe:	085b      	lsrs	r3, r3, #1
   14cc0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   14cc2:	e00a      	b.n	14cda <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   14cc4:	693a      	ldr	r2, [r7, #16]
   14cc6:	68fb      	ldr	r3, [r7, #12]
   14cc8:	1ad3      	subs	r3, r2, r3
   14cca:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   14ccc:	2316      	movs	r3, #22
   14cce:	18fb      	adds	r3, r7, r3
   14cd0:	881a      	ldrh	r2, [r3, #0]
   14cd2:	2316      	movs	r3, #22
   14cd4:	18fb      	adds	r3, r7, r3
   14cd6:	3201      	adds	r2, #1
   14cd8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   14cda:	693a      	ldr	r2, [r7, #16]
   14cdc:	68fb      	ldr	r3, [r7, #12]
   14cde:	429a      	cmp	r2, r3
   14ce0:	d2f0      	bcs.n	14cc4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   14ce2:	2316      	movs	r3, #22
   14ce4:	18fb      	adds	r3, r7, r3
   14ce6:	2216      	movs	r2, #22
   14ce8:	18ba      	adds	r2, r7, r2
   14cea:	8812      	ldrh	r2, [r2, #0]
   14cec:	3a01      	subs	r2, #1
   14cee:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   14cf0:	2316      	movs	r3, #22
   14cf2:	18fb      	adds	r3, r7, r3
   14cf4:	881b      	ldrh	r3, [r3, #0]
   14cf6:	2bff      	cmp	r3, #255	; 0xff
   14cf8:	d901      	bls.n	14cfe <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14cfa:	2340      	movs	r3, #64	; 0x40
   14cfc:	e005      	b.n	14d0a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   14cfe:	687b      	ldr	r3, [r7, #4]
   14d00:	2216      	movs	r2, #22
   14d02:	18ba      	adds	r2, r7, r2
   14d04:	8812      	ldrh	r2, [r2, #0]
   14d06:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   14d08:	2300      	movs	r3, #0
	}
}
   14d0a:	0018      	movs	r0, r3
   14d0c:	46bd      	mov	sp, r7
   14d0e:	b006      	add	sp, #24
   14d10:	bd80      	pop	{r7, pc}
	...

00014d14 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   14d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d16:	b0a1      	sub	sp, #132	; 0x84
   14d18:	af00      	add	r7, sp, #0
   14d1a:	64f8      	str	r0, [r7, #76]	; 0x4c
   14d1c:	64b9      	str	r1, [r7, #72]	; 0x48
   14d1e:	647a      	str	r2, [r7, #68]	; 0x44
   14d20:	2243      	movs	r2, #67	; 0x43
   14d22:	18ba      	adds	r2, r7, r2
   14d24:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   14d26:	2300      	movs	r3, #0
   14d28:	2400      	movs	r4, #0
   14d2a:	673b      	str	r3, [r7, #112]	; 0x70
   14d2c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   14d2e:	2300      	movs	r3, #0
   14d30:	2400      	movs	r4, #0
   14d32:	66bb      	str	r3, [r7, #104]	; 0x68
   14d34:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   14d36:	2300      	movs	r3, #0
   14d38:	2400      	movs	r4, #0
   14d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   14d3c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   14d3e:	2300      	movs	r3, #0
   14d40:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   14d42:	2358      	movs	r3, #88	; 0x58
   14d44:	2240      	movs	r2, #64	; 0x40
   14d46:	4694      	mov	ip, r2
   14d48:	44bc      	add	ip, r7
   14d4a:	4463      	add	r3, ip
   14d4c:	781a      	ldrb	r2, [r3, #0]
   14d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14d50:	435a      	muls	r2, r3
   14d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14d54:	429a      	cmp	r2, r3
   14d56:	d901      	bls.n	14d5c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14d58:	2340      	movs	r3, #64	; 0x40
   14d5a:	e0b3      	b.n	14ec4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   14d5c:	2343      	movs	r3, #67	; 0x43
   14d5e:	18fb      	adds	r3, r7, r3
   14d60:	781b      	ldrb	r3, [r3, #0]
   14d62:	2b00      	cmp	r3, #0
   14d64:	d13d      	bne.n	14de2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   14d66:	2358      	movs	r3, #88	; 0x58
   14d68:	2240      	movs	r2, #64	; 0x40
   14d6a:	4694      	mov	ip, r2
   14d6c:	44bc      	add	ip, r7
   14d6e:	4463      	add	r3, ip
   14d70:	781b      	ldrb	r3, [r3, #0]
   14d72:	b2db      	uxtb	r3, r3
   14d74:	613b      	str	r3, [r7, #16]
   14d76:	2300      	movs	r3, #0
   14d78:	617b      	str	r3, [r7, #20]
   14d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14d7c:	60bb      	str	r3, [r7, #8]
   14d7e:	2300      	movs	r3, #0
   14d80:	60fb      	str	r3, [r7, #12]
   14d82:	4c52      	ldr	r4, [pc, #328]	; (14ecc <_sercom_get_async_baud_val+0x1b8>)
   14d84:	68ba      	ldr	r2, [r7, #8]
   14d86:	68fb      	ldr	r3, [r7, #12]
   14d88:	6938      	ldr	r0, [r7, #16]
   14d8a:	6979      	ldr	r1, [r7, #20]
   14d8c:	47a0      	blx	r4
   14d8e:	0003      	movs	r3, r0
   14d90:	000c      	movs	r4, r1
   14d92:	001b      	movs	r3, r3
   14d94:	65fb      	str	r3, [r7, #92]	; 0x5c
   14d96:	2300      	movs	r3, #0
   14d98:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   14d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14d9c:	603b      	str	r3, [r7, #0]
   14d9e:	2300      	movs	r3, #0
   14da0:	607b      	str	r3, [r7, #4]
   14da2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   14da4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   14da6:	683a      	ldr	r2, [r7, #0]
   14da8:	687b      	ldr	r3, [r7, #4]
   14daa:	4c49      	ldr	r4, [pc, #292]	; (14ed0 <_sercom_get_async_baud_val+0x1bc>)
   14dac:	47a0      	blx	r4
   14dae:	0003      	movs	r3, r0
   14db0:	000c      	movs	r4, r1
   14db2:	673b      	str	r3, [r7, #112]	; 0x70
   14db4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   14db6:	2100      	movs	r1, #0
   14db8:	2201      	movs	r2, #1
   14dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14dbc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   14dbe:	1ac9      	subs	r1, r1, r3
   14dc0:	41a2      	sbcs	r2, r4
   14dc2:	000b      	movs	r3, r1
   14dc4:	0014      	movs	r4, r2
   14dc6:	66bb      	str	r3, [r7, #104]	; 0x68
   14dc8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   14dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14dcc:	0c1b      	lsrs	r3, r3, #16
   14dce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   14dd0:	0416      	lsls	r6, r2, #16
   14dd2:	431e      	orrs	r6, r3
   14dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14dd6:	041d      	lsls	r5, r3, #16
   14dd8:	0033      	movs	r3, r6
   14dda:	67bb      	str	r3, [r7, #120]	; 0x78
   14ddc:	2300      	movs	r3, #0
   14dde:	67fb      	str	r3, [r7, #124]	; 0x7c
   14de0:	e06a      	b.n	14eb8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   14de2:	2343      	movs	r3, #67	; 0x43
   14de4:	18fb      	adds	r3, r7, r3
   14de6:	781b      	ldrb	r3, [r3, #0]
   14de8:	2b01      	cmp	r3, #1
   14dea:	d165      	bne.n	14eb8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   14dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14dee:	633b      	str	r3, [r7, #48]	; 0x30
   14df0:	2300      	movs	r3, #0
   14df2:	637b      	str	r3, [r7, #52]	; 0x34
   14df4:	2358      	movs	r3, #88	; 0x58
   14df6:	2240      	movs	r2, #64	; 0x40
   14df8:	4694      	mov	ip, r2
   14dfa:	44bc      	add	ip, r7
   14dfc:	4463      	add	r3, ip
   14dfe:	781b      	ldrb	r3, [r3, #0]
   14e00:	b2db      	uxtb	r3, r3
   14e02:	62bb      	str	r3, [r7, #40]	; 0x28
   14e04:	2300      	movs	r3, #0
   14e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   14e08:	4c30      	ldr	r4, [pc, #192]	; (14ecc <_sercom_get_async_baud_val+0x1b8>)
   14e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14e10:	6b79      	ldr	r1, [r7, #52]	; 0x34
   14e12:	47a0      	blx	r4
   14e14:	0003      	movs	r3, r0
   14e16:	000c      	movs	r4, r1
   14e18:	65bb      	str	r3, [r7, #88]	; 0x58
   14e1a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   14e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14e1e:	623b      	str	r3, [r7, #32]
   14e20:	2300      	movs	r3, #0
   14e22:	627b      	str	r3, [r7, #36]	; 0x24
   14e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14e26:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   14e28:	001a      	movs	r2, r3
   14e2a:	0023      	movs	r3, r4
   14e2c:	6a38      	ldr	r0, [r7, #32]
   14e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14e30:	4c27      	ldr	r4, [pc, #156]	; (14ed0 <_sercom_get_async_baud_val+0x1bc>)
   14e32:	47a0      	blx	r4
   14e34:	0003      	movs	r3, r0
   14e36:	000c      	movs	r4, r1
   14e38:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   14e3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   14e3c:	2380      	movs	r3, #128	; 0x80
   14e3e:	019b      	lsls	r3, r3, #6
   14e40:	429a      	cmp	r2, r3
   14e42:	d901      	bls.n	14e48 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14e44:	2340      	movs	r3, #64	; 0x40
   14e46:	e03d      	b.n	14ec4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   14e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14e4a:	61bb      	str	r3, [r7, #24]
   14e4c:	2300      	movs	r3, #0
   14e4e:	61fb      	str	r3, [r7, #28]
   14e50:	69b9      	ldr	r1, [r7, #24]
   14e52:	69fa      	ldr	r2, [r7, #28]
   14e54:	000b      	movs	r3, r1
   14e56:	0f5b      	lsrs	r3, r3, #29
   14e58:	0010      	movs	r0, r2
   14e5a:	00c0      	lsls	r0, r0, #3
   14e5c:	63f8      	str	r0, [r7, #60]	; 0x3c
   14e5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14e60:	4318      	orrs	r0, r3
   14e62:	63f8      	str	r0, [r7, #60]	; 0x3c
   14e64:	000b      	movs	r3, r1
   14e66:	00db      	lsls	r3, r3, #3
   14e68:	63bb      	str	r3, [r7, #56]	; 0x38
   14e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14e6c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   14e6e:	001a      	movs	r2, r3
   14e70:	0023      	movs	r3, r4
   14e72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   14e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   14e76:	4c16      	ldr	r4, [pc, #88]	; (14ed0 <_sercom_get_async_baud_val+0x1bc>)
   14e78:	47a0      	blx	r4
   14e7a:	0003      	movs	r3, r0
   14e7c:	000c      	movs	r4, r1
   14e7e:	65bb      	str	r3, [r7, #88]	; 0x58
   14e80:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   14e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14e84:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   14e86:	b2d9      	uxtb	r1, r3
   14e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14e8a:	b2db      	uxtb	r3, r3
   14e8c:	00db      	lsls	r3, r3, #3
   14e8e:	b2da      	uxtb	r2, r3
   14e90:	2317      	movs	r3, #23
   14e92:	2040      	movs	r0, #64	; 0x40
   14e94:	4684      	mov	ip, r0
   14e96:	44bc      	add	ip, r7
   14e98:	4463      	add	r3, ip
   14e9a:	1a8a      	subs	r2, r1, r2
   14e9c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   14e9e:	2317      	movs	r3, #23
   14ea0:	2240      	movs	r2, #64	; 0x40
   14ea2:	4694      	mov	ip, r2
   14ea4:	44bc      	add	ip, r7
   14ea6:	4463      	add	r3, ip
   14ea8:	781b      	ldrb	r3, [r3, #0]
   14eaa:	035b      	lsls	r3, r3, #13
   14eac:	001a      	movs	r2, r3
   14eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14eb0:	4313      	orrs	r3, r2
   14eb2:	67bb      	str	r3, [r7, #120]	; 0x78
   14eb4:	2300      	movs	r3, #0
   14eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   14eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14eba:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   14ebc:	b29a      	uxth	r2, r3
   14ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14ec0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   14ec2:	2300      	movs	r3, #0
}
   14ec4:	0018      	movs	r0, r3
   14ec6:	46bd      	mov	sp, r7
   14ec8:	b021      	add	sp, #132	; 0x84
   14eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ecc:	0002075d 	.word	0x0002075d
   14ed0:	00014bb7 	.word	0x00014bb7

00014ed4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   14ed4:	b580      	push	{r7, lr}
   14ed6:	b084      	sub	sp, #16
   14ed8:	af00      	add	r7, sp, #0
   14eda:	0002      	movs	r2, r0
   14edc:	1dfb      	adds	r3, r7, #7
   14ede:	701a      	strb	r2, [r3, #0]
   14ee0:	1dbb      	adds	r3, r7, #6
   14ee2:	1c0a      	adds	r2, r1, #0
   14ee4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   14ee6:	4b1a      	ldr	r3, [pc, #104]	; (14f50 <sercom_set_gclk_generator+0x7c>)
   14ee8:	781b      	ldrb	r3, [r3, #0]
   14eea:	2201      	movs	r2, #1
   14eec:	4053      	eors	r3, r2
   14eee:	b2db      	uxtb	r3, r3
   14ef0:	2b00      	cmp	r3, #0
   14ef2:	d103      	bne.n	14efc <sercom_set_gclk_generator+0x28>
   14ef4:	1dbb      	adds	r3, r7, #6
   14ef6:	781b      	ldrb	r3, [r3, #0]
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d01b      	beq.n	14f34 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14efc:	230c      	movs	r3, #12
   14efe:	18fb      	adds	r3, r7, r3
   14f00:	0018      	movs	r0, r3
   14f02:	4b14      	ldr	r3, [pc, #80]	; (14f54 <sercom_set_gclk_generator+0x80>)
   14f04:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   14f06:	230c      	movs	r3, #12
   14f08:	18fb      	adds	r3, r7, r3
   14f0a:	1dfa      	adds	r2, r7, #7
   14f0c:	7812      	ldrb	r2, [r2, #0]
   14f0e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   14f10:	230c      	movs	r3, #12
   14f12:	18fb      	adds	r3, r7, r3
   14f14:	0019      	movs	r1, r3
   14f16:	2013      	movs	r0, #19
   14f18:	4b0f      	ldr	r3, [pc, #60]	; (14f58 <sercom_set_gclk_generator+0x84>)
   14f1a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   14f1c:	2013      	movs	r0, #19
   14f1e:	4b0f      	ldr	r3, [pc, #60]	; (14f5c <sercom_set_gclk_generator+0x88>)
   14f20:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   14f22:	4b0b      	ldr	r3, [pc, #44]	; (14f50 <sercom_set_gclk_generator+0x7c>)
   14f24:	1dfa      	adds	r2, r7, #7
   14f26:	7812      	ldrb	r2, [r2, #0]
   14f28:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   14f2a:	4b09      	ldr	r3, [pc, #36]	; (14f50 <sercom_set_gclk_generator+0x7c>)
   14f2c:	2201      	movs	r2, #1
   14f2e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   14f30:	2300      	movs	r3, #0
   14f32:	e008      	b.n	14f46 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   14f34:	4b06      	ldr	r3, [pc, #24]	; (14f50 <sercom_set_gclk_generator+0x7c>)
   14f36:	785b      	ldrb	r3, [r3, #1]
   14f38:	1dfa      	adds	r2, r7, #7
   14f3a:	7812      	ldrb	r2, [r2, #0]
   14f3c:	429a      	cmp	r2, r3
   14f3e:	d101      	bne.n	14f44 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   14f40:	2300      	movs	r3, #0
   14f42:	e000      	b.n	14f46 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   14f44:	231d      	movs	r3, #29
}
   14f46:	0018      	movs	r0, r3
   14f48:	46bd      	mov	sp, r7
   14f4a:	b004      	add	sp, #16
   14f4c:	bd80      	pop	{r7, pc}
   14f4e:	46c0      	nop			; (mov r8, r8)
   14f50:	20004350 	.word	0x20004350
   14f54:	00014ba1 	.word	0x00014ba1
   14f58:	000179ad 	.word	0x000179ad
   14f5c:	000179f1 	.word	0x000179f1

00014f60 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   14f60:	b580      	push	{r7, lr}
   14f62:	b082      	sub	sp, #8
   14f64:	af00      	add	r7, sp, #0
   14f66:	6078      	str	r0, [r7, #4]
   14f68:	000a      	movs	r2, r1
   14f6a:	1cfb      	adds	r3, r7, #3
   14f6c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   14f6e:	687b      	ldr	r3, [r7, #4]
   14f70:	4a4d      	ldr	r2, [pc, #308]	; (150a8 <_sercom_get_default_pad+0x148>)
   14f72:	4293      	cmp	r3, r2
   14f74:	d03f      	beq.n	14ff6 <_sercom_get_default_pad+0x96>
   14f76:	4a4c      	ldr	r2, [pc, #304]	; (150a8 <_sercom_get_default_pad+0x148>)
   14f78:	4293      	cmp	r3, r2
   14f7a:	d806      	bhi.n	14f8a <_sercom_get_default_pad+0x2a>
   14f7c:	4a4b      	ldr	r2, [pc, #300]	; (150ac <_sercom_get_default_pad+0x14c>)
   14f7e:	4293      	cmp	r3, r2
   14f80:	d00f      	beq.n	14fa2 <_sercom_get_default_pad+0x42>
   14f82:	4a4b      	ldr	r2, [pc, #300]	; (150b0 <_sercom_get_default_pad+0x150>)
   14f84:	4293      	cmp	r3, r2
   14f86:	d021      	beq.n	14fcc <_sercom_get_default_pad+0x6c>
   14f88:	e089      	b.n	1509e <_sercom_get_default_pad+0x13e>
   14f8a:	4a4a      	ldr	r2, [pc, #296]	; (150b4 <_sercom_get_default_pad+0x154>)
   14f8c:	4293      	cmp	r3, r2
   14f8e:	d100      	bne.n	14f92 <_sercom_get_default_pad+0x32>
   14f90:	e05b      	b.n	1504a <_sercom_get_default_pad+0xea>
   14f92:	4a49      	ldr	r2, [pc, #292]	; (150b8 <_sercom_get_default_pad+0x158>)
   14f94:	4293      	cmp	r3, r2
   14f96:	d100      	bne.n	14f9a <_sercom_get_default_pad+0x3a>
   14f98:	e06c      	b.n	15074 <_sercom_get_default_pad+0x114>
   14f9a:	4a48      	ldr	r2, [pc, #288]	; (150bc <_sercom_get_default_pad+0x15c>)
   14f9c:	4293      	cmp	r3, r2
   14f9e:	d03f      	beq.n	15020 <_sercom_get_default_pad+0xc0>
   14fa0:	e07d      	b.n	1509e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   14fa2:	1cfb      	adds	r3, r7, #3
   14fa4:	781b      	ldrb	r3, [r3, #0]
   14fa6:	2b01      	cmp	r3, #1
   14fa8:	d00a      	beq.n	14fc0 <_sercom_get_default_pad+0x60>
   14faa:	dc02      	bgt.n	14fb2 <_sercom_get_default_pad+0x52>
   14fac:	2b00      	cmp	r3, #0
   14fae:	d005      	beq.n	14fbc <_sercom_get_default_pad+0x5c>
   14fb0:	e075      	b.n	1509e <_sercom_get_default_pad+0x13e>
   14fb2:	2b02      	cmp	r3, #2
   14fb4:	d006      	beq.n	14fc4 <_sercom_get_default_pad+0x64>
   14fb6:	2b03      	cmp	r3, #3
   14fb8:	d006      	beq.n	14fc8 <_sercom_get_default_pad+0x68>
   14fba:	e070      	b.n	1509e <_sercom_get_default_pad+0x13e>
   14fbc:	4b40      	ldr	r3, [pc, #256]	; (150c0 <_sercom_get_default_pad+0x160>)
   14fbe:	e06f      	b.n	150a0 <_sercom_get_default_pad+0x140>
   14fc0:	4b40      	ldr	r3, [pc, #256]	; (150c4 <_sercom_get_default_pad+0x164>)
   14fc2:	e06d      	b.n	150a0 <_sercom_get_default_pad+0x140>
   14fc4:	4b40      	ldr	r3, [pc, #256]	; (150c8 <_sercom_get_default_pad+0x168>)
   14fc6:	e06b      	b.n	150a0 <_sercom_get_default_pad+0x140>
   14fc8:	4b40      	ldr	r3, [pc, #256]	; (150cc <_sercom_get_default_pad+0x16c>)
   14fca:	e069      	b.n	150a0 <_sercom_get_default_pad+0x140>
   14fcc:	1cfb      	adds	r3, r7, #3
   14fce:	781b      	ldrb	r3, [r3, #0]
   14fd0:	2b01      	cmp	r3, #1
   14fd2:	d00a      	beq.n	14fea <_sercom_get_default_pad+0x8a>
   14fd4:	dc02      	bgt.n	14fdc <_sercom_get_default_pad+0x7c>
   14fd6:	2b00      	cmp	r3, #0
   14fd8:	d005      	beq.n	14fe6 <_sercom_get_default_pad+0x86>
   14fda:	e060      	b.n	1509e <_sercom_get_default_pad+0x13e>
   14fdc:	2b02      	cmp	r3, #2
   14fde:	d006      	beq.n	14fee <_sercom_get_default_pad+0x8e>
   14fe0:	2b03      	cmp	r3, #3
   14fe2:	d006      	beq.n	14ff2 <_sercom_get_default_pad+0x92>
   14fe4:	e05b      	b.n	1509e <_sercom_get_default_pad+0x13e>
   14fe6:	2303      	movs	r3, #3
   14fe8:	e05a      	b.n	150a0 <_sercom_get_default_pad+0x140>
   14fea:	4b39      	ldr	r3, [pc, #228]	; (150d0 <_sercom_get_default_pad+0x170>)
   14fec:	e058      	b.n	150a0 <_sercom_get_default_pad+0x140>
   14fee:	4b39      	ldr	r3, [pc, #228]	; (150d4 <_sercom_get_default_pad+0x174>)
   14ff0:	e056      	b.n	150a0 <_sercom_get_default_pad+0x140>
   14ff2:	4b39      	ldr	r3, [pc, #228]	; (150d8 <_sercom_get_default_pad+0x178>)
   14ff4:	e054      	b.n	150a0 <_sercom_get_default_pad+0x140>
   14ff6:	1cfb      	adds	r3, r7, #3
   14ff8:	781b      	ldrb	r3, [r3, #0]
   14ffa:	2b01      	cmp	r3, #1
   14ffc:	d00a      	beq.n	15014 <_sercom_get_default_pad+0xb4>
   14ffe:	dc02      	bgt.n	15006 <_sercom_get_default_pad+0xa6>
   15000:	2b00      	cmp	r3, #0
   15002:	d005      	beq.n	15010 <_sercom_get_default_pad+0xb0>
   15004:	e04b      	b.n	1509e <_sercom_get_default_pad+0x13e>
   15006:	2b02      	cmp	r3, #2
   15008:	d006      	beq.n	15018 <_sercom_get_default_pad+0xb8>
   1500a:	2b03      	cmp	r3, #3
   1500c:	d006      	beq.n	1501c <_sercom_get_default_pad+0xbc>
   1500e:	e046      	b.n	1509e <_sercom_get_default_pad+0x13e>
   15010:	4b32      	ldr	r3, [pc, #200]	; (150dc <_sercom_get_default_pad+0x17c>)
   15012:	e045      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15014:	4b32      	ldr	r3, [pc, #200]	; (150e0 <_sercom_get_default_pad+0x180>)
   15016:	e043      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15018:	4b32      	ldr	r3, [pc, #200]	; (150e4 <_sercom_get_default_pad+0x184>)
   1501a:	e041      	b.n	150a0 <_sercom_get_default_pad+0x140>
   1501c:	4b32      	ldr	r3, [pc, #200]	; (150e8 <_sercom_get_default_pad+0x188>)
   1501e:	e03f      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15020:	1cfb      	adds	r3, r7, #3
   15022:	781b      	ldrb	r3, [r3, #0]
   15024:	2b01      	cmp	r3, #1
   15026:	d00a      	beq.n	1503e <_sercom_get_default_pad+0xde>
   15028:	dc02      	bgt.n	15030 <_sercom_get_default_pad+0xd0>
   1502a:	2b00      	cmp	r3, #0
   1502c:	d005      	beq.n	1503a <_sercom_get_default_pad+0xda>
   1502e:	e036      	b.n	1509e <_sercom_get_default_pad+0x13e>
   15030:	2b02      	cmp	r3, #2
   15032:	d006      	beq.n	15042 <_sercom_get_default_pad+0xe2>
   15034:	2b03      	cmp	r3, #3
   15036:	d006      	beq.n	15046 <_sercom_get_default_pad+0xe6>
   15038:	e031      	b.n	1509e <_sercom_get_default_pad+0x13e>
   1503a:	4b2c      	ldr	r3, [pc, #176]	; (150ec <_sercom_get_default_pad+0x18c>)
   1503c:	e030      	b.n	150a0 <_sercom_get_default_pad+0x140>
   1503e:	4b2c      	ldr	r3, [pc, #176]	; (150f0 <_sercom_get_default_pad+0x190>)
   15040:	e02e      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15042:	4b2c      	ldr	r3, [pc, #176]	; (150f4 <_sercom_get_default_pad+0x194>)
   15044:	e02c      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15046:	4b2c      	ldr	r3, [pc, #176]	; (150f8 <_sercom_get_default_pad+0x198>)
   15048:	e02a      	b.n	150a0 <_sercom_get_default_pad+0x140>
   1504a:	1cfb      	adds	r3, r7, #3
   1504c:	781b      	ldrb	r3, [r3, #0]
   1504e:	2b01      	cmp	r3, #1
   15050:	d00a      	beq.n	15068 <_sercom_get_default_pad+0x108>
   15052:	dc02      	bgt.n	1505a <_sercom_get_default_pad+0xfa>
   15054:	2b00      	cmp	r3, #0
   15056:	d005      	beq.n	15064 <_sercom_get_default_pad+0x104>
   15058:	e021      	b.n	1509e <_sercom_get_default_pad+0x13e>
   1505a:	2b02      	cmp	r3, #2
   1505c:	d006      	beq.n	1506c <_sercom_get_default_pad+0x10c>
   1505e:	2b03      	cmp	r3, #3
   15060:	d006      	beq.n	15070 <_sercom_get_default_pad+0x110>
   15062:	e01c      	b.n	1509e <_sercom_get_default_pad+0x13e>
   15064:	4b25      	ldr	r3, [pc, #148]	; (150fc <_sercom_get_default_pad+0x19c>)
   15066:	e01b      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15068:	4b25      	ldr	r3, [pc, #148]	; (15100 <_sercom_get_default_pad+0x1a0>)
   1506a:	e019      	b.n	150a0 <_sercom_get_default_pad+0x140>
   1506c:	4b25      	ldr	r3, [pc, #148]	; (15104 <_sercom_get_default_pad+0x1a4>)
   1506e:	e017      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15070:	4b25      	ldr	r3, [pc, #148]	; (15108 <_sercom_get_default_pad+0x1a8>)
   15072:	e015      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15074:	1cfb      	adds	r3, r7, #3
   15076:	781b      	ldrb	r3, [r3, #0]
   15078:	2b01      	cmp	r3, #1
   1507a:	d00a      	beq.n	15092 <_sercom_get_default_pad+0x132>
   1507c:	dc02      	bgt.n	15084 <_sercom_get_default_pad+0x124>
   1507e:	2b00      	cmp	r3, #0
   15080:	d005      	beq.n	1508e <_sercom_get_default_pad+0x12e>
   15082:	e00c      	b.n	1509e <_sercom_get_default_pad+0x13e>
   15084:	2b02      	cmp	r3, #2
   15086:	d006      	beq.n	15096 <_sercom_get_default_pad+0x136>
   15088:	2b03      	cmp	r3, #3
   1508a:	d006      	beq.n	1509a <_sercom_get_default_pad+0x13a>
   1508c:	e007      	b.n	1509e <_sercom_get_default_pad+0x13e>
   1508e:	4b1f      	ldr	r3, [pc, #124]	; (1510c <_sercom_get_default_pad+0x1ac>)
   15090:	e006      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15092:	4b1f      	ldr	r3, [pc, #124]	; (15110 <_sercom_get_default_pad+0x1b0>)
   15094:	e004      	b.n	150a0 <_sercom_get_default_pad+0x140>
   15096:	4b1f      	ldr	r3, [pc, #124]	; (15114 <_sercom_get_default_pad+0x1b4>)
   15098:	e002      	b.n	150a0 <_sercom_get_default_pad+0x140>
   1509a:	4b1f      	ldr	r3, [pc, #124]	; (15118 <_sercom_get_default_pad+0x1b8>)
   1509c:	e000      	b.n	150a0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1509e:	2300      	movs	r3, #0
}
   150a0:	0018      	movs	r0, r3
   150a2:	46bd      	mov	sp, r7
   150a4:	b002      	add	sp, #8
   150a6:	bd80      	pop	{r7, pc}
   150a8:	42001000 	.word	0x42001000
   150ac:	42000800 	.word	0x42000800
   150b0:	42000c00 	.word	0x42000c00
   150b4:	42001800 	.word	0x42001800
   150b8:	42001c00 	.word	0x42001c00
   150bc:	42001400 	.word	0x42001400
   150c0:	00040003 	.word	0x00040003
   150c4:	00050003 	.word	0x00050003
   150c8:	00060003 	.word	0x00060003
   150cc:	00070003 	.word	0x00070003
   150d0:	00010003 	.word	0x00010003
   150d4:	001e0003 	.word	0x001e0003
   150d8:	001f0003 	.word	0x001f0003
   150dc:	00080003 	.word	0x00080003
   150e0:	00090003 	.word	0x00090003
   150e4:	000a0003 	.word	0x000a0003
   150e8:	000b0003 	.word	0x000b0003
   150ec:	00100003 	.word	0x00100003
   150f0:	00110003 	.word	0x00110003
   150f4:	00120003 	.word	0x00120003
   150f8:	00130003 	.word	0x00130003
   150fc:	000c0003 	.word	0x000c0003
   15100:	000d0003 	.word	0x000d0003
   15104:	000e0003 	.word	0x000e0003
   15108:	000f0003 	.word	0x000f0003
   1510c:	00160003 	.word	0x00160003
   15110:	00170003 	.word	0x00170003
   15114:	00180003 	.word	0x00180003
   15118:	00190003 	.word	0x00190003

0001511c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1511c:	b590      	push	{r4, r7, lr}
   1511e:	b08b      	sub	sp, #44	; 0x2c
   15120:	af00      	add	r7, sp, #0
   15122:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   15124:	230c      	movs	r3, #12
   15126:	18fb      	adds	r3, r7, r3
   15128:	4a0f      	ldr	r2, [pc, #60]	; (15168 <_sercom_get_sercom_inst_index+0x4c>)
   1512a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1512c:	c313      	stmia	r3!, {r0, r1, r4}
   1512e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15130:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   15132:	2300      	movs	r3, #0
   15134:	627b      	str	r3, [r7, #36]	; 0x24
   15136:	e00e      	b.n	15156 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   15138:	230c      	movs	r3, #12
   1513a:	18fb      	adds	r3, r7, r3
   1513c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1513e:	0092      	lsls	r2, r2, #2
   15140:	58d3      	ldr	r3, [r2, r3]
   15142:	001a      	movs	r2, r3
   15144:	687b      	ldr	r3, [r7, #4]
   15146:	429a      	cmp	r2, r3
   15148:	d102      	bne.n	15150 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1514c:	b2db      	uxtb	r3, r3
   1514e:	e006      	b.n	1515e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   15150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15152:	3301      	adds	r3, #1
   15154:	627b      	str	r3, [r7, #36]	; 0x24
   15156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15158:	2b05      	cmp	r3, #5
   1515a:	d9ed      	bls.n	15138 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1515c:	2300      	movs	r3, #0
}
   1515e:	0018      	movs	r0, r3
   15160:	46bd      	mov	sp, r7
   15162:	b00b      	add	sp, #44	; 0x2c
   15164:	bd90      	pop	{r4, r7, pc}
   15166:	46c0      	nop			; (mov r8, r8)
   15168:	0002827c 	.word	0x0002827c

0001516c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   1516c:	b580      	push	{r7, lr}
   1516e:	b082      	sub	sp, #8
   15170:	af00      	add	r7, sp, #0
   15172:	0002      	movs	r2, r0
   15174:	1dfb      	adds	r3, r7, #7
   15176:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   15178:	46c0      	nop			; (mov r8, r8)
   1517a:	46bd      	mov	sp, r7
   1517c:	b002      	add	sp, #8
   1517e:	bd80      	pop	{r7, pc}

00015180 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   15180:	b580      	push	{r7, lr}
   15182:	b084      	sub	sp, #16
   15184:	af00      	add	r7, sp, #0
   15186:	0002      	movs	r2, r0
   15188:	6039      	str	r1, [r7, #0]
   1518a:	1dfb      	adds	r3, r7, #7
   1518c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1518e:	4b13      	ldr	r3, [pc, #76]	; (151dc <_sercom_set_handler+0x5c>)
   15190:	781b      	ldrb	r3, [r3, #0]
   15192:	2201      	movs	r2, #1
   15194:	4053      	eors	r3, r2
   15196:	b2db      	uxtb	r3, r3
   15198:	2b00      	cmp	r3, #0
   1519a:	d015      	beq.n	151c8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1519c:	2300      	movs	r3, #0
   1519e:	60fb      	str	r3, [r7, #12]
   151a0:	e00c      	b.n	151bc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   151a2:	4b0f      	ldr	r3, [pc, #60]	; (151e0 <_sercom_set_handler+0x60>)
   151a4:	68fa      	ldr	r2, [r7, #12]
   151a6:	0092      	lsls	r2, r2, #2
   151a8:	490e      	ldr	r1, [pc, #56]	; (151e4 <_sercom_set_handler+0x64>)
   151aa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   151ac:	4b0e      	ldr	r3, [pc, #56]	; (151e8 <_sercom_set_handler+0x68>)
   151ae:	68fa      	ldr	r2, [r7, #12]
   151b0:	0092      	lsls	r2, r2, #2
   151b2:	2100      	movs	r1, #0
   151b4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   151b6:	68fb      	ldr	r3, [r7, #12]
   151b8:	3301      	adds	r3, #1
   151ba:	60fb      	str	r3, [r7, #12]
   151bc:	68fb      	ldr	r3, [r7, #12]
   151be:	2b05      	cmp	r3, #5
   151c0:	d9ef      	bls.n	151a2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   151c2:	4b06      	ldr	r3, [pc, #24]	; (151dc <_sercom_set_handler+0x5c>)
   151c4:	2201      	movs	r2, #1
   151c6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   151c8:	1dfb      	adds	r3, r7, #7
   151ca:	781a      	ldrb	r2, [r3, #0]
   151cc:	4b04      	ldr	r3, [pc, #16]	; (151e0 <_sercom_set_handler+0x60>)
   151ce:	0092      	lsls	r2, r2, #2
   151d0:	6839      	ldr	r1, [r7, #0]
   151d2:	50d1      	str	r1, [r2, r3]
}
   151d4:	46c0      	nop			; (mov r8, r8)
   151d6:	46bd      	mov	sp, r7
   151d8:	b004      	add	sp, #16
   151da:	bd80      	pop	{r7, pc}
   151dc:	20004352 	.word	0x20004352
   151e0:	20004354 	.word	0x20004354
   151e4:	0001516d 	.word	0x0001516d
   151e8:	20005ce8 	.word	0x20005ce8

000151ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   151ec:	b590      	push	{r4, r7, lr}
   151ee:	b085      	sub	sp, #20
   151f0:	af00      	add	r7, sp, #0
   151f2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   151f4:	2308      	movs	r3, #8
   151f6:	18fb      	adds	r3, r7, r3
   151f8:	4a0b      	ldr	r2, [pc, #44]	; (15228 <_sercom_get_interrupt_vector+0x3c>)
   151fa:	6811      	ldr	r1, [r2, #0]
   151fc:	6019      	str	r1, [r3, #0]
   151fe:	8892      	ldrh	r2, [r2, #4]
   15200:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   15202:	230f      	movs	r3, #15
   15204:	18fc      	adds	r4, r7, r3
   15206:	687b      	ldr	r3, [r7, #4]
   15208:	0018      	movs	r0, r3
   1520a:	4b08      	ldr	r3, [pc, #32]	; (1522c <_sercom_get_interrupt_vector+0x40>)
   1520c:	4798      	blx	r3
   1520e:	0003      	movs	r3, r0
   15210:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   15212:	230f      	movs	r3, #15
   15214:	18fb      	adds	r3, r7, r3
   15216:	781b      	ldrb	r3, [r3, #0]
   15218:	2208      	movs	r2, #8
   1521a:	18ba      	adds	r2, r7, r2
   1521c:	5cd3      	ldrb	r3, [r2, r3]
   1521e:	b25b      	sxtb	r3, r3
}
   15220:	0018      	movs	r0, r3
   15222:	46bd      	mov	sp, r7
   15224:	b005      	add	sp, #20
   15226:	bd90      	pop	{r4, r7, pc}
   15228:	00028294 	.word	0x00028294
   1522c:	0001511d 	.word	0x0001511d

00015230 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   15230:	b580      	push	{r7, lr}
   15232:	af00      	add	r7, sp, #0
   15234:	4b03      	ldr	r3, [pc, #12]	; (15244 <SERCOM0_Handler+0x14>)
   15236:	681b      	ldr	r3, [r3, #0]
   15238:	2000      	movs	r0, #0
   1523a:	4798      	blx	r3
   1523c:	46c0      	nop			; (mov r8, r8)
   1523e:	46bd      	mov	sp, r7
   15240:	bd80      	pop	{r7, pc}
   15242:	46c0      	nop			; (mov r8, r8)
   15244:	20004354 	.word	0x20004354

00015248 <SERCOM1_Handler>:
   15248:	b580      	push	{r7, lr}
   1524a:	af00      	add	r7, sp, #0
   1524c:	4b03      	ldr	r3, [pc, #12]	; (1525c <SERCOM1_Handler+0x14>)
   1524e:	685b      	ldr	r3, [r3, #4]
   15250:	2001      	movs	r0, #1
   15252:	4798      	blx	r3
   15254:	46c0      	nop			; (mov r8, r8)
   15256:	46bd      	mov	sp, r7
   15258:	bd80      	pop	{r7, pc}
   1525a:	46c0      	nop			; (mov r8, r8)
   1525c:	20004354 	.word	0x20004354

00015260 <SERCOM2_Handler>:
   15260:	b580      	push	{r7, lr}
   15262:	af00      	add	r7, sp, #0
   15264:	4b03      	ldr	r3, [pc, #12]	; (15274 <SERCOM2_Handler+0x14>)
   15266:	689b      	ldr	r3, [r3, #8]
   15268:	2002      	movs	r0, #2
   1526a:	4798      	blx	r3
   1526c:	46c0      	nop			; (mov r8, r8)
   1526e:	46bd      	mov	sp, r7
   15270:	bd80      	pop	{r7, pc}
   15272:	46c0      	nop			; (mov r8, r8)
   15274:	20004354 	.word	0x20004354

00015278 <SERCOM3_Handler>:
   15278:	b580      	push	{r7, lr}
   1527a:	af00      	add	r7, sp, #0
   1527c:	4b03      	ldr	r3, [pc, #12]	; (1528c <SERCOM3_Handler+0x14>)
   1527e:	68db      	ldr	r3, [r3, #12]
   15280:	2003      	movs	r0, #3
   15282:	4798      	blx	r3
   15284:	46c0      	nop			; (mov r8, r8)
   15286:	46bd      	mov	sp, r7
   15288:	bd80      	pop	{r7, pc}
   1528a:	46c0      	nop			; (mov r8, r8)
   1528c:	20004354 	.word	0x20004354

00015290 <SERCOM4_Handler>:
   15290:	b580      	push	{r7, lr}
   15292:	af00      	add	r7, sp, #0
   15294:	4b03      	ldr	r3, [pc, #12]	; (152a4 <SERCOM4_Handler+0x14>)
   15296:	691b      	ldr	r3, [r3, #16]
   15298:	2004      	movs	r0, #4
   1529a:	4798      	blx	r3
   1529c:	46c0      	nop			; (mov r8, r8)
   1529e:	46bd      	mov	sp, r7
   152a0:	bd80      	pop	{r7, pc}
   152a2:	46c0      	nop			; (mov r8, r8)
   152a4:	20004354 	.word	0x20004354

000152a8 <SERCOM5_Handler>:
   152a8:	b580      	push	{r7, lr}
   152aa:	af00      	add	r7, sp, #0
   152ac:	4b03      	ldr	r3, [pc, #12]	; (152bc <SERCOM5_Handler+0x14>)
   152ae:	695b      	ldr	r3, [r3, #20]
   152b0:	2005      	movs	r0, #5
   152b2:	4798      	blx	r3
   152b4:	46c0      	nop			; (mov r8, r8)
   152b6:	46bd      	mov	sp, r7
   152b8:	bd80      	pop	{r7, pc}
   152ba:	46c0      	nop			; (mov r8, r8)
   152bc:	20004354 	.word	0x20004354

000152c0 <system_pinmux_get_config_defaults>:
{
   152c0:	b580      	push	{r7, lr}
   152c2:	b082      	sub	sp, #8
   152c4:	af00      	add	r7, sp, #0
   152c6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   152c8:	687b      	ldr	r3, [r7, #4]
   152ca:	2280      	movs	r2, #128	; 0x80
   152cc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   152ce:	687b      	ldr	r3, [r7, #4]
   152d0:	2200      	movs	r2, #0
   152d2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   152d4:	687b      	ldr	r3, [r7, #4]
   152d6:	2201      	movs	r2, #1
   152d8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   152da:	687b      	ldr	r3, [r7, #4]
   152dc:	2200      	movs	r2, #0
   152de:	70da      	strb	r2, [r3, #3]
}
   152e0:	46c0      	nop			; (mov r8, r8)
   152e2:	46bd      	mov	sp, r7
   152e4:	b002      	add	sp, #8
   152e6:	bd80      	pop	{r7, pc}

000152e8 <system_pinmux_get_group_from_gpio_pin>:
{
   152e8:	b580      	push	{r7, lr}
   152ea:	b084      	sub	sp, #16
   152ec:	af00      	add	r7, sp, #0
   152ee:	0002      	movs	r2, r0
   152f0:	1dfb      	adds	r3, r7, #7
   152f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   152f4:	230f      	movs	r3, #15
   152f6:	18fb      	adds	r3, r7, r3
   152f8:	1dfa      	adds	r2, r7, #7
   152fa:	7812      	ldrb	r2, [r2, #0]
   152fc:	09d2      	lsrs	r2, r2, #7
   152fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15300:	230e      	movs	r3, #14
   15302:	18fb      	adds	r3, r7, r3
   15304:	1dfa      	adds	r2, r7, #7
   15306:	7812      	ldrb	r2, [r2, #0]
   15308:	0952      	lsrs	r2, r2, #5
   1530a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1530c:	4b0d      	ldr	r3, [pc, #52]	; (15344 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1530e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   15310:	230f      	movs	r3, #15
   15312:	18fb      	adds	r3, r7, r3
   15314:	781b      	ldrb	r3, [r3, #0]
   15316:	2b00      	cmp	r3, #0
   15318:	d10f      	bne.n	1533a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1531a:	230f      	movs	r3, #15
   1531c:	18fb      	adds	r3, r7, r3
   1531e:	781b      	ldrb	r3, [r3, #0]
   15320:	009b      	lsls	r3, r3, #2
   15322:	2210      	movs	r2, #16
   15324:	4694      	mov	ip, r2
   15326:	44bc      	add	ip, r7
   15328:	4463      	add	r3, ip
   1532a:	3b08      	subs	r3, #8
   1532c:	681a      	ldr	r2, [r3, #0]
   1532e:	230e      	movs	r3, #14
   15330:	18fb      	adds	r3, r7, r3
   15332:	781b      	ldrb	r3, [r3, #0]
   15334:	01db      	lsls	r3, r3, #7
   15336:	18d3      	adds	r3, r2, r3
   15338:	e000      	b.n	1533c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1533a:	2300      	movs	r3, #0
}
   1533c:	0018      	movs	r0, r3
   1533e:	46bd      	mov	sp, r7
   15340:	b004      	add	sp, #16
   15342:	bd80      	pop	{r7, pc}
   15344:	41004400 	.word	0x41004400

00015348 <port_get_group_from_gpio_pin>:
{
   15348:	b580      	push	{r7, lr}
   1534a:	b082      	sub	sp, #8
   1534c:	af00      	add	r7, sp, #0
   1534e:	0002      	movs	r2, r0
   15350:	1dfb      	adds	r3, r7, #7
   15352:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   15354:	1dfb      	adds	r3, r7, #7
   15356:	781b      	ldrb	r3, [r3, #0]
   15358:	0018      	movs	r0, r3
   1535a:	4b03      	ldr	r3, [pc, #12]	; (15368 <port_get_group_from_gpio_pin+0x20>)
   1535c:	4798      	blx	r3
   1535e:	0003      	movs	r3, r0
}
   15360:	0018      	movs	r0, r3
   15362:	46bd      	mov	sp, r7
   15364:	b002      	add	sp, #8
   15366:	bd80      	pop	{r7, pc}
   15368:	000152e9 	.word	0x000152e9

0001536c <port_pin_set_output_level>:
{
   1536c:	b580      	push	{r7, lr}
   1536e:	b084      	sub	sp, #16
   15370:	af00      	add	r7, sp, #0
   15372:	0002      	movs	r2, r0
   15374:	1dfb      	adds	r3, r7, #7
   15376:	701a      	strb	r2, [r3, #0]
   15378:	1dbb      	adds	r3, r7, #6
   1537a:	1c0a      	adds	r2, r1, #0
   1537c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1537e:	1dfb      	adds	r3, r7, #7
   15380:	781b      	ldrb	r3, [r3, #0]
   15382:	0018      	movs	r0, r3
   15384:	4b0d      	ldr	r3, [pc, #52]	; (153bc <port_pin_set_output_level+0x50>)
   15386:	4798      	blx	r3
   15388:	0003      	movs	r3, r0
   1538a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1538c:	1dfb      	adds	r3, r7, #7
   1538e:	781b      	ldrb	r3, [r3, #0]
   15390:	221f      	movs	r2, #31
   15392:	4013      	ands	r3, r2
   15394:	2201      	movs	r2, #1
   15396:	409a      	lsls	r2, r3
   15398:	0013      	movs	r3, r2
   1539a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1539c:	1dbb      	adds	r3, r7, #6
   1539e:	781b      	ldrb	r3, [r3, #0]
   153a0:	2b00      	cmp	r3, #0
   153a2:	d003      	beq.n	153ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   153a4:	68fb      	ldr	r3, [r7, #12]
   153a6:	68ba      	ldr	r2, [r7, #8]
   153a8:	619a      	str	r2, [r3, #24]
}
   153aa:	e002      	b.n	153b2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   153ac:	68fb      	ldr	r3, [r7, #12]
   153ae:	68ba      	ldr	r2, [r7, #8]
   153b0:	615a      	str	r2, [r3, #20]
}
   153b2:	46c0      	nop			; (mov r8, r8)
   153b4:	46bd      	mov	sp, r7
   153b6:	b004      	add	sp, #16
   153b8:	bd80      	pop	{r7, pc}
   153ba:	46c0      	nop			; (mov r8, r8)
   153bc:	00015349 	.word	0x00015349

000153c0 <system_gclk_chan_get_config_defaults>:
{
   153c0:	b580      	push	{r7, lr}
   153c2:	b082      	sub	sp, #8
   153c4:	af00      	add	r7, sp, #0
   153c6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   153c8:	687b      	ldr	r3, [r7, #4]
   153ca:	2200      	movs	r2, #0
   153cc:	701a      	strb	r2, [r3, #0]
}
   153ce:	46c0      	nop			; (mov r8, r8)
   153d0:	46bd      	mov	sp, r7
   153d2:	b002      	add	sp, #8
   153d4:	bd80      	pop	{r7, pc}
	...

000153d8 <system_apb_clock_set_mask>:
{
   153d8:	b580      	push	{r7, lr}
   153da:	b082      	sub	sp, #8
   153dc:	af00      	add	r7, sp, #0
   153de:	0002      	movs	r2, r0
   153e0:	6039      	str	r1, [r7, #0]
   153e2:	1dfb      	adds	r3, r7, #7
   153e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   153e6:	1dfb      	adds	r3, r7, #7
   153e8:	781b      	ldrb	r3, [r3, #0]
   153ea:	2b01      	cmp	r3, #1
   153ec:	d00a      	beq.n	15404 <system_apb_clock_set_mask+0x2c>
   153ee:	2b02      	cmp	r3, #2
   153f0:	d00f      	beq.n	15412 <system_apb_clock_set_mask+0x3a>
   153f2:	2b00      	cmp	r3, #0
   153f4:	d114      	bne.n	15420 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   153f6:	4b0e      	ldr	r3, [pc, #56]	; (15430 <system_apb_clock_set_mask+0x58>)
   153f8:	4a0d      	ldr	r2, [pc, #52]	; (15430 <system_apb_clock_set_mask+0x58>)
   153fa:	6991      	ldr	r1, [r2, #24]
   153fc:	683a      	ldr	r2, [r7, #0]
   153fe:	430a      	orrs	r2, r1
   15400:	619a      	str	r2, [r3, #24]
			break;
   15402:	e00f      	b.n	15424 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   15404:	4b0a      	ldr	r3, [pc, #40]	; (15430 <system_apb_clock_set_mask+0x58>)
   15406:	4a0a      	ldr	r2, [pc, #40]	; (15430 <system_apb_clock_set_mask+0x58>)
   15408:	69d1      	ldr	r1, [r2, #28]
   1540a:	683a      	ldr	r2, [r7, #0]
   1540c:	430a      	orrs	r2, r1
   1540e:	61da      	str	r2, [r3, #28]
			break;
   15410:	e008      	b.n	15424 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   15412:	4b07      	ldr	r3, [pc, #28]	; (15430 <system_apb_clock_set_mask+0x58>)
   15414:	4a06      	ldr	r2, [pc, #24]	; (15430 <system_apb_clock_set_mask+0x58>)
   15416:	6a11      	ldr	r1, [r2, #32]
   15418:	683a      	ldr	r2, [r7, #0]
   1541a:	430a      	orrs	r2, r1
   1541c:	621a      	str	r2, [r3, #32]
			break;
   1541e:	e001      	b.n	15424 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15420:	2317      	movs	r3, #23
   15422:	e000      	b.n	15426 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   15424:	2300      	movs	r3, #0
}
   15426:	0018      	movs	r0, r3
   15428:	46bd      	mov	sp, r7
   1542a:	b002      	add	sp, #8
   1542c:	bd80      	pop	{r7, pc}
   1542e:	46c0      	nop			; (mov r8, r8)
   15430:	40000400 	.word	0x40000400

00015434 <system_is_debugger_present>:
{
   15434:	b580      	push	{r7, lr}
   15436:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   15438:	4b05      	ldr	r3, [pc, #20]	; (15450 <system_is_debugger_present+0x1c>)
   1543a:	789b      	ldrb	r3, [r3, #2]
   1543c:	b2db      	uxtb	r3, r3
   1543e:	001a      	movs	r2, r3
   15440:	2302      	movs	r3, #2
   15442:	4013      	ands	r3, r2
   15444:	1e5a      	subs	r2, r3, #1
   15446:	4193      	sbcs	r3, r2
   15448:	b2db      	uxtb	r3, r3
}
   1544a:	0018      	movs	r0, r3
   1544c:	46bd      	mov	sp, r7
   1544e:	bd80      	pop	{r7, pc}
   15450:	41002000 	.word	0x41002000

00015454 <system_interrupt_enable>:
{
   15454:	b580      	push	{r7, lr}
   15456:	b082      	sub	sp, #8
   15458:	af00      	add	r7, sp, #0
   1545a:	0002      	movs	r2, r0
   1545c:	1dfb      	adds	r3, r7, #7
   1545e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15460:	4b06      	ldr	r3, [pc, #24]	; (1547c <system_interrupt_enable+0x28>)
   15462:	1dfa      	adds	r2, r7, #7
   15464:	7812      	ldrb	r2, [r2, #0]
   15466:	0011      	movs	r1, r2
   15468:	221f      	movs	r2, #31
   1546a:	400a      	ands	r2, r1
   1546c:	2101      	movs	r1, #1
   1546e:	4091      	lsls	r1, r2
   15470:	000a      	movs	r2, r1
   15472:	601a      	str	r2, [r3, #0]
}
   15474:	46c0      	nop			; (mov r8, r8)
   15476:	46bd      	mov	sp, r7
   15478:	b002      	add	sp, #8
   1547a:	bd80      	pop	{r7, pc}
   1547c:	e000e100 	.word	0xe000e100

00015480 <system_interrupt_disable>:
{
   15480:	b580      	push	{r7, lr}
   15482:	b082      	sub	sp, #8
   15484:	af00      	add	r7, sp, #0
   15486:	0002      	movs	r2, r0
   15488:	1dfb      	adds	r3, r7, #7
   1548a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1548c:	4a07      	ldr	r2, [pc, #28]	; (154ac <system_interrupt_disable+0x2c>)
   1548e:	1dfb      	adds	r3, r7, #7
   15490:	781b      	ldrb	r3, [r3, #0]
   15492:	0019      	movs	r1, r3
   15494:	231f      	movs	r3, #31
   15496:	400b      	ands	r3, r1
   15498:	2101      	movs	r1, #1
   1549a:	4099      	lsls	r1, r3
   1549c:	000b      	movs	r3, r1
   1549e:	0019      	movs	r1, r3
   154a0:	2380      	movs	r3, #128	; 0x80
   154a2:	50d1      	str	r1, [r2, r3]
}
   154a4:	46c0      	nop			; (mov r8, r8)
   154a6:	46bd      	mov	sp, r7
   154a8:	b002      	add	sp, #8
   154aa:	bd80      	pop	{r7, pc}
   154ac:	e000e100 	.word	0xe000e100

000154b0 <spi_is_syncing>:
{
   154b0:	b580      	push	{r7, lr}
   154b2:	b084      	sub	sp, #16
   154b4:	af00      	add	r7, sp, #0
   154b6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   154b8:	687b      	ldr	r3, [r7, #4]
   154ba:	681b      	ldr	r3, [r3, #0]
   154bc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   154be:	68fb      	ldr	r3, [r7, #12]
   154c0:	69db      	ldr	r3, [r3, #28]
   154c2:	1e5a      	subs	r2, r3, #1
   154c4:	4193      	sbcs	r3, r2
   154c6:	b2db      	uxtb	r3, r3
}
   154c8:	0018      	movs	r0, r3
   154ca:	46bd      	mov	sp, r7
   154cc:	b004      	add	sp, #16
   154ce:	bd80      	pop	{r7, pc}

000154d0 <spi_enable>:
{
   154d0:	b580      	push	{r7, lr}
   154d2:	b084      	sub	sp, #16
   154d4:	af00      	add	r7, sp, #0
   154d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   154d8:	687b      	ldr	r3, [r7, #4]
   154da:	681b      	ldr	r3, [r3, #0]
   154dc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   154de:	687b      	ldr	r3, [r7, #4]
   154e0:	681b      	ldr	r3, [r3, #0]
   154e2:	0018      	movs	r0, r3
   154e4:	4b0b      	ldr	r3, [pc, #44]	; (15514 <spi_enable+0x44>)
   154e6:	4798      	blx	r3
   154e8:	0003      	movs	r3, r0
   154ea:	0018      	movs	r0, r3
   154ec:	4b0a      	ldr	r3, [pc, #40]	; (15518 <spi_enable+0x48>)
   154ee:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   154f0:	46c0      	nop			; (mov r8, r8)
   154f2:	687b      	ldr	r3, [r7, #4]
   154f4:	0018      	movs	r0, r3
   154f6:	4b09      	ldr	r3, [pc, #36]	; (1551c <spi_enable+0x4c>)
   154f8:	4798      	blx	r3
   154fa:	1e03      	subs	r3, r0, #0
   154fc:	d1f9      	bne.n	154f2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   154fe:	68fb      	ldr	r3, [r7, #12]
   15500:	681b      	ldr	r3, [r3, #0]
   15502:	2202      	movs	r2, #2
   15504:	431a      	orrs	r2, r3
   15506:	68fb      	ldr	r3, [r7, #12]
   15508:	601a      	str	r2, [r3, #0]
}
   1550a:	46c0      	nop			; (mov r8, r8)
   1550c:	46bd      	mov	sp, r7
   1550e:	b004      	add	sp, #16
   15510:	bd80      	pop	{r7, pc}
   15512:	46c0      	nop			; (mov r8, r8)
   15514:	000151ed 	.word	0x000151ed
   15518:	00015455 	.word	0x00015455
   1551c:	000154b1 	.word	0x000154b1

00015520 <spi_disable>:
{
   15520:	b580      	push	{r7, lr}
   15522:	b084      	sub	sp, #16
   15524:	af00      	add	r7, sp, #0
   15526:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15528:	687b      	ldr	r3, [r7, #4]
   1552a:	681b      	ldr	r3, [r3, #0]
   1552c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1552e:	687b      	ldr	r3, [r7, #4]
   15530:	681b      	ldr	r3, [r3, #0]
   15532:	0018      	movs	r0, r3
   15534:	4b0e      	ldr	r3, [pc, #56]	; (15570 <spi_disable+0x50>)
   15536:	4798      	blx	r3
   15538:	0003      	movs	r3, r0
   1553a:	0018      	movs	r0, r3
   1553c:	4b0d      	ldr	r3, [pc, #52]	; (15574 <spi_disable+0x54>)
   1553e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   15540:	46c0      	nop			; (mov r8, r8)
   15542:	687b      	ldr	r3, [r7, #4]
   15544:	0018      	movs	r0, r3
   15546:	4b0c      	ldr	r3, [pc, #48]	; (15578 <spi_disable+0x58>)
   15548:	4798      	blx	r3
   1554a:	1e03      	subs	r3, r0, #0
   1554c:	d1f9      	bne.n	15542 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1554e:	68fb      	ldr	r3, [r7, #12]
   15550:	228f      	movs	r2, #143	; 0x8f
   15552:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   15554:	68fb      	ldr	r3, [r7, #12]
   15556:	228f      	movs	r2, #143	; 0x8f
   15558:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1555a:	68fb      	ldr	r3, [r7, #12]
   1555c:	681b      	ldr	r3, [r3, #0]
   1555e:	2202      	movs	r2, #2
   15560:	4393      	bics	r3, r2
   15562:	001a      	movs	r2, r3
   15564:	68fb      	ldr	r3, [r7, #12]
   15566:	601a      	str	r2, [r3, #0]
}
   15568:	46c0      	nop			; (mov r8, r8)
   1556a:	46bd      	mov	sp, r7
   1556c:	b004      	add	sp, #16
   1556e:	bd80      	pop	{r7, pc}
   15570:	000151ed 	.word	0x000151ed
   15574:	00015481 	.word	0x00015481
   15578:	000154b1 	.word	0x000154b1

0001557c <spi_is_write_complete>:
{
   1557c:	b580      	push	{r7, lr}
   1557e:	b084      	sub	sp, #16
   15580:	af00      	add	r7, sp, #0
   15582:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15584:	687b      	ldr	r3, [r7, #4]
   15586:	681b      	ldr	r3, [r3, #0]
   15588:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1558a:	68fb      	ldr	r3, [r7, #12]
   1558c:	7e1b      	ldrb	r3, [r3, #24]
   1558e:	b2db      	uxtb	r3, r3
   15590:	001a      	movs	r2, r3
   15592:	2302      	movs	r3, #2
   15594:	4013      	ands	r3, r2
   15596:	1e5a      	subs	r2, r3, #1
   15598:	4193      	sbcs	r3, r2
   1559a:	b2db      	uxtb	r3, r3
}
   1559c:	0018      	movs	r0, r3
   1559e:	46bd      	mov	sp, r7
   155a0:	b004      	add	sp, #16
   155a2:	bd80      	pop	{r7, pc}

000155a4 <spi_is_ready_to_write>:
{
   155a4:	b580      	push	{r7, lr}
   155a6:	b084      	sub	sp, #16
   155a8:	af00      	add	r7, sp, #0
   155aa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   155ac:	687b      	ldr	r3, [r7, #4]
   155ae:	681b      	ldr	r3, [r3, #0]
   155b0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   155b2:	68fb      	ldr	r3, [r7, #12]
   155b4:	7e1b      	ldrb	r3, [r3, #24]
   155b6:	b2db      	uxtb	r3, r3
   155b8:	001a      	movs	r2, r3
   155ba:	2301      	movs	r3, #1
   155bc:	4013      	ands	r3, r2
   155be:	1e5a      	subs	r2, r3, #1
   155c0:	4193      	sbcs	r3, r2
   155c2:	b2db      	uxtb	r3, r3
}
   155c4:	0018      	movs	r0, r3
   155c6:	46bd      	mov	sp, r7
   155c8:	b004      	add	sp, #16
   155ca:	bd80      	pop	{r7, pc}

000155cc <spi_is_ready_to_read>:
{
   155cc:	b580      	push	{r7, lr}
   155ce:	b084      	sub	sp, #16
   155d0:	af00      	add	r7, sp, #0
   155d2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   155d4:	687b      	ldr	r3, [r7, #4]
   155d6:	681b      	ldr	r3, [r3, #0]
   155d8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   155da:	68fb      	ldr	r3, [r7, #12]
   155dc:	7e1b      	ldrb	r3, [r3, #24]
   155de:	b2db      	uxtb	r3, r3
   155e0:	001a      	movs	r2, r3
   155e2:	2304      	movs	r3, #4
   155e4:	4013      	ands	r3, r2
   155e6:	1e5a      	subs	r2, r3, #1
   155e8:	4193      	sbcs	r3, r2
   155ea:	b2db      	uxtb	r3, r3
}
   155ec:	0018      	movs	r0, r3
   155ee:	46bd      	mov	sp, r7
   155f0:	b004      	add	sp, #16
   155f2:	bd80      	pop	{r7, pc}

000155f4 <spi_write>:
{
   155f4:	b580      	push	{r7, lr}
   155f6:	b084      	sub	sp, #16
   155f8:	af00      	add	r7, sp, #0
   155fa:	6078      	str	r0, [r7, #4]
   155fc:	000a      	movs	r2, r1
   155fe:	1cbb      	adds	r3, r7, #2
   15600:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15602:	687b      	ldr	r3, [r7, #4]
   15604:	681b      	ldr	r3, [r3, #0]
   15606:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   15608:	687b      	ldr	r3, [r7, #4]
   1560a:	0018      	movs	r0, r3
   1560c:	4b0a      	ldr	r3, [pc, #40]	; (15638 <spi_write+0x44>)
   1560e:	4798      	blx	r3
   15610:	0003      	movs	r3, r0
   15612:	001a      	movs	r2, r3
   15614:	2301      	movs	r3, #1
   15616:	4053      	eors	r3, r2
   15618:	b2db      	uxtb	r3, r3
   1561a:	2b00      	cmp	r3, #0
   1561c:	d001      	beq.n	15622 <spi_write+0x2e>
		return STATUS_BUSY;
   1561e:	2305      	movs	r3, #5
   15620:	e006      	b.n	15630 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   15622:	1cbb      	adds	r3, r7, #2
   15624:	881b      	ldrh	r3, [r3, #0]
   15626:	05db      	lsls	r3, r3, #23
   15628:	0dda      	lsrs	r2, r3, #23
   1562a:	68fb      	ldr	r3, [r7, #12]
   1562c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   1562e:	2300      	movs	r3, #0
}
   15630:	0018      	movs	r0, r3
   15632:	46bd      	mov	sp, r7
   15634:	b004      	add	sp, #16
   15636:	bd80      	pop	{r7, pc}
   15638:	000155a5 	.word	0x000155a5

0001563c <spi_read>:
{
   1563c:	b580      	push	{r7, lr}
   1563e:	b084      	sub	sp, #16
   15640:	af00      	add	r7, sp, #0
   15642:	6078      	str	r0, [r7, #4]
   15644:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15646:	687b      	ldr	r3, [r7, #4]
   15648:	681b      	ldr	r3, [r3, #0]
   1564a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   1564c:	687b      	ldr	r3, [r7, #4]
   1564e:	0018      	movs	r0, r3
   15650:	4b1b      	ldr	r3, [pc, #108]	; (156c0 <spi_read+0x84>)
   15652:	4798      	blx	r3
   15654:	0003      	movs	r3, r0
   15656:	001a      	movs	r2, r3
   15658:	2301      	movs	r3, #1
   1565a:	4053      	eors	r3, r2
   1565c:	b2db      	uxtb	r3, r3
   1565e:	2b00      	cmp	r3, #0
   15660:	d001      	beq.n	15666 <spi_read+0x2a>
		return STATUS_ERR_IO;
   15662:	2310      	movs	r3, #16
   15664:	e027      	b.n	156b6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   15666:	230f      	movs	r3, #15
   15668:	18fb      	adds	r3, r7, r3
   1566a:	2200      	movs	r2, #0
   1566c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1566e:	68bb      	ldr	r3, [r7, #8]
   15670:	8b5b      	ldrh	r3, [r3, #26]
   15672:	b29b      	uxth	r3, r3
   15674:	001a      	movs	r2, r3
   15676:	2304      	movs	r3, #4
   15678:	4013      	ands	r3, r2
   1567a:	d006      	beq.n	1568a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1567c:	230f      	movs	r3, #15
   1567e:	18fb      	adds	r3, r7, r3
   15680:	221e      	movs	r2, #30
   15682:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   15684:	68bb      	ldr	r3, [r7, #8]
   15686:	2204      	movs	r2, #4
   15688:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1568a:	687b      	ldr	r3, [r7, #4]
   1568c:	799b      	ldrb	r3, [r3, #6]
   1568e:	2b01      	cmp	r3, #1
   15690:	d108      	bne.n	156a4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   15692:	68bb      	ldr	r3, [r7, #8]
   15694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15696:	b29b      	uxth	r3, r3
   15698:	05db      	lsls	r3, r3, #23
   1569a:	0ddb      	lsrs	r3, r3, #23
   1569c:	b29a      	uxth	r2, r3
   1569e:	683b      	ldr	r3, [r7, #0]
   156a0:	801a      	strh	r2, [r3, #0]
   156a2:	e005      	b.n	156b0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   156a4:	68bb      	ldr	r3, [r7, #8]
   156a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   156a8:	b2db      	uxtb	r3, r3
   156aa:	b29a      	uxth	r2, r3
   156ac:	683b      	ldr	r3, [r7, #0]
   156ae:	801a      	strh	r2, [r3, #0]
	return retval;
   156b0:	230f      	movs	r3, #15
   156b2:	18fb      	adds	r3, r7, r3
   156b4:	781b      	ldrb	r3, [r3, #0]
}
   156b6:	0018      	movs	r0, r3
   156b8:	46bd      	mov	sp, r7
   156ba:	b004      	add	sp, #16
   156bc:	bd80      	pop	{r7, pc}
   156be:	46c0      	nop			; (mov r8, r8)
   156c0:	000155cd 	.word	0x000155cd

000156c4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   156c4:	b590      	push	{r4, r7, lr}
   156c6:	b089      	sub	sp, #36	; 0x24
   156c8:	af00      	add	r7, sp, #0
   156ca:	6078      	str	r0, [r7, #4]
   156cc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   156ce:	230c      	movs	r3, #12
   156d0:	18fb      	adds	r3, r7, r3
   156d2:	2200      	movs	r2, #0
   156d4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   156d6:	687b      	ldr	r3, [r7, #4]
   156d8:	681b      	ldr	r3, [r3, #0]
   156da:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   156dc:	687b      	ldr	r3, [r7, #4]
   156de:	0018      	movs	r0, r3
   156e0:	4b24      	ldr	r3, [pc, #144]	; (15774 <spi_set_baudrate+0xb0>)
   156e2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   156e4:	46c0      	nop			; (mov r8, r8)
   156e6:	687b      	ldr	r3, [r7, #4]
   156e8:	0018      	movs	r0, r3
   156ea:	4b23      	ldr	r3, [pc, #140]	; (15778 <spi_set_baudrate+0xb4>)
   156ec:	4798      	blx	r3
   156ee:	1e03      	subs	r3, r0, #0
   156f0:	d1f9      	bne.n	156e6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   156f2:	687b      	ldr	r3, [r7, #4]
   156f4:	681b      	ldr	r3, [r3, #0]
   156f6:	0018      	movs	r0, r3
   156f8:	4b20      	ldr	r3, [pc, #128]	; (1577c <spi_set_baudrate+0xb8>)
   156fa:	4798      	blx	r3
   156fc:	0003      	movs	r3, r0
   156fe:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15700:	69bb      	ldr	r3, [r7, #24]
   15702:	3314      	adds	r3, #20
   15704:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   15706:	697b      	ldr	r3, [r7, #20]
   15708:	b2db      	uxtb	r3, r3
   1570a:	0018      	movs	r0, r3
   1570c:	4b1c      	ldr	r3, [pc, #112]	; (15780 <spi_set_baudrate+0xbc>)
   1570e:	4798      	blx	r3
   15710:	0003      	movs	r3, r0
   15712:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   15714:	230f      	movs	r3, #15
   15716:	18fc      	adds	r4, r7, r3
   15718:	230c      	movs	r3, #12
   1571a:	18fa      	adds	r2, r7, r3
   1571c:	6939      	ldr	r1, [r7, #16]
   1571e:	683b      	ldr	r3, [r7, #0]
   15720:	0018      	movs	r0, r3
   15722:	4b18      	ldr	r3, [pc, #96]	; (15784 <spi_set_baudrate+0xc0>)
   15724:	4798      	blx	r3
   15726:	0003      	movs	r3, r0
   15728:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   1572a:	230f      	movs	r3, #15
   1572c:	18fb      	adds	r3, r7, r3
   1572e:	781b      	ldrb	r3, [r3, #0]
   15730:	2b00      	cmp	r3, #0
   15732:	d001      	beq.n	15738 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   15734:	2317      	movs	r3, #23
   15736:	e018      	b.n	1576a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   15738:	230c      	movs	r3, #12
   1573a:	18fb      	adds	r3, r7, r3
   1573c:	881b      	ldrh	r3, [r3, #0]
   1573e:	b2da      	uxtb	r2, r3
   15740:	69fb      	ldr	r3, [r7, #28]
   15742:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   15744:	46c0      	nop			; (mov r8, r8)
   15746:	687b      	ldr	r3, [r7, #4]
   15748:	0018      	movs	r0, r3
   1574a:	4b0b      	ldr	r3, [pc, #44]	; (15778 <spi_set_baudrate+0xb4>)
   1574c:	4798      	blx	r3
   1574e:	1e03      	subs	r3, r0, #0
   15750:	d1f9      	bne.n	15746 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   15752:	687b      	ldr	r3, [r7, #4]
   15754:	0018      	movs	r0, r3
   15756:	4b0c      	ldr	r3, [pc, #48]	; (15788 <spi_set_baudrate+0xc4>)
   15758:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   1575a:	46c0      	nop			; (mov r8, r8)
   1575c:	687b      	ldr	r3, [r7, #4]
   1575e:	0018      	movs	r0, r3
   15760:	4b05      	ldr	r3, [pc, #20]	; (15778 <spi_set_baudrate+0xb4>)
   15762:	4798      	blx	r3
   15764:	1e03      	subs	r3, r0, #0
   15766:	d1f9      	bne.n	1575c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   15768:	2300      	movs	r3, #0
}
   1576a:	0018      	movs	r0, r3
   1576c:	46bd      	mov	sp, r7
   1576e:	b009      	add	sp, #36	; 0x24
   15770:	bd90      	pop	{r4, r7, pc}
   15772:	46c0      	nop			; (mov r8, r8)
   15774:	00015521 	.word	0x00015521
   15778:	000154b1 	.word	0x000154b1
   1577c:	0001511d 	.word	0x0001511d
   15780:	00017ad1 	.word	0x00017ad1
   15784:	00014c97 	.word	0x00014c97
   15788:	000154d1 	.word	0x000154d1

0001578c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   1578c:	b590      	push	{r4, r7, lr}
   1578e:	b093      	sub	sp, #76	; 0x4c
   15790:	af00      	add	r7, sp, #0
   15792:	6078      	str	r0, [r7, #4]
   15794:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   15796:	687b      	ldr	r3, [r7, #4]
   15798:	681b      	ldr	r3, [r3, #0]
   1579a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   1579c:	687b      	ldr	r3, [r7, #4]
   1579e:	681b      	ldr	r3, [r3, #0]
   157a0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   157a2:	231c      	movs	r3, #28
   157a4:	18fb      	adds	r3, r7, r3
   157a6:	0018      	movs	r0, r3
   157a8:	4b75      	ldr	r3, [pc, #468]	; (15980 <_spi_set_config+0x1f4>)
   157aa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   157ac:	231c      	movs	r3, #28
   157ae:	18fb      	adds	r3, r7, r3
   157b0:	2200      	movs	r2, #0
   157b2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   157b4:	683b      	ldr	r3, [r7, #0]
   157b6:	781b      	ldrb	r3, [r3, #0]
   157b8:	2b00      	cmp	r3, #0
   157ba:	d103      	bne.n	157c4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   157bc:	231c      	movs	r3, #28
   157be:	18fb      	adds	r3, r7, r3
   157c0:	2200      	movs	r2, #0
   157c2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   157c4:	683b      	ldr	r3, [r7, #0]
   157c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   157c8:	230c      	movs	r3, #12
   157ca:	18fb      	adds	r3, r7, r3
   157cc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   157ce:	683b      	ldr	r3, [r7, #0]
   157d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   157d2:	230c      	movs	r3, #12
   157d4:	18fb      	adds	r3, r7, r3
   157d6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   157d8:	683b      	ldr	r3, [r7, #0]
   157da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   157dc:	230c      	movs	r3, #12
   157de:	18fb      	adds	r3, r7, r3
   157e0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   157e2:	683b      	ldr	r3, [r7, #0]
   157e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   157e6:	230c      	movs	r3, #12
   157e8:	18fb      	adds	r3, r7, r3
   157ea:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   157ec:	2347      	movs	r3, #71	; 0x47
   157ee:	18fb      	adds	r3, r7, r3
   157f0:	2200      	movs	r2, #0
   157f2:	701a      	strb	r2, [r3, #0]
   157f4:	e02c      	b.n	15850 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   157f6:	2347      	movs	r3, #71	; 0x47
   157f8:	18fb      	adds	r3, r7, r3
   157fa:	781a      	ldrb	r2, [r3, #0]
   157fc:	230c      	movs	r3, #12
   157fe:	18fb      	adds	r3, r7, r3
   15800:	0092      	lsls	r2, r2, #2
   15802:	58d3      	ldr	r3, [r2, r3]
   15804:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   15806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15808:	2b00      	cmp	r3, #0
   1580a:	d109      	bne.n	15820 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1580c:	2347      	movs	r3, #71	; 0x47
   1580e:	18fb      	adds	r3, r7, r3
   15810:	781a      	ldrb	r2, [r3, #0]
   15812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15814:	0011      	movs	r1, r2
   15816:	0018      	movs	r0, r3
   15818:	4b5a      	ldr	r3, [pc, #360]	; (15984 <_spi_set_config+0x1f8>)
   1581a:	4798      	blx	r3
   1581c:	0003      	movs	r3, r0
   1581e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   15820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15822:	3301      	adds	r3, #1
   15824:	d00d      	beq.n	15842 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   15826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15828:	b2da      	uxtb	r2, r3
   1582a:	231c      	movs	r3, #28
   1582c:	18fb      	adds	r3, r7, r3
   1582e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   15830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15832:	0c1b      	lsrs	r3, r3, #16
   15834:	b2db      	uxtb	r3, r3
   15836:	221c      	movs	r2, #28
   15838:	18ba      	adds	r2, r7, r2
   1583a:	0011      	movs	r1, r2
   1583c:	0018      	movs	r0, r3
   1583e:	4b52      	ldr	r3, [pc, #328]	; (15988 <_spi_set_config+0x1fc>)
   15840:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   15842:	2347      	movs	r3, #71	; 0x47
   15844:	18fb      	adds	r3, r7, r3
   15846:	781a      	ldrb	r2, [r3, #0]
   15848:	2347      	movs	r3, #71	; 0x47
   1584a:	18fb      	adds	r3, r7, r3
   1584c:	3201      	adds	r2, #1
   1584e:	701a      	strb	r2, [r3, #0]
   15850:	2347      	movs	r3, #71	; 0x47
   15852:	18fb      	adds	r3, r7, r3
   15854:	781b      	ldrb	r3, [r3, #0]
   15856:	2b03      	cmp	r3, #3
   15858:	d9cd      	bls.n	157f6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   1585a:	683b      	ldr	r3, [r7, #0]
   1585c:	781a      	ldrb	r2, [r3, #0]
   1585e:	687b      	ldr	r3, [r7, #4]
   15860:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   15862:	683b      	ldr	r3, [r7, #0]
   15864:	7c1a      	ldrb	r2, [r3, #16]
   15866:	687b      	ldr	r3, [r7, #4]
   15868:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   1586a:	683b      	ldr	r3, [r7, #0]
   1586c:	7c9a      	ldrb	r2, [r3, #18]
   1586e:	687b      	ldr	r3, [r7, #4]
   15870:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   15872:	683b      	ldr	r3, [r7, #0]
   15874:	7d1a      	ldrb	r2, [r3, #20]
   15876:	687b      	ldr	r3, [r7, #4]
   15878:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1587a:	230a      	movs	r3, #10
   1587c:	18fb      	adds	r3, r7, r3
   1587e:	2200      	movs	r2, #0
   15880:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   15882:	2300      	movs	r3, #0
   15884:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   15886:	2300      	movs	r3, #0
   15888:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   1588a:	683b      	ldr	r3, [r7, #0]
   1588c:	781b      	ldrb	r3, [r3, #0]
   1588e:	2b01      	cmp	r3, #1
   15890:	d129      	bne.n	158e6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   15892:	687b      	ldr	r3, [r7, #4]
   15894:	681b      	ldr	r3, [r3, #0]
   15896:	0018      	movs	r0, r3
   15898:	4b3c      	ldr	r3, [pc, #240]	; (1598c <_spi_set_config+0x200>)
   1589a:	4798      	blx	r3
   1589c:	0003      	movs	r3, r0
   1589e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   158a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   158a2:	3314      	adds	r3, #20
   158a4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   158a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   158a8:	b2db      	uxtb	r3, r3
   158aa:	0018      	movs	r0, r3
   158ac:	4b38      	ldr	r3, [pc, #224]	; (15990 <_spi_set_config+0x204>)
   158ae:	4798      	blx	r3
   158b0:	0003      	movs	r3, r0
   158b2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   158b4:	683b      	ldr	r3, [r7, #0]
   158b6:	699b      	ldr	r3, [r3, #24]
   158b8:	2223      	movs	r2, #35	; 0x23
   158ba:	18bc      	adds	r4, r7, r2
   158bc:	220a      	movs	r2, #10
   158be:	18ba      	adds	r2, r7, r2
   158c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   158c2:	0018      	movs	r0, r3
   158c4:	4b33      	ldr	r3, [pc, #204]	; (15994 <_spi_set_config+0x208>)
   158c6:	4798      	blx	r3
   158c8:	0003      	movs	r3, r0
   158ca:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   158cc:	2323      	movs	r3, #35	; 0x23
   158ce:	18fb      	adds	r3, r7, r3
   158d0:	781b      	ldrb	r3, [r3, #0]
   158d2:	2b00      	cmp	r3, #0
   158d4:	d001      	beq.n	158da <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   158d6:	2317      	movs	r3, #23
   158d8:	e04e      	b.n	15978 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   158da:	230a      	movs	r3, #10
   158dc:	18fb      	adds	r3, r7, r3
   158de:	881b      	ldrh	r3, [r3, #0]
   158e0:	b2da      	uxtb	r2, r3
   158e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158e4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   158e6:	683b      	ldr	r3, [r7, #0]
   158e8:	685b      	ldr	r3, [r3, #4]
   158ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   158ec:	4313      	orrs	r3, r2
   158ee:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   158f0:	683b      	ldr	r3, [r7, #0]
   158f2:	689b      	ldr	r3, [r3, #8]
   158f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   158f6:	4313      	orrs	r3, r2
   158f8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   158fa:	683b      	ldr	r3, [r7, #0]
   158fc:	68db      	ldr	r3, [r3, #12]
   158fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15900:	4313      	orrs	r3, r2
   15902:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   15904:	683b      	ldr	r3, [r7, #0]
   15906:	7c1b      	ldrb	r3, [r3, #16]
   15908:	001a      	movs	r2, r3
   1590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1590c:	4313      	orrs	r3, r2
   1590e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   15910:	683b      	ldr	r3, [r7, #0]
   15912:	7c5b      	ldrb	r3, [r3, #17]
   15914:	2b00      	cmp	r3, #0
   15916:	d103      	bne.n	15920 <_spi_set_config+0x194>
   15918:	4b1f      	ldr	r3, [pc, #124]	; (15998 <_spi_set_config+0x20c>)
   1591a:	4798      	blx	r3
   1591c:	1e03      	subs	r3, r0, #0
   1591e:	d003      	beq.n	15928 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   15920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15922:	2280      	movs	r2, #128	; 0x80
   15924:	4313      	orrs	r3, r2
   15926:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   15928:	683b      	ldr	r3, [r7, #0]
   1592a:	7c9b      	ldrb	r3, [r3, #18]
   1592c:	2b00      	cmp	r3, #0
   1592e:	d004      	beq.n	1593a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   15930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15932:	2280      	movs	r2, #128	; 0x80
   15934:	0292      	lsls	r2, r2, #10
   15936:	4313      	orrs	r3, r2
   15938:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   1593a:	683b      	ldr	r3, [r7, #0]
   1593c:	7cdb      	ldrb	r3, [r3, #19]
   1593e:	2b00      	cmp	r3, #0
   15940:	d004      	beq.n	1594c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   15942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15944:	2280      	movs	r2, #128	; 0x80
   15946:	0092      	lsls	r2, r2, #2
   15948:	4313      	orrs	r3, r2
   1594a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   1594c:	683b      	ldr	r3, [r7, #0]
   1594e:	7d1b      	ldrb	r3, [r3, #20]
   15950:	2b00      	cmp	r3, #0
   15952:	d004      	beq.n	1595e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   15954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15956:	2280      	movs	r2, #128	; 0x80
   15958:	0192      	lsls	r2, r2, #6
   1595a:	4313      	orrs	r3, r2
   1595c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   1595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15960:	681a      	ldr	r2, [r3, #0]
   15962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15964:	431a      	orrs	r2, r3
   15966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15968:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   1596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1596c:	685a      	ldr	r2, [r3, #4]
   1596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15970:	431a      	orrs	r2, r3
   15972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15974:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   15976:	2300      	movs	r3, #0
}
   15978:	0018      	movs	r0, r3
   1597a:	46bd      	mov	sp, r7
   1597c:	b013      	add	sp, #76	; 0x4c
   1597e:	bd90      	pop	{r4, r7, pc}
   15980:	000152c1 	.word	0x000152c1
   15984:	00014f61 	.word	0x00014f61
   15988:	00017d0d 	.word	0x00017d0d
   1598c:	0001511d 	.word	0x0001511d
   15990:	00017ad1 	.word	0x00017ad1
   15994:	00014c97 	.word	0x00014c97
   15998:	00015435 	.word	0x00015435

0001599c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1599c:	b590      	push	{r4, r7, lr}
   1599e:	b08b      	sub	sp, #44	; 0x2c
   159a0:	af00      	add	r7, sp, #0
   159a2:	60f8      	str	r0, [r7, #12]
   159a4:	60b9      	str	r1, [r7, #8]
   159a6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   159a8:	68fb      	ldr	r3, [r7, #12]
   159aa:	68ba      	ldr	r2, [r7, #8]
   159ac:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   159ae:	68fb      	ldr	r3, [r7, #12]
   159b0:	681b      	ldr	r3, [r3, #0]
   159b2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   159b4:	6a3b      	ldr	r3, [r7, #32]
   159b6:	681b      	ldr	r3, [r3, #0]
   159b8:	2202      	movs	r2, #2
   159ba:	4013      	ands	r3, r2
   159bc:	d001      	beq.n	159c2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   159be:	231c      	movs	r3, #28
   159c0:	e09c      	b.n	15afc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   159c2:	6a3b      	ldr	r3, [r7, #32]
   159c4:	681b      	ldr	r3, [r3, #0]
   159c6:	2201      	movs	r2, #1
   159c8:	4013      	ands	r3, r2
   159ca:	d001      	beq.n	159d0 <spi_init+0x34>
		return STATUS_BUSY;
   159cc:	2305      	movs	r3, #5
   159ce:	e095      	b.n	15afc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   159d0:	68fb      	ldr	r3, [r7, #12]
   159d2:	681b      	ldr	r3, [r3, #0]
   159d4:	0018      	movs	r0, r3
   159d6:	4b4b      	ldr	r3, [pc, #300]	; (15b04 <spi_init+0x168>)
   159d8:	4798      	blx	r3
   159da:	0003      	movs	r3, r0
   159dc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   159de:	69fb      	ldr	r3, [r7, #28]
   159e0:	3302      	adds	r3, #2
   159e2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   159e4:	69fb      	ldr	r3, [r7, #28]
   159e6:	3314      	adds	r3, #20
   159e8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   159ea:	2201      	movs	r2, #1
   159ec:	69bb      	ldr	r3, [r7, #24]
   159ee:	409a      	lsls	r2, r3
   159f0:	0013      	movs	r3, r2
   159f2:	0019      	movs	r1, r3
   159f4:	2002      	movs	r0, #2
   159f6:	4b44      	ldr	r3, [pc, #272]	; (15b08 <spi_init+0x16c>)
   159f8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   159fa:	2310      	movs	r3, #16
   159fc:	18fb      	adds	r3, r7, r3
   159fe:	0018      	movs	r0, r3
   15a00:	4b42      	ldr	r3, [pc, #264]	; (15b0c <spi_init+0x170>)
   15a02:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   15a04:	687b      	ldr	r3, [r7, #4]
   15a06:	2224      	movs	r2, #36	; 0x24
   15a08:	5c9a      	ldrb	r2, [r3, r2]
   15a0a:	2310      	movs	r3, #16
   15a0c:	18fb      	adds	r3, r7, r3
   15a0e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   15a10:	697b      	ldr	r3, [r7, #20]
   15a12:	b2db      	uxtb	r3, r3
   15a14:	2210      	movs	r2, #16
   15a16:	18ba      	adds	r2, r7, r2
   15a18:	0011      	movs	r1, r2
   15a1a:	0018      	movs	r0, r3
   15a1c:	4b3c      	ldr	r3, [pc, #240]	; (15b10 <spi_init+0x174>)
   15a1e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   15a20:	697b      	ldr	r3, [r7, #20]
   15a22:	b2db      	uxtb	r3, r3
   15a24:	0018      	movs	r0, r3
   15a26:	4b3b      	ldr	r3, [pc, #236]	; (15b14 <spi_init+0x178>)
   15a28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   15a2a:	687b      	ldr	r3, [r7, #4]
   15a2c:	2224      	movs	r2, #36	; 0x24
   15a2e:	5c9b      	ldrb	r3, [r3, r2]
   15a30:	2100      	movs	r1, #0
   15a32:	0018      	movs	r0, r3
   15a34:	4b38      	ldr	r3, [pc, #224]	; (15b18 <spi_init+0x17c>)
   15a36:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   15a38:	687b      	ldr	r3, [r7, #4]
   15a3a:	781b      	ldrb	r3, [r3, #0]
   15a3c:	2b01      	cmp	r3, #1
   15a3e:	d105      	bne.n	15a4c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   15a40:	6a3b      	ldr	r3, [r7, #32]
   15a42:	681b      	ldr	r3, [r3, #0]
   15a44:	220c      	movs	r2, #12
   15a46:	431a      	orrs	r2, r3
   15a48:	6a3b      	ldr	r3, [r7, #32]
   15a4a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   15a4c:	2327      	movs	r3, #39	; 0x27
   15a4e:	18fb      	adds	r3, r7, r3
   15a50:	2200      	movs	r2, #0
   15a52:	701a      	strb	r2, [r3, #0]
   15a54:	e010      	b.n	15a78 <spi_init+0xdc>
		module->callback[i]        = NULL;
   15a56:	2327      	movs	r3, #39	; 0x27
   15a58:	18fb      	adds	r3, r7, r3
   15a5a:	781b      	ldrb	r3, [r3, #0]
   15a5c:	68fa      	ldr	r2, [r7, #12]
   15a5e:	3302      	adds	r3, #2
   15a60:	009b      	lsls	r3, r3, #2
   15a62:	18d3      	adds	r3, r2, r3
   15a64:	3304      	adds	r3, #4
   15a66:	2200      	movs	r2, #0
   15a68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   15a6a:	2327      	movs	r3, #39	; 0x27
   15a6c:	18fb      	adds	r3, r7, r3
   15a6e:	781a      	ldrb	r2, [r3, #0]
   15a70:	2327      	movs	r3, #39	; 0x27
   15a72:	18fb      	adds	r3, r7, r3
   15a74:	3201      	adds	r2, #1
   15a76:	701a      	strb	r2, [r3, #0]
   15a78:	2327      	movs	r3, #39	; 0x27
   15a7a:	18fb      	adds	r3, r7, r3
   15a7c:	781b      	ldrb	r3, [r3, #0]
   15a7e:	2b06      	cmp	r3, #6
   15a80:	d9e9      	bls.n	15a56 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   15a82:	68fb      	ldr	r3, [r7, #12]
   15a84:	2200      	movs	r2, #0
   15a86:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   15a88:	68fb      	ldr	r3, [r7, #12]
   15a8a:	2200      	movs	r2, #0
   15a8c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   15a8e:	68fb      	ldr	r3, [r7, #12]
   15a90:	2200      	movs	r2, #0
   15a92:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   15a94:	68fb      	ldr	r3, [r7, #12]
   15a96:	2200      	movs	r2, #0
   15a98:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   15a9a:	68fb      	ldr	r3, [r7, #12]
   15a9c:	2236      	movs	r2, #54	; 0x36
   15a9e:	2100      	movs	r1, #0
   15aa0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   15aa2:	68fb      	ldr	r3, [r7, #12]
   15aa4:	2237      	movs	r2, #55	; 0x37
   15aa6:	2100      	movs	r1, #0
   15aa8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   15aaa:	68fb      	ldr	r3, [r7, #12]
   15aac:	2238      	movs	r2, #56	; 0x38
   15aae:	2100      	movs	r1, #0
   15ab0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   15ab2:	68fb      	ldr	r3, [r7, #12]
   15ab4:	2203      	movs	r2, #3
   15ab6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   15ab8:	68fb      	ldr	r3, [r7, #12]
   15aba:	2200      	movs	r2, #0
   15abc:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   15abe:	68fb      	ldr	r3, [r7, #12]
   15ac0:	681b      	ldr	r3, [r3, #0]
   15ac2:	2213      	movs	r2, #19
   15ac4:	18bc      	adds	r4, r7, r2
   15ac6:	0018      	movs	r0, r3
   15ac8:	4b0e      	ldr	r3, [pc, #56]	; (15b04 <spi_init+0x168>)
   15aca:	4798      	blx	r3
   15acc:	0003      	movs	r3, r0
   15ace:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   15ad0:	4a12      	ldr	r2, [pc, #72]	; (15b1c <spi_init+0x180>)
   15ad2:	2313      	movs	r3, #19
   15ad4:	18fb      	adds	r3, r7, r3
   15ad6:	781b      	ldrb	r3, [r3, #0]
   15ad8:	0011      	movs	r1, r2
   15ada:	0018      	movs	r0, r3
   15adc:	4b10      	ldr	r3, [pc, #64]	; (15b20 <spi_init+0x184>)
   15ade:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   15ae0:	2313      	movs	r3, #19
   15ae2:	18fb      	adds	r3, r7, r3
   15ae4:	781a      	ldrb	r2, [r3, #0]
   15ae6:	4b0f      	ldr	r3, [pc, #60]	; (15b24 <spi_init+0x188>)
   15ae8:	0092      	lsls	r2, r2, #2
   15aea:	68f9      	ldr	r1, [r7, #12]
   15aec:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   15aee:	687a      	ldr	r2, [r7, #4]
   15af0:	68fb      	ldr	r3, [r7, #12]
   15af2:	0011      	movs	r1, r2
   15af4:	0018      	movs	r0, r3
   15af6:	4b0c      	ldr	r3, [pc, #48]	; (15b28 <spi_init+0x18c>)
   15af8:	4798      	blx	r3
   15afa:	0003      	movs	r3, r0
}
   15afc:	0018      	movs	r0, r3
   15afe:	46bd      	mov	sp, r7
   15b00:	b00b      	add	sp, #44	; 0x2c
   15b02:	bd90      	pop	{r4, r7, pc}
   15b04:	0001511d 	.word	0x0001511d
   15b08:	000153d9 	.word	0x000153d9
   15b0c:	000153c1 	.word	0x000153c1
   15b10:	000179ad 	.word	0x000179ad
   15b14:	000179f1 	.word	0x000179f1
   15b18:	00014ed5 	.word	0x00014ed5
   15b1c:	00015ff5 	.word	0x00015ff5
   15b20:	00015181 	.word	0x00015181
   15b24:	20005ce8 	.word	0x20005ce8
   15b28:	0001578d 	.word	0x0001578d

00015b2c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   15b2c:	b590      	push	{r4, r7, lr}
   15b2e:	b087      	sub	sp, #28
   15b30:	af00      	add	r7, sp, #0
   15b32:	60f8      	str	r0, [r7, #12]
   15b34:	60b9      	str	r1, [r7, #8]
   15b36:	0019      	movs	r1, r3
   15b38:	1dbb      	adds	r3, r7, #6
   15b3a:	801a      	strh	r2, [r3, #0]
   15b3c:	1d3b      	adds	r3, r7, #4
   15b3e:	1c0a      	adds	r2, r1, #0
   15b40:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   15b42:	68fb      	ldr	r3, [r7, #12]
   15b44:	2238      	movs	r2, #56	; 0x38
   15b46:	5c9b      	ldrb	r3, [r3, r2]
   15b48:	b2db      	uxtb	r3, r3
   15b4a:	2b05      	cmp	r3, #5
   15b4c:	d101      	bne.n	15b52 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   15b4e:	2305      	movs	r3, #5
   15b50:	e07a      	b.n	15c48 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   15b52:	1dbb      	adds	r3, r7, #6
   15b54:	881b      	ldrh	r3, [r3, #0]
   15b56:	2b00      	cmp	r3, #0
   15b58:	d101      	bne.n	15b5e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   15b5a:	2317      	movs	r3, #23
   15b5c:	e074      	b.n	15c48 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   15b5e:	68fb      	ldr	r3, [r7, #12]
   15b60:	79db      	ldrb	r3, [r3, #7]
   15b62:	2201      	movs	r2, #1
   15b64:	4053      	eors	r3, r2
   15b66:	b2db      	uxtb	r3, r3
   15b68:	2b00      	cmp	r3, #0
   15b6a:	d001      	beq.n	15b70 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   15b6c:	231c      	movs	r3, #28
   15b6e:	e06b      	b.n	15c48 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   15b70:	2316      	movs	r3, #22
   15b72:	18fb      	adds	r3, r7, r3
   15b74:	2200      	movs	r2, #0
   15b76:	801a      	strh	r2, [r3, #0]

	while (length--) {
   15b78:	e05e      	b.n	15c38 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   15b7a:	68fb      	ldr	r3, [r7, #12]
   15b7c:	795b      	ldrb	r3, [r3, #5]
   15b7e:	2b01      	cmp	r3, #1
   15b80:	d112      	bne.n	15ba8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   15b82:	46c0      	nop			; (mov r8, r8)
   15b84:	68fb      	ldr	r3, [r7, #12]
   15b86:	0018      	movs	r0, r3
   15b88:	4b31      	ldr	r3, [pc, #196]	; (15c50 <spi_read_buffer_wait+0x124>)
   15b8a:	4798      	blx	r3
   15b8c:	0003      	movs	r3, r0
   15b8e:	001a      	movs	r2, r3
   15b90:	2301      	movs	r3, #1
   15b92:	4053      	eors	r3, r2
   15b94:	b2db      	uxtb	r3, r3
   15b96:	2b00      	cmp	r3, #0
   15b98:	d1f4      	bne.n	15b84 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   15b9a:	1d3b      	adds	r3, r7, #4
   15b9c:	881a      	ldrh	r2, [r3, #0]
   15b9e:	68fb      	ldr	r3, [r7, #12]
   15ba0:	0011      	movs	r1, r2
   15ba2:	0018      	movs	r0, r3
   15ba4:	4b2b      	ldr	r3, [pc, #172]	; (15c54 <spi_read_buffer_wait+0x128>)
   15ba6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   15ba8:	46c0      	nop			; (mov r8, r8)
   15baa:	68fb      	ldr	r3, [r7, #12]
   15bac:	0018      	movs	r0, r3
   15bae:	4b2a      	ldr	r3, [pc, #168]	; (15c58 <spi_read_buffer_wait+0x12c>)
   15bb0:	4798      	blx	r3
   15bb2:	0003      	movs	r3, r0
   15bb4:	001a      	movs	r2, r3
   15bb6:	2301      	movs	r3, #1
   15bb8:	4053      	eors	r3, r2
   15bba:	b2db      	uxtb	r3, r3
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d1f4      	bne.n	15baa <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   15bc0:	2312      	movs	r3, #18
   15bc2:	18fb      	adds	r3, r7, r3
   15bc4:	2200      	movs	r2, #0
   15bc6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   15bc8:	2315      	movs	r3, #21
   15bca:	18fc      	adds	r4, r7, r3
   15bcc:	2312      	movs	r3, #18
   15bce:	18fa      	adds	r2, r7, r3
   15bd0:	68fb      	ldr	r3, [r7, #12]
   15bd2:	0011      	movs	r1, r2
   15bd4:	0018      	movs	r0, r3
   15bd6:	4b21      	ldr	r3, [pc, #132]	; (15c5c <spi_read_buffer_wait+0x130>)
   15bd8:	4798      	blx	r3
   15bda:	0003      	movs	r3, r0
   15bdc:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   15bde:	2315      	movs	r3, #21
   15be0:	18fb      	adds	r3, r7, r3
   15be2:	781b      	ldrb	r3, [r3, #0]
   15be4:	2b00      	cmp	r3, #0
   15be6:	d003      	beq.n	15bf0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   15be8:	2315      	movs	r3, #21
   15bea:	18fb      	adds	r3, r7, r3
   15bec:	781b      	ldrb	r3, [r3, #0]
   15bee:	e02b      	b.n	15c48 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   15bf0:	2316      	movs	r3, #22
   15bf2:	18fb      	adds	r3, r7, r3
   15bf4:	881b      	ldrh	r3, [r3, #0]
   15bf6:	2216      	movs	r2, #22
   15bf8:	18ba      	adds	r2, r7, r2
   15bfa:	1c59      	adds	r1, r3, #1
   15bfc:	8011      	strh	r1, [r2, #0]
   15bfe:	001a      	movs	r2, r3
   15c00:	68bb      	ldr	r3, [r7, #8]
   15c02:	189b      	adds	r3, r3, r2
   15c04:	2212      	movs	r2, #18
   15c06:	18ba      	adds	r2, r7, r2
   15c08:	8812      	ldrh	r2, [r2, #0]
   15c0a:	b2d2      	uxtb	r2, r2
   15c0c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15c0e:	68fb      	ldr	r3, [r7, #12]
   15c10:	799b      	ldrb	r3, [r3, #6]
   15c12:	2b01      	cmp	r3, #1
   15c14:	d110      	bne.n	15c38 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   15c16:	2316      	movs	r3, #22
   15c18:	18fb      	adds	r3, r7, r3
   15c1a:	881b      	ldrh	r3, [r3, #0]
   15c1c:	2216      	movs	r2, #22
   15c1e:	18ba      	adds	r2, r7, r2
   15c20:	1c59      	adds	r1, r3, #1
   15c22:	8011      	strh	r1, [r2, #0]
   15c24:	001a      	movs	r2, r3
   15c26:	68bb      	ldr	r3, [r7, #8]
   15c28:	189b      	adds	r3, r3, r2
   15c2a:	2212      	movs	r2, #18
   15c2c:	18ba      	adds	r2, r7, r2
   15c2e:	8812      	ldrh	r2, [r2, #0]
   15c30:	0a12      	lsrs	r2, r2, #8
   15c32:	b292      	uxth	r2, r2
   15c34:	b2d2      	uxtb	r2, r2
   15c36:	701a      	strb	r2, [r3, #0]
	while (length--) {
   15c38:	1dbb      	adds	r3, r7, #6
   15c3a:	881b      	ldrh	r3, [r3, #0]
   15c3c:	1dba      	adds	r2, r7, #6
   15c3e:	1e59      	subs	r1, r3, #1
   15c40:	8011      	strh	r1, [r2, #0]
   15c42:	2b00      	cmp	r3, #0
   15c44:	d199      	bne.n	15b7a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   15c46:	2300      	movs	r3, #0
}
   15c48:	0018      	movs	r0, r3
   15c4a:	46bd      	mov	sp, r7
   15c4c:	b007      	add	sp, #28
   15c4e:	bd90      	pop	{r4, r7, pc}
   15c50:	000155a5 	.word	0x000155a5
   15c54:	000155f5 	.word	0x000155f5
   15c58:	000155cd 	.word	0x000155cd
   15c5c:	0001563d 	.word	0x0001563d

00015c60 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   15c60:	b580      	push	{r7, lr}
   15c62:	b086      	sub	sp, #24
   15c64:	af00      	add	r7, sp, #0
   15c66:	60f8      	str	r0, [r7, #12]
   15c68:	60b9      	str	r1, [r7, #8]
   15c6a:	1dfb      	adds	r3, r7, #7
   15c6c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   15c6e:	68fb      	ldr	r3, [r7, #12]
   15c70:	795b      	ldrb	r3, [r3, #5]
   15c72:	2b01      	cmp	r3, #1
   15c74:	d001      	beq.n	15c7a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   15c76:	2315      	movs	r3, #21
   15c78:	e05c      	b.n	15d34 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   15c7a:	68fb      	ldr	r3, [r7, #12]
   15c7c:	7a1b      	ldrb	r3, [r3, #8]
   15c7e:	2201      	movs	r2, #1
   15c80:	4053      	eors	r3, r2
   15c82:	b2db      	uxtb	r3, r3
   15c84:	2b00      	cmp	r3, #0
   15c86:	d054      	beq.n	15d32 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   15c88:	1dfb      	adds	r3, r7, #7
   15c8a:	781b      	ldrb	r3, [r3, #0]
   15c8c:	2b00      	cmp	r3, #0
   15c8e:	d04a      	beq.n	15d26 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   15c90:	68bb      	ldr	r3, [r7, #8]
   15c92:	785b      	ldrb	r3, [r3, #1]
   15c94:	2b00      	cmp	r3, #0
   15c96:	d03f      	beq.n	15d18 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   15c98:	68fb      	ldr	r3, [r7, #12]
   15c9a:	0018      	movs	r0, r3
   15c9c:	4b27      	ldr	r3, [pc, #156]	; (15d3c <spi_select_slave+0xdc>)
   15c9e:	4798      	blx	r3
   15ca0:	0003      	movs	r3, r0
   15ca2:	001a      	movs	r2, r3
   15ca4:	2301      	movs	r3, #1
   15ca6:	4053      	eors	r3, r2
   15ca8:	b2db      	uxtb	r3, r3
   15caa:	2b00      	cmp	r3, #0
   15cac:	d007      	beq.n	15cbe <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   15cae:	68bb      	ldr	r3, [r7, #8]
   15cb0:	781b      	ldrb	r3, [r3, #0]
   15cb2:	2101      	movs	r1, #1
   15cb4:	0018      	movs	r0, r3
   15cb6:	4b22      	ldr	r3, [pc, #136]	; (15d40 <spi_select_slave+0xe0>)
   15cb8:	4798      	blx	r3
					return STATUS_BUSY;
   15cba:	2305      	movs	r3, #5
   15cbc:	e03a      	b.n	15d34 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   15cbe:	68bb      	ldr	r3, [r7, #8]
   15cc0:	781b      	ldrb	r3, [r3, #0]
   15cc2:	2100      	movs	r1, #0
   15cc4:	0018      	movs	r0, r3
   15cc6:	4b1e      	ldr	r3, [pc, #120]	; (15d40 <spi_select_slave+0xe0>)
   15cc8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   15cca:	68bb      	ldr	r3, [r7, #8]
   15ccc:	789b      	ldrb	r3, [r3, #2]
   15cce:	b29a      	uxth	r2, r3
   15cd0:	68fb      	ldr	r3, [r7, #12]
   15cd2:	0011      	movs	r1, r2
   15cd4:	0018      	movs	r0, r3
   15cd6:	4b1b      	ldr	r3, [pc, #108]	; (15d44 <spi_select_slave+0xe4>)
   15cd8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   15cda:	68fb      	ldr	r3, [r7, #12]
   15cdc:	79db      	ldrb	r3, [r3, #7]
   15cde:	2201      	movs	r2, #1
   15ce0:	4053      	eors	r3, r2
   15ce2:	b2db      	uxtb	r3, r3
   15ce4:	2b00      	cmp	r3, #0
   15ce6:	d024      	beq.n	15d32 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   15ce8:	46c0      	nop			; (mov r8, r8)
   15cea:	68fb      	ldr	r3, [r7, #12]
   15cec:	0018      	movs	r0, r3
   15cee:	4b16      	ldr	r3, [pc, #88]	; (15d48 <spi_select_slave+0xe8>)
   15cf0:	4798      	blx	r3
   15cf2:	0003      	movs	r3, r0
   15cf4:	001a      	movs	r2, r3
   15cf6:	2301      	movs	r3, #1
   15cf8:	4053      	eors	r3, r2
   15cfa:	b2db      	uxtb	r3, r3
   15cfc:	2b00      	cmp	r3, #0
   15cfe:	d1f4      	bne.n	15cea <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   15d00:	2316      	movs	r3, #22
   15d02:	18fb      	adds	r3, r7, r3
   15d04:	2200      	movs	r2, #0
   15d06:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   15d08:	2316      	movs	r3, #22
   15d0a:	18fa      	adds	r2, r7, r3
   15d0c:	68fb      	ldr	r3, [r7, #12]
   15d0e:	0011      	movs	r1, r2
   15d10:	0018      	movs	r0, r3
   15d12:	4b0e      	ldr	r3, [pc, #56]	; (15d4c <spi_select_slave+0xec>)
   15d14:	4798      	blx	r3
   15d16:	e00c      	b.n	15d32 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   15d18:	68bb      	ldr	r3, [r7, #8]
   15d1a:	781b      	ldrb	r3, [r3, #0]
   15d1c:	2100      	movs	r1, #0
   15d1e:	0018      	movs	r0, r3
   15d20:	4b07      	ldr	r3, [pc, #28]	; (15d40 <spi_select_slave+0xe0>)
   15d22:	4798      	blx	r3
   15d24:	e005      	b.n	15d32 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   15d26:	68bb      	ldr	r3, [r7, #8]
   15d28:	781b      	ldrb	r3, [r3, #0]
   15d2a:	2101      	movs	r1, #1
   15d2c:	0018      	movs	r0, r3
   15d2e:	4b04      	ldr	r3, [pc, #16]	; (15d40 <spi_select_slave+0xe0>)
   15d30:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   15d32:	2300      	movs	r3, #0
}
   15d34:	0018      	movs	r0, r3
   15d36:	46bd      	mov	sp, r7
   15d38:	b006      	add	sp, #24
   15d3a:	bd80      	pop	{r7, pc}
   15d3c:	000155a5 	.word	0x000155a5
   15d40:	0001536d 	.word	0x0001536d
   15d44:	000155f5 	.word	0x000155f5
   15d48:	000155cd 	.word	0x000155cd
   15d4c:	0001563d 	.word	0x0001563d

00015d50 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   15d50:	b580      	push	{r7, lr}
   15d52:	b086      	sub	sp, #24
   15d54:	af00      	add	r7, sp, #0
   15d56:	60f8      	str	r0, [r7, #12]
   15d58:	60b9      	str	r1, [r7, #8]
   15d5a:	1dbb      	adds	r3, r7, #6
   15d5c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   15d5e:	68fb      	ldr	r3, [r7, #12]
   15d60:	2238      	movs	r2, #56	; 0x38
   15d62:	5c9b      	ldrb	r3, [r3, r2]
   15d64:	b2db      	uxtb	r3, r3
   15d66:	2b05      	cmp	r3, #5
   15d68:	d101      	bne.n	15d6e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   15d6a:	2305      	movs	r3, #5
   15d6c:	e087      	b.n	15e7e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   15d6e:	1dbb      	adds	r3, r7, #6
   15d70:	881b      	ldrh	r3, [r3, #0]
   15d72:	2b00      	cmp	r3, #0
   15d74:	d101      	bne.n	15d7a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   15d76:	2317      	movs	r3, #23
   15d78:	e081      	b.n	15e7e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   15d7a:	2316      	movs	r3, #22
   15d7c:	18fb      	adds	r3, r7, r3
   15d7e:	2200      	movs	r2, #0
   15d80:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   15d82:	2314      	movs	r3, #20
   15d84:	18fb      	adds	r3, r7, r3
   15d86:	1dba      	adds	r2, r7, #6
   15d88:	8812      	ldrh	r2, [r2, #0]
   15d8a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   15d8c:	e05f      	b.n	15e4e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   15d8e:	46c0      	nop			; (mov r8, r8)
   15d90:	68fb      	ldr	r3, [r7, #12]
   15d92:	0018      	movs	r0, r3
   15d94:	4b3c      	ldr	r3, [pc, #240]	; (15e88 <spi_write_buffer_wait+0x138>)
   15d96:	4798      	blx	r3
   15d98:	0003      	movs	r3, r0
   15d9a:	001a      	movs	r2, r3
   15d9c:	2301      	movs	r3, #1
   15d9e:	4053      	eors	r3, r2
   15da0:	b2db      	uxtb	r3, r3
   15da2:	2b00      	cmp	r3, #0
   15da4:	d1f4      	bne.n	15d90 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   15da6:	2316      	movs	r3, #22
   15da8:	18fb      	adds	r3, r7, r3
   15daa:	881b      	ldrh	r3, [r3, #0]
   15dac:	2216      	movs	r2, #22
   15dae:	18ba      	adds	r2, r7, r2
   15db0:	1c59      	adds	r1, r3, #1
   15db2:	8011      	strh	r1, [r2, #0]
   15db4:	001a      	movs	r2, r3
   15db6:	68bb      	ldr	r3, [r7, #8]
   15db8:	189b      	adds	r3, r3, r2
   15dba:	781a      	ldrb	r2, [r3, #0]
   15dbc:	2312      	movs	r3, #18
   15dbe:	18fb      	adds	r3, r7, r3
   15dc0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15dc2:	68fb      	ldr	r3, [r7, #12]
   15dc4:	799b      	ldrb	r3, [r3, #6]
   15dc6:	2b01      	cmp	r3, #1
   15dc8:	d115      	bne.n	15df6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   15dca:	2316      	movs	r3, #22
   15dcc:	18fb      	adds	r3, r7, r3
   15dce:	881b      	ldrh	r3, [r3, #0]
   15dd0:	2216      	movs	r2, #22
   15dd2:	18ba      	adds	r2, r7, r2
   15dd4:	1c59      	adds	r1, r3, #1
   15dd6:	8011      	strh	r1, [r2, #0]
   15dd8:	001a      	movs	r2, r3
   15dda:	68bb      	ldr	r3, [r7, #8]
   15ddc:	189b      	adds	r3, r3, r2
   15dde:	781b      	ldrb	r3, [r3, #0]
   15de0:	021b      	lsls	r3, r3, #8
   15de2:	b21a      	sxth	r2, r3
   15de4:	2312      	movs	r3, #18
   15de6:	18fb      	adds	r3, r7, r3
   15de8:	2100      	movs	r1, #0
   15dea:	5e5b      	ldrsh	r3, [r3, r1]
   15dec:	4313      	orrs	r3, r2
   15dee:	b21a      	sxth	r2, r3
   15df0:	2312      	movs	r3, #18
   15df2:	18fb      	adds	r3, r7, r3
   15df4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   15df6:	2312      	movs	r3, #18
   15df8:	18fb      	adds	r3, r7, r3
   15dfa:	881a      	ldrh	r2, [r3, #0]
   15dfc:	68fb      	ldr	r3, [r7, #12]
   15dfe:	0011      	movs	r1, r2
   15e00:	0018      	movs	r0, r3
   15e02:	4b22      	ldr	r3, [pc, #136]	; (15e8c <spi_write_buffer_wait+0x13c>)
   15e04:	4798      	blx	r3

		if (module->receiver_enabled) {
   15e06:	68fb      	ldr	r3, [r7, #12]
   15e08:	79db      	ldrb	r3, [r3, #7]
   15e0a:	2214      	movs	r2, #20
   15e0c:	18ba      	adds	r2, r7, r2
   15e0e:	2114      	movs	r1, #20
   15e10:	1879      	adds	r1, r7, r1
   15e12:	8809      	ldrh	r1, [r1, #0]
   15e14:	8011      	strh	r1, [r2, #0]
   15e16:	2b00      	cmp	r3, #0
   15e18:	d019      	beq.n	15e4e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   15e1a:	46c0      	nop			; (mov r8, r8)
   15e1c:	68fb      	ldr	r3, [r7, #12]
   15e1e:	0018      	movs	r0, r3
   15e20:	4b1b      	ldr	r3, [pc, #108]	; (15e90 <spi_write_buffer_wait+0x140>)
   15e22:	4798      	blx	r3
   15e24:	0003      	movs	r3, r0
   15e26:	001a      	movs	r2, r3
   15e28:	2301      	movs	r3, #1
   15e2a:	4053      	eors	r3, r2
   15e2c:	b2db      	uxtb	r3, r3
   15e2e:	2b00      	cmp	r3, #0
   15e30:	d1f4      	bne.n	15e1c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   15e32:	2310      	movs	r3, #16
   15e34:	18fa      	adds	r2, r7, r3
   15e36:	68fb      	ldr	r3, [r7, #12]
   15e38:	0011      	movs	r1, r2
   15e3a:	0018      	movs	r0, r3
   15e3c:	4b15      	ldr	r3, [pc, #84]	; (15e94 <spi_write_buffer_wait+0x144>)
   15e3e:	4798      	blx	r3
			flush_length--;
   15e40:	2314      	movs	r3, #20
   15e42:	18fb      	adds	r3, r7, r3
   15e44:	881a      	ldrh	r2, [r3, #0]
   15e46:	2314      	movs	r3, #20
   15e48:	18fb      	adds	r3, r7, r3
   15e4a:	3a01      	subs	r2, #1
   15e4c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   15e4e:	1dbb      	adds	r3, r7, #6
   15e50:	881b      	ldrh	r3, [r3, #0]
   15e52:	1dba      	adds	r2, r7, #6
   15e54:	1e59      	subs	r1, r3, #1
   15e56:	8011      	strh	r1, [r2, #0]
   15e58:	2b00      	cmp	r3, #0
   15e5a:	d198      	bne.n	15d8e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   15e5c:	68fb      	ldr	r3, [r7, #12]
   15e5e:	795b      	ldrb	r3, [r3, #5]
   15e60:	2b01      	cmp	r3, #1
   15e62:	d10b      	bne.n	15e7c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   15e64:	46c0      	nop			; (mov r8, r8)
   15e66:	68fb      	ldr	r3, [r7, #12]
   15e68:	0018      	movs	r0, r3
   15e6a:	4b0b      	ldr	r3, [pc, #44]	; (15e98 <spi_write_buffer_wait+0x148>)
   15e6c:	4798      	blx	r3
   15e6e:	0003      	movs	r3, r0
   15e70:	001a      	movs	r2, r3
   15e72:	2301      	movs	r3, #1
   15e74:	4053      	eors	r3, r2
   15e76:	b2db      	uxtb	r3, r3
   15e78:	2b00      	cmp	r3, #0
   15e7a:	d1f4      	bne.n	15e66 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   15e7c:	2300      	movs	r3, #0
}
   15e7e:	0018      	movs	r0, r3
   15e80:	46bd      	mov	sp, r7
   15e82:	b006      	add	sp, #24
   15e84:	bd80      	pop	{r7, pc}
   15e86:	46c0      	nop			; (mov r8, r8)
   15e88:	000155a5 	.word	0x000155a5
   15e8c:	000155f5 	.word	0x000155f5
   15e90:	000155cd 	.word	0x000155cd
   15e94:	0001563d 	.word	0x0001563d
   15e98:	0001557d 	.word	0x0001557d

00015e9c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   15e9c:	b580      	push	{r7, lr}
   15e9e:	b084      	sub	sp, #16
   15ea0:	af00      	add	r7, sp, #0
   15ea2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   15ea4:	687b      	ldr	r3, [r7, #4]
   15ea6:	681b      	ldr	r3, [r3, #0]
   15ea8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   15eaa:	687b      	ldr	r3, [r7, #4]
   15eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15eae:	781b      	ldrb	r3, [r3, #0]
   15eb0:	b2da      	uxtb	r2, r3
   15eb2:	230e      	movs	r3, #14
   15eb4:	18fb      	adds	r3, r7, r3
   15eb6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   15eb8:	687b      	ldr	r3, [r7, #4]
   15eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15ebc:	1c5a      	adds	r2, r3, #1
   15ebe:	687b      	ldr	r3, [r7, #4]
   15ec0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15ec2:	687b      	ldr	r3, [r7, #4]
   15ec4:	799b      	ldrb	r3, [r3, #6]
   15ec6:	2b01      	cmp	r3, #1
   15ec8:	d113      	bne.n	15ef2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   15eca:	687b      	ldr	r3, [r7, #4]
   15ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15ece:	781b      	ldrb	r3, [r3, #0]
   15ed0:	b2db      	uxtb	r3, r3
   15ed2:	021b      	lsls	r3, r3, #8
   15ed4:	b21a      	sxth	r2, r3
   15ed6:	230e      	movs	r3, #14
   15ed8:	18fb      	adds	r3, r7, r3
   15eda:	2100      	movs	r1, #0
   15edc:	5e5b      	ldrsh	r3, [r3, r1]
   15ede:	4313      	orrs	r3, r2
   15ee0:	b21a      	sxth	r2, r3
   15ee2:	230e      	movs	r3, #14
   15ee4:	18fb      	adds	r3, r7, r3
   15ee6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   15ee8:	687b      	ldr	r3, [r7, #4]
   15eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15eec:	1c5a      	adds	r2, r3, #1
   15eee:	687b      	ldr	r3, [r7, #4]
   15ef0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   15ef2:	230e      	movs	r3, #14
   15ef4:	18fb      	adds	r3, r7, r3
   15ef6:	881b      	ldrh	r3, [r3, #0]
   15ef8:	05db      	lsls	r3, r3, #23
   15efa:	0dda      	lsrs	r2, r3, #23
   15efc:	68bb      	ldr	r3, [r7, #8]
   15efe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   15f00:	687b      	ldr	r3, [r7, #4]
   15f02:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   15f04:	b29b      	uxth	r3, r3
   15f06:	3b01      	subs	r3, #1
   15f08:	b29a      	uxth	r2, r3
   15f0a:	687b      	ldr	r3, [r7, #4]
   15f0c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   15f0e:	46c0      	nop			; (mov r8, r8)
   15f10:	46bd      	mov	sp, r7
   15f12:	b004      	add	sp, #16
   15f14:	bd80      	pop	{r7, pc}
	...

00015f18 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   15f18:	b580      	push	{r7, lr}
   15f1a:	b084      	sub	sp, #16
   15f1c:	af00      	add	r7, sp, #0
   15f1e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   15f20:	687b      	ldr	r3, [r7, #4]
   15f22:	681b      	ldr	r3, [r3, #0]
   15f24:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   15f26:	4b08      	ldr	r3, [pc, #32]	; (15f48 <_spi_write_dummy+0x30>)
   15f28:	881b      	ldrh	r3, [r3, #0]
   15f2a:	001a      	movs	r2, r3
   15f2c:	68fb      	ldr	r3, [r7, #12]
   15f2e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   15f30:	687b      	ldr	r3, [r7, #4]
   15f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   15f34:	b29b      	uxth	r3, r3
   15f36:	3b01      	subs	r3, #1
   15f38:	b29a      	uxth	r2, r3
   15f3a:	687b      	ldr	r3, [r7, #4]
   15f3c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   15f3e:	46c0      	nop			; (mov r8, r8)
   15f40:	46bd      	mov	sp, r7
   15f42:	b004      	add	sp, #16
   15f44:	bd80      	pop	{r7, pc}
   15f46:	46c0      	nop			; (mov r8, r8)
   15f48:	20005d00 	.word	0x20005d00

00015f4c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   15f4c:	b580      	push	{r7, lr}
   15f4e:	b084      	sub	sp, #16
   15f50:	af00      	add	r7, sp, #0
   15f52:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   15f54:	687b      	ldr	r3, [r7, #4]
   15f56:	681b      	ldr	r3, [r3, #0]
   15f58:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   15f5a:	230a      	movs	r3, #10
   15f5c:	18fb      	adds	r3, r7, r3
   15f5e:	2200      	movs	r2, #0
   15f60:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   15f62:	68fb      	ldr	r3, [r7, #12]
   15f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15f66:	230a      	movs	r3, #10
   15f68:	18fb      	adds	r3, r7, r3
   15f6a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   15f6c:	687b      	ldr	r3, [r7, #4]
   15f6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   15f70:	b29b      	uxth	r3, r3
   15f72:	3b01      	subs	r3, #1
   15f74:	b29a      	uxth	r2, r3
   15f76:	687b      	ldr	r3, [r7, #4]
   15f78:	865a      	strh	r2, [r3, #50]	; 0x32
}
   15f7a:	46c0      	nop			; (mov r8, r8)
   15f7c:	46bd      	mov	sp, r7
   15f7e:	b004      	add	sp, #16
   15f80:	bd80      	pop	{r7, pc}

00015f82 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   15f82:	b580      	push	{r7, lr}
   15f84:	b084      	sub	sp, #16
   15f86:	af00      	add	r7, sp, #0
   15f88:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   15f8a:	687b      	ldr	r3, [r7, #4]
   15f8c:	681b      	ldr	r3, [r3, #0]
   15f8e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   15f90:	68fb      	ldr	r3, [r7, #12]
   15f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f94:	b29a      	uxth	r2, r3
   15f96:	230a      	movs	r3, #10
   15f98:	18fb      	adds	r3, r7, r3
   15f9a:	05d2      	lsls	r2, r2, #23
   15f9c:	0dd2      	lsrs	r2, r2, #23
   15f9e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   15fa0:	687b      	ldr	r3, [r7, #4]
   15fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15fa4:	220a      	movs	r2, #10
   15fa6:	18ba      	adds	r2, r7, r2
   15fa8:	8812      	ldrh	r2, [r2, #0]
   15faa:	b2d2      	uxtb	r2, r2
   15fac:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   15fae:	687b      	ldr	r3, [r7, #4]
   15fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15fb2:	1c5a      	adds	r2, r3, #1
   15fb4:	687b      	ldr	r3, [r7, #4]
   15fb6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15fb8:	687b      	ldr	r3, [r7, #4]
   15fba:	799b      	ldrb	r3, [r3, #6]
   15fbc:	2b01      	cmp	r3, #1
   15fbe:	d10d      	bne.n	15fdc <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   15fc0:	687b      	ldr	r3, [r7, #4]
   15fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15fc4:	220a      	movs	r2, #10
   15fc6:	18ba      	adds	r2, r7, r2
   15fc8:	8812      	ldrh	r2, [r2, #0]
   15fca:	0a12      	lsrs	r2, r2, #8
   15fcc:	b292      	uxth	r2, r2
   15fce:	b2d2      	uxtb	r2, r2
   15fd0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   15fd2:	687b      	ldr	r3, [r7, #4]
   15fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15fd6:	1c5a      	adds	r2, r3, #1
   15fd8:	687b      	ldr	r3, [r7, #4]
   15fda:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   15fdc:	687b      	ldr	r3, [r7, #4]
   15fde:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   15fe0:	b29b      	uxth	r3, r3
   15fe2:	3b01      	subs	r3, #1
   15fe4:	b29a      	uxth	r2, r3
   15fe6:	687b      	ldr	r3, [r7, #4]
   15fe8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   15fea:	46c0      	nop			; (mov r8, r8)
   15fec:	46bd      	mov	sp, r7
   15fee:	b004      	add	sp, #16
   15ff0:	bd80      	pop	{r7, pc}
	...

00015ff4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   15ff4:	b580      	push	{r7, lr}
   15ff6:	b086      	sub	sp, #24
   15ff8:	af00      	add	r7, sp, #0
   15ffa:	0002      	movs	r2, r0
   15ffc:	1dfb      	adds	r3, r7, #7
   15ffe:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   16000:	1dfb      	adds	r3, r7, #7
   16002:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   16004:	4b96      	ldr	r3, [pc, #600]	; (16260 <_spi_interrupt_handler+0x26c>)
   16006:	0092      	lsls	r2, r2, #2
   16008:	58d3      	ldr	r3, [r2, r3]
   1600a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1600c:	697b      	ldr	r3, [r7, #20]
   1600e:	681b      	ldr	r3, [r3, #0]
   16010:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   16012:	697b      	ldr	r3, [r7, #20]
   16014:	2237      	movs	r2, #55	; 0x37
   16016:	5c9a      	ldrb	r2, [r3, r2]
   16018:	697b      	ldr	r3, [r7, #20]
   1601a:	2136      	movs	r1, #54	; 0x36
   1601c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   1601e:	230f      	movs	r3, #15
   16020:	18fb      	adds	r3, r7, r3
   16022:	400a      	ands	r2, r1
   16024:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   16026:	693b      	ldr	r3, [r7, #16]
   16028:	7e1b      	ldrb	r3, [r3, #24]
   1602a:	b2da      	uxtb	r2, r3
   1602c:	230c      	movs	r3, #12
   1602e:	18fb      	adds	r3, r7, r3
   16030:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   16032:	693b      	ldr	r3, [r7, #16]
   16034:	7d9b      	ldrb	r3, [r3, #22]
   16036:	b2db      	uxtb	r3, r3
   16038:	b29a      	uxth	r2, r3
   1603a:	230c      	movs	r3, #12
   1603c:	18fb      	adds	r3, r7, r3
   1603e:	210c      	movs	r1, #12
   16040:	1879      	adds	r1, r7, r1
   16042:	8809      	ldrh	r1, [r1, #0]
   16044:	400a      	ands	r2, r1
   16046:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   16048:	230c      	movs	r3, #12
   1604a:	18fb      	adds	r3, r7, r3
   1604c:	881b      	ldrh	r3, [r3, #0]
   1604e:	2201      	movs	r2, #1
   16050:	4013      	ands	r3, r2
   16052:	d038      	beq.n	160c6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   16054:	697b      	ldr	r3, [r7, #20]
   16056:	795b      	ldrb	r3, [r3, #5]
   16058:	2b01      	cmp	r3, #1
   1605a:	d110      	bne.n	1607e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   1605c:	697b      	ldr	r3, [r7, #20]
   1605e:	7a5b      	ldrb	r3, [r3, #9]
   16060:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   16062:	2b00      	cmp	r3, #0
   16064:	d10b      	bne.n	1607e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   16066:	697b      	ldr	r3, [r7, #20]
   16068:	0018      	movs	r0, r3
   1606a:	4b7e      	ldr	r3, [pc, #504]	; (16264 <_spi_interrupt_handler+0x270>)
   1606c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   1606e:	697b      	ldr	r3, [r7, #20]
   16070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   16072:	b29b      	uxth	r3, r3
   16074:	2b00      	cmp	r3, #0
   16076:	d102      	bne.n	1607e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   16078:	693b      	ldr	r3, [r7, #16]
   1607a:	2201      	movs	r2, #1
   1607c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   1607e:	697b      	ldr	r3, [r7, #20]
   16080:	795b      	ldrb	r3, [r3, #5]
		if (0
   16082:	2b01      	cmp	r3, #1
   16084:	d11f      	bne.n	160c6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   16086:	697b      	ldr	r3, [r7, #20]
   16088:	7a5b      	ldrb	r3, [r3, #9]
   1608a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   1608c:	2b00      	cmp	r3, #0
   1608e:	d01a      	beq.n	160c6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   16090:	697b      	ldr	r3, [r7, #20]
   16092:	0018      	movs	r0, r3
   16094:	4b74      	ldr	r3, [pc, #464]	; (16268 <_spi_interrupt_handler+0x274>)
   16096:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   16098:	697b      	ldr	r3, [r7, #20]
   1609a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1609c:	b29b      	uxth	r3, r3
   1609e:	2b00      	cmp	r3, #0
   160a0:	d111      	bne.n	160c6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   160a2:	693b      	ldr	r3, [r7, #16]
   160a4:	2201      	movs	r2, #1
   160a6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   160a8:	697b      	ldr	r3, [r7, #20]
   160aa:	7a5b      	ldrb	r3, [r3, #9]
   160ac:	b2db      	uxtb	r3, r3
   160ae:	2b01      	cmp	r3, #1
   160b0:	d109      	bne.n	160c6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   160b2:	697b      	ldr	r3, [r7, #20]
   160b4:	79db      	ldrb	r3, [r3, #7]
   160b6:	2201      	movs	r2, #1
   160b8:	4053      	eors	r3, r2
   160ba:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   160bc:	2b00      	cmp	r3, #0
   160be:	d002      	beq.n	160c6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   160c0:	693b      	ldr	r3, [r7, #16]
   160c2:	2202      	movs	r2, #2
   160c4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   160c6:	230c      	movs	r3, #12
   160c8:	18fb      	adds	r3, r7, r3
   160ca:	881b      	ldrh	r3, [r3, #0]
   160cc:	2204      	movs	r2, #4
   160ce:	4013      	ands	r3, r2
   160d0:	d100      	bne.n	160d4 <_spi_interrupt_handler+0xe0>
   160d2:	e07e      	b.n	161d2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   160d4:	693b      	ldr	r3, [r7, #16]
   160d6:	8b5b      	ldrh	r3, [r3, #26]
   160d8:	b29b      	uxth	r3, r3
   160da:	001a      	movs	r2, r3
   160dc:	2304      	movs	r3, #4
   160de:	4013      	ands	r3, r2
   160e0:	d022      	beq.n	16128 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   160e2:	697b      	ldr	r3, [r7, #20]
   160e4:	7a5b      	ldrb	r3, [r3, #9]
   160e6:	b2db      	uxtb	r3, r3
   160e8:	2b01      	cmp	r3, #1
   160ea:	d014      	beq.n	16116 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   160ec:	697b      	ldr	r3, [r7, #20]
   160ee:	2238      	movs	r2, #56	; 0x38
   160f0:	211e      	movs	r1, #30
   160f2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   160f4:	697b      	ldr	r3, [r7, #20]
   160f6:	2203      	movs	r2, #3
   160f8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   160fa:	693b      	ldr	r3, [r7, #16]
   160fc:	2205      	movs	r2, #5
   160fe:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   16100:	230f      	movs	r3, #15
   16102:	18fb      	adds	r3, r7, r3
   16104:	781b      	ldrb	r3, [r3, #0]
   16106:	2208      	movs	r2, #8
   16108:	4013      	ands	r3, r2
   1610a:	d004      	beq.n	16116 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   1610c:	697b      	ldr	r3, [r7, #20]
   1610e:	699b      	ldr	r3, [r3, #24]
   16110:	697a      	ldr	r2, [r7, #20]
   16112:	0010      	movs	r0, r2
   16114:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   16116:	693b      	ldr	r3, [r7, #16]
   16118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1611a:	230a      	movs	r3, #10
   1611c:	18fb      	adds	r3, r7, r3
   1611e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   16120:	693b      	ldr	r3, [r7, #16]
   16122:	2204      	movs	r2, #4
   16124:	835a      	strh	r2, [r3, #26]
   16126:	e054      	b.n	161d2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   16128:	697b      	ldr	r3, [r7, #20]
   1612a:	7a5b      	ldrb	r3, [r3, #9]
   1612c:	b2db      	uxtb	r3, r3
   1612e:	2b01      	cmp	r3, #1
   16130:	d11e      	bne.n	16170 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   16132:	697b      	ldr	r3, [r7, #20]
   16134:	0018      	movs	r0, r3
   16136:	4b4d      	ldr	r3, [pc, #308]	; (1626c <_spi_interrupt_handler+0x278>)
   16138:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   1613a:	697b      	ldr	r3, [r7, #20]
   1613c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1613e:	b29b      	uxth	r3, r3
   16140:	2b00      	cmp	r3, #0
   16142:	d146      	bne.n	161d2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   16144:	693b      	ldr	r3, [r7, #16]
   16146:	2204      	movs	r2, #4
   16148:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   1614a:	697b      	ldr	r3, [r7, #20]
   1614c:	2238      	movs	r2, #56	; 0x38
   1614e:	2100      	movs	r1, #0
   16150:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   16152:	697b      	ldr	r3, [r7, #20]
   16154:	2203      	movs	r2, #3
   16156:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   16158:	230f      	movs	r3, #15
   1615a:	18fb      	adds	r3, r7, r3
   1615c:	781b      	ldrb	r3, [r3, #0]
   1615e:	2201      	movs	r2, #1
   16160:	4013      	ands	r3, r2
   16162:	d036      	beq.n	161d2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   16164:	697b      	ldr	r3, [r7, #20]
   16166:	68db      	ldr	r3, [r3, #12]
   16168:	697a      	ldr	r2, [r7, #20]
   1616a:	0010      	movs	r0, r2
   1616c:	4798      	blx	r3
   1616e:	e030      	b.n	161d2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   16170:	697b      	ldr	r3, [r7, #20]
   16172:	0018      	movs	r0, r3
   16174:	4b3e      	ldr	r3, [pc, #248]	; (16270 <_spi_interrupt_handler+0x27c>)
   16176:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   16178:	697b      	ldr	r3, [r7, #20]
   1617a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1617c:	b29b      	uxth	r3, r3
   1617e:	2b00      	cmp	r3, #0
   16180:	d127      	bne.n	161d2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   16182:	697b      	ldr	r3, [r7, #20]
   16184:	2238      	movs	r2, #56	; 0x38
   16186:	2100      	movs	r1, #0
   16188:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1618a:	693b      	ldr	r3, [r7, #16]
   1618c:	2204      	movs	r2, #4
   1618e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   16190:	697b      	ldr	r3, [r7, #20]
   16192:	7a5b      	ldrb	r3, [r3, #9]
   16194:	b2db      	uxtb	r3, r3
   16196:	2b02      	cmp	r3, #2
   16198:	d10b      	bne.n	161b2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   1619a:	230f      	movs	r3, #15
   1619c:	18fb      	adds	r3, r7, r3
   1619e:	781b      	ldrb	r3, [r3, #0]
   161a0:	2204      	movs	r2, #4
   161a2:	4013      	ands	r3, r2
   161a4:	d015      	beq.n	161d2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   161a6:	697b      	ldr	r3, [r7, #20]
   161a8:	695b      	ldr	r3, [r3, #20]
   161aa:	697a      	ldr	r2, [r7, #20]
   161ac:	0010      	movs	r0, r2
   161ae:	4798      	blx	r3
   161b0:	e00f      	b.n	161d2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   161b2:	697b      	ldr	r3, [r7, #20]
   161b4:	7a5b      	ldrb	r3, [r3, #9]
   161b6:	b2db      	uxtb	r3, r3
   161b8:	2b00      	cmp	r3, #0
   161ba:	d10a      	bne.n	161d2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   161bc:	230f      	movs	r3, #15
   161be:	18fb      	adds	r3, r7, r3
   161c0:	781b      	ldrb	r3, [r3, #0]
   161c2:	2202      	movs	r2, #2
   161c4:	4013      	ands	r3, r2
   161c6:	d004      	beq.n	161d2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   161c8:	697b      	ldr	r3, [r7, #20]
   161ca:	691b      	ldr	r3, [r3, #16]
   161cc:	697a      	ldr	r2, [r7, #20]
   161ce:	0010      	movs	r0, r2
   161d0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   161d2:	230c      	movs	r3, #12
   161d4:	18fb      	adds	r3, r7, r3
   161d6:	881b      	ldrh	r3, [r3, #0]
   161d8:	2202      	movs	r2, #2
   161da:	4013      	ands	r3, r2
   161dc:	d024      	beq.n	16228 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   161de:	697b      	ldr	r3, [r7, #20]
   161e0:	795b      	ldrb	r3, [r3, #5]
   161e2:	2b01      	cmp	r3, #1
   161e4:	d120      	bne.n	16228 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   161e6:	697b      	ldr	r3, [r7, #20]
   161e8:	7a5b      	ldrb	r3, [r3, #9]
   161ea:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   161ec:	2b01      	cmp	r3, #1
   161ee:	d11b      	bne.n	16228 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   161f0:	697b      	ldr	r3, [r7, #20]
   161f2:	79db      	ldrb	r3, [r3, #7]
   161f4:	2201      	movs	r2, #1
   161f6:	4053      	eors	r3, r2
   161f8:	b2db      	uxtb	r3, r3
   161fa:	2b00      	cmp	r3, #0
   161fc:	d014      	beq.n	16228 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   161fe:	693b      	ldr	r3, [r7, #16]
   16200:	2202      	movs	r2, #2
   16202:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   16204:	697b      	ldr	r3, [r7, #20]
   16206:	2203      	movs	r2, #3
   16208:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   1620a:	697b      	ldr	r3, [r7, #20]
   1620c:	2238      	movs	r2, #56	; 0x38
   1620e:	2100      	movs	r1, #0
   16210:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   16212:	230f      	movs	r3, #15
   16214:	18fb      	adds	r3, r7, r3
   16216:	781b      	ldrb	r3, [r3, #0]
   16218:	2201      	movs	r2, #1
   1621a:	4013      	ands	r3, r2
   1621c:	d004      	beq.n	16228 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   1621e:	697b      	ldr	r3, [r7, #20]
   16220:	68db      	ldr	r3, [r3, #12]
   16222:	697a      	ldr	r2, [r7, #20]
   16224:	0010      	movs	r0, r2
   16226:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   16228:	230c      	movs	r3, #12
   1622a:	18fb      	adds	r3, r7, r3
   1622c:	881b      	ldrh	r3, [r3, #0]
   1622e:	2280      	movs	r2, #128	; 0x80
   16230:	4013      	ands	r3, r2
   16232:	d010      	beq.n	16256 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   16234:	693b      	ldr	r3, [r7, #16]
   16236:	2280      	movs	r2, #128	; 0x80
   16238:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1623a:	693b      	ldr	r3, [r7, #16]
   1623c:	2280      	movs	r2, #128	; 0x80
   1623e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   16240:	230f      	movs	r3, #15
   16242:	18fb      	adds	r3, r7, r3
   16244:	781b      	ldrb	r3, [r3, #0]
   16246:	2240      	movs	r2, #64	; 0x40
   16248:	4013      	ands	r3, r2
   1624a:	d004      	beq.n	16256 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1624c:	697b      	ldr	r3, [r7, #20]
   1624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16250:	697a      	ldr	r2, [r7, #20]
   16252:	0010      	movs	r0, r2
   16254:	4798      	blx	r3
		}
	}
#  endif
}
   16256:	46c0      	nop			; (mov r8, r8)
   16258:	46bd      	mov	sp, r7
   1625a:	b006      	add	sp, #24
   1625c:	bd80      	pop	{r7, pc}
   1625e:	46c0      	nop			; (mov r8, r8)
   16260:	20005ce8 	.word	0x20005ce8
   16264:	00015f19 	.word	0x00015f19
   16268:	00015e9d 	.word	0x00015e9d
   1626c:	00015f4d 	.word	0x00015f4d
   16270:	00015f83 	.word	0x00015f83

00016274 <system_gclk_chan_get_config_defaults>:
{
   16274:	b580      	push	{r7, lr}
   16276:	b082      	sub	sp, #8
   16278:	af00      	add	r7, sp, #0
   1627a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1627c:	687b      	ldr	r3, [r7, #4]
   1627e:	2200      	movs	r2, #0
   16280:	701a      	strb	r2, [r3, #0]
}
   16282:	46c0      	nop			; (mov r8, r8)
   16284:	46bd      	mov	sp, r7
   16286:	b002      	add	sp, #8
   16288:	bd80      	pop	{r7, pc}
	...

0001628c <system_apb_clock_set_mask>:
{
   1628c:	b580      	push	{r7, lr}
   1628e:	b082      	sub	sp, #8
   16290:	af00      	add	r7, sp, #0
   16292:	0002      	movs	r2, r0
   16294:	6039      	str	r1, [r7, #0]
   16296:	1dfb      	adds	r3, r7, #7
   16298:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1629a:	1dfb      	adds	r3, r7, #7
   1629c:	781b      	ldrb	r3, [r3, #0]
   1629e:	2b01      	cmp	r3, #1
   162a0:	d00a      	beq.n	162b8 <system_apb_clock_set_mask+0x2c>
   162a2:	2b02      	cmp	r3, #2
   162a4:	d00f      	beq.n	162c6 <system_apb_clock_set_mask+0x3a>
   162a6:	2b00      	cmp	r3, #0
   162a8:	d114      	bne.n	162d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   162aa:	4b0e      	ldr	r3, [pc, #56]	; (162e4 <system_apb_clock_set_mask+0x58>)
   162ac:	4a0d      	ldr	r2, [pc, #52]	; (162e4 <system_apb_clock_set_mask+0x58>)
   162ae:	6991      	ldr	r1, [r2, #24]
   162b0:	683a      	ldr	r2, [r7, #0]
   162b2:	430a      	orrs	r2, r1
   162b4:	619a      	str	r2, [r3, #24]
			break;
   162b6:	e00f      	b.n	162d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   162b8:	4b0a      	ldr	r3, [pc, #40]	; (162e4 <system_apb_clock_set_mask+0x58>)
   162ba:	4a0a      	ldr	r2, [pc, #40]	; (162e4 <system_apb_clock_set_mask+0x58>)
   162bc:	69d1      	ldr	r1, [r2, #28]
   162be:	683a      	ldr	r2, [r7, #0]
   162c0:	430a      	orrs	r2, r1
   162c2:	61da      	str	r2, [r3, #28]
			break;
   162c4:	e008      	b.n	162d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   162c6:	4b07      	ldr	r3, [pc, #28]	; (162e4 <system_apb_clock_set_mask+0x58>)
   162c8:	4a06      	ldr	r2, [pc, #24]	; (162e4 <system_apb_clock_set_mask+0x58>)
   162ca:	6a11      	ldr	r1, [r2, #32]
   162cc:	683a      	ldr	r2, [r7, #0]
   162ce:	430a      	orrs	r2, r1
   162d0:	621a      	str	r2, [r3, #32]
			break;
   162d2:	e001      	b.n	162d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   162d4:	2317      	movs	r3, #23
   162d6:	e000      	b.n	162da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   162d8:	2300      	movs	r3, #0
}
   162da:	0018      	movs	r0, r3
   162dc:	46bd      	mov	sp, r7
   162de:	b002      	add	sp, #8
   162e0:	bd80      	pop	{r7, pc}
   162e2:	46c0      	nop			; (mov r8, r8)
   162e4:	40000400 	.word	0x40000400

000162e8 <system_pinmux_get_config_defaults>:
{
   162e8:	b580      	push	{r7, lr}
   162ea:	b082      	sub	sp, #8
   162ec:	af00      	add	r7, sp, #0
   162ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   162f0:	687b      	ldr	r3, [r7, #4]
   162f2:	2280      	movs	r2, #128	; 0x80
   162f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   162f6:	687b      	ldr	r3, [r7, #4]
   162f8:	2200      	movs	r2, #0
   162fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   162fc:	687b      	ldr	r3, [r7, #4]
   162fe:	2201      	movs	r2, #1
   16300:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   16302:	687b      	ldr	r3, [r7, #4]
   16304:	2200      	movs	r2, #0
   16306:	70da      	strb	r2, [r3, #3]
}
   16308:	46c0      	nop			; (mov r8, r8)
   1630a:	46bd      	mov	sp, r7
   1630c:	b002      	add	sp, #8
   1630e:	bd80      	pop	{r7, pc}

00016310 <system_is_debugger_present>:
{
   16310:	b580      	push	{r7, lr}
   16312:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   16314:	4b05      	ldr	r3, [pc, #20]	; (1632c <system_is_debugger_present+0x1c>)
   16316:	789b      	ldrb	r3, [r3, #2]
   16318:	b2db      	uxtb	r3, r3
   1631a:	001a      	movs	r2, r3
   1631c:	2302      	movs	r3, #2
   1631e:	4013      	ands	r3, r2
   16320:	1e5a      	subs	r2, r3, #1
   16322:	4193      	sbcs	r3, r2
   16324:	b2db      	uxtb	r3, r3
}
   16326:	0018      	movs	r0, r3
   16328:	46bd      	mov	sp, r7
   1632a:	bd80      	pop	{r7, pc}
   1632c:	41002000 	.word	0x41002000

00016330 <usart_is_syncing>:
{
   16330:	b580      	push	{r7, lr}
   16332:	b084      	sub	sp, #16
   16334:	af00      	add	r7, sp, #0
   16336:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   16338:	687b      	ldr	r3, [r7, #4]
   1633a:	681b      	ldr	r3, [r3, #0]
   1633c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1633e:	68fb      	ldr	r3, [r7, #12]
   16340:	69db      	ldr	r3, [r3, #28]
   16342:	1e5a      	subs	r2, r3, #1
   16344:	4193      	sbcs	r3, r2
   16346:	b2db      	uxtb	r3, r3
}
   16348:	0018      	movs	r0, r3
   1634a:	46bd      	mov	sp, r7
   1634c:	b004      	add	sp, #16
   1634e:	bd80      	pop	{r7, pc}

00016350 <_usart_wait_for_sync>:
{
   16350:	b580      	push	{r7, lr}
   16352:	b082      	sub	sp, #8
   16354:	af00      	add	r7, sp, #0
   16356:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   16358:	46c0      	nop			; (mov r8, r8)
   1635a:	687b      	ldr	r3, [r7, #4]
   1635c:	0018      	movs	r0, r3
   1635e:	4b04      	ldr	r3, [pc, #16]	; (16370 <_usart_wait_for_sync+0x20>)
   16360:	4798      	blx	r3
   16362:	1e03      	subs	r3, r0, #0
   16364:	d1f9      	bne.n	1635a <_usart_wait_for_sync+0xa>
}
   16366:	46c0      	nop			; (mov r8, r8)
   16368:	46bd      	mov	sp, r7
   1636a:	b002      	add	sp, #8
   1636c:	bd80      	pop	{r7, pc}
   1636e:	46c0      	nop			; (mov r8, r8)
   16370:	00016331 	.word	0x00016331

00016374 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   16374:	b5b0      	push	{r4, r5, r7, lr}
   16376:	b08c      	sub	sp, #48	; 0x30
   16378:	af02      	add	r7, sp, #8
   1637a:	6078      	str	r0, [r7, #4]
   1637c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1637e:	687b      	ldr	r3, [r7, #4]
   16380:	681b      	ldr	r3, [r3, #0]
   16382:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16384:	687b      	ldr	r3, [r7, #4]
   16386:	681b      	ldr	r3, [r3, #0]
   16388:	0018      	movs	r0, r3
   1638a:	4bab      	ldr	r3, [pc, #684]	; (16638 <_usart_set_config+0x2c4>)
   1638c:	4798      	blx	r3
   1638e:	0003      	movs	r3, r0
   16390:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16392:	697b      	ldr	r3, [r7, #20]
   16394:	3314      	adds	r3, #20
   16396:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   16398:	2300      	movs	r3, #0
   1639a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   1639c:	2300      	movs	r3, #0
   1639e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   163a0:	230a      	movs	r3, #10
   163a2:	18fb      	adds	r3, r7, r3
   163a4:	2200      	movs	r2, #0
   163a6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   163a8:	231f      	movs	r3, #31
   163aa:	18fb      	adds	r3, r7, r3
   163ac:	2200      	movs	r2, #0
   163ae:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   163b0:	231e      	movs	r3, #30
   163b2:	18fb      	adds	r3, r7, r3
   163b4:	2210      	movs	r2, #16
   163b6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   163b8:	683b      	ldr	r3, [r7, #0]
   163ba:	8a1b      	ldrh	r3, [r3, #16]
   163bc:	2280      	movs	r2, #128	; 0x80
   163be:	01d2      	lsls	r2, r2, #7
   163c0:	4293      	cmp	r3, r2
   163c2:	d01c      	beq.n	163fe <_usart_set_config+0x8a>
   163c4:	2280      	movs	r2, #128	; 0x80
   163c6:	01d2      	lsls	r2, r2, #7
   163c8:	4293      	cmp	r3, r2
   163ca:	dc06      	bgt.n	163da <_usart_set_config+0x66>
   163cc:	2b00      	cmp	r3, #0
   163ce:	d00d      	beq.n	163ec <_usart_set_config+0x78>
   163d0:	2280      	movs	r2, #128	; 0x80
   163d2:	0192      	lsls	r2, r2, #6
   163d4:	4293      	cmp	r3, r2
   163d6:	d024      	beq.n	16422 <_usart_set_config+0xae>
   163d8:	e035      	b.n	16446 <_usart_set_config+0xd2>
   163da:	22c0      	movs	r2, #192	; 0xc0
   163dc:	01d2      	lsls	r2, r2, #7
   163de:	4293      	cmp	r3, r2
   163e0:	d028      	beq.n	16434 <_usart_set_config+0xc0>
   163e2:	2280      	movs	r2, #128	; 0x80
   163e4:	0212      	lsls	r2, r2, #8
   163e6:	4293      	cmp	r3, r2
   163e8:	d012      	beq.n	16410 <_usart_set_config+0x9c>
   163ea:	e02c      	b.n	16446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   163ec:	231f      	movs	r3, #31
   163ee:	18fb      	adds	r3, r7, r3
   163f0:	2200      	movs	r2, #0
   163f2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   163f4:	231e      	movs	r3, #30
   163f6:	18fb      	adds	r3, r7, r3
   163f8:	2210      	movs	r2, #16
   163fa:	701a      	strb	r2, [r3, #0]
			break;
   163fc:	e023      	b.n	16446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   163fe:	231f      	movs	r3, #31
   16400:	18fb      	adds	r3, r7, r3
   16402:	2200      	movs	r2, #0
   16404:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   16406:	231e      	movs	r3, #30
   16408:	18fb      	adds	r3, r7, r3
   1640a:	2208      	movs	r2, #8
   1640c:	701a      	strb	r2, [r3, #0]
			break;
   1640e:	e01a      	b.n	16446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   16410:	231f      	movs	r3, #31
   16412:	18fb      	adds	r3, r7, r3
   16414:	2200      	movs	r2, #0
   16416:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   16418:	231e      	movs	r3, #30
   1641a:	18fb      	adds	r3, r7, r3
   1641c:	2203      	movs	r2, #3
   1641e:	701a      	strb	r2, [r3, #0]
			break;
   16420:	e011      	b.n	16446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   16422:	231f      	movs	r3, #31
   16424:	18fb      	adds	r3, r7, r3
   16426:	2201      	movs	r2, #1
   16428:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1642a:	231e      	movs	r3, #30
   1642c:	18fb      	adds	r3, r7, r3
   1642e:	2210      	movs	r2, #16
   16430:	701a      	strb	r2, [r3, #0]
			break;
   16432:	e008      	b.n	16446 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   16434:	231f      	movs	r3, #31
   16436:	18fb      	adds	r3, r7, r3
   16438:	2201      	movs	r2, #1
   1643a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1643c:	231e      	movs	r3, #30
   1643e:	18fb      	adds	r3, r7, r3
   16440:	2208      	movs	r2, #8
   16442:	701a      	strb	r2, [r3, #0]
			break;
   16444:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   16446:	683b      	ldr	r3, [r7, #0]
   16448:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   1644a:	683b      	ldr	r3, [r7, #0]
   1644c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   1644e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   16450:	683b      	ldr	r3, [r7, #0]
   16452:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   16454:	4313      	orrs	r3, r2
		config->sample_rate |
   16456:	683a      	ldr	r2, [r7, #0]
   16458:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   1645a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1645c:	683a      	ldr	r2, [r7, #0]
   1645e:	7e12      	ldrb	r2, [r2, #24]
   16460:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   16462:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   16464:	683a      	ldr	r2, [r7, #0]
   16466:	2126      	movs	r1, #38	; 0x26
   16468:	5c52      	ldrb	r2, [r2, r1]
   1646a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   1646c:	4313      	orrs	r3, r2
   1646e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   16470:	231d      	movs	r3, #29
   16472:	18fb      	adds	r3, r7, r3
   16474:	2200      	movs	r2, #0
   16476:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   16478:	683b      	ldr	r3, [r7, #0]
   1647a:	685b      	ldr	r3, [r3, #4]
   1647c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   1647e:	68fb      	ldr	r3, [r7, #12]
   16480:	2b00      	cmp	r3, #0
   16482:	d01e      	beq.n	164c2 <_usart_set_config+0x14e>
   16484:	2280      	movs	r2, #128	; 0x80
   16486:	0552      	lsls	r2, r2, #21
   16488:	4293      	cmp	r3, r2
   1648a:	d14f      	bne.n	1652c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   1648c:	683b      	ldr	r3, [r7, #0]
   1648e:	2227      	movs	r2, #39	; 0x27
   16490:	5c9b      	ldrb	r3, [r3, r2]
   16492:	2201      	movs	r2, #1
   16494:	4053      	eors	r3, r2
   16496:	b2db      	uxtb	r3, r3
   16498:	2b00      	cmp	r3, #0
   1649a:	d046      	beq.n	1652a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1649c:	683b      	ldr	r3, [r7, #0]
   1649e:	6a1d      	ldr	r5, [r3, #32]
   164a0:	693b      	ldr	r3, [r7, #16]
   164a2:	b2db      	uxtb	r3, r3
   164a4:	0018      	movs	r0, r3
   164a6:	4b65      	ldr	r3, [pc, #404]	; (1663c <_usart_set_config+0x2c8>)
   164a8:	4798      	blx	r3
   164aa:	0001      	movs	r1, r0
   164ac:	231d      	movs	r3, #29
   164ae:	18fc      	adds	r4, r7, r3
   164b0:	230a      	movs	r3, #10
   164b2:	18fb      	adds	r3, r7, r3
   164b4:	001a      	movs	r2, r3
   164b6:	0028      	movs	r0, r5
   164b8:	4b61      	ldr	r3, [pc, #388]	; (16640 <_usart_set_config+0x2cc>)
   164ba:	4798      	blx	r3
   164bc:	0003      	movs	r3, r0
   164be:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   164c0:	e033      	b.n	1652a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   164c2:	683b      	ldr	r3, [r7, #0]
   164c4:	2227      	movs	r2, #39	; 0x27
   164c6:	5c9b      	ldrb	r3, [r3, r2]
   164c8:	2b00      	cmp	r3, #0
   164ca:	d014      	beq.n	164f6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   164cc:	683b      	ldr	r3, [r7, #0]
   164ce:	6a18      	ldr	r0, [r3, #32]
   164d0:	683b      	ldr	r3, [r7, #0]
   164d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   164d4:	231d      	movs	r3, #29
   164d6:	18fc      	adds	r4, r7, r3
   164d8:	231f      	movs	r3, #31
   164da:	18fb      	adds	r3, r7, r3
   164dc:	781d      	ldrb	r5, [r3, #0]
   164de:	230a      	movs	r3, #10
   164e0:	18fa      	adds	r2, r7, r3
   164e2:	231e      	movs	r3, #30
   164e4:	18fb      	adds	r3, r7, r3
   164e6:	781b      	ldrb	r3, [r3, #0]
   164e8:	9300      	str	r3, [sp, #0]
   164ea:	002b      	movs	r3, r5
   164ec:	4d55      	ldr	r5, [pc, #340]	; (16644 <_usart_set_config+0x2d0>)
   164ee:	47a8      	blx	r5
   164f0:	0003      	movs	r3, r0
   164f2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   164f4:	e01a      	b.n	1652c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   164f6:	683b      	ldr	r3, [r7, #0]
   164f8:	6a1d      	ldr	r5, [r3, #32]
   164fa:	693b      	ldr	r3, [r7, #16]
   164fc:	b2db      	uxtb	r3, r3
   164fe:	0018      	movs	r0, r3
   16500:	4b4e      	ldr	r3, [pc, #312]	; (1663c <_usart_set_config+0x2c8>)
   16502:	4798      	blx	r3
				status_code =
   16504:	231d      	movs	r3, #29
   16506:	18fc      	adds	r4, r7, r3
   16508:	231f      	movs	r3, #31
   1650a:	18fb      	adds	r3, r7, r3
   1650c:	7819      	ldrb	r1, [r3, #0]
   1650e:	230a      	movs	r3, #10
   16510:	18fa      	adds	r2, r7, r3
   16512:	231e      	movs	r3, #30
   16514:	18fb      	adds	r3, r7, r3
   16516:	781b      	ldrb	r3, [r3, #0]
   16518:	9300      	str	r3, [sp, #0]
   1651a:	000b      	movs	r3, r1
   1651c:	0001      	movs	r1, r0
   1651e:	0028      	movs	r0, r5
   16520:	4d48      	ldr	r5, [pc, #288]	; (16644 <_usart_set_config+0x2d0>)
   16522:	47a8      	blx	r5
   16524:	0003      	movs	r3, r0
   16526:	7023      	strb	r3, [r4, #0]
			break;
   16528:	e000      	b.n	1652c <_usart_set_config+0x1b8>
			break;
   1652a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   1652c:	231d      	movs	r3, #29
   1652e:	18fb      	adds	r3, r7, r3
   16530:	781b      	ldrb	r3, [r3, #0]
   16532:	2b00      	cmp	r3, #0
   16534:	d003      	beq.n	1653e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   16536:	231d      	movs	r3, #29
   16538:	18fb      	adds	r3, r7, r3
   1653a:	781b      	ldrb	r3, [r3, #0]
   1653c:	e077      	b.n	1662e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   1653e:	683b      	ldr	r3, [r7, #0]
   16540:	7e5b      	ldrb	r3, [r3, #25]
   16542:	2b00      	cmp	r3, #0
   16544:	d003      	beq.n	1654e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   16546:	683b      	ldr	r3, [r7, #0]
   16548:	7e9a      	ldrb	r2, [r3, #26]
   1654a:	69bb      	ldr	r3, [r7, #24]
   1654c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1654e:	687b      	ldr	r3, [r7, #4]
   16550:	0018      	movs	r0, r3
   16552:	4b3d      	ldr	r3, [pc, #244]	; (16648 <_usart_set_config+0x2d4>)
   16554:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   16556:	230a      	movs	r3, #10
   16558:	18fb      	adds	r3, r7, r3
   1655a:	881a      	ldrh	r2, [r3, #0]
   1655c:	69bb      	ldr	r3, [r7, #24]
   1655e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   16560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16562:	68fb      	ldr	r3, [r7, #12]
   16564:	4313      	orrs	r3, r2
   16566:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   16568:	683b      	ldr	r3, [r7, #0]
   1656a:	2227      	movs	r2, #39	; 0x27
   1656c:	5c9b      	ldrb	r3, [r3, r2]
   1656e:	2201      	movs	r2, #1
   16570:	4053      	eors	r3, r2
   16572:	b2db      	uxtb	r3, r3
   16574:	2b00      	cmp	r3, #0
   16576:	d003      	beq.n	16580 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   16578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1657a:	2204      	movs	r2, #4
   1657c:	4313      	orrs	r3, r2
   1657e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   16580:	683b      	ldr	r3, [r7, #0]
   16582:	7e5b      	ldrb	r3, [r3, #25]
   16584:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   16586:	683b      	ldr	r3, [r7, #0]
   16588:	7f1b      	ldrb	r3, [r3, #28]
   1658a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1658c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1658e:	683b      	ldr	r3, [r7, #0]
   16590:	7f5b      	ldrb	r3, [r3, #29]
   16592:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   16594:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   16596:	683b      	ldr	r3, [r7, #0]
   16598:	2124      	movs	r1, #36	; 0x24
   1659a:	5c5b      	ldrb	r3, [r3, r1]
   1659c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1659e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   165a0:	683b      	ldr	r3, [r7, #0]
   165a2:	2125      	movs	r1, #37	; 0x25
   165a4:	5c5b      	ldrb	r3, [r3, r1]
   165a6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   165a8:	4313      	orrs	r3, r2
	ctrlb =  
   165aa:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   165ac:	683b      	ldr	r3, [r7, #0]
   165ae:	7a9b      	ldrb	r3, [r3, #10]
   165b0:	001a      	movs	r2, r3
   165b2:	6a3b      	ldr	r3, [r7, #32]
   165b4:	4313      	orrs	r3, r2
   165b6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   165b8:	683b      	ldr	r3, [r7, #0]
   165ba:	7adb      	ldrb	r3, [r3, #11]
   165bc:	001a      	movs	r2, r3
   165be:	6a3b      	ldr	r3, [r7, #32]
   165c0:	4313      	orrs	r3, r2
   165c2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   165c4:	683b      	ldr	r3, [r7, #0]
   165c6:	891b      	ldrh	r3, [r3, #8]
   165c8:	2bff      	cmp	r3, #255	; 0xff
   165ca:	d00b      	beq.n	165e4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   165cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   165ce:	2280      	movs	r2, #128	; 0x80
   165d0:	0452      	lsls	r2, r2, #17
   165d2:	4313      	orrs	r3, r2
   165d4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   165d6:	683b      	ldr	r3, [r7, #0]
   165d8:	891b      	ldrh	r3, [r3, #8]
   165da:	001a      	movs	r2, r3
   165dc:	6a3b      	ldr	r3, [r7, #32]
   165de:	4313      	orrs	r3, r2
   165e0:	623b      	str	r3, [r7, #32]
   165e2:	e008      	b.n	165f6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   165e4:	683b      	ldr	r3, [r7, #0]
   165e6:	7edb      	ldrb	r3, [r3, #27]
   165e8:	2b00      	cmp	r3, #0
   165ea:	d004      	beq.n	165f6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   165ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   165ee:	2280      	movs	r2, #128	; 0x80
   165f0:	04d2      	lsls	r2, r2, #19
   165f2:	4313      	orrs	r3, r2
   165f4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   165f6:	683b      	ldr	r3, [r7, #0]
   165f8:	222c      	movs	r2, #44	; 0x2c
   165fa:	5c9b      	ldrb	r3, [r3, r2]
   165fc:	2b00      	cmp	r3, #0
   165fe:	d103      	bne.n	16608 <_usart_set_config+0x294>
   16600:	4b12      	ldr	r3, [pc, #72]	; (1664c <_usart_set_config+0x2d8>)
   16602:	4798      	blx	r3
   16604:	1e03      	subs	r3, r0, #0
   16606:	d003      	beq.n	16610 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   16608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1660a:	2280      	movs	r2, #128	; 0x80
   1660c:	4313      	orrs	r3, r2
   1660e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   16610:	687b      	ldr	r3, [r7, #4]
   16612:	0018      	movs	r0, r3
   16614:	4b0c      	ldr	r3, [pc, #48]	; (16648 <_usart_set_config+0x2d4>)
   16616:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   16618:	69bb      	ldr	r3, [r7, #24]
   1661a:	6a3a      	ldr	r2, [r7, #32]
   1661c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1661e:	687b      	ldr	r3, [r7, #4]
   16620:	0018      	movs	r0, r3
   16622:	4b09      	ldr	r3, [pc, #36]	; (16648 <_usart_set_config+0x2d4>)
   16624:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   16626:	69bb      	ldr	r3, [r7, #24]
   16628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1662a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   1662c:	2300      	movs	r3, #0
}
   1662e:	0018      	movs	r0, r3
   16630:	46bd      	mov	sp, r7
   16632:	b00a      	add	sp, #40	; 0x28
   16634:	bdb0      	pop	{r4, r5, r7, pc}
   16636:	46c0      	nop			; (mov r8, r8)
   16638:	0001511d 	.word	0x0001511d
   1663c:	00017ad1 	.word	0x00017ad1
   16640:	00014c97 	.word	0x00014c97
   16644:	00014d15 	.word	0x00014d15
   16648:	00016351 	.word	0x00016351
   1664c:	00016311 	.word	0x00016311

00016650 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   16650:	b590      	push	{r4, r7, lr}
   16652:	b093      	sub	sp, #76	; 0x4c
   16654:	af00      	add	r7, sp, #0
   16656:	60f8      	str	r0, [r7, #12]
   16658:	60b9      	str	r1, [r7, #8]
   1665a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   1665c:	233b      	movs	r3, #59	; 0x3b
   1665e:	18fb      	adds	r3, r7, r3
   16660:	2200      	movs	r2, #0
   16662:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   16664:	68fb      	ldr	r3, [r7, #12]
   16666:	68ba      	ldr	r2, [r7, #8]
   16668:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1666a:	68fb      	ldr	r3, [r7, #12]
   1666c:	681b      	ldr	r3, [r3, #0]
   1666e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16670:	68fb      	ldr	r3, [r7, #12]
   16672:	681b      	ldr	r3, [r3, #0]
   16674:	0018      	movs	r0, r3
   16676:	4b86      	ldr	r3, [pc, #536]	; (16890 <usart_init+0x240>)
   16678:	4798      	blx	r3
   1667a:	0003      	movs	r3, r0
   1667c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16680:	3302      	adds	r3, #2
   16682:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16686:	3314      	adds	r3, #20
   16688:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1668c:	681b      	ldr	r3, [r3, #0]
   1668e:	2201      	movs	r2, #1
   16690:	4013      	ands	r3, r2
   16692:	d001      	beq.n	16698 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   16694:	2305      	movs	r3, #5
   16696:	e0f6      	b.n	16886 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   16698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1669a:	681b      	ldr	r3, [r3, #0]
   1669c:	2202      	movs	r2, #2
   1669e:	4013      	ands	r3, r2
   166a0:	d001      	beq.n	166a6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   166a2:	231c      	movs	r3, #28
   166a4:	e0ef      	b.n	16886 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   166a6:	2201      	movs	r2, #1
   166a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   166aa:	409a      	lsls	r2, r3
   166ac:	0013      	movs	r3, r2
   166ae:	0019      	movs	r1, r3
   166b0:	2002      	movs	r0, #2
   166b2:	4b78      	ldr	r3, [pc, #480]	; (16894 <usart_init+0x244>)
   166b4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   166b6:	2324      	movs	r3, #36	; 0x24
   166b8:	18fb      	adds	r3, r7, r3
   166ba:	0018      	movs	r0, r3
   166bc:	4b76      	ldr	r3, [pc, #472]	; (16898 <usart_init+0x248>)
   166be:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   166c0:	687b      	ldr	r3, [r7, #4]
   166c2:	222d      	movs	r2, #45	; 0x2d
   166c4:	5c9a      	ldrb	r2, [r3, r2]
   166c6:	2324      	movs	r3, #36	; 0x24
   166c8:	18fb      	adds	r3, r7, r3
   166ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   166cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166ce:	b2db      	uxtb	r3, r3
   166d0:	2224      	movs	r2, #36	; 0x24
   166d2:	18ba      	adds	r2, r7, r2
   166d4:	0011      	movs	r1, r2
   166d6:	0018      	movs	r0, r3
   166d8:	4b70      	ldr	r3, [pc, #448]	; (1689c <usart_init+0x24c>)
   166da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   166dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166de:	b2db      	uxtb	r3, r3
   166e0:	0018      	movs	r0, r3
   166e2:	4b6f      	ldr	r3, [pc, #444]	; (168a0 <usart_init+0x250>)
   166e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   166e6:	687b      	ldr	r3, [r7, #4]
   166e8:	222d      	movs	r2, #45	; 0x2d
   166ea:	5c9b      	ldrb	r3, [r3, r2]
   166ec:	2100      	movs	r1, #0
   166ee:	0018      	movs	r0, r3
   166f0:	4b6c      	ldr	r3, [pc, #432]	; (168a4 <usart_init+0x254>)
   166f2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   166f4:	687b      	ldr	r3, [r7, #4]
   166f6:	7ada      	ldrb	r2, [r3, #11]
   166f8:	68fb      	ldr	r3, [r7, #12]
   166fa:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   166fc:	687b      	ldr	r3, [r7, #4]
   166fe:	2224      	movs	r2, #36	; 0x24
   16700:	5c9a      	ldrb	r2, [r3, r2]
   16702:	68fb      	ldr	r3, [r7, #12]
   16704:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   16706:	687b      	ldr	r3, [r7, #4]
   16708:	2225      	movs	r2, #37	; 0x25
   1670a:	5c9a      	ldrb	r2, [r3, r2]
   1670c:	68fb      	ldr	r3, [r7, #12]
   1670e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   16710:	687b      	ldr	r3, [r7, #4]
   16712:	7eda      	ldrb	r2, [r3, #27]
   16714:	68fb      	ldr	r3, [r7, #12]
   16716:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   16718:	687b      	ldr	r3, [r7, #4]
   1671a:	7f1a      	ldrb	r2, [r3, #28]
   1671c:	68fb      	ldr	r3, [r7, #12]
   1671e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   16720:	233b      	movs	r3, #59	; 0x3b
   16722:	18fc      	adds	r4, r7, r3
   16724:	687a      	ldr	r2, [r7, #4]
   16726:	68fb      	ldr	r3, [r7, #12]
   16728:	0011      	movs	r1, r2
   1672a:	0018      	movs	r0, r3
   1672c:	4b5e      	ldr	r3, [pc, #376]	; (168a8 <usart_init+0x258>)
   1672e:	4798      	blx	r3
   16730:	0003      	movs	r3, r0
   16732:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   16734:	233b      	movs	r3, #59	; 0x3b
   16736:	18fb      	adds	r3, r7, r3
   16738:	781b      	ldrb	r3, [r3, #0]
   1673a:	2b00      	cmp	r3, #0
   1673c:	d003      	beq.n	16746 <usart_init+0xf6>
		return status_code;
   1673e:	233b      	movs	r3, #59	; 0x3b
   16740:	18fb      	adds	r3, r7, r3
   16742:	781b      	ldrb	r3, [r3, #0]
   16744:	e09f      	b.n	16886 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   16746:	2320      	movs	r3, #32
   16748:	18fb      	adds	r3, r7, r3
   1674a:	0018      	movs	r0, r3
   1674c:	4b57      	ldr	r3, [pc, #348]	; (168ac <usart_init+0x25c>)
   1674e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16750:	2320      	movs	r3, #32
   16752:	18fb      	adds	r3, r7, r3
   16754:	2200      	movs	r2, #0
   16756:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   16758:	2320      	movs	r3, #32
   1675a:	18fb      	adds	r3, r7, r3
   1675c:	2200      	movs	r2, #0
   1675e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   16760:	687b      	ldr	r3, [r7, #4]
   16762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   16764:	2310      	movs	r3, #16
   16766:	18fb      	adds	r3, r7, r3
   16768:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   1676a:	687b      	ldr	r3, [r7, #4]
   1676c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   1676e:	2310      	movs	r3, #16
   16770:	18fb      	adds	r3, r7, r3
   16772:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   16774:	687b      	ldr	r3, [r7, #4]
   16776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   16778:	2310      	movs	r3, #16
   1677a:	18fb      	adds	r3, r7, r3
   1677c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   1677e:	687b      	ldr	r3, [r7, #4]
   16780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   16782:	2310      	movs	r3, #16
   16784:	18fb      	adds	r3, r7, r3
   16786:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   16788:	2347      	movs	r3, #71	; 0x47
   1678a:	18fb      	adds	r3, r7, r3
   1678c:	2200      	movs	r2, #0
   1678e:	701a      	strb	r2, [r3, #0]
   16790:	e02c      	b.n	167ec <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   16792:	2347      	movs	r3, #71	; 0x47
   16794:	18fb      	adds	r3, r7, r3
   16796:	781a      	ldrb	r2, [r3, #0]
   16798:	2310      	movs	r3, #16
   1679a:	18fb      	adds	r3, r7, r3
   1679c:	0092      	lsls	r2, r2, #2
   1679e:	58d3      	ldr	r3, [r2, r3]
   167a0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   167a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167a4:	2b00      	cmp	r3, #0
   167a6:	d109      	bne.n	167bc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   167a8:	2347      	movs	r3, #71	; 0x47
   167aa:	18fb      	adds	r3, r7, r3
   167ac:	781a      	ldrb	r2, [r3, #0]
   167ae:	68bb      	ldr	r3, [r7, #8]
   167b0:	0011      	movs	r1, r2
   167b2:	0018      	movs	r0, r3
   167b4:	4b3e      	ldr	r3, [pc, #248]	; (168b0 <usart_init+0x260>)
   167b6:	4798      	blx	r3
   167b8:	0003      	movs	r3, r0
   167ba:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   167bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167be:	3301      	adds	r3, #1
   167c0:	d00d      	beq.n	167de <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   167c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167c4:	b2da      	uxtb	r2, r3
   167c6:	2320      	movs	r3, #32
   167c8:	18fb      	adds	r3, r7, r3
   167ca:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   167cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167ce:	0c1b      	lsrs	r3, r3, #16
   167d0:	b2db      	uxtb	r3, r3
   167d2:	2220      	movs	r2, #32
   167d4:	18ba      	adds	r2, r7, r2
   167d6:	0011      	movs	r1, r2
   167d8:	0018      	movs	r0, r3
   167da:	4b36      	ldr	r3, [pc, #216]	; (168b4 <usart_init+0x264>)
   167dc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   167de:	2347      	movs	r3, #71	; 0x47
   167e0:	18fb      	adds	r3, r7, r3
   167e2:	781a      	ldrb	r2, [r3, #0]
   167e4:	2347      	movs	r3, #71	; 0x47
   167e6:	18fb      	adds	r3, r7, r3
   167e8:	3201      	adds	r2, #1
   167ea:	701a      	strb	r2, [r3, #0]
   167ec:	2347      	movs	r3, #71	; 0x47
   167ee:	18fb      	adds	r3, r7, r3
   167f0:	781b      	ldrb	r3, [r3, #0]
   167f2:	2b03      	cmp	r3, #3
   167f4:	d9cd      	bls.n	16792 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   167f6:	2300      	movs	r3, #0
   167f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   167fa:	e00a      	b.n	16812 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   167fc:	68fa      	ldr	r2, [r7, #12]
   167fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16800:	3302      	adds	r3, #2
   16802:	009b      	lsls	r3, r3, #2
   16804:	18d3      	adds	r3, r2, r3
   16806:	3304      	adds	r3, #4
   16808:	2200      	movs	r2, #0
   1680a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   1680c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1680e:	3301      	adds	r3, #1
   16810:	63fb      	str	r3, [r7, #60]	; 0x3c
   16812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16814:	2b05      	cmp	r3, #5
   16816:	d9f1      	bls.n	167fc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   16818:	68fb      	ldr	r3, [r7, #12]
   1681a:	2200      	movs	r2, #0
   1681c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1681e:	68fb      	ldr	r3, [r7, #12]
   16820:	2200      	movs	r2, #0
   16822:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   16824:	68fb      	ldr	r3, [r7, #12]
   16826:	2200      	movs	r2, #0
   16828:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1682a:	68fb      	ldr	r3, [r7, #12]
   1682c:	2200      	movs	r2, #0
   1682e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   16830:	68fb      	ldr	r3, [r7, #12]
   16832:	2230      	movs	r2, #48	; 0x30
   16834:	2100      	movs	r1, #0
   16836:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   16838:	68fb      	ldr	r3, [r7, #12]
   1683a:	2231      	movs	r2, #49	; 0x31
   1683c:	2100      	movs	r1, #0
   1683e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   16840:	68fb      	ldr	r3, [r7, #12]
   16842:	2232      	movs	r2, #50	; 0x32
   16844:	2100      	movs	r1, #0
   16846:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   16848:	68fb      	ldr	r3, [r7, #12]
   1684a:	2233      	movs	r2, #51	; 0x33
   1684c:	2100      	movs	r1, #0
   1684e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   16850:	68fb      	ldr	r3, [r7, #12]
   16852:	681b      	ldr	r3, [r3, #0]
   16854:	2227      	movs	r2, #39	; 0x27
   16856:	18bc      	adds	r4, r7, r2
   16858:	0018      	movs	r0, r3
   1685a:	4b0d      	ldr	r3, [pc, #52]	; (16890 <usart_init+0x240>)
   1685c:	4798      	blx	r3
   1685e:	0003      	movs	r3, r0
   16860:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   16862:	4a15      	ldr	r2, [pc, #84]	; (168b8 <usart_init+0x268>)
   16864:	2327      	movs	r3, #39	; 0x27
   16866:	18fb      	adds	r3, r7, r3
   16868:	781b      	ldrb	r3, [r3, #0]
   1686a:	0011      	movs	r1, r2
   1686c:	0018      	movs	r0, r3
   1686e:	4b13      	ldr	r3, [pc, #76]	; (168bc <usart_init+0x26c>)
   16870:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   16872:	2327      	movs	r3, #39	; 0x27
   16874:	18fb      	adds	r3, r7, r3
   16876:	781a      	ldrb	r2, [r3, #0]
   16878:	4b11      	ldr	r3, [pc, #68]	; (168c0 <usart_init+0x270>)
   1687a:	0092      	lsls	r2, r2, #2
   1687c:	68f9      	ldr	r1, [r7, #12]
   1687e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   16880:	233b      	movs	r3, #59	; 0x3b
   16882:	18fb      	adds	r3, r7, r3
   16884:	781b      	ldrb	r3, [r3, #0]
}
   16886:	0018      	movs	r0, r3
   16888:	46bd      	mov	sp, r7
   1688a:	b013      	add	sp, #76	; 0x4c
   1688c:	bd90      	pop	{r4, r7, pc}
   1688e:	46c0      	nop			; (mov r8, r8)
   16890:	0001511d 	.word	0x0001511d
   16894:	0001628d 	.word	0x0001628d
   16898:	00016275 	.word	0x00016275
   1689c:	000179ad 	.word	0x000179ad
   168a0:	000179f1 	.word	0x000179f1
   168a4:	00014ed5 	.word	0x00014ed5
   168a8:	00016375 	.word	0x00016375
   168ac:	000162e9 	.word	0x000162e9
   168b0:	00014f61 	.word	0x00014f61
   168b4:	00017d0d 	.word	0x00017d0d
   168b8:	00016b2d 	.word	0x00016b2d
   168bc:	00015181 	.word	0x00015181
   168c0:	20005ce8 	.word	0x20005ce8

000168c4 <system_interrupt_enter_critical_section>:
{
   168c4:	b580      	push	{r7, lr}
   168c6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   168c8:	4b02      	ldr	r3, [pc, #8]	; (168d4 <system_interrupt_enter_critical_section+0x10>)
   168ca:	4798      	blx	r3
}
   168cc:	46c0      	nop			; (mov r8, r8)
   168ce:	46bd      	mov	sp, r7
   168d0:	bd80      	pop	{r7, pc}
   168d2:	46c0      	nop			; (mov r8, r8)
   168d4:	00013d19 	.word	0x00013d19

000168d8 <system_interrupt_leave_critical_section>:
{
   168d8:	b580      	push	{r7, lr}
   168da:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   168dc:	4b02      	ldr	r3, [pc, #8]	; (168e8 <system_interrupt_leave_critical_section+0x10>)
   168de:	4798      	blx	r3
}
   168e0:	46c0      	nop			; (mov r8, r8)
   168e2:	46bd      	mov	sp, r7
   168e4:	bd80      	pop	{r7, pc}
   168e6:	46c0      	nop			; (mov r8, r8)
   168e8:	00013d6d 	.word	0x00013d6d

000168ec <usart_is_syncing>:
{
   168ec:	b580      	push	{r7, lr}
   168ee:	b084      	sub	sp, #16
   168f0:	af00      	add	r7, sp, #0
   168f2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   168f4:	687b      	ldr	r3, [r7, #4]
   168f6:	681b      	ldr	r3, [r3, #0]
   168f8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   168fa:	68fb      	ldr	r3, [r7, #12]
   168fc:	69db      	ldr	r3, [r3, #28]
   168fe:	1e5a      	subs	r2, r3, #1
   16900:	4193      	sbcs	r3, r2
   16902:	b2db      	uxtb	r3, r3
}
   16904:	0018      	movs	r0, r3
   16906:	46bd      	mov	sp, r7
   16908:	b004      	add	sp, #16
   1690a:	bd80      	pop	{r7, pc}

0001690c <_usart_wait_for_sync>:
{
   1690c:	b580      	push	{r7, lr}
   1690e:	b082      	sub	sp, #8
   16910:	af00      	add	r7, sp, #0
   16912:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   16914:	46c0      	nop			; (mov r8, r8)
   16916:	687b      	ldr	r3, [r7, #4]
   16918:	0018      	movs	r0, r3
   1691a:	4b04      	ldr	r3, [pc, #16]	; (1692c <_usart_wait_for_sync+0x20>)
   1691c:	4798      	blx	r3
   1691e:	1e03      	subs	r3, r0, #0
   16920:	d1f9      	bne.n	16916 <_usart_wait_for_sync+0xa>
}
   16922:	46c0      	nop			; (mov r8, r8)
   16924:	46bd      	mov	sp, r7
   16926:	b002      	add	sp, #8
   16928:	bd80      	pop	{r7, pc}
   1692a:	46c0      	nop			; (mov r8, r8)
   1692c:	000168ed 	.word	0x000168ed

00016930 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   16930:	b580      	push	{r7, lr}
   16932:	b086      	sub	sp, #24
   16934:	af00      	add	r7, sp, #0
   16936:	60f8      	str	r0, [r7, #12]
   16938:	60b9      	str	r1, [r7, #8]
   1693a:	1dbb      	adds	r3, r7, #6
   1693c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1693e:	68fb      	ldr	r3, [r7, #12]
   16940:	681b      	ldr	r3, [r3, #0]
   16942:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   16944:	4b0f      	ldr	r3, [pc, #60]	; (16984 <_usart_write_buffer+0x54>)
   16946:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   16948:	68fb      	ldr	r3, [r7, #12]
   1694a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1694c:	b29b      	uxth	r3, r3
   1694e:	2b00      	cmp	r3, #0
   16950:	d003      	beq.n	1695a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   16952:	4b0d      	ldr	r3, [pc, #52]	; (16988 <_usart_write_buffer+0x58>)
   16954:	4798      	blx	r3
		return STATUS_BUSY;
   16956:	2305      	movs	r3, #5
   16958:	e010      	b.n	1697c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   1695a:	68fb      	ldr	r3, [r7, #12]
   1695c:	1dba      	adds	r2, r7, #6
   1695e:	8812      	ldrh	r2, [r2, #0]
   16960:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   16962:	4b09      	ldr	r3, [pc, #36]	; (16988 <_usart_write_buffer+0x58>)
   16964:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   16966:	68fb      	ldr	r3, [r7, #12]
   16968:	68ba      	ldr	r2, [r7, #8]
   1696a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1696c:	68fb      	ldr	r3, [r7, #12]
   1696e:	2233      	movs	r2, #51	; 0x33
   16970:	2105      	movs	r1, #5
   16972:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   16974:	697b      	ldr	r3, [r7, #20]
   16976:	2201      	movs	r2, #1
   16978:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   1697a:	2300      	movs	r3, #0
}
   1697c:	0018      	movs	r0, r3
   1697e:	46bd      	mov	sp, r7
   16980:	b006      	add	sp, #24
   16982:	bd80      	pop	{r7, pc}
   16984:	000168c5 	.word	0x000168c5
   16988:	000168d9 	.word	0x000168d9

0001698c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1698c:	b580      	push	{r7, lr}
   1698e:	b086      	sub	sp, #24
   16990:	af00      	add	r7, sp, #0
   16992:	60f8      	str	r0, [r7, #12]
   16994:	60b9      	str	r1, [r7, #8]
   16996:	1dbb      	adds	r3, r7, #6
   16998:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1699a:	68fb      	ldr	r3, [r7, #12]
   1699c:	681b      	ldr	r3, [r3, #0]
   1699e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   169a0:	4b16      	ldr	r3, [pc, #88]	; (169fc <_usart_read_buffer+0x70>)
   169a2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   169a4:	68fb      	ldr	r3, [r7, #12]
   169a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   169a8:	b29b      	uxth	r3, r3
   169aa:	2b00      	cmp	r3, #0
   169ac:	d003      	beq.n	169b6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   169ae:	4b14      	ldr	r3, [pc, #80]	; (16a00 <_usart_read_buffer+0x74>)
   169b0:	4798      	blx	r3
		return STATUS_BUSY;
   169b2:	2305      	movs	r3, #5
   169b4:	e01e      	b.n	169f4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   169b6:	68fb      	ldr	r3, [r7, #12]
   169b8:	1dba      	adds	r2, r7, #6
   169ba:	8812      	ldrh	r2, [r2, #0]
   169bc:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   169be:	4b10      	ldr	r3, [pc, #64]	; (16a00 <_usart_read_buffer+0x74>)
   169c0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   169c2:	68fb      	ldr	r3, [r7, #12]
   169c4:	68ba      	ldr	r2, [r7, #8]
   169c6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   169c8:	68fb      	ldr	r3, [r7, #12]
   169ca:	2232      	movs	r2, #50	; 0x32
   169cc:	2105      	movs	r1, #5
   169ce:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   169d0:	697b      	ldr	r3, [r7, #20]
   169d2:	2204      	movs	r2, #4
   169d4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   169d6:	68fb      	ldr	r3, [r7, #12]
   169d8:	7a1b      	ldrb	r3, [r3, #8]
   169da:	2b00      	cmp	r3, #0
   169dc:	d002      	beq.n	169e4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   169de:	697b      	ldr	r3, [r7, #20]
   169e0:	2220      	movs	r2, #32
   169e2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   169e4:	68fb      	ldr	r3, [r7, #12]
   169e6:	7a5b      	ldrb	r3, [r3, #9]
   169e8:	2b00      	cmp	r3, #0
   169ea:	d002      	beq.n	169f2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   169ec:	697b      	ldr	r3, [r7, #20]
   169ee:	2208      	movs	r2, #8
   169f0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   169f2:	2300      	movs	r3, #0
}
   169f4:	0018      	movs	r0, r3
   169f6:	46bd      	mov	sp, r7
   169f8:	b006      	add	sp, #24
   169fa:	bd80      	pop	{r7, pc}
   169fc:	000168c5 	.word	0x000168c5
   16a00:	000168d9 	.word	0x000168d9

00016a04 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   16a04:	b580      	push	{r7, lr}
   16a06:	b084      	sub	sp, #16
   16a08:	af00      	add	r7, sp, #0
   16a0a:	60f8      	str	r0, [r7, #12]
   16a0c:	60b9      	str	r1, [r7, #8]
   16a0e:	1dfb      	adds	r3, r7, #7
   16a10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   16a12:	1dfb      	adds	r3, r7, #7
   16a14:	781b      	ldrb	r3, [r3, #0]
   16a16:	68fa      	ldr	r2, [r7, #12]
   16a18:	3302      	adds	r3, #2
   16a1a:	009b      	lsls	r3, r3, #2
   16a1c:	18d3      	adds	r3, r2, r3
   16a1e:	3304      	adds	r3, #4
   16a20:	68ba      	ldr	r2, [r7, #8]
   16a22:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   16a24:	68fb      	ldr	r3, [r7, #12]
   16a26:	2230      	movs	r2, #48	; 0x30
   16a28:	5c9b      	ldrb	r3, [r3, r2]
   16a2a:	b25a      	sxtb	r2, r3
   16a2c:	1dfb      	adds	r3, r7, #7
   16a2e:	781b      	ldrb	r3, [r3, #0]
   16a30:	2101      	movs	r1, #1
   16a32:	4099      	lsls	r1, r3
   16a34:	000b      	movs	r3, r1
   16a36:	b25b      	sxtb	r3, r3
   16a38:	4313      	orrs	r3, r2
   16a3a:	b25b      	sxtb	r3, r3
   16a3c:	b2d9      	uxtb	r1, r3
   16a3e:	68fb      	ldr	r3, [r7, #12]
   16a40:	2230      	movs	r2, #48	; 0x30
   16a42:	5499      	strb	r1, [r3, r2]
}
   16a44:	46c0      	nop			; (mov r8, r8)
   16a46:	46bd      	mov	sp, r7
   16a48:	b004      	add	sp, #16
   16a4a:	bd80      	pop	{r7, pc}

00016a4c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   16a4c:	b580      	push	{r7, lr}
   16a4e:	b084      	sub	sp, #16
   16a50:	af00      	add	r7, sp, #0
   16a52:	60f8      	str	r0, [r7, #12]
   16a54:	60b9      	str	r1, [r7, #8]
   16a56:	1dbb      	adds	r3, r7, #6
   16a58:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   16a5a:	1dbb      	adds	r3, r7, #6
   16a5c:	881b      	ldrh	r3, [r3, #0]
   16a5e:	2b00      	cmp	r3, #0
   16a60:	d101      	bne.n	16a66 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   16a62:	2317      	movs	r3, #23
   16a64:	e010      	b.n	16a88 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   16a66:	68fb      	ldr	r3, [r7, #12]
   16a68:	79db      	ldrb	r3, [r3, #7]
   16a6a:	2201      	movs	r2, #1
   16a6c:	4053      	eors	r3, r2
   16a6e:	b2db      	uxtb	r3, r3
   16a70:	2b00      	cmp	r3, #0
   16a72:	d001      	beq.n	16a78 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   16a74:	231c      	movs	r3, #28
   16a76:	e007      	b.n	16a88 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   16a78:	1dbb      	adds	r3, r7, #6
   16a7a:	881a      	ldrh	r2, [r3, #0]
   16a7c:	68b9      	ldr	r1, [r7, #8]
   16a7e:	68fb      	ldr	r3, [r7, #12]
   16a80:	0018      	movs	r0, r3
   16a82:	4b03      	ldr	r3, [pc, #12]	; (16a90 <usart_write_buffer_job+0x44>)
   16a84:	4798      	blx	r3
   16a86:	0003      	movs	r3, r0
}
   16a88:	0018      	movs	r0, r3
   16a8a:	46bd      	mov	sp, r7
   16a8c:	b004      	add	sp, #16
   16a8e:	bd80      	pop	{r7, pc}
   16a90:	00016931 	.word	0x00016931

00016a94 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   16a94:	b580      	push	{r7, lr}
   16a96:	b084      	sub	sp, #16
   16a98:	af00      	add	r7, sp, #0
   16a9a:	60f8      	str	r0, [r7, #12]
   16a9c:	60b9      	str	r1, [r7, #8]
   16a9e:	1dbb      	adds	r3, r7, #6
   16aa0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   16aa2:	1dbb      	adds	r3, r7, #6
   16aa4:	881b      	ldrh	r3, [r3, #0]
   16aa6:	2b00      	cmp	r3, #0
   16aa8:	d101      	bne.n	16aae <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   16aaa:	2317      	movs	r3, #23
   16aac:	e010      	b.n	16ad0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   16aae:	68fb      	ldr	r3, [r7, #12]
   16ab0:	799b      	ldrb	r3, [r3, #6]
   16ab2:	2201      	movs	r2, #1
   16ab4:	4053      	eors	r3, r2
   16ab6:	b2db      	uxtb	r3, r3
   16ab8:	2b00      	cmp	r3, #0
   16aba:	d001      	beq.n	16ac0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   16abc:	231c      	movs	r3, #28
   16abe:	e007      	b.n	16ad0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   16ac0:	1dbb      	adds	r3, r7, #6
   16ac2:	881a      	ldrh	r2, [r3, #0]
   16ac4:	68b9      	ldr	r1, [r7, #8]
   16ac6:	68fb      	ldr	r3, [r7, #12]
   16ac8:	0018      	movs	r0, r3
   16aca:	4b03      	ldr	r3, [pc, #12]	; (16ad8 <usart_read_buffer_job+0x44>)
   16acc:	4798      	blx	r3
   16ace:	0003      	movs	r3, r0
}
   16ad0:	0018      	movs	r0, r3
   16ad2:	46bd      	mov	sp, r7
   16ad4:	b004      	add	sp, #16
   16ad6:	bd80      	pop	{r7, pc}
   16ad8:	0001698d 	.word	0x0001698d

00016adc <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   16adc:	b580      	push	{r7, lr}
   16ade:	b084      	sub	sp, #16
   16ae0:	af00      	add	r7, sp, #0
   16ae2:	6078      	str	r0, [r7, #4]
   16ae4:	000a      	movs	r2, r1
   16ae6:	1cfb      	adds	r3, r7, #3
   16ae8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   16aea:	1cfb      	adds	r3, r7, #3
   16aec:	781b      	ldrb	r3, [r3, #0]
   16aee:	2b00      	cmp	r3, #0
   16af0:	d002      	beq.n	16af8 <usart_get_job_status+0x1c>
   16af2:	2b01      	cmp	r3, #1
   16af4:	d007      	beq.n	16b06 <usart_get_job_status+0x2a>
   16af6:	e00d      	b.n	16b14 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   16af8:	230f      	movs	r3, #15
   16afa:	18fb      	adds	r3, r7, r3
   16afc:	687a      	ldr	r2, [r7, #4]
   16afe:	2132      	movs	r1, #50	; 0x32
   16b00:	5c52      	ldrb	r2, [r2, r1]
   16b02:	701a      	strb	r2, [r3, #0]
			break;
   16b04:	e00b      	b.n	16b1e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   16b06:	230f      	movs	r3, #15
   16b08:	18fb      	adds	r3, r7, r3
   16b0a:	687a      	ldr	r2, [r7, #4]
   16b0c:	2133      	movs	r1, #51	; 0x33
   16b0e:	5c52      	ldrb	r2, [r2, r1]
   16b10:	701a      	strb	r2, [r3, #0]
			break;
   16b12:	e004      	b.n	16b1e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   16b14:	230f      	movs	r3, #15
   16b16:	18fb      	adds	r3, r7, r3
   16b18:	2217      	movs	r2, #23
   16b1a:	701a      	strb	r2, [r3, #0]
			break;
   16b1c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   16b1e:	230f      	movs	r3, #15
   16b20:	18fb      	adds	r3, r7, r3
   16b22:	781b      	ldrb	r3, [r3, #0]
}
   16b24:	0018      	movs	r0, r3
   16b26:	46bd      	mov	sp, r7
   16b28:	b004      	add	sp, #16
   16b2a:	bd80      	pop	{r7, pc}

00016b2c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   16b2c:	b580      	push	{r7, lr}
   16b2e:	b088      	sub	sp, #32
   16b30:	af00      	add	r7, sp, #0
   16b32:	0002      	movs	r2, r0
   16b34:	1dfb      	adds	r3, r7, #7
   16b36:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   16b38:	1dfb      	adds	r3, r7, #7
   16b3a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   16b3c:	4ba3      	ldr	r3, [pc, #652]	; (16dcc <_usart_interrupt_handler+0x2a0>)
   16b3e:	0092      	lsls	r2, r2, #2
   16b40:	58d3      	ldr	r3, [r2, r3]
   16b42:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   16b44:	69bb      	ldr	r3, [r7, #24]
   16b46:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   16b48:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   16b4a:	69bb      	ldr	r3, [r7, #24]
   16b4c:	0018      	movs	r0, r3
   16b4e:	4ba0      	ldr	r3, [pc, #640]	; (16dd0 <_usart_interrupt_handler+0x2a4>)
   16b50:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   16b52:	697b      	ldr	r3, [r7, #20]
   16b54:	7e1b      	ldrb	r3, [r3, #24]
   16b56:	b2da      	uxtb	r2, r3
   16b58:	2312      	movs	r3, #18
   16b5a:	18fb      	adds	r3, r7, r3
   16b5c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   16b5e:	697b      	ldr	r3, [r7, #20]
   16b60:	7d9b      	ldrb	r3, [r3, #22]
   16b62:	b2db      	uxtb	r3, r3
   16b64:	b29a      	uxth	r2, r3
   16b66:	2312      	movs	r3, #18
   16b68:	18fb      	adds	r3, r7, r3
   16b6a:	2112      	movs	r1, #18
   16b6c:	1879      	adds	r1, r7, r1
   16b6e:	8809      	ldrh	r1, [r1, #0]
   16b70:	400a      	ands	r2, r1
   16b72:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   16b74:	69bb      	ldr	r3, [r7, #24]
   16b76:	2230      	movs	r2, #48	; 0x30
   16b78:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   16b7a:	69ba      	ldr	r2, [r7, #24]
   16b7c:	2131      	movs	r1, #49	; 0x31
   16b7e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   16b80:	4013      	ands	r3, r2
   16b82:	b2da      	uxtb	r2, r3
   16b84:	2310      	movs	r3, #16
   16b86:	18fb      	adds	r3, r7, r3
   16b88:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   16b8a:	2312      	movs	r3, #18
   16b8c:	18fb      	adds	r3, r7, r3
   16b8e:	881b      	ldrh	r3, [r3, #0]
   16b90:	2201      	movs	r2, #1
   16b92:	4013      	ands	r3, r2
   16b94:	d044      	beq.n	16c20 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   16b96:	69bb      	ldr	r3, [r7, #24]
   16b98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   16b9a:	b29b      	uxth	r3, r3
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	d03c      	beq.n	16c1a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   16ba0:	69bb      	ldr	r3, [r7, #24]
   16ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16ba4:	781b      	ldrb	r3, [r3, #0]
   16ba6:	b2da      	uxtb	r2, r3
   16ba8:	231c      	movs	r3, #28
   16baa:	18fb      	adds	r3, r7, r3
   16bac:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   16bae:	69bb      	ldr	r3, [r7, #24]
   16bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16bb2:	1c5a      	adds	r2, r3, #1
   16bb4:	69bb      	ldr	r3, [r7, #24]
   16bb6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   16bb8:	69bb      	ldr	r3, [r7, #24]
   16bba:	795b      	ldrb	r3, [r3, #5]
   16bbc:	2b01      	cmp	r3, #1
   16bbe:	d113      	bne.n	16be8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   16bc0:	69bb      	ldr	r3, [r7, #24]
   16bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16bc4:	781b      	ldrb	r3, [r3, #0]
   16bc6:	b2db      	uxtb	r3, r3
   16bc8:	021b      	lsls	r3, r3, #8
   16bca:	b21a      	sxth	r2, r3
   16bcc:	231c      	movs	r3, #28
   16bce:	18fb      	adds	r3, r7, r3
   16bd0:	2100      	movs	r1, #0
   16bd2:	5e5b      	ldrsh	r3, [r3, r1]
   16bd4:	4313      	orrs	r3, r2
   16bd6:	b21a      	sxth	r2, r3
   16bd8:	231c      	movs	r3, #28
   16bda:	18fb      	adds	r3, r7, r3
   16bdc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   16bde:	69bb      	ldr	r3, [r7, #24]
   16be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16be2:	1c5a      	adds	r2, r3, #1
   16be4:	69bb      	ldr	r3, [r7, #24]
   16be6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   16be8:	231c      	movs	r3, #28
   16bea:	18fb      	adds	r3, r7, r3
   16bec:	881b      	ldrh	r3, [r3, #0]
   16bee:	05db      	lsls	r3, r3, #23
   16bf0:	0ddb      	lsrs	r3, r3, #23
   16bf2:	b29a      	uxth	r2, r3
   16bf4:	697b      	ldr	r3, [r7, #20]
   16bf6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   16bf8:	69bb      	ldr	r3, [r7, #24]
   16bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   16bfc:	b29b      	uxth	r3, r3
   16bfe:	3b01      	subs	r3, #1
   16c00:	b29b      	uxth	r3, r3
   16c02:	69ba      	ldr	r2, [r7, #24]
   16c04:	1c19      	adds	r1, r3, #0
   16c06:	85d1      	strh	r1, [r2, #46]	; 0x2e
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d109      	bne.n	16c20 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   16c0c:	697b      	ldr	r3, [r7, #20]
   16c0e:	2201      	movs	r2, #1
   16c10:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   16c12:	697b      	ldr	r3, [r7, #20]
   16c14:	2202      	movs	r2, #2
   16c16:	759a      	strb	r2, [r3, #22]
   16c18:	e002      	b.n	16c20 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   16c1a:	697b      	ldr	r3, [r7, #20]
   16c1c:	2201      	movs	r2, #1
   16c1e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   16c20:	2312      	movs	r3, #18
   16c22:	18fb      	adds	r3, r7, r3
   16c24:	881b      	ldrh	r3, [r3, #0]
   16c26:	2202      	movs	r2, #2
   16c28:	4013      	ands	r3, r2
   16c2a:	d011      	beq.n	16c50 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   16c2c:	697b      	ldr	r3, [r7, #20]
   16c2e:	2202      	movs	r2, #2
   16c30:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   16c32:	69bb      	ldr	r3, [r7, #24]
   16c34:	2233      	movs	r2, #51	; 0x33
   16c36:	2100      	movs	r1, #0
   16c38:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   16c3a:	2310      	movs	r3, #16
   16c3c:	18fb      	adds	r3, r7, r3
   16c3e:	881b      	ldrh	r3, [r3, #0]
   16c40:	2201      	movs	r2, #1
   16c42:	4013      	ands	r3, r2
   16c44:	d004      	beq.n	16c50 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   16c46:	69bb      	ldr	r3, [r7, #24]
   16c48:	68db      	ldr	r3, [r3, #12]
   16c4a:	69ba      	ldr	r2, [r7, #24]
   16c4c:	0010      	movs	r0, r2
   16c4e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   16c50:	2312      	movs	r3, #18
   16c52:	18fb      	adds	r3, r7, r3
   16c54:	881b      	ldrh	r3, [r3, #0]
   16c56:	2204      	movs	r2, #4
   16c58:	4013      	ands	r3, r2
   16c5a:	d100      	bne.n	16c5e <_usart_interrupt_handler+0x132>
   16c5c:	e0bd      	b.n	16dda <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   16c5e:	69bb      	ldr	r3, [r7, #24]
   16c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   16c62:	b29b      	uxth	r3, r3
   16c64:	2b00      	cmp	r3, #0
   16c66:	d100      	bne.n	16c6a <_usart_interrupt_handler+0x13e>
   16c68:	e0b4      	b.n	16dd4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   16c6a:	697b      	ldr	r3, [r7, #20]
   16c6c:	8b5b      	ldrh	r3, [r3, #26]
   16c6e:	b29b      	uxth	r3, r3
   16c70:	b2da      	uxtb	r2, r3
   16c72:	231f      	movs	r3, #31
   16c74:	18fb      	adds	r3, r7, r3
   16c76:	213f      	movs	r1, #63	; 0x3f
   16c78:	400a      	ands	r2, r1
   16c7a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   16c7c:	231f      	movs	r3, #31
   16c7e:	18fb      	adds	r3, r7, r3
   16c80:	781b      	ldrb	r3, [r3, #0]
   16c82:	2208      	movs	r2, #8
   16c84:	4013      	ands	r3, r2
   16c86:	d007      	beq.n	16c98 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   16c88:	231f      	movs	r3, #31
   16c8a:	18fb      	adds	r3, r7, r3
   16c8c:	221f      	movs	r2, #31
   16c8e:	18ba      	adds	r2, r7, r2
   16c90:	7812      	ldrb	r2, [r2, #0]
   16c92:	2108      	movs	r1, #8
   16c94:	438a      	bics	r2, r1
   16c96:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   16c98:	231f      	movs	r3, #31
   16c9a:	18fb      	adds	r3, r7, r3
   16c9c:	781b      	ldrb	r3, [r3, #0]
   16c9e:	2b00      	cmp	r3, #0
   16ca0:	d050      	beq.n	16d44 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   16ca2:	231f      	movs	r3, #31
   16ca4:	18fb      	adds	r3, r7, r3
   16ca6:	781b      	ldrb	r3, [r3, #0]
   16ca8:	2202      	movs	r2, #2
   16caa:	4013      	ands	r3, r2
   16cac:	d007      	beq.n	16cbe <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   16cae:	69bb      	ldr	r3, [r7, #24]
   16cb0:	2232      	movs	r2, #50	; 0x32
   16cb2:	211a      	movs	r1, #26
   16cb4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   16cb6:	697b      	ldr	r3, [r7, #20]
   16cb8:	2202      	movs	r2, #2
   16cba:	835a      	strh	r2, [r3, #26]
   16cbc:	e036      	b.n	16d2c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   16cbe:	231f      	movs	r3, #31
   16cc0:	18fb      	adds	r3, r7, r3
   16cc2:	781b      	ldrb	r3, [r3, #0]
   16cc4:	2204      	movs	r2, #4
   16cc6:	4013      	ands	r3, r2
   16cc8:	d007      	beq.n	16cda <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   16cca:	69bb      	ldr	r3, [r7, #24]
   16ccc:	2232      	movs	r2, #50	; 0x32
   16cce:	211e      	movs	r1, #30
   16cd0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   16cd2:	697b      	ldr	r3, [r7, #20]
   16cd4:	2204      	movs	r2, #4
   16cd6:	835a      	strh	r2, [r3, #26]
   16cd8:	e028      	b.n	16d2c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   16cda:	231f      	movs	r3, #31
   16cdc:	18fb      	adds	r3, r7, r3
   16cde:	781b      	ldrb	r3, [r3, #0]
   16ce0:	2201      	movs	r2, #1
   16ce2:	4013      	ands	r3, r2
   16ce4:	d007      	beq.n	16cf6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   16ce6:	69bb      	ldr	r3, [r7, #24]
   16ce8:	2232      	movs	r2, #50	; 0x32
   16cea:	2113      	movs	r1, #19
   16cec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   16cee:	697b      	ldr	r3, [r7, #20]
   16cf0:	2201      	movs	r2, #1
   16cf2:	835a      	strh	r2, [r3, #26]
   16cf4:	e01a      	b.n	16d2c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   16cf6:	231f      	movs	r3, #31
   16cf8:	18fb      	adds	r3, r7, r3
   16cfa:	781b      	ldrb	r3, [r3, #0]
   16cfc:	2210      	movs	r2, #16
   16cfe:	4013      	ands	r3, r2
   16d00:	d007      	beq.n	16d12 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   16d02:	69bb      	ldr	r3, [r7, #24]
   16d04:	2232      	movs	r2, #50	; 0x32
   16d06:	2142      	movs	r1, #66	; 0x42
   16d08:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   16d0a:	697b      	ldr	r3, [r7, #20]
   16d0c:	2210      	movs	r2, #16
   16d0e:	835a      	strh	r2, [r3, #26]
   16d10:	e00c      	b.n	16d2c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   16d12:	231f      	movs	r3, #31
   16d14:	18fb      	adds	r3, r7, r3
   16d16:	781b      	ldrb	r3, [r3, #0]
   16d18:	2220      	movs	r2, #32
   16d1a:	4013      	ands	r3, r2
   16d1c:	d006      	beq.n	16d2c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   16d1e:	69bb      	ldr	r3, [r7, #24]
   16d20:	2232      	movs	r2, #50	; 0x32
   16d22:	2141      	movs	r1, #65	; 0x41
   16d24:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   16d26:	697b      	ldr	r3, [r7, #20]
   16d28:	2220      	movs	r2, #32
   16d2a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   16d2c:	2310      	movs	r3, #16
   16d2e:	18fb      	adds	r3, r7, r3
   16d30:	881b      	ldrh	r3, [r3, #0]
   16d32:	2204      	movs	r2, #4
   16d34:	4013      	ands	r3, r2
				if (callback_status
   16d36:	d050      	beq.n	16dda <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   16d38:	69bb      	ldr	r3, [r7, #24]
   16d3a:	695b      	ldr	r3, [r3, #20]
   16d3c:	69ba      	ldr	r2, [r7, #24]
   16d3e:	0010      	movs	r0, r2
   16d40:	4798      	blx	r3
   16d42:	e04a      	b.n	16dda <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   16d44:	697b      	ldr	r3, [r7, #20]
   16d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   16d48:	b29a      	uxth	r2, r3
   16d4a:	230e      	movs	r3, #14
   16d4c:	18fb      	adds	r3, r7, r3
   16d4e:	05d2      	lsls	r2, r2, #23
   16d50:	0dd2      	lsrs	r2, r2, #23
   16d52:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   16d54:	69bb      	ldr	r3, [r7, #24]
   16d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d58:	220e      	movs	r2, #14
   16d5a:	18ba      	adds	r2, r7, r2
   16d5c:	8812      	ldrh	r2, [r2, #0]
   16d5e:	b2d2      	uxtb	r2, r2
   16d60:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   16d62:	69bb      	ldr	r3, [r7, #24]
   16d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d66:	1c5a      	adds	r2, r3, #1
   16d68:	69bb      	ldr	r3, [r7, #24]
   16d6a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   16d6c:	69bb      	ldr	r3, [r7, #24]
   16d6e:	795b      	ldrb	r3, [r3, #5]
   16d70:	2b01      	cmp	r3, #1
   16d72:	d10d      	bne.n	16d90 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   16d74:	69bb      	ldr	r3, [r7, #24]
   16d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d78:	220e      	movs	r2, #14
   16d7a:	18ba      	adds	r2, r7, r2
   16d7c:	8812      	ldrh	r2, [r2, #0]
   16d7e:	0a12      	lsrs	r2, r2, #8
   16d80:	b292      	uxth	r2, r2
   16d82:	b2d2      	uxtb	r2, r2
   16d84:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   16d86:	69bb      	ldr	r3, [r7, #24]
   16d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d8a:	1c5a      	adds	r2, r3, #1
   16d8c:	69bb      	ldr	r3, [r7, #24]
   16d8e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   16d90:	69bb      	ldr	r3, [r7, #24]
   16d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   16d94:	b29b      	uxth	r3, r3
   16d96:	3b01      	subs	r3, #1
   16d98:	b29b      	uxth	r3, r3
   16d9a:	69ba      	ldr	r2, [r7, #24]
   16d9c:	1c19      	adds	r1, r3, #0
   16d9e:	8591      	strh	r1, [r2, #44]	; 0x2c
   16da0:	2b00      	cmp	r3, #0
   16da2:	d11a      	bne.n	16dda <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   16da4:	697b      	ldr	r3, [r7, #20]
   16da6:	2204      	movs	r2, #4
   16da8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   16daa:	69bb      	ldr	r3, [r7, #24]
   16dac:	2232      	movs	r2, #50	; 0x32
   16dae:	2100      	movs	r1, #0
   16db0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   16db2:	2310      	movs	r3, #16
   16db4:	18fb      	adds	r3, r7, r3
   16db6:	881b      	ldrh	r3, [r3, #0]
   16db8:	2202      	movs	r2, #2
   16dba:	4013      	ands	r3, r2
					if (callback_status
   16dbc:	d00d      	beq.n	16dda <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   16dbe:	69bb      	ldr	r3, [r7, #24]
   16dc0:	691b      	ldr	r3, [r3, #16]
   16dc2:	69ba      	ldr	r2, [r7, #24]
   16dc4:	0010      	movs	r0, r2
   16dc6:	4798      	blx	r3
   16dc8:	e007      	b.n	16dda <_usart_interrupt_handler+0x2ae>
   16dca:	46c0      	nop			; (mov r8, r8)
   16dcc:	20005ce8 	.word	0x20005ce8
   16dd0:	0001690d 	.word	0x0001690d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   16dd4:	697b      	ldr	r3, [r7, #20]
   16dd6:	2204      	movs	r2, #4
   16dd8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   16dda:	2312      	movs	r3, #18
   16ddc:	18fb      	adds	r3, r7, r3
   16dde:	881b      	ldrh	r3, [r3, #0]
   16de0:	2210      	movs	r2, #16
   16de2:	4013      	ands	r3, r2
   16de4:	d010      	beq.n	16e08 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   16de6:	697b      	ldr	r3, [r7, #20]
   16de8:	2210      	movs	r2, #16
   16dea:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   16dec:	697b      	ldr	r3, [r7, #20]
   16dee:	2210      	movs	r2, #16
   16df0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   16df2:	2310      	movs	r3, #16
   16df4:	18fb      	adds	r3, r7, r3
   16df6:	881b      	ldrh	r3, [r3, #0]
   16df8:	2210      	movs	r2, #16
   16dfa:	4013      	ands	r3, r2
   16dfc:	d004      	beq.n	16e08 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   16dfe:	69bb      	ldr	r3, [r7, #24]
   16e00:	69db      	ldr	r3, [r3, #28]
   16e02:	69ba      	ldr	r2, [r7, #24]
   16e04:	0010      	movs	r0, r2
   16e06:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   16e08:	2312      	movs	r3, #18
   16e0a:	18fb      	adds	r3, r7, r3
   16e0c:	881b      	ldrh	r3, [r3, #0]
   16e0e:	2220      	movs	r2, #32
   16e10:	4013      	ands	r3, r2
   16e12:	d010      	beq.n	16e36 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   16e14:	697b      	ldr	r3, [r7, #20]
   16e16:	2220      	movs	r2, #32
   16e18:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   16e1a:	697b      	ldr	r3, [r7, #20]
   16e1c:	2220      	movs	r2, #32
   16e1e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   16e20:	2310      	movs	r3, #16
   16e22:	18fb      	adds	r3, r7, r3
   16e24:	881b      	ldrh	r3, [r3, #0]
   16e26:	2208      	movs	r2, #8
   16e28:	4013      	ands	r3, r2
   16e2a:	d004      	beq.n	16e36 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   16e2c:	69bb      	ldr	r3, [r7, #24]
   16e2e:	699b      	ldr	r3, [r3, #24]
   16e30:	69ba      	ldr	r2, [r7, #24]
   16e32:	0010      	movs	r0, r2
   16e34:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   16e36:	2312      	movs	r3, #18
   16e38:	18fb      	adds	r3, r7, r3
   16e3a:	881b      	ldrh	r3, [r3, #0]
   16e3c:	2208      	movs	r2, #8
   16e3e:	4013      	ands	r3, r2
   16e40:	d010      	beq.n	16e64 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   16e42:	697b      	ldr	r3, [r7, #20]
   16e44:	2208      	movs	r2, #8
   16e46:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   16e48:	697b      	ldr	r3, [r7, #20]
   16e4a:	2208      	movs	r2, #8
   16e4c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   16e4e:	2310      	movs	r3, #16
   16e50:	18fb      	adds	r3, r7, r3
   16e52:	881b      	ldrh	r3, [r3, #0]
   16e54:	2220      	movs	r2, #32
   16e56:	4013      	ands	r3, r2
   16e58:	d004      	beq.n	16e64 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   16e5a:	69bb      	ldr	r3, [r7, #24]
   16e5c:	6a1b      	ldr	r3, [r3, #32]
   16e5e:	69ba      	ldr	r2, [r7, #24]
   16e60:	0010      	movs	r0, r2
   16e62:	4798      	blx	r3
		}
	}
#endif
}
   16e64:	46c0      	nop			; (mov r8, r8)
   16e66:	46bd      	mov	sp, r7
   16e68:	b008      	add	sp, #32
   16e6a:	bd80      	pop	{r7, pc}

00016e6c <system_gclk_gen_get_config_defaults>:
{
   16e6c:	b580      	push	{r7, lr}
   16e6e:	b082      	sub	sp, #8
   16e70:	af00      	add	r7, sp, #0
   16e72:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   16e74:	687b      	ldr	r3, [r7, #4]
   16e76:	2201      	movs	r2, #1
   16e78:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   16e7a:	687b      	ldr	r3, [r7, #4]
   16e7c:	2200      	movs	r2, #0
   16e7e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   16e80:	687b      	ldr	r3, [r7, #4]
   16e82:	2206      	movs	r2, #6
   16e84:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   16e86:	687b      	ldr	r3, [r7, #4]
   16e88:	2200      	movs	r2, #0
   16e8a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   16e8c:	687b      	ldr	r3, [r7, #4]
   16e8e:	2200      	movs	r2, #0
   16e90:	725a      	strb	r2, [r3, #9]
}
   16e92:	46c0      	nop			; (mov r8, r8)
   16e94:	46bd      	mov	sp, r7
   16e96:	b002      	add	sp, #8
   16e98:	bd80      	pop	{r7, pc}

00016e9a <system_gclk_chan_get_config_defaults>:
{
   16e9a:	b580      	push	{r7, lr}
   16e9c:	b082      	sub	sp, #8
   16e9e:	af00      	add	r7, sp, #0
   16ea0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   16ea2:	687b      	ldr	r3, [r7, #4]
   16ea4:	2200      	movs	r2, #0
   16ea6:	701a      	strb	r2, [r3, #0]
}
   16ea8:	46c0      	nop			; (mov r8, r8)
   16eaa:	46bd      	mov	sp, r7
   16eac:	b002      	add	sp, #8
   16eae:	bd80      	pop	{r7, pc}

00016eb0 <system_clock_source_osc8m_get_config_defaults>:
{
   16eb0:	b580      	push	{r7, lr}
   16eb2:	b082      	sub	sp, #8
   16eb4:	af00      	add	r7, sp, #0
   16eb6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   16eb8:	687b      	ldr	r3, [r7, #4]
   16eba:	2203      	movs	r2, #3
   16ebc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   16ebe:	687b      	ldr	r3, [r7, #4]
   16ec0:	2200      	movs	r2, #0
   16ec2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   16ec4:	687b      	ldr	r3, [r7, #4]
   16ec6:	2201      	movs	r2, #1
   16ec8:	709a      	strb	r2, [r3, #2]
}
   16eca:	46c0      	nop			; (mov r8, r8)
   16ecc:	46bd      	mov	sp, r7
   16ece:	b002      	add	sp, #8
   16ed0:	bd80      	pop	{r7, pc}
	...

00016ed4 <system_cpu_clock_set_divider>:
{
   16ed4:	b580      	push	{r7, lr}
   16ed6:	b082      	sub	sp, #8
   16ed8:	af00      	add	r7, sp, #0
   16eda:	0002      	movs	r2, r0
   16edc:	1dfb      	adds	r3, r7, #7
   16ede:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   16ee0:	4a03      	ldr	r2, [pc, #12]	; (16ef0 <system_cpu_clock_set_divider+0x1c>)
   16ee2:	1dfb      	adds	r3, r7, #7
   16ee4:	781b      	ldrb	r3, [r3, #0]
   16ee6:	7213      	strb	r3, [r2, #8]
}
   16ee8:	46c0      	nop			; (mov r8, r8)
   16eea:	46bd      	mov	sp, r7
   16eec:	b002      	add	sp, #8
   16eee:	bd80      	pop	{r7, pc}
   16ef0:	40000400 	.word	0x40000400

00016ef4 <system_apb_clock_set_divider>:
{
   16ef4:	b580      	push	{r7, lr}
   16ef6:	b082      	sub	sp, #8
   16ef8:	af00      	add	r7, sp, #0
   16efa:	0002      	movs	r2, r0
   16efc:	1dfb      	adds	r3, r7, #7
   16efe:	701a      	strb	r2, [r3, #0]
   16f00:	1dbb      	adds	r3, r7, #6
   16f02:	1c0a      	adds	r2, r1, #0
   16f04:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   16f06:	1dfb      	adds	r3, r7, #7
   16f08:	781b      	ldrb	r3, [r3, #0]
   16f0a:	2b01      	cmp	r3, #1
   16f0c:	d008      	beq.n	16f20 <system_apb_clock_set_divider+0x2c>
   16f0e:	2b02      	cmp	r3, #2
   16f10:	d00b      	beq.n	16f2a <system_apb_clock_set_divider+0x36>
   16f12:	2b00      	cmp	r3, #0
   16f14:	d10e      	bne.n	16f34 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   16f16:	4a0b      	ldr	r2, [pc, #44]	; (16f44 <system_apb_clock_set_divider+0x50>)
   16f18:	1dbb      	adds	r3, r7, #6
   16f1a:	781b      	ldrb	r3, [r3, #0]
   16f1c:	7253      	strb	r3, [r2, #9]
			break;
   16f1e:	e00b      	b.n	16f38 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   16f20:	4a08      	ldr	r2, [pc, #32]	; (16f44 <system_apb_clock_set_divider+0x50>)
   16f22:	1dbb      	adds	r3, r7, #6
   16f24:	781b      	ldrb	r3, [r3, #0]
   16f26:	7293      	strb	r3, [r2, #10]
			break;
   16f28:	e006      	b.n	16f38 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   16f2a:	4a06      	ldr	r2, [pc, #24]	; (16f44 <system_apb_clock_set_divider+0x50>)
   16f2c:	1dbb      	adds	r3, r7, #6
   16f2e:	781b      	ldrb	r3, [r3, #0]
   16f30:	72d3      	strb	r3, [r2, #11]
			break;
   16f32:	e001      	b.n	16f38 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   16f34:	2317      	movs	r3, #23
   16f36:	e000      	b.n	16f3a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   16f38:	2300      	movs	r3, #0
}
   16f3a:	0018      	movs	r0, r3
   16f3c:	46bd      	mov	sp, r7
   16f3e:	b002      	add	sp, #8
   16f40:	bd80      	pop	{r7, pc}
   16f42:	46c0      	nop			; (mov r8, r8)
   16f44:	40000400 	.word	0x40000400

00016f48 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   16f48:	b580      	push	{r7, lr}
   16f4a:	b082      	sub	sp, #8
   16f4c:	af00      	add	r7, sp, #0
   16f4e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   16f50:	687b      	ldr	r3, [r7, #4]
   16f52:	2201      	movs	r2, #1
   16f54:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   16f56:	687b      	ldr	r3, [r7, #4]
   16f58:	2200      	movs	r2, #0
   16f5a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   16f5c:	687b      	ldr	r3, [r7, #4]
   16f5e:	2200      	movs	r2, #0
   16f60:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   16f62:	687b      	ldr	r3, [r7, #4]
   16f64:	2200      	movs	r2, #0
   16f66:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   16f68:	687b      	ldr	r3, [r7, #4]
   16f6a:	2200      	movs	r2, #0
   16f6c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   16f6e:	687b      	ldr	r3, [r7, #4]
   16f70:	4a0a      	ldr	r2, [pc, #40]	; (16f9c <system_clock_source_dpll_get_config_defaults+0x54>)
   16f72:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   16f74:	687b      	ldr	r3, [r7, #4]
   16f76:	2280      	movs	r2, #128	; 0x80
   16f78:	0212      	lsls	r2, r2, #8
   16f7a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   16f7c:	687b      	ldr	r3, [r7, #4]
   16f7e:	2201      	movs	r2, #1
   16f80:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   16f82:	687b      	ldr	r3, [r7, #4]
   16f84:	2200      	movs	r2, #0
   16f86:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   16f88:	687b      	ldr	r3, [r7, #4]
   16f8a:	2200      	movs	r2, #0
   16f8c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   16f8e:	687b      	ldr	r3, [r7, #4]
   16f90:	2200      	movs	r2, #0
   16f92:	749a      	strb	r2, [r3, #18]
};
   16f94:	46c0      	nop			; (mov r8, r8)
   16f96:	46bd      	mov	sp, r7
   16f98:	b002      	add	sp, #8
   16f9a:	bd80      	pop	{r7, pc}
   16f9c:	02dc6c00 	.word	0x02dc6c00

00016fa0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   16fa0:	b580      	push	{r7, lr}
   16fa2:	b082      	sub	sp, #8
   16fa4:	af00      	add	r7, sp, #0
   16fa6:	0002      	movs	r2, r0
   16fa8:	1dfb      	adds	r3, r7, #7
   16faa:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   16fac:	4a08      	ldr	r2, [pc, #32]	; (16fd0 <system_flash_set_waitstates+0x30>)
   16fae:	1dfb      	adds	r3, r7, #7
   16fb0:	781b      	ldrb	r3, [r3, #0]
   16fb2:	210f      	movs	r1, #15
   16fb4:	400b      	ands	r3, r1
   16fb6:	b2d9      	uxtb	r1, r3
   16fb8:	6853      	ldr	r3, [r2, #4]
   16fba:	200f      	movs	r0, #15
   16fbc:	4001      	ands	r1, r0
   16fbe:	0049      	lsls	r1, r1, #1
   16fc0:	201e      	movs	r0, #30
   16fc2:	4383      	bics	r3, r0
   16fc4:	430b      	orrs	r3, r1
   16fc6:	6053      	str	r3, [r2, #4]
}
   16fc8:	46c0      	nop			; (mov r8, r8)
   16fca:	46bd      	mov	sp, r7
   16fcc:	b002      	add	sp, #8
   16fce:	bd80      	pop	{r7, pc}
   16fd0:	41004000 	.word	0x41004000

00016fd4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   16fd4:	b580      	push	{r7, lr}
   16fd6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   16fd8:	46c0      	nop			; (mov r8, r8)
   16fda:	4b04      	ldr	r3, [pc, #16]	; (16fec <_system_dfll_wait_for_sync+0x18>)
   16fdc:	68db      	ldr	r3, [r3, #12]
   16fde:	2210      	movs	r2, #16
   16fe0:	4013      	ands	r3, r2
   16fe2:	d0fa      	beq.n	16fda <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   16fe4:	46c0      	nop			; (mov r8, r8)
   16fe6:	46bd      	mov	sp, r7
   16fe8:	bd80      	pop	{r7, pc}
   16fea:	46c0      	nop			; (mov r8, r8)
   16fec:	40000800 	.word	0x40000800

00016ff0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   16ff0:	b580      	push	{r7, lr}
   16ff2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   16ff4:	4b0c      	ldr	r3, [pc, #48]	; (17028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   16ff6:	2202      	movs	r2, #2
   16ff8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   16ffa:	4b0c      	ldr	r3, [pc, #48]	; (1702c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   16ffc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   16ffe:	4a0a      	ldr	r2, [pc, #40]	; (17028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   17000:	4b0b      	ldr	r3, [pc, #44]	; (17030 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   17002:	689b      	ldr	r3, [r3, #8]
   17004:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   17006:	4a08      	ldr	r2, [pc, #32]	; (17028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   17008:	4b09      	ldr	r3, [pc, #36]	; (17030 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1700a:	685b      	ldr	r3, [r3, #4]
   1700c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   1700e:	4b06      	ldr	r3, [pc, #24]	; (17028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   17010:	2200      	movs	r2, #0
   17012:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   17014:	4b05      	ldr	r3, [pc, #20]	; (1702c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   17016:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   17018:	4a03      	ldr	r2, [pc, #12]	; (17028 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1701a:	4b05      	ldr	r3, [pc, #20]	; (17030 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1701c:	681b      	ldr	r3, [r3, #0]
   1701e:	b29b      	uxth	r3, r3
   17020:	8493      	strh	r3, [r2, #36]	; 0x24
}
   17022:	46c0      	nop			; (mov r8, r8)
   17024:	46bd      	mov	sp, r7
   17026:	bd80      	pop	{r7, pc}
   17028:	40000800 	.word	0x40000800
   1702c:	00016fd5 	.word	0x00016fd5
   17030:	2000436c 	.word	0x2000436c

00017034 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   17034:	b580      	push	{r7, lr}
   17036:	b082      	sub	sp, #8
   17038:	af00      	add	r7, sp, #0
   1703a:	0002      	movs	r2, r0
   1703c:	1dfb      	adds	r3, r7, #7
   1703e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   17040:	1dfb      	adds	r3, r7, #7
   17042:	781b      	ldrb	r3, [r3, #0]
   17044:	2b08      	cmp	r3, #8
   17046:	d841      	bhi.n	170cc <system_clock_source_get_hz+0x98>
   17048:	009a      	lsls	r2, r3, #2
   1704a:	4b23      	ldr	r3, [pc, #140]	; (170d8 <system_clock_source_get_hz+0xa4>)
   1704c:	18d3      	adds	r3, r2, r3
   1704e:	681b      	ldr	r3, [r3, #0]
   17050:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   17052:	4b22      	ldr	r3, [pc, #136]	; (170dc <system_clock_source_get_hz+0xa8>)
   17054:	691b      	ldr	r3, [r3, #16]
   17056:	e03a      	b.n	170ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   17058:	4b21      	ldr	r3, [pc, #132]	; (170e0 <system_clock_source_get_hz+0xac>)
   1705a:	6a1b      	ldr	r3, [r3, #32]
   1705c:	059b      	lsls	r3, r3, #22
   1705e:	0f9b      	lsrs	r3, r3, #30
   17060:	b2db      	uxtb	r3, r3
   17062:	001a      	movs	r2, r3
   17064:	4b1f      	ldr	r3, [pc, #124]	; (170e4 <system_clock_source_get_hz+0xb0>)
   17066:	40d3      	lsrs	r3, r2
   17068:	e031      	b.n	170ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1706a:	2380      	movs	r3, #128	; 0x80
   1706c:	021b      	lsls	r3, r3, #8
   1706e:	e02e      	b.n	170ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   17070:	2380      	movs	r3, #128	; 0x80
   17072:	021b      	lsls	r3, r3, #8
   17074:	e02b      	b.n	170ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   17076:	4b19      	ldr	r3, [pc, #100]	; (170dc <system_clock_source_get_hz+0xa8>)
   17078:	695b      	ldr	r3, [r3, #20]
   1707a:	e028      	b.n	170ce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1707c:	4b17      	ldr	r3, [pc, #92]	; (170dc <system_clock_source_get_hz+0xa8>)
   1707e:	681b      	ldr	r3, [r3, #0]
   17080:	2202      	movs	r2, #2
   17082:	4013      	ands	r3, r2
   17084:	d101      	bne.n	1708a <system_clock_source_get_hz+0x56>
			return 0;
   17086:	2300      	movs	r3, #0
   17088:	e021      	b.n	170ce <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   1708a:	4b17      	ldr	r3, [pc, #92]	; (170e8 <system_clock_source_get_hz+0xb4>)
   1708c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   1708e:	4b13      	ldr	r3, [pc, #76]	; (170dc <system_clock_source_get_hz+0xa8>)
   17090:	681b      	ldr	r3, [r3, #0]
   17092:	2224      	movs	r2, #36	; 0x24
   17094:	4013      	ands	r3, r2
   17096:	2b04      	cmp	r3, #4
   17098:	d109      	bne.n	170ae <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1709a:	2000      	movs	r0, #0
   1709c:	4b13      	ldr	r3, [pc, #76]	; (170ec <system_clock_source_get_hz+0xb8>)
   1709e:	4798      	blx	r3
   170a0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   170a2:	4b0e      	ldr	r3, [pc, #56]	; (170dc <system_clock_source_get_hz+0xa8>)
   170a4:	689b      	ldr	r3, [r3, #8]
   170a6:	041b      	lsls	r3, r3, #16
   170a8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   170aa:	4353      	muls	r3, r2
   170ac:	e00f      	b.n	170ce <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   170ae:	4b10      	ldr	r3, [pc, #64]	; (170f0 <system_clock_source_get_hz+0xbc>)
   170b0:	e00d      	b.n	170ce <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   170b2:	4a0b      	ldr	r2, [pc, #44]	; (170e0 <system_clock_source_get_hz+0xac>)
   170b4:	2350      	movs	r3, #80	; 0x50
   170b6:	5cd3      	ldrb	r3, [r2, r3]
   170b8:	b2db      	uxtb	r3, r3
   170ba:	001a      	movs	r2, r3
   170bc:	2304      	movs	r3, #4
   170be:	4013      	ands	r3, r2
   170c0:	d101      	bne.n	170c6 <system_clock_source_get_hz+0x92>
			return 0;
   170c2:	2300      	movs	r3, #0
   170c4:	e003      	b.n	170ce <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   170c6:	4b05      	ldr	r3, [pc, #20]	; (170dc <system_clock_source_get_hz+0xa8>)
   170c8:	68db      	ldr	r3, [r3, #12]
   170ca:	e000      	b.n	170ce <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   170cc:	2300      	movs	r3, #0
	}
}
   170ce:	0018      	movs	r0, r3
   170d0:	46bd      	mov	sp, r7
   170d2:	b002      	add	sp, #8
   170d4:	bd80      	pop	{r7, pc}
   170d6:	46c0      	nop			; (mov r8, r8)
   170d8:	0002829c 	.word	0x0002829c
   170dc:	2000436c 	.word	0x2000436c
   170e0:	40000800 	.word	0x40000800
   170e4:	007a1200 	.word	0x007a1200
   170e8:	00016fd5 	.word	0x00016fd5
   170ec:	00017ad1 	.word	0x00017ad1
   170f0:	02dc6c00 	.word	0x02dc6c00

000170f4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   170f4:	b580      	push	{r7, lr}
   170f6:	b084      	sub	sp, #16
   170f8:	af00      	add	r7, sp, #0
   170fa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   170fc:	4b1a      	ldr	r3, [pc, #104]	; (17168 <system_clock_source_osc8m_set_config+0x74>)
   170fe:	6a1b      	ldr	r3, [r3, #32]
   17100:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   17102:	687b      	ldr	r3, [r7, #4]
   17104:	781b      	ldrb	r3, [r3, #0]
   17106:	1c1a      	adds	r2, r3, #0
   17108:	2303      	movs	r3, #3
   1710a:	4013      	ands	r3, r2
   1710c:	b2da      	uxtb	r2, r3
   1710e:	230d      	movs	r3, #13
   17110:	18fb      	adds	r3, r7, r3
   17112:	2103      	movs	r1, #3
   17114:	400a      	ands	r2, r1
   17116:	0010      	movs	r0, r2
   17118:	781a      	ldrb	r2, [r3, #0]
   1711a:	2103      	movs	r1, #3
   1711c:	438a      	bics	r2, r1
   1711e:	1c11      	adds	r1, r2, #0
   17120:	1c02      	adds	r2, r0, #0
   17122:	430a      	orrs	r2, r1
   17124:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   17126:	687b      	ldr	r3, [r7, #4]
   17128:	789a      	ldrb	r2, [r3, #2]
   1712a:	230c      	movs	r3, #12
   1712c:	18fb      	adds	r3, r7, r3
   1712e:	01d0      	lsls	r0, r2, #7
   17130:	781a      	ldrb	r2, [r3, #0]
   17132:	217f      	movs	r1, #127	; 0x7f
   17134:	400a      	ands	r2, r1
   17136:	1c11      	adds	r1, r2, #0
   17138:	1c02      	adds	r2, r0, #0
   1713a:	430a      	orrs	r2, r1
   1713c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1713e:	687b      	ldr	r3, [r7, #4]
   17140:	785a      	ldrb	r2, [r3, #1]
   17142:	230c      	movs	r3, #12
   17144:	18fb      	adds	r3, r7, r3
   17146:	2101      	movs	r1, #1
   17148:	400a      	ands	r2, r1
   1714a:	0190      	lsls	r0, r2, #6
   1714c:	781a      	ldrb	r2, [r3, #0]
   1714e:	2140      	movs	r1, #64	; 0x40
   17150:	438a      	bics	r2, r1
   17152:	1c11      	adds	r1, r2, #0
   17154:	1c02      	adds	r2, r0, #0
   17156:	430a      	orrs	r2, r1
   17158:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   1715a:	4b03      	ldr	r3, [pc, #12]	; (17168 <system_clock_source_osc8m_set_config+0x74>)
   1715c:	68fa      	ldr	r2, [r7, #12]
   1715e:	621a      	str	r2, [r3, #32]
}
   17160:	46c0      	nop			; (mov r8, r8)
   17162:	46bd      	mov	sp, r7
   17164:	b004      	add	sp, #16
   17166:	bd80      	pop	{r7, pc}
   17168:	40000800 	.word	0x40000800

0001716c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1716c:	b580      	push	{r7, lr}
   1716e:	b086      	sub	sp, #24
   17170:	af00      	add	r7, sp, #0
   17172:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   17174:	687b      	ldr	r3, [r7, #4]
   17176:	68db      	ldr	r3, [r3, #12]
   17178:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1717a:	687b      	ldr	r3, [r7, #4]
   1717c:	7d1b      	ldrb	r3, [r3, #20]
   1717e:	2b01      	cmp	r3, #1
   17180:	d10a      	bne.n	17198 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   17182:	687b      	ldr	r3, [r7, #4]
   17184:	8a1b      	ldrh	r3, [r3, #16]
   17186:	3301      	adds	r3, #1
   17188:	005b      	lsls	r3, r3, #1
   1718a:	001a      	movs	r2, r3
   1718c:	4b36      	ldr	r3, [pc, #216]	; (17268 <system_clock_source_dpll_set_config+0xfc>)
   1718e:	0011      	movs	r1, r2
   17190:	6978      	ldr	r0, [r7, #20]
   17192:	4798      	blx	r3
   17194:	0003      	movs	r3, r0
   17196:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   17198:	687b      	ldr	r3, [r7, #4]
   1719a:	689b      	ldr	r3, [r3, #8]
   1719c:	011a      	lsls	r2, r3, #4
   1719e:	4b32      	ldr	r3, [pc, #200]	; (17268 <system_clock_source_dpll_set_config+0xfc>)
   171a0:	6979      	ldr	r1, [r7, #20]
   171a2:	0010      	movs	r0, r2
   171a4:	4798      	blx	r3
   171a6:	0003      	movs	r3, r0
   171a8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   171aa:	693b      	ldr	r3, [r7, #16]
   171ac:	b2da      	uxtb	r2, r3
   171ae:	230f      	movs	r3, #15
   171b0:	18fb      	adds	r3, r7, r3
   171b2:	210f      	movs	r1, #15
   171b4:	400a      	ands	r2, r1
   171b6:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   171b8:	693b      	ldr	r3, [r7, #16]
   171ba:	091b      	lsrs	r3, r3, #4
   171bc:	3b01      	subs	r3, #1
   171be:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   171c0:	492a      	ldr	r1, [pc, #168]	; (1726c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   171c2:	687b      	ldr	r3, [r7, #4]
   171c4:	781b      	ldrb	r3, [r3, #0]
   171c6:	01db      	lsls	r3, r3, #7
   171c8:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   171ca:	687b      	ldr	r3, [r7, #4]
   171cc:	785b      	ldrb	r3, [r3, #1]
   171ce:	019b      	lsls	r3, r3, #6
   171d0:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   171d2:	4313      	orrs	r3, r2
   171d4:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   171d6:	2344      	movs	r3, #68	; 0x44
   171d8:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   171da:	4b24      	ldr	r3, [pc, #144]	; (1726c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   171dc:	220f      	movs	r2, #15
   171de:	18ba      	adds	r2, r7, r2
   171e0:	7812      	ldrb	r2, [r2, #0]
   171e2:	0412      	lsls	r2, r2, #16
   171e4:	0011      	movs	r1, r2
   171e6:	22f0      	movs	r2, #240	; 0xf0
   171e8:	0312      	lsls	r2, r2, #12
   171ea:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   171ec:	693a      	ldr	r2, [r7, #16]
   171ee:	0512      	lsls	r2, r2, #20
   171f0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   171f2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   171f4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   171f6:	4b1d      	ldr	r3, [pc, #116]	; (1726c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   171f8:	687a      	ldr	r2, [r7, #4]
   171fa:	8a12      	ldrh	r2, [r2, #16]
   171fc:	0412      	lsls	r2, r2, #16
   171fe:	0011      	movs	r1, r2
   17200:	4a1b      	ldr	r2, [pc, #108]	; (17270 <system_clock_source_dpll_set_config+0x104>)
   17202:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   17204:	687a      	ldr	r2, [r7, #4]
   17206:	7892      	ldrb	r2, [r2, #2]
   17208:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1720a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1720c:	687a      	ldr	r2, [r7, #4]
   1720e:	7cd2      	ldrb	r2, [r2, #19]
   17210:	0212      	lsls	r2, r2, #8
   17212:	0010      	movs	r0, r2
   17214:	22e0      	movs	r2, #224	; 0xe0
   17216:	00d2      	lsls	r2, r2, #3
   17218:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1721a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1721c:	687a      	ldr	r2, [r7, #4]
   1721e:	7d12      	ldrb	r2, [r2, #20]
   17220:	0112      	lsls	r2, r2, #4
   17222:	0010      	movs	r0, r2
   17224:	2230      	movs	r2, #48	; 0x30
   17226:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   17228:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1722a:	687a      	ldr	r2, [r7, #4]
   1722c:	78d2      	ldrb	r2, [r2, #3]
   1722e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   17230:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   17232:	687a      	ldr	r2, [r7, #4]
   17234:	7912      	ldrb	r2, [r2, #4]
   17236:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   17238:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   1723a:	687a      	ldr	r2, [r7, #4]
   1723c:	7c92      	ldrb	r2, [r2, #18]
   1723e:	0010      	movs	r0, r2
   17240:	2203      	movs	r2, #3
   17242:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   17244:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   17246:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   17248:	693b      	ldr	r3, [r7, #16]
   1724a:	3301      	adds	r3, #1
   1724c:	011a      	lsls	r2, r3, #4
   1724e:	230f      	movs	r3, #15
   17250:	18fb      	adds	r3, r7, r3
   17252:	781b      	ldrb	r3, [r3, #0]
   17254:	18d3      	adds	r3, r2, r3
   17256:	697a      	ldr	r2, [r7, #20]
   17258:	4353      	muls	r3, r2
   1725a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   1725c:	4b05      	ldr	r3, [pc, #20]	; (17274 <system_clock_source_dpll_set_config+0x108>)
   1725e:	60da      	str	r2, [r3, #12]
}
   17260:	46c0      	nop			; (mov r8, r8)
   17262:	46bd      	mov	sp, r7
   17264:	b006      	add	sp, #24
   17266:	bd80      	pop	{r7, pc}
   17268:	00020471 	.word	0x00020471
   1726c:	40000800 	.word	0x40000800
   17270:	07ff0000 	.word	0x07ff0000
   17274:	2000436c 	.word	0x2000436c

00017278 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   17278:	b580      	push	{r7, lr}
   1727a:	b082      	sub	sp, #8
   1727c:	af00      	add	r7, sp, #0
   1727e:	0002      	movs	r2, r0
   17280:	1dfb      	adds	r3, r7, #7
   17282:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   17284:	1dfb      	adds	r3, r7, #7
   17286:	781b      	ldrb	r3, [r3, #0]
   17288:	2b08      	cmp	r3, #8
   1728a:	d83b      	bhi.n	17304 <system_clock_source_enable+0x8c>
   1728c:	009a      	lsls	r2, r3, #2
   1728e:	4b21      	ldr	r3, [pc, #132]	; (17314 <system_clock_source_enable+0x9c>)
   17290:	18d3      	adds	r3, r2, r3
   17292:	681b      	ldr	r3, [r3, #0]
   17294:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   17296:	4b20      	ldr	r3, [pc, #128]	; (17318 <system_clock_source_enable+0xa0>)
   17298:	4a1f      	ldr	r2, [pc, #124]	; (17318 <system_clock_source_enable+0xa0>)
   1729a:	6a12      	ldr	r2, [r2, #32]
   1729c:	2102      	movs	r1, #2
   1729e:	430a      	orrs	r2, r1
   172a0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   172a2:	2300      	movs	r3, #0
   172a4:	e031      	b.n	1730a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   172a6:	4b1c      	ldr	r3, [pc, #112]	; (17318 <system_clock_source_enable+0xa0>)
   172a8:	4a1b      	ldr	r2, [pc, #108]	; (17318 <system_clock_source_enable+0xa0>)
   172aa:	6992      	ldr	r2, [r2, #24]
   172ac:	2102      	movs	r1, #2
   172ae:	430a      	orrs	r2, r1
   172b0:	619a      	str	r2, [r3, #24]
		break;
   172b2:	e029      	b.n	17308 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   172b4:	4a18      	ldr	r2, [pc, #96]	; (17318 <system_clock_source_enable+0xa0>)
   172b6:	4b18      	ldr	r3, [pc, #96]	; (17318 <system_clock_source_enable+0xa0>)
   172b8:	8a1b      	ldrh	r3, [r3, #16]
   172ba:	b29b      	uxth	r3, r3
   172bc:	2102      	movs	r1, #2
   172be:	430b      	orrs	r3, r1
   172c0:	b29b      	uxth	r3, r3
   172c2:	8213      	strh	r3, [r2, #16]
		break;
   172c4:	e020      	b.n	17308 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   172c6:	4a14      	ldr	r2, [pc, #80]	; (17318 <system_clock_source_enable+0xa0>)
   172c8:	4b13      	ldr	r3, [pc, #76]	; (17318 <system_clock_source_enable+0xa0>)
   172ca:	8a9b      	ldrh	r3, [r3, #20]
   172cc:	b29b      	uxth	r3, r3
   172ce:	2102      	movs	r1, #2
   172d0:	430b      	orrs	r3, r1
   172d2:	b29b      	uxth	r3, r3
   172d4:	8293      	strh	r3, [r2, #20]
		break;
   172d6:	e017      	b.n	17308 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   172d8:	4b10      	ldr	r3, [pc, #64]	; (1731c <system_clock_source_enable+0xa4>)
   172da:	681b      	ldr	r3, [r3, #0]
   172dc:	2202      	movs	r2, #2
   172de:	431a      	orrs	r2, r3
   172e0:	4b0e      	ldr	r3, [pc, #56]	; (1731c <system_clock_source_enable+0xa4>)
   172e2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   172e4:	4b0e      	ldr	r3, [pc, #56]	; (17320 <system_clock_source_enable+0xa8>)
   172e6:	4798      	blx	r3
		break;
   172e8:	e00e      	b.n	17308 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   172ea:	4a0b      	ldr	r2, [pc, #44]	; (17318 <system_clock_source_enable+0xa0>)
   172ec:	490a      	ldr	r1, [pc, #40]	; (17318 <system_clock_source_enable+0xa0>)
   172ee:	2344      	movs	r3, #68	; 0x44
   172f0:	5ccb      	ldrb	r3, [r1, r3]
   172f2:	b2db      	uxtb	r3, r3
   172f4:	2102      	movs	r1, #2
   172f6:	430b      	orrs	r3, r1
   172f8:	b2d9      	uxtb	r1, r3
   172fa:	2344      	movs	r3, #68	; 0x44
   172fc:	54d1      	strb	r1, [r2, r3]
		break;
   172fe:	e003      	b.n	17308 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   17300:	2300      	movs	r3, #0
   17302:	e002      	b.n	1730a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   17304:	2317      	movs	r3, #23
   17306:	e000      	b.n	1730a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   17308:	2300      	movs	r3, #0
}
   1730a:	0018      	movs	r0, r3
   1730c:	46bd      	mov	sp, r7
   1730e:	b002      	add	sp, #8
   17310:	bd80      	pop	{r7, pc}
   17312:	46c0      	nop			; (mov r8, r8)
   17314:	000282c0 	.word	0x000282c0
   17318:	40000800 	.word	0x40000800
   1731c:	2000436c 	.word	0x2000436c
   17320:	00016ff1 	.word	0x00016ff1

00017324 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   17324:	b580      	push	{r7, lr}
   17326:	b084      	sub	sp, #16
   17328:	af00      	add	r7, sp, #0
   1732a:	0002      	movs	r2, r0
   1732c:	1dfb      	adds	r3, r7, #7
   1732e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   17330:	2300      	movs	r3, #0
   17332:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   17334:	1dfb      	adds	r3, r7, #7
   17336:	781b      	ldrb	r3, [r3, #0]
   17338:	2b08      	cmp	r3, #8
   1733a:	d821      	bhi.n	17380 <system_clock_source_is_ready+0x5c>
   1733c:	009a      	lsls	r2, r3, #2
   1733e:	4b18      	ldr	r3, [pc, #96]	; (173a0 <system_clock_source_is_ready+0x7c>)
   17340:	18d3      	adds	r3, r2, r3
   17342:	681b      	ldr	r3, [r3, #0]
   17344:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   17346:	2308      	movs	r3, #8
   17348:	60fb      	str	r3, [r7, #12]
		break;
   1734a:	e01b      	b.n	17384 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   1734c:	2304      	movs	r3, #4
   1734e:	60fb      	str	r3, [r7, #12]
		break;
   17350:	e018      	b.n	17384 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   17352:	2301      	movs	r3, #1
   17354:	60fb      	str	r3, [r7, #12]
		break;
   17356:	e015      	b.n	17384 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   17358:	2302      	movs	r3, #2
   1735a:	60fb      	str	r3, [r7, #12]
		break;
   1735c:	e012      	b.n	17384 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   1735e:	2310      	movs	r3, #16
   17360:	60fb      	str	r3, [r7, #12]
		}
		break;
   17362:	e00f      	b.n	17384 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   17364:	4a0f      	ldr	r2, [pc, #60]	; (173a4 <system_clock_source_is_ready+0x80>)
   17366:	2350      	movs	r3, #80	; 0x50
   17368:	5cd3      	ldrb	r3, [r2, r3]
   1736a:	b2db      	uxtb	r3, r3
   1736c:	001a      	movs	r2, r3
   1736e:	2303      	movs	r3, #3
   17370:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   17372:	3b03      	subs	r3, #3
   17374:	425a      	negs	r2, r3
   17376:	4153      	adcs	r3, r2
   17378:	b2db      	uxtb	r3, r3
   1737a:	e00c      	b.n	17396 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   1737c:	2301      	movs	r3, #1
   1737e:	e00a      	b.n	17396 <system_clock_source_is_ready+0x72>

	default:
		return false;
   17380:	2300      	movs	r3, #0
   17382:	e008      	b.n	17396 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   17384:	4b07      	ldr	r3, [pc, #28]	; (173a4 <system_clock_source_is_ready+0x80>)
   17386:	68db      	ldr	r3, [r3, #12]
   17388:	68fa      	ldr	r2, [r7, #12]
   1738a:	401a      	ands	r2, r3
   1738c:	68fb      	ldr	r3, [r7, #12]
   1738e:	1ad3      	subs	r3, r2, r3
   17390:	425a      	negs	r2, r3
   17392:	4153      	adcs	r3, r2
   17394:	b2db      	uxtb	r3, r3
}
   17396:	0018      	movs	r0, r3
   17398:	46bd      	mov	sp, r7
   1739a:	b004      	add	sp, #16
   1739c:	bd80      	pop	{r7, pc}
   1739e:	46c0      	nop			; (mov r8, r8)
   173a0:	000282e4 	.word	0x000282e4
   173a4:	40000800 	.word	0x40000800

000173a8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   173a8:	b580      	push	{r7, lr}
   173aa:	b082      	sub	sp, #8
   173ac:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   173ae:	003b      	movs	r3, r7
   173b0:	2203      	movs	r2, #3
   173b2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   173b4:	2300      	movs	r3, #0
   173b6:	607b      	str	r3, [r7, #4]
   173b8:	e009      	b.n	173ce <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   173ba:	687b      	ldr	r3, [r7, #4]
   173bc:	b2db      	uxtb	r3, r3
   173be:	003a      	movs	r2, r7
   173c0:	0011      	movs	r1, r2
   173c2:	0018      	movs	r0, r3
   173c4:	4b05      	ldr	r3, [pc, #20]	; (173dc <_switch_peripheral_gclk+0x34>)
   173c6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   173c8:	687b      	ldr	r3, [r7, #4]
   173ca:	3301      	adds	r3, #1
   173cc:	607b      	str	r3, [r7, #4]
   173ce:	687b      	ldr	r3, [r7, #4]
   173d0:	2b24      	cmp	r3, #36	; 0x24
   173d2:	d9f2      	bls.n	173ba <_switch_peripheral_gclk+0x12>
	}
}
   173d4:	46c0      	nop			; (mov r8, r8)
   173d6:	46bd      	mov	sp, r7
   173d8:	b002      	add	sp, #8
   173da:	bd80      	pop	{r7, pc}
   173dc:	000179ad 	.word	0x000179ad

000173e0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   173e0:	b580      	push	{r7, lr}
   173e2:	b0a6      	sub	sp, #152	; 0x98
   173e4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   173e6:	4b92      	ldr	r3, [pc, #584]	; (17630 <system_clock_init+0x250>)
   173e8:	22c2      	movs	r2, #194	; 0xc2
   173ea:	00d2      	lsls	r2, r2, #3
   173ec:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   173ee:	2003      	movs	r0, #3
   173f0:	4b90      	ldr	r3, [pc, #576]	; (17634 <system_clock_init+0x254>)
   173f2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   173f4:	4b90      	ldr	r3, [pc, #576]	; (17638 <system_clock_init+0x258>)
   173f6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   173f8:	2394      	movs	r3, #148	; 0x94
   173fa:	18fb      	adds	r3, r7, r3
   173fc:	0018      	movs	r0, r3
   173fe:	4b8f      	ldr	r3, [pc, #572]	; (1763c <system_clock_init+0x25c>)
   17400:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   17402:	2394      	movs	r3, #148	; 0x94
   17404:	18fb      	adds	r3, r7, r3
   17406:	2200      	movs	r2, #0
   17408:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   1740a:	2394      	movs	r3, #148	; 0x94
   1740c:	18fb      	adds	r3, r7, r3
   1740e:	2201      	movs	r2, #1
   17410:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   17412:	2394      	movs	r3, #148	; 0x94
   17414:	18fb      	adds	r3, r7, r3
   17416:	2200      	movs	r2, #0
   17418:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1741a:	2394      	movs	r3, #148	; 0x94
   1741c:	18fb      	adds	r3, r7, r3
   1741e:	0018      	movs	r0, r3
   17420:	4b87      	ldr	r3, [pc, #540]	; (17640 <system_clock_init+0x260>)
   17422:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   17424:	2006      	movs	r0, #6
   17426:	4b87      	ldr	r3, [pc, #540]	; (17644 <system_clock_init+0x264>)
   17428:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1742a:	4b87      	ldr	r3, [pc, #540]	; (17648 <system_clock_init+0x268>)
   1742c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1742e:	2360      	movs	r3, #96	; 0x60
   17430:	18fb      	adds	r3, r7, r3
   17432:	0018      	movs	r0, r3
   17434:	4b85      	ldr	r3, [pc, #532]	; (1764c <system_clock_init+0x26c>)
   17436:	4798      	blx	r3
   17438:	2360      	movs	r3, #96	; 0x60
   1743a:	18fb      	adds	r3, r7, r3
   1743c:	2206      	movs	r2, #6
   1743e:	701a      	strb	r2, [r3, #0]
   17440:	2360      	movs	r3, #96	; 0x60
   17442:	18fb      	adds	r3, r7, r3
   17444:	2208      	movs	r2, #8
   17446:	605a      	str	r2, [r3, #4]
   17448:	2360      	movs	r3, #96	; 0x60
   1744a:	18fb      	adds	r3, r7, r3
   1744c:	2200      	movs	r2, #0
   1744e:	721a      	strb	r2, [r3, #8]
   17450:	2360      	movs	r3, #96	; 0x60
   17452:	18fb      	adds	r3, r7, r3
   17454:	2200      	movs	r2, #0
   17456:	725a      	strb	r2, [r3, #9]
   17458:	2360      	movs	r3, #96	; 0x60
   1745a:	18fb      	adds	r3, r7, r3
   1745c:	0019      	movs	r1, r3
   1745e:	2001      	movs	r0, #1
   17460:	4b7b      	ldr	r3, [pc, #492]	; (17650 <system_clock_init+0x270>)
   17462:	4798      	blx	r3
   17464:	2001      	movs	r0, #1
   17466:	4b7b      	ldr	r3, [pc, #492]	; (17654 <system_clock_init+0x274>)
   17468:	4798      	blx	r3
   1746a:	2354      	movs	r3, #84	; 0x54
   1746c:	18fb      	adds	r3, r7, r3
   1746e:	0018      	movs	r0, r3
   17470:	4b76      	ldr	r3, [pc, #472]	; (1764c <system_clock_init+0x26c>)
   17472:	4798      	blx	r3
   17474:	2354      	movs	r3, #84	; 0x54
   17476:	18fb      	adds	r3, r7, r3
   17478:	2203      	movs	r2, #3
   1747a:	701a      	strb	r2, [r3, #0]
   1747c:	2354      	movs	r3, #84	; 0x54
   1747e:	18fb      	adds	r3, r7, r3
   17480:	2201      	movs	r2, #1
   17482:	605a      	str	r2, [r3, #4]
   17484:	2354      	movs	r3, #84	; 0x54
   17486:	18fb      	adds	r3, r7, r3
   17488:	2201      	movs	r2, #1
   1748a:	721a      	strb	r2, [r3, #8]
   1748c:	2354      	movs	r3, #84	; 0x54
   1748e:	18fb      	adds	r3, r7, r3
   17490:	2200      	movs	r2, #0
   17492:	725a      	strb	r2, [r3, #9]
   17494:	2354      	movs	r3, #84	; 0x54
   17496:	18fb      	adds	r3, r7, r3
   17498:	0019      	movs	r1, r3
   1749a:	2002      	movs	r0, #2
   1749c:	4b6c      	ldr	r3, [pc, #432]	; (17650 <system_clock_init+0x270>)
   1749e:	4798      	blx	r3
   174a0:	2002      	movs	r0, #2
   174a2:	4b6c      	ldr	r3, [pc, #432]	; (17654 <system_clock_init+0x274>)
   174a4:	4798      	blx	r3
   174a6:	233c      	movs	r3, #60	; 0x3c
   174a8:	18fb      	adds	r3, r7, r3
   174aa:	0018      	movs	r0, r3
   174ac:	4b67      	ldr	r3, [pc, #412]	; (1764c <system_clock_init+0x26c>)
   174ae:	4798      	blx	r3
   174b0:	233c      	movs	r3, #60	; 0x3c
   174b2:	18fb      	adds	r3, r7, r3
   174b4:	2203      	movs	r2, #3
   174b6:	701a      	strb	r2, [r3, #0]
   174b8:	233c      	movs	r3, #60	; 0x3c
   174ba:	18fb      	adds	r3, r7, r3
   174bc:	2220      	movs	r2, #32
   174be:	605a      	str	r2, [r3, #4]
   174c0:	233c      	movs	r3, #60	; 0x3c
   174c2:	18fb      	adds	r3, r7, r3
   174c4:	2200      	movs	r2, #0
   174c6:	721a      	strb	r2, [r3, #8]
   174c8:	233c      	movs	r3, #60	; 0x3c
   174ca:	18fb      	adds	r3, r7, r3
   174cc:	2200      	movs	r2, #0
   174ce:	725a      	strb	r2, [r3, #9]
   174d0:	233c      	movs	r3, #60	; 0x3c
   174d2:	18fb      	adds	r3, r7, r3
   174d4:	0019      	movs	r1, r3
   174d6:	2004      	movs	r0, #4
   174d8:	4b5d      	ldr	r3, [pc, #372]	; (17650 <system_clock_init+0x270>)
   174da:	4798      	blx	r3
   174dc:	2004      	movs	r0, #4
   174de:	4b5d      	ldr	r3, [pc, #372]	; (17654 <system_clock_init+0x274>)
   174e0:	4798      	blx	r3
   174e2:	2330      	movs	r3, #48	; 0x30
   174e4:	18fb      	adds	r3, r7, r3
   174e6:	0018      	movs	r0, r3
   174e8:	4b58      	ldr	r3, [pc, #352]	; (1764c <system_clock_init+0x26c>)
   174ea:	4798      	blx	r3
   174ec:	2330      	movs	r3, #48	; 0x30
   174ee:	18fb      	adds	r3, r7, r3
   174f0:	2206      	movs	r2, #6
   174f2:	701a      	strb	r2, [r3, #0]
   174f4:	2330      	movs	r3, #48	; 0x30
   174f6:	18fb      	adds	r3, r7, r3
   174f8:	2201      	movs	r2, #1
   174fa:	605a      	str	r2, [r3, #4]
   174fc:	2330      	movs	r3, #48	; 0x30
   174fe:	18fb      	adds	r3, r7, r3
   17500:	2200      	movs	r2, #0
   17502:	721a      	strb	r2, [r3, #8]
   17504:	2330      	movs	r3, #48	; 0x30
   17506:	18fb      	adds	r3, r7, r3
   17508:	2200      	movs	r2, #0
   1750a:	725a      	strb	r2, [r3, #9]
   1750c:	2330      	movs	r3, #48	; 0x30
   1750e:	18fb      	adds	r3, r7, r3
   17510:	0019      	movs	r1, r3
   17512:	2005      	movs	r0, #5
   17514:	4b4e      	ldr	r3, [pc, #312]	; (17650 <system_clock_init+0x270>)
   17516:	4798      	blx	r3
   17518:	2005      	movs	r0, #5
   1751a:	4b4e      	ldr	r3, [pc, #312]	; (17654 <system_clock_init+0x274>)
   1751c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   1751e:	2390      	movs	r3, #144	; 0x90
   17520:	18fb      	adds	r3, r7, r3
   17522:	0018      	movs	r0, r3
   17524:	4b4c      	ldr	r3, [pc, #304]	; (17658 <system_clock_init+0x278>)
   17526:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   17528:	2390      	movs	r3, #144	; 0x90
   1752a:	18fb      	adds	r3, r7, r3
   1752c:	2201      	movs	r2, #1
   1752e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   17530:	2390      	movs	r3, #144	; 0x90
   17532:	18fb      	adds	r3, r7, r3
   17534:	0019      	movs	r1, r3
   17536:	2001      	movs	r0, #1
   17538:	4b48      	ldr	r3, [pc, #288]	; (1765c <system_clock_init+0x27c>)
   1753a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1753c:	2001      	movs	r0, #1
   1753e:	4b48      	ldr	r3, [pc, #288]	; (17660 <system_clock_init+0x280>)
   17540:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   17542:	2378      	movs	r3, #120	; 0x78
   17544:	18fb      	adds	r3, r7, r3
   17546:	0018      	movs	r0, r3
   17548:	4b46      	ldr	r3, [pc, #280]	; (17664 <system_clock_init+0x284>)
   1754a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   1754c:	2378      	movs	r3, #120	; 0x78
   1754e:	18fb      	adds	r3, r7, r3
   17550:	2200      	movs	r2, #0
   17552:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   17554:	2378      	movs	r3, #120	; 0x78
   17556:	18fb      	adds	r3, r7, r3
   17558:	2200      	movs	r2, #0
   1755a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   1755c:	2378      	movs	r3, #120	; 0x78
   1755e:	18fb      	adds	r3, r7, r3
   17560:	2200      	movs	r2, #0
   17562:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   17564:	2378      	movs	r3, #120	; 0x78
   17566:	18fb      	adds	r3, r7, r3
   17568:	2200      	movs	r2, #0
   1756a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   1756c:	2378      	movs	r3, #120	; 0x78
   1756e:	18fb      	adds	r3, r7, r3
   17570:	2200      	movs	r2, #0
   17572:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   17574:	2378      	movs	r3, #120	; 0x78
   17576:	18fb      	adds	r3, r7, r3
   17578:	2200      	movs	r2, #0
   1757a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   1757c:	2378      	movs	r3, #120	; 0x78
   1757e:	18fb      	adds	r3, r7, r3
   17580:	2200      	movs	r2, #0
   17582:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   17584:	2378      	movs	r3, #120	; 0x78
   17586:	18fb      	adds	r3, r7, r3
   17588:	2202      	movs	r2, #2
   1758a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1758c:	2378      	movs	r3, #120	; 0x78
   1758e:	18fb      	adds	r3, r7, r3
   17590:	4a35      	ldr	r2, [pc, #212]	; (17668 <system_clock_init+0x288>)
   17592:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   17594:	2378      	movs	r3, #120	; 0x78
   17596:	18fb      	adds	r3, r7, r3
   17598:	2201      	movs	r2, #1
   1759a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   1759c:	2378      	movs	r3, #120	; 0x78
   1759e:	18fb      	adds	r3, r7, r3
   175a0:	4a32      	ldr	r2, [pc, #200]	; (1766c <system_clock_init+0x28c>)
   175a2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   175a4:	2378      	movs	r3, #120	; 0x78
   175a6:	18fb      	adds	r3, r7, r3
   175a8:	0018      	movs	r0, r3
   175aa:	4b31      	ldr	r3, [pc, #196]	; (17670 <system_clock_init+0x290>)
   175ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   175ae:	2008      	movs	r0, #8
   175b0:	4b24      	ldr	r3, [pc, #144]	; (17644 <system_clock_init+0x264>)
   175b2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   175b4:	46c0      	nop			; (mov r8, r8)
   175b6:	2008      	movs	r0, #8
   175b8:	4b2e      	ldr	r3, [pc, #184]	; (17674 <system_clock_init+0x294>)
   175ba:	4798      	blx	r3
   175bc:	0003      	movs	r3, r0
   175be:	001a      	movs	r2, r3
   175c0:	2301      	movs	r3, #1
   175c2:	4053      	eors	r3, r2
   175c4:	b2db      	uxtb	r3, r3
   175c6:	2b00      	cmp	r3, #0
   175c8:	d1f5      	bne.n	175b6 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   175ca:	4919      	ldr	r1, [pc, #100]	; (17630 <system_clock_init+0x250>)
   175cc:	2244      	movs	r2, #68	; 0x44
   175ce:	5c8b      	ldrb	r3, [r1, r2]
   175d0:	2080      	movs	r0, #128	; 0x80
   175d2:	4240      	negs	r0, r0
   175d4:	4303      	orrs	r3, r0
   175d6:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   175d8:	2000      	movs	r0, #0
   175da:	4b27      	ldr	r3, [pc, #156]	; (17678 <system_clock_init+0x298>)
   175dc:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   175de:	2100      	movs	r1, #0
   175e0:	2000      	movs	r0, #0
   175e2:	4b26      	ldr	r3, [pc, #152]	; (1767c <system_clock_init+0x29c>)
   175e4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   175e6:	2100      	movs	r1, #0
   175e8:	2001      	movs	r0, #1
   175ea:	4b24      	ldr	r3, [pc, #144]	; (1767c <system_clock_init+0x29c>)
   175ec:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   175ee:	2100      	movs	r1, #0
   175f0:	2002      	movs	r0, #2
   175f2:	4b22      	ldr	r3, [pc, #136]	; (1767c <system_clock_init+0x29c>)
   175f4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   175f6:	003b      	movs	r3, r7
   175f8:	0018      	movs	r0, r3
   175fa:	4b14      	ldr	r3, [pc, #80]	; (1764c <system_clock_init+0x26c>)
   175fc:	4798      	blx	r3
   175fe:	003b      	movs	r3, r7
   17600:	2208      	movs	r2, #8
   17602:	701a      	strb	r2, [r3, #0]
   17604:	003b      	movs	r3, r7
   17606:	2201      	movs	r2, #1
   17608:	605a      	str	r2, [r3, #4]
   1760a:	003b      	movs	r3, r7
   1760c:	2200      	movs	r2, #0
   1760e:	721a      	strb	r2, [r3, #8]
   17610:	003b      	movs	r3, r7
   17612:	2201      	movs	r2, #1
   17614:	725a      	strb	r2, [r3, #9]
   17616:	003b      	movs	r3, r7
   17618:	0019      	movs	r1, r3
   1761a:	2000      	movs	r0, #0
   1761c:	4b0c      	ldr	r3, [pc, #48]	; (17650 <system_clock_init+0x270>)
   1761e:	4798      	blx	r3
   17620:	2000      	movs	r0, #0
   17622:	4b0c      	ldr	r3, [pc, #48]	; (17654 <system_clock_init+0x274>)
   17624:	4798      	blx	r3
#endif
}
   17626:	46c0      	nop			; (mov r8, r8)
   17628:	46bd      	mov	sp, r7
   1762a:	b026      	add	sp, #152	; 0x98
   1762c:	bd80      	pop	{r7, pc}
   1762e:	46c0      	nop			; (mov r8, r8)
   17630:	40000800 	.word	0x40000800
   17634:	00016fa1 	.word	0x00016fa1
   17638:	000173a9 	.word	0x000173a9
   1763c:	00016eb1 	.word	0x00016eb1
   17640:	000170f5 	.word	0x000170f5
   17644:	00017279 	.word	0x00017279
   17648:	00017725 	.word	0x00017725
   1764c:	00016e6d 	.word	0x00016e6d
   17650:	00017755 	.word	0x00017755
   17654:	00017879 	.word	0x00017879
   17658:	00016e9b 	.word	0x00016e9b
   1765c:	000179ad 	.word	0x000179ad
   17660:	000179f1 	.word	0x000179f1
   17664:	00016f49 	.word	0x00016f49
   17668:	000f4240 	.word	0x000f4240
   1766c:	02dc6c00 	.word	0x02dc6c00
   17670:	0001716d 	.word	0x0001716d
   17674:	00017325 	.word	0x00017325
   17678:	00016ed5 	.word	0x00016ed5
   1767c:	00016ef5 	.word	0x00016ef5

00017680 <system_apb_clock_set_mask>:
{
   17680:	b580      	push	{r7, lr}
   17682:	b082      	sub	sp, #8
   17684:	af00      	add	r7, sp, #0
   17686:	0002      	movs	r2, r0
   17688:	6039      	str	r1, [r7, #0]
   1768a:	1dfb      	adds	r3, r7, #7
   1768c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1768e:	1dfb      	adds	r3, r7, #7
   17690:	781b      	ldrb	r3, [r3, #0]
   17692:	2b01      	cmp	r3, #1
   17694:	d00a      	beq.n	176ac <system_apb_clock_set_mask+0x2c>
   17696:	2b02      	cmp	r3, #2
   17698:	d00f      	beq.n	176ba <system_apb_clock_set_mask+0x3a>
   1769a:	2b00      	cmp	r3, #0
   1769c:	d114      	bne.n	176c8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1769e:	4b0e      	ldr	r3, [pc, #56]	; (176d8 <system_apb_clock_set_mask+0x58>)
   176a0:	4a0d      	ldr	r2, [pc, #52]	; (176d8 <system_apb_clock_set_mask+0x58>)
   176a2:	6991      	ldr	r1, [r2, #24]
   176a4:	683a      	ldr	r2, [r7, #0]
   176a6:	430a      	orrs	r2, r1
   176a8:	619a      	str	r2, [r3, #24]
			break;
   176aa:	e00f      	b.n	176cc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   176ac:	4b0a      	ldr	r3, [pc, #40]	; (176d8 <system_apb_clock_set_mask+0x58>)
   176ae:	4a0a      	ldr	r2, [pc, #40]	; (176d8 <system_apb_clock_set_mask+0x58>)
   176b0:	69d1      	ldr	r1, [r2, #28]
   176b2:	683a      	ldr	r2, [r7, #0]
   176b4:	430a      	orrs	r2, r1
   176b6:	61da      	str	r2, [r3, #28]
			break;
   176b8:	e008      	b.n	176cc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   176ba:	4b07      	ldr	r3, [pc, #28]	; (176d8 <system_apb_clock_set_mask+0x58>)
   176bc:	4a06      	ldr	r2, [pc, #24]	; (176d8 <system_apb_clock_set_mask+0x58>)
   176be:	6a11      	ldr	r1, [r2, #32]
   176c0:	683a      	ldr	r2, [r7, #0]
   176c2:	430a      	orrs	r2, r1
   176c4:	621a      	str	r2, [r3, #32]
			break;
   176c6:	e001      	b.n	176cc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   176c8:	2317      	movs	r3, #23
   176ca:	e000      	b.n	176ce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   176cc:	2300      	movs	r3, #0
}
   176ce:	0018      	movs	r0, r3
   176d0:	46bd      	mov	sp, r7
   176d2:	b002      	add	sp, #8
   176d4:	bd80      	pop	{r7, pc}
   176d6:	46c0      	nop			; (mov r8, r8)
   176d8:	40000400 	.word	0x40000400

000176dc <system_interrupt_enter_critical_section>:
{
   176dc:	b580      	push	{r7, lr}
   176de:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   176e0:	4b02      	ldr	r3, [pc, #8]	; (176ec <system_interrupt_enter_critical_section+0x10>)
   176e2:	4798      	blx	r3
}
   176e4:	46c0      	nop			; (mov r8, r8)
   176e6:	46bd      	mov	sp, r7
   176e8:	bd80      	pop	{r7, pc}
   176ea:	46c0      	nop			; (mov r8, r8)
   176ec:	00013d19 	.word	0x00013d19

000176f0 <system_interrupt_leave_critical_section>:
{
   176f0:	b580      	push	{r7, lr}
   176f2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   176f4:	4b02      	ldr	r3, [pc, #8]	; (17700 <system_interrupt_leave_critical_section+0x10>)
   176f6:	4798      	blx	r3
}
   176f8:	46c0      	nop			; (mov r8, r8)
   176fa:	46bd      	mov	sp, r7
   176fc:	bd80      	pop	{r7, pc}
   176fe:	46c0      	nop			; (mov r8, r8)
   17700:	00013d6d 	.word	0x00013d6d

00017704 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   17704:	b580      	push	{r7, lr}
   17706:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   17708:	4b05      	ldr	r3, [pc, #20]	; (17720 <system_gclk_is_syncing+0x1c>)
   1770a:	785b      	ldrb	r3, [r3, #1]
   1770c:	b2db      	uxtb	r3, r3
   1770e:	b25b      	sxtb	r3, r3
   17710:	2b00      	cmp	r3, #0
   17712:	da01      	bge.n	17718 <system_gclk_is_syncing+0x14>
		return true;
   17714:	2301      	movs	r3, #1
   17716:	e000      	b.n	1771a <system_gclk_is_syncing+0x16>
	}

	return false;
   17718:	2300      	movs	r3, #0
}
   1771a:	0018      	movs	r0, r3
   1771c:	46bd      	mov	sp, r7
   1771e:	bd80      	pop	{r7, pc}
   17720:	40000c00 	.word	0x40000c00

00017724 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   17724:	b580      	push	{r7, lr}
   17726:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   17728:	2108      	movs	r1, #8
   1772a:	2000      	movs	r0, #0
   1772c:	4b07      	ldr	r3, [pc, #28]	; (1774c <system_gclk_init+0x28>)
   1772e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   17730:	4b07      	ldr	r3, [pc, #28]	; (17750 <system_gclk_init+0x2c>)
   17732:	2201      	movs	r2, #1
   17734:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   17736:	46c0      	nop			; (mov r8, r8)
   17738:	4b05      	ldr	r3, [pc, #20]	; (17750 <system_gclk_init+0x2c>)
   1773a:	781b      	ldrb	r3, [r3, #0]
   1773c:	b2db      	uxtb	r3, r3
   1773e:	001a      	movs	r2, r3
   17740:	2301      	movs	r3, #1
   17742:	4013      	ands	r3, r2
   17744:	d1f8      	bne.n	17738 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   17746:	46c0      	nop			; (mov r8, r8)
   17748:	46bd      	mov	sp, r7
   1774a:	bd80      	pop	{r7, pc}
   1774c:	00017681 	.word	0x00017681
   17750:	40000c00 	.word	0x40000c00

00017754 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   17754:	b580      	push	{r7, lr}
   17756:	b086      	sub	sp, #24
   17758:	af00      	add	r7, sp, #0
   1775a:	0002      	movs	r2, r0
   1775c:	6039      	str	r1, [r7, #0]
   1775e:	1dfb      	adds	r3, r7, #7
   17760:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   17762:	1dfb      	adds	r3, r7, #7
   17764:	781b      	ldrb	r3, [r3, #0]
   17766:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   17768:	1dfb      	adds	r3, r7, #7
   1776a:	781b      	ldrb	r3, [r3, #0]
   1776c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1776e:	683b      	ldr	r3, [r7, #0]
   17770:	781b      	ldrb	r3, [r3, #0]
   17772:	021b      	lsls	r3, r3, #8
   17774:	001a      	movs	r2, r3
   17776:	697b      	ldr	r3, [r7, #20]
   17778:	4313      	orrs	r3, r2
   1777a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1777c:	683b      	ldr	r3, [r7, #0]
   1777e:	785b      	ldrb	r3, [r3, #1]
   17780:	2b00      	cmp	r3, #0
   17782:	d004      	beq.n	1778e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   17784:	697b      	ldr	r3, [r7, #20]
   17786:	2280      	movs	r2, #128	; 0x80
   17788:	02d2      	lsls	r2, r2, #11
   1778a:	4313      	orrs	r3, r2
   1778c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1778e:	683b      	ldr	r3, [r7, #0]
   17790:	7a5b      	ldrb	r3, [r3, #9]
   17792:	2b00      	cmp	r3, #0
   17794:	d004      	beq.n	177a0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   17796:	697b      	ldr	r3, [r7, #20]
   17798:	2280      	movs	r2, #128	; 0x80
   1779a:	0312      	lsls	r2, r2, #12
   1779c:	4313      	orrs	r3, r2
   1779e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   177a0:	683b      	ldr	r3, [r7, #0]
   177a2:	685b      	ldr	r3, [r3, #4]
   177a4:	2b01      	cmp	r3, #1
   177a6:	d92c      	bls.n	17802 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   177a8:	683b      	ldr	r3, [r7, #0]
   177aa:	685a      	ldr	r2, [r3, #4]
   177ac:	683b      	ldr	r3, [r7, #0]
   177ae:	685b      	ldr	r3, [r3, #4]
   177b0:	3b01      	subs	r3, #1
   177b2:	4013      	ands	r3, r2
   177b4:	d11a      	bne.n	177ec <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   177b6:	2300      	movs	r3, #0
   177b8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   177ba:	2302      	movs	r3, #2
   177bc:	60bb      	str	r3, [r7, #8]
   177be:	e005      	b.n	177cc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   177c0:	68fb      	ldr	r3, [r7, #12]
   177c2:	3301      	adds	r3, #1
   177c4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   177c6:	68bb      	ldr	r3, [r7, #8]
   177c8:	005b      	lsls	r3, r3, #1
   177ca:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   177cc:	683b      	ldr	r3, [r7, #0]
   177ce:	685a      	ldr	r2, [r3, #4]
   177d0:	68bb      	ldr	r3, [r7, #8]
   177d2:	429a      	cmp	r2, r3
   177d4:	d8f4      	bhi.n	177c0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   177d6:	68fb      	ldr	r3, [r7, #12]
   177d8:	021b      	lsls	r3, r3, #8
   177da:	693a      	ldr	r2, [r7, #16]
   177dc:	4313      	orrs	r3, r2
   177de:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   177e0:	697b      	ldr	r3, [r7, #20]
   177e2:	2280      	movs	r2, #128	; 0x80
   177e4:	0352      	lsls	r2, r2, #13
   177e6:	4313      	orrs	r3, r2
   177e8:	617b      	str	r3, [r7, #20]
   177ea:	e00a      	b.n	17802 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   177ec:	683b      	ldr	r3, [r7, #0]
   177ee:	685b      	ldr	r3, [r3, #4]
   177f0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   177f2:	693a      	ldr	r2, [r7, #16]
   177f4:	4313      	orrs	r3, r2
   177f6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   177f8:	697b      	ldr	r3, [r7, #20]
   177fa:	2280      	movs	r2, #128	; 0x80
   177fc:	0292      	lsls	r2, r2, #10
   177fe:	4313      	orrs	r3, r2
   17800:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   17802:	683b      	ldr	r3, [r7, #0]
   17804:	7a1b      	ldrb	r3, [r3, #8]
   17806:	2b00      	cmp	r3, #0
   17808:	d004      	beq.n	17814 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1780a:	697b      	ldr	r3, [r7, #20]
   1780c:	2280      	movs	r2, #128	; 0x80
   1780e:	0392      	lsls	r2, r2, #14
   17810:	4313      	orrs	r3, r2
   17812:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   17814:	46c0      	nop			; (mov r8, r8)
   17816:	4b13      	ldr	r3, [pc, #76]	; (17864 <system_gclk_gen_set_config+0x110>)
   17818:	4798      	blx	r3
   1781a:	1e03      	subs	r3, r0, #0
   1781c:	d1fb      	bne.n	17816 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1781e:	4b12      	ldr	r3, [pc, #72]	; (17868 <system_gclk_gen_set_config+0x114>)
   17820:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   17822:	4a12      	ldr	r2, [pc, #72]	; (1786c <system_gclk_gen_set_config+0x118>)
   17824:	1dfb      	adds	r3, r7, #7
   17826:	781b      	ldrb	r3, [r3, #0]
   17828:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1782a:	46c0      	nop			; (mov r8, r8)
   1782c:	4b0d      	ldr	r3, [pc, #52]	; (17864 <system_gclk_gen_set_config+0x110>)
   1782e:	4798      	blx	r3
   17830:	1e03      	subs	r3, r0, #0
   17832:	d1fb      	bne.n	1782c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   17834:	4b0e      	ldr	r3, [pc, #56]	; (17870 <system_gclk_gen_set_config+0x11c>)
   17836:	693a      	ldr	r2, [r7, #16]
   17838:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1783a:	46c0      	nop			; (mov r8, r8)
   1783c:	4b09      	ldr	r3, [pc, #36]	; (17864 <system_gclk_gen_set_config+0x110>)
   1783e:	4798      	blx	r3
   17840:	1e03      	subs	r3, r0, #0
   17842:	d1fb      	bne.n	1783c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   17844:	4b0a      	ldr	r3, [pc, #40]	; (17870 <system_gclk_gen_set_config+0x11c>)
   17846:	4a0a      	ldr	r2, [pc, #40]	; (17870 <system_gclk_gen_set_config+0x11c>)
   17848:	6851      	ldr	r1, [r2, #4]
   1784a:	2280      	movs	r2, #128	; 0x80
   1784c:	0252      	lsls	r2, r2, #9
   1784e:	4011      	ands	r1, r2
   17850:	697a      	ldr	r2, [r7, #20]
   17852:	430a      	orrs	r2, r1
   17854:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   17856:	4b07      	ldr	r3, [pc, #28]	; (17874 <system_gclk_gen_set_config+0x120>)
   17858:	4798      	blx	r3
}
   1785a:	46c0      	nop			; (mov r8, r8)
   1785c:	46bd      	mov	sp, r7
   1785e:	b006      	add	sp, #24
   17860:	bd80      	pop	{r7, pc}
   17862:	46c0      	nop			; (mov r8, r8)
   17864:	00017705 	.word	0x00017705
   17868:	000176dd 	.word	0x000176dd
   1786c:	40000c08 	.word	0x40000c08
   17870:	40000c00 	.word	0x40000c00
   17874:	000176f1 	.word	0x000176f1

00017878 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   17878:	b580      	push	{r7, lr}
   1787a:	b082      	sub	sp, #8
   1787c:	af00      	add	r7, sp, #0
   1787e:	0002      	movs	r2, r0
   17880:	1dfb      	adds	r3, r7, #7
   17882:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   17884:	46c0      	nop			; (mov r8, r8)
   17886:	4b0e      	ldr	r3, [pc, #56]	; (178c0 <system_gclk_gen_enable+0x48>)
   17888:	4798      	blx	r3
   1788a:	1e03      	subs	r3, r0, #0
   1788c:	d1fb      	bne.n	17886 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1788e:	4b0d      	ldr	r3, [pc, #52]	; (178c4 <system_gclk_gen_enable+0x4c>)
   17890:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   17892:	4a0d      	ldr	r2, [pc, #52]	; (178c8 <system_gclk_gen_enable+0x50>)
   17894:	1dfb      	adds	r3, r7, #7
   17896:	781b      	ldrb	r3, [r3, #0]
   17898:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1789a:	46c0      	nop			; (mov r8, r8)
   1789c:	4b08      	ldr	r3, [pc, #32]	; (178c0 <system_gclk_gen_enable+0x48>)
   1789e:	4798      	blx	r3
   178a0:	1e03      	subs	r3, r0, #0
   178a2:	d1fb      	bne.n	1789c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   178a4:	4b09      	ldr	r3, [pc, #36]	; (178cc <system_gclk_gen_enable+0x54>)
   178a6:	4a09      	ldr	r2, [pc, #36]	; (178cc <system_gclk_gen_enable+0x54>)
   178a8:	6852      	ldr	r2, [r2, #4]
   178aa:	2180      	movs	r1, #128	; 0x80
   178ac:	0249      	lsls	r1, r1, #9
   178ae:	430a      	orrs	r2, r1
   178b0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   178b2:	4b07      	ldr	r3, [pc, #28]	; (178d0 <system_gclk_gen_enable+0x58>)
   178b4:	4798      	blx	r3
}
   178b6:	46c0      	nop			; (mov r8, r8)
   178b8:	46bd      	mov	sp, r7
   178ba:	b002      	add	sp, #8
   178bc:	bd80      	pop	{r7, pc}
   178be:	46c0      	nop			; (mov r8, r8)
   178c0:	00017705 	.word	0x00017705
   178c4:	000176dd 	.word	0x000176dd
   178c8:	40000c04 	.word	0x40000c04
   178cc:	40000c00 	.word	0x40000c00
   178d0:	000176f1 	.word	0x000176f1

000178d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   178d4:	b580      	push	{r7, lr}
   178d6:	b086      	sub	sp, #24
   178d8:	af00      	add	r7, sp, #0
   178da:	0002      	movs	r2, r0
   178dc:	1dfb      	adds	r3, r7, #7
   178de:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   178e0:	46c0      	nop			; (mov r8, r8)
   178e2:	4b2a      	ldr	r3, [pc, #168]	; (1798c <system_gclk_gen_get_hz+0xb8>)
   178e4:	4798      	blx	r3
   178e6:	1e03      	subs	r3, r0, #0
   178e8:	d1fb      	bne.n	178e2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   178ea:	4b29      	ldr	r3, [pc, #164]	; (17990 <system_gclk_gen_get_hz+0xbc>)
   178ec:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   178ee:	4a29      	ldr	r2, [pc, #164]	; (17994 <system_gclk_gen_get_hz+0xc0>)
   178f0:	1dfb      	adds	r3, r7, #7
   178f2:	781b      	ldrb	r3, [r3, #0]
   178f4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   178f6:	46c0      	nop			; (mov r8, r8)
   178f8:	4b24      	ldr	r3, [pc, #144]	; (1798c <system_gclk_gen_get_hz+0xb8>)
   178fa:	4798      	blx	r3
   178fc:	1e03      	subs	r3, r0, #0
   178fe:	d1fb      	bne.n	178f8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   17900:	4b25      	ldr	r3, [pc, #148]	; (17998 <system_gclk_gen_get_hz+0xc4>)
   17902:	685b      	ldr	r3, [r3, #4]
   17904:	04db      	lsls	r3, r3, #19
   17906:	0edb      	lsrs	r3, r3, #27
   17908:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1790a:	0018      	movs	r0, r3
   1790c:	4b23      	ldr	r3, [pc, #140]	; (1799c <system_gclk_gen_get_hz+0xc8>)
   1790e:	4798      	blx	r3
   17910:	0003      	movs	r3, r0
   17912:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   17914:	4a1f      	ldr	r2, [pc, #124]	; (17994 <system_gclk_gen_get_hz+0xc0>)
   17916:	1dfb      	adds	r3, r7, #7
   17918:	781b      	ldrb	r3, [r3, #0]
   1791a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1791c:	4b1e      	ldr	r3, [pc, #120]	; (17998 <system_gclk_gen_get_hz+0xc4>)
   1791e:	685b      	ldr	r3, [r3, #4]
   17920:	02db      	lsls	r3, r3, #11
   17922:	0fdb      	lsrs	r3, r3, #31
   17924:	b2da      	uxtb	r2, r3
   17926:	2313      	movs	r3, #19
   17928:	18fb      	adds	r3, r7, r3
   1792a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1792c:	4a1c      	ldr	r2, [pc, #112]	; (179a0 <system_gclk_gen_get_hz+0xcc>)
   1792e:	1dfb      	adds	r3, r7, #7
   17930:	781b      	ldrb	r3, [r3, #0]
   17932:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   17934:	46c0      	nop			; (mov r8, r8)
   17936:	4b15      	ldr	r3, [pc, #84]	; (1798c <system_gclk_gen_get_hz+0xb8>)
   17938:	4798      	blx	r3
   1793a:	1e03      	subs	r3, r0, #0
   1793c:	d1fb      	bne.n	17936 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1793e:	4b16      	ldr	r3, [pc, #88]	; (17998 <system_gclk_gen_get_hz+0xc4>)
   17940:	689b      	ldr	r3, [r3, #8]
   17942:	021b      	lsls	r3, r3, #8
   17944:	0c1b      	lsrs	r3, r3, #16
   17946:	b29b      	uxth	r3, r3
   17948:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1794a:	4b16      	ldr	r3, [pc, #88]	; (179a4 <system_gclk_gen_get_hz+0xd0>)
   1794c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1794e:	2313      	movs	r3, #19
   17950:	18fb      	adds	r3, r7, r3
   17952:	781b      	ldrb	r3, [r3, #0]
   17954:	2b00      	cmp	r3, #0
   17956:	d109      	bne.n	1796c <system_gclk_gen_get_hz+0x98>
   17958:	68fb      	ldr	r3, [r7, #12]
   1795a:	2b01      	cmp	r3, #1
   1795c:	d906      	bls.n	1796c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   1795e:	4b12      	ldr	r3, [pc, #72]	; (179a8 <system_gclk_gen_get_hz+0xd4>)
   17960:	68f9      	ldr	r1, [r7, #12]
   17962:	6978      	ldr	r0, [r7, #20]
   17964:	4798      	blx	r3
   17966:	0003      	movs	r3, r0
   17968:	617b      	str	r3, [r7, #20]
   1796a:	e00a      	b.n	17982 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   1796c:	2313      	movs	r3, #19
   1796e:	18fb      	adds	r3, r7, r3
   17970:	781b      	ldrb	r3, [r3, #0]
   17972:	2b00      	cmp	r3, #0
   17974:	d005      	beq.n	17982 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   17976:	68fb      	ldr	r3, [r7, #12]
   17978:	3301      	adds	r3, #1
   1797a:	697a      	ldr	r2, [r7, #20]
   1797c:	40da      	lsrs	r2, r3
   1797e:	0013      	movs	r3, r2
   17980:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   17982:	697b      	ldr	r3, [r7, #20]
}
   17984:	0018      	movs	r0, r3
   17986:	46bd      	mov	sp, r7
   17988:	b006      	add	sp, #24
   1798a:	bd80      	pop	{r7, pc}
   1798c:	00017705 	.word	0x00017705
   17990:	000176dd 	.word	0x000176dd
   17994:	40000c04 	.word	0x40000c04
   17998:	40000c00 	.word	0x40000c00
   1799c:	00017035 	.word	0x00017035
   179a0:	40000c08 	.word	0x40000c08
   179a4:	000176f1 	.word	0x000176f1
   179a8:	00020471 	.word	0x00020471

000179ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   179ac:	b580      	push	{r7, lr}
   179ae:	b084      	sub	sp, #16
   179b0:	af00      	add	r7, sp, #0
   179b2:	0002      	movs	r2, r0
   179b4:	6039      	str	r1, [r7, #0]
   179b6:	1dfb      	adds	r3, r7, #7
   179b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   179ba:	1dfb      	adds	r3, r7, #7
   179bc:	781b      	ldrb	r3, [r3, #0]
   179be:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   179c0:	683b      	ldr	r3, [r7, #0]
   179c2:	781b      	ldrb	r3, [r3, #0]
   179c4:	021b      	lsls	r3, r3, #8
   179c6:	001a      	movs	r2, r3
   179c8:	68fb      	ldr	r3, [r7, #12]
   179ca:	4313      	orrs	r3, r2
   179cc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   179ce:	1dfb      	adds	r3, r7, #7
   179d0:	781b      	ldrb	r3, [r3, #0]
   179d2:	0018      	movs	r0, r3
   179d4:	4b04      	ldr	r3, [pc, #16]	; (179e8 <system_gclk_chan_set_config+0x3c>)
   179d6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   179d8:	4b04      	ldr	r3, [pc, #16]	; (179ec <system_gclk_chan_set_config+0x40>)
   179da:	68fa      	ldr	r2, [r7, #12]
   179dc:	b292      	uxth	r2, r2
   179de:	805a      	strh	r2, [r3, #2]
}
   179e0:	46c0      	nop			; (mov r8, r8)
   179e2:	46bd      	mov	sp, r7
   179e4:	b004      	add	sp, #16
   179e6:	bd80      	pop	{r7, pc}
   179e8:	00017a39 	.word	0x00017a39
   179ec:	40000c00 	.word	0x40000c00

000179f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   179f0:	b580      	push	{r7, lr}
   179f2:	b082      	sub	sp, #8
   179f4:	af00      	add	r7, sp, #0
   179f6:	0002      	movs	r2, r0
   179f8:	1dfb      	adds	r3, r7, #7
   179fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   179fc:	4b0a      	ldr	r3, [pc, #40]	; (17a28 <system_gclk_chan_enable+0x38>)
   179fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   17a00:	4a0a      	ldr	r2, [pc, #40]	; (17a2c <system_gclk_chan_enable+0x3c>)
   17a02:	1dfb      	adds	r3, r7, #7
   17a04:	781b      	ldrb	r3, [r3, #0]
   17a06:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   17a08:	4909      	ldr	r1, [pc, #36]	; (17a30 <system_gclk_chan_enable+0x40>)
   17a0a:	4b09      	ldr	r3, [pc, #36]	; (17a30 <system_gclk_chan_enable+0x40>)
   17a0c:	885b      	ldrh	r3, [r3, #2]
   17a0e:	b29b      	uxth	r3, r3
   17a10:	2280      	movs	r2, #128	; 0x80
   17a12:	01d2      	lsls	r2, r2, #7
   17a14:	4313      	orrs	r3, r2
   17a16:	b29b      	uxth	r3, r3
   17a18:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   17a1a:	4b06      	ldr	r3, [pc, #24]	; (17a34 <system_gclk_chan_enable+0x44>)
   17a1c:	4798      	blx	r3
}
   17a1e:	46c0      	nop			; (mov r8, r8)
   17a20:	46bd      	mov	sp, r7
   17a22:	b002      	add	sp, #8
   17a24:	bd80      	pop	{r7, pc}
   17a26:	46c0      	nop			; (mov r8, r8)
   17a28:	000176dd 	.word	0x000176dd
   17a2c:	40000c02 	.word	0x40000c02
   17a30:	40000c00 	.word	0x40000c00
   17a34:	000176f1 	.word	0x000176f1

00017a38 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   17a38:	b580      	push	{r7, lr}
   17a3a:	b084      	sub	sp, #16
   17a3c:	af00      	add	r7, sp, #0
   17a3e:	0002      	movs	r2, r0
   17a40:	1dfb      	adds	r3, r7, #7
   17a42:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   17a44:	4b1c      	ldr	r3, [pc, #112]	; (17ab8 <system_gclk_chan_disable+0x80>)
   17a46:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   17a48:	4a1c      	ldr	r2, [pc, #112]	; (17abc <system_gclk_chan_disable+0x84>)
   17a4a:	1dfb      	adds	r3, r7, #7
   17a4c:	781b      	ldrb	r3, [r3, #0]
   17a4e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   17a50:	4b1b      	ldr	r3, [pc, #108]	; (17ac0 <system_gclk_chan_disable+0x88>)
   17a52:	885b      	ldrh	r3, [r3, #2]
   17a54:	051b      	lsls	r3, r3, #20
   17a56:	0f1b      	lsrs	r3, r3, #28
   17a58:	b2db      	uxtb	r3, r3
   17a5a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   17a5c:	4a18      	ldr	r2, [pc, #96]	; (17ac0 <system_gclk_chan_disable+0x88>)
   17a5e:	8853      	ldrh	r3, [r2, #2]
   17a60:	4918      	ldr	r1, [pc, #96]	; (17ac4 <system_gclk_chan_disable+0x8c>)
   17a62:	400b      	ands	r3, r1
   17a64:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   17a66:	4a16      	ldr	r2, [pc, #88]	; (17ac0 <system_gclk_chan_disable+0x88>)
   17a68:	4b15      	ldr	r3, [pc, #84]	; (17ac0 <system_gclk_chan_disable+0x88>)
   17a6a:	885b      	ldrh	r3, [r3, #2]
   17a6c:	b29b      	uxth	r3, r3
   17a6e:	4916      	ldr	r1, [pc, #88]	; (17ac8 <system_gclk_chan_disable+0x90>)
   17a70:	400b      	ands	r3, r1
   17a72:	b29b      	uxth	r3, r3
   17a74:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   17a76:	46c0      	nop			; (mov r8, r8)
   17a78:	4b11      	ldr	r3, [pc, #68]	; (17ac0 <system_gclk_chan_disable+0x88>)
   17a7a:	885b      	ldrh	r3, [r3, #2]
   17a7c:	b29b      	uxth	r3, r3
   17a7e:	001a      	movs	r2, r3
   17a80:	2380      	movs	r3, #128	; 0x80
   17a82:	01db      	lsls	r3, r3, #7
   17a84:	4013      	ands	r3, r2
   17a86:	d1f7      	bne.n	17a78 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   17a88:	4a0d      	ldr	r2, [pc, #52]	; (17ac0 <system_gclk_chan_disable+0x88>)
   17a8a:	68fb      	ldr	r3, [r7, #12]
   17a8c:	b2db      	uxtb	r3, r3
   17a8e:	1c19      	adds	r1, r3, #0
   17a90:	230f      	movs	r3, #15
   17a92:	400b      	ands	r3, r1
   17a94:	b2d9      	uxtb	r1, r3
   17a96:	8853      	ldrh	r3, [r2, #2]
   17a98:	1c08      	adds	r0, r1, #0
   17a9a:	210f      	movs	r1, #15
   17a9c:	4001      	ands	r1, r0
   17a9e:	0208      	lsls	r0, r1, #8
   17aa0:	4908      	ldr	r1, [pc, #32]	; (17ac4 <system_gclk_chan_disable+0x8c>)
   17aa2:	400b      	ands	r3, r1
   17aa4:	1c19      	adds	r1, r3, #0
   17aa6:	1c03      	adds	r3, r0, #0
   17aa8:	430b      	orrs	r3, r1
   17aaa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   17aac:	4b07      	ldr	r3, [pc, #28]	; (17acc <system_gclk_chan_disable+0x94>)
   17aae:	4798      	blx	r3
}
   17ab0:	46c0      	nop			; (mov r8, r8)
   17ab2:	46bd      	mov	sp, r7
   17ab4:	b004      	add	sp, #16
   17ab6:	bd80      	pop	{r7, pc}
   17ab8:	000176dd 	.word	0x000176dd
   17abc:	40000c02 	.word	0x40000c02
   17ac0:	40000c00 	.word	0x40000c00
   17ac4:	fffff0ff 	.word	0xfffff0ff
   17ac8:	ffffbfff 	.word	0xffffbfff
   17acc:	000176f1 	.word	0x000176f1

00017ad0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   17ad0:	b580      	push	{r7, lr}
   17ad2:	b084      	sub	sp, #16
   17ad4:	af00      	add	r7, sp, #0
   17ad6:	0002      	movs	r2, r0
   17ad8:	1dfb      	adds	r3, r7, #7
   17ada:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   17adc:	4b0d      	ldr	r3, [pc, #52]	; (17b14 <system_gclk_chan_get_hz+0x44>)
   17ade:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   17ae0:	4a0d      	ldr	r2, [pc, #52]	; (17b18 <system_gclk_chan_get_hz+0x48>)
   17ae2:	1dfb      	adds	r3, r7, #7
   17ae4:	781b      	ldrb	r3, [r3, #0]
   17ae6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   17ae8:	4b0c      	ldr	r3, [pc, #48]	; (17b1c <system_gclk_chan_get_hz+0x4c>)
   17aea:	885b      	ldrh	r3, [r3, #2]
   17aec:	051b      	lsls	r3, r3, #20
   17aee:	0f1b      	lsrs	r3, r3, #28
   17af0:	b2da      	uxtb	r2, r3
   17af2:	230f      	movs	r3, #15
   17af4:	18fb      	adds	r3, r7, r3
   17af6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   17af8:	4b09      	ldr	r3, [pc, #36]	; (17b20 <system_gclk_chan_get_hz+0x50>)
   17afa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   17afc:	230f      	movs	r3, #15
   17afe:	18fb      	adds	r3, r7, r3
   17b00:	781b      	ldrb	r3, [r3, #0]
   17b02:	0018      	movs	r0, r3
   17b04:	4b07      	ldr	r3, [pc, #28]	; (17b24 <system_gclk_chan_get_hz+0x54>)
   17b06:	4798      	blx	r3
   17b08:	0003      	movs	r3, r0
}
   17b0a:	0018      	movs	r0, r3
   17b0c:	46bd      	mov	sp, r7
   17b0e:	b004      	add	sp, #16
   17b10:	bd80      	pop	{r7, pc}
   17b12:	46c0      	nop			; (mov r8, r8)
   17b14:	000176dd 	.word	0x000176dd
   17b18:	40000c02 	.word	0x40000c02
   17b1c:	40000c00 	.word	0x40000c00
   17b20:	000176f1 	.word	0x000176f1
   17b24:	000178d5 	.word	0x000178d5

00017b28 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   17b28:	b580      	push	{r7, lr}
   17b2a:	b084      	sub	sp, #16
   17b2c:	af00      	add	r7, sp, #0
   17b2e:	0002      	movs	r2, r0
   17b30:	1dfb      	adds	r3, r7, #7
   17b32:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   17b34:	230f      	movs	r3, #15
   17b36:	18fb      	adds	r3, r7, r3
   17b38:	2200      	movs	r2, #0
   17b3a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   17b3c:	1dfb      	adds	r3, r7, #7
   17b3e:	781b      	ldrb	r3, [r3, #0]
   17b40:	2b7f      	cmp	r3, #127	; 0x7f
   17b42:	d80b      	bhi.n	17b5c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   17b44:	4a13      	ldr	r2, [pc, #76]	; (17b94 <system_interrupt_clear_pending+0x6c>)
   17b46:	1dfb      	adds	r3, r7, #7
   17b48:	781b      	ldrb	r3, [r3, #0]
   17b4a:	b25b      	sxtb	r3, r3
   17b4c:	2101      	movs	r1, #1
   17b4e:	4099      	lsls	r1, r3
   17b50:	000b      	movs	r3, r1
   17b52:	0019      	movs	r1, r3
   17b54:	23c0      	movs	r3, #192	; 0xc0
   17b56:	005b      	lsls	r3, r3, #1
   17b58:	50d1      	str	r1, [r2, r3]
   17b5a:	e014      	b.n	17b86 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   17b5c:	1dfb      	adds	r3, r7, #7
   17b5e:	781b      	ldrb	r3, [r3, #0]
   17b60:	b25b      	sxtb	r3, r3
   17b62:	330e      	adds	r3, #14
   17b64:	d101      	bne.n	17b6a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   17b66:	2317      	movs	r3, #23
   17b68:	e010      	b.n	17b8c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   17b6a:	1dfb      	adds	r3, r7, #7
   17b6c:	781b      	ldrb	r3, [r3, #0]
   17b6e:	b25b      	sxtb	r3, r3
   17b70:	3301      	adds	r3, #1
   17b72:	d104      	bne.n	17b7e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   17b74:	4b08      	ldr	r3, [pc, #32]	; (17b98 <system_interrupt_clear_pending+0x70>)
   17b76:	2280      	movs	r2, #128	; 0x80
   17b78:	0492      	lsls	r2, r2, #18
   17b7a:	605a      	str	r2, [r3, #4]
   17b7c:	e003      	b.n	17b86 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   17b7e:	230f      	movs	r3, #15
   17b80:	18fb      	adds	r3, r7, r3
   17b82:	2217      	movs	r2, #23
   17b84:	701a      	strb	r2, [r3, #0]
	}

	return status;
   17b86:	230f      	movs	r3, #15
   17b88:	18fb      	adds	r3, r7, r3
   17b8a:	781b      	ldrb	r3, [r3, #0]
}
   17b8c:	0018      	movs	r0, r3
   17b8e:	46bd      	mov	sp, r7
   17b90:	b004      	add	sp, #16
   17b92:	bd80      	pop	{r7, pc}
   17b94:	e000e100 	.word	0xe000e100
   17b98:	e000ed00 	.word	0xe000ed00

00017b9c <system_pinmux_get_group_from_gpio_pin>:
{
   17b9c:	b580      	push	{r7, lr}
   17b9e:	b084      	sub	sp, #16
   17ba0:	af00      	add	r7, sp, #0
   17ba2:	0002      	movs	r2, r0
   17ba4:	1dfb      	adds	r3, r7, #7
   17ba6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   17ba8:	230f      	movs	r3, #15
   17baa:	18fb      	adds	r3, r7, r3
   17bac:	1dfa      	adds	r2, r7, #7
   17bae:	7812      	ldrb	r2, [r2, #0]
   17bb0:	09d2      	lsrs	r2, r2, #7
   17bb2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17bb4:	230e      	movs	r3, #14
   17bb6:	18fb      	adds	r3, r7, r3
   17bb8:	1dfa      	adds	r2, r7, #7
   17bba:	7812      	ldrb	r2, [r2, #0]
   17bbc:	0952      	lsrs	r2, r2, #5
   17bbe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   17bc0:	4b0d      	ldr	r3, [pc, #52]	; (17bf8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   17bc2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   17bc4:	230f      	movs	r3, #15
   17bc6:	18fb      	adds	r3, r7, r3
   17bc8:	781b      	ldrb	r3, [r3, #0]
   17bca:	2b00      	cmp	r3, #0
   17bcc:	d10f      	bne.n	17bee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   17bce:	230f      	movs	r3, #15
   17bd0:	18fb      	adds	r3, r7, r3
   17bd2:	781b      	ldrb	r3, [r3, #0]
   17bd4:	009b      	lsls	r3, r3, #2
   17bd6:	2210      	movs	r2, #16
   17bd8:	4694      	mov	ip, r2
   17bda:	44bc      	add	ip, r7
   17bdc:	4463      	add	r3, ip
   17bde:	3b08      	subs	r3, #8
   17be0:	681a      	ldr	r2, [r3, #0]
   17be2:	230e      	movs	r3, #14
   17be4:	18fb      	adds	r3, r7, r3
   17be6:	781b      	ldrb	r3, [r3, #0]
   17be8:	01db      	lsls	r3, r3, #7
   17bea:	18d3      	adds	r3, r2, r3
   17bec:	e000      	b.n	17bf0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   17bee:	2300      	movs	r3, #0
}
   17bf0:	0018      	movs	r0, r3
   17bf2:	46bd      	mov	sp, r7
   17bf4:	b004      	add	sp, #16
   17bf6:	bd80      	pop	{r7, pc}
   17bf8:	41004400 	.word	0x41004400

00017bfc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   17bfc:	b580      	push	{r7, lr}
   17bfe:	b088      	sub	sp, #32
   17c00:	af00      	add	r7, sp, #0
   17c02:	60f8      	str	r0, [r7, #12]
   17c04:	60b9      	str	r1, [r7, #8]
   17c06:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   17c08:	2300      	movs	r3, #0
   17c0a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   17c0c:	687b      	ldr	r3, [r7, #4]
   17c0e:	78db      	ldrb	r3, [r3, #3]
   17c10:	2201      	movs	r2, #1
   17c12:	4053      	eors	r3, r2
   17c14:	b2db      	uxtb	r3, r3
   17c16:	2b00      	cmp	r3, #0
   17c18:	d035      	beq.n	17c86 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   17c1a:	687b      	ldr	r3, [r7, #4]
   17c1c:	781b      	ldrb	r3, [r3, #0]
   17c1e:	2b80      	cmp	r3, #128	; 0x80
   17c20:	d00b      	beq.n	17c3a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   17c22:	69fb      	ldr	r3, [r7, #28]
   17c24:	2280      	movs	r2, #128	; 0x80
   17c26:	0252      	lsls	r2, r2, #9
   17c28:	4313      	orrs	r3, r2
   17c2a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   17c2c:	687b      	ldr	r3, [r7, #4]
   17c2e:	781b      	ldrb	r3, [r3, #0]
   17c30:	061b      	lsls	r3, r3, #24
   17c32:	001a      	movs	r2, r3
   17c34:	69fb      	ldr	r3, [r7, #28]
   17c36:	4313      	orrs	r3, r2
   17c38:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   17c3a:	687b      	ldr	r3, [r7, #4]
   17c3c:	785b      	ldrb	r3, [r3, #1]
   17c3e:	2b00      	cmp	r3, #0
   17c40:	d003      	beq.n	17c4a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   17c42:	687b      	ldr	r3, [r7, #4]
   17c44:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   17c46:	2b02      	cmp	r3, #2
   17c48:	d110      	bne.n	17c6c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   17c4a:	69fb      	ldr	r3, [r7, #28]
   17c4c:	2280      	movs	r2, #128	; 0x80
   17c4e:	0292      	lsls	r2, r2, #10
   17c50:	4313      	orrs	r3, r2
   17c52:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   17c54:	687b      	ldr	r3, [r7, #4]
   17c56:	789b      	ldrb	r3, [r3, #2]
   17c58:	2b00      	cmp	r3, #0
   17c5a:	d004      	beq.n	17c66 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   17c5c:	69fb      	ldr	r3, [r7, #28]
   17c5e:	2280      	movs	r2, #128	; 0x80
   17c60:	02d2      	lsls	r2, r2, #11
   17c62:	4313      	orrs	r3, r2
   17c64:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   17c66:	68fb      	ldr	r3, [r7, #12]
   17c68:	68ba      	ldr	r2, [r7, #8]
   17c6a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   17c6c:	687b      	ldr	r3, [r7, #4]
   17c6e:	785b      	ldrb	r3, [r3, #1]
   17c70:	2b01      	cmp	r3, #1
   17c72:	d003      	beq.n	17c7c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   17c74:	687b      	ldr	r3, [r7, #4]
   17c76:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   17c78:	2b02      	cmp	r3, #2
   17c7a:	d107      	bne.n	17c8c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   17c7c:	69fb      	ldr	r3, [r7, #28]
   17c7e:	4a22      	ldr	r2, [pc, #136]	; (17d08 <_system_pinmux_config+0x10c>)
   17c80:	4013      	ands	r3, r2
   17c82:	61fb      	str	r3, [r7, #28]
   17c84:	e002      	b.n	17c8c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   17c86:	68fb      	ldr	r3, [r7, #12]
   17c88:	68ba      	ldr	r2, [r7, #8]
   17c8a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   17c8c:	68bb      	ldr	r3, [r7, #8]
   17c8e:	041b      	lsls	r3, r3, #16
   17c90:	0c1b      	lsrs	r3, r3, #16
   17c92:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   17c94:	68bb      	ldr	r3, [r7, #8]
   17c96:	0c1b      	lsrs	r3, r3, #16
   17c98:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17c9a:	69ba      	ldr	r2, [r7, #24]
   17c9c:	69fb      	ldr	r3, [r7, #28]
   17c9e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   17ca0:	22a0      	movs	r2, #160	; 0xa0
   17ca2:	05d2      	lsls	r2, r2, #23
   17ca4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17ca6:	68fb      	ldr	r3, [r7, #12]
   17ca8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17caa:	697a      	ldr	r2, [r7, #20]
   17cac:	69fb      	ldr	r3, [r7, #28]
   17cae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   17cb0:	22d0      	movs	r2, #208	; 0xd0
   17cb2:	0612      	lsls	r2, r2, #24
   17cb4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17cb6:	68fb      	ldr	r3, [r7, #12]
   17cb8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   17cba:	687b      	ldr	r3, [r7, #4]
   17cbc:	78db      	ldrb	r3, [r3, #3]
   17cbe:	2201      	movs	r2, #1
   17cc0:	4053      	eors	r3, r2
   17cc2:	b2db      	uxtb	r3, r3
   17cc4:	2b00      	cmp	r3, #0
   17cc6:	d01a      	beq.n	17cfe <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   17cc8:	69fa      	ldr	r2, [r7, #28]
   17cca:	2380      	movs	r3, #128	; 0x80
   17ccc:	02db      	lsls	r3, r3, #11
   17cce:	4013      	ands	r3, r2
   17cd0:	d00a      	beq.n	17ce8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   17cd2:	687b      	ldr	r3, [r7, #4]
   17cd4:	789b      	ldrb	r3, [r3, #2]
   17cd6:	2b01      	cmp	r3, #1
   17cd8:	d103      	bne.n	17ce2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   17cda:	68fb      	ldr	r3, [r7, #12]
   17cdc:	68ba      	ldr	r2, [r7, #8]
   17cde:	619a      	str	r2, [r3, #24]
   17ce0:	e002      	b.n	17ce8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   17ce2:	68fb      	ldr	r3, [r7, #12]
   17ce4:	68ba      	ldr	r2, [r7, #8]
   17ce6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   17ce8:	687b      	ldr	r3, [r7, #4]
   17cea:	785b      	ldrb	r3, [r3, #1]
   17cec:	2b01      	cmp	r3, #1
   17cee:	d003      	beq.n	17cf8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   17cf0:	687b      	ldr	r3, [r7, #4]
   17cf2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   17cf4:	2b02      	cmp	r3, #2
   17cf6:	d102      	bne.n	17cfe <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   17cf8:	68fb      	ldr	r3, [r7, #12]
   17cfa:	68ba      	ldr	r2, [r7, #8]
   17cfc:	609a      	str	r2, [r3, #8]
		}
	}
}
   17cfe:	46c0      	nop			; (mov r8, r8)
   17d00:	46bd      	mov	sp, r7
   17d02:	b008      	add	sp, #32
   17d04:	bd80      	pop	{r7, pc}
   17d06:	46c0      	nop			; (mov r8, r8)
   17d08:	fffbffff 	.word	0xfffbffff

00017d0c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   17d0c:	b580      	push	{r7, lr}
   17d0e:	b084      	sub	sp, #16
   17d10:	af00      	add	r7, sp, #0
   17d12:	0002      	movs	r2, r0
   17d14:	6039      	str	r1, [r7, #0]
   17d16:	1dfb      	adds	r3, r7, #7
   17d18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   17d1a:	1dfb      	adds	r3, r7, #7
   17d1c:	781b      	ldrb	r3, [r3, #0]
   17d1e:	0018      	movs	r0, r3
   17d20:	4b0a      	ldr	r3, [pc, #40]	; (17d4c <system_pinmux_pin_set_config+0x40>)
   17d22:	4798      	blx	r3
   17d24:	0003      	movs	r3, r0
   17d26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   17d28:	1dfb      	adds	r3, r7, #7
   17d2a:	781b      	ldrb	r3, [r3, #0]
   17d2c:	221f      	movs	r2, #31
   17d2e:	4013      	ands	r3, r2
   17d30:	2201      	movs	r2, #1
   17d32:	409a      	lsls	r2, r3
   17d34:	0013      	movs	r3, r2
   17d36:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   17d38:	683a      	ldr	r2, [r7, #0]
   17d3a:	68b9      	ldr	r1, [r7, #8]
   17d3c:	68fb      	ldr	r3, [r7, #12]
   17d3e:	0018      	movs	r0, r3
   17d40:	4b03      	ldr	r3, [pc, #12]	; (17d50 <system_pinmux_pin_set_config+0x44>)
   17d42:	4798      	blx	r3
}
   17d44:	46c0      	nop			; (mov r8, r8)
   17d46:	46bd      	mov	sp, r7
   17d48:	b004      	add	sp, #16
   17d4a:	bd80      	pop	{r7, pc}
   17d4c:	00017b9d 	.word	0x00017b9d
   17d50:	00017bfd 	.word	0x00017bfd

00017d54 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   17d54:	b580      	push	{r7, lr}
   17d56:	af00      	add	r7, sp, #0
	return;
   17d58:	46c0      	nop			; (mov r8, r8)
}
   17d5a:	46bd      	mov	sp, r7
   17d5c:	bd80      	pop	{r7, pc}
	...

00017d60 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   17d60:	b580      	push	{r7, lr}
   17d62:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   17d64:	4b06      	ldr	r3, [pc, #24]	; (17d80 <system_init+0x20>)
   17d66:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   17d68:	4b06      	ldr	r3, [pc, #24]	; (17d84 <system_init+0x24>)
   17d6a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   17d6c:	4b06      	ldr	r3, [pc, #24]	; (17d88 <system_init+0x28>)
   17d6e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   17d70:	4b06      	ldr	r3, [pc, #24]	; (17d8c <system_init+0x2c>)
   17d72:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   17d74:	4b06      	ldr	r3, [pc, #24]	; (17d90 <system_init+0x30>)
   17d76:	4798      	blx	r3
}
   17d78:	46c0      	nop			; (mov r8, r8)
   17d7a:	46bd      	mov	sp, r7
   17d7c:	bd80      	pop	{r7, pc}
   17d7e:	46c0      	nop			; (mov r8, r8)
   17d80:	000173e1 	.word	0x000173e1
   17d84:	00013ea9 	.word	0x00013ea9
   17d88:	00001989 	.word	0x00001989
   17d8c:	00014281 	.word	0x00014281
   17d90:	00017d55 	.word	0x00017d55

00017d94 <system_gclk_chan_get_config_defaults>:
{
   17d94:	b580      	push	{r7, lr}
   17d96:	b082      	sub	sp, #8
   17d98:	af00      	add	r7, sp, #0
   17d9a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   17d9c:	687b      	ldr	r3, [r7, #4]
   17d9e:	2200      	movs	r2, #0
   17da0:	701a      	strb	r2, [r3, #0]
}
   17da2:	46c0      	nop			; (mov r8, r8)
   17da4:	46bd      	mov	sp, r7
   17da6:	b002      	add	sp, #8
   17da8:	bd80      	pop	{r7, pc}
	...

00017dac <system_apb_clock_set_mask>:
{
   17dac:	b580      	push	{r7, lr}
   17dae:	b082      	sub	sp, #8
   17db0:	af00      	add	r7, sp, #0
   17db2:	0002      	movs	r2, r0
   17db4:	6039      	str	r1, [r7, #0]
   17db6:	1dfb      	adds	r3, r7, #7
   17db8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17dba:	1dfb      	adds	r3, r7, #7
   17dbc:	781b      	ldrb	r3, [r3, #0]
   17dbe:	2b01      	cmp	r3, #1
   17dc0:	d00a      	beq.n	17dd8 <system_apb_clock_set_mask+0x2c>
   17dc2:	2b02      	cmp	r3, #2
   17dc4:	d00f      	beq.n	17de6 <system_apb_clock_set_mask+0x3a>
   17dc6:	2b00      	cmp	r3, #0
   17dc8:	d114      	bne.n	17df4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17dca:	4b0e      	ldr	r3, [pc, #56]	; (17e04 <system_apb_clock_set_mask+0x58>)
   17dcc:	4a0d      	ldr	r2, [pc, #52]	; (17e04 <system_apb_clock_set_mask+0x58>)
   17dce:	6991      	ldr	r1, [r2, #24]
   17dd0:	683a      	ldr	r2, [r7, #0]
   17dd2:	430a      	orrs	r2, r1
   17dd4:	619a      	str	r2, [r3, #24]
			break;
   17dd6:	e00f      	b.n	17df8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17dd8:	4b0a      	ldr	r3, [pc, #40]	; (17e04 <system_apb_clock_set_mask+0x58>)
   17dda:	4a0a      	ldr	r2, [pc, #40]	; (17e04 <system_apb_clock_set_mask+0x58>)
   17ddc:	69d1      	ldr	r1, [r2, #28]
   17dde:	683a      	ldr	r2, [r7, #0]
   17de0:	430a      	orrs	r2, r1
   17de2:	61da      	str	r2, [r3, #28]
			break;
   17de4:	e008      	b.n	17df8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17de6:	4b07      	ldr	r3, [pc, #28]	; (17e04 <system_apb_clock_set_mask+0x58>)
   17de8:	4a06      	ldr	r2, [pc, #24]	; (17e04 <system_apb_clock_set_mask+0x58>)
   17dea:	6a11      	ldr	r1, [r2, #32]
   17dec:	683a      	ldr	r2, [r7, #0]
   17dee:	430a      	orrs	r2, r1
   17df0:	621a      	str	r2, [r3, #32]
			break;
   17df2:	e001      	b.n	17df8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17df4:	2317      	movs	r3, #23
   17df6:	e000      	b.n	17dfa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   17df8:	2300      	movs	r3, #0
}
   17dfa:	0018      	movs	r0, r3
   17dfc:	46bd      	mov	sp, r7
   17dfe:	b002      	add	sp, #8
   17e00:	bd80      	pop	{r7, pc}
   17e02:	46c0      	nop			; (mov r8, r8)
   17e04:	40000400 	.word	0x40000400

00017e08 <system_pinmux_get_config_defaults>:
{
   17e08:	b580      	push	{r7, lr}
   17e0a:	b082      	sub	sp, #8
   17e0c:	af00      	add	r7, sp, #0
   17e0e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17e10:	687b      	ldr	r3, [r7, #4]
   17e12:	2280      	movs	r2, #128	; 0x80
   17e14:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17e16:	687b      	ldr	r3, [r7, #4]
   17e18:	2200      	movs	r2, #0
   17e1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17e1c:	687b      	ldr	r3, [r7, #4]
   17e1e:	2201      	movs	r2, #1
   17e20:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17e22:	687b      	ldr	r3, [r7, #4]
   17e24:	2200      	movs	r2, #0
   17e26:	70da      	strb	r2, [r3, #3]
}
   17e28:	46c0      	nop			; (mov r8, r8)
   17e2a:	46bd      	mov	sp, r7
   17e2c:	b002      	add	sp, #8
   17e2e:	bd80      	pop	{r7, pc}

00017e30 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   17e30:	b580      	push	{r7, lr}
   17e32:	b084      	sub	sp, #16
   17e34:	af00      	add	r7, sp, #0
   17e36:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   17e38:	2300      	movs	r3, #0
   17e3a:	60fb      	str	r3, [r7, #12]
   17e3c:	e00c      	b.n	17e58 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   17e3e:	4b0a      	ldr	r3, [pc, #40]	; (17e68 <_tcc_get_inst_index+0x38>)
   17e40:	68fa      	ldr	r2, [r7, #12]
   17e42:	0092      	lsls	r2, r2, #2
   17e44:	58d2      	ldr	r2, [r2, r3]
   17e46:	687b      	ldr	r3, [r7, #4]
   17e48:	429a      	cmp	r2, r3
   17e4a:	d102      	bne.n	17e52 <_tcc_get_inst_index+0x22>
			return i;
   17e4c:	68fb      	ldr	r3, [r7, #12]
   17e4e:	b2db      	uxtb	r3, r3
   17e50:	e006      	b.n	17e60 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   17e52:	68fb      	ldr	r3, [r7, #12]
   17e54:	3301      	adds	r3, #1
   17e56:	60fb      	str	r3, [r7, #12]
   17e58:	68fb      	ldr	r3, [r7, #12]
   17e5a:	2b02      	cmp	r3, #2
   17e5c:	d9ef      	bls.n	17e3e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   17e5e:	2300      	movs	r3, #0
}
   17e60:	0018      	movs	r0, r3
   17e62:	46bd      	mov	sp, r7
   17e64:	b004      	add	sp, #16
   17e66:	bd80      	pop	{r7, pc}
   17e68:	00028308 	.word	0x00028308

00017e6c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   17e6c:	b590      	push	{r4, r7, lr}
   17e6e:	b085      	sub	sp, #20
   17e70:	af00      	add	r7, sp, #0
   17e72:	6078      	str	r0, [r7, #4]
   17e74:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   17e76:	230f      	movs	r3, #15
   17e78:	18fc      	adds	r4, r7, r3
   17e7a:	683b      	ldr	r3, [r7, #0]
   17e7c:	0018      	movs	r0, r3
   17e7e:	4bad      	ldr	r3, [pc, #692]	; (18134 <tcc_get_config_defaults+0x2c8>)
   17e80:	4798      	blx	r3
   17e82:	0003      	movs	r3, r0
   17e84:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   17e86:	687b      	ldr	r3, [r7, #4]
   17e88:	2200      	movs	r2, #0
   17e8a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   17e8c:	230f      	movs	r3, #15
   17e8e:	18fb      	adds	r3, r7, r3
   17e90:	781a      	ldrb	r2, [r3, #0]
   17e92:	4ba9      	ldr	r3, [pc, #676]	; (18138 <tcc_get_config_defaults+0x2cc>)
   17e94:	0092      	lsls	r2, r2, #2
   17e96:	58d2      	ldr	r2, [r2, r3]
   17e98:	687b      	ldr	r3, [r7, #4]
   17e9a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   17e9c:	687b      	ldr	r3, [r7, #4]
   17e9e:	2200      	movs	r2, #0
   17ea0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   17ea2:	687b      	ldr	r3, [r7, #4]
   17ea4:	2200      	movs	r2, #0
   17ea6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   17ea8:	687b      	ldr	r3, [r7, #4]
   17eaa:	2200      	movs	r2, #0
   17eac:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   17eae:	687b      	ldr	r3, [r7, #4]
   17eb0:	2200      	movs	r2, #0
   17eb2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   17eb4:	687b      	ldr	r3, [r7, #4]
   17eb6:	2200      	movs	r2, #0
   17eb8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   17eba:	687b      	ldr	r3, [r7, #4]
   17ebc:	2200      	movs	r2, #0
   17ebe:	61da      	str	r2, [r3, #28]
   17ec0:	687b      	ldr	r3, [r7, #4]
   17ec2:	2200      	movs	r2, #0
   17ec4:	621a      	str	r2, [r3, #32]
   17ec6:	687b      	ldr	r3, [r7, #4]
   17ec8:	2200      	movs	r2, #0
   17eca:	625a      	str	r2, [r3, #36]	; 0x24
   17ecc:	687b      	ldr	r3, [r7, #4]
   17ece:	2200      	movs	r2, #0
   17ed0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   17ed2:	687b      	ldr	r3, [r7, #4]
   17ed4:	2200      	movs	r2, #0
   17ed6:	751a      	strb	r2, [r3, #20]
   17ed8:	687b      	ldr	r3, [r7, #4]
   17eda:	2200      	movs	r2, #0
   17edc:	755a      	strb	r2, [r3, #21]
   17ede:	687b      	ldr	r3, [r7, #4]
   17ee0:	2200      	movs	r2, #0
   17ee2:	759a      	strb	r2, [r3, #22]
   17ee4:	687b      	ldr	r3, [r7, #4]
   17ee6:	2200      	movs	r2, #0
   17ee8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   17eea:	687b      	ldr	r3, [r7, #4]
   17eec:	2200      	movs	r2, #0
   17eee:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   17ef0:	687b      	ldr	r3, [r7, #4]
   17ef2:	2200      	movs	r2, #0
   17ef4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   17ef6:	687b      	ldr	r3, [r7, #4]
   17ef8:	2200      	movs	r2, #0
   17efa:	741a      	strb	r2, [r3, #16]
   17efc:	687b      	ldr	r3, [r7, #4]
   17efe:	2200      	movs	r2, #0
   17f00:	745a      	strb	r2, [r3, #17]
   17f02:	687b      	ldr	r3, [r7, #4]
   17f04:	2200      	movs	r2, #0
   17f06:	749a      	strb	r2, [r3, #18]
   17f08:	687b      	ldr	r3, [r7, #4]
   17f0a:	2200      	movs	r2, #0
   17f0c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   17f0e:	687b      	ldr	r3, [r7, #4]
   17f10:	222c      	movs	r2, #44	; 0x2c
   17f12:	2100      	movs	r1, #0
   17f14:	5499      	strb	r1, [r3, r2]
   17f16:	687b      	ldr	r3, [r7, #4]
   17f18:	222d      	movs	r2, #45	; 0x2d
   17f1a:	2100      	movs	r1, #0
   17f1c:	5499      	strb	r1, [r3, r2]
   17f1e:	687b      	ldr	r3, [r7, #4]
   17f20:	222e      	movs	r2, #46	; 0x2e
   17f22:	2100      	movs	r1, #0
   17f24:	5499      	strb	r1, [r3, r2]
   17f26:	687b      	ldr	r3, [r7, #4]
   17f28:	222f      	movs	r2, #47	; 0x2f
   17f2a:	2100      	movs	r1, #0
   17f2c:	5499      	strb	r1, [r3, r2]
   17f2e:	687b      	ldr	r3, [r7, #4]
   17f30:	2230      	movs	r2, #48	; 0x30
   17f32:	2100      	movs	r1, #0
   17f34:	5499      	strb	r1, [r3, r2]
   17f36:	687b      	ldr	r3, [r7, #4]
   17f38:	2231      	movs	r2, #49	; 0x31
   17f3a:	2100      	movs	r1, #0
   17f3c:	5499      	strb	r1, [r3, r2]
   17f3e:	687b      	ldr	r3, [r7, #4]
   17f40:	2232      	movs	r2, #50	; 0x32
   17f42:	2100      	movs	r1, #0
   17f44:	5499      	strb	r1, [r3, r2]
   17f46:	687b      	ldr	r3, [r7, #4]
   17f48:	2233      	movs	r2, #51	; 0x33
   17f4a:	2100      	movs	r1, #0
   17f4c:	5499      	strb	r1, [r3, r2]
   17f4e:	687b      	ldr	r3, [r7, #4]
   17f50:	2234      	movs	r2, #52	; 0x34
   17f52:	2100      	movs	r1, #0
   17f54:	5499      	strb	r1, [r3, r2]
   17f56:	687b      	ldr	r3, [r7, #4]
   17f58:	2235      	movs	r2, #53	; 0x35
   17f5a:	2100      	movs	r1, #0
   17f5c:	5499      	strb	r1, [r3, r2]
   17f5e:	687b      	ldr	r3, [r7, #4]
   17f60:	2236      	movs	r2, #54	; 0x36
   17f62:	2100      	movs	r1, #0
   17f64:	5499      	strb	r1, [r3, r2]
   17f66:	687b      	ldr	r3, [r7, #4]
   17f68:	2237      	movs	r2, #55	; 0x37
   17f6a:	2100      	movs	r1, #0
   17f6c:	5499      	strb	r1, [r3, r2]
   17f6e:	687b      	ldr	r3, [r7, #4]
   17f70:	2238      	movs	r2, #56	; 0x38
   17f72:	2100      	movs	r1, #0
   17f74:	5499      	strb	r1, [r3, r2]
   17f76:	687b      	ldr	r3, [r7, #4]
   17f78:	2239      	movs	r2, #57	; 0x39
   17f7a:	2100      	movs	r1, #0
   17f7c:	5499      	strb	r1, [r3, r2]
   17f7e:	687b      	ldr	r3, [r7, #4]
   17f80:	223a      	movs	r2, #58	; 0x3a
   17f82:	2100      	movs	r1, #0
   17f84:	5499      	strb	r1, [r3, r2]
   17f86:	687b      	ldr	r3, [r7, #4]
   17f88:	223b      	movs	r2, #59	; 0x3b
   17f8a:	2100      	movs	r1, #0
   17f8c:	5499      	strb	r1, [r3, r2]
   17f8e:	687b      	ldr	r3, [r7, #4]
   17f90:	223c      	movs	r2, #60	; 0x3c
   17f92:	2100      	movs	r1, #0
   17f94:	5499      	strb	r1, [r3, r2]
   17f96:	687b      	ldr	r3, [r7, #4]
   17f98:	223d      	movs	r2, #61	; 0x3d
   17f9a:	2100      	movs	r1, #0
   17f9c:	5499      	strb	r1, [r3, r2]
   17f9e:	687b      	ldr	r3, [r7, #4]
   17fa0:	223e      	movs	r2, #62	; 0x3e
   17fa2:	2100      	movs	r1, #0
   17fa4:	5499      	strb	r1, [r3, r2]
   17fa6:	687b      	ldr	r3, [r7, #4]
   17fa8:	223f      	movs	r2, #63	; 0x3f
   17faa:	2100      	movs	r1, #0
   17fac:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   17fae:	687b      	ldr	r3, [r7, #4]
   17fb0:	2240      	movs	r2, #64	; 0x40
   17fb2:	2100      	movs	r1, #0
   17fb4:	5499      	strb	r1, [r3, r2]
   17fb6:	687b      	ldr	r3, [r7, #4]
   17fb8:	2241      	movs	r2, #65	; 0x41
   17fba:	2100      	movs	r1, #0
   17fbc:	5499      	strb	r1, [r3, r2]
   17fbe:	687b      	ldr	r3, [r7, #4]
   17fc0:	2242      	movs	r2, #66	; 0x42
   17fc2:	2100      	movs	r1, #0
   17fc4:	5499      	strb	r1, [r3, r2]
   17fc6:	687b      	ldr	r3, [r7, #4]
   17fc8:	2243      	movs	r2, #67	; 0x43
   17fca:	2100      	movs	r1, #0
   17fcc:	5499      	strb	r1, [r3, r2]
   17fce:	687b      	ldr	r3, [r7, #4]
   17fd0:	2244      	movs	r2, #68	; 0x44
   17fd2:	2100      	movs	r1, #0
   17fd4:	5499      	strb	r1, [r3, r2]
   17fd6:	687b      	ldr	r3, [r7, #4]
   17fd8:	2245      	movs	r2, #69	; 0x45
   17fda:	2100      	movs	r1, #0
   17fdc:	5499      	strb	r1, [r3, r2]
   17fde:	687b      	ldr	r3, [r7, #4]
   17fe0:	2246      	movs	r2, #70	; 0x46
   17fe2:	2100      	movs	r1, #0
   17fe4:	5499      	strb	r1, [r3, r2]
   17fe6:	687b      	ldr	r3, [r7, #4]
   17fe8:	2247      	movs	r2, #71	; 0x47
   17fea:	2100      	movs	r1, #0
   17fec:	5499      	strb	r1, [r3, r2]
   17fee:	687b      	ldr	r3, [r7, #4]
   17ff0:	2248      	movs	r2, #72	; 0x48
   17ff2:	2100      	movs	r1, #0
   17ff4:	5499      	strb	r1, [r3, r2]
   17ff6:	687b      	ldr	r3, [r7, #4]
   17ff8:	2249      	movs	r2, #73	; 0x49
   17ffa:	2100      	movs	r1, #0
   17ffc:	5499      	strb	r1, [r3, r2]
   17ffe:	687b      	ldr	r3, [r7, #4]
   18000:	224a      	movs	r2, #74	; 0x4a
   18002:	2100      	movs	r1, #0
   18004:	5499      	strb	r1, [r3, r2]
   18006:	687b      	ldr	r3, [r7, #4]
   18008:	224b      	movs	r2, #75	; 0x4b
   1800a:	2100      	movs	r1, #0
   1800c:	5499      	strb	r1, [r3, r2]
   1800e:	687b      	ldr	r3, [r7, #4]
   18010:	224c      	movs	r2, #76	; 0x4c
   18012:	2100      	movs	r1, #0
   18014:	5499      	strb	r1, [r3, r2]
   18016:	687b      	ldr	r3, [r7, #4]
   18018:	224d      	movs	r2, #77	; 0x4d
   1801a:	2100      	movs	r1, #0
   1801c:	5499      	strb	r1, [r3, r2]
   1801e:	687b      	ldr	r3, [r7, #4]
   18020:	224e      	movs	r2, #78	; 0x4e
   18022:	2100      	movs	r1, #0
   18024:	5499      	strb	r1, [r3, r2]
   18026:	687b      	ldr	r3, [r7, #4]
   18028:	224f      	movs	r2, #79	; 0x4f
   1802a:	2100      	movs	r1, #0
   1802c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   1802e:	687b      	ldr	r3, [r7, #4]
   18030:	2250      	movs	r2, #80	; 0x50
   18032:	2100      	movs	r1, #0
   18034:	5499      	strb	r1, [r3, r2]
   18036:	687b      	ldr	r3, [r7, #4]
   18038:	2251      	movs	r2, #81	; 0x51
   1803a:	2100      	movs	r1, #0
   1803c:	5499      	strb	r1, [r3, r2]
   1803e:	687b      	ldr	r3, [r7, #4]
   18040:	2252      	movs	r2, #82	; 0x52
   18042:	2100      	movs	r1, #0
   18044:	5499      	strb	r1, [r3, r2]
   18046:	687b      	ldr	r3, [r7, #4]
   18048:	2253      	movs	r2, #83	; 0x53
   1804a:	2100      	movs	r1, #0
   1804c:	5499      	strb	r1, [r3, r2]
   1804e:	687b      	ldr	r3, [r7, #4]
   18050:	2254      	movs	r2, #84	; 0x54
   18052:	2100      	movs	r1, #0
   18054:	5499      	strb	r1, [r3, r2]
   18056:	687b      	ldr	r3, [r7, #4]
   18058:	2255      	movs	r2, #85	; 0x55
   1805a:	2100      	movs	r1, #0
   1805c:	5499      	strb	r1, [r3, r2]
   1805e:	687b      	ldr	r3, [r7, #4]
   18060:	2256      	movs	r2, #86	; 0x56
   18062:	2100      	movs	r1, #0
   18064:	5499      	strb	r1, [r3, r2]
   18066:	687b      	ldr	r3, [r7, #4]
   18068:	2257      	movs	r2, #87	; 0x57
   1806a:	2100      	movs	r1, #0
   1806c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   1806e:	687b      	ldr	r3, [r7, #4]
   18070:	2298      	movs	r2, #152	; 0x98
   18072:	2100      	movs	r1, #0
   18074:	5499      	strb	r1, [r3, r2]
   18076:	687b      	ldr	r3, [r7, #4]
   18078:	2200      	movs	r2, #0
   1807a:	659a      	str	r2, [r3, #88]	; 0x58
   1807c:	687b      	ldr	r3, [r7, #4]
   1807e:	2200      	movs	r2, #0
   18080:	679a      	str	r2, [r3, #120]	; 0x78
   18082:	687b      	ldr	r3, [r7, #4]
   18084:	2299      	movs	r2, #153	; 0x99
   18086:	2100      	movs	r1, #0
   18088:	5499      	strb	r1, [r3, r2]
   1808a:	687b      	ldr	r3, [r7, #4]
   1808c:	2200      	movs	r2, #0
   1808e:	65da      	str	r2, [r3, #92]	; 0x5c
   18090:	687b      	ldr	r3, [r7, #4]
   18092:	2200      	movs	r2, #0
   18094:	67da      	str	r2, [r3, #124]	; 0x7c
   18096:	687b      	ldr	r3, [r7, #4]
   18098:	229a      	movs	r2, #154	; 0x9a
   1809a:	2100      	movs	r1, #0
   1809c:	5499      	strb	r1, [r3, r2]
   1809e:	687b      	ldr	r3, [r7, #4]
   180a0:	2200      	movs	r2, #0
   180a2:	661a      	str	r2, [r3, #96]	; 0x60
   180a4:	687b      	ldr	r3, [r7, #4]
   180a6:	2280      	movs	r2, #128	; 0x80
   180a8:	2100      	movs	r1, #0
   180aa:	5099      	str	r1, [r3, r2]
   180ac:	687b      	ldr	r3, [r7, #4]
   180ae:	229b      	movs	r2, #155	; 0x9b
   180b0:	2100      	movs	r1, #0
   180b2:	5499      	strb	r1, [r3, r2]
   180b4:	687b      	ldr	r3, [r7, #4]
   180b6:	2200      	movs	r2, #0
   180b8:	665a      	str	r2, [r3, #100]	; 0x64
   180ba:	687b      	ldr	r3, [r7, #4]
   180bc:	2284      	movs	r2, #132	; 0x84
   180be:	2100      	movs	r1, #0
   180c0:	5099      	str	r1, [r3, r2]
   180c2:	687b      	ldr	r3, [r7, #4]
   180c4:	229c      	movs	r2, #156	; 0x9c
   180c6:	2100      	movs	r1, #0
   180c8:	5499      	strb	r1, [r3, r2]
   180ca:	687b      	ldr	r3, [r7, #4]
   180cc:	2200      	movs	r2, #0
   180ce:	669a      	str	r2, [r3, #104]	; 0x68
   180d0:	687b      	ldr	r3, [r7, #4]
   180d2:	2288      	movs	r2, #136	; 0x88
   180d4:	2100      	movs	r1, #0
   180d6:	5099      	str	r1, [r3, r2]
   180d8:	687b      	ldr	r3, [r7, #4]
   180da:	229d      	movs	r2, #157	; 0x9d
   180dc:	2100      	movs	r1, #0
   180de:	5499      	strb	r1, [r3, r2]
   180e0:	687b      	ldr	r3, [r7, #4]
   180e2:	2200      	movs	r2, #0
   180e4:	66da      	str	r2, [r3, #108]	; 0x6c
   180e6:	687b      	ldr	r3, [r7, #4]
   180e8:	228c      	movs	r2, #140	; 0x8c
   180ea:	2100      	movs	r1, #0
   180ec:	5099      	str	r1, [r3, r2]
   180ee:	687b      	ldr	r3, [r7, #4]
   180f0:	229e      	movs	r2, #158	; 0x9e
   180f2:	2100      	movs	r1, #0
   180f4:	5499      	strb	r1, [r3, r2]
   180f6:	687b      	ldr	r3, [r7, #4]
   180f8:	2200      	movs	r2, #0
   180fa:	671a      	str	r2, [r3, #112]	; 0x70
   180fc:	687b      	ldr	r3, [r7, #4]
   180fe:	2290      	movs	r2, #144	; 0x90
   18100:	2100      	movs	r1, #0
   18102:	5099      	str	r1, [r3, r2]
   18104:	687b      	ldr	r3, [r7, #4]
   18106:	229f      	movs	r2, #159	; 0x9f
   18108:	2100      	movs	r1, #0
   1810a:	5499      	strb	r1, [r3, r2]
   1810c:	687b      	ldr	r3, [r7, #4]
   1810e:	2200      	movs	r2, #0
   18110:	675a      	str	r2, [r3, #116]	; 0x74
   18112:	687b      	ldr	r3, [r7, #4]
   18114:	2294      	movs	r2, #148	; 0x94
   18116:	2100      	movs	r1, #0
   18118:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1811a:	687b      	ldr	r3, [r7, #4]
   1811c:	22a0      	movs	r2, #160	; 0xa0
   1811e:	2101      	movs	r1, #1
   18120:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   18122:	687b      	ldr	r3, [r7, #4]
   18124:	22a1      	movs	r2, #161	; 0xa1
   18126:	2100      	movs	r1, #0
   18128:	5499      	strb	r1, [r3, r2]
}
   1812a:	46c0      	nop			; (mov r8, r8)
   1812c:	46bd      	mov	sp, r7
   1812e:	b005      	add	sp, #20
   18130:	bd90      	pop	{r4, r7, pc}
   18132:	46c0      	nop			; (mov r8, r8)
   18134:	00017e31 	.word	0x00017e31
   18138:	00028324 	.word	0x00028324

0001813c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   1813c:	b580      	push	{r7, lr}
   1813e:	b086      	sub	sp, #24
   18140:	af00      	add	r7, sp, #0
   18142:	60b9      	str	r1, [r7, #8]
   18144:	607a      	str	r2, [r7, #4]
   18146:	230f      	movs	r3, #15
   18148:	18fb      	adds	r3, r7, r3
   1814a:	1c02      	adds	r2, r0, #0
   1814c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   1814e:	2300      	movs	r3, #0
   18150:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   18152:	2300      	movs	r3, #0
   18154:	613b      	str	r3, [r7, #16]
   18156:	e01d      	b.n	18194 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   18158:	68ba      	ldr	r2, [r7, #8]
   1815a:	693b      	ldr	r3, [r7, #16]
   1815c:	18d3      	adds	r3, r2, r3
   1815e:	3310      	adds	r3, #16
   18160:	781b      	ldrb	r3, [r3, #0]
   18162:	2b01      	cmp	r3, #1
   18164:	d113      	bne.n	1818e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   18166:	230f      	movs	r3, #15
   18168:	18fb      	adds	r3, r7, r3
   1816a:	781b      	ldrb	r3, [r3, #0]
   1816c:	4a1b      	ldr	r2, [pc, #108]	; (181dc <_tcc_build_ctrla+0xa0>)
   1816e:	5cd3      	ldrb	r3, [r2, r3]
   18170:	001a      	movs	r2, r3
   18172:	693b      	ldr	r3, [r7, #16]
   18174:	429a      	cmp	r2, r3
   18176:	da01      	bge.n	1817c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   18178:	2317      	movs	r3, #23
   1817a:	e02a      	b.n	181d2 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1817c:	2380      	movs	r3, #128	; 0x80
   1817e:	045a      	lsls	r2, r3, #17
   18180:	693b      	ldr	r3, [r7, #16]
   18182:	409a      	lsls	r2, r3
   18184:	0013      	movs	r3, r2
   18186:	001a      	movs	r2, r3
   18188:	697b      	ldr	r3, [r7, #20]
   1818a:	4313      	orrs	r3, r2
   1818c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1818e:	693b      	ldr	r3, [r7, #16]
   18190:	3301      	adds	r3, #1
   18192:	613b      	str	r3, [r7, #16]
   18194:	693b      	ldr	r3, [r7, #16]
   18196:	2b03      	cmp	r3, #3
   18198:	ddde      	ble.n	18158 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   1819a:	68bb      	ldr	r3, [r7, #8]
   1819c:	22a1      	movs	r2, #161	; 0xa1
   1819e:	5c9b      	ldrb	r3, [r3, r2]
   181a0:	2b00      	cmp	r3, #0
   181a2:	d004      	beq.n	181ae <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   181a4:	697b      	ldr	r3, [r7, #20]
   181a6:	2280      	movs	r2, #128	; 0x80
   181a8:	0112      	lsls	r2, r2, #4
   181aa:	4313      	orrs	r3, r2
   181ac:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   181ae:	68bb      	ldr	r3, [r7, #8]
   181b0:	7b1b      	ldrb	r3, [r3, #12]
   181b2:	031b      	lsls	r3, r3, #12
   181b4:	001a      	movs	r2, r3
   181b6:	697b      	ldr	r3, [r7, #20]
   181b8:	4313      	orrs	r3, r2
   181ba:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   181bc:	68bb      	ldr	r3, [r7, #8]
   181be:	7adb      	ldrb	r3, [r3, #11]
   181c0:	021b      	lsls	r3, r3, #8
   181c2:	001a      	movs	r2, r3
   181c4:	697b      	ldr	r3, [r7, #20]
   181c6:	4313      	orrs	r3, r2
   181c8:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   181ca:	687b      	ldr	r3, [r7, #4]
   181cc:	697a      	ldr	r2, [r7, #20]
   181ce:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   181d0:	2300      	movs	r3, #0
}
   181d2:	0018      	movs	r0, r3
   181d4:	46bd      	mov	sp, r7
   181d6:	b006      	add	sp, #24
   181d8:	bd80      	pop	{r7, pc}
   181da:	46c0      	nop			; (mov r8, r8)
   181dc:	00028330 	.word	0x00028330

000181e0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   181e0:	b580      	push	{r7, lr}
   181e2:	b086      	sub	sp, #24
   181e4:	af00      	add	r7, sp, #0
   181e6:	60b9      	str	r1, [r7, #8]
   181e8:	607a      	str	r2, [r7, #4]
   181ea:	230f      	movs	r3, #15
   181ec:	18fb      	adds	r3, r7, r3
   181ee:	1c02      	adds	r2, r0, #0
   181f0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   181f2:	2317      	movs	r3, #23
   181f4:	18fb      	adds	r3, r7, r3
   181f6:	2200      	movs	r2, #0
   181f8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   181fa:	68bb      	ldr	r3, [r7, #8]
   181fc:	7a1b      	ldrb	r3, [r3, #8]
   181fe:	2b00      	cmp	r3, #0
   18200:	d007      	beq.n	18212 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   18202:	2317      	movs	r3, #23
   18204:	18fb      	adds	r3, r7, r3
   18206:	2217      	movs	r2, #23
   18208:	18ba      	adds	r2, r7, r2
   1820a:	7812      	ldrb	r2, [r2, #0]
   1820c:	2104      	movs	r1, #4
   1820e:	430a      	orrs	r2, r1
   18210:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   18212:	68bb      	ldr	r3, [r7, #8]
   18214:	7a5b      	ldrb	r3, [r3, #9]
   18216:	2b01      	cmp	r3, #1
   18218:	d107      	bne.n	1822a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   1821a:	2317      	movs	r3, #23
   1821c:	18fb      	adds	r3, r7, r3
   1821e:	2217      	movs	r2, #23
   18220:	18ba      	adds	r2, r7, r2
   18222:	7812      	ldrb	r2, [r2, #0]
   18224:	2101      	movs	r1, #1
   18226:	430a      	orrs	r2, r1
   18228:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   1822a:	687b      	ldr	r3, [r7, #4]
   1822c:	2217      	movs	r2, #23
   1822e:	18ba      	adds	r2, r7, r2
   18230:	7812      	ldrb	r2, [r2, #0]
   18232:	701a      	strb	r2, [r3, #0]
}
   18234:	46c0      	nop			; (mov r8, r8)
   18236:	46bd      	mov	sp, r7
   18238:	b006      	add	sp, #24
   1823a:	bd80      	pop	{r7, pc}

0001823c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   1823c:	b580      	push	{r7, lr}
   1823e:	b088      	sub	sp, #32
   18240:	af00      	add	r7, sp, #0
   18242:	60b9      	str	r1, [r7, #8]
   18244:	607a      	str	r2, [r7, #4]
   18246:	230f      	movs	r3, #15
   18248:	18fb      	adds	r3, r7, r3
   1824a:	1c02      	adds	r2, r0, #0
   1824c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1824e:	230f      	movs	r3, #15
   18250:	18fb      	adds	r3, r7, r3
   18252:	781a      	ldrb	r2, [r3, #0]
   18254:	231b      	movs	r3, #27
   18256:	18fb      	adds	r3, r7, r3
   18258:	493e      	ldr	r1, [pc, #248]	; (18354 <_tcc_build_faults+0x118>)
   1825a:	5c8a      	ldrb	r2, [r1, r2]
   1825c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1825e:	2300      	movs	r3, #0
   18260:	61fb      	str	r3, [r7, #28]
   18262:	e06e      	b.n	18342 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   18264:	69fa      	ldr	r2, [r7, #28]
   18266:	0013      	movs	r3, r2
   18268:	009b      	lsls	r3, r3, #2
   1826a:	189b      	adds	r3, r3, r2
   1826c:	005b      	lsls	r3, r3, #1
   1826e:	3328      	adds	r3, #40	; 0x28
   18270:	68ba      	ldr	r2, [r7, #8]
   18272:	18d3      	adds	r3, r2, r3
   18274:	3304      	adds	r3, #4
   18276:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   18278:	697b      	ldr	r3, [r7, #20]
   1827a:	7a5b      	ldrb	r3, [r3, #9]
   1827c:	221b      	movs	r2, #27
   1827e:	18ba      	adds	r2, r7, r2
   18280:	7812      	ldrb	r2, [r2, #0]
   18282:	429a      	cmp	r2, r3
   18284:	d801      	bhi.n	1828a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   18286:	2317      	movs	r3, #23
   18288:	e05f      	b.n	1834a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   1828a:	697b      	ldr	r3, [r7, #20]
   1828c:	781b      	ldrb	r3, [r3, #0]
   1828e:	2b0f      	cmp	r3, #15
   18290:	d901      	bls.n	18296 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   18292:	2317      	movs	r3, #23
   18294:	e059      	b.n	1834a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   18296:	697b      	ldr	r3, [r7, #20]
   18298:	781b      	ldrb	r3, [r3, #0]
   1829a:	061b      	lsls	r3, r3, #24
   1829c:	001a      	movs	r2, r3
   1829e:	23f0      	movs	r3, #240	; 0xf0
   182a0:	051b      	lsls	r3, r3, #20
   182a2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   182a4:	697b      	ldr	r3, [r7, #20]
   182a6:	785b      	ldrb	r3, [r3, #1]
   182a8:	041b      	lsls	r3, r3, #16
   182aa:	0019      	movs	r1, r3
   182ac:	23ff      	movs	r3, #255	; 0xff
   182ae:	041b      	lsls	r3, r3, #16
   182b0:	400b      	ands	r3, r1
   182b2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   182b4:	697b      	ldr	r3, [r7, #20]
   182b6:	789b      	ldrb	r3, [r3, #2]
   182b8:	2b00      	cmp	r3, #0
   182ba:	d001      	beq.n	182c0 <_tcc_build_faults+0x84>
   182bc:	2380      	movs	r3, #128	; 0x80
   182be:	e000      	b.n	182c2 <_tcc_build_faults+0x86>
   182c0:	2300      	movs	r3, #0
   182c2:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   182c4:	697b      	ldr	r3, [r7, #20]
   182c6:	78db      	ldrb	r3, [r3, #3]
   182c8:	2b00      	cmp	r3, #0
   182ca:	d001      	beq.n	182d0 <_tcc_build_faults+0x94>
   182cc:	2308      	movs	r3, #8
   182ce:	e000      	b.n	182d2 <_tcc_build_faults+0x96>
   182d0:	2300      	movs	r3, #0
   182d2:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   182d4:	697b      	ldr	r3, [r7, #20]
   182d6:	791b      	ldrb	r3, [r3, #4]
   182d8:	2b00      	cmp	r3, #0
   182da:	d001      	beq.n	182e0 <_tcc_build_faults+0xa4>
   182dc:	2310      	movs	r3, #16
   182de:	e000      	b.n	182e2 <_tcc_build_faults+0xa6>
   182e0:	2300      	movs	r3, #0
   182e2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   182e4:	697b      	ldr	r3, [r7, #20]
   182e6:	795b      	ldrb	r3, [r3, #5]
   182e8:	0019      	movs	r1, r3
   182ea:	2303      	movs	r3, #3
   182ec:	400b      	ands	r3, r1
   182ee:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   182f0:	697b      	ldr	r3, [r7, #20]
   182f2:	799b      	ldrb	r3, [r3, #6]
   182f4:	015b      	lsls	r3, r3, #5
   182f6:	0019      	movs	r1, r3
   182f8:	2360      	movs	r3, #96	; 0x60
   182fa:	400b      	ands	r3, r1
   182fc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   182fe:	697b      	ldr	r3, [r7, #20]
   18300:	79db      	ldrb	r3, [r3, #7]
   18302:	021b      	lsls	r3, r3, #8
   18304:	0019      	movs	r1, r3
   18306:	23c0      	movs	r3, #192	; 0xc0
   18308:	009b      	lsls	r3, r3, #2
   1830a:	400b      	ands	r3, r1
   1830c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   1830e:	697b      	ldr	r3, [r7, #20]
   18310:	7a1b      	ldrb	r3, [r3, #8]
   18312:	031b      	lsls	r3, r3, #12
   18314:	0019      	movs	r1, r3
   18316:	23e0      	movs	r3, #224	; 0xe0
   18318:	01db      	lsls	r3, r3, #7
   1831a:	400b      	ands	r3, r1
   1831c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1831e:	697b      	ldr	r3, [r7, #20]
   18320:	7a5b      	ldrb	r3, [r3, #9]
   18322:	029b      	lsls	r3, r3, #10
   18324:	0019      	movs	r1, r3
   18326:	23c0      	movs	r3, #192	; 0xc0
   18328:	011b      	lsls	r3, r3, #4
   1832a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1832c:	4313      	orrs	r3, r2
   1832e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   18330:	69fb      	ldr	r3, [r7, #28]
   18332:	009b      	lsls	r3, r3, #2
   18334:	687a      	ldr	r2, [r7, #4]
   18336:	18d3      	adds	r3, r2, r3
   18338:	693a      	ldr	r2, [r7, #16]
   1833a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1833c:	69fb      	ldr	r3, [r7, #28]
   1833e:	3301      	adds	r3, #1
   18340:	61fb      	str	r3, [r7, #28]
   18342:	69fb      	ldr	r3, [r7, #28]
   18344:	2b01      	cmp	r3, #1
   18346:	dd8d      	ble.n	18264 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   18348:	2300      	movs	r3, #0
}
   1834a:	0018      	movs	r0, r3
   1834c:	46bd      	mov	sp, r7
   1834e:	b008      	add	sp, #32
   18350:	bd80      	pop	{r7, pc}
   18352:	46c0      	nop			; (mov r8, r8)
   18354:	00028330 	.word	0x00028330

00018358 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   18358:	b580      	push	{r7, lr}
   1835a:	b088      	sub	sp, #32
   1835c:	af00      	add	r7, sp, #0
   1835e:	60b9      	str	r1, [r7, #8]
   18360:	607a      	str	r2, [r7, #4]
   18362:	230f      	movs	r3, #15
   18364:	18fb      	adds	r3, r7, r3
   18366:	1c02      	adds	r2, r0, #0
   18368:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1836a:	230f      	movs	r3, #15
   1836c:	18fb      	adds	r3, r7, r3
   1836e:	781a      	ldrb	r2, [r3, #0]
   18370:	2317      	movs	r3, #23
   18372:	18fb      	adds	r3, r7, r3
   18374:	492d      	ldr	r1, [pc, #180]	; (1842c <_tcc_build_drvctrl+0xd4>)
   18376:	5c8a      	ldrb	r2, [r1, r2]
   18378:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   1837a:	2300      	movs	r3, #0
   1837c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1837e:	2300      	movs	r3, #0
   18380:	61fb      	str	r3, [r7, #28]
   18382:	e048      	b.n	18416 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   18384:	68ba      	ldr	r2, [r7, #8]
   18386:	2150      	movs	r1, #80	; 0x50
   18388:	69fb      	ldr	r3, [r7, #28]
   1838a:	18d3      	adds	r3, r2, r3
   1838c:	185b      	adds	r3, r3, r1
   1838e:	781b      	ldrb	r3, [r3, #0]
   18390:	2b00      	cmp	r3, #0
   18392:	d010      	beq.n	183b6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   18394:	2317      	movs	r3, #23
   18396:	18fb      	adds	r3, r7, r3
   18398:	781a      	ldrb	r2, [r3, #0]
   1839a:	69fb      	ldr	r3, [r7, #28]
   1839c:	429a      	cmp	r2, r3
   1839e:	d801      	bhi.n	183a4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   183a0:	2317      	movs	r3, #23
   183a2:	e03f      	b.n	18424 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   183a4:	2380      	movs	r3, #128	; 0x80
   183a6:	025a      	lsls	r2, r3, #9
   183a8:	69fb      	ldr	r3, [r7, #28]
   183aa:	409a      	lsls	r2, r3
   183ac:	0013      	movs	r3, r2
   183ae:	001a      	movs	r2, r3
   183b0:	69bb      	ldr	r3, [r7, #24]
   183b2:	4313      	orrs	r3, r2
   183b4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   183b6:	68ba      	ldr	r2, [r7, #8]
   183b8:	69fb      	ldr	r3, [r7, #28]
   183ba:	331c      	adds	r3, #28
   183bc:	005b      	lsls	r3, r3, #1
   183be:	18d3      	adds	r3, r2, r3
   183c0:	3309      	adds	r3, #9
   183c2:	781b      	ldrb	r3, [r3, #0]
   183c4:	2b00      	cmp	r3, #0
   183c6:	d023      	beq.n	18410 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   183c8:	2317      	movs	r3, #23
   183ca:	18fb      	adds	r3, r7, r3
   183cc:	781a      	ldrb	r2, [r3, #0]
   183ce:	69fb      	ldr	r3, [r7, #28]
   183d0:	429a      	cmp	r2, r3
   183d2:	d801      	bhi.n	183d8 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   183d4:	2317      	movs	r3, #23
   183d6:	e025      	b.n	18424 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   183d8:	68ba      	ldr	r2, [r7, #8]
   183da:	69fb      	ldr	r3, [r7, #28]
   183dc:	331c      	adds	r3, #28
   183de:	005b      	lsls	r3, r3, #1
   183e0:	18d3      	adds	r3, r2, r3
   183e2:	3309      	adds	r3, #9
   183e4:	781b      	ldrb	r3, [r3, #0]
   183e6:	2b02      	cmp	r3, #2
   183e8:	d10a      	bne.n	18400 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   183ea:	2302      	movs	r3, #2
   183ec:	33ff      	adds	r3, #255	; 0xff
   183ee:	001a      	movs	r2, r3
   183f0:	69fb      	ldr	r3, [r7, #28]
   183f2:	409a      	lsls	r2, r3
   183f4:	0013      	movs	r3, r2
   183f6:	001a      	movs	r2, r3
   183f8:	69bb      	ldr	r3, [r7, #24]
   183fa:	4313      	orrs	r3, r2
   183fc:	61bb      	str	r3, [r7, #24]
   183fe:	e007      	b.n	18410 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   18400:	2201      	movs	r2, #1
   18402:	69fb      	ldr	r3, [r7, #28]
   18404:	409a      	lsls	r2, r3
   18406:	0013      	movs	r3, r2
   18408:	001a      	movs	r2, r3
   1840a:	69bb      	ldr	r3, [r7, #24]
   1840c:	4313      	orrs	r3, r2
   1840e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   18410:	69fb      	ldr	r3, [r7, #28]
   18412:	3301      	adds	r3, #1
   18414:	61fb      	str	r3, [r7, #28]
   18416:	69fb      	ldr	r3, [r7, #28]
   18418:	2b07      	cmp	r3, #7
   1841a:	d9b3      	bls.n	18384 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   1841c:	687b      	ldr	r3, [r7, #4]
   1841e:	69ba      	ldr	r2, [r7, #24]
   18420:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   18422:	2300      	movs	r3, #0
}
   18424:	0018      	movs	r0, r3
   18426:	46bd      	mov	sp, r7
   18428:	b008      	add	sp, #32
   1842a:	bd80      	pop	{r7, pc}
   1842c:	00028334 	.word	0x00028334

00018430 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   18430:	b580      	push	{r7, lr}
   18432:	b088      	sub	sp, #32
   18434:	af00      	add	r7, sp, #0
   18436:	60b9      	str	r1, [r7, #8]
   18438:	607a      	str	r2, [r7, #4]
   1843a:	230f      	movs	r3, #15
   1843c:	18fb      	adds	r3, r7, r3
   1843e:	1c02      	adds	r2, r0, #0
   18440:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   18442:	230f      	movs	r3, #15
   18444:	18fb      	adds	r3, r7, r3
   18446:	781a      	ldrb	r2, [r3, #0]
   18448:	2317      	movs	r3, #23
   1844a:	18fb      	adds	r3, r7, r3
   1844c:	491d      	ldr	r1, [pc, #116]	; (184c4 <_tcc_build_waves+0x94>)
   1844e:	5c8a      	ldrb	r2, [r1, r2]
   18450:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   18452:	68bb      	ldr	r3, [r7, #8]
   18454:	3310      	adds	r3, #16
   18456:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   18458:	693b      	ldr	r3, [r7, #16]
   1845a:	7a5b      	ldrb	r3, [r3, #9]
   1845c:	011b      	lsls	r3, r3, #4
   1845e:	001a      	movs	r2, r3
   18460:	2330      	movs	r3, #48	; 0x30
   18462:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   18464:	693b      	ldr	r3, [r7, #16]
   18466:	7a1b      	ldrb	r3, [r3, #8]
   18468:	0019      	movs	r1, r3
   1846a:	2307      	movs	r3, #7
   1846c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1846e:	4313      	orrs	r3, r2
   18470:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   18472:	2300      	movs	r3, #0
   18474:	61fb      	str	r3, [r7, #28]
   18476:	e01a      	b.n	184ae <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   18478:	693a      	ldr	r2, [r7, #16]
   1847a:	69fb      	ldr	r3, [r7, #28]
   1847c:	18d3      	adds	r3, r2, r3
   1847e:	3304      	adds	r3, #4
   18480:	781b      	ldrb	r3, [r3, #0]
   18482:	2b00      	cmp	r3, #0
   18484:	d010      	beq.n	184a8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   18486:	2317      	movs	r3, #23
   18488:	18fb      	adds	r3, r7, r3
   1848a:	781a      	ldrb	r2, [r3, #0]
   1848c:	69fb      	ldr	r3, [r7, #28]
   1848e:	429a      	cmp	r2, r3
   18490:	dc01      	bgt.n	18496 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   18492:	2317      	movs	r3, #23
   18494:	e012      	b.n	184bc <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   18496:	2380      	movs	r3, #128	; 0x80
   18498:	025a      	lsls	r2, r3, #9
   1849a:	69fb      	ldr	r3, [r7, #28]
   1849c:	409a      	lsls	r2, r3
   1849e:	0013      	movs	r3, r2
   184a0:	001a      	movs	r2, r3
   184a2:	69bb      	ldr	r3, [r7, #24]
   184a4:	4313      	orrs	r3, r2
   184a6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   184a8:	69fb      	ldr	r3, [r7, #28]
   184aa:	3301      	adds	r3, #1
   184ac:	61fb      	str	r3, [r7, #28]
   184ae:	69fb      	ldr	r3, [r7, #28]
   184b0:	2b03      	cmp	r3, #3
   184b2:	dde1      	ble.n	18478 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   184b4:	687b      	ldr	r3, [r7, #4]
   184b6:	69ba      	ldr	r2, [r7, #24]
   184b8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   184ba:	2300      	movs	r3, #0
}
   184bc:	0018      	movs	r0, r3
   184be:	46bd      	mov	sp, r7
   184c0:	b008      	add	sp, #32
   184c2:	bd80      	pop	{r7, pc}
   184c4:	00028330 	.word	0x00028330

000184c8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   184c8:	b590      	push	{r4, r7, lr}
   184ca:	b091      	sub	sp, #68	; 0x44
   184cc:	af00      	add	r7, sp, #0
   184ce:	60f8      	str	r0, [r7, #12]
   184d0:	60b9      	str	r1, [r7, #8]
   184d2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   184d4:	233b      	movs	r3, #59	; 0x3b
   184d6:	18fc      	adds	r4, r7, r3
   184d8:	68bb      	ldr	r3, [r7, #8]
   184da:	0018      	movs	r0, r3
   184dc:	4bc4      	ldr	r3, [pc, #784]	; (187f0 <tcc_init+0x328>)
   184de:	4798      	blx	r3
   184e0:	0003      	movs	r3, r0
   184e2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   184e4:	233b      	movs	r3, #59	; 0x3b
   184e6:	18fb      	adds	r3, r7, r3
   184e8:	781a      	ldrb	r2, [r3, #0]
   184ea:	4bc2      	ldr	r3, [pc, #776]	; (187f4 <tcc_init+0x32c>)
   184ec:	0092      	lsls	r2, r2, #2
   184ee:	58d3      	ldr	r3, [r2, r3]
   184f0:	0019      	movs	r1, r3
   184f2:	2002      	movs	r0, #2
   184f4:	4bc0      	ldr	r3, [pc, #768]	; (187f8 <tcc_init+0x330>)
   184f6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   184f8:	68bb      	ldr	r3, [r7, #8]
   184fa:	681b      	ldr	r3, [r3, #0]
   184fc:	2202      	movs	r2, #2
   184fe:	4013      	ands	r3, r2
   18500:	d001      	beq.n	18506 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   18502:	231c      	movs	r3, #28
   18504:	e1be      	b.n	18884 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   18506:	68bb      	ldr	r3, [r7, #8]
   18508:	681b      	ldr	r3, [r3, #0]
   1850a:	2201      	movs	r2, #1
   1850c:	4013      	ands	r3, r2
   1850e:	d001      	beq.n	18514 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   18510:	231c      	movs	r3, #28
   18512:	e1b7      	b.n	18884 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   18514:	233b      	movs	r3, #59	; 0x3b
   18516:	18fb      	adds	r3, r7, r3
   18518:	781a      	ldrb	r2, [r3, #0]
   1851a:	4bb8      	ldr	r3, [pc, #736]	; (187fc <tcc_init+0x334>)
   1851c:	0092      	lsls	r2, r2, #2
   1851e:	58d3      	ldr	r3, [r2, r3]
   18520:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   18522:	687b      	ldr	r3, [r7, #4]
   18524:	681a      	ldr	r2, [r3, #0]
   18526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18528:	429a      	cmp	r2, r3
   1852a:	d804      	bhi.n	18536 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   1852c:	687b      	ldr	r3, [r7, #4]
   1852e:	685a      	ldr	r2, [r3, #4]
   18530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18532:	429a      	cmp	r2, r3
   18534:	d901      	bls.n	1853a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   18536:	2317      	movs	r3, #23
   18538:	e1a4      	b.n	18884 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1853a:	2300      	movs	r3, #0
   1853c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1853e:	e00e      	b.n	1855e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   18540:	687a      	ldr	r2, [r7, #4]
   18542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18544:	3306      	adds	r3, #6
   18546:	009b      	lsls	r3, r3, #2
   18548:	18d3      	adds	r3, r2, r3
   1854a:	3304      	adds	r3, #4
   1854c:	681a      	ldr	r2, [r3, #0]
   1854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18550:	429a      	cmp	r2, r3
   18552:	d901      	bls.n	18558 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   18554:	2317      	movs	r3, #23
   18556:	e195      	b.n	18884 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   18558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1855a:	3301      	adds	r3, #1
   1855c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1855e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18560:	2b03      	cmp	r3, #3
   18562:	dded      	ble.n	18540 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   18564:	2300      	movs	r3, #0
   18566:	63fb      	str	r3, [r7, #60]	; 0x3c
   18568:	e019      	b.n	1859e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   1856a:	687a      	ldr	r2, [r7, #4]
   1856c:	2198      	movs	r1, #152	; 0x98
   1856e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18570:	18d3      	adds	r3, r2, r3
   18572:	185b      	adds	r3, r3, r1
   18574:	781b      	ldrb	r3, [r3, #0]
   18576:	2201      	movs	r2, #1
   18578:	4053      	eors	r3, r2
   1857a:	b2db      	uxtb	r3, r3
   1857c:	2b00      	cmp	r3, #0
   1857e:	d10a      	bne.n	18596 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   18580:	233b      	movs	r3, #59	; 0x3b
   18582:	18fb      	adds	r3, r7, r3
   18584:	781b      	ldrb	r3, [r3, #0]
   18586:	4a9e      	ldr	r2, [pc, #632]	; (18800 <tcc_init+0x338>)
   18588:	5cd3      	ldrb	r3, [r2, r3]
   1858a:	001a      	movs	r2, r3
   1858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1858e:	429a      	cmp	r2, r3
   18590:	dc02      	bgt.n	18598 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   18592:	2317      	movs	r3, #23
   18594:	e176      	b.n	18884 <tcc_init+0x3bc>
			continue;
   18596:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   18598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1859a:	3301      	adds	r3, #1
   1859c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1859e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185a0:	2b07      	cmp	r3, #7
   185a2:	dde2      	ble.n	1856a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   185a4:	2300      	movs	r3, #0
   185a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   185a8:	2333      	movs	r3, #51	; 0x33
   185aa:	18fc      	adds	r4, r7, r3
   185ac:	232c      	movs	r3, #44	; 0x2c
   185ae:	18fa      	adds	r2, r7, r3
   185b0:	6879      	ldr	r1, [r7, #4]
   185b2:	233b      	movs	r3, #59	; 0x3b
   185b4:	18fb      	adds	r3, r7, r3
   185b6:	781b      	ldrb	r3, [r3, #0]
   185b8:	0018      	movs	r0, r3
   185ba:	4b92      	ldr	r3, [pc, #584]	; (18804 <tcc_init+0x33c>)
   185bc:	4798      	blx	r3
   185be:	0003      	movs	r3, r0
   185c0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   185c2:	2333      	movs	r3, #51	; 0x33
   185c4:	18fb      	adds	r3, r7, r3
   185c6:	781b      	ldrb	r3, [r3, #0]
   185c8:	2b00      	cmp	r3, #0
   185ca:	d003      	beq.n	185d4 <tcc_init+0x10c>
		return status;
   185cc:	2333      	movs	r3, #51	; 0x33
   185ce:	18fb      	adds	r3, r7, r3
   185d0:	781b      	ldrb	r3, [r3, #0]
   185d2:	e157      	b.n	18884 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   185d4:	232b      	movs	r3, #43	; 0x2b
   185d6:	18fa      	adds	r2, r7, r3
   185d8:	6879      	ldr	r1, [r7, #4]
   185da:	233b      	movs	r3, #59	; 0x3b
   185dc:	18fb      	adds	r3, r7, r3
   185de:	781b      	ldrb	r3, [r3, #0]
   185e0:	0018      	movs	r0, r3
   185e2:	4b89      	ldr	r3, [pc, #548]	; (18808 <tcc_init+0x340>)
   185e4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   185e6:	2333      	movs	r3, #51	; 0x33
   185e8:	18fc      	adds	r4, r7, r3
   185ea:	2320      	movs	r3, #32
   185ec:	18fa      	adds	r2, r7, r3
   185ee:	6879      	ldr	r1, [r7, #4]
   185f0:	233b      	movs	r3, #59	; 0x3b
   185f2:	18fb      	adds	r3, r7, r3
   185f4:	781b      	ldrb	r3, [r3, #0]
   185f6:	0018      	movs	r0, r3
   185f8:	4b84      	ldr	r3, [pc, #528]	; (1880c <tcc_init+0x344>)
   185fa:	4798      	blx	r3
   185fc:	0003      	movs	r3, r0
   185fe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   18600:	2333      	movs	r3, #51	; 0x33
   18602:	18fb      	adds	r3, r7, r3
   18604:	781b      	ldrb	r3, [r3, #0]
   18606:	2b00      	cmp	r3, #0
   18608:	d003      	beq.n	18612 <tcc_init+0x14a>
		return status;
   1860a:	2333      	movs	r3, #51	; 0x33
   1860c:	18fb      	adds	r3, r7, r3
   1860e:	781b      	ldrb	r3, [r3, #0]
   18610:	e138      	b.n	18884 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   18612:	2300      	movs	r3, #0
   18614:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   18616:	2333      	movs	r3, #51	; 0x33
   18618:	18fc      	adds	r4, r7, r3
   1861a:	231c      	movs	r3, #28
   1861c:	18fa      	adds	r2, r7, r3
   1861e:	6879      	ldr	r1, [r7, #4]
   18620:	233b      	movs	r3, #59	; 0x3b
   18622:	18fb      	adds	r3, r7, r3
   18624:	781b      	ldrb	r3, [r3, #0]
   18626:	0018      	movs	r0, r3
   18628:	4b79      	ldr	r3, [pc, #484]	; (18810 <tcc_init+0x348>)
   1862a:	4798      	blx	r3
   1862c:	0003      	movs	r3, r0
   1862e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   18630:	2333      	movs	r3, #51	; 0x33
   18632:	18fb      	adds	r3, r7, r3
   18634:	781b      	ldrb	r3, [r3, #0]
   18636:	2b00      	cmp	r3, #0
   18638:	d003      	beq.n	18642 <tcc_init+0x17a>
		return status;
   1863a:	2333      	movs	r3, #51	; 0x33
   1863c:	18fb      	adds	r3, r7, r3
   1863e:	781b      	ldrb	r3, [r3, #0]
   18640:	e120      	b.n	18884 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   18642:	2333      	movs	r3, #51	; 0x33
   18644:	18fc      	adds	r4, r7, r3
   18646:	2318      	movs	r3, #24
   18648:	18fa      	adds	r2, r7, r3
   1864a:	6879      	ldr	r1, [r7, #4]
   1864c:	233b      	movs	r3, #59	; 0x3b
   1864e:	18fb      	adds	r3, r7, r3
   18650:	781b      	ldrb	r3, [r3, #0]
   18652:	0018      	movs	r0, r3
   18654:	4b6f      	ldr	r3, [pc, #444]	; (18814 <tcc_init+0x34c>)
   18656:	4798      	blx	r3
   18658:	0003      	movs	r3, r0
   1865a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   1865c:	2333      	movs	r3, #51	; 0x33
   1865e:	18fb      	adds	r3, r7, r3
   18660:	781b      	ldrb	r3, [r3, #0]
   18662:	2b00      	cmp	r3, #0
   18664:	d003      	beq.n	1866e <tcc_init+0x1a6>
		return status;
   18666:	2333      	movs	r3, #51	; 0x33
   18668:	18fb      	adds	r3, r7, r3
   1866a:	781b      	ldrb	r3, [r3, #0]
   1866c:	e10a      	b.n	18884 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1866e:	2300      	movs	r3, #0
   18670:	63fb      	str	r3, [r7, #60]	; 0x3c
   18672:	e009      	b.n	18688 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   18674:	68fa      	ldr	r2, [r7, #12]
   18676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18678:	009b      	lsls	r3, r3, #2
   1867a:	18d3      	adds	r3, r2, r3
   1867c:	3304      	adds	r3, #4
   1867e:	2200      	movs	r2, #0
   18680:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   18682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18684:	3301      	adds	r3, #1
   18686:	63fb      	str	r3, [r7, #60]	; 0x3c
   18688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1868a:	2b0b      	cmp	r3, #11
   1868c:	ddf2      	ble.n	18674 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   1868e:	68fb      	ldr	r3, [r7, #12]
   18690:	2200      	movs	r2, #0
   18692:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   18694:	68fb      	ldr	r3, [r7, #12]
   18696:	2200      	movs	r2, #0
   18698:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1869a:	233b      	movs	r3, #59	; 0x3b
   1869c:	18fb      	adds	r3, r7, r3
   1869e:	781a      	ldrb	r2, [r3, #0]
   186a0:	4b5d      	ldr	r3, [pc, #372]	; (18818 <tcc_init+0x350>)
   186a2:	0092      	lsls	r2, r2, #2
   186a4:	68f9      	ldr	r1, [r7, #12]
   186a6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   186a8:	68fb      	ldr	r3, [r7, #12]
   186aa:	68ba      	ldr	r2, [r7, #8]
   186ac:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   186ae:	687b      	ldr	r3, [r7, #4]
   186b0:	22a0      	movs	r2, #160	; 0xa0
   186b2:	5c99      	ldrb	r1, [r3, r2]
   186b4:	68fb      	ldr	r3, [r7, #12]
   186b6:	223c      	movs	r2, #60	; 0x3c
   186b8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   186ba:	2314      	movs	r3, #20
   186bc:	18fb      	adds	r3, r7, r3
   186be:	0018      	movs	r0, r3
   186c0:	4b56      	ldr	r3, [pc, #344]	; (1881c <tcc_init+0x354>)
   186c2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   186c4:	687b      	ldr	r3, [r7, #4]
   186c6:	7a9a      	ldrb	r2, [r3, #10]
   186c8:	2314      	movs	r3, #20
   186ca:	18fb      	adds	r3, r7, r3
   186cc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   186ce:	233b      	movs	r3, #59	; 0x3b
   186d0:	18fb      	adds	r3, r7, r3
   186d2:	781b      	ldrb	r3, [r3, #0]
   186d4:	4a52      	ldr	r2, [pc, #328]	; (18820 <tcc_init+0x358>)
   186d6:	5cd3      	ldrb	r3, [r2, r3]
   186d8:	2214      	movs	r2, #20
   186da:	18ba      	adds	r2, r7, r2
   186dc:	0011      	movs	r1, r2
   186de:	0018      	movs	r0, r3
   186e0:	4b50      	ldr	r3, [pc, #320]	; (18824 <tcc_init+0x35c>)
   186e2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   186e4:	233b      	movs	r3, #59	; 0x3b
   186e6:	18fb      	adds	r3, r7, r3
   186e8:	781b      	ldrb	r3, [r3, #0]
   186ea:	4a4d      	ldr	r2, [pc, #308]	; (18820 <tcc_init+0x358>)
   186ec:	5cd3      	ldrb	r3, [r2, r3]
   186ee:	0018      	movs	r0, r3
   186f0:	4b4d      	ldr	r3, [pc, #308]	; (18828 <tcc_init+0x360>)
   186f2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   186f4:	2300      	movs	r3, #0
   186f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   186f8:	e02d      	b.n	18756 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   186fa:	687a      	ldr	r2, [r7, #4]
   186fc:	2198      	movs	r1, #152	; 0x98
   186fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18700:	18d3      	adds	r3, r2, r3
   18702:	185b      	adds	r3, r3, r1
   18704:	781b      	ldrb	r3, [r3, #0]
   18706:	2201      	movs	r2, #1
   18708:	4053      	eors	r3, r2
   1870a:	b2db      	uxtb	r3, r3
   1870c:	2b00      	cmp	r3, #0
   1870e:	d11e      	bne.n	1874e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   18710:	2310      	movs	r3, #16
   18712:	18fb      	adds	r3, r7, r3
   18714:	0018      	movs	r0, r3
   18716:	4b45      	ldr	r3, [pc, #276]	; (1882c <tcc_init+0x364>)
   18718:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1871a:	687b      	ldr	r3, [r7, #4]
   1871c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1871e:	321e      	adds	r2, #30
   18720:	0092      	lsls	r2, r2, #2
   18722:	58d3      	ldr	r3, [r2, r3]
   18724:	b2da      	uxtb	r2, r3
   18726:	2310      	movs	r3, #16
   18728:	18fb      	adds	r3, r7, r3
   1872a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1872c:	2310      	movs	r3, #16
   1872e:	18fb      	adds	r3, r7, r3
   18730:	2201      	movs	r2, #1
   18732:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   18734:	687b      	ldr	r3, [r7, #4]
   18736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18738:	3216      	adds	r2, #22
   1873a:	0092      	lsls	r2, r2, #2
   1873c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   1873e:	b2db      	uxtb	r3, r3
   18740:	2210      	movs	r2, #16
   18742:	18ba      	adds	r2, r7, r2
   18744:	0011      	movs	r1, r2
   18746:	0018      	movs	r0, r3
   18748:	4b39      	ldr	r3, [pc, #228]	; (18830 <tcc_init+0x368>)
   1874a:	4798      	blx	r3
   1874c:	e000      	b.n	18750 <tcc_init+0x288>
			continue;
   1874e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   18750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18752:	3301      	adds	r3, #1
   18754:	63fb      	str	r3, [r7, #60]	; 0x3c
   18756:	233b      	movs	r3, #59	; 0x3b
   18758:	18fb      	adds	r3, r7, r3
   1875a:	781b      	ldrb	r3, [r3, #0]
   1875c:	4a28      	ldr	r2, [pc, #160]	; (18800 <tcc_init+0x338>)
   1875e:	5cd3      	ldrb	r3, [r2, r3]
   18760:	001a      	movs	r2, r3
   18762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18764:	429a      	cmp	r2, r3
   18766:	dcc8      	bgt.n	186fa <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   18768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1876a:	68bb      	ldr	r3, [r7, #8]
   1876c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1876e:	46c0      	nop			; (mov r8, r8)
   18770:	68bb      	ldr	r3, [r7, #8]
   18772:	689b      	ldr	r3, [r3, #8]
   18774:	2204      	movs	r2, #4
   18776:	4013      	ands	r3, r2
   18778:	d1fa      	bne.n	18770 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   1877a:	68bb      	ldr	r3, [r7, #8]
   1877c:	22ff      	movs	r2, #255	; 0xff
   1877e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   18780:	46c0      	nop			; (mov r8, r8)
   18782:	68bb      	ldr	r3, [r7, #8]
   18784:	689b      	ldr	r3, [r3, #8]
   18786:	2204      	movs	r2, #4
   18788:	4013      	ands	r3, r2
   1878a:	d1fa      	bne.n	18782 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   1878c:	232b      	movs	r3, #43	; 0x2b
   1878e:	18fb      	adds	r3, r7, r3
   18790:	781a      	ldrb	r2, [r3, #0]
   18792:	68bb      	ldr	r3, [r7, #8]
   18794:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   18796:	2320      	movs	r3, #32
   18798:	18fb      	adds	r3, r7, r3
   1879a:	681a      	ldr	r2, [r3, #0]
   1879c:	68bb      	ldr	r3, [r7, #8]
   1879e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   187a0:	2320      	movs	r3, #32
   187a2:	18fb      	adds	r3, r7, r3
   187a4:	685a      	ldr	r2, [r3, #4]
   187a6:	68bb      	ldr	r3, [r7, #8]
   187a8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   187aa:	69fa      	ldr	r2, [r7, #28]
   187ac:	68bb      	ldr	r3, [r7, #8]
   187ae:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   187b0:	46c0      	nop			; (mov r8, r8)
   187b2:	68bb      	ldr	r3, [r7, #8]
   187b4:	689b      	ldr	r3, [r3, #8]
   187b6:	4a1f      	ldr	r2, [pc, #124]	; (18834 <tcc_init+0x36c>)
   187b8:	4013      	ands	r3, r2
   187ba:	d1fa      	bne.n	187b2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   187bc:	69ba      	ldr	r2, [r7, #24]
   187be:	68bb      	ldr	r3, [r7, #8]
   187c0:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   187c2:	46c0      	nop			; (mov r8, r8)
   187c4:	68bb      	ldr	r3, [r7, #8]
   187c6:	689b      	ldr	r3, [r3, #8]
   187c8:	2210      	movs	r2, #16
   187ca:	4013      	ands	r3, r2
   187cc:	d1fa      	bne.n	187c4 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   187ce:	687b      	ldr	r3, [r7, #4]
   187d0:	681a      	ldr	r2, [r3, #0]
   187d2:	68bb      	ldr	r3, [r7, #8]
   187d4:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   187d6:	46c0      	nop			; (mov r8, r8)
   187d8:	68bb      	ldr	r3, [r7, #8]
   187da:	689b      	ldr	r3, [r3, #8]
   187dc:	4a16      	ldr	r2, [pc, #88]	; (18838 <tcc_init+0x370>)
   187de:	4013      	ands	r3, r2
   187e0:	d1fa      	bne.n	187d8 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   187e2:	687b      	ldr	r3, [r7, #4]
   187e4:	685a      	ldr	r2, [r3, #4]
   187e6:	68bb      	ldr	r3, [r7, #8]
   187e8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   187ea:	2300      	movs	r3, #0
   187ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   187ee:	e03f      	b.n	18870 <tcc_init+0x3a8>
   187f0:	00017e31 	.word	0x00017e31
   187f4:	00028318 	.word	0x00028318
   187f8:	00017dad 	.word	0x00017dad
   187fc:	00028324 	.word	0x00028324
   18800:	00028334 	.word	0x00028334
   18804:	0001813d 	.word	0x0001813d
   18808:	000181e1 	.word	0x000181e1
   1880c:	0001823d 	.word	0x0001823d
   18810:	00018359 	.word	0x00018359
   18814:	00018431 	.word	0x00018431
   18818:	20005d04 	.word	0x20005d04
   1881c:	00017d95 	.word	0x00017d95
   18820:	00028314 	.word	0x00028314
   18824:	000179ad 	.word	0x000179ad
   18828:	000179f1 	.word	0x000179f1
   1882c:	00017e09 	.word	0x00017e09
   18830:	00017d0d 	.word	0x00017d0d
   18834:	00020040 	.word	0x00020040
   18838:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   1883c:	46c0      	nop			; (mov r8, r8)
   1883e:	68bb      	ldr	r3, [r7, #8]
   18840:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   18842:	4912      	ldr	r1, [pc, #72]	; (1888c <tcc_init+0x3c4>)
   18844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18846:	4091      	lsls	r1, r2
   18848:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   1884a:	4013      	ands	r3, r2
   1884c:	d1f7      	bne.n	1883e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   1884e:	687a      	ldr	r2, [r7, #4]
   18850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18852:	3306      	adds	r3, #6
   18854:	009b      	lsls	r3, r3, #2
   18856:	18d3      	adds	r3, r2, r3
   18858:	3304      	adds	r3, #4
   1885a:	681a      	ldr	r2, [r3, #0]
   1885c:	68b9      	ldr	r1, [r7, #8]
   1885e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18860:	3310      	adds	r3, #16
   18862:	009b      	lsls	r3, r3, #2
   18864:	18cb      	adds	r3, r1, r3
   18866:	3304      	adds	r3, #4
   18868:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1886a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1886c:	3301      	adds	r3, #1
   1886e:	63fb      	str	r3, [r7, #60]	; 0x3c
   18870:	233b      	movs	r3, #59	; 0x3b
   18872:	18fb      	adds	r3, r7, r3
   18874:	781b      	ldrb	r3, [r3, #0]
   18876:	4a06      	ldr	r2, [pc, #24]	; (18890 <tcc_init+0x3c8>)
   18878:	5cd3      	ldrb	r3, [r2, r3]
   1887a:	001a      	movs	r2, r3
   1887c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1887e:	429a      	cmp	r2, r3
   18880:	dcdc      	bgt.n	1883c <tcc_init+0x374>
	}

	return STATUS_OK;
   18882:	2300      	movs	r3, #0
}
   18884:	0018      	movs	r0, r3
   18886:	46bd      	mov	sp, r7
   18888:	b011      	add	sp, #68	; 0x44
   1888a:	bd90      	pop	{r4, r7, pc}
   1888c:	00080100 	.word	0x00080100
   18890:	00028330 	.word	0x00028330

00018894 <system_interrupt_enable>:
{
   18894:	b580      	push	{r7, lr}
   18896:	b082      	sub	sp, #8
   18898:	af00      	add	r7, sp, #0
   1889a:	0002      	movs	r2, r0
   1889c:	1dfb      	adds	r3, r7, #7
   1889e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   188a0:	4b06      	ldr	r3, [pc, #24]	; (188bc <system_interrupt_enable+0x28>)
   188a2:	1dfa      	adds	r2, r7, #7
   188a4:	7812      	ldrb	r2, [r2, #0]
   188a6:	0011      	movs	r1, r2
   188a8:	221f      	movs	r2, #31
   188aa:	400a      	ands	r2, r1
   188ac:	2101      	movs	r1, #1
   188ae:	4091      	lsls	r1, r2
   188b0:	000a      	movs	r2, r1
   188b2:	601a      	str	r2, [r3, #0]
}
   188b4:	46c0      	nop			; (mov r8, r8)
   188b6:	46bd      	mov	sp, r7
   188b8:	b002      	add	sp, #8
   188ba:	bd80      	pop	{r7, pc}
   188bc:	e000e100 	.word	0xe000e100

000188c0 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   188c0:	b580      	push	{r7, lr}
   188c2:	b082      	sub	sp, #8
   188c4:	af00      	add	r7, sp, #0
   188c6:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   188c8:	4a04      	ldr	r2, [pc, #16]	; (188dc <_tcc_interrupt_get_interrupt_vector+0x1c>)
   188ca:	687b      	ldr	r3, [r7, #4]
   188cc:	18d3      	adds	r3, r2, r3
   188ce:	781b      	ldrb	r3, [r3, #0]
   188d0:	b25b      	sxtb	r3, r3
}
   188d2:	0018      	movs	r0, r3
   188d4:	46bd      	mov	sp, r7
   188d6:	b002      	add	sp, #8
   188d8:	bd80      	pop	{r7, pc}
   188da:	46c0      	nop			; (mov r8, r8)
   188dc:	20000128 	.word	0x20000128

000188e0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   188e0:	b580      	push	{r7, lr}
   188e2:	b084      	sub	sp, #16
   188e4:	af00      	add	r7, sp, #0
   188e6:	60f8      	str	r0, [r7, #12]
   188e8:	60b9      	str	r1, [r7, #8]
   188ea:	1dfb      	adds	r3, r7, #7
   188ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   188ee:	1dfb      	adds	r3, r7, #7
   188f0:	781b      	ldrb	r3, [r3, #0]
   188f2:	68fa      	ldr	r2, [r7, #12]
   188f4:	009b      	lsls	r3, r3, #2
   188f6:	18d3      	adds	r3, r2, r3
   188f8:	3304      	adds	r3, #4
   188fa:	68ba      	ldr	r2, [r7, #8]
   188fc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   188fe:	68fb      	ldr	r3, [r7, #12]
   18900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   18902:	1dfb      	adds	r3, r7, #7
   18904:	7819      	ldrb	r1, [r3, #0]
   18906:	4b05      	ldr	r3, [pc, #20]	; (1891c <tcc_register_callback+0x3c>)
   18908:	0089      	lsls	r1, r1, #2
   1890a:	58cb      	ldr	r3, [r1, r3]
   1890c:	431a      	orrs	r2, r3
   1890e:	68fb      	ldr	r3, [r7, #12]
   18910:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   18912:	2300      	movs	r3, #0
}
   18914:	0018      	movs	r0, r3
   18916:	46bd      	mov	sp, r7
   18918:	b004      	add	sp, #16
   1891a:	bd80      	pop	{r7, pc}
   1891c:	00028338 	.word	0x00028338

00018920 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   18920:	b580      	push	{r7, lr}
   18922:	b082      	sub	sp, #8
   18924:	af00      	add	r7, sp, #0
   18926:	6078      	str	r0, [r7, #4]
   18928:	000a      	movs	r2, r1
   1892a:	1cfb      	adds	r3, r7, #3
   1892c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1892e:	687b      	ldr	r3, [r7, #4]
   18930:	681b      	ldr	r3, [r3, #0]
   18932:	0018      	movs	r0, r3
   18934:	4b0f      	ldr	r3, [pc, #60]	; (18974 <tcc_enable_callback+0x54>)
   18936:	4798      	blx	r3
   18938:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   1893a:	0018      	movs	r0, r3
   1893c:	4b0e      	ldr	r3, [pc, #56]	; (18978 <tcc_enable_callback+0x58>)
   1893e:	4798      	blx	r3
   18940:	0003      	movs	r3, r0
   18942:	0018      	movs	r0, r3
   18944:	4b0d      	ldr	r3, [pc, #52]	; (1897c <tcc_enable_callback+0x5c>)
   18946:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   18948:	687b      	ldr	r3, [r7, #4]
   1894a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1894c:	1cfb      	adds	r3, r7, #3
   1894e:	7819      	ldrb	r1, [r3, #0]
   18950:	4b0b      	ldr	r3, [pc, #44]	; (18980 <tcc_enable_callback+0x60>)
   18952:	0089      	lsls	r1, r1, #2
   18954:	58cb      	ldr	r3, [r1, r3]
   18956:	431a      	orrs	r2, r3
   18958:	687b      	ldr	r3, [r7, #4]
   1895a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1895c:	687b      	ldr	r3, [r7, #4]
   1895e:	681b      	ldr	r3, [r3, #0]
   18960:	1cfa      	adds	r2, r7, #3
   18962:	7811      	ldrb	r1, [r2, #0]
   18964:	4a06      	ldr	r2, [pc, #24]	; (18980 <tcc_enable_callback+0x60>)
   18966:	0089      	lsls	r1, r1, #2
   18968:	588a      	ldr	r2, [r1, r2]
   1896a:	629a      	str	r2, [r3, #40]	; 0x28
}
   1896c:	46c0      	nop			; (mov r8, r8)
   1896e:	46bd      	mov	sp, r7
   18970:	b002      	add	sp, #8
   18972:	bd80      	pop	{r7, pc}
   18974:	00017e31 	.word	0x00017e31
   18978:	000188c1 	.word	0x000188c1
   1897c:	00018895 	.word	0x00018895
   18980:	00028338 	.word	0x00028338

00018984 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   18984:	b580      	push	{r7, lr}
   18986:	af00      	add	r7, sp, #0
   18988:	2000      	movs	r0, #0
   1898a:	4b02      	ldr	r3, [pc, #8]	; (18994 <TCC0_Handler+0x10>)
   1898c:	4798      	blx	r3
   1898e:	46c0      	nop			; (mov r8, r8)
   18990:	46bd      	mov	sp, r7
   18992:	bd80      	pop	{r7, pc}
   18994:	000189c1 	.word	0x000189c1

00018998 <TCC1_Handler>:
   18998:	b580      	push	{r7, lr}
   1899a:	af00      	add	r7, sp, #0
   1899c:	2001      	movs	r0, #1
   1899e:	4b02      	ldr	r3, [pc, #8]	; (189a8 <TCC1_Handler+0x10>)
   189a0:	4798      	blx	r3
   189a2:	46c0      	nop			; (mov r8, r8)
   189a4:	46bd      	mov	sp, r7
   189a6:	bd80      	pop	{r7, pc}
   189a8:	000189c1 	.word	0x000189c1

000189ac <TCC2_Handler>:
   189ac:	b580      	push	{r7, lr}
   189ae:	af00      	add	r7, sp, #0
   189b0:	2002      	movs	r0, #2
   189b2:	4b02      	ldr	r3, [pc, #8]	; (189bc <TCC2_Handler+0x10>)
   189b4:	4798      	blx	r3
   189b6:	46c0      	nop			; (mov r8, r8)
   189b8:	46bd      	mov	sp, r7
   189ba:	bd80      	pop	{r7, pc}
   189bc:	000189c1 	.word	0x000189c1

000189c0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   189c0:	b580      	push	{r7, lr}
   189c2:	b086      	sub	sp, #24
   189c4:	af00      	add	r7, sp, #0
   189c6:	0002      	movs	r2, r0
   189c8:	1dfb      	adds	r3, r7, #7
   189ca:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   189cc:	1dfb      	adds	r3, r7, #7
   189ce:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   189d0:	4b18      	ldr	r3, [pc, #96]	; (18a34 <_tcc_interrupt_handler+0x74>)
   189d2:	0092      	lsls	r2, r2, #2
   189d4:	58d3      	ldr	r3, [r2, r3]
   189d6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   189d8:	693b      	ldr	r3, [r7, #16]
   189da:	681b      	ldr	r3, [r3, #0]
   189dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   189de:	693b      	ldr	r3, [r7, #16]
   189e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   189e2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   189e4:	693b      	ldr	r3, [r7, #16]
   189e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   189e8:	4013      	ands	r3, r2
   189ea:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   189ec:	2300      	movs	r3, #0
   189ee:	617b      	str	r3, [r7, #20]
   189f0:	e019      	b.n	18a26 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   189f2:	4b11      	ldr	r3, [pc, #68]	; (18a38 <_tcc_interrupt_handler+0x78>)
   189f4:	697a      	ldr	r2, [r7, #20]
   189f6:	0092      	lsls	r2, r2, #2
   189f8:	58d3      	ldr	r3, [r2, r3]
   189fa:	68fa      	ldr	r2, [r7, #12]
   189fc:	4013      	ands	r3, r2
   189fe:	d00f      	beq.n	18a20 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   18a00:	693a      	ldr	r2, [r7, #16]
   18a02:	697b      	ldr	r3, [r7, #20]
   18a04:	009b      	lsls	r3, r3, #2
   18a06:	18d3      	adds	r3, r2, r3
   18a08:	3304      	adds	r3, #4
   18a0a:	681b      	ldr	r3, [r3, #0]
   18a0c:	693a      	ldr	r2, [r7, #16]
   18a0e:	0010      	movs	r0, r2
   18a10:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   18a12:	693b      	ldr	r3, [r7, #16]
   18a14:	681b      	ldr	r3, [r3, #0]
   18a16:	4a08      	ldr	r2, [pc, #32]	; (18a38 <_tcc_interrupt_handler+0x78>)
   18a18:	6979      	ldr	r1, [r7, #20]
   18a1a:	0089      	lsls	r1, r1, #2
   18a1c:	588a      	ldr	r2, [r1, r2]
   18a1e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   18a20:	697b      	ldr	r3, [r7, #20]
   18a22:	3301      	adds	r3, #1
   18a24:	617b      	str	r3, [r7, #20]
   18a26:	697b      	ldr	r3, [r7, #20]
   18a28:	2b0b      	cmp	r3, #11
   18a2a:	dde2      	ble.n	189f2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   18a2c:	46c0      	nop			; (mov r8, r8)
   18a2e:	46bd      	mov	sp, r7
   18a30:	b006      	add	sp, #24
   18a32:	bd80      	pop	{r7, pc}
   18a34:	20005d04 	.word	0x20005d04
   18a38:	00028338 	.word	0x00028338

00018a3c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   18a3c:	b580      	push	{r7, lr}
   18a3e:	b082      	sub	sp, #8
   18a40:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   18a42:	4b2f      	ldr	r3, [pc, #188]	; (18b00 <Reset_Handler+0xc4>)
   18a44:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   18a46:	4b2f      	ldr	r3, [pc, #188]	; (18b04 <Reset_Handler+0xc8>)
   18a48:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   18a4a:	687a      	ldr	r2, [r7, #4]
   18a4c:	683b      	ldr	r3, [r7, #0]
   18a4e:	429a      	cmp	r2, r3
   18a50:	d00c      	beq.n	18a6c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   18a52:	e007      	b.n	18a64 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   18a54:	683b      	ldr	r3, [r7, #0]
   18a56:	1d1a      	adds	r2, r3, #4
   18a58:	603a      	str	r2, [r7, #0]
   18a5a:	687a      	ldr	r2, [r7, #4]
   18a5c:	1d11      	adds	r1, r2, #4
   18a5e:	6079      	str	r1, [r7, #4]
   18a60:	6812      	ldr	r2, [r2, #0]
   18a62:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   18a64:	683a      	ldr	r2, [r7, #0]
   18a66:	4b28      	ldr	r3, [pc, #160]	; (18b08 <Reset_Handler+0xcc>)
   18a68:	429a      	cmp	r2, r3
   18a6a:	d3f3      	bcc.n	18a54 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   18a6c:	4b27      	ldr	r3, [pc, #156]	; (18b0c <Reset_Handler+0xd0>)
   18a6e:	603b      	str	r3, [r7, #0]
   18a70:	e004      	b.n	18a7c <Reset_Handler+0x40>
                *pDest++ = 0;
   18a72:	683b      	ldr	r3, [r7, #0]
   18a74:	1d1a      	adds	r2, r3, #4
   18a76:	603a      	str	r2, [r7, #0]
   18a78:	2200      	movs	r2, #0
   18a7a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   18a7c:	683a      	ldr	r2, [r7, #0]
   18a7e:	4b24      	ldr	r3, [pc, #144]	; (18b10 <Reset_Handler+0xd4>)
   18a80:	429a      	cmp	r2, r3
   18a82:	d3f6      	bcc.n	18a72 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   18a84:	4b23      	ldr	r3, [pc, #140]	; (18b14 <Reset_Handler+0xd8>)
   18a86:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   18a88:	4b23      	ldr	r3, [pc, #140]	; (18b18 <Reset_Handler+0xdc>)
   18a8a:	687a      	ldr	r2, [r7, #4]
   18a8c:	21ff      	movs	r1, #255	; 0xff
   18a8e:	438a      	bics	r2, r1
   18a90:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   18a92:	4a22      	ldr	r2, [pc, #136]	; (18b1c <Reset_Handler+0xe0>)
   18a94:	2390      	movs	r3, #144	; 0x90
   18a96:	005b      	lsls	r3, r3, #1
   18a98:	2102      	movs	r1, #2
   18a9a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   18a9c:	4a20      	ldr	r2, [pc, #128]	; (18b20 <Reset_Handler+0xe4>)
   18a9e:	78d3      	ldrb	r3, [r2, #3]
   18aa0:	2103      	movs	r1, #3
   18aa2:	438b      	bics	r3, r1
   18aa4:	1c19      	adds	r1, r3, #0
   18aa6:	2302      	movs	r3, #2
   18aa8:	430b      	orrs	r3, r1
   18aaa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   18aac:	4a1c      	ldr	r2, [pc, #112]	; (18b20 <Reset_Handler+0xe4>)
   18aae:	78d3      	ldrb	r3, [r2, #3]
   18ab0:	210c      	movs	r1, #12
   18ab2:	438b      	bics	r3, r1
   18ab4:	1c19      	adds	r1, r3, #0
   18ab6:	2308      	movs	r3, #8
   18ab8:	430b      	orrs	r3, r1
   18aba:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   18abc:	4a19      	ldr	r2, [pc, #100]	; (18b24 <Reset_Handler+0xe8>)
   18abe:	7b93      	ldrb	r3, [r2, #14]
   18ac0:	2130      	movs	r1, #48	; 0x30
   18ac2:	438b      	bics	r3, r1
   18ac4:	1c19      	adds	r1, r3, #0
   18ac6:	2320      	movs	r3, #32
   18ac8:	430b      	orrs	r3, r1
   18aca:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   18acc:	4a15      	ldr	r2, [pc, #84]	; (18b24 <Reset_Handler+0xe8>)
   18ace:	7b93      	ldrb	r3, [r2, #14]
   18ad0:	210c      	movs	r1, #12
   18ad2:	438b      	bics	r3, r1
   18ad4:	1c19      	adds	r1, r3, #0
   18ad6:	2308      	movs	r3, #8
   18ad8:	430b      	orrs	r3, r1
   18ada:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   18adc:	4a11      	ldr	r2, [pc, #68]	; (18b24 <Reset_Handler+0xe8>)
   18ade:	7b93      	ldrb	r3, [r2, #14]
   18ae0:	2103      	movs	r1, #3
   18ae2:	438b      	bics	r3, r1
   18ae4:	1c19      	adds	r1, r3, #0
   18ae6:	2302      	movs	r3, #2
   18ae8:	430b      	orrs	r3, r1
   18aea:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   18aec:	4a0e      	ldr	r2, [pc, #56]	; (18b28 <Reset_Handler+0xec>)
   18aee:	6853      	ldr	r3, [r2, #4]
   18af0:	2180      	movs	r1, #128	; 0x80
   18af2:	430b      	orrs	r3, r1
   18af4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   18af6:	4b0d      	ldr	r3, [pc, #52]	; (18b2c <Reset_Handler+0xf0>)
   18af8:	4798      	blx	r3

        /* Branch to main function */
        main();
   18afa:	4b0d      	ldr	r3, [pc, #52]	; (18b30 <Reset_Handler+0xf4>)
   18afc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   18afe:	e7fe      	b.n	18afe <Reset_Handler+0xc2>
   18b00:	0002907c 	.word	0x0002907c
   18b04:	20000000 	.word	0x20000000
   18b08:	20000300 	.word	0x20000300
   18b0c:	20000300 	.word	0x20000300
   18b10:	20005d34 	.word	0x20005d34
   18b14:	00000000 	.word	0x00000000
   18b18:	e000ed00 	.word	0xe000ed00
   18b1c:	41007000 	.word	0x41007000
   18b20:	41005000 	.word	0x41005000
   18b24:	41004800 	.word	0x41004800
   18b28:	41004000 	.word	0x41004000
   18b2c:	00022d15 	.word	0x00022d15
   18b30:	00020271 	.word	0x00020271

00018b34 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   18b34:	b580      	push	{r7, lr}
   18b36:	af00      	add	r7, sp, #0
  __asm volatile (
   18b38:	2004      	movs	r0, #4
   18b3a:	4671      	mov	r1, lr
   18b3c:	4208      	tst	r0, r1
   18b3e:	d002      	beq.n	18b46 <_MSP>
   18b40:	f3ef 8009 	mrs	r0, PSP
   18b44:	e001      	b.n	18b4a <_HALT>

00018b46 <_MSP>:
   18b46:	f3ef 8008 	mrs	r0, MSP

00018b4a <_HALT>:
   18b4a:	6941      	ldr	r1, [r0, #20]
   18b4c:	e004      	b.n	18b58 <HardFault_HandlerC>
   18b4e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   18b50:	46c0      	nop			; (mov r8, r8)
   18b52:	46bd      	mov	sp, r7
   18b54:	bd80      	pop	{r7, pc}
	...

00018b58 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   18b58:	b580      	push	{r7, lr}
   18b5a:	b090      	sub	sp, #64	; 0x40
   18b5c:	af00      	add	r7, sp, #0
   18b5e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   18b60:	687b      	ldr	r3, [r7, #4]
   18b62:	681b      	ldr	r3, [r3, #0]
   18b64:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   18b66:	687b      	ldr	r3, [r7, #4]
   18b68:	685b      	ldr	r3, [r3, #4]
   18b6a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   18b6c:	687b      	ldr	r3, [r7, #4]
   18b6e:	689b      	ldr	r3, [r3, #8]
   18b70:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   18b72:	687b      	ldr	r3, [r7, #4]
   18b74:	68db      	ldr	r3, [r3, #12]
   18b76:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   18b78:	687b      	ldr	r3, [r7, #4]
   18b7a:	691b      	ldr	r3, [r3, #16]
   18b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   18b7e:	687b      	ldr	r3, [r7, #4]
   18b80:	695b      	ldr	r3, [r3, #20]
   18b82:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   18b84:	687b      	ldr	r3, [r7, #4]
   18b86:	699b      	ldr	r3, [r3, #24]
   18b88:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   18b8a:	687b      	ldr	r3, [r7, #4]
   18b8c:	69db      	ldr	r3, [r3, #28]
   18b8e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   18b90:	4b0b      	ldr	r3, [pc, #44]	; (18bc0 <HardFault_HandlerC+0x68>)
   18b92:	681b      	ldr	r3, [r3, #0]
   18b94:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   18b96:	4b0b      	ldr	r3, [pc, #44]	; (18bc4 <HardFault_HandlerC+0x6c>)
   18b98:	681b      	ldr	r3, [r3, #0]
   18b9a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   18b9c:	4b0a      	ldr	r3, [pc, #40]	; (18bc8 <HardFault_HandlerC+0x70>)
   18b9e:	681b      	ldr	r3, [r3, #0]
   18ba0:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   18ba2:	4b0a      	ldr	r3, [pc, #40]	; (18bcc <HardFault_HandlerC+0x74>)
   18ba4:	681b      	ldr	r3, [r3, #0]
   18ba6:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   18ba8:	4b09      	ldr	r3, [pc, #36]	; (18bd0 <HardFault_HandlerC+0x78>)
   18baa:	681b      	ldr	r3, [r3, #0]
   18bac:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   18bae:	4b09      	ldr	r3, [pc, #36]	; (18bd4 <HardFault_HandlerC+0x7c>)
   18bb0:	681b      	ldr	r3, [r3, #0]
   18bb2:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   18bb4:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   18bb6:	46c0      	nop			; (mov r8, r8)
   18bb8:	46bd      	mov	sp, r7
   18bba:	b010      	add	sp, #64	; 0x40
   18bbc:	bd80      	pop	{r7, pc}
   18bbe:	46c0      	nop			; (mov r8, r8)
   18bc0:	e000ed28 	.word	0xe000ed28
   18bc4:	e000ed2c 	.word	0xe000ed2c
   18bc8:	e000ed30 	.word	0xe000ed30
   18bcc:	e000ed3c 	.word	0xe000ed3c
   18bd0:	e000ed34 	.word	0xe000ed34
   18bd4:	e000ed38 	.word	0xe000ed38

00018bd8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   18bd8:	b580      	push	{r7, lr}
   18bda:	b086      	sub	sp, #24
   18bdc:	af00      	add	r7, sp, #0
   18bde:	60f8      	str	r0, [r7, #12]
   18be0:	60b9      	str	r1, [r7, #8]
   18be2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   18be4:	2300      	movs	r3, #0
   18be6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   18be8:	68fb      	ldr	r3, [r7, #12]
   18bea:	2b00      	cmp	r3, #0
   18bec:	d012      	beq.n	18c14 <_read+0x3c>
		return -1;
   18bee:	2301      	movs	r3, #1
   18bf0:	425b      	negs	r3, r3
   18bf2:	e013      	b.n	18c1c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   18bf4:	4b0b      	ldr	r3, [pc, #44]	; (18c24 <_read+0x4c>)
   18bf6:	681a      	ldr	r2, [r3, #0]
   18bf8:	4b0b      	ldr	r3, [pc, #44]	; (18c28 <_read+0x50>)
   18bfa:	681b      	ldr	r3, [r3, #0]
   18bfc:	68b9      	ldr	r1, [r7, #8]
   18bfe:	0018      	movs	r0, r3
   18c00:	4790      	blx	r2
		ptr++;
   18c02:	68bb      	ldr	r3, [r7, #8]
   18c04:	3301      	adds	r3, #1
   18c06:	60bb      	str	r3, [r7, #8]
		nChars++;
   18c08:	697b      	ldr	r3, [r7, #20]
   18c0a:	3301      	adds	r3, #1
   18c0c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   18c0e:	687b      	ldr	r3, [r7, #4]
   18c10:	3b01      	subs	r3, #1
   18c12:	607b      	str	r3, [r7, #4]
   18c14:	687b      	ldr	r3, [r7, #4]
   18c16:	2b00      	cmp	r3, #0
   18c18:	dcec      	bgt.n	18bf4 <_read+0x1c>
	}
	return nChars;
   18c1a:	697b      	ldr	r3, [r7, #20]
}
   18c1c:	0018      	movs	r0, r3
   18c1e:	46bd      	mov	sp, r7
   18c20:	b006      	add	sp, #24
   18c22:	bd80      	pop	{r7, pc}
   18c24:	20005d10 	.word	0x20005d10
   18c28:	20005d18 	.word	0x20005d18

00018c2c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   18c2c:	b580      	push	{r7, lr}
   18c2e:	b086      	sub	sp, #24
   18c30:	af00      	add	r7, sp, #0
   18c32:	60f8      	str	r0, [r7, #12]
   18c34:	60b9      	str	r1, [r7, #8]
   18c36:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   18c38:	2300      	movs	r3, #0
   18c3a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   18c3c:	68fb      	ldr	r3, [r7, #12]
   18c3e:	2b01      	cmp	r3, #1
   18c40:	d01d      	beq.n	18c7e <_write+0x52>
   18c42:	68fb      	ldr	r3, [r7, #12]
   18c44:	2b02      	cmp	r3, #2
   18c46:	d01a      	beq.n	18c7e <_write+0x52>
   18c48:	68fb      	ldr	r3, [r7, #12]
   18c4a:	2b03      	cmp	r3, #3
   18c4c:	d017      	beq.n	18c7e <_write+0x52>
		return -1;
   18c4e:	2301      	movs	r3, #1
   18c50:	425b      	negs	r3, r3
   18c52:	e018      	b.n	18c86 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   18c54:	4b0e      	ldr	r3, [pc, #56]	; (18c90 <_write+0x64>)
   18c56:	681a      	ldr	r2, [r3, #0]
   18c58:	4b0e      	ldr	r3, [pc, #56]	; (18c94 <_write+0x68>)
   18c5a:	6818      	ldr	r0, [r3, #0]
   18c5c:	68bb      	ldr	r3, [r7, #8]
   18c5e:	1c59      	adds	r1, r3, #1
   18c60:	60b9      	str	r1, [r7, #8]
   18c62:	781b      	ldrb	r3, [r3, #0]
   18c64:	0019      	movs	r1, r3
   18c66:	4790      	blx	r2
   18c68:	1e03      	subs	r3, r0, #0
   18c6a:	da02      	bge.n	18c72 <_write+0x46>
			return -1;
   18c6c:	2301      	movs	r3, #1
   18c6e:	425b      	negs	r3, r3
   18c70:	e009      	b.n	18c86 <_write+0x5a>
		}
		++nChars;
   18c72:	697b      	ldr	r3, [r7, #20]
   18c74:	3301      	adds	r3, #1
   18c76:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   18c78:	687b      	ldr	r3, [r7, #4]
   18c7a:	3b01      	subs	r3, #1
   18c7c:	607b      	str	r3, [r7, #4]
   18c7e:	687b      	ldr	r3, [r7, #4]
   18c80:	2b00      	cmp	r3, #0
   18c82:	d1e7      	bne.n	18c54 <_write+0x28>
	}
	return nChars;
   18c84:	697b      	ldr	r3, [r7, #20]
}
   18c86:	0018      	movs	r0, r3
   18c88:	46bd      	mov	sp, r7
   18c8a:	b006      	add	sp, #24
   18c8c:	bd80      	pop	{r7, pc}
   18c8e:	46c0      	nop			; (mov r8, r8)
   18c90:	20005d14 	.word	0x20005d14
   18c94:	20005d18 	.word	0x20005d18

00018c98 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   18c98:	b580      	push	{r7, lr}
   18c9a:	b084      	sub	sp, #16
   18c9c:	af00      	add	r7, sp, #0
   18c9e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   18ca0:	4b0a      	ldr	r3, [pc, #40]	; (18ccc <_sbrk+0x34>)
   18ca2:	681b      	ldr	r3, [r3, #0]
   18ca4:	2b00      	cmp	r3, #0
   18ca6:	d102      	bne.n	18cae <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   18ca8:	4b08      	ldr	r3, [pc, #32]	; (18ccc <_sbrk+0x34>)
   18caa:	4a09      	ldr	r2, [pc, #36]	; (18cd0 <_sbrk+0x38>)
   18cac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   18cae:	4b07      	ldr	r3, [pc, #28]	; (18ccc <_sbrk+0x34>)
   18cb0:	681b      	ldr	r3, [r3, #0]
   18cb2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   18cb4:	4b05      	ldr	r3, [pc, #20]	; (18ccc <_sbrk+0x34>)
   18cb6:	681a      	ldr	r2, [r3, #0]
   18cb8:	687b      	ldr	r3, [r7, #4]
   18cba:	18d2      	adds	r2, r2, r3
   18cbc:	4b03      	ldr	r3, [pc, #12]	; (18ccc <_sbrk+0x34>)
   18cbe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   18cc0:	68fb      	ldr	r3, [r7, #12]
}
   18cc2:	0018      	movs	r0, r3
   18cc4:	46bd      	mov	sp, r7
   18cc6:	b004      	add	sp, #16
   18cc8:	bd80      	pop	{r7, pc}
   18cca:	46c0      	nop			; (mov r8, r8)
   18ccc:	20004384 	.word	0x20004384
   18cd0:	20007d38 	.word	0x20007d38

00018cd4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   18cd4:	b580      	push	{r7, lr}
   18cd6:	b082      	sub	sp, #8
   18cd8:	af00      	add	r7, sp, #0
   18cda:	6078      	str	r0, [r7, #4]
	return -1;
   18cdc:	2301      	movs	r3, #1
   18cde:	425b      	negs	r3, r3
}
   18ce0:	0018      	movs	r0, r3
   18ce2:	46bd      	mov	sp, r7
   18ce4:	b002      	add	sp, #8
   18ce6:	bd80      	pop	{r7, pc}

00018ce8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   18ce8:	b580      	push	{r7, lr}
   18cea:	b082      	sub	sp, #8
   18cec:	af00      	add	r7, sp, #0
   18cee:	6078      	str	r0, [r7, #4]
   18cf0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   18cf2:	683b      	ldr	r3, [r7, #0]
   18cf4:	2280      	movs	r2, #128	; 0x80
   18cf6:	0192      	lsls	r2, r2, #6
   18cf8:	605a      	str	r2, [r3, #4]

	return 0;
   18cfa:	2300      	movs	r3, #0
}
   18cfc:	0018      	movs	r0, r3
   18cfe:	46bd      	mov	sp, r7
   18d00:	b002      	add	sp, #8
   18d02:	bd80      	pop	{r7, pc}

00018d04 <_isatty>:

extern int _isatty(int file)
{
   18d04:	b580      	push	{r7, lr}
   18d06:	b082      	sub	sp, #8
   18d08:	af00      	add	r7, sp, #0
   18d0a:	6078      	str	r0, [r7, #4]
	return 1;
   18d0c:	2301      	movs	r3, #1
}
   18d0e:	0018      	movs	r0, r3
   18d10:	46bd      	mov	sp, r7
   18d12:	b002      	add	sp, #8
   18d14:	bd80      	pop	{r7, pc}

00018d16 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   18d16:	b580      	push	{r7, lr}
   18d18:	b084      	sub	sp, #16
   18d1a:	af00      	add	r7, sp, #0
   18d1c:	60f8      	str	r0, [r7, #12]
   18d1e:	60b9      	str	r1, [r7, #8]
   18d20:	607a      	str	r2, [r7, #4]
	return 0;
   18d22:	2300      	movs	r3, #0
}
   18d24:	0018      	movs	r0, r3
   18d26:	46bd      	mov	sp, r7
   18d28:	b004      	add	sp, #16
   18d2a:	bd80      	pop	{r7, pc}

00018d2c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   18d2c:	b580      	push	{r7, lr}
   18d2e:	b082      	sub	sp, #8
   18d30:	af00      	add	r7, sp, #0
   18d32:	6078      	str	r0, [r7, #4]
	time->second = 0;
   18d34:	687b      	ldr	r3, [r7, #4]
   18d36:	2200      	movs	r2, #0
   18d38:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   18d3a:	687b      	ldr	r3, [r7, #4]
   18d3c:	2200      	movs	r2, #0
   18d3e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   18d40:	687b      	ldr	r3, [r7, #4]
   18d42:	2200      	movs	r2, #0
   18d44:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   18d46:	687b      	ldr	r3, [r7, #4]
   18d48:	2200      	movs	r2, #0
   18d4a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   18d4c:	687b      	ldr	r3, [r7, #4]
   18d4e:	2201      	movs	r2, #1
   18d50:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   18d52:	687b      	ldr	r3, [r7, #4]
   18d54:	2201      	movs	r2, #1
   18d56:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   18d58:	687b      	ldr	r3, [r7, #4]
   18d5a:	22fa      	movs	r2, #250	; 0xfa
   18d5c:	00d2      	lsls	r2, r2, #3
   18d5e:	80da      	strh	r2, [r3, #6]
}
   18d60:	46c0      	nop			; (mov r8, r8)
   18d62:	46bd      	mov	sp, r7
   18d64:	b002      	add	sp, #8
   18d66:	bd80      	pop	{r7, pc}

00018d68 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   18d68:	b580      	push	{r7, lr}
   18d6a:	b086      	sub	sp, #24
   18d6c:	af00      	add	r7, sp, #0
   18d6e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   18d70:	230c      	movs	r3, #12
   18d72:	18fb      	adds	r3, r7, r3
   18d74:	0018      	movs	r0, r3
   18d76:	4b23      	ldr	r3, [pc, #140]	; (18e04 <rtc_calendar_get_config_defaults+0x9c>)
   18d78:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   18d7a:	687b      	ldr	r3, [r7, #4]
   18d7c:	22a0      	movs	r2, #160	; 0xa0
   18d7e:	0112      	lsls	r2, r2, #4
   18d80:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   18d82:	687b      	ldr	r3, [r7, #4]
   18d84:	2200      	movs	r2, #0
   18d86:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   18d88:	687b      	ldr	r3, [r7, #4]
   18d8a:	2200      	movs	r2, #0
   18d8c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   18d8e:	687b      	ldr	r3, [r7, #4]
   18d90:	2200      	movs	r2, #0
   18d92:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   18d94:	687b      	ldr	r3, [r7, #4]
   18d96:	22fa      	movs	r2, #250	; 0xfa
   18d98:	00d2      	lsls	r2, r2, #3
   18d9a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   18d9c:	2317      	movs	r3, #23
   18d9e:	18fb      	adds	r3, r7, r3
   18da0:	2200      	movs	r2, #0
   18da2:	701a      	strb	r2, [r3, #0]
   18da4:	e025      	b.n	18df2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   18da6:	2317      	movs	r3, #23
   18da8:	18fb      	adds	r3, r7, r3
   18daa:	781a      	ldrb	r2, [r3, #0]
   18dac:	6879      	ldr	r1, [r7, #4]
   18dae:	2008      	movs	r0, #8
   18db0:	0013      	movs	r3, r2
   18db2:	009b      	lsls	r3, r3, #2
   18db4:	189b      	adds	r3, r3, r2
   18db6:	005b      	lsls	r3, r3, #1
   18db8:	18cb      	adds	r3, r1, r3
   18dba:	181a      	adds	r2, r3, r0
   18dbc:	230c      	movs	r3, #12
   18dbe:	18fb      	adds	r3, r7, r3
   18dc0:	0010      	movs	r0, r2
   18dc2:	0019      	movs	r1, r3
   18dc4:	2308      	movs	r3, #8
   18dc6:	001a      	movs	r2, r3
   18dc8:	4b0f      	ldr	r3, [pc, #60]	; (18e08 <rtc_calendar_get_config_defaults+0xa0>)
   18dca:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   18dcc:	2317      	movs	r3, #23
   18dce:	18fb      	adds	r3, r7, r3
   18dd0:	781a      	ldrb	r2, [r3, #0]
   18dd2:	6879      	ldr	r1, [r7, #4]
   18dd4:	0013      	movs	r3, r2
   18dd6:	009b      	lsls	r3, r3, #2
   18dd8:	189b      	adds	r3, r3, r2
   18dda:	005b      	lsls	r3, r3, #1
   18ddc:	18cb      	adds	r3, r1, r3
   18dde:	3310      	adds	r3, #16
   18de0:	2206      	movs	r2, #6
   18de2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   18de4:	2317      	movs	r3, #23
   18de6:	18fb      	adds	r3, r7, r3
   18de8:	781a      	ldrb	r2, [r3, #0]
   18dea:	2317      	movs	r3, #23
   18dec:	18fb      	adds	r3, r7, r3
   18dee:	3201      	adds	r2, #1
   18df0:	701a      	strb	r2, [r3, #0]
   18df2:	2317      	movs	r3, #23
   18df4:	18fb      	adds	r3, r7, r3
   18df6:	781b      	ldrb	r3, [r3, #0]
   18df8:	2b00      	cmp	r3, #0
   18dfa:	d0d4      	beq.n	18da6 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   18dfc:	46c0      	nop			; (mov r8, r8)
   18dfe:	46bd      	mov	sp, r7
   18e00:	b006      	add	sp, #24
   18e02:	bd80      	pop	{r7, pc}
   18e04:	00018d2d 	.word	0x00018d2d
   18e08:	00022d85 	.word	0x00022d85

00018e0c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   18e0c:	b580      	push	{r7, lr}
   18e0e:	b088      	sub	sp, #32
   18e10:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   18e12:	230c      	movs	r3, #12
   18e14:	18fb      	adds	r3, r7, r3
   18e16:	0018      	movs	r0, r3
   18e18:	4b1a      	ldr	r3, [pc, #104]	; (18e84 <configure_rtc_calendar+0x78>)
   18e1a:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   18e1c:	1d3b      	adds	r3, r7, #4
   18e1e:	0018      	movs	r0, r3
   18e20:	4b19      	ldr	r3, [pc, #100]	; (18e88 <configure_rtc_calendar+0x7c>)
   18e22:	4798      	blx	r3
	init_time.year   = 2014;
   18e24:	1d3b      	adds	r3, r7, #4
   18e26:	4a19      	ldr	r2, [pc, #100]	; (18e8c <configure_rtc_calendar+0x80>)
   18e28:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   18e2a:	1d3b      	adds	r3, r7, #4
   18e2c:	2201      	movs	r2, #1
   18e2e:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   18e30:	1d3b      	adds	r3, r7, #4
   18e32:	2201      	movs	r2, #1
   18e34:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   18e36:	1d3b      	adds	r3, r7, #4
   18e38:	2200      	movs	r2, #0
   18e3a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   18e3c:	1d3b      	adds	r3, r7, #4
   18e3e:	2200      	movs	r2, #0
   18e40:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   18e42:	1d3b      	adds	r3, r7, #4
   18e44:	2204      	movs	r2, #4
   18e46:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   18e48:	230c      	movs	r3, #12
   18e4a:	18fb      	adds	r3, r7, r3
   18e4c:	2201      	movs	r2, #1
   18e4e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   18e50:	230c      	movs	r3, #12
   18e52:	18fb      	adds	r3, r7, r3
   18e54:	1d3a      	adds	r2, r7, #4
   18e56:	3308      	adds	r3, #8
   18e58:	ca03      	ldmia	r2!, {r0, r1}
   18e5a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   18e5c:	230c      	movs	r3, #12
   18e5e:	18fb      	adds	r3, r7, r3
   18e60:	2206      	movs	r2, #6
   18e62:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   18e64:	230c      	movs	r3, #12
   18e66:	18fa      	adds	r2, r7, r3
   18e68:	4909      	ldr	r1, [pc, #36]	; (18e90 <configure_rtc_calendar+0x84>)
   18e6a:	4b0a      	ldr	r3, [pc, #40]	; (18e94 <configure_rtc_calendar+0x88>)
   18e6c:	0018      	movs	r0, r3
   18e6e:	4b0a      	ldr	r3, [pc, #40]	; (18e98 <configure_rtc_calendar+0x8c>)
   18e70:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   18e72:	4b08      	ldr	r3, [pc, #32]	; (18e94 <configure_rtc_calendar+0x88>)
   18e74:	0018      	movs	r0, r3
   18e76:	4b09      	ldr	r3, [pc, #36]	; (18e9c <configure_rtc_calendar+0x90>)
   18e78:	4798      	blx	r3
}
   18e7a:	46c0      	nop			; (mov r8, r8)
   18e7c:	46bd      	mov	sp, r7
   18e7e:	b008      	add	sp, #32
   18e80:	bd80      	pop	{r7, pc}
   18e82:	46c0      	nop			; (mov r8, r8)
   18e84:	00018d69 	.word	0x00018d69
   18e88:	00018d2d 	.word	0x00018d2d
   18e8c:	000007de 	.word	0x000007de
   18e90:	40001400 	.word	0x40001400
   18e94:	20005d1c 	.word	0x20005d1c
   18e98:	00014949 	.word	0x00014949
   18e9c:	00014675 	.word	0x00014675

00018ea0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   18ea0:	b590      	push	{r4, r7, lr}
   18ea2:	b085      	sub	sp, #20
   18ea4:	af00      	add	r7, sp, #0
   18ea6:	0002      	movs	r2, r0
   18ea8:	1dfb      	adds	r3, r7, #7
   18eaa:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   18eac:	4b1a      	ldr	r3, [pc, #104]	; (18f18 <disk_initialize+0x78>)
   18eae:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   18eb0:	1dfb      	adds	r3, r7, #7
   18eb2:	781b      	ldrb	r3, [r3, #0]
   18eb4:	2b01      	cmp	r3, #1
   18eb6:	d901      	bls.n	18ebc <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   18eb8:	2301      	movs	r3, #1
   18eba:	e029      	b.n	18f10 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   18ebc:	2300      	movs	r3, #0
   18ebe:	60fb      	str	r3, [r7, #12]
   18ec0:	e010      	b.n	18ee4 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   18ec2:	230b      	movs	r3, #11
   18ec4:	18fc      	adds	r4, r7, r3
   18ec6:	1dfb      	adds	r3, r7, #7
   18ec8:	781b      	ldrb	r3, [r3, #0]
   18eca:	0018      	movs	r0, r3
   18ecc:	4b13      	ldr	r3, [pc, #76]	; (18f1c <disk_initialize+0x7c>)
   18ece:	4798      	blx	r3
   18ed0:	0003      	movs	r3, r0
   18ed2:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   18ed4:	230b      	movs	r3, #11
   18ed6:	18fb      	adds	r3, r7, r3
   18ed8:	781b      	ldrb	r3, [r3, #0]
   18eda:	2b03      	cmp	r3, #3
   18edc:	d106      	bne.n	18eec <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   18ede:	68fb      	ldr	r3, [r7, #12]
   18ee0:	3301      	adds	r3, #1
   18ee2:	60fb      	str	r3, [r7, #12]
   18ee4:	68fb      	ldr	r3, [r7, #12]
   18ee6:	2b01      	cmp	r3, #1
   18ee8:	ddeb      	ble.n	18ec2 <disk_initialize+0x22>
   18eea:	e000      	b.n	18eee <disk_initialize+0x4e>
			break;
   18eec:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   18eee:	230b      	movs	r3, #11
   18ef0:	18fb      	adds	r3, r7, r3
   18ef2:	781b      	ldrb	r3, [r3, #0]
   18ef4:	2b00      	cmp	r3, #0
   18ef6:	d001      	beq.n	18efc <disk_initialize+0x5c>
		return STA_NOINIT;
   18ef8:	2301      	movs	r3, #1
   18efa:	e009      	b.n	18f10 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   18efc:	1dfb      	adds	r3, r7, #7
   18efe:	781b      	ldrb	r3, [r3, #0]
   18f00:	0018      	movs	r0, r3
   18f02:	4b07      	ldr	r3, [pc, #28]	; (18f20 <disk_initialize+0x80>)
   18f04:	4798      	blx	r3
   18f06:	1e03      	subs	r3, r0, #0
   18f08:	d001      	beq.n	18f0e <disk_initialize+0x6e>
		return STA_PROTECT;
   18f0a:	2304      	movs	r3, #4
   18f0c:	e000      	b.n	18f10 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   18f0e:	2300      	movs	r3, #0
}
   18f10:	0018      	movs	r0, r3
   18f12:	46bd      	mov	sp, r7
   18f14:	b005      	add	sp, #20
   18f16:	bd90      	pop	{r4, r7, pc}
   18f18:	00018e0d 	.word	0x00018e0d
   18f1c:	00013b71 	.word	0x00013b71
   18f20:	00013c29 	.word	0x00013c29

00018f24 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   18f24:	b580      	push	{r7, lr}
   18f26:	b082      	sub	sp, #8
   18f28:	af00      	add	r7, sp, #0
   18f2a:	0002      	movs	r2, r0
   18f2c:	1dfb      	adds	r3, r7, #7
   18f2e:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   18f30:	1dfb      	adds	r3, r7, #7
   18f32:	781b      	ldrb	r3, [r3, #0]
   18f34:	0018      	movs	r0, r3
   18f36:	4b08      	ldr	r3, [pc, #32]	; (18f58 <disk_status+0x34>)
   18f38:	4798      	blx	r3
   18f3a:	1e03      	subs	r3, r0, #0
   18f3c:	d002      	beq.n	18f44 <disk_status+0x20>
   18f3e:	2b02      	cmp	r3, #2
   18f40:	d002      	beq.n	18f48 <disk_status+0x24>
   18f42:	e003      	b.n	18f4c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   18f44:	2300      	movs	r3, #0
   18f46:	e002      	b.n	18f4e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   18f48:	2303      	movs	r3, #3
   18f4a:	e000      	b.n	18f4e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   18f4c:	2301      	movs	r3, #1
	}
}
   18f4e:	0018      	movs	r0, r3
   18f50:	46bd      	mov	sp, r7
   18f52:	b002      	add	sp, #8
   18f54:	bd80      	pop	{r7, pc}
   18f56:	46c0      	nop			; (mov r8, r8)
   18f58:	00013b71 	.word	0x00013b71

00018f5c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   18f5c:	b590      	push	{r4, r7, lr}
   18f5e:	b089      	sub	sp, #36	; 0x24
   18f60:	af00      	add	r7, sp, #0
   18f62:	60b9      	str	r1, [r7, #8]
   18f64:	607a      	str	r2, [r7, #4]
   18f66:	0019      	movs	r1, r3
   18f68:	230f      	movs	r3, #15
   18f6a:	18fb      	adds	r3, r7, r3
   18f6c:	1c02      	adds	r2, r0, #0
   18f6e:	701a      	strb	r2, [r3, #0]
   18f70:	230e      	movs	r3, #14
   18f72:	18fb      	adds	r3, r7, r3
   18f74:	1c0a      	adds	r2, r1, #0
   18f76:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   18f78:	231b      	movs	r3, #27
   18f7a:	18fc      	adds	r4, r7, r3
   18f7c:	230f      	movs	r3, #15
   18f7e:	18fb      	adds	r3, r7, r3
   18f80:	781b      	ldrb	r3, [r3, #0]
   18f82:	0018      	movs	r0, r3
   18f84:	4b28      	ldr	r3, [pc, #160]	; (19028 <disk_read+0xcc>)
   18f86:	4798      	blx	r3
   18f88:	0003      	movs	r3, r0
   18f8a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   18f8c:	231b      	movs	r3, #27
   18f8e:	18fb      	adds	r3, r7, r3
   18f90:	781b      	ldrb	r3, [r3, #0]
   18f92:	2b00      	cmp	r3, #0
   18f94:	d101      	bne.n	18f9a <disk_read+0x3e>
		return RES_ERROR;
   18f96:	2301      	movs	r3, #1
   18f98:	e042      	b.n	19020 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   18f9a:	2314      	movs	r3, #20
   18f9c:	18fa      	adds	r2, r7, r3
   18f9e:	230f      	movs	r3, #15
   18fa0:	18fb      	adds	r3, r7, r3
   18fa2:	781b      	ldrb	r3, [r3, #0]
   18fa4:	0011      	movs	r1, r2
   18fa6:	0018      	movs	r0, r3
   18fa8:	4b20      	ldr	r3, [pc, #128]	; (1902c <disk_read+0xd0>)
   18faa:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   18fac:	230e      	movs	r3, #14
   18fae:	18fb      	adds	r3, r7, r3
   18fb0:	781b      	ldrb	r3, [r3, #0]
   18fb2:	221b      	movs	r2, #27
   18fb4:	18ba      	adds	r2, r7, r2
   18fb6:	7812      	ldrb	r2, [r2, #0]
   18fb8:	4353      	muls	r3, r2
   18fba:	001a      	movs	r2, r3
   18fbc:	687b      	ldr	r3, [r7, #4]
   18fbe:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   18fc0:	697b      	ldr	r3, [r7, #20]
   18fc2:	3301      	adds	r3, #1
   18fc4:	211b      	movs	r1, #27
   18fc6:	1879      	adds	r1, r7, r1
   18fc8:	7809      	ldrb	r1, [r1, #0]
   18fca:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   18fcc:	429a      	cmp	r2, r3
   18fce:	d901      	bls.n	18fd4 <disk_read+0x78>
		return RES_PARERR;
   18fd0:	2304      	movs	r3, #4
   18fd2:	e025      	b.n	19020 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   18fd4:	2300      	movs	r3, #0
   18fd6:	61fb      	str	r3, [r7, #28]
   18fd8:	e01b      	b.n	19012 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   18fda:	231b      	movs	r3, #27
   18fdc:	18fb      	adds	r3, r7, r3
   18fde:	781b      	ldrb	r3, [r3, #0]
   18fe0:	69fa      	ldr	r2, [r7, #28]
   18fe2:	435a      	muls	r2, r3
   18fe4:	687b      	ldr	r3, [r7, #4]
   18fe6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   18fe8:	231b      	movs	r3, #27
   18fea:	18fb      	adds	r3, r7, r3
   18fec:	781b      	ldrb	r3, [r3, #0]
   18fee:	69fa      	ldr	r2, [r7, #28]
   18ff0:	4353      	muls	r3, r2
   18ff2:	025b      	lsls	r3, r3, #9
   18ff4:	68ba      	ldr	r2, [r7, #8]
   18ff6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   18ff8:	230f      	movs	r3, #15
   18ffa:	18fb      	adds	r3, r7, r3
   18ffc:	781b      	ldrb	r3, [r3, #0]
   18ffe:	0018      	movs	r0, r3
   19000:	4b0b      	ldr	r3, [pc, #44]	; (19030 <disk_read+0xd4>)
   19002:	4798      	blx	r3
   19004:	1e03      	subs	r3, r0, #0
   19006:	d001      	beq.n	1900c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   19008:	2301      	movs	r3, #1
   1900a:	e009      	b.n	19020 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   1900c:	69fb      	ldr	r3, [r7, #28]
   1900e:	3301      	adds	r3, #1
   19010:	61fb      	str	r3, [r7, #28]
   19012:	230e      	movs	r3, #14
   19014:	18fb      	adds	r3, r7, r3
   19016:	781a      	ldrb	r2, [r3, #0]
   19018:	69fb      	ldr	r3, [r7, #28]
   1901a:	429a      	cmp	r2, r3
   1901c:	d8dd      	bhi.n	18fda <disk_read+0x7e>
		}
	}

	return RES_OK;
   1901e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   19020:	0018      	movs	r0, r3
   19022:	46bd      	mov	sp, r7
   19024:	b009      	add	sp, #36	; 0x24
   19026:	bd90      	pop	{r4, r7, pc}
   19028:	00013bfd 	.word	0x00013bfd
   1902c:	00013bb1 	.word	0x00013bb1
   19030:	00013c71 	.word	0x00013c71

00019034 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   19034:	b590      	push	{r4, r7, lr}
   19036:	b089      	sub	sp, #36	; 0x24
   19038:	af00      	add	r7, sp, #0
   1903a:	60b9      	str	r1, [r7, #8]
   1903c:	607a      	str	r2, [r7, #4]
   1903e:	0019      	movs	r1, r3
   19040:	230f      	movs	r3, #15
   19042:	18fb      	adds	r3, r7, r3
   19044:	1c02      	adds	r2, r0, #0
   19046:	701a      	strb	r2, [r3, #0]
   19048:	230e      	movs	r3, #14
   1904a:	18fb      	adds	r3, r7, r3
   1904c:	1c0a      	adds	r2, r1, #0
   1904e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   19050:	231b      	movs	r3, #27
   19052:	18fc      	adds	r4, r7, r3
   19054:	230f      	movs	r3, #15
   19056:	18fb      	adds	r3, r7, r3
   19058:	781b      	ldrb	r3, [r3, #0]
   1905a:	0018      	movs	r0, r3
   1905c:	4b28      	ldr	r3, [pc, #160]	; (19100 <disk_write+0xcc>)
   1905e:	4798      	blx	r3
   19060:	0003      	movs	r3, r0
   19062:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   19064:	231b      	movs	r3, #27
   19066:	18fb      	adds	r3, r7, r3
   19068:	781b      	ldrb	r3, [r3, #0]
   1906a:	2b00      	cmp	r3, #0
   1906c:	d101      	bne.n	19072 <disk_write+0x3e>
		return RES_ERROR;
   1906e:	2301      	movs	r3, #1
   19070:	e042      	b.n	190f8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   19072:	2314      	movs	r3, #20
   19074:	18fa      	adds	r2, r7, r3
   19076:	230f      	movs	r3, #15
   19078:	18fb      	adds	r3, r7, r3
   1907a:	781b      	ldrb	r3, [r3, #0]
   1907c:	0011      	movs	r1, r2
   1907e:	0018      	movs	r0, r3
   19080:	4b20      	ldr	r3, [pc, #128]	; (19104 <disk_write+0xd0>)
   19082:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   19084:	230e      	movs	r3, #14
   19086:	18fb      	adds	r3, r7, r3
   19088:	781b      	ldrb	r3, [r3, #0]
   1908a:	221b      	movs	r2, #27
   1908c:	18ba      	adds	r2, r7, r2
   1908e:	7812      	ldrb	r2, [r2, #0]
   19090:	4353      	muls	r3, r2
   19092:	001a      	movs	r2, r3
   19094:	687b      	ldr	r3, [r7, #4]
   19096:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   19098:	697b      	ldr	r3, [r7, #20]
   1909a:	3301      	adds	r3, #1
   1909c:	211b      	movs	r1, #27
   1909e:	1879      	adds	r1, r7, r1
   190a0:	7809      	ldrb	r1, [r1, #0]
   190a2:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   190a4:	429a      	cmp	r2, r3
   190a6:	d901      	bls.n	190ac <disk_write+0x78>
		return RES_PARERR;
   190a8:	2304      	movs	r3, #4
   190aa:	e025      	b.n	190f8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   190ac:	2300      	movs	r3, #0
   190ae:	61fb      	str	r3, [r7, #28]
   190b0:	e01b      	b.n	190ea <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   190b2:	231b      	movs	r3, #27
   190b4:	18fb      	adds	r3, r7, r3
   190b6:	781b      	ldrb	r3, [r3, #0]
   190b8:	69fa      	ldr	r2, [r7, #28]
   190ba:	435a      	muls	r2, r3
   190bc:	687b      	ldr	r3, [r7, #4]
   190be:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   190c0:	231b      	movs	r3, #27
   190c2:	18fb      	adds	r3, r7, r3
   190c4:	781b      	ldrb	r3, [r3, #0]
   190c6:	69fa      	ldr	r2, [r7, #28]
   190c8:	4353      	muls	r3, r2
   190ca:	025b      	lsls	r3, r3, #9
   190cc:	68ba      	ldr	r2, [r7, #8]
   190ce:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   190d0:	230f      	movs	r3, #15
   190d2:	18fb      	adds	r3, r7, r3
   190d4:	781b      	ldrb	r3, [r3, #0]
   190d6:	0018      	movs	r0, r3
   190d8:	4b0b      	ldr	r3, [pc, #44]	; (19108 <disk_write+0xd4>)
   190da:	4798      	blx	r3
   190dc:	1e03      	subs	r3, r0, #0
   190de:	d001      	beq.n	190e4 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   190e0:	2301      	movs	r3, #1
   190e2:	e009      	b.n	190f8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   190e4:	69fb      	ldr	r3, [r7, #28]
   190e6:	3301      	adds	r3, #1
   190e8:	61fb      	str	r3, [r7, #28]
   190ea:	230e      	movs	r3, #14
   190ec:	18fb      	adds	r3, r7, r3
   190ee:	781a      	ldrb	r2, [r3, #0]
   190f0:	69fb      	ldr	r3, [r7, #28]
   190f2:	429a      	cmp	r2, r3
   190f4:	d8dd      	bhi.n	190b2 <disk_write+0x7e>
		}
	}

	return RES_OK;
   190f6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   190f8:	0018      	movs	r0, r3
   190fa:	46bd      	mov	sp, r7
   190fc:	b009      	add	sp, #36	; 0x24
   190fe:	bd90      	pop	{r4, r7, pc}
   19100:	00013bfd 	.word	0x00013bfd
   19104:	00013bb1 	.word	0x00013bb1
   19108:	00013cc5 	.word	0x00013cc5

0001910c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1910c:	b590      	push	{r4, r7, lr}
   1910e:	b085      	sub	sp, #20
   19110:	af00      	add	r7, sp, #0
   19112:	603a      	str	r2, [r7, #0]
   19114:	1dfb      	adds	r3, r7, #7
   19116:	1c02      	adds	r2, r0, #0
   19118:	701a      	strb	r2, [r3, #0]
   1911a:	1dbb      	adds	r3, r7, #6
   1911c:	1c0a      	adds	r2, r1, #0
   1911e:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   19120:	230f      	movs	r3, #15
   19122:	18fb      	adds	r3, r7, r3
   19124:	2204      	movs	r2, #4
   19126:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   19128:	1dbb      	adds	r3, r7, #6
   1912a:	781b      	ldrb	r3, [r3, #0]
   1912c:	2b01      	cmp	r3, #1
   1912e:	d00f      	beq.n	19150 <disk_ioctl+0x44>
   19130:	dc02      	bgt.n	19138 <disk_ioctl+0x2c>
   19132:	2b00      	cmp	r3, #0
   19134:	d044      	beq.n	191c0 <disk_ioctl+0xb4>
   19136:	e054      	b.n	191e2 <disk_ioctl+0xd6>
   19138:	2b02      	cmp	r3, #2
   1913a:	d01a      	beq.n	19172 <disk_ioctl+0x66>
   1913c:	2b03      	cmp	r3, #3
   1913e:	d150      	bne.n	191e2 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   19140:	683b      	ldr	r3, [r7, #0]
   19142:	2201      	movs	r2, #1
   19144:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   19146:	230f      	movs	r3, #15
   19148:	18fb      	adds	r3, r7, r3
   1914a:	2200      	movs	r2, #0
   1914c:	701a      	strb	r2, [r3, #0]
		break;
   1914e:	e04c      	b.n	191ea <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   19150:	2308      	movs	r3, #8
   19152:	18fa      	adds	r2, r7, r3
   19154:	1dfb      	adds	r3, r7, #7
   19156:	781b      	ldrb	r3, [r3, #0]
   19158:	0011      	movs	r1, r2
   1915a:	0018      	movs	r0, r3
   1915c:	4b26      	ldr	r3, [pc, #152]	; (191f8 <disk_ioctl+0xec>)
   1915e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   19160:	68bb      	ldr	r3, [r7, #8]
   19162:	1c5a      	adds	r2, r3, #1
   19164:	683b      	ldr	r3, [r7, #0]
   19166:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   19168:	230f      	movs	r3, #15
   1916a:	18fb      	adds	r3, r7, r3
   1916c:	2200      	movs	r2, #0
   1916e:	701a      	strb	r2, [r3, #0]
	}
	break;
   19170:	e03b      	b.n	191ea <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   19172:	230e      	movs	r3, #14
   19174:	18fc      	adds	r4, r7, r3
   19176:	1dfb      	adds	r3, r7, #7
   19178:	781b      	ldrb	r3, [r3, #0]
   1917a:	0018      	movs	r0, r3
   1917c:	4b1f      	ldr	r3, [pc, #124]	; (191fc <disk_ioctl+0xf0>)
   1917e:	4798      	blx	r3
   19180:	0003      	movs	r3, r0
   19182:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   19184:	230e      	movs	r3, #14
   19186:	18fb      	adds	r3, r7, r3
   19188:	781b      	ldrb	r3, [r3, #0]
   1918a:	2b01      	cmp	r3, #1
   1918c:	d010      	beq.n	191b0 <disk_ioctl+0xa4>
   1918e:	230e      	movs	r3, #14
   19190:	18fb      	adds	r3, r7, r3
   19192:	781b      	ldrb	r3, [r3, #0]
   19194:	2b02      	cmp	r3, #2
   19196:	d00b      	beq.n	191b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   19198:	230e      	movs	r3, #14
   1919a:	18fb      	adds	r3, r7, r3
   1919c:	781b      	ldrb	r3, [r3, #0]
   1919e:	2b04      	cmp	r3, #4
   191a0:	d006      	beq.n	191b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   191a2:	230e      	movs	r3, #14
   191a4:	18fb      	adds	r3, r7, r3
   191a6:	781b      	ldrb	r3, [r3, #0]
   191a8:	2b08      	cmp	r3, #8
   191aa:	d001      	beq.n	191b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   191ac:	2301      	movs	r3, #1
   191ae:	e01f      	b.n	191f0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   191b0:	683b      	ldr	r3, [r7, #0]
   191b2:	2200      	movs	r2, #0
   191b4:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   191b6:	230f      	movs	r3, #15
   191b8:	18fb      	adds	r3, r7, r3
   191ba:	2200      	movs	r2, #0
   191bc:	701a      	strb	r2, [r3, #0]
	}
	break;
   191be:	e014      	b.n	191ea <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   191c0:	1dfb      	adds	r3, r7, #7
   191c2:	781b      	ldrb	r3, [r3, #0]
   191c4:	0018      	movs	r0, r3
   191c6:	4b0e      	ldr	r3, [pc, #56]	; (19200 <disk_ioctl+0xf4>)
   191c8:	4798      	blx	r3
   191ca:	1e03      	subs	r3, r0, #0
   191cc:	d104      	bne.n	191d8 <disk_ioctl+0xcc>
			res = RES_OK;
   191ce:	230f      	movs	r3, #15
   191d0:	18fb      	adds	r3, r7, r3
   191d2:	2200      	movs	r2, #0
   191d4:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   191d6:	e008      	b.n	191ea <disk_ioctl+0xde>
			res = RES_NOTRDY;
   191d8:	230f      	movs	r3, #15
   191da:	18fb      	adds	r3, r7, r3
   191dc:	2203      	movs	r2, #3
   191de:	701a      	strb	r2, [r3, #0]
		break;
   191e0:	e003      	b.n	191ea <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   191e2:	230f      	movs	r3, #15
   191e4:	18fb      	adds	r3, r7, r3
   191e6:	2204      	movs	r2, #4
   191e8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   191ea:	230f      	movs	r3, #15
   191ec:	18fb      	adds	r3, r7, r3
   191ee:	781b      	ldrb	r3, [r3, #0]
}
   191f0:	0018      	movs	r0, r3
   191f2:	46bd      	mov	sp, r7
   191f4:	b005      	add	sp, #20
   191f6:	bd90      	pop	{r4, r7, pc}
   191f8:	00013bb1 	.word	0x00013bb1
   191fc:	00013bfd 	.word	0x00013bfd
   19200:	00013b71 	.word	0x00013b71

00019204 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   19204:	b580      	push	{r7, lr}
   19206:	b084      	sub	sp, #16
   19208:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   1920a:	1d3a      	adds	r2, r7, #4
   1920c:	4b12      	ldr	r3, [pc, #72]	; (19258 <get_fattime+0x54>)
   1920e:	0011      	movs	r1, r2
   19210:	0018      	movs	r0, r3
   19212:	4b12      	ldr	r3, [pc, #72]	; (1925c <get_fattime+0x58>)
   19214:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   19216:	1d3b      	adds	r3, r7, #4
   19218:	88db      	ldrh	r3, [r3, #6]
   1921a:	4a11      	ldr	r2, [pc, #68]	; (19260 <get_fattime+0x5c>)
   1921c:	4694      	mov	ip, r2
   1921e:	4463      	add	r3, ip
   19220:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   19222:	1d3b      	adds	r3, r7, #4
   19224:	795b      	ldrb	r3, [r3, #5]
   19226:	055b      	lsls	r3, r3, #21
   19228:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   1922a:	1d3b      	adds	r3, r7, #4
   1922c:	791b      	ldrb	r3, [r3, #4]
   1922e:	041b      	lsls	r3, r3, #16
   19230:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   19232:	1d3b      	adds	r3, r7, #4
   19234:	789b      	ldrb	r3, [r3, #2]
   19236:	02db      	lsls	r3, r3, #11
   19238:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   1923a:	1d3b      	adds	r3, r7, #4
   1923c:	785b      	ldrb	r3, [r3, #1]
   1923e:	015b      	lsls	r3, r3, #5
   19240:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   19242:	1d3a      	adds	r2, r7, #4
   19244:	7812      	ldrb	r2, [r2, #0]
   19246:	0852      	lsrs	r2, r2, #1
   19248:	b2d2      	uxtb	r2, r2
   1924a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   1924c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   1924e:	68fb      	ldr	r3, [r7, #12]
}
   19250:	0018      	movs	r0, r3
   19252:	46bd      	mov	sp, r7
   19254:	b004      	add	sp, #16
   19256:	bd80      	pop	{r7, pc}
   19258:	20005d1c 	.word	0x20005d1c
   1925c:	000149dd 	.word	0x000149dd
   19260:	fffff844 	.word	0xfffff844

00019264 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   19264:	b580      	push	{r7, lr}
   19266:	b086      	sub	sp, #24
   19268:	af00      	add	r7, sp, #0
   1926a:	60f8      	str	r0, [r7, #12]
   1926c:	60b9      	str	r1, [r7, #8]
   1926e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   19270:	68fb      	ldr	r3, [r7, #12]
   19272:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   19274:	68bb      	ldr	r3, [r7, #8]
   19276:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   19278:	e007      	b.n	1928a <mem_cpy+0x26>
		*d++ = *s++;
   1927a:	697b      	ldr	r3, [r7, #20]
   1927c:	1c5a      	adds	r2, r3, #1
   1927e:	617a      	str	r2, [r7, #20]
   19280:	693a      	ldr	r2, [r7, #16]
   19282:	1c51      	adds	r1, r2, #1
   19284:	6139      	str	r1, [r7, #16]
   19286:	7812      	ldrb	r2, [r2, #0]
   19288:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   1928a:	687b      	ldr	r3, [r7, #4]
   1928c:	1e5a      	subs	r2, r3, #1
   1928e:	607a      	str	r2, [r7, #4]
   19290:	2b00      	cmp	r3, #0
   19292:	d1f2      	bne.n	1927a <mem_cpy+0x16>
}
   19294:	46c0      	nop			; (mov r8, r8)
   19296:	46bd      	mov	sp, r7
   19298:	b006      	add	sp, #24
   1929a:	bd80      	pop	{r7, pc}

0001929c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   1929c:	b580      	push	{r7, lr}
   1929e:	b086      	sub	sp, #24
   192a0:	af00      	add	r7, sp, #0
   192a2:	60f8      	str	r0, [r7, #12]
   192a4:	60b9      	str	r1, [r7, #8]
   192a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   192a8:	68fb      	ldr	r3, [r7, #12]
   192aa:	617b      	str	r3, [r7, #20]

	while (cnt--)
   192ac:	e005      	b.n	192ba <mem_set+0x1e>
		*d++ = (BYTE)val;
   192ae:	697b      	ldr	r3, [r7, #20]
   192b0:	1c5a      	adds	r2, r3, #1
   192b2:	617a      	str	r2, [r7, #20]
   192b4:	68ba      	ldr	r2, [r7, #8]
   192b6:	b2d2      	uxtb	r2, r2
   192b8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   192ba:	687b      	ldr	r3, [r7, #4]
   192bc:	1e5a      	subs	r2, r3, #1
   192be:	607a      	str	r2, [r7, #4]
   192c0:	2b00      	cmp	r3, #0
   192c2:	d1f4      	bne.n	192ae <mem_set+0x12>
}
   192c4:	46c0      	nop			; (mov r8, r8)
   192c6:	46bd      	mov	sp, r7
   192c8:	b006      	add	sp, #24
   192ca:	bd80      	pop	{r7, pc}

000192cc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   192cc:	b580      	push	{r7, lr}
   192ce:	b088      	sub	sp, #32
   192d0:	af00      	add	r7, sp, #0
   192d2:	60f8      	str	r0, [r7, #12]
   192d4:	60b9      	str	r1, [r7, #8]
   192d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   192d8:	68fb      	ldr	r3, [r7, #12]
   192da:	61fb      	str	r3, [r7, #28]
   192dc:	68bb      	ldr	r3, [r7, #8]
   192de:	61bb      	str	r3, [r7, #24]
	int r = 0;
   192e0:	2300      	movs	r3, #0
   192e2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   192e4:	46c0      	nop			; (mov r8, r8)
   192e6:	687b      	ldr	r3, [r7, #4]
   192e8:	1e5a      	subs	r2, r3, #1
   192ea:	607a      	str	r2, [r7, #4]
   192ec:	2b00      	cmp	r3, #0
   192ee:	d00d      	beq.n	1930c <mem_cmp+0x40>
   192f0:	69fb      	ldr	r3, [r7, #28]
   192f2:	1c5a      	adds	r2, r3, #1
   192f4:	61fa      	str	r2, [r7, #28]
   192f6:	781b      	ldrb	r3, [r3, #0]
   192f8:	0019      	movs	r1, r3
   192fa:	69bb      	ldr	r3, [r7, #24]
   192fc:	1c5a      	adds	r2, r3, #1
   192fe:	61ba      	str	r2, [r7, #24]
   19300:	781b      	ldrb	r3, [r3, #0]
   19302:	1acb      	subs	r3, r1, r3
   19304:	617b      	str	r3, [r7, #20]
   19306:	697b      	ldr	r3, [r7, #20]
   19308:	2b00      	cmp	r3, #0
   1930a:	d0ec      	beq.n	192e6 <mem_cmp+0x1a>
	return r;
   1930c:	697b      	ldr	r3, [r7, #20]
}
   1930e:	0018      	movs	r0, r3
   19310:	46bd      	mov	sp, r7
   19312:	b008      	add	sp, #32
   19314:	bd80      	pop	{r7, pc}

00019316 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   19316:	b580      	push	{r7, lr}
   19318:	b082      	sub	sp, #8
   1931a:	af00      	add	r7, sp, #0
   1931c:	6078      	str	r0, [r7, #4]
   1931e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   19320:	e002      	b.n	19328 <chk_chr+0x12>
   19322:	687b      	ldr	r3, [r7, #4]
   19324:	3301      	adds	r3, #1
   19326:	607b      	str	r3, [r7, #4]
   19328:	687b      	ldr	r3, [r7, #4]
   1932a:	781b      	ldrb	r3, [r3, #0]
   1932c:	2b00      	cmp	r3, #0
   1932e:	d005      	beq.n	1933c <chk_chr+0x26>
   19330:	687b      	ldr	r3, [r7, #4]
   19332:	781b      	ldrb	r3, [r3, #0]
   19334:	001a      	movs	r2, r3
   19336:	683b      	ldr	r3, [r7, #0]
   19338:	429a      	cmp	r2, r3
   1933a:	d1f2      	bne.n	19322 <chk_chr+0xc>
	return *str;
   1933c:	687b      	ldr	r3, [r7, #4]
   1933e:	781b      	ldrb	r3, [r3, #0]
}
   19340:	0018      	movs	r0, r3
   19342:	46bd      	mov	sp, r7
   19344:	b002      	add	sp, #8
   19346:	bd80      	pop	{r7, pc}

00019348 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   19348:	b590      	push	{r4, r7, lr}
   1934a:	b085      	sub	sp, #20
   1934c:	af00      	add	r7, sp, #0
   1934e:	6078      	str	r0, [r7, #4]
   19350:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   19352:	687b      	ldr	r3, [r7, #4]
   19354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19356:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   19358:	68fa      	ldr	r2, [r7, #12]
   1935a:	683b      	ldr	r3, [r7, #0]
   1935c:	429a      	cmp	r2, r3
   1935e:	d04e      	beq.n	193fe <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   19360:	687b      	ldr	r3, [r7, #4]
   19362:	791b      	ldrb	r3, [r3, #4]
   19364:	2b00      	cmp	r3, #0
   19366:	d037      	beq.n	193d8 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   19368:	687b      	ldr	r3, [r7, #4]
   1936a:	7858      	ldrb	r0, [r3, #1]
   1936c:	687b      	ldr	r3, [r7, #4]
   1936e:	3330      	adds	r3, #48	; 0x30
   19370:	0019      	movs	r1, r3
   19372:	68fa      	ldr	r2, [r7, #12]
   19374:	2301      	movs	r3, #1
   19376:	4c24      	ldr	r4, [pc, #144]	; (19408 <move_window+0xc0>)
   19378:	47a0      	blx	r4
   1937a:	1e03      	subs	r3, r0, #0
   1937c:	d001      	beq.n	19382 <move_window+0x3a>
				return FR_DISK_ERR;
   1937e:	2301      	movs	r3, #1
   19380:	e03e      	b.n	19400 <move_window+0xb8>
			fs->wflag = 0;
   19382:	687b      	ldr	r3, [r7, #4]
   19384:	2200      	movs	r2, #0
   19386:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   19388:	687b      	ldr	r3, [r7, #4]
   1938a:	6a1a      	ldr	r2, [r3, #32]
   1938c:	687b      	ldr	r3, [r7, #4]
   1938e:	69db      	ldr	r3, [r3, #28]
   19390:	18d2      	adds	r2, r2, r3
   19392:	68fb      	ldr	r3, [r7, #12]
   19394:	429a      	cmp	r2, r3
   19396:	d91f      	bls.n	193d8 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   19398:	230b      	movs	r3, #11
   1939a:	18fb      	adds	r3, r7, r3
   1939c:	687a      	ldr	r2, [r7, #4]
   1939e:	78d2      	ldrb	r2, [r2, #3]
   193a0:	701a      	strb	r2, [r3, #0]
   193a2:	e014      	b.n	193ce <move_window+0x86>
					wsect += fs->fsize;
   193a4:	687b      	ldr	r3, [r7, #4]
   193a6:	69db      	ldr	r3, [r3, #28]
   193a8:	68fa      	ldr	r2, [r7, #12]
   193aa:	18d3      	adds	r3, r2, r3
   193ac:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   193ae:	687b      	ldr	r3, [r7, #4]
   193b0:	7858      	ldrb	r0, [r3, #1]
   193b2:	687b      	ldr	r3, [r7, #4]
   193b4:	3330      	adds	r3, #48	; 0x30
   193b6:	0019      	movs	r1, r3
   193b8:	68fa      	ldr	r2, [r7, #12]
   193ba:	2301      	movs	r3, #1
   193bc:	4c12      	ldr	r4, [pc, #72]	; (19408 <move_window+0xc0>)
   193be:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   193c0:	230b      	movs	r3, #11
   193c2:	18fb      	adds	r3, r7, r3
   193c4:	781a      	ldrb	r2, [r3, #0]
   193c6:	230b      	movs	r3, #11
   193c8:	18fb      	adds	r3, r7, r3
   193ca:	3a01      	subs	r2, #1
   193cc:	701a      	strb	r2, [r3, #0]
   193ce:	230b      	movs	r3, #11
   193d0:	18fb      	adds	r3, r7, r3
   193d2:	781b      	ldrb	r3, [r3, #0]
   193d4:	2b01      	cmp	r3, #1
   193d6:	d8e5      	bhi.n	193a4 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   193d8:	683b      	ldr	r3, [r7, #0]
   193da:	2b00      	cmp	r3, #0
   193dc:	d00f      	beq.n	193fe <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   193de:	687b      	ldr	r3, [r7, #4]
   193e0:	7858      	ldrb	r0, [r3, #1]
   193e2:	687b      	ldr	r3, [r7, #4]
   193e4:	3330      	adds	r3, #48	; 0x30
   193e6:	0019      	movs	r1, r3
   193e8:	683a      	ldr	r2, [r7, #0]
   193ea:	2301      	movs	r3, #1
   193ec:	4c07      	ldr	r4, [pc, #28]	; (1940c <move_window+0xc4>)
   193ee:	47a0      	blx	r4
   193f0:	1e03      	subs	r3, r0, #0
   193f2:	d001      	beq.n	193f8 <move_window+0xb0>
				return FR_DISK_ERR;
   193f4:	2301      	movs	r3, #1
   193f6:	e003      	b.n	19400 <move_window+0xb8>
			fs->winsect = sector;
   193f8:	687b      	ldr	r3, [r7, #4]
   193fa:	683a      	ldr	r2, [r7, #0]
   193fc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   193fe:	2300      	movs	r3, #0
}
   19400:	0018      	movs	r0, r3
   19402:	46bd      	mov	sp, r7
   19404:	b005      	add	sp, #20
   19406:	bd90      	pop	{r4, r7, pc}
   19408:	00019035 	.word	0x00019035
   1940c:	00018f5d 	.word	0x00018f5d

00019410 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   19410:	b590      	push	{r4, r7, lr}
   19412:	b085      	sub	sp, #20
   19414:	af00      	add	r7, sp, #0
   19416:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   19418:	230f      	movs	r3, #15
   1941a:	18fc      	adds	r4, r7, r3
   1941c:	687b      	ldr	r3, [r7, #4]
   1941e:	2100      	movs	r1, #0
   19420:	0018      	movs	r0, r3
   19422:	4b52      	ldr	r3, [pc, #328]	; (1956c <sync+0x15c>)
   19424:	4798      	blx	r3
   19426:	0003      	movs	r3, r0
   19428:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1942a:	230f      	movs	r3, #15
   1942c:	18fb      	adds	r3, r7, r3
   1942e:	781b      	ldrb	r3, [r3, #0]
   19430:	2b00      	cmp	r3, #0
   19432:	d000      	beq.n	19436 <sync+0x26>
   19434:	e093      	b.n	1955e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   19436:	687b      	ldr	r3, [r7, #4]
   19438:	781b      	ldrb	r3, [r3, #0]
   1943a:	2b03      	cmp	r3, #3
   1943c:	d000      	beq.n	19440 <sync+0x30>
   1943e:	e081      	b.n	19544 <sync+0x134>
   19440:	687b      	ldr	r3, [r7, #4]
   19442:	795b      	ldrb	r3, [r3, #5]
   19444:	2b00      	cmp	r3, #0
   19446:	d07d      	beq.n	19544 <sync+0x134>
			fs->winsect = 0;
   19448:	687b      	ldr	r3, [r7, #4]
   1944a:	2200      	movs	r2, #0
   1944c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   1944e:	687b      	ldr	r3, [r7, #4]
   19450:	3330      	adds	r3, #48	; 0x30
   19452:	0018      	movs	r0, r3
   19454:	2380      	movs	r3, #128	; 0x80
   19456:	009b      	lsls	r3, r3, #2
   19458:	001a      	movs	r2, r3
   1945a:	2100      	movs	r1, #0
   1945c:	4b44      	ldr	r3, [pc, #272]	; (19570 <sync+0x160>)
   1945e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   19460:	687b      	ldr	r3, [r7, #4]
   19462:	4a44      	ldr	r2, [pc, #272]	; (19574 <sync+0x164>)
   19464:	2155      	movs	r1, #85	; 0x55
   19466:	5499      	strb	r1, [r3, r2]
   19468:	687b      	ldr	r3, [r7, #4]
   1946a:	4a43      	ldr	r2, [pc, #268]	; (19578 <sync+0x168>)
   1946c:	21aa      	movs	r1, #170	; 0xaa
   1946e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   19470:	687b      	ldr	r3, [r7, #4]
   19472:	2230      	movs	r2, #48	; 0x30
   19474:	2152      	movs	r1, #82	; 0x52
   19476:	5499      	strb	r1, [r3, r2]
   19478:	687b      	ldr	r3, [r7, #4]
   1947a:	2231      	movs	r2, #49	; 0x31
   1947c:	2152      	movs	r1, #82	; 0x52
   1947e:	5499      	strb	r1, [r3, r2]
   19480:	687b      	ldr	r3, [r7, #4]
   19482:	2232      	movs	r2, #50	; 0x32
   19484:	2161      	movs	r1, #97	; 0x61
   19486:	5499      	strb	r1, [r3, r2]
   19488:	687b      	ldr	r3, [r7, #4]
   1948a:	2233      	movs	r2, #51	; 0x33
   1948c:	2141      	movs	r1, #65	; 0x41
   1948e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   19490:	687a      	ldr	r2, [r7, #4]
   19492:	2385      	movs	r3, #133	; 0x85
   19494:	009b      	lsls	r3, r3, #2
   19496:	2172      	movs	r1, #114	; 0x72
   19498:	54d1      	strb	r1, [r2, r3]
   1949a:	687b      	ldr	r3, [r7, #4]
   1949c:	4a37      	ldr	r2, [pc, #220]	; (1957c <sync+0x16c>)
   1949e:	2172      	movs	r1, #114	; 0x72
   194a0:	5499      	strb	r1, [r3, r2]
   194a2:	687b      	ldr	r3, [r7, #4]
   194a4:	4a36      	ldr	r2, [pc, #216]	; (19580 <sync+0x170>)
   194a6:	2141      	movs	r1, #65	; 0x41
   194a8:	5499      	strb	r1, [r3, r2]
   194aa:	687b      	ldr	r3, [r7, #4]
   194ac:	4a35      	ldr	r2, [pc, #212]	; (19584 <sync+0x174>)
   194ae:	2161      	movs	r1, #97	; 0x61
   194b0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   194b2:	687b      	ldr	r3, [r7, #4]
   194b4:	691b      	ldr	r3, [r3, #16]
   194b6:	b2d9      	uxtb	r1, r3
   194b8:	687a      	ldr	r2, [r7, #4]
   194ba:	2386      	movs	r3, #134	; 0x86
   194bc:	009b      	lsls	r3, r3, #2
   194be:	54d1      	strb	r1, [r2, r3]
   194c0:	687b      	ldr	r3, [r7, #4]
   194c2:	691b      	ldr	r3, [r3, #16]
   194c4:	b29b      	uxth	r3, r3
   194c6:	0a1b      	lsrs	r3, r3, #8
   194c8:	b29b      	uxth	r3, r3
   194ca:	b2d9      	uxtb	r1, r3
   194cc:	687b      	ldr	r3, [r7, #4]
   194ce:	4a2e      	ldr	r2, [pc, #184]	; (19588 <sync+0x178>)
   194d0:	5499      	strb	r1, [r3, r2]
   194d2:	687b      	ldr	r3, [r7, #4]
   194d4:	691b      	ldr	r3, [r3, #16]
   194d6:	0c1b      	lsrs	r3, r3, #16
   194d8:	b2d9      	uxtb	r1, r3
   194da:	687b      	ldr	r3, [r7, #4]
   194dc:	4a2b      	ldr	r2, [pc, #172]	; (1958c <sync+0x17c>)
   194de:	5499      	strb	r1, [r3, r2]
   194e0:	687b      	ldr	r3, [r7, #4]
   194e2:	691b      	ldr	r3, [r3, #16]
   194e4:	0e1b      	lsrs	r3, r3, #24
   194e6:	b2d9      	uxtb	r1, r3
   194e8:	687b      	ldr	r3, [r7, #4]
   194ea:	4a29      	ldr	r2, [pc, #164]	; (19590 <sync+0x180>)
   194ec:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   194ee:	687b      	ldr	r3, [r7, #4]
   194f0:	68db      	ldr	r3, [r3, #12]
   194f2:	b2d9      	uxtb	r1, r3
   194f4:	687a      	ldr	r2, [r7, #4]
   194f6:	2387      	movs	r3, #135	; 0x87
   194f8:	009b      	lsls	r3, r3, #2
   194fa:	54d1      	strb	r1, [r2, r3]
   194fc:	687b      	ldr	r3, [r7, #4]
   194fe:	68db      	ldr	r3, [r3, #12]
   19500:	b29b      	uxth	r3, r3
   19502:	0a1b      	lsrs	r3, r3, #8
   19504:	b29b      	uxth	r3, r3
   19506:	b2d9      	uxtb	r1, r3
   19508:	687b      	ldr	r3, [r7, #4]
   1950a:	4a22      	ldr	r2, [pc, #136]	; (19594 <sync+0x184>)
   1950c:	5499      	strb	r1, [r3, r2]
   1950e:	687b      	ldr	r3, [r7, #4]
   19510:	68db      	ldr	r3, [r3, #12]
   19512:	0c1b      	lsrs	r3, r3, #16
   19514:	b2d9      	uxtb	r1, r3
   19516:	687b      	ldr	r3, [r7, #4]
   19518:	4a1f      	ldr	r2, [pc, #124]	; (19598 <sync+0x188>)
   1951a:	5499      	strb	r1, [r3, r2]
   1951c:	687b      	ldr	r3, [r7, #4]
   1951e:	68db      	ldr	r3, [r3, #12]
   19520:	0e1b      	lsrs	r3, r3, #24
   19522:	b2d9      	uxtb	r1, r3
   19524:	687b      	ldr	r3, [r7, #4]
   19526:	4a1d      	ldr	r2, [pc, #116]	; (1959c <sync+0x18c>)
   19528:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   1952a:	687b      	ldr	r3, [r7, #4]
   1952c:	7858      	ldrb	r0, [r3, #1]
   1952e:	687b      	ldr	r3, [r7, #4]
   19530:	3330      	adds	r3, #48	; 0x30
   19532:	0019      	movs	r1, r3
   19534:	687b      	ldr	r3, [r7, #4]
   19536:	695a      	ldr	r2, [r3, #20]
   19538:	2301      	movs	r3, #1
   1953a:	4c19      	ldr	r4, [pc, #100]	; (195a0 <sync+0x190>)
   1953c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   1953e:	687b      	ldr	r3, [r7, #4]
   19540:	2200      	movs	r2, #0
   19542:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   19544:	687b      	ldr	r3, [r7, #4]
   19546:	785b      	ldrb	r3, [r3, #1]
   19548:	2200      	movs	r2, #0
   1954a:	2100      	movs	r1, #0
   1954c:	0018      	movs	r0, r3
   1954e:	4b15      	ldr	r3, [pc, #84]	; (195a4 <sync+0x194>)
   19550:	4798      	blx	r3
   19552:	1e03      	subs	r3, r0, #0
   19554:	d003      	beq.n	1955e <sync+0x14e>
			res = FR_DISK_ERR;
   19556:	230f      	movs	r3, #15
   19558:	18fb      	adds	r3, r7, r3
   1955a:	2201      	movs	r2, #1
   1955c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   1955e:	230f      	movs	r3, #15
   19560:	18fb      	adds	r3, r7, r3
   19562:	781b      	ldrb	r3, [r3, #0]
}
   19564:	0018      	movs	r0, r3
   19566:	46bd      	mov	sp, r7
   19568:	b005      	add	sp, #20
   1956a:	bd90      	pop	{r4, r7, pc}
   1956c:	00019349 	.word	0x00019349
   19570:	0001929d 	.word	0x0001929d
   19574:	0000022e 	.word	0x0000022e
   19578:	0000022f 	.word	0x0000022f
   1957c:	00000215 	.word	0x00000215
   19580:	00000216 	.word	0x00000216
   19584:	00000217 	.word	0x00000217
   19588:	00000219 	.word	0x00000219
   1958c:	0000021a 	.word	0x0000021a
   19590:	0000021b 	.word	0x0000021b
   19594:	0000021d 	.word	0x0000021d
   19598:	0000021e 	.word	0x0000021e
   1959c:	0000021f 	.word	0x0000021f
   195a0:	00019035 	.word	0x00019035
   195a4:	0001910d 	.word	0x0001910d

000195a8 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   195a8:	b580      	push	{r7, lr}
   195aa:	b082      	sub	sp, #8
   195ac:	af00      	add	r7, sp, #0
   195ae:	6078      	str	r0, [r7, #4]
   195b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
   195b2:	683b      	ldr	r3, [r7, #0]
   195b4:	3b02      	subs	r3, #2
   195b6:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   195b8:	687b      	ldr	r3, [r7, #4]
   195ba:	699b      	ldr	r3, [r3, #24]
   195bc:	1e9a      	subs	r2, r3, #2
   195be:	683b      	ldr	r3, [r7, #0]
   195c0:	429a      	cmp	r2, r3
   195c2:	d801      	bhi.n	195c8 <clust2sect+0x20>
   195c4:	2300      	movs	r3, #0
   195c6:	e007      	b.n	195d8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   195c8:	687b      	ldr	r3, [r7, #4]
   195ca:	789b      	ldrb	r3, [r3, #2]
   195cc:	001a      	movs	r2, r3
   195ce:	683b      	ldr	r3, [r7, #0]
   195d0:	435a      	muls	r2, r3
   195d2:	687b      	ldr	r3, [r7, #4]
   195d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   195d6:	18d3      	adds	r3, r2, r3
}
   195d8:	0018      	movs	r0, r3
   195da:	46bd      	mov	sp, r7
   195dc:	b002      	add	sp, #8
   195de:	bd80      	pop	{r7, pc}

000195e0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   195e0:	b580      	push	{r7, lr}
   195e2:	b086      	sub	sp, #24
   195e4:	af00      	add	r7, sp, #0
   195e6:	6078      	str	r0, [r7, #4]
   195e8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   195ea:	683b      	ldr	r3, [r7, #0]
   195ec:	2b01      	cmp	r3, #1
   195ee:	d904      	bls.n	195fa <get_fat+0x1a>
   195f0:	687b      	ldr	r3, [r7, #4]
   195f2:	699a      	ldr	r2, [r3, #24]
   195f4:	683b      	ldr	r3, [r7, #0]
   195f6:	429a      	cmp	r2, r3
   195f8:	d801      	bhi.n	195fe <get_fat+0x1e>
		return 1;
   195fa:	2301      	movs	r3, #1
   195fc:	e09f      	b.n	1973e <get_fat+0x15e>

	switch (fs->fs_type) {
   195fe:	687b      	ldr	r3, [r7, #4]
   19600:	781b      	ldrb	r3, [r3, #0]
   19602:	2b02      	cmp	r3, #2
   19604:	d048      	beq.n	19698 <get_fat+0xb8>
   19606:	2b03      	cmp	r3, #3
   19608:	d067      	beq.n	196da <get_fat+0xfa>
   1960a:	2b01      	cmp	r3, #1
   1960c:	d000      	beq.n	19610 <get_fat+0x30>
   1960e:	e094      	b.n	1973a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   19610:	683b      	ldr	r3, [r7, #0]
   19612:	617b      	str	r3, [r7, #20]
   19614:	697b      	ldr	r3, [r7, #20]
   19616:	085b      	lsrs	r3, r3, #1
   19618:	697a      	ldr	r2, [r7, #20]
   1961a:	18d3      	adds	r3, r2, r3
   1961c:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1961e:	687b      	ldr	r3, [r7, #4]
   19620:	6a1a      	ldr	r2, [r3, #32]
   19622:	697b      	ldr	r3, [r7, #20]
   19624:	0a5b      	lsrs	r3, r3, #9
   19626:	18d2      	adds	r2, r2, r3
   19628:	687b      	ldr	r3, [r7, #4]
   1962a:	0011      	movs	r1, r2
   1962c:	0018      	movs	r0, r3
   1962e:	4b46      	ldr	r3, [pc, #280]	; (19748 <get_fat+0x168>)
   19630:	4798      	blx	r3
   19632:	1e03      	subs	r3, r0, #0
   19634:	d000      	beq.n	19638 <get_fat+0x58>
   19636:	e079      	b.n	1972c <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   19638:	697b      	ldr	r3, [r7, #20]
   1963a:	05db      	lsls	r3, r3, #23
   1963c:	0ddb      	lsrs	r3, r3, #23
   1963e:	687a      	ldr	r2, [r7, #4]
   19640:	2130      	movs	r1, #48	; 0x30
   19642:	18d3      	adds	r3, r2, r3
   19644:	185b      	adds	r3, r3, r1
   19646:	781b      	ldrb	r3, [r3, #0]
   19648:	613b      	str	r3, [r7, #16]
   1964a:	697b      	ldr	r3, [r7, #20]
   1964c:	3301      	adds	r3, #1
   1964e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   19650:	687b      	ldr	r3, [r7, #4]
   19652:	6a1a      	ldr	r2, [r3, #32]
   19654:	697b      	ldr	r3, [r7, #20]
   19656:	0a5b      	lsrs	r3, r3, #9
   19658:	18d2      	adds	r2, r2, r3
   1965a:	687b      	ldr	r3, [r7, #4]
   1965c:	0011      	movs	r1, r2
   1965e:	0018      	movs	r0, r3
   19660:	4b39      	ldr	r3, [pc, #228]	; (19748 <get_fat+0x168>)
   19662:	4798      	blx	r3
   19664:	1e03      	subs	r3, r0, #0
   19666:	d163      	bne.n	19730 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   19668:	697b      	ldr	r3, [r7, #20]
   1966a:	05db      	lsls	r3, r3, #23
   1966c:	0ddb      	lsrs	r3, r3, #23
   1966e:	687a      	ldr	r2, [r7, #4]
   19670:	2130      	movs	r1, #48	; 0x30
   19672:	18d3      	adds	r3, r2, r3
   19674:	185b      	adds	r3, r3, r1
   19676:	781b      	ldrb	r3, [r3, #0]
   19678:	021b      	lsls	r3, r3, #8
   1967a:	001a      	movs	r2, r3
   1967c:	693b      	ldr	r3, [r7, #16]
   1967e:	4313      	orrs	r3, r2
   19680:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   19682:	683b      	ldr	r3, [r7, #0]
   19684:	2201      	movs	r2, #1
   19686:	4013      	ands	r3, r2
   19688:	d002      	beq.n	19690 <get_fat+0xb0>
   1968a:	693b      	ldr	r3, [r7, #16]
   1968c:	091b      	lsrs	r3, r3, #4
   1968e:	e056      	b.n	1973e <get_fat+0x15e>
   19690:	693b      	ldr	r3, [r7, #16]
   19692:	051b      	lsls	r3, r3, #20
   19694:	0d1b      	lsrs	r3, r3, #20
   19696:	e052      	b.n	1973e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   19698:	687b      	ldr	r3, [r7, #4]
   1969a:	6a1a      	ldr	r2, [r3, #32]
   1969c:	683b      	ldr	r3, [r7, #0]
   1969e:	0a1b      	lsrs	r3, r3, #8
   196a0:	18d2      	adds	r2, r2, r3
   196a2:	687b      	ldr	r3, [r7, #4]
   196a4:	0011      	movs	r1, r2
   196a6:	0018      	movs	r0, r3
   196a8:	4b27      	ldr	r3, [pc, #156]	; (19748 <get_fat+0x168>)
   196aa:	4798      	blx	r3
   196ac:	1e03      	subs	r3, r0, #0
   196ae:	d141      	bne.n	19734 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   196b0:	683b      	ldr	r3, [r7, #0]
   196b2:	005a      	lsls	r2, r3, #1
   196b4:	23ff      	movs	r3, #255	; 0xff
   196b6:	005b      	lsls	r3, r3, #1
   196b8:	4013      	ands	r3, r2
   196ba:	3330      	adds	r3, #48	; 0x30
   196bc:	687a      	ldr	r2, [r7, #4]
   196be:	18d3      	adds	r3, r2, r3
   196c0:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   196c2:	68fb      	ldr	r3, [r7, #12]
   196c4:	3301      	adds	r3, #1
   196c6:	781b      	ldrb	r3, [r3, #0]
   196c8:	021b      	lsls	r3, r3, #8
   196ca:	b21a      	sxth	r2, r3
   196cc:	68fb      	ldr	r3, [r7, #12]
   196ce:	781b      	ldrb	r3, [r3, #0]
   196d0:	b21b      	sxth	r3, r3
   196d2:	4313      	orrs	r3, r2
   196d4:	b21b      	sxth	r3, r3
   196d6:	b29b      	uxth	r3, r3
   196d8:	e031      	b.n	1973e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   196da:	687b      	ldr	r3, [r7, #4]
   196dc:	6a1a      	ldr	r2, [r3, #32]
   196de:	683b      	ldr	r3, [r7, #0]
   196e0:	09db      	lsrs	r3, r3, #7
   196e2:	18d2      	adds	r2, r2, r3
   196e4:	687b      	ldr	r3, [r7, #4]
   196e6:	0011      	movs	r1, r2
   196e8:	0018      	movs	r0, r3
   196ea:	4b17      	ldr	r3, [pc, #92]	; (19748 <get_fat+0x168>)
   196ec:	4798      	blx	r3
   196ee:	1e03      	subs	r3, r0, #0
   196f0:	d122      	bne.n	19738 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   196f2:	683b      	ldr	r3, [r7, #0]
   196f4:	009a      	lsls	r2, r3, #2
   196f6:	23fe      	movs	r3, #254	; 0xfe
   196f8:	005b      	lsls	r3, r3, #1
   196fa:	4013      	ands	r3, r2
   196fc:	3330      	adds	r3, #48	; 0x30
   196fe:	687a      	ldr	r2, [r7, #4]
   19700:	18d3      	adds	r3, r2, r3
   19702:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   19704:	68fb      	ldr	r3, [r7, #12]
   19706:	3303      	adds	r3, #3
   19708:	781b      	ldrb	r3, [r3, #0]
   1970a:	061a      	lsls	r2, r3, #24
   1970c:	68fb      	ldr	r3, [r7, #12]
   1970e:	3302      	adds	r3, #2
   19710:	781b      	ldrb	r3, [r3, #0]
   19712:	041b      	lsls	r3, r3, #16
   19714:	4313      	orrs	r3, r2
   19716:	68fa      	ldr	r2, [r7, #12]
   19718:	3201      	adds	r2, #1
   1971a:	7812      	ldrb	r2, [r2, #0]
   1971c:	0212      	lsls	r2, r2, #8
   1971e:	4313      	orrs	r3, r2
   19720:	68fa      	ldr	r2, [r7, #12]
   19722:	7812      	ldrb	r2, [r2, #0]
   19724:	4313      	orrs	r3, r2
   19726:	011b      	lsls	r3, r3, #4
   19728:	091b      	lsrs	r3, r3, #4
   1972a:	e008      	b.n	1973e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1972c:	46c0      	nop			; (mov r8, r8)
   1972e:	e004      	b.n	1973a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   19730:	46c0      	nop			; (mov r8, r8)
   19732:	e002      	b.n	1973a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   19734:	46c0      	nop			; (mov r8, r8)
   19736:	e000      	b.n	1973a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   19738:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1973a:	2301      	movs	r3, #1
   1973c:	425b      	negs	r3, r3
}
   1973e:	0018      	movs	r0, r3
   19740:	46bd      	mov	sp, r7
   19742:	b006      	add	sp, #24
   19744:	bd80      	pop	{r7, pc}
   19746:	46c0      	nop			; (mov r8, r8)
   19748:	00019349 	.word	0x00019349

0001974c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   1974c:	b590      	push	{r4, r7, lr}
   1974e:	b089      	sub	sp, #36	; 0x24
   19750:	af00      	add	r7, sp, #0
   19752:	60f8      	str	r0, [r7, #12]
   19754:	60b9      	str	r1, [r7, #8]
   19756:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   19758:	68bb      	ldr	r3, [r7, #8]
   1975a:	2b01      	cmp	r3, #1
   1975c:	d904      	bls.n	19768 <put_fat+0x1c>
   1975e:	68fb      	ldr	r3, [r7, #12]
   19760:	699a      	ldr	r2, [r3, #24]
   19762:	68bb      	ldr	r3, [r7, #8]
   19764:	429a      	cmp	r2, r3
   19766:	d804      	bhi.n	19772 <put_fat+0x26>
		res = FR_INT_ERR;
   19768:	231f      	movs	r3, #31
   1976a:	18fb      	adds	r3, r7, r3
   1976c:	2202      	movs	r2, #2
   1976e:	701a      	strb	r2, [r3, #0]
   19770:	e100      	b.n	19974 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   19772:	68fb      	ldr	r3, [r7, #12]
   19774:	781b      	ldrb	r3, [r3, #0]
   19776:	2b02      	cmp	r3, #2
   19778:	d100      	bne.n	1977c <put_fat+0x30>
   1977a:	e078      	b.n	1986e <put_fat+0x122>
   1977c:	2b03      	cmp	r3, #3
   1977e:	d100      	bne.n	19782 <put_fat+0x36>
   19780:	e09e      	b.n	198c0 <put_fat+0x174>
   19782:	2b01      	cmp	r3, #1
   19784:	d000      	beq.n	19788 <put_fat+0x3c>
   19786:	e0e6      	b.n	19956 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   19788:	68bb      	ldr	r3, [r7, #8]
   1978a:	61bb      	str	r3, [r7, #24]
   1978c:	69bb      	ldr	r3, [r7, #24]
   1978e:	085b      	lsrs	r3, r3, #1
   19790:	69ba      	ldr	r2, [r7, #24]
   19792:	18d3      	adds	r3, r2, r3
   19794:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   19796:	68fb      	ldr	r3, [r7, #12]
   19798:	6a1a      	ldr	r2, [r3, #32]
   1979a:	69bb      	ldr	r3, [r7, #24]
   1979c:	0a5b      	lsrs	r3, r3, #9
   1979e:	18d2      	adds	r2, r2, r3
   197a0:	231f      	movs	r3, #31
   197a2:	18fc      	adds	r4, r7, r3
   197a4:	68fb      	ldr	r3, [r7, #12]
   197a6:	0011      	movs	r1, r2
   197a8:	0018      	movs	r0, r3
   197aa:	4b76      	ldr	r3, [pc, #472]	; (19984 <put_fat+0x238>)
   197ac:	4798      	blx	r3
   197ae:	0003      	movs	r3, r0
   197b0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   197b2:	231f      	movs	r3, #31
   197b4:	18fb      	adds	r3, r7, r3
   197b6:	781b      	ldrb	r3, [r3, #0]
   197b8:	2b00      	cmp	r3, #0
   197ba:	d000      	beq.n	197be <put_fat+0x72>
   197bc:	e0d0      	b.n	19960 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   197be:	69bb      	ldr	r3, [r7, #24]
   197c0:	05db      	lsls	r3, r3, #23
   197c2:	0ddb      	lsrs	r3, r3, #23
   197c4:	3330      	adds	r3, #48	; 0x30
   197c6:	68fa      	ldr	r2, [r7, #12]
   197c8:	18d3      	adds	r3, r2, r3
   197ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   197cc:	68bb      	ldr	r3, [r7, #8]
   197ce:	2201      	movs	r2, #1
   197d0:	4013      	ands	r3, r2
   197d2:	d00d      	beq.n	197f0 <put_fat+0xa4>
   197d4:	697b      	ldr	r3, [r7, #20]
   197d6:	781b      	ldrb	r3, [r3, #0]
   197d8:	b25b      	sxtb	r3, r3
   197da:	220f      	movs	r2, #15
   197dc:	4013      	ands	r3, r2
   197de:	b25a      	sxtb	r2, r3
   197e0:	687b      	ldr	r3, [r7, #4]
   197e2:	b2db      	uxtb	r3, r3
   197e4:	011b      	lsls	r3, r3, #4
   197e6:	b25b      	sxtb	r3, r3
   197e8:	4313      	orrs	r3, r2
   197ea:	b25b      	sxtb	r3, r3
   197ec:	b2db      	uxtb	r3, r3
   197ee:	e001      	b.n	197f4 <put_fat+0xa8>
   197f0:	687b      	ldr	r3, [r7, #4]
   197f2:	b2db      	uxtb	r3, r3
   197f4:	697a      	ldr	r2, [r7, #20]
   197f6:	7013      	strb	r3, [r2, #0]
			bc++;
   197f8:	69bb      	ldr	r3, [r7, #24]
   197fa:	3301      	adds	r3, #1
   197fc:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   197fe:	68fb      	ldr	r3, [r7, #12]
   19800:	2201      	movs	r2, #1
   19802:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   19804:	68fb      	ldr	r3, [r7, #12]
   19806:	6a1a      	ldr	r2, [r3, #32]
   19808:	69bb      	ldr	r3, [r7, #24]
   1980a:	0a5b      	lsrs	r3, r3, #9
   1980c:	18d2      	adds	r2, r2, r3
   1980e:	231f      	movs	r3, #31
   19810:	18fc      	adds	r4, r7, r3
   19812:	68fb      	ldr	r3, [r7, #12]
   19814:	0011      	movs	r1, r2
   19816:	0018      	movs	r0, r3
   19818:	4b5a      	ldr	r3, [pc, #360]	; (19984 <put_fat+0x238>)
   1981a:	4798      	blx	r3
   1981c:	0003      	movs	r3, r0
   1981e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   19820:	231f      	movs	r3, #31
   19822:	18fb      	adds	r3, r7, r3
   19824:	781b      	ldrb	r3, [r3, #0]
   19826:	2b00      	cmp	r3, #0
   19828:	d000      	beq.n	1982c <put_fat+0xe0>
   1982a:	e09b      	b.n	19964 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   1982c:	69bb      	ldr	r3, [r7, #24]
   1982e:	05db      	lsls	r3, r3, #23
   19830:	0ddb      	lsrs	r3, r3, #23
   19832:	3330      	adds	r3, #48	; 0x30
   19834:	68fa      	ldr	r2, [r7, #12]
   19836:	18d3      	adds	r3, r2, r3
   19838:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   1983a:	68bb      	ldr	r3, [r7, #8]
   1983c:	2201      	movs	r2, #1
   1983e:	4013      	ands	r3, r2
   19840:	d003      	beq.n	1984a <put_fat+0xfe>
   19842:	687b      	ldr	r3, [r7, #4]
   19844:	091b      	lsrs	r3, r3, #4
   19846:	b2db      	uxtb	r3, r3
   19848:	e00e      	b.n	19868 <put_fat+0x11c>
   1984a:	697b      	ldr	r3, [r7, #20]
   1984c:	781b      	ldrb	r3, [r3, #0]
   1984e:	b25b      	sxtb	r3, r3
   19850:	220f      	movs	r2, #15
   19852:	4393      	bics	r3, r2
   19854:	b25a      	sxtb	r2, r3
   19856:	687b      	ldr	r3, [r7, #4]
   19858:	0a1b      	lsrs	r3, r3, #8
   1985a:	b25b      	sxtb	r3, r3
   1985c:	210f      	movs	r1, #15
   1985e:	400b      	ands	r3, r1
   19860:	b25b      	sxtb	r3, r3
   19862:	4313      	orrs	r3, r2
   19864:	b25b      	sxtb	r3, r3
   19866:	b2db      	uxtb	r3, r3
   19868:	697a      	ldr	r2, [r7, #20]
   1986a:	7013      	strb	r3, [r2, #0]
			break;
   1986c:	e07f      	b.n	1996e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   1986e:	68fb      	ldr	r3, [r7, #12]
   19870:	6a1a      	ldr	r2, [r3, #32]
   19872:	68bb      	ldr	r3, [r7, #8]
   19874:	0a1b      	lsrs	r3, r3, #8
   19876:	18d2      	adds	r2, r2, r3
   19878:	231f      	movs	r3, #31
   1987a:	18fc      	adds	r4, r7, r3
   1987c:	68fb      	ldr	r3, [r7, #12]
   1987e:	0011      	movs	r1, r2
   19880:	0018      	movs	r0, r3
   19882:	4b40      	ldr	r3, [pc, #256]	; (19984 <put_fat+0x238>)
   19884:	4798      	blx	r3
   19886:	0003      	movs	r3, r0
   19888:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1988a:	231f      	movs	r3, #31
   1988c:	18fb      	adds	r3, r7, r3
   1988e:	781b      	ldrb	r3, [r3, #0]
   19890:	2b00      	cmp	r3, #0
   19892:	d169      	bne.n	19968 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   19894:	68bb      	ldr	r3, [r7, #8]
   19896:	005a      	lsls	r2, r3, #1
   19898:	23ff      	movs	r3, #255	; 0xff
   1989a:	005b      	lsls	r3, r3, #1
   1989c:	4013      	ands	r3, r2
   1989e:	3330      	adds	r3, #48	; 0x30
   198a0:	68fa      	ldr	r2, [r7, #12]
   198a2:	18d3      	adds	r3, r2, r3
   198a4:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   198a6:	687b      	ldr	r3, [r7, #4]
   198a8:	b2da      	uxtb	r2, r3
   198aa:	697b      	ldr	r3, [r7, #20]
   198ac:	701a      	strb	r2, [r3, #0]
   198ae:	697b      	ldr	r3, [r7, #20]
   198b0:	3301      	adds	r3, #1
   198b2:	687a      	ldr	r2, [r7, #4]
   198b4:	b292      	uxth	r2, r2
   198b6:	0a12      	lsrs	r2, r2, #8
   198b8:	b292      	uxth	r2, r2
   198ba:	b2d2      	uxtb	r2, r2
   198bc:	701a      	strb	r2, [r3, #0]
			break;
   198be:	e056      	b.n	1996e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   198c0:	68fb      	ldr	r3, [r7, #12]
   198c2:	6a1a      	ldr	r2, [r3, #32]
   198c4:	68bb      	ldr	r3, [r7, #8]
   198c6:	09db      	lsrs	r3, r3, #7
   198c8:	18d2      	adds	r2, r2, r3
   198ca:	231f      	movs	r3, #31
   198cc:	18fc      	adds	r4, r7, r3
   198ce:	68fb      	ldr	r3, [r7, #12]
   198d0:	0011      	movs	r1, r2
   198d2:	0018      	movs	r0, r3
   198d4:	4b2b      	ldr	r3, [pc, #172]	; (19984 <put_fat+0x238>)
   198d6:	4798      	blx	r3
   198d8:	0003      	movs	r3, r0
   198da:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   198dc:	231f      	movs	r3, #31
   198de:	18fb      	adds	r3, r7, r3
   198e0:	781b      	ldrb	r3, [r3, #0]
   198e2:	2b00      	cmp	r3, #0
   198e4:	d142      	bne.n	1996c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   198e6:	68bb      	ldr	r3, [r7, #8]
   198e8:	009a      	lsls	r2, r3, #2
   198ea:	23fe      	movs	r3, #254	; 0xfe
   198ec:	005b      	lsls	r3, r3, #1
   198ee:	4013      	ands	r3, r2
   198f0:	3330      	adds	r3, #48	; 0x30
   198f2:	68fa      	ldr	r2, [r7, #12]
   198f4:	18d3      	adds	r3, r2, r3
   198f6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   198f8:	697b      	ldr	r3, [r7, #20]
   198fa:	3303      	adds	r3, #3
   198fc:	781b      	ldrb	r3, [r3, #0]
   198fe:	061a      	lsls	r2, r3, #24
   19900:	697b      	ldr	r3, [r7, #20]
   19902:	3302      	adds	r3, #2
   19904:	781b      	ldrb	r3, [r3, #0]
   19906:	041b      	lsls	r3, r3, #16
   19908:	4313      	orrs	r3, r2
   1990a:	697a      	ldr	r2, [r7, #20]
   1990c:	3201      	adds	r2, #1
   1990e:	7812      	ldrb	r2, [r2, #0]
   19910:	0212      	lsls	r2, r2, #8
   19912:	4313      	orrs	r3, r2
   19914:	697a      	ldr	r2, [r7, #20]
   19916:	7812      	ldrb	r2, [r2, #0]
   19918:	4313      	orrs	r3, r2
   1991a:	0f1b      	lsrs	r3, r3, #28
   1991c:	071b      	lsls	r3, r3, #28
   1991e:	687a      	ldr	r2, [r7, #4]
   19920:	4313      	orrs	r3, r2
   19922:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   19924:	687b      	ldr	r3, [r7, #4]
   19926:	b2da      	uxtb	r2, r3
   19928:	697b      	ldr	r3, [r7, #20]
   1992a:	701a      	strb	r2, [r3, #0]
   1992c:	697b      	ldr	r3, [r7, #20]
   1992e:	3301      	adds	r3, #1
   19930:	687a      	ldr	r2, [r7, #4]
   19932:	b292      	uxth	r2, r2
   19934:	0a12      	lsrs	r2, r2, #8
   19936:	b292      	uxth	r2, r2
   19938:	b2d2      	uxtb	r2, r2
   1993a:	701a      	strb	r2, [r3, #0]
   1993c:	697b      	ldr	r3, [r7, #20]
   1993e:	3302      	adds	r3, #2
   19940:	687a      	ldr	r2, [r7, #4]
   19942:	0c12      	lsrs	r2, r2, #16
   19944:	b2d2      	uxtb	r2, r2
   19946:	701a      	strb	r2, [r3, #0]
   19948:	697b      	ldr	r3, [r7, #20]
   1994a:	3303      	adds	r3, #3
   1994c:	687a      	ldr	r2, [r7, #4]
   1994e:	0e12      	lsrs	r2, r2, #24
   19950:	b2d2      	uxtb	r2, r2
   19952:	701a      	strb	r2, [r3, #0]
			break;
   19954:	e00b      	b.n	1996e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   19956:	231f      	movs	r3, #31
   19958:	18fb      	adds	r3, r7, r3
   1995a:	2202      	movs	r2, #2
   1995c:	701a      	strb	r2, [r3, #0]
   1995e:	e006      	b.n	1996e <put_fat+0x222>
			if (res != FR_OK) break;
   19960:	46c0      	nop			; (mov r8, r8)
   19962:	e004      	b.n	1996e <put_fat+0x222>
			if (res != FR_OK) break;
   19964:	46c0      	nop			; (mov r8, r8)
   19966:	e002      	b.n	1996e <put_fat+0x222>
			if (res != FR_OK) break;
   19968:	46c0      	nop			; (mov r8, r8)
   1996a:	e000      	b.n	1996e <put_fat+0x222>
			if (res != FR_OK) break;
   1996c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   1996e:	68fb      	ldr	r3, [r7, #12]
   19970:	2201      	movs	r2, #1
   19972:	711a      	strb	r2, [r3, #4]
	}

	return res;
   19974:	231f      	movs	r3, #31
   19976:	18fb      	adds	r3, r7, r3
   19978:	781b      	ldrb	r3, [r3, #0]
}
   1997a:	0018      	movs	r0, r3
   1997c:	46bd      	mov	sp, r7
   1997e:	b009      	add	sp, #36	; 0x24
   19980:	bd90      	pop	{r4, r7, pc}
   19982:	46c0      	nop			; (mov r8, r8)
   19984:	00019349 	.word	0x00019349

00019988 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   19988:	b590      	push	{r4, r7, lr}
   1998a:	b085      	sub	sp, #20
   1998c:	af00      	add	r7, sp, #0
   1998e:	6078      	str	r0, [r7, #4]
   19990:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   19992:	683b      	ldr	r3, [r7, #0]
   19994:	2b01      	cmp	r3, #1
   19996:	d904      	bls.n	199a2 <remove_chain+0x1a>
   19998:	687b      	ldr	r3, [r7, #4]
   1999a:	699a      	ldr	r2, [r3, #24]
   1999c:	683b      	ldr	r3, [r7, #0]
   1999e:	429a      	cmp	r2, r3
   199a0:	d804      	bhi.n	199ac <remove_chain+0x24>
		res = FR_INT_ERR;
   199a2:	230f      	movs	r3, #15
   199a4:	18fb      	adds	r3, r7, r3
   199a6:	2202      	movs	r2, #2
   199a8:	701a      	strb	r2, [r3, #0]
   199aa:	e045      	b.n	19a38 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   199ac:	230f      	movs	r3, #15
   199ae:	18fb      	adds	r3, r7, r3
   199b0:	2200      	movs	r2, #0
   199b2:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   199b4:	e037      	b.n	19a26 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   199b6:	683a      	ldr	r2, [r7, #0]
   199b8:	687b      	ldr	r3, [r7, #4]
   199ba:	0011      	movs	r1, r2
   199bc:	0018      	movs	r0, r3
   199be:	4b22      	ldr	r3, [pc, #136]	; (19a48 <remove_chain+0xc0>)
   199c0:	4798      	blx	r3
   199c2:	0003      	movs	r3, r0
   199c4:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   199c6:	68bb      	ldr	r3, [r7, #8]
   199c8:	2b00      	cmp	r3, #0
   199ca:	d032      	beq.n	19a32 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   199cc:	68bb      	ldr	r3, [r7, #8]
   199ce:	2b01      	cmp	r3, #1
   199d0:	d104      	bne.n	199dc <remove_chain+0x54>
   199d2:	230f      	movs	r3, #15
   199d4:	18fb      	adds	r3, r7, r3
   199d6:	2202      	movs	r2, #2
   199d8:	701a      	strb	r2, [r3, #0]
   199da:	e02d      	b.n	19a38 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   199dc:	68bb      	ldr	r3, [r7, #8]
   199de:	3301      	adds	r3, #1
   199e0:	d104      	bne.n	199ec <remove_chain+0x64>
   199e2:	230f      	movs	r3, #15
   199e4:	18fb      	adds	r3, r7, r3
   199e6:	2201      	movs	r2, #1
   199e8:	701a      	strb	r2, [r3, #0]
   199ea:	e025      	b.n	19a38 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   199ec:	230f      	movs	r3, #15
   199ee:	18fc      	adds	r4, r7, r3
   199f0:	6839      	ldr	r1, [r7, #0]
   199f2:	687b      	ldr	r3, [r7, #4]
   199f4:	2200      	movs	r2, #0
   199f6:	0018      	movs	r0, r3
   199f8:	4b14      	ldr	r3, [pc, #80]	; (19a4c <remove_chain+0xc4>)
   199fa:	4798      	blx	r3
   199fc:	0003      	movs	r3, r0
   199fe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   19a00:	230f      	movs	r3, #15
   19a02:	18fb      	adds	r3, r7, r3
   19a04:	781b      	ldrb	r3, [r3, #0]
   19a06:	2b00      	cmp	r3, #0
   19a08:	d115      	bne.n	19a36 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   19a0a:	687b      	ldr	r3, [r7, #4]
   19a0c:	691b      	ldr	r3, [r3, #16]
   19a0e:	3301      	adds	r3, #1
   19a10:	d007      	beq.n	19a22 <remove_chain+0x9a>
				fs->free_clust++;
   19a12:	687b      	ldr	r3, [r7, #4]
   19a14:	691b      	ldr	r3, [r3, #16]
   19a16:	1c5a      	adds	r2, r3, #1
   19a18:	687b      	ldr	r3, [r7, #4]
   19a1a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   19a1c:	687b      	ldr	r3, [r7, #4]
   19a1e:	2201      	movs	r2, #1
   19a20:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   19a22:	68bb      	ldr	r3, [r7, #8]
   19a24:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   19a26:	687b      	ldr	r3, [r7, #4]
   19a28:	699a      	ldr	r2, [r3, #24]
   19a2a:	683b      	ldr	r3, [r7, #0]
   19a2c:	429a      	cmp	r2, r3
   19a2e:	d8c2      	bhi.n	199b6 <remove_chain+0x2e>
   19a30:	e002      	b.n	19a38 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   19a32:	46c0      	nop			; (mov r8, r8)
   19a34:	e000      	b.n	19a38 <remove_chain+0xb0>
			if (res != FR_OK) break;
   19a36:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   19a38:	230f      	movs	r3, #15
   19a3a:	18fb      	adds	r3, r7, r3
   19a3c:	781b      	ldrb	r3, [r3, #0]
}
   19a3e:	0018      	movs	r0, r3
   19a40:	46bd      	mov	sp, r7
   19a42:	b005      	add	sp, #20
   19a44:	bd90      	pop	{r4, r7, pc}
   19a46:	46c0      	nop			; (mov r8, r8)
   19a48:	000195e1 	.word	0x000195e1
   19a4c:	0001974d 	.word	0x0001974d

00019a50 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   19a50:	b590      	push	{r4, r7, lr}
   19a52:	b087      	sub	sp, #28
   19a54:	af00      	add	r7, sp, #0
   19a56:	6078      	str	r0, [r7, #4]
   19a58:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   19a5a:	683b      	ldr	r3, [r7, #0]
   19a5c:	2b00      	cmp	r3, #0
   19a5e:	d10d      	bne.n	19a7c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   19a60:	687b      	ldr	r3, [r7, #4]
   19a62:	68db      	ldr	r3, [r3, #12]
   19a64:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   19a66:	693b      	ldr	r3, [r7, #16]
   19a68:	2b00      	cmp	r3, #0
   19a6a:	d004      	beq.n	19a76 <create_chain+0x26>
   19a6c:	687b      	ldr	r3, [r7, #4]
   19a6e:	699a      	ldr	r2, [r3, #24]
   19a70:	693b      	ldr	r3, [r7, #16]
   19a72:	429a      	cmp	r2, r3
   19a74:	d818      	bhi.n	19aa8 <create_chain+0x58>
   19a76:	2301      	movs	r3, #1
   19a78:	613b      	str	r3, [r7, #16]
   19a7a:	e015      	b.n	19aa8 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   19a7c:	683a      	ldr	r2, [r7, #0]
   19a7e:	687b      	ldr	r3, [r7, #4]
   19a80:	0011      	movs	r1, r2
   19a82:	0018      	movs	r0, r3
   19a84:	4b3e      	ldr	r3, [pc, #248]	; (19b80 <create_chain+0x130>)
   19a86:	4798      	blx	r3
   19a88:	0003      	movs	r3, r0
   19a8a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   19a8c:	68bb      	ldr	r3, [r7, #8]
   19a8e:	2b01      	cmp	r3, #1
   19a90:	d801      	bhi.n	19a96 <create_chain+0x46>
   19a92:	2301      	movs	r3, #1
   19a94:	e070      	b.n	19b78 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   19a96:	687b      	ldr	r3, [r7, #4]
   19a98:	699a      	ldr	r2, [r3, #24]
   19a9a:	68bb      	ldr	r3, [r7, #8]
   19a9c:	429a      	cmp	r2, r3
   19a9e:	d901      	bls.n	19aa4 <create_chain+0x54>
   19aa0:	68bb      	ldr	r3, [r7, #8]
   19aa2:	e069      	b.n	19b78 <create_chain+0x128>
		scl = clst;
   19aa4:	683b      	ldr	r3, [r7, #0]
   19aa6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   19aa8:	693b      	ldr	r3, [r7, #16]
   19aaa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   19aac:	697b      	ldr	r3, [r7, #20]
   19aae:	3301      	adds	r3, #1
   19ab0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   19ab2:	687b      	ldr	r3, [r7, #4]
   19ab4:	699a      	ldr	r2, [r3, #24]
   19ab6:	697b      	ldr	r3, [r7, #20]
   19ab8:	429a      	cmp	r2, r3
   19aba:	d807      	bhi.n	19acc <create_chain+0x7c>
			ncl = 2;
   19abc:	2302      	movs	r3, #2
   19abe:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   19ac0:	697a      	ldr	r2, [r7, #20]
   19ac2:	693b      	ldr	r3, [r7, #16]
   19ac4:	429a      	cmp	r2, r3
   19ac6:	d901      	bls.n	19acc <create_chain+0x7c>
   19ac8:	2300      	movs	r3, #0
   19aca:	e055      	b.n	19b78 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   19acc:	697a      	ldr	r2, [r7, #20]
   19ace:	687b      	ldr	r3, [r7, #4]
   19ad0:	0011      	movs	r1, r2
   19ad2:	0018      	movs	r0, r3
   19ad4:	4b2a      	ldr	r3, [pc, #168]	; (19b80 <create_chain+0x130>)
   19ad6:	4798      	blx	r3
   19ad8:	0003      	movs	r3, r0
   19ada:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   19adc:	68bb      	ldr	r3, [r7, #8]
   19ade:	2b00      	cmp	r3, #0
   19ae0:	d00d      	beq.n	19afe <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   19ae2:	68bb      	ldr	r3, [r7, #8]
   19ae4:	3301      	adds	r3, #1
   19ae6:	d002      	beq.n	19aee <create_chain+0x9e>
   19ae8:	68bb      	ldr	r3, [r7, #8]
   19aea:	2b01      	cmp	r3, #1
   19aec:	d101      	bne.n	19af2 <create_chain+0xa2>
			return cs;
   19aee:	68bb      	ldr	r3, [r7, #8]
   19af0:	e042      	b.n	19b78 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   19af2:	697a      	ldr	r2, [r7, #20]
   19af4:	693b      	ldr	r3, [r7, #16]
   19af6:	429a      	cmp	r2, r3
   19af8:	d1d8      	bne.n	19aac <create_chain+0x5c>
   19afa:	2300      	movs	r3, #0
   19afc:	e03c      	b.n	19b78 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   19afe:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   19b00:	230f      	movs	r3, #15
   19b02:	18fc      	adds	r4, r7, r3
   19b04:	4a1f      	ldr	r2, [pc, #124]	; (19b84 <create_chain+0x134>)
   19b06:	6979      	ldr	r1, [r7, #20]
   19b08:	687b      	ldr	r3, [r7, #4]
   19b0a:	0018      	movs	r0, r3
   19b0c:	4b1e      	ldr	r3, [pc, #120]	; (19b88 <create_chain+0x138>)
   19b0e:	4798      	blx	r3
   19b10:	0003      	movs	r3, r0
   19b12:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   19b14:	230f      	movs	r3, #15
   19b16:	18fb      	adds	r3, r7, r3
   19b18:	781b      	ldrb	r3, [r3, #0]
   19b1a:	2b00      	cmp	r3, #0
   19b1c:	d10c      	bne.n	19b38 <create_chain+0xe8>
   19b1e:	683b      	ldr	r3, [r7, #0]
   19b20:	2b00      	cmp	r3, #0
   19b22:	d009      	beq.n	19b38 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   19b24:	230f      	movs	r3, #15
   19b26:	18fc      	adds	r4, r7, r3
   19b28:	697a      	ldr	r2, [r7, #20]
   19b2a:	6839      	ldr	r1, [r7, #0]
   19b2c:	687b      	ldr	r3, [r7, #4]
   19b2e:	0018      	movs	r0, r3
   19b30:	4b15      	ldr	r3, [pc, #84]	; (19b88 <create_chain+0x138>)
   19b32:	4798      	blx	r3
   19b34:	0003      	movs	r3, r0
   19b36:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   19b38:	230f      	movs	r3, #15
   19b3a:	18fb      	adds	r3, r7, r3
   19b3c:	781b      	ldrb	r3, [r3, #0]
   19b3e:	2b00      	cmp	r3, #0
   19b40:	d10f      	bne.n	19b62 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   19b42:	687b      	ldr	r3, [r7, #4]
   19b44:	697a      	ldr	r2, [r7, #20]
   19b46:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   19b48:	687b      	ldr	r3, [r7, #4]
   19b4a:	691b      	ldr	r3, [r3, #16]
   19b4c:	3301      	adds	r3, #1
   19b4e:	d012      	beq.n	19b76 <create_chain+0x126>
			fs->free_clust--;
   19b50:	687b      	ldr	r3, [r7, #4]
   19b52:	691b      	ldr	r3, [r3, #16]
   19b54:	1e5a      	subs	r2, r3, #1
   19b56:	687b      	ldr	r3, [r7, #4]
   19b58:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   19b5a:	687b      	ldr	r3, [r7, #4]
   19b5c:	2201      	movs	r2, #1
   19b5e:	715a      	strb	r2, [r3, #5]
   19b60:	e009      	b.n	19b76 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   19b62:	230f      	movs	r3, #15
   19b64:	18fb      	adds	r3, r7, r3
   19b66:	781b      	ldrb	r3, [r3, #0]
   19b68:	2b01      	cmp	r3, #1
   19b6a:	d102      	bne.n	19b72 <create_chain+0x122>
   19b6c:	2301      	movs	r3, #1
   19b6e:	425b      	negs	r3, r3
   19b70:	e000      	b.n	19b74 <create_chain+0x124>
   19b72:	2301      	movs	r3, #1
   19b74:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   19b76:	697b      	ldr	r3, [r7, #20]
}
   19b78:	0018      	movs	r0, r3
   19b7a:	46bd      	mov	sp, r7
   19b7c:	b007      	add	sp, #28
   19b7e:	bd90      	pop	{r4, r7, pc}
   19b80:	000195e1 	.word	0x000195e1
   19b84:	0fffffff 	.word	0x0fffffff
   19b88:	0001974d 	.word	0x0001974d

00019b8c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   19b8c:	b580      	push	{r7, lr}
   19b8e:	b084      	sub	sp, #16
   19b90:	af00      	add	r7, sp, #0
   19b92:	6078      	str	r0, [r7, #4]
   19b94:	000a      	movs	r2, r1
   19b96:	1cbb      	adds	r3, r7, #2
   19b98:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   19b9a:	687b      	ldr	r3, [r7, #4]
   19b9c:	1cba      	adds	r2, r7, #2
   19b9e:	8812      	ldrh	r2, [r2, #0]
   19ba0:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   19ba2:	687b      	ldr	r3, [r7, #4]
   19ba4:	689b      	ldr	r3, [r3, #8]
   19ba6:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   19ba8:	68fb      	ldr	r3, [r7, #12]
   19baa:	2b01      	cmp	r3, #1
   19bac:	d005      	beq.n	19bba <dir_sdi+0x2e>
   19bae:	687b      	ldr	r3, [r7, #4]
   19bb0:	681b      	ldr	r3, [r3, #0]
   19bb2:	699a      	ldr	r2, [r3, #24]
   19bb4:	68fb      	ldr	r3, [r7, #12]
   19bb6:	429a      	cmp	r2, r3
   19bb8:	d801      	bhi.n	19bbe <dir_sdi+0x32>
		return FR_INT_ERR;
   19bba:	2302      	movs	r3, #2
   19bbc:	e075      	b.n	19caa <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   19bbe:	68fb      	ldr	r3, [r7, #12]
   19bc0:	2b00      	cmp	r3, #0
   19bc2:	d108      	bne.n	19bd6 <dir_sdi+0x4a>
   19bc4:	687b      	ldr	r3, [r7, #4]
   19bc6:	681b      	ldr	r3, [r3, #0]
   19bc8:	781b      	ldrb	r3, [r3, #0]
   19bca:	2b03      	cmp	r3, #3
   19bcc:	d103      	bne.n	19bd6 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   19bce:	687b      	ldr	r3, [r7, #4]
   19bd0:	681b      	ldr	r3, [r3, #0]
   19bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19bd4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   19bd6:	68fb      	ldr	r3, [r7, #12]
   19bd8:	2b00      	cmp	r3, #0
   19bda:	d116      	bne.n	19c0a <dir_sdi+0x7e>
		dj->clust = clst;
   19bdc:	687b      	ldr	r3, [r7, #4]
   19bde:	68fa      	ldr	r2, [r7, #12]
   19be0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   19be2:	687b      	ldr	r3, [r7, #4]
   19be4:	681b      	ldr	r3, [r3, #0]
   19be6:	891b      	ldrh	r3, [r3, #8]
   19be8:	1cba      	adds	r2, r7, #2
   19bea:	8812      	ldrh	r2, [r2, #0]
   19bec:	429a      	cmp	r2, r3
   19bee:	d301      	bcc.n	19bf4 <dir_sdi+0x68>
			return FR_INT_ERR;
   19bf0:	2302      	movs	r3, #2
   19bf2:	e05a      	b.n	19caa <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   19bf4:	687b      	ldr	r3, [r7, #4]
   19bf6:	681b      	ldr	r3, [r3, #0]
   19bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19bfa:	1cba      	adds	r2, r7, #2
   19bfc:	8812      	ldrh	r2, [r2, #0]
   19bfe:	0912      	lsrs	r2, r2, #4
   19c00:	b292      	uxth	r2, r2
   19c02:	189a      	adds	r2, r3, r2
   19c04:	687b      	ldr	r3, [r7, #4]
   19c06:	611a      	str	r2, [r3, #16]
   19c08:	e042      	b.n	19c90 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   19c0a:	687b      	ldr	r3, [r7, #4]
   19c0c:	681b      	ldr	r3, [r3, #0]
   19c0e:	789b      	ldrb	r3, [r3, #2]
   19c10:	b29a      	uxth	r2, r3
   19c12:	230a      	movs	r3, #10
   19c14:	18fb      	adds	r3, r7, r3
   19c16:	0112      	lsls	r2, r2, #4
   19c18:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   19c1a:	e020      	b.n	19c5e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   19c1c:	687b      	ldr	r3, [r7, #4]
   19c1e:	681b      	ldr	r3, [r3, #0]
   19c20:	68fa      	ldr	r2, [r7, #12]
   19c22:	0011      	movs	r1, r2
   19c24:	0018      	movs	r0, r3
   19c26:	4b23      	ldr	r3, [pc, #140]	; (19cb4 <dir_sdi+0x128>)
   19c28:	4798      	blx	r3
   19c2a:	0003      	movs	r3, r0
   19c2c:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   19c2e:	68fb      	ldr	r3, [r7, #12]
   19c30:	3301      	adds	r3, #1
   19c32:	d101      	bne.n	19c38 <dir_sdi+0xac>
   19c34:	2301      	movs	r3, #1
   19c36:	e038      	b.n	19caa <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   19c38:	68fb      	ldr	r3, [r7, #12]
   19c3a:	2b01      	cmp	r3, #1
   19c3c:	d905      	bls.n	19c4a <dir_sdi+0xbe>
   19c3e:	687b      	ldr	r3, [r7, #4]
   19c40:	681b      	ldr	r3, [r3, #0]
   19c42:	699a      	ldr	r2, [r3, #24]
   19c44:	68fb      	ldr	r3, [r7, #12]
   19c46:	429a      	cmp	r2, r3
   19c48:	d801      	bhi.n	19c4e <dir_sdi+0xc2>
				return FR_INT_ERR;
   19c4a:	2302      	movs	r3, #2
   19c4c:	e02d      	b.n	19caa <dir_sdi+0x11e>
			idx -= ic;
   19c4e:	1cbb      	adds	r3, r7, #2
   19c50:	1cb9      	adds	r1, r7, #2
   19c52:	220a      	movs	r2, #10
   19c54:	18ba      	adds	r2, r7, r2
   19c56:	8809      	ldrh	r1, [r1, #0]
   19c58:	8812      	ldrh	r2, [r2, #0]
   19c5a:	1a8a      	subs	r2, r1, r2
   19c5c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   19c5e:	1cba      	adds	r2, r7, #2
   19c60:	230a      	movs	r3, #10
   19c62:	18fb      	adds	r3, r7, r3
   19c64:	8812      	ldrh	r2, [r2, #0]
   19c66:	881b      	ldrh	r3, [r3, #0]
   19c68:	429a      	cmp	r2, r3
   19c6a:	d2d7      	bcs.n	19c1c <dir_sdi+0x90>
		}
		dj->clust = clst;
   19c6c:	687b      	ldr	r3, [r7, #4]
   19c6e:	68fa      	ldr	r2, [r7, #12]
   19c70:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   19c72:	687b      	ldr	r3, [r7, #4]
   19c74:	681b      	ldr	r3, [r3, #0]
   19c76:	68fa      	ldr	r2, [r7, #12]
   19c78:	0011      	movs	r1, r2
   19c7a:	0018      	movs	r0, r3
   19c7c:	4b0e      	ldr	r3, [pc, #56]	; (19cb8 <dir_sdi+0x12c>)
   19c7e:	4798      	blx	r3
   19c80:	0002      	movs	r2, r0
   19c82:	1cbb      	adds	r3, r7, #2
   19c84:	881b      	ldrh	r3, [r3, #0]
   19c86:	091b      	lsrs	r3, r3, #4
   19c88:	b29b      	uxth	r3, r3
   19c8a:	18d2      	adds	r2, r2, r3
   19c8c:	687b      	ldr	r3, [r7, #4]
   19c8e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   19c90:	687b      	ldr	r3, [r7, #4]
   19c92:	681b      	ldr	r3, [r3, #0]
   19c94:	3330      	adds	r3, #48	; 0x30
   19c96:	001a      	movs	r2, r3
   19c98:	1cbb      	adds	r3, r7, #2
   19c9a:	881b      	ldrh	r3, [r3, #0]
   19c9c:	210f      	movs	r1, #15
   19c9e:	400b      	ands	r3, r1
   19ca0:	015b      	lsls	r3, r3, #5
   19ca2:	18d2      	adds	r2, r2, r3
   19ca4:	687b      	ldr	r3, [r7, #4]
   19ca6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   19ca8:	2300      	movs	r3, #0
}
   19caa:	0018      	movs	r0, r3
   19cac:	46bd      	mov	sp, r7
   19cae:	b004      	add	sp, #16
   19cb0:	bd80      	pop	{r7, pc}
   19cb2:	46c0      	nop			; (mov r8, r8)
   19cb4:	000195e1 	.word	0x000195e1
   19cb8:	000195a9 	.word	0x000195a9

00019cbc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   19cbc:	b590      	push	{r4, r7, lr}
   19cbe:	b085      	sub	sp, #20
   19cc0:	af00      	add	r7, sp, #0
   19cc2:	6078      	str	r0, [r7, #4]
   19cc4:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   19cc6:	687b      	ldr	r3, [r7, #4]
   19cc8:	88da      	ldrh	r2, [r3, #6]
   19cca:	2308      	movs	r3, #8
   19ccc:	18fb      	adds	r3, r7, r3
   19cce:	3201      	adds	r2, #1
   19cd0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   19cd2:	2308      	movs	r3, #8
   19cd4:	18fb      	adds	r3, r7, r3
   19cd6:	881b      	ldrh	r3, [r3, #0]
   19cd8:	2b00      	cmp	r3, #0
   19cda:	d003      	beq.n	19ce4 <dir_next+0x28>
   19cdc:	687b      	ldr	r3, [r7, #4]
   19cde:	691b      	ldr	r3, [r3, #16]
   19ce0:	2b00      	cmp	r3, #0
   19ce2:	d101      	bne.n	19ce8 <dir_next+0x2c>
		return FR_NO_FILE;
   19ce4:	2304      	movs	r3, #4
   19ce6:	e0d2      	b.n	19e8e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   19ce8:	2308      	movs	r3, #8
   19cea:	18fb      	adds	r3, r7, r3
   19cec:	881b      	ldrh	r3, [r3, #0]
   19cee:	220f      	movs	r2, #15
   19cf0:	4013      	ands	r3, r2
   19cf2:	b29b      	uxth	r3, r3
   19cf4:	2b00      	cmp	r3, #0
   19cf6:	d000      	beq.n	19cfa <dir_next+0x3e>
   19cf8:	e0b6      	b.n	19e68 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   19cfa:	687b      	ldr	r3, [r7, #4]
   19cfc:	691b      	ldr	r3, [r3, #16]
   19cfe:	1c5a      	adds	r2, r3, #1
   19d00:	687b      	ldr	r3, [r7, #4]
   19d02:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   19d04:	687b      	ldr	r3, [r7, #4]
   19d06:	68db      	ldr	r3, [r3, #12]
   19d08:	2b00      	cmp	r3, #0
   19d0a:	d10a      	bne.n	19d22 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   19d0c:	687b      	ldr	r3, [r7, #4]
   19d0e:	681b      	ldr	r3, [r3, #0]
   19d10:	891b      	ldrh	r3, [r3, #8]
   19d12:	2208      	movs	r2, #8
   19d14:	18ba      	adds	r2, r7, r2
   19d16:	8812      	ldrh	r2, [r2, #0]
   19d18:	429a      	cmp	r2, r3
   19d1a:	d200      	bcs.n	19d1e <dir_next+0x62>
   19d1c:	e0a4      	b.n	19e68 <dir_next+0x1ac>
				return FR_NO_FILE;
   19d1e:	2304      	movs	r3, #4
   19d20:	e0b5      	b.n	19e8e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   19d22:	2308      	movs	r3, #8
   19d24:	18fb      	adds	r3, r7, r3
   19d26:	881b      	ldrh	r3, [r3, #0]
   19d28:	091b      	lsrs	r3, r3, #4
   19d2a:	b29b      	uxth	r3, r3
   19d2c:	001a      	movs	r2, r3
   19d2e:	687b      	ldr	r3, [r7, #4]
   19d30:	681b      	ldr	r3, [r3, #0]
   19d32:	789b      	ldrb	r3, [r3, #2]
   19d34:	3b01      	subs	r3, #1
   19d36:	4013      	ands	r3, r2
   19d38:	d000      	beq.n	19d3c <dir_next+0x80>
   19d3a:	e095      	b.n	19e68 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   19d3c:	687b      	ldr	r3, [r7, #4]
   19d3e:	681a      	ldr	r2, [r3, #0]
   19d40:	687b      	ldr	r3, [r7, #4]
   19d42:	68db      	ldr	r3, [r3, #12]
   19d44:	0019      	movs	r1, r3
   19d46:	0010      	movs	r0, r2
   19d48:	4b53      	ldr	r3, [pc, #332]	; (19e98 <dir_next+0x1dc>)
   19d4a:	4798      	blx	r3
   19d4c:	0003      	movs	r3, r0
   19d4e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   19d50:	68fb      	ldr	r3, [r7, #12]
   19d52:	2b01      	cmp	r3, #1
   19d54:	d801      	bhi.n	19d5a <dir_next+0x9e>
   19d56:	2302      	movs	r3, #2
   19d58:	e099      	b.n	19e8e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   19d5a:	68fb      	ldr	r3, [r7, #12]
   19d5c:	3301      	adds	r3, #1
   19d5e:	d101      	bne.n	19d64 <dir_next+0xa8>
   19d60:	2301      	movs	r3, #1
   19d62:	e094      	b.n	19e8e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   19d64:	687b      	ldr	r3, [r7, #4]
   19d66:	681b      	ldr	r3, [r3, #0]
   19d68:	699a      	ldr	r2, [r3, #24]
   19d6a:	68fb      	ldr	r3, [r7, #12]
   19d6c:	429a      	cmp	r2, r3
   19d6e:	d900      	bls.n	19d72 <dir_next+0xb6>
   19d70:	e06d      	b.n	19e4e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   19d72:	683b      	ldr	r3, [r7, #0]
   19d74:	2b00      	cmp	r3, #0
   19d76:	d101      	bne.n	19d7c <dir_next+0xc0>
   19d78:	2304      	movs	r3, #4
   19d7a:	e088      	b.n	19e8e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   19d7c:	687b      	ldr	r3, [r7, #4]
   19d7e:	681a      	ldr	r2, [r3, #0]
   19d80:	687b      	ldr	r3, [r7, #4]
   19d82:	68db      	ldr	r3, [r3, #12]
   19d84:	0019      	movs	r1, r3
   19d86:	0010      	movs	r0, r2
   19d88:	4b44      	ldr	r3, [pc, #272]	; (19e9c <dir_next+0x1e0>)
   19d8a:	4798      	blx	r3
   19d8c:	0003      	movs	r3, r0
   19d8e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   19d90:	68fb      	ldr	r3, [r7, #12]
   19d92:	2b00      	cmp	r3, #0
   19d94:	d101      	bne.n	19d9a <dir_next+0xde>
   19d96:	2307      	movs	r3, #7
   19d98:	e079      	b.n	19e8e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   19d9a:	68fb      	ldr	r3, [r7, #12]
   19d9c:	2b01      	cmp	r3, #1
   19d9e:	d101      	bne.n	19da4 <dir_next+0xe8>
   19da0:	2302      	movs	r3, #2
   19da2:	e074      	b.n	19e8e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   19da4:	68fb      	ldr	r3, [r7, #12]
   19da6:	3301      	adds	r3, #1
   19da8:	d101      	bne.n	19dae <dir_next+0xf2>
   19daa:	2301      	movs	r3, #1
   19dac:	e06f      	b.n	19e8e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   19dae:	687b      	ldr	r3, [r7, #4]
   19db0:	681b      	ldr	r3, [r3, #0]
   19db2:	2100      	movs	r1, #0
   19db4:	0018      	movs	r0, r3
   19db6:	4b3a      	ldr	r3, [pc, #232]	; (19ea0 <dir_next+0x1e4>)
   19db8:	4798      	blx	r3
   19dba:	1e03      	subs	r3, r0, #0
   19dbc:	d001      	beq.n	19dc2 <dir_next+0x106>
   19dbe:	2301      	movs	r3, #1
   19dc0:	e065      	b.n	19e8e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   19dc2:	687b      	ldr	r3, [r7, #4]
   19dc4:	681b      	ldr	r3, [r3, #0]
   19dc6:	3330      	adds	r3, #48	; 0x30
   19dc8:	0018      	movs	r0, r3
   19dca:	2380      	movs	r3, #128	; 0x80
   19dcc:	009b      	lsls	r3, r3, #2
   19dce:	001a      	movs	r2, r3
   19dd0:	2100      	movs	r1, #0
   19dd2:	4b34      	ldr	r3, [pc, #208]	; (19ea4 <dir_next+0x1e8>)
   19dd4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   19dd6:	687b      	ldr	r3, [r7, #4]
   19dd8:	681c      	ldr	r4, [r3, #0]
   19dda:	687b      	ldr	r3, [r7, #4]
   19ddc:	681b      	ldr	r3, [r3, #0]
   19dde:	68fa      	ldr	r2, [r7, #12]
   19de0:	0011      	movs	r1, r2
   19de2:	0018      	movs	r0, r3
   19de4:	4b30      	ldr	r3, [pc, #192]	; (19ea8 <dir_next+0x1ec>)
   19de6:	4798      	blx	r3
   19de8:	0003      	movs	r3, r0
   19dea:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   19dec:	230b      	movs	r3, #11
   19dee:	18fb      	adds	r3, r7, r3
   19df0:	2200      	movs	r2, #0
   19df2:	701a      	strb	r2, [r3, #0]
   19df4:	e019      	b.n	19e2a <dir_next+0x16e>
						dj->fs->wflag = 1;
   19df6:	687b      	ldr	r3, [r7, #4]
   19df8:	681b      	ldr	r3, [r3, #0]
   19dfa:	2201      	movs	r2, #1
   19dfc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   19dfe:	687b      	ldr	r3, [r7, #4]
   19e00:	681b      	ldr	r3, [r3, #0]
   19e02:	2100      	movs	r1, #0
   19e04:	0018      	movs	r0, r3
   19e06:	4b26      	ldr	r3, [pc, #152]	; (19ea0 <dir_next+0x1e4>)
   19e08:	4798      	blx	r3
   19e0a:	1e03      	subs	r3, r0, #0
   19e0c:	d001      	beq.n	19e12 <dir_next+0x156>
   19e0e:	2301      	movs	r3, #1
   19e10:	e03d      	b.n	19e8e <dir_next+0x1d2>
						dj->fs->winsect++;
   19e12:	687b      	ldr	r3, [r7, #4]
   19e14:	681b      	ldr	r3, [r3, #0]
   19e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19e18:	3201      	adds	r2, #1
   19e1a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   19e1c:	230b      	movs	r3, #11
   19e1e:	18fb      	adds	r3, r7, r3
   19e20:	781a      	ldrb	r2, [r3, #0]
   19e22:	230b      	movs	r3, #11
   19e24:	18fb      	adds	r3, r7, r3
   19e26:	3201      	adds	r2, #1
   19e28:	701a      	strb	r2, [r3, #0]
   19e2a:	687b      	ldr	r3, [r7, #4]
   19e2c:	681b      	ldr	r3, [r3, #0]
   19e2e:	789b      	ldrb	r3, [r3, #2]
   19e30:	220b      	movs	r2, #11
   19e32:	18ba      	adds	r2, r7, r2
   19e34:	7812      	ldrb	r2, [r2, #0]
   19e36:	429a      	cmp	r2, r3
   19e38:	d3dd      	bcc.n	19df6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   19e3a:	687b      	ldr	r3, [r7, #4]
   19e3c:	681b      	ldr	r3, [r3, #0]
   19e3e:	687a      	ldr	r2, [r7, #4]
   19e40:	6812      	ldr	r2, [r2, #0]
   19e42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   19e44:	220b      	movs	r2, #11
   19e46:	18ba      	adds	r2, r7, r2
   19e48:	7812      	ldrb	r2, [r2, #0]
   19e4a:	1a8a      	subs	r2, r1, r2
   19e4c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   19e4e:	687b      	ldr	r3, [r7, #4]
   19e50:	68fa      	ldr	r2, [r7, #12]
   19e52:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   19e54:	687b      	ldr	r3, [r7, #4]
   19e56:	681b      	ldr	r3, [r3, #0]
   19e58:	68fa      	ldr	r2, [r7, #12]
   19e5a:	0011      	movs	r1, r2
   19e5c:	0018      	movs	r0, r3
   19e5e:	4b12      	ldr	r3, [pc, #72]	; (19ea8 <dir_next+0x1ec>)
   19e60:	4798      	blx	r3
   19e62:	0002      	movs	r2, r0
   19e64:	687b      	ldr	r3, [r7, #4]
   19e66:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   19e68:	687b      	ldr	r3, [r7, #4]
   19e6a:	2208      	movs	r2, #8
   19e6c:	18ba      	adds	r2, r7, r2
   19e6e:	8812      	ldrh	r2, [r2, #0]
   19e70:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   19e72:	687b      	ldr	r3, [r7, #4]
   19e74:	681b      	ldr	r3, [r3, #0]
   19e76:	3330      	adds	r3, #48	; 0x30
   19e78:	001a      	movs	r2, r3
   19e7a:	2308      	movs	r3, #8
   19e7c:	18fb      	adds	r3, r7, r3
   19e7e:	881b      	ldrh	r3, [r3, #0]
   19e80:	210f      	movs	r1, #15
   19e82:	400b      	ands	r3, r1
   19e84:	015b      	lsls	r3, r3, #5
   19e86:	18d2      	adds	r2, r2, r3
   19e88:	687b      	ldr	r3, [r7, #4]
   19e8a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   19e8c:	2300      	movs	r3, #0
}
   19e8e:	0018      	movs	r0, r3
   19e90:	46bd      	mov	sp, r7
   19e92:	b005      	add	sp, #20
   19e94:	bd90      	pop	{r4, r7, pc}
   19e96:	46c0      	nop			; (mov r8, r8)
   19e98:	000195e1 	.word	0x000195e1
   19e9c:	00019a51 	.word	0x00019a51
   19ea0:	00019349 	.word	0x00019349
   19ea4:	0001929d 	.word	0x0001929d
   19ea8:	000195a9 	.word	0x000195a9

00019eac <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   19eac:	b590      	push	{r4, r7, lr}
   19eae:	b087      	sub	sp, #28
   19eb0:	af00      	add	r7, sp, #0
   19eb2:	6078      	str	r0, [r7, #4]
   19eb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   19eb6:	683b      	ldr	r3, [r7, #0]
   19eb8:	781b      	ldrb	r3, [r3, #0]
   19eba:	001a      	movs	r2, r3
   19ebc:	2340      	movs	r3, #64	; 0x40
   19ebe:	439a      	bics	r2, r3
   19ec0:	0013      	movs	r3, r2
   19ec2:	1e5a      	subs	r2, r3, #1
   19ec4:	0013      	movs	r3, r2
   19ec6:	005b      	lsls	r3, r3, #1
   19ec8:	189b      	adds	r3, r3, r2
   19eca:	009b      	lsls	r3, r3, #2
   19ecc:	189b      	adds	r3, r3, r2
   19ece:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   19ed0:	2300      	movs	r3, #0
   19ed2:	613b      	str	r3, [r7, #16]
   19ed4:	230e      	movs	r3, #14
   19ed6:	18fb      	adds	r3, r7, r3
   19ed8:	2201      	movs	r2, #1
   19eda:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   19edc:	4a31      	ldr	r2, [pc, #196]	; (19fa4 <cmp_lfn+0xf8>)
   19ede:	693b      	ldr	r3, [r7, #16]
   19ee0:	18d3      	adds	r3, r2, r3
   19ee2:	781b      	ldrb	r3, [r3, #0]
   19ee4:	3301      	adds	r3, #1
   19ee6:	683a      	ldr	r2, [r7, #0]
   19ee8:	18d3      	adds	r3, r2, r3
   19eea:	781b      	ldrb	r3, [r3, #0]
   19eec:	021b      	lsls	r3, r3, #8
   19eee:	b21a      	sxth	r2, r3
   19ef0:	492c      	ldr	r1, [pc, #176]	; (19fa4 <cmp_lfn+0xf8>)
   19ef2:	693b      	ldr	r3, [r7, #16]
   19ef4:	18cb      	adds	r3, r1, r3
   19ef6:	781b      	ldrb	r3, [r3, #0]
   19ef8:	0019      	movs	r1, r3
   19efa:	683b      	ldr	r3, [r7, #0]
   19efc:	185b      	adds	r3, r3, r1
   19efe:	781b      	ldrb	r3, [r3, #0]
   19f00:	b21b      	sxth	r3, r3
   19f02:	4313      	orrs	r3, r2
   19f04:	b21a      	sxth	r2, r3
   19f06:	230c      	movs	r3, #12
   19f08:	18fb      	adds	r3, r7, r3
   19f0a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   19f0c:	230e      	movs	r3, #14
   19f0e:	18fb      	adds	r3, r7, r3
   19f10:	881b      	ldrh	r3, [r3, #0]
   19f12:	2b00      	cmp	r3, #0
   19f14:	d01f      	beq.n	19f56 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   19f16:	230e      	movs	r3, #14
   19f18:	18fc      	adds	r4, r7, r3
   19f1a:	230c      	movs	r3, #12
   19f1c:	18fb      	adds	r3, r7, r3
   19f1e:	881b      	ldrh	r3, [r3, #0]
   19f20:	0018      	movs	r0, r3
   19f22:	4b21      	ldr	r3, [pc, #132]	; (19fa8 <cmp_lfn+0xfc>)
   19f24:	4798      	blx	r3
   19f26:	0003      	movs	r3, r0
   19f28:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   19f2a:	697b      	ldr	r3, [r7, #20]
   19f2c:	2bfe      	cmp	r3, #254	; 0xfe
   19f2e:	d810      	bhi.n	19f52 <cmp_lfn+0xa6>
   19f30:	697b      	ldr	r3, [r7, #20]
   19f32:	1c5a      	adds	r2, r3, #1
   19f34:	617a      	str	r2, [r7, #20]
   19f36:	005b      	lsls	r3, r3, #1
   19f38:	687a      	ldr	r2, [r7, #4]
   19f3a:	18d3      	adds	r3, r2, r3
   19f3c:	881b      	ldrh	r3, [r3, #0]
   19f3e:	0018      	movs	r0, r3
   19f40:	4b19      	ldr	r3, [pc, #100]	; (19fa8 <cmp_lfn+0xfc>)
   19f42:	4798      	blx	r3
   19f44:	0003      	movs	r3, r0
   19f46:	001a      	movs	r2, r3
   19f48:	230e      	movs	r3, #14
   19f4a:	18fb      	adds	r3, r7, r3
   19f4c:	881b      	ldrh	r3, [r3, #0]
   19f4e:	4293      	cmp	r3, r2
   19f50:	d009      	beq.n	19f66 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   19f52:	2300      	movs	r3, #0
   19f54:	e022      	b.n	19f9c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   19f56:	230c      	movs	r3, #12
   19f58:	18fb      	adds	r3, r7, r3
   19f5a:	881b      	ldrh	r3, [r3, #0]
   19f5c:	4a13      	ldr	r2, [pc, #76]	; (19fac <cmp_lfn+0x100>)
   19f5e:	4293      	cmp	r3, r2
   19f60:	d001      	beq.n	19f66 <cmp_lfn+0xba>
   19f62:	2300      	movs	r3, #0
   19f64:	e01a      	b.n	19f9c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   19f66:	693b      	ldr	r3, [r7, #16]
   19f68:	3301      	adds	r3, #1
   19f6a:	613b      	str	r3, [r7, #16]
   19f6c:	693b      	ldr	r3, [r7, #16]
   19f6e:	2b0c      	cmp	r3, #12
   19f70:	d9b4      	bls.n	19edc <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   19f72:	683b      	ldr	r3, [r7, #0]
   19f74:	781b      	ldrb	r3, [r3, #0]
   19f76:	001a      	movs	r2, r3
   19f78:	2340      	movs	r3, #64	; 0x40
   19f7a:	4013      	ands	r3, r2
   19f7c:	d00d      	beq.n	19f9a <cmp_lfn+0xee>
   19f7e:	230e      	movs	r3, #14
   19f80:	18fb      	adds	r3, r7, r3
   19f82:	881b      	ldrh	r3, [r3, #0]
   19f84:	2b00      	cmp	r3, #0
   19f86:	d008      	beq.n	19f9a <cmp_lfn+0xee>
   19f88:	697b      	ldr	r3, [r7, #20]
   19f8a:	005b      	lsls	r3, r3, #1
   19f8c:	687a      	ldr	r2, [r7, #4]
   19f8e:	18d3      	adds	r3, r2, r3
   19f90:	881b      	ldrh	r3, [r3, #0]
   19f92:	2b00      	cmp	r3, #0
   19f94:	d001      	beq.n	19f9a <cmp_lfn+0xee>
		return 0;
   19f96:	2300      	movs	r3, #0
   19f98:	e000      	b.n	19f9c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   19f9a:	2301      	movs	r3, #1
}
   19f9c:	0018      	movs	r0, r3
   19f9e:	46bd      	mov	sp, r7
   19fa0:	b007      	add	sp, #28
   19fa2:	bd90      	pop	{r4, r7, pc}
   19fa4:	00028368 	.word	0x00028368
   19fa8:	0001bf59 	.word	0x0001bf59
   19fac:	0000ffff 	.word	0x0000ffff

00019fb0 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   19fb0:	b580      	push	{r7, lr}
   19fb2:	b088      	sub	sp, #32
   19fb4:	af00      	add	r7, sp, #0
   19fb6:	60f8      	str	r0, [r7, #12]
   19fb8:	60b9      	str	r1, [r7, #8]
   19fba:	0019      	movs	r1, r3
   19fbc:	1dfb      	adds	r3, r7, #7
   19fbe:	701a      	strb	r2, [r3, #0]
   19fc0:	1dbb      	adds	r3, r7, #6
   19fc2:	1c0a      	adds	r2, r1, #0
   19fc4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   19fc6:	68bb      	ldr	r3, [r7, #8]
   19fc8:	330d      	adds	r3, #13
   19fca:	1dba      	adds	r2, r7, #6
   19fcc:	7812      	ldrb	r2, [r2, #0]
   19fce:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   19fd0:	68bb      	ldr	r3, [r7, #8]
   19fd2:	330b      	adds	r3, #11
   19fd4:	220f      	movs	r2, #15
   19fd6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   19fd8:	68bb      	ldr	r3, [r7, #8]
   19fda:	330c      	adds	r3, #12
   19fdc:	2200      	movs	r2, #0
   19fde:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   19fe0:	68bb      	ldr	r3, [r7, #8]
   19fe2:	331a      	adds	r3, #26
   19fe4:	2200      	movs	r2, #0
   19fe6:	701a      	strb	r2, [r3, #0]
   19fe8:	68bb      	ldr	r3, [r7, #8]
   19fea:	331b      	adds	r3, #27
   19fec:	2200      	movs	r2, #0
   19fee:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   19ff0:	1dfb      	adds	r3, r7, #7
   19ff2:	781b      	ldrb	r3, [r3, #0]
   19ff4:	1e5a      	subs	r2, r3, #1
   19ff6:	0013      	movs	r3, r2
   19ff8:	005b      	lsls	r3, r3, #1
   19ffa:	189b      	adds	r3, r3, r2
   19ffc:	009b      	lsls	r3, r3, #2
   19ffe:	189b      	adds	r3, r3, r2
   1a000:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   1a002:	2316      	movs	r3, #22
   1a004:	18fb      	adds	r3, r7, r3
   1a006:	2200      	movs	r2, #0
   1a008:	801a      	strh	r2, [r3, #0]
   1a00a:	2300      	movs	r3, #0
   1a00c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1a00e:	2316      	movs	r3, #22
   1a010:	18fb      	adds	r3, r7, r3
   1a012:	881b      	ldrh	r3, [r3, #0]
   1a014:	4a28      	ldr	r2, [pc, #160]	; (1a0b8 <fit_lfn+0x108>)
   1a016:	4293      	cmp	r3, r2
   1a018:	d009      	beq.n	1a02e <fit_lfn+0x7e>
   1a01a:	69fb      	ldr	r3, [r7, #28]
   1a01c:	1c5a      	adds	r2, r3, #1
   1a01e:	61fa      	str	r2, [r7, #28]
   1a020:	005b      	lsls	r3, r3, #1
   1a022:	68fa      	ldr	r2, [r7, #12]
   1a024:	18d2      	adds	r2, r2, r3
   1a026:	2316      	movs	r3, #22
   1a028:	18fb      	adds	r3, r7, r3
   1a02a:	8812      	ldrh	r2, [r2, #0]
   1a02c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1a02e:	4a23      	ldr	r2, [pc, #140]	; (1a0bc <fit_lfn+0x10c>)
   1a030:	69bb      	ldr	r3, [r7, #24]
   1a032:	18d3      	adds	r3, r2, r3
   1a034:	781b      	ldrb	r3, [r3, #0]
   1a036:	001a      	movs	r2, r3
   1a038:	68bb      	ldr	r3, [r7, #8]
   1a03a:	189b      	adds	r3, r3, r2
   1a03c:	2216      	movs	r2, #22
   1a03e:	18ba      	adds	r2, r7, r2
   1a040:	8812      	ldrh	r2, [r2, #0]
   1a042:	b2d2      	uxtb	r2, r2
   1a044:	701a      	strb	r2, [r3, #0]
   1a046:	4a1d      	ldr	r2, [pc, #116]	; (1a0bc <fit_lfn+0x10c>)
   1a048:	69bb      	ldr	r3, [r7, #24]
   1a04a:	18d3      	adds	r3, r2, r3
   1a04c:	781b      	ldrb	r3, [r3, #0]
   1a04e:	3301      	adds	r3, #1
   1a050:	68ba      	ldr	r2, [r7, #8]
   1a052:	18d3      	adds	r3, r2, r3
   1a054:	2216      	movs	r2, #22
   1a056:	18ba      	adds	r2, r7, r2
   1a058:	8812      	ldrh	r2, [r2, #0]
   1a05a:	0a12      	lsrs	r2, r2, #8
   1a05c:	b292      	uxth	r2, r2
   1a05e:	b2d2      	uxtb	r2, r2
   1a060:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   1a062:	2316      	movs	r3, #22
   1a064:	18fb      	adds	r3, r7, r3
   1a066:	881b      	ldrh	r3, [r3, #0]
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d104      	bne.n	1a076 <fit_lfn+0xc6>
   1a06c:	2316      	movs	r3, #22
   1a06e:	18fb      	adds	r3, r7, r3
   1a070:	2201      	movs	r2, #1
   1a072:	4252      	negs	r2, r2
   1a074:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   1a076:	69bb      	ldr	r3, [r7, #24]
   1a078:	3301      	adds	r3, #1
   1a07a:	61bb      	str	r3, [r7, #24]
   1a07c:	69bb      	ldr	r3, [r7, #24]
   1a07e:	2b0c      	cmp	r3, #12
   1a080:	d9c5      	bls.n	1a00e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   1a082:	2316      	movs	r3, #22
   1a084:	18fb      	adds	r3, r7, r3
   1a086:	881b      	ldrh	r3, [r3, #0]
   1a088:	4a0b      	ldr	r2, [pc, #44]	; (1a0b8 <fit_lfn+0x108>)
   1a08a:	4293      	cmp	r3, r2
   1a08c:	d006      	beq.n	1a09c <fit_lfn+0xec>
   1a08e:	69fb      	ldr	r3, [r7, #28]
   1a090:	005b      	lsls	r3, r3, #1
   1a092:	68fa      	ldr	r2, [r7, #12]
   1a094:	18d3      	adds	r3, r2, r3
   1a096:	881b      	ldrh	r3, [r3, #0]
   1a098:	2b00      	cmp	r3, #0
   1a09a:	d105      	bne.n	1a0a8 <fit_lfn+0xf8>
   1a09c:	1dfb      	adds	r3, r7, #7
   1a09e:	1dfa      	adds	r2, r7, #7
   1a0a0:	7812      	ldrb	r2, [r2, #0]
   1a0a2:	2140      	movs	r1, #64	; 0x40
   1a0a4:	430a      	orrs	r2, r1
   1a0a6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   1a0a8:	68bb      	ldr	r3, [r7, #8]
   1a0aa:	1dfa      	adds	r2, r7, #7
   1a0ac:	7812      	ldrb	r2, [r2, #0]
   1a0ae:	701a      	strb	r2, [r3, #0]
}
   1a0b0:	46c0      	nop			; (mov r8, r8)
   1a0b2:	46bd      	mov	sp, r7
   1a0b4:	b008      	add	sp, #32
   1a0b6:	bd80      	pop	{r7, pc}
   1a0b8:	0000ffff 	.word	0x0000ffff
   1a0bc:	00028368 	.word	0x00028368

0001a0c0 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   1a0c0:	b580      	push	{r7, lr}
   1a0c2:	b08a      	sub	sp, #40	; 0x28
   1a0c4:	af00      	add	r7, sp, #0
   1a0c6:	60f8      	str	r0, [r7, #12]
   1a0c8:	60b9      	str	r1, [r7, #8]
   1a0ca:	607a      	str	r2, [r7, #4]
   1a0cc:	001a      	movs	r2, r3
   1a0ce:	1cbb      	adds	r3, r7, #2
   1a0d0:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   1a0d2:	68b9      	ldr	r1, [r7, #8]
   1a0d4:	68fb      	ldr	r3, [r7, #12]
   1a0d6:	220b      	movs	r2, #11
   1a0d8:	0018      	movs	r0, r3
   1a0da:	4b38      	ldr	r3, [pc, #224]	; (1a1bc <gen_numname+0xfc>)
   1a0dc:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1a0de:	1cbb      	adds	r3, r7, #2
   1a0e0:	881b      	ldrh	r3, [r3, #0]
   1a0e2:	2b05      	cmp	r3, #5
   1a0e4:	d911      	bls.n	1a10a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   1a0e6:	1cbb      	adds	r3, r7, #2
   1a0e8:	881b      	ldrh	r3, [r3, #0]
   1a0ea:	b29a      	uxth	r2, r3
   1a0ec:	0852      	lsrs	r2, r2, #1
   1a0ee:	03db      	lsls	r3, r3, #15
   1a0f0:	4313      	orrs	r3, r2
   1a0f2:	b299      	uxth	r1, r3
   1a0f4:	687b      	ldr	r3, [r7, #4]
   1a0f6:	1c9a      	adds	r2, r3, #2
   1a0f8:	607a      	str	r2, [r7, #4]
   1a0fa:	881a      	ldrh	r2, [r3, #0]
   1a0fc:	1cbb      	adds	r3, r7, #2
   1a0fe:	188a      	adds	r2, r1, r2
   1a100:	801a      	strh	r2, [r3, #0]
   1a102:	687b      	ldr	r3, [r7, #4]
   1a104:	881b      	ldrh	r3, [r3, #0]
   1a106:	2b00      	cmp	r3, #0
   1a108:	d1ed      	bne.n	1a0e6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   1a10a:	2307      	movs	r3, #7
   1a10c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   1a10e:	1cbb      	adds	r3, r7, #2
   1a110:	881b      	ldrh	r3, [r3, #0]
   1a112:	b2db      	uxtb	r3, r3
   1a114:	220f      	movs	r2, #15
   1a116:	4013      	ands	r3, r2
   1a118:	b2da      	uxtb	r2, r3
   1a11a:	2327      	movs	r3, #39	; 0x27
   1a11c:	18fb      	adds	r3, r7, r3
   1a11e:	3230      	adds	r2, #48	; 0x30
   1a120:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   1a122:	2327      	movs	r3, #39	; 0x27
   1a124:	18fb      	adds	r3, r7, r3
   1a126:	781b      	ldrb	r3, [r3, #0]
   1a128:	2b39      	cmp	r3, #57	; 0x39
   1a12a:	d906      	bls.n	1a13a <gen_numname+0x7a>
   1a12c:	2327      	movs	r3, #39	; 0x27
   1a12e:	18fb      	adds	r3, r7, r3
   1a130:	2227      	movs	r2, #39	; 0x27
   1a132:	18ba      	adds	r2, r7, r2
   1a134:	7812      	ldrb	r2, [r2, #0]
   1a136:	3207      	adds	r2, #7
   1a138:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   1a13a:	6a3b      	ldr	r3, [r7, #32]
   1a13c:	1e5a      	subs	r2, r3, #1
   1a13e:	623a      	str	r2, [r7, #32]
   1a140:	2214      	movs	r2, #20
   1a142:	18ba      	adds	r2, r7, r2
   1a144:	2127      	movs	r1, #39	; 0x27
   1a146:	1879      	adds	r1, r7, r1
   1a148:	7809      	ldrb	r1, [r1, #0]
   1a14a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   1a14c:	1cbb      	adds	r3, r7, #2
   1a14e:	1cba      	adds	r2, r7, #2
   1a150:	8812      	ldrh	r2, [r2, #0]
   1a152:	0912      	lsrs	r2, r2, #4
   1a154:	801a      	strh	r2, [r3, #0]
	} while (seq);
   1a156:	1cbb      	adds	r3, r7, #2
   1a158:	881b      	ldrh	r3, [r3, #0]
   1a15a:	2b00      	cmp	r3, #0
   1a15c:	d1d7      	bne.n	1a10e <gen_numname+0x4e>
	ns[i] = '~';
   1a15e:	2314      	movs	r3, #20
   1a160:	18fa      	adds	r2, r7, r3
   1a162:	6a3b      	ldr	r3, [r7, #32]
   1a164:	18d3      	adds	r3, r2, r3
   1a166:	227e      	movs	r2, #126	; 0x7e
   1a168:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   1a16a:	2300      	movs	r3, #0
   1a16c:	61fb      	str	r3, [r7, #28]
   1a16e:	e002      	b.n	1a176 <gen_numname+0xb6>
   1a170:	69fb      	ldr	r3, [r7, #28]
   1a172:	3301      	adds	r3, #1
   1a174:	61fb      	str	r3, [r7, #28]
   1a176:	69fa      	ldr	r2, [r7, #28]
   1a178:	6a3b      	ldr	r3, [r7, #32]
   1a17a:	429a      	cmp	r2, r3
   1a17c:	d205      	bcs.n	1a18a <gen_numname+0xca>
   1a17e:	68fa      	ldr	r2, [r7, #12]
   1a180:	69fb      	ldr	r3, [r7, #28]
   1a182:	18d3      	adds	r3, r2, r3
   1a184:	781b      	ldrb	r3, [r3, #0]
   1a186:	2b20      	cmp	r3, #32
   1a188:	d1f2      	bne.n	1a170 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1a18a:	69fb      	ldr	r3, [r7, #28]
   1a18c:	1c5a      	adds	r2, r3, #1
   1a18e:	61fa      	str	r2, [r7, #28]
   1a190:	68fa      	ldr	r2, [r7, #12]
   1a192:	18d2      	adds	r2, r2, r3
   1a194:	6a3b      	ldr	r3, [r7, #32]
   1a196:	2b07      	cmp	r3, #7
   1a198:	d806      	bhi.n	1a1a8 <gen_numname+0xe8>
   1a19a:	6a3b      	ldr	r3, [r7, #32]
   1a19c:	1c59      	adds	r1, r3, #1
   1a19e:	6239      	str	r1, [r7, #32]
   1a1a0:	2114      	movs	r1, #20
   1a1a2:	1879      	adds	r1, r7, r1
   1a1a4:	5ccb      	ldrb	r3, [r1, r3]
   1a1a6:	e000      	b.n	1a1aa <gen_numname+0xea>
   1a1a8:	2320      	movs	r3, #32
   1a1aa:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   1a1ac:	69fb      	ldr	r3, [r7, #28]
   1a1ae:	2b07      	cmp	r3, #7
   1a1b0:	d9eb      	bls.n	1a18a <gen_numname+0xca>
}
   1a1b2:	46c0      	nop			; (mov r8, r8)
   1a1b4:	46bd      	mov	sp, r7
   1a1b6:	b00a      	add	sp, #40	; 0x28
   1a1b8:	bd80      	pop	{r7, pc}
   1a1ba:	46c0      	nop			; (mov r8, r8)
   1a1bc:	00019265 	.word	0x00019265

0001a1c0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   1a1c0:	b580      	push	{r7, lr}
   1a1c2:	b084      	sub	sp, #16
   1a1c4:	af00      	add	r7, sp, #0
   1a1c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   1a1c8:	230f      	movs	r3, #15
   1a1ca:	18fb      	adds	r3, r7, r3
   1a1cc:	2200      	movs	r2, #0
   1a1ce:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   1a1d0:	230b      	movs	r3, #11
   1a1d2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1a1d4:	230f      	movs	r3, #15
   1a1d6:	18fb      	adds	r3, r7, r3
   1a1d8:	781b      	ldrb	r3, [r3, #0]
   1a1da:	b2da      	uxtb	r2, r3
   1a1dc:	0852      	lsrs	r2, r2, #1
   1a1de:	01db      	lsls	r3, r3, #7
   1a1e0:	4313      	orrs	r3, r2
   1a1e2:	b2d9      	uxtb	r1, r3
   1a1e4:	687b      	ldr	r3, [r7, #4]
   1a1e6:	1c5a      	adds	r2, r3, #1
   1a1e8:	607a      	str	r2, [r7, #4]
   1a1ea:	781a      	ldrb	r2, [r3, #0]
   1a1ec:	230f      	movs	r3, #15
   1a1ee:	18fb      	adds	r3, r7, r3
   1a1f0:	188a      	adds	r2, r1, r2
   1a1f2:	701a      	strb	r2, [r3, #0]
   1a1f4:	68bb      	ldr	r3, [r7, #8]
   1a1f6:	3b01      	subs	r3, #1
   1a1f8:	60bb      	str	r3, [r7, #8]
   1a1fa:	68bb      	ldr	r3, [r7, #8]
   1a1fc:	2b00      	cmp	r3, #0
   1a1fe:	d1e9      	bne.n	1a1d4 <sum_sfn+0x14>
	return sum;
   1a200:	230f      	movs	r3, #15
   1a202:	18fb      	adds	r3, r7, r3
   1a204:	781b      	ldrb	r3, [r3, #0]
}
   1a206:	0018      	movs	r0, r3
   1a208:	46bd      	mov	sp, r7
   1a20a:	b004      	add	sp, #16
   1a20c:	bd80      	pop	{r7, pc}
	...

0001a210 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   1a210:	b590      	push	{r4, r7, lr}
   1a212:	b087      	sub	sp, #28
   1a214:	af00      	add	r7, sp, #0
   1a216:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   1a218:	2317      	movs	r3, #23
   1a21a:	18fc      	adds	r4, r7, r3
   1a21c:	687b      	ldr	r3, [r7, #4]
   1a21e:	2100      	movs	r1, #0
   1a220:	0018      	movs	r0, r3
   1a222:	4b74      	ldr	r3, [pc, #464]	; (1a3f4 <dir_find+0x1e4>)
   1a224:	4798      	blx	r3
   1a226:	0003      	movs	r3, r0
   1a228:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   1a22a:	2317      	movs	r3, #23
   1a22c:	18fb      	adds	r3, r7, r3
   1a22e:	781b      	ldrb	r3, [r3, #0]
   1a230:	2b00      	cmp	r3, #0
   1a232:	d003      	beq.n	1a23c <dir_find+0x2c>
   1a234:	2317      	movs	r3, #23
   1a236:	18fb      	adds	r3, r7, r3
   1a238:	781b      	ldrb	r3, [r3, #0]
   1a23a:	e0d6      	b.n	1a3ea <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   1a23c:	2314      	movs	r3, #20
   1a23e:	18fb      	adds	r3, r7, r3
   1a240:	22ff      	movs	r2, #255	; 0xff
   1a242:	701a      	strb	r2, [r3, #0]
   1a244:	2315      	movs	r3, #21
   1a246:	18fb      	adds	r3, r7, r3
   1a248:	2214      	movs	r2, #20
   1a24a:	18ba      	adds	r2, r7, r2
   1a24c:	7812      	ldrb	r2, [r2, #0]
   1a24e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   1a250:	687b      	ldr	r3, [r7, #4]
   1a252:	681a      	ldr	r2, [r3, #0]
   1a254:	687b      	ldr	r3, [r7, #4]
   1a256:	691b      	ldr	r3, [r3, #16]
   1a258:	2117      	movs	r1, #23
   1a25a:	187c      	adds	r4, r7, r1
   1a25c:	0019      	movs	r1, r3
   1a25e:	0010      	movs	r0, r2
   1a260:	4b65      	ldr	r3, [pc, #404]	; (1a3f8 <dir_find+0x1e8>)
   1a262:	4798      	blx	r3
   1a264:	0003      	movs	r3, r0
   1a266:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   1a268:	2317      	movs	r3, #23
   1a26a:	18fb      	adds	r3, r7, r3
   1a26c:	781b      	ldrb	r3, [r3, #0]
   1a26e:	2b00      	cmp	r3, #0
   1a270:	d000      	beq.n	1a274 <dir_find+0x64>
   1a272:	e0b2      	b.n	1a3da <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   1a274:	687b      	ldr	r3, [r7, #4]
   1a276:	695b      	ldr	r3, [r3, #20]
   1a278:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   1a27a:	2316      	movs	r3, #22
   1a27c:	18fb      	adds	r3, r7, r3
   1a27e:	693a      	ldr	r2, [r7, #16]
   1a280:	7812      	ldrb	r2, [r2, #0]
   1a282:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1a284:	2316      	movs	r3, #22
   1a286:	18fb      	adds	r3, r7, r3
   1a288:	781b      	ldrb	r3, [r3, #0]
   1a28a:	2b00      	cmp	r3, #0
   1a28c:	d104      	bne.n	1a298 <dir_find+0x88>
   1a28e:	2317      	movs	r3, #23
   1a290:	18fb      	adds	r3, r7, r3
   1a292:	2204      	movs	r2, #4
   1a294:	701a      	strb	r2, [r3, #0]
   1a296:	e0a5      	b.n	1a3e4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   1a298:	693b      	ldr	r3, [r7, #16]
   1a29a:	330b      	adds	r3, #11
   1a29c:	781a      	ldrb	r2, [r3, #0]
   1a29e:	230f      	movs	r3, #15
   1a2a0:	18fb      	adds	r3, r7, r3
   1a2a2:	213f      	movs	r1, #63	; 0x3f
   1a2a4:	400a      	ands	r2, r1
   1a2a6:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1a2a8:	2316      	movs	r3, #22
   1a2aa:	18fb      	adds	r3, r7, r3
   1a2ac:	781b      	ldrb	r3, [r3, #0]
   1a2ae:	2be5      	cmp	r3, #229	; 0xe5
   1a2b0:	d00a      	beq.n	1a2c8 <dir_find+0xb8>
   1a2b2:	230f      	movs	r3, #15
   1a2b4:	18fb      	adds	r3, r7, r3
   1a2b6:	781b      	ldrb	r3, [r3, #0]
   1a2b8:	2208      	movs	r2, #8
   1a2ba:	4013      	ands	r3, r2
   1a2bc:	d009      	beq.n	1a2d2 <dir_find+0xc2>
   1a2be:	230f      	movs	r3, #15
   1a2c0:	18fb      	adds	r3, r7, r3
   1a2c2:	781b      	ldrb	r3, [r3, #0]
   1a2c4:	2b0f      	cmp	r3, #15
   1a2c6:	d004      	beq.n	1a2d2 <dir_find+0xc2>
			ord = 0xFF;
   1a2c8:	2315      	movs	r3, #21
   1a2ca:	18fb      	adds	r3, r7, r3
   1a2cc:	22ff      	movs	r2, #255	; 0xff
   1a2ce:	701a      	strb	r2, [r3, #0]
   1a2d0:	e073      	b.n	1a3ba <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   1a2d2:	230f      	movs	r3, #15
   1a2d4:	18fb      	adds	r3, r7, r3
   1a2d6:	781b      	ldrb	r3, [r3, #0]
   1a2d8:	2b0f      	cmp	r3, #15
   1a2da:	d145      	bne.n	1a368 <dir_find+0x158>
				if (dj->lfn) {
   1a2dc:	687b      	ldr	r3, [r7, #4]
   1a2de:	69db      	ldr	r3, [r3, #28]
   1a2e0:	2b00      	cmp	r3, #0
   1a2e2:	d100      	bne.n	1a2e6 <dir_find+0xd6>
   1a2e4:	e069      	b.n	1a3ba <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   1a2e6:	2316      	movs	r3, #22
   1a2e8:	18fb      	adds	r3, r7, r3
   1a2ea:	781b      	ldrb	r3, [r3, #0]
   1a2ec:	2240      	movs	r2, #64	; 0x40
   1a2ee:	4013      	ands	r3, r2
   1a2f0:	d016      	beq.n	1a320 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   1a2f2:	2314      	movs	r3, #20
   1a2f4:	18fb      	adds	r3, r7, r3
   1a2f6:	693a      	ldr	r2, [r7, #16]
   1a2f8:	7b52      	ldrb	r2, [r2, #13]
   1a2fa:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   1a2fc:	2316      	movs	r3, #22
   1a2fe:	18fb      	adds	r3, r7, r3
   1a300:	2216      	movs	r2, #22
   1a302:	18ba      	adds	r2, r7, r2
   1a304:	7812      	ldrb	r2, [r2, #0]
   1a306:	2140      	movs	r1, #64	; 0x40
   1a308:	438a      	bics	r2, r1
   1a30a:	701a      	strb	r2, [r3, #0]
   1a30c:	2315      	movs	r3, #21
   1a30e:	18fb      	adds	r3, r7, r3
   1a310:	2216      	movs	r2, #22
   1a312:	18ba      	adds	r2, r7, r2
   1a314:	7812      	ldrb	r2, [r2, #0]
   1a316:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   1a318:	687b      	ldr	r3, [r7, #4]
   1a31a:	88da      	ldrh	r2, [r3, #6]
   1a31c:	687b      	ldr	r3, [r7, #4]
   1a31e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1a320:	2316      	movs	r3, #22
   1a322:	18fa      	adds	r2, r7, r3
   1a324:	2315      	movs	r3, #21
   1a326:	18fb      	adds	r3, r7, r3
   1a328:	7812      	ldrb	r2, [r2, #0]
   1a32a:	781b      	ldrb	r3, [r3, #0]
   1a32c:	429a      	cmp	r2, r3
   1a32e:	d116      	bne.n	1a35e <dir_find+0x14e>
   1a330:	693b      	ldr	r3, [r7, #16]
   1a332:	330d      	adds	r3, #13
   1a334:	781b      	ldrb	r3, [r3, #0]
   1a336:	2214      	movs	r2, #20
   1a338:	18ba      	adds	r2, r7, r2
   1a33a:	7812      	ldrb	r2, [r2, #0]
   1a33c:	429a      	cmp	r2, r3
   1a33e:	d10e      	bne.n	1a35e <dir_find+0x14e>
   1a340:	687b      	ldr	r3, [r7, #4]
   1a342:	69db      	ldr	r3, [r3, #28]
   1a344:	693a      	ldr	r2, [r7, #16]
   1a346:	0011      	movs	r1, r2
   1a348:	0018      	movs	r0, r3
   1a34a:	4b2c      	ldr	r3, [pc, #176]	; (1a3fc <dir_find+0x1ec>)
   1a34c:	4798      	blx	r3
   1a34e:	1e03      	subs	r3, r0, #0
   1a350:	d005      	beq.n	1a35e <dir_find+0x14e>
   1a352:	2315      	movs	r3, #21
   1a354:	18fb      	adds	r3, r7, r3
   1a356:	781b      	ldrb	r3, [r3, #0]
   1a358:	3b01      	subs	r3, #1
   1a35a:	b2da      	uxtb	r2, r3
   1a35c:	e000      	b.n	1a360 <dir_find+0x150>
   1a35e:	22ff      	movs	r2, #255	; 0xff
   1a360:	2315      	movs	r3, #21
   1a362:	18fb      	adds	r3, r7, r3
   1a364:	701a      	strb	r2, [r3, #0]
   1a366:	e028      	b.n	1a3ba <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1a368:	2315      	movs	r3, #21
   1a36a:	18fb      	adds	r3, r7, r3
   1a36c:	781b      	ldrb	r3, [r3, #0]
   1a36e:	2b00      	cmp	r3, #0
   1a370:	d10a      	bne.n	1a388 <dir_find+0x178>
   1a372:	693b      	ldr	r3, [r7, #16]
   1a374:	0018      	movs	r0, r3
   1a376:	4b22      	ldr	r3, [pc, #136]	; (1a400 <dir_find+0x1f0>)
   1a378:	4798      	blx	r3
   1a37a:	0003      	movs	r3, r0
   1a37c:	001a      	movs	r2, r3
   1a37e:	2314      	movs	r3, #20
   1a380:	18fb      	adds	r3, r7, r3
   1a382:	781b      	ldrb	r3, [r3, #0]
   1a384:	4293      	cmp	r3, r2
   1a386:	d02a      	beq.n	1a3de <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1a388:	2315      	movs	r3, #21
   1a38a:	18fb      	adds	r3, r7, r3
   1a38c:	22ff      	movs	r2, #255	; 0xff
   1a38e:	701a      	strb	r2, [r3, #0]
   1a390:	687b      	ldr	r3, [r7, #4]
   1a392:	2201      	movs	r2, #1
   1a394:	4252      	negs	r2, r2
   1a396:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   1a398:	687b      	ldr	r3, [r7, #4]
   1a39a:	699b      	ldr	r3, [r3, #24]
   1a39c:	330b      	adds	r3, #11
   1a39e:	781b      	ldrb	r3, [r3, #0]
   1a3a0:	001a      	movs	r2, r3
   1a3a2:	2301      	movs	r3, #1
   1a3a4:	4013      	ands	r3, r2
   1a3a6:	d108      	bne.n	1a3ba <dir_find+0x1aa>
   1a3a8:	687b      	ldr	r3, [r7, #4]
   1a3aa:	6999      	ldr	r1, [r3, #24]
   1a3ac:	693b      	ldr	r3, [r7, #16]
   1a3ae:	220b      	movs	r2, #11
   1a3b0:	0018      	movs	r0, r3
   1a3b2:	4b14      	ldr	r3, [pc, #80]	; (1a404 <dir_find+0x1f4>)
   1a3b4:	4798      	blx	r3
   1a3b6:	1e03      	subs	r3, r0, #0
   1a3b8:	d013      	beq.n	1a3e2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   1a3ba:	2317      	movs	r3, #23
   1a3bc:	18fc      	adds	r4, r7, r3
   1a3be:	687b      	ldr	r3, [r7, #4]
   1a3c0:	2100      	movs	r1, #0
   1a3c2:	0018      	movs	r0, r3
   1a3c4:	4b10      	ldr	r3, [pc, #64]	; (1a408 <dir_find+0x1f8>)
   1a3c6:	4798      	blx	r3
   1a3c8:	0003      	movs	r3, r0
   1a3ca:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   1a3cc:	2317      	movs	r3, #23
   1a3ce:	18fb      	adds	r3, r7, r3
   1a3d0:	781b      	ldrb	r3, [r3, #0]
   1a3d2:	2b00      	cmp	r3, #0
   1a3d4:	d100      	bne.n	1a3d8 <dir_find+0x1c8>
   1a3d6:	e73b      	b.n	1a250 <dir_find+0x40>
   1a3d8:	e004      	b.n	1a3e4 <dir_find+0x1d4>
		if (res != FR_OK) break;
   1a3da:	46c0      	nop			; (mov r8, r8)
   1a3dc:	e002      	b.n	1a3e4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1a3de:	46c0      	nop			; (mov r8, r8)
   1a3e0:	e000      	b.n	1a3e4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   1a3e2:	46c0      	nop			; (mov r8, r8)

	return res;
   1a3e4:	2317      	movs	r3, #23
   1a3e6:	18fb      	adds	r3, r7, r3
   1a3e8:	781b      	ldrb	r3, [r3, #0]
}
   1a3ea:	0018      	movs	r0, r3
   1a3ec:	46bd      	mov	sp, r7
   1a3ee:	b007      	add	sp, #28
   1a3f0:	bd90      	pop	{r4, r7, pc}
   1a3f2:	46c0      	nop			; (mov r8, r8)
   1a3f4:	00019b8d 	.word	0x00019b8d
   1a3f8:	00019349 	.word	0x00019349
   1a3fc:	00019ead 	.word	0x00019ead
   1a400:	0001a1c1 	.word	0x0001a1c1
   1a404:	000192cd 	.word	0x000192cd
   1a408:	00019cbd 	.word	0x00019cbd

0001a40c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   1a40c:	b590      	push	{r4, r7, lr}
   1a40e:	b08d      	sub	sp, #52	; 0x34
   1a410:	af00      	add	r7, sp, #0
   1a412:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   1a414:	687b      	ldr	r3, [r7, #4]
   1a416:	699b      	ldr	r3, [r3, #24]
   1a418:	627b      	str	r3, [r7, #36]	; 0x24
   1a41a:	687b      	ldr	r3, [r7, #4]
   1a41c:	69db      	ldr	r3, [r3, #28]
   1a41e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   1a420:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1a422:	230c      	movs	r3, #12
   1a424:	18fb      	adds	r3, r7, r3
   1a426:	220c      	movs	r2, #12
   1a428:	0018      	movs	r0, r3
   1a42a:	4bc8      	ldr	r3, [pc, #800]	; (1a74c <dir_register+0x340>)
   1a42c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   1a42e:	230c      	movs	r3, #12
   1a430:	18fb      	adds	r3, r7, r3
   1a432:	7adb      	ldrb	r3, [r3, #11]
   1a434:	001a      	movs	r2, r3
   1a436:	2301      	movs	r3, #1
   1a438:	4013      	ands	r3, r2
   1a43a:	d048      	beq.n	1a4ce <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   1a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a43e:	330b      	adds	r3, #11
   1a440:	2200      	movs	r2, #0
   1a442:	701a      	strb	r2, [r3, #0]
   1a444:	687b      	ldr	r3, [r7, #4]
   1a446:	2200      	movs	r2, #0
   1a448:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   1a44a:	232c      	movs	r3, #44	; 0x2c
   1a44c:	18fb      	adds	r3, r7, r3
   1a44e:	2201      	movs	r2, #1
   1a450:	801a      	strh	r2, [r3, #0]
   1a452:	e01c      	b.n	1a48e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   1a454:	232c      	movs	r3, #44	; 0x2c
   1a456:	18fb      	adds	r3, r7, r3
   1a458:	881b      	ldrh	r3, [r3, #0]
   1a45a:	6a3a      	ldr	r2, [r7, #32]
   1a45c:	210c      	movs	r1, #12
   1a45e:	1879      	adds	r1, r7, r1
   1a460:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1a462:	4cbb      	ldr	r4, [pc, #748]	; (1a750 <dir_register+0x344>)
   1a464:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   1a466:	232f      	movs	r3, #47	; 0x2f
   1a468:	18fc      	adds	r4, r7, r3
   1a46a:	687b      	ldr	r3, [r7, #4]
   1a46c:	0018      	movs	r0, r3
   1a46e:	4bb9      	ldr	r3, [pc, #740]	; (1a754 <dir_register+0x348>)
   1a470:	4798      	blx	r3
   1a472:	0003      	movs	r3, r0
   1a474:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1a476:	232f      	movs	r3, #47	; 0x2f
   1a478:	18fb      	adds	r3, r7, r3
   1a47a:	781b      	ldrb	r3, [r3, #0]
   1a47c:	2b00      	cmp	r3, #0
   1a47e:	d10c      	bne.n	1a49a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   1a480:	232c      	movs	r3, #44	; 0x2c
   1a482:	18fb      	adds	r3, r7, r3
   1a484:	881a      	ldrh	r2, [r3, #0]
   1a486:	232c      	movs	r3, #44	; 0x2c
   1a488:	18fb      	adds	r3, r7, r3
   1a48a:	3201      	adds	r2, #1
   1a48c:	801a      	strh	r2, [r3, #0]
   1a48e:	232c      	movs	r3, #44	; 0x2c
   1a490:	18fb      	adds	r3, r7, r3
   1a492:	881b      	ldrh	r3, [r3, #0]
   1a494:	2b63      	cmp	r3, #99	; 0x63
   1a496:	d9dd      	bls.n	1a454 <dir_register+0x48>
   1a498:	e000      	b.n	1a49c <dir_register+0x90>
			if (res != FR_OK) break;
   1a49a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1a49c:	232c      	movs	r3, #44	; 0x2c
   1a49e:	18fb      	adds	r3, r7, r3
   1a4a0:	881b      	ldrh	r3, [r3, #0]
   1a4a2:	2b64      	cmp	r3, #100	; 0x64
   1a4a4:	d101      	bne.n	1a4aa <dir_register+0x9e>
   1a4a6:	2307      	movs	r3, #7
   1a4a8:	e14c      	b.n	1a744 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   1a4aa:	232f      	movs	r3, #47	; 0x2f
   1a4ac:	18fb      	adds	r3, r7, r3
   1a4ae:	781b      	ldrb	r3, [r3, #0]
   1a4b0:	2b04      	cmp	r3, #4
   1a4b2:	d003      	beq.n	1a4bc <dir_register+0xb0>
   1a4b4:	232f      	movs	r3, #47	; 0x2f
   1a4b6:	18fb      	adds	r3, r7, r3
   1a4b8:	781b      	ldrb	r3, [r3, #0]
   1a4ba:	e143      	b.n	1a744 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   1a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a4be:	330b      	adds	r3, #11
   1a4c0:	220c      	movs	r2, #12
   1a4c2:	18ba      	adds	r2, r7, r2
   1a4c4:	7ad2      	ldrb	r2, [r2, #11]
   1a4c6:	701a      	strb	r2, [r3, #0]
   1a4c8:	687b      	ldr	r3, [r7, #4]
   1a4ca:	6a3a      	ldr	r2, [r7, #32]
   1a4cc:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1a4ce:	230c      	movs	r3, #12
   1a4d0:	18fb      	adds	r3, r7, r3
   1a4d2:	7adb      	ldrb	r3, [r3, #11]
   1a4d4:	001a      	movs	r2, r3
   1a4d6:	2302      	movs	r3, #2
   1a4d8:	4013      	ands	r3, r2
   1a4da:	d023      	beq.n	1a524 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   1a4dc:	232a      	movs	r3, #42	; 0x2a
   1a4de:	18fb      	adds	r3, r7, r3
   1a4e0:	2200      	movs	r2, #0
   1a4e2:	801a      	strh	r2, [r3, #0]
   1a4e4:	e006      	b.n	1a4f4 <dir_register+0xe8>
   1a4e6:	232a      	movs	r3, #42	; 0x2a
   1a4e8:	18fb      	adds	r3, r7, r3
   1a4ea:	881a      	ldrh	r2, [r3, #0]
   1a4ec:	232a      	movs	r3, #42	; 0x2a
   1a4ee:	18fb      	adds	r3, r7, r3
   1a4f0:	3201      	adds	r2, #1
   1a4f2:	801a      	strh	r2, [r3, #0]
   1a4f4:	232a      	movs	r3, #42	; 0x2a
   1a4f6:	18fb      	adds	r3, r7, r3
   1a4f8:	881b      	ldrh	r3, [r3, #0]
   1a4fa:	005b      	lsls	r3, r3, #1
   1a4fc:	6a3a      	ldr	r2, [r7, #32]
   1a4fe:	18d3      	adds	r3, r2, r3
   1a500:	881b      	ldrh	r3, [r3, #0]
   1a502:	2b00      	cmp	r3, #0
   1a504:	d1ef      	bne.n	1a4e6 <dir_register+0xda>
		ne = (ne + 25) / 13;
   1a506:	232a      	movs	r3, #42	; 0x2a
   1a508:	18fb      	adds	r3, r7, r3
   1a50a:	881b      	ldrh	r3, [r3, #0]
   1a50c:	3319      	adds	r3, #25
   1a50e:	001a      	movs	r2, r3
   1a510:	4b91      	ldr	r3, [pc, #580]	; (1a758 <dir_register+0x34c>)
   1a512:	210d      	movs	r1, #13
   1a514:	0010      	movs	r0, r2
   1a516:	4798      	blx	r3
   1a518:	0003      	movs	r3, r0
   1a51a:	001a      	movs	r2, r3
   1a51c:	232a      	movs	r3, #42	; 0x2a
   1a51e:	18fb      	adds	r3, r7, r3
   1a520:	801a      	strh	r2, [r3, #0]
   1a522:	e003      	b.n	1a52c <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   1a524:	232a      	movs	r3, #42	; 0x2a
   1a526:	18fb      	adds	r3, r7, r3
   1a528:	2201      	movs	r2, #1
   1a52a:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   1a52c:	232f      	movs	r3, #47	; 0x2f
   1a52e:	18fc      	adds	r4, r7, r3
   1a530:	687b      	ldr	r3, [r7, #4]
   1a532:	2100      	movs	r1, #0
   1a534:	0018      	movs	r0, r3
   1a536:	4b89      	ldr	r3, [pc, #548]	; (1a75c <dir_register+0x350>)
   1a538:	4798      	blx	r3
   1a53a:	0003      	movs	r3, r0
   1a53c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   1a53e:	232f      	movs	r3, #47	; 0x2f
   1a540:	18fb      	adds	r3, r7, r3
   1a542:	781b      	ldrb	r3, [r3, #0]
   1a544:	2b00      	cmp	r3, #0
   1a546:	d003      	beq.n	1a550 <dir_register+0x144>
   1a548:	232f      	movs	r3, #47	; 0x2f
   1a54a:	18fb      	adds	r3, r7, r3
   1a54c:	781b      	ldrb	r3, [r3, #0]
   1a54e:	e0f9      	b.n	1a744 <dir_register+0x338>
	n = is = 0;
   1a550:	2328      	movs	r3, #40	; 0x28
   1a552:	18fb      	adds	r3, r7, r3
   1a554:	2200      	movs	r2, #0
   1a556:	801a      	strh	r2, [r3, #0]
   1a558:	232c      	movs	r3, #44	; 0x2c
   1a55a:	18fb      	adds	r3, r7, r3
   1a55c:	2228      	movs	r2, #40	; 0x28
   1a55e:	18ba      	adds	r2, r7, r2
   1a560:	8812      	ldrh	r2, [r2, #0]
   1a562:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   1a564:	687b      	ldr	r3, [r7, #4]
   1a566:	681a      	ldr	r2, [r3, #0]
   1a568:	687b      	ldr	r3, [r7, #4]
   1a56a:	691b      	ldr	r3, [r3, #16]
   1a56c:	212f      	movs	r1, #47	; 0x2f
   1a56e:	187c      	adds	r4, r7, r1
   1a570:	0019      	movs	r1, r3
   1a572:	0010      	movs	r0, r2
   1a574:	4b7a      	ldr	r3, [pc, #488]	; (1a760 <dir_register+0x354>)
   1a576:	4798      	blx	r3
   1a578:	0003      	movs	r3, r0
   1a57a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   1a57c:	232f      	movs	r3, #47	; 0x2f
   1a57e:	18fb      	adds	r3, r7, r3
   1a580:	781b      	ldrb	r3, [r3, #0]
   1a582:	2b00      	cmp	r3, #0
   1a584:	d13c      	bne.n	1a600 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   1a586:	687b      	ldr	r3, [r7, #4]
   1a588:	695a      	ldr	r2, [r3, #20]
   1a58a:	231f      	movs	r3, #31
   1a58c:	18fb      	adds	r3, r7, r3
   1a58e:	7812      	ldrb	r2, [r2, #0]
   1a590:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   1a592:	231f      	movs	r3, #31
   1a594:	18fb      	adds	r3, r7, r3
   1a596:	781b      	ldrb	r3, [r3, #0]
   1a598:	2be5      	cmp	r3, #229	; 0xe5
   1a59a:	d004      	beq.n	1a5a6 <dir_register+0x19a>
   1a59c:	231f      	movs	r3, #31
   1a59e:	18fb      	adds	r3, r7, r3
   1a5a0:	781b      	ldrb	r3, [r3, #0]
   1a5a2:	2b00      	cmp	r3, #0
   1a5a4:	d119      	bne.n	1a5da <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   1a5a6:	232c      	movs	r3, #44	; 0x2c
   1a5a8:	18fb      	adds	r3, r7, r3
   1a5aa:	881b      	ldrh	r3, [r3, #0]
   1a5ac:	2b00      	cmp	r3, #0
   1a5ae:	d104      	bne.n	1a5ba <dir_register+0x1ae>
   1a5b0:	2328      	movs	r3, #40	; 0x28
   1a5b2:	18fb      	adds	r3, r7, r3
   1a5b4:	687a      	ldr	r2, [r7, #4]
   1a5b6:	88d2      	ldrh	r2, [r2, #6]
   1a5b8:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   1a5ba:	232c      	movs	r3, #44	; 0x2c
   1a5bc:	18fb      	adds	r3, r7, r3
   1a5be:	222c      	movs	r2, #44	; 0x2c
   1a5c0:	18ba      	adds	r2, r7, r2
   1a5c2:	8812      	ldrh	r2, [r2, #0]
   1a5c4:	3201      	adds	r2, #1
   1a5c6:	801a      	strh	r2, [r3, #0]
   1a5c8:	232c      	movs	r3, #44	; 0x2c
   1a5ca:	18fa      	adds	r2, r7, r3
   1a5cc:	232a      	movs	r3, #42	; 0x2a
   1a5ce:	18fb      	adds	r3, r7, r3
   1a5d0:	8812      	ldrh	r2, [r2, #0]
   1a5d2:	881b      	ldrh	r3, [r3, #0]
   1a5d4:	429a      	cmp	r2, r3
   1a5d6:	d104      	bne.n	1a5e2 <dir_register+0x1d6>
   1a5d8:	e013      	b.n	1a602 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   1a5da:	232c      	movs	r3, #44	; 0x2c
   1a5dc:	18fb      	adds	r3, r7, r3
   1a5de:	2200      	movs	r2, #0
   1a5e0:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   1a5e2:	232f      	movs	r3, #47	; 0x2f
   1a5e4:	18fc      	adds	r4, r7, r3
   1a5e6:	687b      	ldr	r3, [r7, #4]
   1a5e8:	2101      	movs	r1, #1
   1a5ea:	0018      	movs	r0, r3
   1a5ec:	4b5d      	ldr	r3, [pc, #372]	; (1a764 <dir_register+0x358>)
   1a5ee:	4798      	blx	r3
   1a5f0:	0003      	movs	r3, r0
   1a5f2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   1a5f4:	232f      	movs	r3, #47	; 0x2f
   1a5f6:	18fb      	adds	r3, r7, r3
   1a5f8:	781b      	ldrb	r3, [r3, #0]
   1a5fa:	2b00      	cmp	r3, #0
   1a5fc:	d0b2      	beq.n	1a564 <dir_register+0x158>
   1a5fe:	e000      	b.n	1a602 <dir_register+0x1f6>
		if (res != FR_OK) break;
   1a600:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   1a602:	232f      	movs	r3, #47	; 0x2f
   1a604:	18fb      	adds	r3, r7, r3
   1a606:	781b      	ldrb	r3, [r3, #0]
   1a608:	2b00      	cmp	r3, #0
   1a60a:	d163      	bne.n	1a6d4 <dir_register+0x2c8>
   1a60c:	232a      	movs	r3, #42	; 0x2a
   1a60e:	18fb      	adds	r3, r7, r3
   1a610:	881b      	ldrh	r3, [r3, #0]
   1a612:	2b01      	cmp	r3, #1
   1a614:	d95e      	bls.n	1a6d4 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   1a616:	232f      	movs	r3, #47	; 0x2f
   1a618:	18fc      	adds	r4, r7, r3
   1a61a:	2328      	movs	r3, #40	; 0x28
   1a61c:	18fb      	adds	r3, r7, r3
   1a61e:	881a      	ldrh	r2, [r3, #0]
   1a620:	687b      	ldr	r3, [r7, #4]
   1a622:	0011      	movs	r1, r2
   1a624:	0018      	movs	r0, r3
   1a626:	4b4d      	ldr	r3, [pc, #308]	; (1a75c <dir_register+0x350>)
   1a628:	4798      	blx	r3
   1a62a:	0003      	movs	r3, r0
   1a62c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   1a62e:	232f      	movs	r3, #47	; 0x2f
   1a630:	18fb      	adds	r3, r7, r3
   1a632:	781b      	ldrb	r3, [r3, #0]
   1a634:	2b00      	cmp	r3, #0
   1a636:	d14d      	bne.n	1a6d4 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   1a638:	687b      	ldr	r3, [r7, #4]
   1a63a:	699b      	ldr	r3, [r3, #24]
   1a63c:	221e      	movs	r2, #30
   1a63e:	18bc      	adds	r4, r7, r2
   1a640:	0018      	movs	r0, r3
   1a642:	4b49      	ldr	r3, [pc, #292]	; (1a768 <dir_register+0x35c>)
   1a644:	4798      	blx	r3
   1a646:	0003      	movs	r3, r0
   1a648:	7023      	strb	r3, [r4, #0]
			ne--;
   1a64a:	232a      	movs	r3, #42	; 0x2a
   1a64c:	18fb      	adds	r3, r7, r3
   1a64e:	881a      	ldrh	r2, [r3, #0]
   1a650:	232a      	movs	r3, #42	; 0x2a
   1a652:	18fb      	adds	r3, r7, r3
   1a654:	3a01      	subs	r2, #1
   1a656:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   1a658:	687b      	ldr	r3, [r7, #4]
   1a65a:	681a      	ldr	r2, [r3, #0]
   1a65c:	687b      	ldr	r3, [r7, #4]
   1a65e:	691b      	ldr	r3, [r3, #16]
   1a660:	212f      	movs	r1, #47	; 0x2f
   1a662:	187c      	adds	r4, r7, r1
   1a664:	0019      	movs	r1, r3
   1a666:	0010      	movs	r0, r2
   1a668:	4b3d      	ldr	r3, [pc, #244]	; (1a760 <dir_register+0x354>)
   1a66a:	4798      	blx	r3
   1a66c:	0003      	movs	r3, r0
   1a66e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   1a670:	232f      	movs	r3, #47	; 0x2f
   1a672:	18fb      	adds	r3, r7, r3
   1a674:	781b      	ldrb	r3, [r3, #0]
   1a676:	2b00      	cmp	r3, #0
   1a678:	d12b      	bne.n	1a6d2 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   1a67a:	687b      	ldr	r3, [r7, #4]
   1a67c:	69d8      	ldr	r0, [r3, #28]
   1a67e:	687b      	ldr	r3, [r7, #4]
   1a680:	6959      	ldr	r1, [r3, #20]
   1a682:	232a      	movs	r3, #42	; 0x2a
   1a684:	18fb      	adds	r3, r7, r3
   1a686:	881b      	ldrh	r3, [r3, #0]
   1a688:	b2da      	uxtb	r2, r3
   1a68a:	231e      	movs	r3, #30
   1a68c:	18fb      	adds	r3, r7, r3
   1a68e:	781b      	ldrb	r3, [r3, #0]
   1a690:	4c36      	ldr	r4, [pc, #216]	; (1a76c <dir_register+0x360>)
   1a692:	47a0      	blx	r4
				dj->fs->wflag = 1;
   1a694:	687b      	ldr	r3, [r7, #4]
   1a696:	681b      	ldr	r3, [r3, #0]
   1a698:	2201      	movs	r2, #1
   1a69a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   1a69c:	232f      	movs	r3, #47	; 0x2f
   1a69e:	18fc      	adds	r4, r7, r3
   1a6a0:	687b      	ldr	r3, [r7, #4]
   1a6a2:	2100      	movs	r1, #0
   1a6a4:	0018      	movs	r0, r3
   1a6a6:	4b2f      	ldr	r3, [pc, #188]	; (1a764 <dir_register+0x358>)
   1a6a8:	4798      	blx	r3
   1a6aa:	0003      	movs	r3, r0
   1a6ac:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   1a6ae:	232f      	movs	r3, #47	; 0x2f
   1a6b0:	18fb      	adds	r3, r7, r3
   1a6b2:	781b      	ldrb	r3, [r3, #0]
   1a6b4:	2b00      	cmp	r3, #0
   1a6b6:	d10d      	bne.n	1a6d4 <dir_register+0x2c8>
   1a6b8:	232a      	movs	r3, #42	; 0x2a
   1a6ba:	18fb      	adds	r3, r7, r3
   1a6bc:	222a      	movs	r2, #42	; 0x2a
   1a6be:	18ba      	adds	r2, r7, r2
   1a6c0:	8812      	ldrh	r2, [r2, #0]
   1a6c2:	3a01      	subs	r2, #1
   1a6c4:	801a      	strh	r2, [r3, #0]
   1a6c6:	232a      	movs	r3, #42	; 0x2a
   1a6c8:	18fb      	adds	r3, r7, r3
   1a6ca:	881b      	ldrh	r3, [r3, #0]
   1a6cc:	2b00      	cmp	r3, #0
   1a6ce:	d1c3      	bne.n	1a658 <dir_register+0x24c>
   1a6d0:	e000      	b.n	1a6d4 <dir_register+0x2c8>
				if (res != FR_OK) break;
   1a6d2:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   1a6d4:	232f      	movs	r3, #47	; 0x2f
   1a6d6:	18fb      	adds	r3, r7, r3
   1a6d8:	781b      	ldrb	r3, [r3, #0]
   1a6da:	2b00      	cmp	r3, #0
   1a6dc:	d12f      	bne.n	1a73e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   1a6de:	687b      	ldr	r3, [r7, #4]
   1a6e0:	681a      	ldr	r2, [r3, #0]
   1a6e2:	687b      	ldr	r3, [r7, #4]
   1a6e4:	691b      	ldr	r3, [r3, #16]
   1a6e6:	212f      	movs	r1, #47	; 0x2f
   1a6e8:	187c      	adds	r4, r7, r1
   1a6ea:	0019      	movs	r1, r3
   1a6ec:	0010      	movs	r0, r2
   1a6ee:	4b1c      	ldr	r3, [pc, #112]	; (1a760 <dir_register+0x354>)
   1a6f0:	4798      	blx	r3
   1a6f2:	0003      	movs	r3, r0
   1a6f4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   1a6f6:	232f      	movs	r3, #47	; 0x2f
   1a6f8:	18fb      	adds	r3, r7, r3
   1a6fa:	781b      	ldrb	r3, [r3, #0]
   1a6fc:	2b00      	cmp	r3, #0
   1a6fe:	d11e      	bne.n	1a73e <dir_register+0x332>
			dir = dj->dir;
   1a700:	687b      	ldr	r3, [r7, #4]
   1a702:	695b      	ldr	r3, [r3, #20]
   1a704:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   1a706:	69bb      	ldr	r3, [r7, #24]
   1a708:	2220      	movs	r2, #32
   1a70a:	2100      	movs	r1, #0
   1a70c:	0018      	movs	r0, r3
   1a70e:	4b18      	ldr	r3, [pc, #96]	; (1a770 <dir_register+0x364>)
   1a710:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   1a712:	687b      	ldr	r3, [r7, #4]
   1a714:	6999      	ldr	r1, [r3, #24]
   1a716:	69bb      	ldr	r3, [r7, #24]
   1a718:	220b      	movs	r2, #11
   1a71a:	0018      	movs	r0, r3
   1a71c:	4b0b      	ldr	r3, [pc, #44]	; (1a74c <dir_register+0x340>)
   1a71e:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   1a720:	69bb      	ldr	r3, [r7, #24]
   1a722:	330c      	adds	r3, #12
   1a724:	001a      	movs	r2, r3
   1a726:	687b      	ldr	r3, [r7, #4]
   1a728:	699b      	ldr	r3, [r3, #24]
   1a72a:	330b      	adds	r3, #11
   1a72c:	781b      	ldrb	r3, [r3, #0]
   1a72e:	2118      	movs	r1, #24
   1a730:	400b      	ands	r3, r1
   1a732:	b2db      	uxtb	r3, r3
   1a734:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   1a736:	687b      	ldr	r3, [r7, #4]
   1a738:	681b      	ldr	r3, [r3, #0]
   1a73a:	2201      	movs	r2, #1
   1a73c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   1a73e:	232f      	movs	r3, #47	; 0x2f
   1a740:	18fb      	adds	r3, r7, r3
   1a742:	781b      	ldrb	r3, [r3, #0]
}
   1a744:	0018      	movs	r0, r3
   1a746:	46bd      	mov	sp, r7
   1a748:	b00d      	add	sp, #52	; 0x34
   1a74a:	bd90      	pop	{r4, r7, pc}
   1a74c:	00019265 	.word	0x00019265
   1a750:	0001a0c1 	.word	0x0001a0c1
   1a754:	0001a211 	.word	0x0001a211
   1a758:	00020585 	.word	0x00020585
   1a75c:	00019b8d 	.word	0x00019b8d
   1a760:	00019349 	.word	0x00019349
   1a764:	00019cbd 	.word	0x00019cbd
   1a768:	0001a1c1 	.word	0x0001a1c1
   1a76c:	00019fb1 	.word	0x00019fb1
   1a770:	0001929d 	.word	0x0001929d

0001a774 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   1a774:	b590      	push	{r4, r7, lr}
   1a776:	b08b      	sub	sp, #44	; 0x2c
   1a778:	af00      	add	r7, sp, #0
   1a77a:	6078      	str	r0, [r7, #4]
   1a77c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1a77e:	683b      	ldr	r3, [r7, #0]
   1a780:	681b      	ldr	r3, [r3, #0]
   1a782:	613b      	str	r3, [r7, #16]
   1a784:	e002      	b.n	1a78c <create_name+0x18>
   1a786:	693b      	ldr	r3, [r7, #16]
   1a788:	3301      	adds	r3, #1
   1a78a:	613b      	str	r3, [r7, #16]
   1a78c:	693b      	ldr	r3, [r7, #16]
   1a78e:	781b      	ldrb	r3, [r3, #0]
   1a790:	2b2f      	cmp	r3, #47	; 0x2f
   1a792:	d0f8      	beq.n	1a786 <create_name+0x12>
   1a794:	693b      	ldr	r3, [r7, #16]
   1a796:	781b      	ldrb	r3, [r3, #0]
   1a798:	2b5c      	cmp	r3, #92	; 0x5c
   1a79a:	d0f4      	beq.n	1a786 <create_name+0x12>
	lfn = dj->lfn;
   1a79c:	687b      	ldr	r3, [r7, #4]
   1a79e:	69db      	ldr	r3, [r3, #28]
   1a7a0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   1a7a2:	2300      	movs	r3, #0
   1a7a4:	617b      	str	r3, [r7, #20]
   1a7a6:	697b      	ldr	r3, [r7, #20]
   1a7a8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   1a7aa:	69bb      	ldr	r3, [r7, #24]
   1a7ac:	1c5a      	adds	r2, r3, #1
   1a7ae:	61ba      	str	r2, [r7, #24]
   1a7b0:	693a      	ldr	r2, [r7, #16]
   1a7b2:	18d3      	adds	r3, r2, r3
   1a7b4:	781a      	ldrb	r2, [r3, #0]
   1a7b6:	2324      	movs	r3, #36	; 0x24
   1a7b8:	18fb      	adds	r3, r7, r3
   1a7ba:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1a7bc:	2324      	movs	r3, #36	; 0x24
   1a7be:	18fb      	adds	r3, r7, r3
   1a7c0:	881b      	ldrh	r3, [r3, #0]
   1a7c2:	2b1f      	cmp	r3, #31
   1a7c4:	d944      	bls.n	1a850 <create_name+0xdc>
   1a7c6:	2324      	movs	r3, #36	; 0x24
   1a7c8:	18fb      	adds	r3, r7, r3
   1a7ca:	881b      	ldrh	r3, [r3, #0]
   1a7cc:	2b2f      	cmp	r3, #47	; 0x2f
   1a7ce:	d03f      	beq.n	1a850 <create_name+0xdc>
   1a7d0:	2324      	movs	r3, #36	; 0x24
   1a7d2:	18fb      	adds	r3, r7, r3
   1a7d4:	881b      	ldrh	r3, [r3, #0]
   1a7d6:	2b5c      	cmp	r3, #92	; 0x5c
   1a7d8:	d03a      	beq.n	1a850 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   1a7da:	697b      	ldr	r3, [r7, #20]
   1a7dc:	2bfe      	cmp	r3, #254	; 0xfe
   1a7de:	d901      	bls.n	1a7e4 <create_name+0x70>
			return FR_INVALID_NAME;
   1a7e0:	2306      	movs	r3, #6
   1a7e2:	e1e7      	b.n	1abb4 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   1a7e4:	2324      	movs	r3, #36	; 0x24
   1a7e6:	18fb      	adds	r3, r7, r3
   1a7e8:	2224      	movs	r2, #36	; 0x24
   1a7ea:	18ba      	adds	r2, r7, r2
   1a7ec:	8812      	ldrh	r2, [r2, #0]
   1a7ee:	21ff      	movs	r1, #255	; 0xff
   1a7f0:	400a      	ands	r2, r1
   1a7f2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   1a7f4:	2324      	movs	r3, #36	; 0x24
   1a7f6:	18fc      	adds	r4, r7, r3
   1a7f8:	2324      	movs	r3, #36	; 0x24
   1a7fa:	18fb      	adds	r3, r7, r3
   1a7fc:	881b      	ldrh	r3, [r3, #0]
   1a7fe:	2101      	movs	r1, #1
   1a800:	0018      	movs	r0, r3
   1a802:	4bba      	ldr	r3, [pc, #744]	; (1aaec <create_name+0x378>)
   1a804:	4798      	blx	r3
   1a806:	0003      	movs	r3, r0
   1a808:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1a80a:	2324      	movs	r3, #36	; 0x24
   1a80c:	18fb      	adds	r3, r7, r3
   1a80e:	881b      	ldrh	r3, [r3, #0]
   1a810:	2b00      	cmp	r3, #0
   1a812:	d101      	bne.n	1a818 <create_name+0xa4>
   1a814:	2306      	movs	r3, #6
   1a816:	e1cd      	b.n	1abb4 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1a818:	2324      	movs	r3, #36	; 0x24
   1a81a:	18fb      	adds	r3, r7, r3
   1a81c:	881b      	ldrh	r3, [r3, #0]
   1a81e:	2b7f      	cmp	r3, #127	; 0x7f
   1a820:	d80b      	bhi.n	1a83a <create_name+0xc6>
   1a822:	2324      	movs	r3, #36	; 0x24
   1a824:	18fb      	adds	r3, r7, r3
   1a826:	881a      	ldrh	r2, [r3, #0]
   1a828:	4bb1      	ldr	r3, [pc, #708]	; (1aaf0 <create_name+0x37c>)
   1a82a:	0011      	movs	r1, r2
   1a82c:	0018      	movs	r0, r3
   1a82e:	4bb1      	ldr	r3, [pc, #708]	; (1aaf4 <create_name+0x380>)
   1a830:	4798      	blx	r3
   1a832:	1e03      	subs	r3, r0, #0
   1a834:	d001      	beq.n	1a83a <create_name+0xc6>
			return FR_INVALID_NAME;
   1a836:	2306      	movs	r3, #6
   1a838:	e1bc      	b.n	1abb4 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   1a83a:	697b      	ldr	r3, [r7, #20]
   1a83c:	1c5a      	adds	r2, r3, #1
   1a83e:	617a      	str	r2, [r7, #20]
   1a840:	005b      	lsls	r3, r3, #1
   1a842:	68fa      	ldr	r2, [r7, #12]
   1a844:	18d3      	adds	r3, r2, r3
   1a846:	2224      	movs	r2, #36	; 0x24
   1a848:	18ba      	adds	r2, r7, r2
   1a84a:	8812      	ldrh	r2, [r2, #0]
   1a84c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   1a84e:	e7ac      	b.n	1a7aa <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   1a850:	693a      	ldr	r2, [r7, #16]
   1a852:	69bb      	ldr	r3, [r7, #24]
   1a854:	18d2      	adds	r2, r2, r3
   1a856:	683b      	ldr	r3, [r7, #0]
   1a858:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1a85a:	2324      	movs	r3, #36	; 0x24
   1a85c:	18fb      	adds	r3, r7, r3
   1a85e:	881b      	ldrh	r3, [r3, #0]
   1a860:	2b1f      	cmp	r3, #31
   1a862:	d801      	bhi.n	1a868 <create_name+0xf4>
   1a864:	2204      	movs	r2, #4
   1a866:	e000      	b.n	1a86a <create_name+0xf6>
   1a868:	2200      	movs	r2, #0
   1a86a:	2326      	movs	r3, #38	; 0x26
   1a86c:	18fb      	adds	r3, r7, r3
   1a86e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   1a870:	e017      	b.n	1a8a2 <create_name+0x12e>
		w = lfn[di-1];
   1a872:	697b      	ldr	r3, [r7, #20]
   1a874:	4aa0      	ldr	r2, [pc, #640]	; (1aaf8 <create_name+0x384>)
   1a876:	4694      	mov	ip, r2
   1a878:	4463      	add	r3, ip
   1a87a:	005b      	lsls	r3, r3, #1
   1a87c:	68fa      	ldr	r2, [r7, #12]
   1a87e:	18d2      	adds	r2, r2, r3
   1a880:	2324      	movs	r3, #36	; 0x24
   1a882:	18fb      	adds	r3, r7, r3
   1a884:	8812      	ldrh	r2, [r2, #0]
   1a886:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   1a888:	2324      	movs	r3, #36	; 0x24
   1a88a:	18fb      	adds	r3, r7, r3
   1a88c:	881b      	ldrh	r3, [r3, #0]
   1a88e:	2b20      	cmp	r3, #32
   1a890:	d004      	beq.n	1a89c <create_name+0x128>
   1a892:	2324      	movs	r3, #36	; 0x24
   1a894:	18fb      	adds	r3, r7, r3
   1a896:	881b      	ldrh	r3, [r3, #0]
   1a898:	2b2e      	cmp	r3, #46	; 0x2e
   1a89a:	d106      	bne.n	1a8aa <create_name+0x136>
		di--;
   1a89c:	697b      	ldr	r3, [r7, #20]
   1a89e:	3b01      	subs	r3, #1
   1a8a0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   1a8a2:	697b      	ldr	r3, [r7, #20]
   1a8a4:	2b00      	cmp	r3, #0
   1a8a6:	d1e4      	bne.n	1a872 <create_name+0xfe>
   1a8a8:	e000      	b.n	1a8ac <create_name+0x138>
		if (w != ' ' && w != '.') break;
   1a8aa:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1a8ac:	697b      	ldr	r3, [r7, #20]
   1a8ae:	2b00      	cmp	r3, #0
   1a8b0:	d101      	bne.n	1a8b6 <create_name+0x142>
   1a8b2:	2306      	movs	r3, #6
   1a8b4:	e17e      	b.n	1abb4 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   1a8b6:	697b      	ldr	r3, [r7, #20]
   1a8b8:	005b      	lsls	r3, r3, #1
   1a8ba:	68fa      	ldr	r2, [r7, #12]
   1a8bc:	18d3      	adds	r3, r2, r3
   1a8be:	2200      	movs	r2, #0
   1a8c0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   1a8c2:	687b      	ldr	r3, [r7, #4]
   1a8c4:	699b      	ldr	r3, [r3, #24]
   1a8c6:	220b      	movs	r2, #11
   1a8c8:	2120      	movs	r1, #32
   1a8ca:	0018      	movs	r0, r3
   1a8cc:	4b8b      	ldr	r3, [pc, #556]	; (1aafc <create_name+0x388>)
   1a8ce:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   1a8d0:	2300      	movs	r3, #0
   1a8d2:	61bb      	str	r3, [r7, #24]
   1a8d4:	e002      	b.n	1a8dc <create_name+0x168>
   1a8d6:	69bb      	ldr	r3, [r7, #24]
   1a8d8:	3301      	adds	r3, #1
   1a8da:	61bb      	str	r3, [r7, #24]
   1a8dc:	69bb      	ldr	r3, [r7, #24]
   1a8de:	005b      	lsls	r3, r3, #1
   1a8e0:	68fa      	ldr	r2, [r7, #12]
   1a8e2:	18d3      	adds	r3, r2, r3
   1a8e4:	881b      	ldrh	r3, [r3, #0]
   1a8e6:	2b20      	cmp	r3, #32
   1a8e8:	d0f5      	beq.n	1a8d6 <create_name+0x162>
   1a8ea:	69bb      	ldr	r3, [r7, #24]
   1a8ec:	005b      	lsls	r3, r3, #1
   1a8ee:	68fa      	ldr	r2, [r7, #12]
   1a8f0:	18d3      	adds	r3, r2, r3
   1a8f2:	881b      	ldrh	r3, [r3, #0]
   1a8f4:	2b2e      	cmp	r3, #46	; 0x2e
   1a8f6:	d0ee      	beq.n	1a8d6 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   1a8f8:	69bb      	ldr	r3, [r7, #24]
   1a8fa:	2b00      	cmp	r3, #0
   1a8fc:	d00b      	beq.n	1a916 <create_name+0x1a2>
   1a8fe:	2326      	movs	r3, #38	; 0x26
   1a900:	18fb      	adds	r3, r7, r3
   1a902:	2226      	movs	r2, #38	; 0x26
   1a904:	18ba      	adds	r2, r7, r2
   1a906:	7812      	ldrb	r2, [r2, #0]
   1a908:	2103      	movs	r1, #3
   1a90a:	430a      	orrs	r2, r1
   1a90c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1a90e:	e002      	b.n	1a916 <create_name+0x1a2>
   1a910:	697b      	ldr	r3, [r7, #20]
   1a912:	3b01      	subs	r3, #1
   1a914:	617b      	str	r3, [r7, #20]
   1a916:	697b      	ldr	r3, [r7, #20]
   1a918:	2b00      	cmp	r3, #0
   1a91a:	d009      	beq.n	1a930 <create_name+0x1bc>
   1a91c:	697b      	ldr	r3, [r7, #20]
   1a91e:	4a76      	ldr	r2, [pc, #472]	; (1aaf8 <create_name+0x384>)
   1a920:	4694      	mov	ip, r2
   1a922:	4463      	add	r3, ip
   1a924:	005b      	lsls	r3, r3, #1
   1a926:	68fa      	ldr	r2, [r7, #12]
   1a928:	18d3      	adds	r3, r2, r3
   1a92a:	881b      	ldrh	r3, [r3, #0]
   1a92c:	2b2e      	cmp	r3, #46	; 0x2e
   1a92e:	d1ef      	bne.n	1a910 <create_name+0x19c>

	b = i = 0; ni = 8;
   1a930:	2300      	movs	r3, #0
   1a932:	623b      	str	r3, [r7, #32]
   1a934:	2327      	movs	r3, #39	; 0x27
   1a936:	18fb      	adds	r3, r7, r3
   1a938:	2200      	movs	r2, #0
   1a93a:	701a      	strb	r2, [r3, #0]
   1a93c:	2308      	movs	r3, #8
   1a93e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   1a940:	69bb      	ldr	r3, [r7, #24]
   1a942:	1c5a      	adds	r2, r3, #1
   1a944:	61ba      	str	r2, [r7, #24]
   1a946:	005b      	lsls	r3, r3, #1
   1a948:	68fa      	ldr	r2, [r7, #12]
   1a94a:	18d2      	adds	r2, r2, r3
   1a94c:	2324      	movs	r3, #36	; 0x24
   1a94e:	18fb      	adds	r3, r7, r3
   1a950:	8812      	ldrh	r2, [r2, #0]
   1a952:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   1a954:	2324      	movs	r3, #36	; 0x24
   1a956:	18fb      	adds	r3, r7, r3
   1a958:	881b      	ldrh	r3, [r3, #0]
   1a95a:	2b00      	cmp	r3, #0
   1a95c:	d100      	bne.n	1a960 <create_name+0x1ec>
   1a95e:	e0c3      	b.n	1aae8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1a960:	2324      	movs	r3, #36	; 0x24
   1a962:	18fb      	adds	r3, r7, r3
   1a964:	881b      	ldrh	r3, [r3, #0]
   1a966:	2b20      	cmp	r3, #32
   1a968:	d008      	beq.n	1a97c <create_name+0x208>
   1a96a:	2324      	movs	r3, #36	; 0x24
   1a96c:	18fb      	adds	r3, r7, r3
   1a96e:	881b      	ldrh	r3, [r3, #0]
   1a970:	2b2e      	cmp	r3, #46	; 0x2e
   1a972:	d10c      	bne.n	1a98e <create_name+0x21a>
   1a974:	69ba      	ldr	r2, [r7, #24]
   1a976:	697b      	ldr	r3, [r7, #20]
   1a978:	429a      	cmp	r2, r3
   1a97a:	d008      	beq.n	1a98e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   1a97c:	2326      	movs	r3, #38	; 0x26
   1a97e:	18fb      	adds	r3, r7, r3
   1a980:	2226      	movs	r2, #38	; 0x26
   1a982:	18ba      	adds	r2, r7, r2
   1a984:	7812      	ldrb	r2, [r2, #0]
   1a986:	2103      	movs	r1, #3
   1a988:	430a      	orrs	r2, r1
   1a98a:	701a      	strb	r2, [r3, #0]
   1a98c:	e0ab      	b.n	1aae6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1a98e:	6a3a      	ldr	r2, [r7, #32]
   1a990:	69fb      	ldr	r3, [r7, #28]
   1a992:	429a      	cmp	r2, r3
   1a994:	d203      	bcs.n	1a99e <create_name+0x22a>
   1a996:	69ba      	ldr	r2, [r7, #24]
   1a998:	697b      	ldr	r3, [r7, #20]
   1a99a:	429a      	cmp	r2, r3
   1a99c:	d12a      	bne.n	1a9f4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   1a99e:	69fb      	ldr	r3, [r7, #28]
   1a9a0:	2b0b      	cmp	r3, #11
   1a9a2:	d108      	bne.n	1a9b6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   1a9a4:	2326      	movs	r3, #38	; 0x26
   1a9a6:	18fb      	adds	r3, r7, r3
   1a9a8:	2226      	movs	r2, #38	; 0x26
   1a9aa:	18ba      	adds	r2, r7, r2
   1a9ac:	7812      	ldrb	r2, [r2, #0]
   1a9ae:	2103      	movs	r1, #3
   1a9b0:	430a      	orrs	r2, r1
   1a9b2:	701a      	strb	r2, [r3, #0]
   1a9b4:	e0a9      	b.n	1ab0a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   1a9b6:	69ba      	ldr	r2, [r7, #24]
   1a9b8:	697b      	ldr	r3, [r7, #20]
   1a9ba:	429a      	cmp	r2, r3
   1a9bc:	d007      	beq.n	1a9ce <create_name+0x25a>
   1a9be:	2326      	movs	r3, #38	; 0x26
   1a9c0:	18fb      	adds	r3, r7, r3
   1a9c2:	2226      	movs	r2, #38	; 0x26
   1a9c4:	18ba      	adds	r2, r7, r2
   1a9c6:	7812      	ldrb	r2, [r2, #0]
   1a9c8:	2103      	movs	r1, #3
   1a9ca:	430a      	orrs	r2, r1
   1a9cc:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   1a9ce:	69ba      	ldr	r2, [r7, #24]
   1a9d0:	697b      	ldr	r3, [r7, #20]
   1a9d2:	429a      	cmp	r2, r3
   1a9d4:	d900      	bls.n	1a9d8 <create_name+0x264>
   1a9d6:	e097      	b.n	1ab08 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   1a9d8:	697b      	ldr	r3, [r7, #20]
   1a9da:	61bb      	str	r3, [r7, #24]
   1a9dc:	2308      	movs	r3, #8
   1a9de:	623b      	str	r3, [r7, #32]
   1a9e0:	230b      	movs	r3, #11
   1a9e2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   1a9e4:	2327      	movs	r3, #39	; 0x27
   1a9e6:	18fb      	adds	r3, r7, r3
   1a9e8:	2227      	movs	r2, #39	; 0x27
   1a9ea:	18ba      	adds	r2, r7, r2
   1a9ec:	7812      	ldrb	r2, [r2, #0]
   1a9ee:	0092      	lsls	r2, r2, #2
   1a9f0:	701a      	strb	r2, [r3, #0]
   1a9f2:	e078      	b.n	1aae6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   1a9f4:	2324      	movs	r3, #36	; 0x24
   1a9f6:	18fb      	adds	r3, r7, r3
   1a9f8:	881b      	ldrh	r3, [r3, #0]
   1a9fa:	2b7f      	cmp	r3, #127	; 0x7f
   1a9fc:	d920      	bls.n	1aa40 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1a9fe:	2324      	movs	r3, #36	; 0x24
   1aa00:	18fc      	adds	r4, r7, r3
   1aa02:	2324      	movs	r3, #36	; 0x24
   1aa04:	18fb      	adds	r3, r7, r3
   1aa06:	881b      	ldrh	r3, [r3, #0]
   1aa08:	2100      	movs	r1, #0
   1aa0a:	0018      	movs	r0, r3
   1aa0c:	4b37      	ldr	r3, [pc, #220]	; (1aaec <create_name+0x378>)
   1aa0e:	4798      	blx	r3
   1aa10:	0003      	movs	r3, r0
   1aa12:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   1aa14:	2324      	movs	r3, #36	; 0x24
   1aa16:	18fb      	adds	r3, r7, r3
   1aa18:	881b      	ldrh	r3, [r3, #0]
   1aa1a:	2b00      	cmp	r3, #0
   1aa1c:	d008      	beq.n	1aa30 <create_name+0x2bc>
   1aa1e:	2324      	movs	r3, #36	; 0x24
   1aa20:	18fb      	adds	r3, r7, r3
   1aa22:	881b      	ldrh	r3, [r3, #0]
   1aa24:	3b80      	subs	r3, #128	; 0x80
   1aa26:	4a36      	ldr	r2, [pc, #216]	; (1ab00 <create_name+0x38c>)
   1aa28:	5cd2      	ldrb	r2, [r2, r3]
   1aa2a:	2324      	movs	r3, #36	; 0x24
   1aa2c:	18fb      	adds	r3, r7, r3
   1aa2e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   1aa30:	2326      	movs	r3, #38	; 0x26
   1aa32:	18fb      	adds	r3, r7, r3
   1aa34:	2226      	movs	r2, #38	; 0x26
   1aa36:	18ba      	adds	r2, r7, r2
   1aa38:	7812      	ldrb	r2, [r2, #0]
   1aa3a:	2102      	movs	r1, #2
   1aa3c:	430a      	orrs	r2, r1
   1aa3e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   1aa40:	2324      	movs	r3, #36	; 0x24
   1aa42:	18fb      	adds	r3, r7, r3
   1aa44:	881b      	ldrh	r3, [r3, #0]
   1aa46:	2b00      	cmp	r3, #0
   1aa48:	d009      	beq.n	1aa5e <create_name+0x2ea>
   1aa4a:	2324      	movs	r3, #36	; 0x24
   1aa4c:	18fb      	adds	r3, r7, r3
   1aa4e:	881a      	ldrh	r2, [r3, #0]
   1aa50:	4b2c      	ldr	r3, [pc, #176]	; (1ab04 <create_name+0x390>)
   1aa52:	0011      	movs	r1, r2
   1aa54:	0018      	movs	r0, r3
   1aa56:	4b27      	ldr	r3, [pc, #156]	; (1aaf4 <create_name+0x380>)
   1aa58:	4798      	blx	r3
   1aa5a:	1e03      	subs	r3, r0, #0
   1aa5c:	d00c      	beq.n	1aa78 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1aa5e:	2324      	movs	r3, #36	; 0x24
   1aa60:	18fb      	adds	r3, r7, r3
   1aa62:	225f      	movs	r2, #95	; 0x5f
   1aa64:	801a      	strh	r2, [r3, #0]
   1aa66:	2326      	movs	r3, #38	; 0x26
   1aa68:	18fb      	adds	r3, r7, r3
   1aa6a:	2226      	movs	r2, #38	; 0x26
   1aa6c:	18ba      	adds	r2, r7, r2
   1aa6e:	7812      	ldrb	r2, [r2, #0]
   1aa70:	2103      	movs	r1, #3
   1aa72:	430a      	orrs	r2, r1
   1aa74:	701a      	strb	r2, [r3, #0]
   1aa76:	e02b      	b.n	1aad0 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   1aa78:	2324      	movs	r3, #36	; 0x24
   1aa7a:	18fb      	adds	r3, r7, r3
   1aa7c:	881b      	ldrh	r3, [r3, #0]
   1aa7e:	2b40      	cmp	r3, #64	; 0x40
   1aa80:	d90d      	bls.n	1aa9e <create_name+0x32a>
   1aa82:	2324      	movs	r3, #36	; 0x24
   1aa84:	18fb      	adds	r3, r7, r3
   1aa86:	881b      	ldrh	r3, [r3, #0]
   1aa88:	2b5a      	cmp	r3, #90	; 0x5a
   1aa8a:	d808      	bhi.n	1aa9e <create_name+0x32a>
					b |= 2;
   1aa8c:	2327      	movs	r3, #39	; 0x27
   1aa8e:	18fb      	adds	r3, r7, r3
   1aa90:	2227      	movs	r2, #39	; 0x27
   1aa92:	18ba      	adds	r2, r7, r2
   1aa94:	7812      	ldrb	r2, [r2, #0]
   1aa96:	2102      	movs	r1, #2
   1aa98:	430a      	orrs	r2, r1
   1aa9a:	701a      	strb	r2, [r3, #0]
   1aa9c:	e018      	b.n	1aad0 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   1aa9e:	2324      	movs	r3, #36	; 0x24
   1aaa0:	18fb      	adds	r3, r7, r3
   1aaa2:	881b      	ldrh	r3, [r3, #0]
   1aaa4:	2b60      	cmp	r3, #96	; 0x60
   1aaa6:	d913      	bls.n	1aad0 <create_name+0x35c>
   1aaa8:	2324      	movs	r3, #36	; 0x24
   1aaaa:	18fb      	adds	r3, r7, r3
   1aaac:	881b      	ldrh	r3, [r3, #0]
   1aaae:	2b7a      	cmp	r3, #122	; 0x7a
   1aab0:	d80e      	bhi.n	1aad0 <create_name+0x35c>
						b |= 1; w -= 0x20;
   1aab2:	2327      	movs	r3, #39	; 0x27
   1aab4:	18fb      	adds	r3, r7, r3
   1aab6:	2227      	movs	r2, #39	; 0x27
   1aab8:	18ba      	adds	r2, r7, r2
   1aaba:	7812      	ldrb	r2, [r2, #0]
   1aabc:	2101      	movs	r1, #1
   1aabe:	430a      	orrs	r2, r1
   1aac0:	701a      	strb	r2, [r3, #0]
   1aac2:	2324      	movs	r3, #36	; 0x24
   1aac4:	18fb      	adds	r3, r7, r3
   1aac6:	2224      	movs	r2, #36	; 0x24
   1aac8:	18ba      	adds	r2, r7, r2
   1aaca:	8812      	ldrh	r2, [r2, #0]
   1aacc:	3a20      	subs	r2, #32
   1aace:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   1aad0:	687b      	ldr	r3, [r7, #4]
   1aad2:	699a      	ldr	r2, [r3, #24]
   1aad4:	6a3b      	ldr	r3, [r7, #32]
   1aad6:	1c59      	adds	r1, r3, #1
   1aad8:	6239      	str	r1, [r7, #32]
   1aada:	18d3      	adds	r3, r2, r3
   1aadc:	2224      	movs	r2, #36	; 0x24
   1aade:	18ba      	adds	r2, r7, r2
   1aae0:	8812      	ldrh	r2, [r2, #0]
   1aae2:	b2d2      	uxtb	r2, r2
   1aae4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   1aae6:	e72b      	b.n	1a940 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   1aae8:	46c0      	nop			; (mov r8, r8)
   1aaea:	e00e      	b.n	1ab0a <create_name+0x396>
   1aaec:	0001bead 	.word	0x0001bead
   1aaf0:	00028378 	.word	0x00028378
   1aaf4:	00019317 	.word	0x00019317
   1aaf8:	7fffffff 	.word	0x7fffffff
   1aafc:	0001929d 	.word	0x0001929d
   1ab00:	000283c0 	.word	0x000283c0
   1ab04:	00028384 	.word	0x00028384
			if (si > di) break;			/* No extension */
   1ab08:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   1ab0a:	687b      	ldr	r3, [r7, #4]
   1ab0c:	699b      	ldr	r3, [r3, #24]
   1ab0e:	781b      	ldrb	r3, [r3, #0]
   1ab10:	2be5      	cmp	r3, #229	; 0xe5
   1ab12:	d103      	bne.n	1ab1c <create_name+0x3a8>
   1ab14:	687b      	ldr	r3, [r7, #4]
   1ab16:	699b      	ldr	r3, [r3, #24]
   1ab18:	2205      	movs	r2, #5
   1ab1a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   1ab1c:	69fb      	ldr	r3, [r7, #28]
   1ab1e:	2b08      	cmp	r3, #8
   1ab20:	d106      	bne.n	1ab30 <create_name+0x3bc>
   1ab22:	2327      	movs	r3, #39	; 0x27
   1ab24:	18fb      	adds	r3, r7, r3
   1ab26:	2227      	movs	r2, #39	; 0x27
   1ab28:	18ba      	adds	r2, r7, r2
   1ab2a:	7812      	ldrb	r2, [r2, #0]
   1ab2c:	0092      	lsls	r2, r2, #2
   1ab2e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   1ab30:	2327      	movs	r3, #39	; 0x27
   1ab32:	18fb      	adds	r3, r7, r3
   1ab34:	781b      	ldrb	r3, [r3, #0]
   1ab36:	220c      	movs	r2, #12
   1ab38:	4013      	ands	r3, r2
   1ab3a:	2b0c      	cmp	r3, #12
   1ab3c:	d006      	beq.n	1ab4c <create_name+0x3d8>
   1ab3e:	2327      	movs	r3, #39	; 0x27
   1ab40:	18fb      	adds	r3, r7, r3
   1ab42:	781b      	ldrb	r3, [r3, #0]
   1ab44:	2203      	movs	r2, #3
   1ab46:	4013      	ands	r3, r2
   1ab48:	2b03      	cmp	r3, #3
   1ab4a:	d107      	bne.n	1ab5c <create_name+0x3e8>
		cf |= NS_LFN;
   1ab4c:	2326      	movs	r3, #38	; 0x26
   1ab4e:	18fb      	adds	r3, r7, r3
   1ab50:	2226      	movs	r2, #38	; 0x26
   1ab52:	18ba      	adds	r2, r7, r2
   1ab54:	7812      	ldrb	r2, [r2, #0]
   1ab56:	2102      	movs	r1, #2
   1ab58:	430a      	orrs	r2, r1
   1ab5a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   1ab5c:	2326      	movs	r3, #38	; 0x26
   1ab5e:	18fb      	adds	r3, r7, r3
   1ab60:	781b      	ldrb	r3, [r3, #0]
   1ab62:	2202      	movs	r2, #2
   1ab64:	4013      	ands	r3, r2
   1ab66:	d11d      	bne.n	1aba4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1ab68:	2327      	movs	r3, #39	; 0x27
   1ab6a:	18fb      	adds	r3, r7, r3
   1ab6c:	781b      	ldrb	r3, [r3, #0]
   1ab6e:	2203      	movs	r2, #3
   1ab70:	4013      	ands	r3, r2
   1ab72:	2b01      	cmp	r3, #1
   1ab74:	d107      	bne.n	1ab86 <create_name+0x412>
   1ab76:	2326      	movs	r3, #38	; 0x26
   1ab78:	18fb      	adds	r3, r7, r3
   1ab7a:	2226      	movs	r2, #38	; 0x26
   1ab7c:	18ba      	adds	r2, r7, r2
   1ab7e:	7812      	ldrb	r2, [r2, #0]
   1ab80:	2110      	movs	r1, #16
   1ab82:	430a      	orrs	r2, r1
   1ab84:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1ab86:	2327      	movs	r3, #39	; 0x27
   1ab88:	18fb      	adds	r3, r7, r3
   1ab8a:	781b      	ldrb	r3, [r3, #0]
   1ab8c:	220c      	movs	r2, #12
   1ab8e:	4013      	ands	r3, r2
   1ab90:	2b04      	cmp	r3, #4
   1ab92:	d107      	bne.n	1aba4 <create_name+0x430>
   1ab94:	2326      	movs	r3, #38	; 0x26
   1ab96:	18fb      	adds	r3, r7, r3
   1ab98:	2226      	movs	r2, #38	; 0x26
   1ab9a:	18ba      	adds	r2, r7, r2
   1ab9c:	7812      	ldrb	r2, [r2, #0]
   1ab9e:	2108      	movs	r1, #8
   1aba0:	430a      	orrs	r2, r1
   1aba2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   1aba4:	687b      	ldr	r3, [r7, #4]
   1aba6:	699b      	ldr	r3, [r3, #24]
   1aba8:	330b      	adds	r3, #11
   1abaa:	2226      	movs	r2, #38	; 0x26
   1abac:	18ba      	adds	r2, r7, r2
   1abae:	7812      	ldrb	r2, [r2, #0]
   1abb0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   1abb2:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   1abb4:	0018      	movs	r0, r3
   1abb6:	46bd      	mov	sp, r7
   1abb8:	b00b      	add	sp, #44	; 0x2c
   1abba:	bd90      	pop	{r4, r7, pc}

0001abbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   1abbc:	b590      	push	{r4, r7, lr}
   1abbe:	b085      	sub	sp, #20
   1abc0:	af00      	add	r7, sp, #0
   1abc2:	6078      	str	r0, [r7, #4]
   1abc4:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   1abc6:	683b      	ldr	r3, [r7, #0]
   1abc8:	781b      	ldrb	r3, [r3, #0]
   1abca:	2b2f      	cmp	r3, #47	; 0x2f
   1abcc:	d003      	beq.n	1abd6 <follow_path+0x1a>
   1abce:	683b      	ldr	r3, [r7, #0]
   1abd0:	781b      	ldrb	r3, [r3, #0]
   1abd2:	2b5c      	cmp	r3, #92	; 0x5c
   1abd4:	d102      	bne.n	1abdc <follow_path+0x20>
		path++;
   1abd6:	683b      	ldr	r3, [r7, #0]
   1abd8:	3301      	adds	r3, #1
   1abda:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   1abdc:	687b      	ldr	r3, [r7, #4]
   1abde:	2200      	movs	r2, #0
   1abe0:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   1abe2:	683b      	ldr	r3, [r7, #0]
   1abe4:	781b      	ldrb	r3, [r3, #0]
   1abe6:	2b1f      	cmp	r3, #31
   1abe8:	d80c      	bhi.n	1ac04 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   1abea:	230f      	movs	r3, #15
   1abec:	18fc      	adds	r4, r7, r3
   1abee:	687b      	ldr	r3, [r7, #4]
   1abf0:	2100      	movs	r1, #0
   1abf2:	0018      	movs	r0, r3
   1abf4:	4b3c      	ldr	r3, [pc, #240]	; (1ace8 <follow_path+0x12c>)
   1abf6:	4798      	blx	r3
   1abf8:	0003      	movs	r3, r0
   1abfa:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   1abfc:	687b      	ldr	r3, [r7, #4]
   1abfe:	2200      	movs	r2, #0
   1ac00:	615a      	str	r2, [r3, #20]
   1ac02:	e06a      	b.n	1acda <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   1ac04:	230f      	movs	r3, #15
   1ac06:	18fc      	adds	r4, r7, r3
   1ac08:	003a      	movs	r2, r7
   1ac0a:	687b      	ldr	r3, [r7, #4]
   1ac0c:	0011      	movs	r1, r2
   1ac0e:	0018      	movs	r0, r3
   1ac10:	4b36      	ldr	r3, [pc, #216]	; (1acec <follow_path+0x130>)
   1ac12:	4798      	blx	r3
   1ac14:	0003      	movs	r3, r0
   1ac16:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1ac18:	230f      	movs	r3, #15
   1ac1a:	18fb      	adds	r3, r7, r3
   1ac1c:	781b      	ldrb	r3, [r3, #0]
   1ac1e:	2b00      	cmp	r3, #0
   1ac20:	d154      	bne.n	1accc <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   1ac22:	230f      	movs	r3, #15
   1ac24:	18fc      	adds	r4, r7, r3
   1ac26:	687b      	ldr	r3, [r7, #4]
   1ac28:	0018      	movs	r0, r3
   1ac2a:	4b31      	ldr	r3, [pc, #196]	; (1acf0 <follow_path+0x134>)
   1ac2c:	4798      	blx	r3
   1ac2e:	0003      	movs	r3, r0
   1ac30:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   1ac32:	687b      	ldr	r3, [r7, #4]
   1ac34:	699a      	ldr	r2, [r3, #24]
   1ac36:	230e      	movs	r3, #14
   1ac38:	18fb      	adds	r3, r7, r3
   1ac3a:	7ad2      	ldrb	r2, [r2, #11]
   1ac3c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   1ac3e:	230f      	movs	r3, #15
   1ac40:	18fb      	adds	r3, r7, r3
   1ac42:	781b      	ldrb	r3, [r3, #0]
   1ac44:	2b00      	cmp	r3, #0
   1ac46:	d00f      	beq.n	1ac68 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1ac48:	230f      	movs	r3, #15
   1ac4a:	18fb      	adds	r3, r7, r3
   1ac4c:	781b      	ldrb	r3, [r3, #0]
   1ac4e:	2b04      	cmp	r3, #4
   1ac50:	d13e      	bne.n	1acd0 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   1ac52:	230e      	movs	r3, #14
   1ac54:	18fb      	adds	r3, r7, r3
   1ac56:	781b      	ldrb	r3, [r3, #0]
   1ac58:	2204      	movs	r2, #4
   1ac5a:	4013      	ands	r3, r2
   1ac5c:	d13a      	bne.n	1acd4 <follow_path+0x118>
   1ac5e:	230f      	movs	r3, #15
   1ac60:	18fb      	adds	r3, r7, r3
   1ac62:	2205      	movs	r2, #5
   1ac64:	701a      	strb	r2, [r3, #0]
				}
				break;
   1ac66:	e035      	b.n	1acd4 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1ac68:	230e      	movs	r3, #14
   1ac6a:	18fb      	adds	r3, r7, r3
   1ac6c:	781b      	ldrb	r3, [r3, #0]
   1ac6e:	2204      	movs	r2, #4
   1ac70:	4013      	ands	r3, r2
   1ac72:	d131      	bne.n	1acd8 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   1ac74:	687b      	ldr	r3, [r7, #4]
   1ac76:	695b      	ldr	r3, [r3, #20]
   1ac78:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   1ac7a:	68bb      	ldr	r3, [r7, #8]
   1ac7c:	330b      	adds	r3, #11
   1ac7e:	781b      	ldrb	r3, [r3, #0]
   1ac80:	001a      	movs	r2, r3
   1ac82:	2310      	movs	r3, #16
   1ac84:	4013      	ands	r3, r2
   1ac86:	d104      	bne.n	1ac92 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   1ac88:	230f      	movs	r3, #15
   1ac8a:	18fb      	adds	r3, r7, r3
   1ac8c:	2205      	movs	r2, #5
   1ac8e:	701a      	strb	r2, [r3, #0]
   1ac90:	e023      	b.n	1acda <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   1ac92:	68bb      	ldr	r3, [r7, #8]
   1ac94:	3315      	adds	r3, #21
   1ac96:	781b      	ldrb	r3, [r3, #0]
   1ac98:	021b      	lsls	r3, r3, #8
   1ac9a:	b21a      	sxth	r2, r3
   1ac9c:	68bb      	ldr	r3, [r7, #8]
   1ac9e:	3314      	adds	r3, #20
   1aca0:	781b      	ldrb	r3, [r3, #0]
   1aca2:	b21b      	sxth	r3, r3
   1aca4:	4313      	orrs	r3, r2
   1aca6:	b21b      	sxth	r3, r3
   1aca8:	b29b      	uxth	r3, r3
   1acaa:	041b      	lsls	r3, r3, #16
   1acac:	68ba      	ldr	r2, [r7, #8]
   1acae:	321b      	adds	r2, #27
   1acb0:	7812      	ldrb	r2, [r2, #0]
   1acb2:	0212      	lsls	r2, r2, #8
   1acb4:	b211      	sxth	r1, r2
   1acb6:	68ba      	ldr	r2, [r7, #8]
   1acb8:	321a      	adds	r2, #26
   1acba:	7812      	ldrb	r2, [r2, #0]
   1acbc:	b212      	sxth	r2, r2
   1acbe:	430a      	orrs	r2, r1
   1acc0:	b212      	sxth	r2, r2
   1acc2:	b292      	uxth	r2, r2
   1acc4:	431a      	orrs	r2, r3
   1acc6:	687b      	ldr	r3, [r7, #4]
   1acc8:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   1acca:	e79b      	b.n	1ac04 <follow_path+0x48>
			if (res != FR_OK) break;
   1accc:	46c0      	nop			; (mov r8, r8)
   1acce:	e004      	b.n	1acda <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1acd0:	46c0      	nop			; (mov r8, r8)
   1acd2:	e002      	b.n	1acda <follow_path+0x11e>
				break;
   1acd4:	46c0      	nop			; (mov r8, r8)
   1acd6:	e000      	b.n	1acda <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1acd8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   1acda:	230f      	movs	r3, #15
   1acdc:	18fb      	adds	r3, r7, r3
   1acde:	781b      	ldrb	r3, [r3, #0]
}
   1ace0:	0018      	movs	r0, r3
   1ace2:	46bd      	mov	sp, r7
   1ace4:	b005      	add	sp, #20
   1ace6:	bd90      	pop	{r4, r7, pc}
   1ace8:	00019b8d 	.word	0x00019b8d
   1acec:	0001a775 	.word	0x0001a775
   1acf0:	0001a211 	.word	0x0001a211

0001acf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   1acf4:	b590      	push	{r4, r7, lr}
   1acf6:	b083      	sub	sp, #12
   1acf8:	af00      	add	r7, sp, #0
   1acfa:	6078      	str	r0, [r7, #4]
   1acfc:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1acfe:	687b      	ldr	r3, [r7, #4]
   1ad00:	7858      	ldrb	r0, [r3, #1]
   1ad02:	687b      	ldr	r3, [r7, #4]
   1ad04:	3330      	adds	r3, #48	; 0x30
   1ad06:	0019      	movs	r1, r3
   1ad08:	683a      	ldr	r2, [r7, #0]
   1ad0a:	2301      	movs	r3, #1
   1ad0c:	4c2a      	ldr	r4, [pc, #168]	; (1adb8 <check_fs+0xc4>)
   1ad0e:	47a0      	blx	r4
   1ad10:	1e03      	subs	r3, r0, #0
   1ad12:	d001      	beq.n	1ad18 <check_fs+0x24>
		return 3;
   1ad14:	2303      	movs	r3, #3
   1ad16:	e04b      	b.n	1adb0 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1ad18:	687b      	ldr	r3, [r7, #4]
   1ad1a:	4a28      	ldr	r2, [pc, #160]	; (1adbc <check_fs+0xc8>)
   1ad1c:	4694      	mov	ip, r2
   1ad1e:	4463      	add	r3, ip
   1ad20:	3301      	adds	r3, #1
   1ad22:	781b      	ldrb	r3, [r3, #0]
   1ad24:	021b      	lsls	r3, r3, #8
   1ad26:	b21a      	sxth	r2, r3
   1ad28:	687b      	ldr	r3, [r7, #4]
   1ad2a:	4924      	ldr	r1, [pc, #144]	; (1adbc <check_fs+0xc8>)
   1ad2c:	5c5b      	ldrb	r3, [r3, r1]
   1ad2e:	b21b      	sxth	r3, r3
   1ad30:	4313      	orrs	r3, r2
   1ad32:	b21b      	sxth	r3, r3
   1ad34:	4a22      	ldr	r2, [pc, #136]	; (1adc0 <check_fs+0xcc>)
   1ad36:	4293      	cmp	r3, r2
   1ad38:	d001      	beq.n	1ad3e <check_fs+0x4a>
		return 2;
   1ad3a:	2302      	movs	r3, #2
   1ad3c:	e038      	b.n	1adb0 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1ad3e:	687b      	ldr	r3, [r7, #4]
   1ad40:	3366      	adds	r3, #102	; 0x66
   1ad42:	3303      	adds	r3, #3
   1ad44:	781b      	ldrb	r3, [r3, #0]
   1ad46:	061a      	lsls	r2, r3, #24
   1ad48:	687b      	ldr	r3, [r7, #4]
   1ad4a:	3366      	adds	r3, #102	; 0x66
   1ad4c:	3302      	adds	r3, #2
   1ad4e:	781b      	ldrb	r3, [r3, #0]
   1ad50:	041b      	lsls	r3, r3, #16
   1ad52:	4313      	orrs	r3, r2
   1ad54:	687a      	ldr	r2, [r7, #4]
   1ad56:	3266      	adds	r2, #102	; 0x66
   1ad58:	3201      	adds	r2, #1
   1ad5a:	7812      	ldrb	r2, [r2, #0]
   1ad5c:	0212      	lsls	r2, r2, #8
   1ad5e:	4313      	orrs	r3, r2
   1ad60:	687a      	ldr	r2, [r7, #4]
   1ad62:	2166      	movs	r1, #102	; 0x66
   1ad64:	5c52      	ldrb	r2, [r2, r1]
   1ad66:	4313      	orrs	r3, r2
   1ad68:	021b      	lsls	r3, r3, #8
   1ad6a:	0a1b      	lsrs	r3, r3, #8
   1ad6c:	4a15      	ldr	r2, [pc, #84]	; (1adc4 <check_fs+0xd0>)
   1ad6e:	4293      	cmp	r3, r2
   1ad70:	d101      	bne.n	1ad76 <check_fs+0x82>
		return 0;
   1ad72:	2300      	movs	r3, #0
   1ad74:	e01c      	b.n	1adb0 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1ad76:	687b      	ldr	r3, [r7, #4]
   1ad78:	3382      	adds	r3, #130	; 0x82
   1ad7a:	3303      	adds	r3, #3
   1ad7c:	781b      	ldrb	r3, [r3, #0]
   1ad7e:	061a      	lsls	r2, r3, #24
   1ad80:	687b      	ldr	r3, [r7, #4]
   1ad82:	3382      	adds	r3, #130	; 0x82
   1ad84:	3302      	adds	r3, #2
   1ad86:	781b      	ldrb	r3, [r3, #0]
   1ad88:	041b      	lsls	r3, r3, #16
   1ad8a:	4313      	orrs	r3, r2
   1ad8c:	687a      	ldr	r2, [r7, #4]
   1ad8e:	3282      	adds	r2, #130	; 0x82
   1ad90:	3201      	adds	r2, #1
   1ad92:	7812      	ldrb	r2, [r2, #0]
   1ad94:	0212      	lsls	r2, r2, #8
   1ad96:	4313      	orrs	r3, r2
   1ad98:	687a      	ldr	r2, [r7, #4]
   1ad9a:	2182      	movs	r1, #130	; 0x82
   1ad9c:	5c52      	ldrb	r2, [r2, r1]
   1ad9e:	4313      	orrs	r3, r2
   1ada0:	021b      	lsls	r3, r3, #8
   1ada2:	0a1b      	lsrs	r3, r3, #8
   1ada4:	4a07      	ldr	r2, [pc, #28]	; (1adc4 <check_fs+0xd0>)
   1ada6:	4293      	cmp	r3, r2
   1ada8:	d101      	bne.n	1adae <check_fs+0xba>
		return 0;
   1adaa:	2300      	movs	r3, #0
   1adac:	e000      	b.n	1adb0 <check_fs+0xbc>

	return 1;
   1adae:	2301      	movs	r3, #1
}
   1adb0:	0018      	movs	r0, r3
   1adb2:	46bd      	mov	sp, r7
   1adb4:	b003      	add	sp, #12
   1adb6:	bd90      	pop	{r4, r7, pc}
   1adb8:	00018f5d 	.word	0x00018f5d
   1adbc:	0000022e 	.word	0x0000022e
   1adc0:	ffffaa55 	.word	0xffffaa55
   1adc4:	00544146 	.word	0x00544146

0001adc8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   1adc8:	b590      	push	{r4, r7, lr}
   1adca:	b093      	sub	sp, #76	; 0x4c
   1adcc:	af00      	add	r7, sp, #0
   1adce:	60f8      	str	r0, [r7, #12]
   1add0:	60b9      	str	r1, [r7, #8]
   1add2:	1dfb      	adds	r3, r7, #7
   1add4:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   1add6:	68fb      	ldr	r3, [r7, #12]
   1add8:	681b      	ldr	r3, [r3, #0]
   1adda:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   1addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1adde:	781b      	ldrb	r3, [r3, #0]
   1ade0:	3b30      	subs	r3, #48	; 0x30
   1ade2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1ade4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ade6:	2b09      	cmp	r3, #9
   1ade8:	d80b      	bhi.n	1ae02 <chk_mounted+0x3a>
   1adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1adec:	3301      	adds	r3, #1
   1adee:	781b      	ldrb	r3, [r3, #0]
   1adf0:	2b3a      	cmp	r3, #58	; 0x3a
   1adf2:	d106      	bne.n	1ae02 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   1adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1adf6:	3302      	adds	r3, #2
   1adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1adfa:	68fb      	ldr	r3, [r7, #12]
   1adfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1adfe:	601a      	str	r2, [r3, #0]
   1ae00:	e001      	b.n	1ae06 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   1ae02:	2300      	movs	r3, #0
   1ae04:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1ae06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ae08:	2b07      	cmp	r3, #7
   1ae0a:	d901      	bls.n	1ae10 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   1ae0c:	230b      	movs	r3, #11
   1ae0e:	e2af      	b.n	1b370 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1ae10:	4bc5      	ldr	r3, [pc, #788]	; (1b128 <chk_mounted+0x360>)
   1ae12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ae14:	0092      	lsls	r2, r2, #2
   1ae16:	58d3      	ldr	r3, [r2, r3]
   1ae18:	62bb      	str	r3, [r7, #40]	; 0x28
   1ae1a:	68bb      	ldr	r3, [r7, #8]
   1ae1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ae1e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae22:	2b00      	cmp	r3, #0
   1ae24:	d101      	bne.n	1ae2a <chk_mounted+0x62>
   1ae26:	230c      	movs	r3, #12
   1ae28:	e2a2      	b.n	1b370 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae2c:	781b      	ldrb	r3, [r3, #0]
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	d01c      	beq.n	1ae6c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   1ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae34:	785b      	ldrb	r3, [r3, #1]
   1ae36:	2227      	movs	r2, #39	; 0x27
   1ae38:	18bc      	adds	r4, r7, r2
   1ae3a:	0018      	movs	r0, r3
   1ae3c:	4bbb      	ldr	r3, [pc, #748]	; (1b12c <chk_mounted+0x364>)
   1ae3e:	4798      	blx	r3
   1ae40:	0003      	movs	r3, r0
   1ae42:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   1ae44:	2327      	movs	r3, #39	; 0x27
   1ae46:	18fb      	adds	r3, r7, r3
   1ae48:	781b      	ldrb	r3, [r3, #0]
   1ae4a:	2201      	movs	r2, #1
   1ae4c:	4013      	ands	r3, r2
   1ae4e:	d10d      	bne.n	1ae6c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1ae50:	1dfb      	adds	r3, r7, #7
   1ae52:	781b      	ldrb	r3, [r3, #0]
   1ae54:	2b00      	cmp	r3, #0
   1ae56:	d007      	beq.n	1ae68 <chk_mounted+0xa0>
   1ae58:	2327      	movs	r3, #39	; 0x27
   1ae5a:	18fb      	adds	r3, r7, r3
   1ae5c:	781b      	ldrb	r3, [r3, #0]
   1ae5e:	2204      	movs	r2, #4
   1ae60:	4013      	ands	r3, r2
   1ae62:	d001      	beq.n	1ae68 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   1ae64:	230a      	movs	r3, #10
   1ae66:	e283      	b.n	1b370 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   1ae68:	2300      	movs	r3, #0
   1ae6a:	e281      	b.n	1b370 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   1ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae6e:	2200      	movs	r2, #0
   1ae70:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1ae72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ae74:	b2da      	uxtb	r2, r3
   1ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae78:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae7c:	785b      	ldrb	r3, [r3, #1]
   1ae7e:	2227      	movs	r2, #39	; 0x27
   1ae80:	18bc      	adds	r4, r7, r2
   1ae82:	0018      	movs	r0, r3
   1ae84:	4baa      	ldr	r3, [pc, #680]	; (1b130 <chk_mounted+0x368>)
   1ae86:	4798      	blx	r3
   1ae88:	0003      	movs	r3, r0
   1ae8a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1ae8c:	2327      	movs	r3, #39	; 0x27
   1ae8e:	18fb      	adds	r3, r7, r3
   1ae90:	781b      	ldrb	r3, [r3, #0]
   1ae92:	2201      	movs	r2, #1
   1ae94:	4013      	ands	r3, r2
   1ae96:	d001      	beq.n	1ae9c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   1ae98:	2303      	movs	r3, #3
   1ae9a:	e269      	b.n	1b370 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1ae9c:	1dfb      	adds	r3, r7, #7
   1ae9e:	781b      	ldrb	r3, [r3, #0]
   1aea0:	2b00      	cmp	r3, #0
   1aea2:	d007      	beq.n	1aeb4 <chk_mounted+0xec>
   1aea4:	2327      	movs	r3, #39	; 0x27
   1aea6:	18fb      	adds	r3, r7, r3
   1aea8:	781b      	ldrb	r3, [r3, #0]
   1aeaa:	2204      	movs	r2, #4
   1aeac:	4013      	ands	r3, r2
   1aeae:	d001      	beq.n	1aeb4 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   1aeb0:	230a      	movs	r3, #10
   1aeb2:	e25d      	b.n	1b370 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1aeb4:	2300      	movs	r3, #0
   1aeb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   1aeb8:	2347      	movs	r3, #71	; 0x47
   1aeba:	18fc      	adds	r4, r7, r3
   1aebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aec0:	0011      	movs	r1, r2
   1aec2:	0018      	movs	r0, r3
   1aec4:	4b9b      	ldr	r3, [pc, #620]	; (1b134 <chk_mounted+0x36c>)
   1aec6:	4798      	blx	r3
   1aec8:	0003      	movs	r3, r0
   1aeca:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1aecc:	2347      	movs	r3, #71	; 0x47
   1aece:	18fb      	adds	r3, r7, r3
   1aed0:	781b      	ldrb	r3, [r3, #0]
   1aed2:	2b01      	cmp	r3, #1
   1aed4:	d13b      	bne.n	1af4e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   1aed6:	2346      	movs	r3, #70	; 0x46
   1aed8:	18fb      	adds	r3, r7, r3
   1aeda:	2200      	movs	r2, #0
   1aedc:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   1aede:	2346      	movs	r3, #70	; 0x46
   1aee0:	18fb      	adds	r3, r7, r3
   1aee2:	781b      	ldrb	r3, [r3, #0]
   1aee4:	2b00      	cmp	r3, #0
   1aee6:	d006      	beq.n	1aef6 <chk_mounted+0x12e>
   1aee8:	2346      	movs	r3, #70	; 0x46
   1aeea:	18fb      	adds	r3, r7, r3
   1aeec:	781a      	ldrb	r2, [r3, #0]
   1aeee:	2346      	movs	r3, #70	; 0x46
   1aef0:	18fb      	adds	r3, r7, r3
   1aef2:	3a01      	subs	r2, #1
   1aef4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   1aef6:	2346      	movs	r3, #70	; 0x46
   1aef8:	18fb      	adds	r3, r7, r3
   1aefa:	781b      	ldrb	r3, [r3, #0]
   1aefc:	011b      	lsls	r3, r3, #4
   1aefe:	33bf      	adds	r3, #191	; 0xbf
   1af00:	33ff      	adds	r3, #255	; 0xff
   1af02:	3330      	adds	r3, #48	; 0x30
   1af04:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af06:	18d3      	adds	r3, r2, r3
   1af08:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   1af0a:	6a3b      	ldr	r3, [r7, #32]
   1af0c:	3304      	adds	r3, #4
   1af0e:	781b      	ldrb	r3, [r3, #0]
   1af10:	2b00      	cmp	r3, #0
   1af12:	d01c      	beq.n	1af4e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   1af14:	6a3b      	ldr	r3, [r7, #32]
   1af16:	330b      	adds	r3, #11
   1af18:	781b      	ldrb	r3, [r3, #0]
   1af1a:	061a      	lsls	r2, r3, #24
   1af1c:	6a3b      	ldr	r3, [r7, #32]
   1af1e:	330a      	adds	r3, #10
   1af20:	781b      	ldrb	r3, [r3, #0]
   1af22:	041b      	lsls	r3, r3, #16
   1af24:	4313      	orrs	r3, r2
   1af26:	6a3a      	ldr	r2, [r7, #32]
   1af28:	3209      	adds	r2, #9
   1af2a:	7812      	ldrb	r2, [r2, #0]
   1af2c:	0212      	lsls	r2, r2, #8
   1af2e:	4313      	orrs	r3, r2
   1af30:	6a3a      	ldr	r2, [r7, #32]
   1af32:	3208      	adds	r2, #8
   1af34:	7812      	ldrb	r2, [r2, #0]
   1af36:	4313      	orrs	r3, r2
   1af38:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   1af3a:	2347      	movs	r3, #71	; 0x47
   1af3c:	18fc      	adds	r4, r7, r3
   1af3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af42:	0011      	movs	r1, r2
   1af44:	0018      	movs	r0, r3
   1af46:	4b7b      	ldr	r3, [pc, #492]	; (1b134 <chk_mounted+0x36c>)
   1af48:	4798      	blx	r3
   1af4a:	0003      	movs	r3, r0
   1af4c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   1af4e:	2347      	movs	r3, #71	; 0x47
   1af50:	18fb      	adds	r3, r7, r3
   1af52:	781b      	ldrb	r3, [r3, #0]
   1af54:	2b03      	cmp	r3, #3
   1af56:	d101      	bne.n	1af5c <chk_mounted+0x194>
   1af58:	2301      	movs	r3, #1
   1af5a:	e209      	b.n	1b370 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1af5c:	2347      	movs	r3, #71	; 0x47
   1af5e:	18fb      	adds	r3, r7, r3
   1af60:	781b      	ldrb	r3, [r3, #0]
   1af62:	2b00      	cmp	r3, #0
   1af64:	d001      	beq.n	1af6a <chk_mounted+0x1a2>
   1af66:	230d      	movs	r3, #13
   1af68:	e202      	b.n	1b370 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af6c:	223c      	movs	r2, #60	; 0x3c
   1af6e:	5c9b      	ldrb	r3, [r3, r2]
   1af70:	021b      	lsls	r3, r3, #8
   1af72:	b21a      	sxth	r2, r3
   1af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af76:	213b      	movs	r1, #59	; 0x3b
   1af78:	5c5b      	ldrb	r3, [r3, r1]
   1af7a:	b21b      	sxth	r3, r3
   1af7c:	4313      	orrs	r3, r2
   1af7e:	b21a      	sxth	r2, r3
   1af80:	2380      	movs	r3, #128	; 0x80
   1af82:	009b      	lsls	r3, r3, #2
   1af84:	429a      	cmp	r2, r3
   1af86:	d001      	beq.n	1af8c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   1af88:	230d      	movs	r3, #13
   1af8a:	e1f1      	b.n	1b370 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af8e:	2247      	movs	r2, #71	; 0x47
   1af90:	5c9b      	ldrb	r3, [r3, r2]
   1af92:	021b      	lsls	r3, r3, #8
   1af94:	b21a      	sxth	r2, r3
   1af96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af98:	2146      	movs	r1, #70	; 0x46
   1af9a:	5c5b      	ldrb	r3, [r3, r1]
   1af9c:	b21b      	sxth	r3, r3
   1af9e:	4313      	orrs	r3, r2
   1afa0:	b21b      	sxth	r3, r3
   1afa2:	b29b      	uxth	r3, r3
   1afa4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1afa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1afa8:	2b00      	cmp	r3, #0
   1afaa:	d112      	bne.n	1afd2 <chk_mounted+0x20a>
   1afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afae:	2257      	movs	r2, #87	; 0x57
   1afb0:	5c9b      	ldrb	r3, [r3, r2]
   1afb2:	061a      	lsls	r2, r3, #24
   1afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afb6:	2156      	movs	r1, #86	; 0x56
   1afb8:	5c5b      	ldrb	r3, [r3, r1]
   1afba:	041b      	lsls	r3, r3, #16
   1afbc:	4313      	orrs	r3, r2
   1afbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1afc0:	2155      	movs	r1, #85	; 0x55
   1afc2:	5c52      	ldrb	r2, [r2, r1]
   1afc4:	0212      	lsls	r2, r2, #8
   1afc6:	4313      	orrs	r3, r2
   1afc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1afca:	2154      	movs	r1, #84	; 0x54
   1afcc:	5c52      	ldrb	r2, [r2, r1]
   1afce:	4313      	orrs	r3, r2
   1afd0:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   1afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1afd6:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1afd8:	231f      	movs	r3, #31
   1afda:	18fb      	adds	r3, r7, r3
   1afdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1afde:	2140      	movs	r1, #64	; 0x40
   1afe0:	5c52      	ldrb	r2, [r2, r1]
   1afe2:	701a      	strb	r2, [r3, #0]
   1afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afe6:	221f      	movs	r2, #31
   1afe8:	18ba      	adds	r2, r7, r2
   1afea:	7812      	ldrb	r2, [r2, #0]
   1afec:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1afee:	231f      	movs	r3, #31
   1aff0:	18fb      	adds	r3, r7, r3
   1aff2:	781b      	ldrb	r3, [r3, #0]
   1aff4:	2b01      	cmp	r3, #1
   1aff6:	d006      	beq.n	1b006 <chk_mounted+0x23e>
   1aff8:	231f      	movs	r3, #31
   1affa:	18fb      	adds	r3, r7, r3
   1affc:	781b      	ldrb	r3, [r3, #0]
   1affe:	2b02      	cmp	r3, #2
   1b000:	d001      	beq.n	1b006 <chk_mounted+0x23e>
   1b002:	230d      	movs	r3, #13
   1b004:	e1b4      	b.n	1b370 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   1b006:	231f      	movs	r3, #31
   1b008:	18fb      	adds	r3, r7, r3
   1b00a:	781a      	ldrb	r2, [r3, #0]
   1b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b00e:	4353      	muls	r3, r2
   1b010:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   1b012:	231f      	movs	r3, #31
   1b014:	18fb      	adds	r3, r7, r3
   1b016:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b018:	213d      	movs	r1, #61	; 0x3d
   1b01a:	5c52      	ldrb	r2, [r2, r1]
   1b01c:	701a      	strb	r2, [r3, #0]
   1b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b020:	221f      	movs	r2, #31
   1b022:	18ba      	adds	r2, r7, r2
   1b024:	7812      	ldrb	r2, [r2, #0]
   1b026:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1b028:	231f      	movs	r3, #31
   1b02a:	18fb      	adds	r3, r7, r3
   1b02c:	781b      	ldrb	r3, [r3, #0]
   1b02e:	2b00      	cmp	r3, #0
   1b030:	d008      	beq.n	1b044 <chk_mounted+0x27c>
   1b032:	231f      	movs	r3, #31
   1b034:	18fb      	adds	r3, r7, r3
   1b036:	781b      	ldrb	r3, [r3, #0]
   1b038:	221f      	movs	r2, #31
   1b03a:	18ba      	adds	r2, r7, r2
   1b03c:	7812      	ldrb	r2, [r2, #0]
   1b03e:	3a01      	subs	r2, #1
   1b040:	4013      	ands	r3, r2
   1b042:	d001      	beq.n	1b048 <chk_mounted+0x280>
   1b044:	230d      	movs	r3, #13
   1b046:	e193      	b.n	1b370 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   1b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b04a:	2242      	movs	r2, #66	; 0x42
   1b04c:	5c9b      	ldrb	r3, [r3, r2]
   1b04e:	021b      	lsls	r3, r3, #8
   1b050:	b21a      	sxth	r2, r3
   1b052:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b054:	2141      	movs	r1, #65	; 0x41
   1b056:	5c5b      	ldrb	r3, [r3, r1]
   1b058:	b21b      	sxth	r3, r3
   1b05a:	4313      	orrs	r3, r2
   1b05c:	b21b      	sxth	r3, r3
   1b05e:	b29a      	uxth	r2, r3
   1b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b062:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   1b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b066:	891b      	ldrh	r3, [r3, #8]
   1b068:	220f      	movs	r2, #15
   1b06a:	4013      	ands	r3, r2
   1b06c:	b29b      	uxth	r3, r3
   1b06e:	2b00      	cmp	r3, #0
   1b070:	d001      	beq.n	1b076 <chk_mounted+0x2ae>
   1b072:	230d      	movs	r3, #13
   1b074:	e17c      	b.n	1b370 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   1b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b078:	2244      	movs	r2, #68	; 0x44
   1b07a:	5c9b      	ldrb	r3, [r3, r2]
   1b07c:	021b      	lsls	r3, r3, #8
   1b07e:	b21a      	sxth	r2, r3
   1b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b082:	2143      	movs	r1, #67	; 0x43
   1b084:	5c5b      	ldrb	r3, [r3, r1]
   1b086:	b21b      	sxth	r3, r3
   1b088:	4313      	orrs	r3, r2
   1b08a:	b21b      	sxth	r3, r3
   1b08c:	b29b      	uxth	r3, r3
   1b08e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1b090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b092:	2b00      	cmp	r3, #0
   1b094:	d112      	bne.n	1b0bc <chk_mounted+0x2f4>
   1b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b098:	2253      	movs	r2, #83	; 0x53
   1b09a:	5c9b      	ldrb	r3, [r3, r2]
   1b09c:	061a      	lsls	r2, r3, #24
   1b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b0a0:	2152      	movs	r1, #82	; 0x52
   1b0a2:	5c5b      	ldrb	r3, [r3, r1]
   1b0a4:	041b      	lsls	r3, r3, #16
   1b0a6:	4313      	orrs	r3, r2
   1b0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b0aa:	2151      	movs	r1, #81	; 0x51
   1b0ac:	5c52      	ldrb	r2, [r2, r1]
   1b0ae:	0212      	lsls	r2, r2, #8
   1b0b0:	4313      	orrs	r3, r2
   1b0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b0b4:	2150      	movs	r1, #80	; 0x50
   1b0b6:	5c52      	ldrb	r2, [r2, r1]
   1b0b8:	4313      	orrs	r3, r2
   1b0ba:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b0be:	223f      	movs	r2, #63	; 0x3f
   1b0c0:	5c9b      	ldrb	r3, [r3, r2]
   1b0c2:	021b      	lsls	r3, r3, #8
   1b0c4:	b21a      	sxth	r2, r3
   1b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b0c8:	213e      	movs	r1, #62	; 0x3e
   1b0ca:	5c5b      	ldrb	r3, [r3, r1]
   1b0cc:	b21b      	sxth	r3, r3
   1b0ce:	4313      	orrs	r3, r2
   1b0d0:	b21a      	sxth	r2, r3
   1b0d2:	231c      	movs	r3, #28
   1b0d4:	18fb      	adds	r3, r7, r3
   1b0d6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1b0d8:	231c      	movs	r3, #28
   1b0da:	18fb      	adds	r3, r7, r3
   1b0dc:	881b      	ldrh	r3, [r3, #0]
   1b0de:	2b00      	cmp	r3, #0
   1b0e0:	d101      	bne.n	1b0e6 <chk_mounted+0x31e>
   1b0e2:	230d      	movs	r3, #13
   1b0e4:	e144      	b.n	1b370 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   1b0e6:	231c      	movs	r3, #28
   1b0e8:	18fb      	adds	r3, r7, r3
   1b0ea:	881a      	ldrh	r2, [r3, #0]
   1b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b0ee:	18d3      	adds	r3, r2, r3
   1b0f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b0f2:	8912      	ldrh	r2, [r2, #8]
   1b0f4:	0912      	lsrs	r2, r2, #4
   1b0f6:	b292      	uxth	r2, r2
   1b0f8:	189b      	adds	r3, r3, r2
   1b0fa:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1b0fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1b0fe:	69bb      	ldr	r3, [r7, #24]
   1b100:	429a      	cmp	r2, r3
   1b102:	d201      	bcs.n	1b108 <chk_mounted+0x340>
   1b104:	230d      	movs	r3, #13
   1b106:	e133      	b.n	1b370 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   1b108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1b10a:	69bb      	ldr	r3, [r7, #24]
   1b10c:	1ad2      	subs	r2, r2, r3
   1b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b110:	789b      	ldrb	r3, [r3, #2]
   1b112:	0019      	movs	r1, r3
   1b114:	4b08      	ldr	r3, [pc, #32]	; (1b138 <chk_mounted+0x370>)
   1b116:	0010      	movs	r0, r2
   1b118:	4798      	blx	r3
   1b11a:	0003      	movs	r3, r0
   1b11c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1b11e:	697b      	ldr	r3, [r7, #20]
   1b120:	2b00      	cmp	r3, #0
   1b122:	d10b      	bne.n	1b13c <chk_mounted+0x374>
   1b124:	230d      	movs	r3, #13
   1b126:	e123      	b.n	1b370 <chk_mounted+0x5a8>
   1b128:	20004388 	.word	0x20004388
   1b12c:	00018f25 	.word	0x00018f25
   1b130:	00018ea1 	.word	0x00018ea1
   1b134:	0001acf5 	.word	0x0001acf5
   1b138:	00020471 	.word	0x00020471
	fmt = FS_FAT12;
   1b13c:	2347      	movs	r3, #71	; 0x47
   1b13e:	18fb      	adds	r3, r7, r3
   1b140:	2201      	movs	r2, #1
   1b142:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   1b144:	697b      	ldr	r3, [r7, #20]
   1b146:	4a8c      	ldr	r2, [pc, #560]	; (1b378 <chk_mounted+0x5b0>)
   1b148:	4293      	cmp	r3, r2
   1b14a:	d903      	bls.n	1b154 <chk_mounted+0x38c>
   1b14c:	2347      	movs	r3, #71	; 0x47
   1b14e:	18fb      	adds	r3, r7, r3
   1b150:	2202      	movs	r2, #2
   1b152:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   1b154:	697b      	ldr	r3, [r7, #20]
   1b156:	4a89      	ldr	r2, [pc, #548]	; (1b37c <chk_mounted+0x5b4>)
   1b158:	4293      	cmp	r3, r2
   1b15a:	d903      	bls.n	1b164 <chk_mounted+0x39c>
   1b15c:	2347      	movs	r3, #71	; 0x47
   1b15e:	18fb      	adds	r3, r7, r3
   1b160:	2203      	movs	r2, #3
   1b162:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   1b164:	697b      	ldr	r3, [r7, #20]
   1b166:	1c9a      	adds	r2, r3, #2
   1b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b16a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1b16c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b16e:	69bb      	ldr	r3, [r7, #24]
   1b170:	18d2      	adds	r2, r2, r3
   1b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b174:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1b176:	231c      	movs	r3, #28
   1b178:	18fb      	adds	r3, r7, r3
   1b17a:	881a      	ldrh	r2, [r3, #0]
   1b17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b17e:	18d2      	adds	r2, r2, r3
   1b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b182:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   1b184:	2347      	movs	r3, #71	; 0x47
   1b186:	18fb      	adds	r3, r7, r3
   1b188:	781b      	ldrb	r3, [r3, #0]
   1b18a:	2b03      	cmp	r3, #3
   1b18c:	d11e      	bne.n	1b1cc <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   1b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b190:	891b      	ldrh	r3, [r3, #8]
   1b192:	2b00      	cmp	r3, #0
   1b194:	d001      	beq.n	1b19a <chk_mounted+0x3d2>
   1b196:	230d      	movs	r3, #13
   1b198:	e0ea      	b.n	1b370 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1b19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b19c:	225f      	movs	r2, #95	; 0x5f
   1b19e:	5c9b      	ldrb	r3, [r3, r2]
   1b1a0:	061a      	lsls	r2, r3, #24
   1b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1a4:	215e      	movs	r1, #94	; 0x5e
   1b1a6:	5c5b      	ldrb	r3, [r3, r1]
   1b1a8:	041b      	lsls	r3, r3, #16
   1b1aa:	4313      	orrs	r3, r2
   1b1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b1ae:	215d      	movs	r1, #93	; 0x5d
   1b1b0:	5c52      	ldrb	r2, [r2, r1]
   1b1b2:	0212      	lsls	r2, r2, #8
   1b1b4:	4313      	orrs	r3, r2
   1b1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b1b8:	215c      	movs	r1, #92	; 0x5c
   1b1ba:	5c52      	ldrb	r2, [r2, r1]
   1b1bc:	431a      	orrs	r2, r3
   1b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1c0:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1c4:	699b      	ldr	r3, [r3, #24]
   1b1c6:	009b      	lsls	r3, r3, #2
   1b1c8:	633b      	str	r3, [r7, #48]	; 0x30
   1b1ca:	e020      	b.n	1b20e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   1b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1ce:	891b      	ldrh	r3, [r3, #8]
   1b1d0:	2b00      	cmp	r3, #0
   1b1d2:	d101      	bne.n	1b1d8 <chk_mounted+0x410>
   1b1d4:	230d      	movs	r3, #13
   1b1d6:	e0cb      	b.n	1b370 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   1b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1da:	6a1a      	ldr	r2, [r3, #32]
   1b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b1de:	18d2      	adds	r2, r2, r3
   1b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1e2:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1b1e4:	2347      	movs	r3, #71	; 0x47
   1b1e6:	18fb      	adds	r3, r7, r3
   1b1e8:	781b      	ldrb	r3, [r3, #0]
   1b1ea:	2b02      	cmp	r3, #2
   1b1ec:	d103      	bne.n	1b1f6 <chk_mounted+0x42e>
   1b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1f0:	699b      	ldr	r3, [r3, #24]
   1b1f2:	005b      	lsls	r3, r3, #1
   1b1f4:	e00a      	b.n	1b20c <chk_mounted+0x444>
   1b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1f8:	699a      	ldr	r2, [r3, #24]
   1b1fa:	0013      	movs	r3, r2
   1b1fc:	005b      	lsls	r3, r3, #1
   1b1fe:	189b      	adds	r3, r3, r2
   1b200:	085a      	lsrs	r2, r3, #1
   1b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b204:	699b      	ldr	r3, [r3, #24]
   1b206:	2101      	movs	r1, #1
   1b208:	400b      	ands	r3, r1
   1b20a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   1b20c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b210:	69da      	ldr	r2, [r3, #28]
   1b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b214:	495a      	ldr	r1, [pc, #360]	; (1b380 <chk_mounted+0x5b8>)
   1b216:	468c      	mov	ip, r1
   1b218:	4463      	add	r3, ip
   1b21a:	0a5b      	lsrs	r3, r3, #9
   1b21c:	429a      	cmp	r2, r3
   1b21e:	d201      	bcs.n	1b224 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   1b220:	230d      	movs	r3, #13
   1b222:	e0a5      	b.n	1b370 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   1b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b226:	2201      	movs	r2, #1
   1b228:	4252      	negs	r2, r2
   1b22a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   1b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b22e:	2200      	movs	r2, #0
   1b230:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   1b232:	2347      	movs	r3, #71	; 0x47
   1b234:	18fb      	adds	r3, r7, r3
   1b236:	781b      	ldrb	r3, [r3, #0]
   1b238:	2b03      	cmp	r3, #3
   1b23a:	d000      	beq.n	1b23e <chk_mounted+0x476>
   1b23c:	e082      	b.n	1b344 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   1b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b240:	2200      	movs	r2, #0
   1b242:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   1b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b246:	2261      	movs	r2, #97	; 0x61
   1b248:	5c9b      	ldrb	r3, [r3, r2]
   1b24a:	021b      	lsls	r3, r3, #8
   1b24c:	b21a      	sxth	r2, r3
   1b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b250:	2160      	movs	r1, #96	; 0x60
   1b252:	5c5b      	ldrb	r3, [r3, r1]
   1b254:	b21b      	sxth	r3, r3
   1b256:	4313      	orrs	r3, r2
   1b258:	b21b      	sxth	r3, r3
   1b25a:	b29b      	uxth	r3, r3
   1b25c:	001a      	movs	r2, r3
   1b25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b260:	18d2      	adds	r2, r2, r3
   1b262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b264:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b268:	7858      	ldrb	r0, [r3, #1]
   1b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b26c:	3330      	adds	r3, #48	; 0x30
   1b26e:	0019      	movs	r1, r3
   1b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b272:	695a      	ldr	r2, [r3, #20]
   1b274:	2301      	movs	r3, #1
   1b276:	4c43      	ldr	r4, [pc, #268]	; (1b384 <chk_mounted+0x5bc>)
   1b278:	47a0      	blx	r4
   1b27a:	1e03      	subs	r3, r0, #0
   1b27c:	d162      	bne.n	1b344 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b280:	4a41      	ldr	r2, [pc, #260]	; (1b388 <chk_mounted+0x5c0>)
   1b282:	5c9b      	ldrb	r3, [r3, r2]
   1b284:	021b      	lsls	r3, r3, #8
   1b286:	b21a      	sxth	r2, r3
   1b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b28a:	4940      	ldr	r1, [pc, #256]	; (1b38c <chk_mounted+0x5c4>)
   1b28c:	5c5b      	ldrb	r3, [r3, r1]
   1b28e:	b21b      	sxth	r3, r3
   1b290:	4313      	orrs	r3, r2
   1b292:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1b294:	4a3e      	ldr	r2, [pc, #248]	; (1b390 <chk_mounted+0x5c8>)
   1b296:	4293      	cmp	r3, r2
   1b298:	d154      	bne.n	1b344 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1b29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b29c:	2233      	movs	r2, #51	; 0x33
   1b29e:	5c9b      	ldrb	r3, [r3, r2]
   1b2a0:	061a      	lsls	r2, r3, #24
   1b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2a4:	2132      	movs	r1, #50	; 0x32
   1b2a6:	5c5b      	ldrb	r3, [r3, r1]
   1b2a8:	041b      	lsls	r3, r3, #16
   1b2aa:	4313      	orrs	r3, r2
   1b2ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b2ae:	2131      	movs	r1, #49	; 0x31
   1b2b0:	5c52      	ldrb	r2, [r2, r1]
   1b2b2:	0212      	lsls	r2, r2, #8
   1b2b4:	4313      	orrs	r3, r2
   1b2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b2b8:	2130      	movs	r1, #48	; 0x30
   1b2ba:	5c52      	ldrb	r2, [r2, r1]
   1b2bc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1b2be:	4a35      	ldr	r2, [pc, #212]	; (1b394 <chk_mounted+0x5cc>)
   1b2c0:	4293      	cmp	r3, r2
   1b2c2:	d13f      	bne.n	1b344 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   1b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2c6:	4a34      	ldr	r2, [pc, #208]	; (1b398 <chk_mounted+0x5d0>)
   1b2c8:	5c9b      	ldrb	r3, [r3, r2]
   1b2ca:	061a      	lsls	r2, r3, #24
   1b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2ce:	4933      	ldr	r1, [pc, #204]	; (1b39c <chk_mounted+0x5d4>)
   1b2d0:	5c5b      	ldrb	r3, [r3, r1]
   1b2d2:	041b      	lsls	r3, r3, #16
   1b2d4:	4313      	orrs	r3, r2
   1b2d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b2d8:	4931      	ldr	r1, [pc, #196]	; (1b3a0 <chk_mounted+0x5d8>)
   1b2da:	5c52      	ldrb	r2, [r2, r1]
   1b2dc:	0212      	lsls	r2, r2, #8
   1b2de:	4313      	orrs	r3, r2
   1b2e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b2e2:	2285      	movs	r2, #133	; 0x85
   1b2e4:	0092      	lsls	r2, r2, #2
   1b2e6:	5c8a      	ldrb	r2, [r1, r2]
   1b2e8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1b2ea:	4a2e      	ldr	r2, [pc, #184]	; (1b3a4 <chk_mounted+0x5dc>)
   1b2ec:	4293      	cmp	r3, r2
   1b2ee:	d129      	bne.n	1b344 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   1b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2f2:	4a2d      	ldr	r2, [pc, #180]	; (1b3a8 <chk_mounted+0x5e0>)
   1b2f4:	5c9b      	ldrb	r3, [r3, r2]
   1b2f6:	061a      	lsls	r2, r3, #24
   1b2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2fa:	492c      	ldr	r1, [pc, #176]	; (1b3ac <chk_mounted+0x5e4>)
   1b2fc:	5c5b      	ldrb	r3, [r3, r1]
   1b2fe:	041b      	lsls	r3, r3, #16
   1b300:	4313      	orrs	r3, r2
   1b302:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b304:	492a      	ldr	r1, [pc, #168]	; (1b3b0 <chk_mounted+0x5e8>)
   1b306:	5c52      	ldrb	r2, [r2, r1]
   1b308:	0212      	lsls	r2, r2, #8
   1b30a:	4313      	orrs	r3, r2
   1b30c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b30e:	2287      	movs	r2, #135	; 0x87
   1b310:	0092      	lsls	r2, r2, #2
   1b312:	5c8a      	ldrb	r2, [r1, r2]
   1b314:	431a      	orrs	r2, r3
   1b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b318:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1b31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b31c:	4a25      	ldr	r2, [pc, #148]	; (1b3b4 <chk_mounted+0x5ec>)
   1b31e:	5c9b      	ldrb	r3, [r3, r2]
   1b320:	061a      	lsls	r2, r3, #24
   1b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b324:	4924      	ldr	r1, [pc, #144]	; (1b3b8 <chk_mounted+0x5f0>)
   1b326:	5c5b      	ldrb	r3, [r3, r1]
   1b328:	041b      	lsls	r3, r3, #16
   1b32a:	4313      	orrs	r3, r2
   1b32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b32e:	4923      	ldr	r1, [pc, #140]	; (1b3bc <chk_mounted+0x5f4>)
   1b330:	5c52      	ldrb	r2, [r2, r1]
   1b332:	0212      	lsls	r2, r2, #8
   1b334:	4313      	orrs	r3, r2
   1b336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b338:	2286      	movs	r2, #134	; 0x86
   1b33a:	0092      	lsls	r2, r2, #2
   1b33c:	5c8a      	ldrb	r2, [r1, r2]
   1b33e:	431a      	orrs	r2, r3
   1b340:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b342:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   1b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b346:	2247      	movs	r2, #71	; 0x47
   1b348:	18ba      	adds	r2, r7, r2
   1b34a:	7812      	ldrb	r2, [r2, #0]
   1b34c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   1b34e:	4b1c      	ldr	r3, [pc, #112]	; (1b3c0 <chk_mounted+0x5f8>)
   1b350:	881b      	ldrh	r3, [r3, #0]
   1b352:	3301      	adds	r3, #1
   1b354:	b29a      	uxth	r2, r3
   1b356:	4b1a      	ldr	r3, [pc, #104]	; (1b3c0 <chk_mounted+0x5f8>)
   1b358:	801a      	strh	r2, [r3, #0]
   1b35a:	4b19      	ldr	r3, [pc, #100]	; (1b3c0 <chk_mounted+0x5f8>)
   1b35c:	881a      	ldrh	r2, [r3, #0]
   1b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b360:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   1b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b364:	2200      	movs	r2, #0
   1b366:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   1b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b36a:	2200      	movs	r2, #0
   1b36c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   1b36e:	2300      	movs	r3, #0
}
   1b370:	0018      	movs	r0, r3
   1b372:	46bd      	mov	sp, r7
   1b374:	b013      	add	sp, #76	; 0x4c
   1b376:	bd90      	pop	{r4, r7, pc}
   1b378:	00000ff5 	.word	0x00000ff5
   1b37c:	0000fff5 	.word	0x0000fff5
   1b380:	000001ff 	.word	0x000001ff
   1b384:	00018f5d 	.word	0x00018f5d
   1b388:	0000022f 	.word	0x0000022f
   1b38c:	0000022e 	.word	0x0000022e
   1b390:	ffffaa55 	.word	0xffffaa55
   1b394:	41615252 	.word	0x41615252
   1b398:	00000217 	.word	0x00000217
   1b39c:	00000216 	.word	0x00000216
   1b3a0:	00000215 	.word	0x00000215
   1b3a4:	61417272 	.word	0x61417272
   1b3a8:	0000021f 	.word	0x0000021f
   1b3ac:	0000021e 	.word	0x0000021e
   1b3b0:	0000021d 	.word	0x0000021d
   1b3b4:	0000021b 	.word	0x0000021b
   1b3b8:	0000021a 	.word	0x0000021a
   1b3bc:	00000219 	.word	0x00000219
   1b3c0:	200043a8 	.word	0x200043a8

0001b3c4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   1b3c4:	b580      	push	{r7, lr}
   1b3c6:	b082      	sub	sp, #8
   1b3c8:	af00      	add	r7, sp, #0
   1b3ca:	6078      	str	r0, [r7, #4]
   1b3cc:	000a      	movs	r2, r1
   1b3ce:	1cbb      	adds	r3, r7, #2
   1b3d0:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   1b3d2:	687b      	ldr	r3, [r7, #4]
   1b3d4:	2b00      	cmp	r3, #0
   1b3d6:	d009      	beq.n	1b3ec <validate+0x28>
   1b3d8:	687b      	ldr	r3, [r7, #4]
   1b3da:	781b      	ldrb	r3, [r3, #0]
   1b3dc:	2b00      	cmp	r3, #0
   1b3de:	d005      	beq.n	1b3ec <validate+0x28>
   1b3e0:	687b      	ldr	r3, [r7, #4]
   1b3e2:	88db      	ldrh	r3, [r3, #6]
   1b3e4:	1cba      	adds	r2, r7, #2
   1b3e6:	8812      	ldrh	r2, [r2, #0]
   1b3e8:	429a      	cmp	r2, r3
   1b3ea:	d001      	beq.n	1b3f0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   1b3ec:	2309      	movs	r3, #9
   1b3ee:	e00c      	b.n	1b40a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   1b3f0:	687b      	ldr	r3, [r7, #4]
   1b3f2:	785b      	ldrb	r3, [r3, #1]
   1b3f4:	0018      	movs	r0, r3
   1b3f6:	4b07      	ldr	r3, [pc, #28]	; (1b414 <validate+0x50>)
   1b3f8:	4798      	blx	r3
   1b3fa:	0003      	movs	r3, r0
   1b3fc:	001a      	movs	r2, r3
   1b3fe:	2301      	movs	r3, #1
   1b400:	4013      	ands	r3, r2
   1b402:	d001      	beq.n	1b408 <validate+0x44>
		return FR_NOT_READY;
   1b404:	2303      	movs	r3, #3
   1b406:	e000      	b.n	1b40a <validate+0x46>

	return FR_OK;
   1b408:	2300      	movs	r3, #0
}
   1b40a:	0018      	movs	r0, r3
   1b40c:	46bd      	mov	sp, r7
   1b40e:	b002      	add	sp, #8
   1b410:	bd80      	pop	{r7, pc}
   1b412:	46c0      	nop			; (mov r8, r8)
   1b414:	00018f25 	.word	0x00018f25

0001b418 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   1b418:	b580      	push	{r7, lr}
   1b41a:	b084      	sub	sp, #16
   1b41c:	af00      	add	r7, sp, #0
   1b41e:	0002      	movs	r2, r0
   1b420:	6039      	str	r1, [r7, #0]
   1b422:	1dfb      	adds	r3, r7, #7
   1b424:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   1b426:	1dfb      	adds	r3, r7, #7
   1b428:	781b      	ldrb	r3, [r3, #0]
   1b42a:	2b07      	cmp	r3, #7
   1b42c:	d901      	bls.n	1b432 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   1b42e:	230b      	movs	r3, #11
   1b430:	e018      	b.n	1b464 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   1b432:	1dfb      	adds	r3, r7, #7
   1b434:	781a      	ldrb	r2, [r3, #0]
   1b436:	4b0d      	ldr	r3, [pc, #52]	; (1b46c <f_mount+0x54>)
   1b438:	0092      	lsls	r2, r2, #2
   1b43a:	58d3      	ldr	r3, [r2, r3]
   1b43c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   1b43e:	68fb      	ldr	r3, [r7, #12]
   1b440:	2b00      	cmp	r3, #0
   1b442:	d002      	beq.n	1b44a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   1b444:	68fb      	ldr	r3, [r7, #12]
   1b446:	2200      	movs	r2, #0
   1b448:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   1b44a:	683b      	ldr	r3, [r7, #0]
   1b44c:	2b00      	cmp	r3, #0
   1b44e:	d002      	beq.n	1b456 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   1b450:	683b      	ldr	r3, [r7, #0]
   1b452:	2200      	movs	r2, #0
   1b454:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   1b456:	1dfb      	adds	r3, r7, #7
   1b458:	781a      	ldrb	r2, [r3, #0]
   1b45a:	4b04      	ldr	r3, [pc, #16]	; (1b46c <f_mount+0x54>)
   1b45c:	0092      	lsls	r2, r2, #2
   1b45e:	6839      	ldr	r1, [r7, #0]
   1b460:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   1b462:	2300      	movs	r3, #0
}
   1b464:	0018      	movs	r0, r3
   1b466:	46bd      	mov	sp, r7
   1b468:	b004      	add	sp, #16
   1b46a:	bd80      	pop	{r7, pc}
   1b46c:	20004388 	.word	0x20004388

0001b470 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   1b470:	b590      	push	{r4, r7, lr}
   1b472:	4ce5      	ldr	r4, [pc, #916]	; (1b808 <f_open+0x398>)
   1b474:	44a5      	add	sp, r4
   1b476:	af00      	add	r7, sp, #0
   1b478:	60f8      	str	r0, [r7, #12]
   1b47a:	60b9      	str	r1, [r7, #8]
   1b47c:	4be3      	ldr	r3, [pc, #908]	; (1b80c <f_open+0x39c>)
   1b47e:	2194      	movs	r1, #148	; 0x94
   1b480:	0089      	lsls	r1, r1, #2
   1b482:	468c      	mov	ip, r1
   1b484:	44bc      	add	ip, r7
   1b486:	4463      	add	r3, ip
   1b488:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   1b48a:	68fb      	ldr	r3, [r7, #12]
   1b48c:	2200      	movs	r2, #0
   1b48e:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   1b490:	4bde      	ldr	r3, [pc, #888]	; (1b80c <f_open+0x39c>)
   1b492:	2294      	movs	r2, #148	; 0x94
   1b494:	0092      	lsls	r2, r2, #2
   1b496:	4694      	mov	ip, r2
   1b498:	44bc      	add	ip, r7
   1b49a:	4463      	add	r3, ip
   1b49c:	4adb      	ldr	r2, [pc, #876]	; (1b80c <f_open+0x39c>)
   1b49e:	2194      	movs	r1, #148	; 0x94
   1b4a0:	0089      	lsls	r1, r1, #2
   1b4a2:	468c      	mov	ip, r1
   1b4a4:	44bc      	add	ip, r7
   1b4a6:	4462      	add	r2, ip
   1b4a8:	7812      	ldrb	r2, [r2, #0]
   1b4aa:	211f      	movs	r1, #31
   1b4ac:	400a      	ands	r2, r1
   1b4ae:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   1b4b0:	4bd6      	ldr	r3, [pc, #856]	; (1b80c <f_open+0x39c>)
   1b4b2:	2294      	movs	r2, #148	; 0x94
   1b4b4:	0092      	lsls	r2, r2, #2
   1b4b6:	4694      	mov	ip, r2
   1b4b8:	44bc      	add	ip, r7
   1b4ba:	4463      	add	r3, ip
   1b4bc:	781b      	ldrb	r3, [r3, #0]
   1b4be:	2201      	movs	r2, #1
   1b4c0:	4393      	bics	r3, r2
   1b4c2:	b2da      	uxtb	r2, r3
   1b4c4:	4bd2      	ldr	r3, [pc, #840]	; (1b810 <f_open+0x3a0>)
   1b4c6:	18fc      	adds	r4, r7, r3
   1b4c8:	2387      	movs	r3, #135	; 0x87
   1b4ca:	009b      	lsls	r3, r3, #2
   1b4cc:	18f9      	adds	r1, r7, r3
   1b4ce:	2308      	movs	r3, #8
   1b4d0:	18fb      	adds	r3, r7, r3
   1b4d2:	0018      	movs	r0, r3
   1b4d4:	4bcf      	ldr	r3, [pc, #828]	; (1b814 <f_open+0x3a4>)
   1b4d6:	4798      	blx	r3
   1b4d8:	0003      	movs	r3, r0
   1b4da:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   1b4dc:	2387      	movs	r3, #135	; 0x87
   1b4de:	009b      	lsls	r3, r3, #2
   1b4e0:	18fb      	adds	r3, r7, r3
   1b4e2:	2284      	movs	r2, #132	; 0x84
   1b4e4:	0092      	lsls	r2, r2, #2
   1b4e6:	18ba      	adds	r2, r7, r2
   1b4e8:	619a      	str	r2, [r3, #24]
   1b4ea:	2387      	movs	r3, #135	; 0x87
   1b4ec:	009b      	lsls	r3, r3, #2
   1b4ee:	18fb      	adds	r3, r7, r3
   1b4f0:	2210      	movs	r2, #16
   1b4f2:	18ba      	adds	r2, r7, r2
   1b4f4:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   1b4f6:	4bc6      	ldr	r3, [pc, #792]	; (1b810 <f_open+0x3a0>)
   1b4f8:	18fb      	adds	r3, r7, r3
   1b4fa:	781b      	ldrb	r3, [r3, #0]
   1b4fc:	2b00      	cmp	r3, #0
   1b4fe:	d10b      	bne.n	1b518 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   1b500:	68ba      	ldr	r2, [r7, #8]
   1b502:	4bc3      	ldr	r3, [pc, #780]	; (1b810 <f_open+0x3a0>)
   1b504:	18fc      	adds	r4, r7, r3
   1b506:	2387      	movs	r3, #135	; 0x87
   1b508:	009b      	lsls	r3, r3, #2
   1b50a:	18fb      	adds	r3, r7, r3
   1b50c:	0011      	movs	r1, r2
   1b50e:	0018      	movs	r0, r3
   1b510:	4bc1      	ldr	r3, [pc, #772]	; (1b818 <f_open+0x3a8>)
   1b512:	4798      	blx	r3
   1b514:	0003      	movs	r3, r0
   1b516:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   1b518:	2387      	movs	r3, #135	; 0x87
   1b51a:	009b      	lsls	r3, r3, #2
   1b51c:	18fb      	adds	r3, r7, r3
   1b51e:	695b      	ldr	r3, [r3, #20]
   1b520:	2292      	movs	r2, #146	; 0x92
   1b522:	0092      	lsls	r2, r2, #2
   1b524:	18ba      	adds	r2, r7, r2
   1b526:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   1b528:	4bb9      	ldr	r3, [pc, #740]	; (1b810 <f_open+0x3a0>)
   1b52a:	18fb      	adds	r3, r7, r3
   1b52c:	781b      	ldrb	r3, [r3, #0]
   1b52e:	2b00      	cmp	r3, #0
   1b530:	d109      	bne.n	1b546 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   1b532:	2392      	movs	r3, #146	; 0x92
   1b534:	009b      	lsls	r3, r3, #2
   1b536:	18fb      	adds	r3, r7, r3
   1b538:	681b      	ldr	r3, [r3, #0]
   1b53a:	2b00      	cmp	r3, #0
   1b53c:	d103      	bne.n	1b546 <f_open+0xd6>
			res = FR_INVALID_NAME;
   1b53e:	4bb4      	ldr	r3, [pc, #720]	; (1b810 <f_open+0x3a0>)
   1b540:	18fb      	adds	r3, r7, r3
   1b542:	2206      	movs	r2, #6
   1b544:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1b546:	4bb1      	ldr	r3, [pc, #708]	; (1b80c <f_open+0x39c>)
   1b548:	2294      	movs	r2, #148	; 0x94
   1b54a:	0092      	lsls	r2, r2, #2
   1b54c:	4694      	mov	ip, r2
   1b54e:	44bc      	add	ip, r7
   1b550:	4463      	add	r3, ip
   1b552:	781b      	ldrb	r3, [r3, #0]
   1b554:	221c      	movs	r2, #28
   1b556:	4013      	ands	r3, r2
   1b558:	d100      	bne.n	1b55c <f_open+0xec>
   1b55a:	e141      	b.n	1b7e0 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   1b55c:	4bac      	ldr	r3, [pc, #688]	; (1b810 <f_open+0x3a0>)
   1b55e:	18fb      	adds	r3, r7, r3
   1b560:	781b      	ldrb	r3, [r3, #0]
   1b562:	2b00      	cmp	r3, #0
   1b564:	d027      	beq.n	1b5b6 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   1b566:	4baa      	ldr	r3, [pc, #680]	; (1b810 <f_open+0x3a0>)
   1b568:	18fb      	adds	r3, r7, r3
   1b56a:	781b      	ldrb	r3, [r3, #0]
   1b56c:	2b04      	cmp	r3, #4
   1b56e:	d109      	bne.n	1b584 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   1b570:	4ba7      	ldr	r3, [pc, #668]	; (1b810 <f_open+0x3a0>)
   1b572:	18fc      	adds	r4, r7, r3
   1b574:	2387      	movs	r3, #135	; 0x87
   1b576:	009b      	lsls	r3, r3, #2
   1b578:	18fb      	adds	r3, r7, r3
   1b57a:	0018      	movs	r0, r3
   1b57c:	4ba7      	ldr	r3, [pc, #668]	; (1b81c <f_open+0x3ac>)
   1b57e:	4798      	blx	r3
   1b580:	0003      	movs	r3, r0
   1b582:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1b584:	4ba1      	ldr	r3, [pc, #644]	; (1b80c <f_open+0x39c>)
   1b586:	2294      	movs	r2, #148	; 0x94
   1b588:	0092      	lsls	r2, r2, #2
   1b58a:	4694      	mov	ip, r2
   1b58c:	44bc      	add	ip, r7
   1b58e:	4463      	add	r3, ip
   1b590:	4a9e      	ldr	r2, [pc, #632]	; (1b80c <f_open+0x39c>)
   1b592:	2194      	movs	r1, #148	; 0x94
   1b594:	0089      	lsls	r1, r1, #2
   1b596:	468c      	mov	ip, r1
   1b598:	44bc      	add	ip, r7
   1b59a:	4462      	add	r2, ip
   1b59c:	7812      	ldrb	r2, [r2, #0]
   1b59e:	2108      	movs	r1, #8
   1b5a0:	430a      	orrs	r2, r1
   1b5a2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   1b5a4:	2387      	movs	r3, #135	; 0x87
   1b5a6:	009b      	lsls	r3, r3, #2
   1b5a8:	18fb      	adds	r3, r7, r3
   1b5aa:	695b      	ldr	r3, [r3, #20]
   1b5ac:	2292      	movs	r2, #146	; 0x92
   1b5ae:	0092      	lsls	r2, r2, #2
   1b5b0:	18ba      	adds	r2, r7, r2
   1b5b2:	6013      	str	r3, [r2, #0]
   1b5b4:	e01c      	b.n	1b5f0 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1b5b6:	2392      	movs	r3, #146	; 0x92
   1b5b8:	009b      	lsls	r3, r3, #2
   1b5ba:	18fb      	adds	r3, r7, r3
   1b5bc:	681b      	ldr	r3, [r3, #0]
   1b5be:	330b      	adds	r3, #11
   1b5c0:	781b      	ldrb	r3, [r3, #0]
   1b5c2:	001a      	movs	r2, r3
   1b5c4:	2311      	movs	r3, #17
   1b5c6:	4013      	ands	r3, r2
   1b5c8:	d004      	beq.n	1b5d4 <f_open+0x164>
				res = FR_DENIED;
   1b5ca:	4b91      	ldr	r3, [pc, #580]	; (1b810 <f_open+0x3a0>)
   1b5cc:	18fb      	adds	r3, r7, r3
   1b5ce:	2207      	movs	r2, #7
   1b5d0:	701a      	strb	r2, [r3, #0]
   1b5d2:	e00d      	b.n	1b5f0 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   1b5d4:	4b8d      	ldr	r3, [pc, #564]	; (1b80c <f_open+0x39c>)
   1b5d6:	2294      	movs	r2, #148	; 0x94
   1b5d8:	0092      	lsls	r2, r2, #2
   1b5da:	4694      	mov	ip, r2
   1b5dc:	44bc      	add	ip, r7
   1b5de:	4463      	add	r3, ip
   1b5e0:	781b      	ldrb	r3, [r3, #0]
   1b5e2:	2204      	movs	r2, #4
   1b5e4:	4013      	ands	r3, r2
   1b5e6:	d003      	beq.n	1b5f0 <f_open+0x180>
					res = FR_EXIST;
   1b5e8:	4b89      	ldr	r3, [pc, #548]	; (1b810 <f_open+0x3a0>)
   1b5ea:	18fb      	adds	r3, r7, r3
   1b5ec:	2208      	movs	r2, #8
   1b5ee:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1b5f0:	4b87      	ldr	r3, [pc, #540]	; (1b810 <f_open+0x3a0>)
   1b5f2:	18fb      	adds	r3, r7, r3
   1b5f4:	781b      	ldrb	r3, [r3, #0]
   1b5f6:	2b00      	cmp	r3, #0
   1b5f8:	d000      	beq.n	1b5fc <f_open+0x18c>
   1b5fa:	e12f      	b.n	1b85c <f_open+0x3ec>
   1b5fc:	4b83      	ldr	r3, [pc, #524]	; (1b80c <f_open+0x39c>)
   1b5fe:	2294      	movs	r2, #148	; 0x94
   1b600:	0092      	lsls	r2, r2, #2
   1b602:	4694      	mov	ip, r2
   1b604:	44bc      	add	ip, r7
   1b606:	4463      	add	r3, ip
   1b608:	781b      	ldrb	r3, [r3, #0]
   1b60a:	2208      	movs	r2, #8
   1b60c:	4013      	ands	r3, r2
   1b60e:	d100      	bne.n	1b612 <f_open+0x1a2>
   1b610:	e124      	b.n	1b85c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   1b612:	4b83      	ldr	r3, [pc, #524]	; (1b820 <f_open+0x3b0>)
   1b614:	4798      	blx	r3
   1b616:	0003      	movs	r3, r0
   1b618:	2291      	movs	r2, #145	; 0x91
   1b61a:	0092      	lsls	r2, r2, #2
   1b61c:	18ba      	adds	r2, r7, r2
   1b61e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   1b620:	2392      	movs	r3, #146	; 0x92
   1b622:	009b      	lsls	r3, r3, #2
   1b624:	18fb      	adds	r3, r7, r3
   1b626:	681b      	ldr	r3, [r3, #0]
   1b628:	330e      	adds	r3, #14
   1b62a:	2291      	movs	r2, #145	; 0x91
   1b62c:	0092      	lsls	r2, r2, #2
   1b62e:	18ba      	adds	r2, r7, r2
   1b630:	6812      	ldr	r2, [r2, #0]
   1b632:	b2d2      	uxtb	r2, r2
   1b634:	701a      	strb	r2, [r3, #0]
   1b636:	2392      	movs	r3, #146	; 0x92
   1b638:	009b      	lsls	r3, r3, #2
   1b63a:	18fb      	adds	r3, r7, r3
   1b63c:	681b      	ldr	r3, [r3, #0]
   1b63e:	330f      	adds	r3, #15
   1b640:	2291      	movs	r2, #145	; 0x91
   1b642:	0092      	lsls	r2, r2, #2
   1b644:	18ba      	adds	r2, r7, r2
   1b646:	6812      	ldr	r2, [r2, #0]
   1b648:	b292      	uxth	r2, r2
   1b64a:	0a12      	lsrs	r2, r2, #8
   1b64c:	b292      	uxth	r2, r2
   1b64e:	b2d2      	uxtb	r2, r2
   1b650:	701a      	strb	r2, [r3, #0]
   1b652:	2392      	movs	r3, #146	; 0x92
   1b654:	009b      	lsls	r3, r3, #2
   1b656:	18fb      	adds	r3, r7, r3
   1b658:	681b      	ldr	r3, [r3, #0]
   1b65a:	3310      	adds	r3, #16
   1b65c:	2291      	movs	r2, #145	; 0x91
   1b65e:	0092      	lsls	r2, r2, #2
   1b660:	18ba      	adds	r2, r7, r2
   1b662:	6812      	ldr	r2, [r2, #0]
   1b664:	0c12      	lsrs	r2, r2, #16
   1b666:	b2d2      	uxtb	r2, r2
   1b668:	701a      	strb	r2, [r3, #0]
   1b66a:	2392      	movs	r3, #146	; 0x92
   1b66c:	009b      	lsls	r3, r3, #2
   1b66e:	18fb      	adds	r3, r7, r3
   1b670:	681b      	ldr	r3, [r3, #0]
   1b672:	3311      	adds	r3, #17
   1b674:	2291      	movs	r2, #145	; 0x91
   1b676:	0092      	lsls	r2, r2, #2
   1b678:	18ba      	adds	r2, r7, r2
   1b67a:	6812      	ldr	r2, [r2, #0]
   1b67c:	0e12      	lsrs	r2, r2, #24
   1b67e:	b2d2      	uxtb	r2, r2
   1b680:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   1b682:	2392      	movs	r3, #146	; 0x92
   1b684:	009b      	lsls	r3, r3, #2
   1b686:	18fb      	adds	r3, r7, r3
   1b688:	681b      	ldr	r3, [r3, #0]
   1b68a:	330b      	adds	r3, #11
   1b68c:	2200      	movs	r2, #0
   1b68e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   1b690:	2392      	movs	r3, #146	; 0x92
   1b692:	009b      	lsls	r3, r3, #2
   1b694:	18fb      	adds	r3, r7, r3
   1b696:	681b      	ldr	r3, [r3, #0]
   1b698:	331c      	adds	r3, #28
   1b69a:	2200      	movs	r2, #0
   1b69c:	701a      	strb	r2, [r3, #0]
   1b69e:	2392      	movs	r3, #146	; 0x92
   1b6a0:	009b      	lsls	r3, r3, #2
   1b6a2:	18fb      	adds	r3, r7, r3
   1b6a4:	681b      	ldr	r3, [r3, #0]
   1b6a6:	331d      	adds	r3, #29
   1b6a8:	2200      	movs	r2, #0
   1b6aa:	701a      	strb	r2, [r3, #0]
   1b6ac:	2392      	movs	r3, #146	; 0x92
   1b6ae:	009b      	lsls	r3, r3, #2
   1b6b0:	18fb      	adds	r3, r7, r3
   1b6b2:	681b      	ldr	r3, [r3, #0]
   1b6b4:	331e      	adds	r3, #30
   1b6b6:	2200      	movs	r2, #0
   1b6b8:	701a      	strb	r2, [r3, #0]
   1b6ba:	2392      	movs	r3, #146	; 0x92
   1b6bc:	009b      	lsls	r3, r3, #2
   1b6be:	18fb      	adds	r3, r7, r3
   1b6c0:	681b      	ldr	r3, [r3, #0]
   1b6c2:	331f      	adds	r3, #31
   1b6c4:	2200      	movs	r2, #0
   1b6c6:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   1b6c8:	2392      	movs	r3, #146	; 0x92
   1b6ca:	009b      	lsls	r3, r3, #2
   1b6cc:	18fb      	adds	r3, r7, r3
   1b6ce:	681b      	ldr	r3, [r3, #0]
   1b6d0:	3315      	adds	r3, #21
   1b6d2:	781b      	ldrb	r3, [r3, #0]
   1b6d4:	021b      	lsls	r3, r3, #8
   1b6d6:	b21a      	sxth	r2, r3
   1b6d8:	2392      	movs	r3, #146	; 0x92
   1b6da:	009b      	lsls	r3, r3, #2
   1b6dc:	18fb      	adds	r3, r7, r3
   1b6de:	681b      	ldr	r3, [r3, #0]
   1b6e0:	3314      	adds	r3, #20
   1b6e2:	781b      	ldrb	r3, [r3, #0]
   1b6e4:	b21b      	sxth	r3, r3
   1b6e6:	4313      	orrs	r3, r2
   1b6e8:	b21b      	sxth	r3, r3
   1b6ea:	b29b      	uxth	r3, r3
   1b6ec:	041b      	lsls	r3, r3, #16
   1b6ee:	2292      	movs	r2, #146	; 0x92
   1b6f0:	0092      	lsls	r2, r2, #2
   1b6f2:	18ba      	adds	r2, r7, r2
   1b6f4:	6812      	ldr	r2, [r2, #0]
   1b6f6:	321b      	adds	r2, #27
   1b6f8:	7812      	ldrb	r2, [r2, #0]
   1b6fa:	0212      	lsls	r2, r2, #8
   1b6fc:	b211      	sxth	r1, r2
   1b6fe:	2292      	movs	r2, #146	; 0x92
   1b700:	0092      	lsls	r2, r2, #2
   1b702:	18ba      	adds	r2, r7, r2
   1b704:	6812      	ldr	r2, [r2, #0]
   1b706:	321a      	adds	r2, #26
   1b708:	7812      	ldrb	r2, [r2, #0]
   1b70a:	b212      	sxth	r2, r2
   1b70c:	430a      	orrs	r2, r1
   1b70e:	b212      	sxth	r2, r2
   1b710:	b292      	uxth	r2, r2
   1b712:	4313      	orrs	r3, r2
   1b714:	2290      	movs	r2, #144	; 0x90
   1b716:	0092      	lsls	r2, r2, #2
   1b718:	18ba      	adds	r2, r7, r2
   1b71a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   1b71c:	2392      	movs	r3, #146	; 0x92
   1b71e:	009b      	lsls	r3, r3, #2
   1b720:	18fb      	adds	r3, r7, r3
   1b722:	681b      	ldr	r3, [r3, #0]
   1b724:	331a      	adds	r3, #26
   1b726:	2200      	movs	r2, #0
   1b728:	701a      	strb	r2, [r3, #0]
   1b72a:	2392      	movs	r3, #146	; 0x92
   1b72c:	009b      	lsls	r3, r3, #2
   1b72e:	18fb      	adds	r3, r7, r3
   1b730:	681b      	ldr	r3, [r3, #0]
   1b732:	331b      	adds	r3, #27
   1b734:	2200      	movs	r2, #0
   1b736:	701a      	strb	r2, [r3, #0]
   1b738:	2392      	movs	r3, #146	; 0x92
   1b73a:	009b      	lsls	r3, r3, #2
   1b73c:	18fb      	adds	r3, r7, r3
   1b73e:	681b      	ldr	r3, [r3, #0]
   1b740:	3314      	adds	r3, #20
   1b742:	2200      	movs	r2, #0
   1b744:	701a      	strb	r2, [r3, #0]
   1b746:	2392      	movs	r3, #146	; 0x92
   1b748:	009b      	lsls	r3, r3, #2
   1b74a:	18fb      	adds	r3, r7, r3
   1b74c:	681b      	ldr	r3, [r3, #0]
   1b74e:	3315      	adds	r3, #21
   1b750:	2200      	movs	r2, #0
   1b752:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   1b754:	2387      	movs	r3, #135	; 0x87
   1b756:	009b      	lsls	r3, r3, #2
   1b758:	18fb      	adds	r3, r7, r3
   1b75a:	681b      	ldr	r3, [r3, #0]
   1b75c:	2201      	movs	r2, #1
   1b75e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   1b760:	2390      	movs	r3, #144	; 0x90
   1b762:	009b      	lsls	r3, r3, #2
   1b764:	18fb      	adds	r3, r7, r3
   1b766:	681b      	ldr	r3, [r3, #0]
   1b768:	2b00      	cmp	r3, #0
   1b76a:	d100      	bne.n	1b76e <f_open+0x2fe>
   1b76c:	e076      	b.n	1b85c <f_open+0x3ec>
				dw = dj.fs->winsect;
   1b76e:	2387      	movs	r3, #135	; 0x87
   1b770:	009b      	lsls	r3, r3, #2
   1b772:	18fb      	adds	r3, r7, r3
   1b774:	681b      	ldr	r3, [r3, #0]
   1b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b778:	2291      	movs	r2, #145	; 0x91
   1b77a:	0092      	lsls	r2, r2, #2
   1b77c:	18ba      	adds	r2, r7, r2
   1b77e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   1b780:	2387      	movs	r3, #135	; 0x87
   1b782:	009b      	lsls	r3, r3, #2
   1b784:	18fb      	adds	r3, r7, r3
   1b786:	681b      	ldr	r3, [r3, #0]
   1b788:	4a21      	ldr	r2, [pc, #132]	; (1b810 <f_open+0x3a0>)
   1b78a:	18bc      	adds	r4, r7, r2
   1b78c:	2290      	movs	r2, #144	; 0x90
   1b78e:	0092      	lsls	r2, r2, #2
   1b790:	18ba      	adds	r2, r7, r2
   1b792:	6812      	ldr	r2, [r2, #0]
   1b794:	0011      	movs	r1, r2
   1b796:	0018      	movs	r0, r3
   1b798:	4b22      	ldr	r3, [pc, #136]	; (1b824 <f_open+0x3b4>)
   1b79a:	4798      	blx	r3
   1b79c:	0003      	movs	r3, r0
   1b79e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   1b7a0:	4b1b      	ldr	r3, [pc, #108]	; (1b810 <f_open+0x3a0>)
   1b7a2:	18fb      	adds	r3, r7, r3
   1b7a4:	781b      	ldrb	r3, [r3, #0]
   1b7a6:	2b00      	cmp	r3, #0
   1b7a8:	d158      	bne.n	1b85c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   1b7aa:	2387      	movs	r3, #135	; 0x87
   1b7ac:	009b      	lsls	r3, r3, #2
   1b7ae:	18fb      	adds	r3, r7, r3
   1b7b0:	681b      	ldr	r3, [r3, #0]
   1b7b2:	2290      	movs	r2, #144	; 0x90
   1b7b4:	0092      	lsls	r2, r2, #2
   1b7b6:	18ba      	adds	r2, r7, r2
   1b7b8:	6812      	ldr	r2, [r2, #0]
   1b7ba:	3a01      	subs	r2, #1
   1b7bc:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   1b7be:	2387      	movs	r3, #135	; 0x87
   1b7c0:	009b      	lsls	r3, r3, #2
   1b7c2:	18fb      	adds	r3, r7, r3
   1b7c4:	681b      	ldr	r3, [r3, #0]
   1b7c6:	4a12      	ldr	r2, [pc, #72]	; (1b810 <f_open+0x3a0>)
   1b7c8:	18bc      	adds	r4, r7, r2
   1b7ca:	2291      	movs	r2, #145	; 0x91
   1b7cc:	0092      	lsls	r2, r2, #2
   1b7ce:	18ba      	adds	r2, r7, r2
   1b7d0:	6812      	ldr	r2, [r2, #0]
   1b7d2:	0011      	movs	r1, r2
   1b7d4:	0018      	movs	r0, r3
   1b7d6:	4b14      	ldr	r3, [pc, #80]	; (1b828 <f_open+0x3b8>)
   1b7d8:	4798      	blx	r3
   1b7da:	0003      	movs	r3, r0
   1b7dc:	7023      	strb	r3, [r4, #0]
   1b7de:	e03d      	b.n	1b85c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   1b7e0:	4b0b      	ldr	r3, [pc, #44]	; (1b810 <f_open+0x3a0>)
   1b7e2:	18fb      	adds	r3, r7, r3
   1b7e4:	781b      	ldrb	r3, [r3, #0]
   1b7e6:	2b00      	cmp	r3, #0
   1b7e8:	d138      	bne.n	1b85c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1b7ea:	2392      	movs	r3, #146	; 0x92
   1b7ec:	009b      	lsls	r3, r3, #2
   1b7ee:	18fb      	adds	r3, r7, r3
   1b7f0:	681b      	ldr	r3, [r3, #0]
   1b7f2:	330b      	adds	r3, #11
   1b7f4:	781b      	ldrb	r3, [r3, #0]
   1b7f6:	001a      	movs	r2, r3
   1b7f8:	2310      	movs	r3, #16
   1b7fa:	4013      	ands	r3, r2
   1b7fc:	d016      	beq.n	1b82c <f_open+0x3bc>
				res = FR_NO_FILE;
   1b7fe:	4b04      	ldr	r3, [pc, #16]	; (1b810 <f_open+0x3a0>)
   1b800:	18fb      	adds	r3, r7, r3
   1b802:	2204      	movs	r2, #4
   1b804:	701a      	strb	r2, [r3, #0]
   1b806:	e029      	b.n	1b85c <f_open+0x3ec>
   1b808:	fffffdac 	.word	0xfffffdac
   1b80c:	fffffdb7 	.word	0xfffffdb7
   1b810:	0000024f 	.word	0x0000024f
   1b814:	0001adc9 	.word	0x0001adc9
   1b818:	0001abbd 	.word	0x0001abbd
   1b81c:	0001a40d 	.word	0x0001a40d
   1b820:	00019205 	.word	0x00019205
   1b824:	00019989 	.word	0x00019989
   1b828:	00019349 	.word	0x00019349
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1b82c:	4b5a      	ldr	r3, [pc, #360]	; (1b998 <f_open+0x528>)
   1b82e:	2294      	movs	r2, #148	; 0x94
   1b830:	0092      	lsls	r2, r2, #2
   1b832:	4694      	mov	ip, r2
   1b834:	44bc      	add	ip, r7
   1b836:	4463      	add	r3, ip
   1b838:	781b      	ldrb	r3, [r3, #0]
   1b83a:	2202      	movs	r2, #2
   1b83c:	4013      	ands	r3, r2
   1b83e:	d00d      	beq.n	1b85c <f_open+0x3ec>
   1b840:	2392      	movs	r3, #146	; 0x92
   1b842:	009b      	lsls	r3, r3, #2
   1b844:	18fb      	adds	r3, r7, r3
   1b846:	681b      	ldr	r3, [r3, #0]
   1b848:	330b      	adds	r3, #11
   1b84a:	781b      	ldrb	r3, [r3, #0]
   1b84c:	001a      	movs	r2, r3
   1b84e:	2301      	movs	r3, #1
   1b850:	4013      	ands	r3, r2
   1b852:	d003      	beq.n	1b85c <f_open+0x3ec>
					res = FR_DENIED;
   1b854:	4b51      	ldr	r3, [pc, #324]	; (1b99c <f_open+0x52c>)
   1b856:	18fb      	adds	r3, r7, r3
   1b858:	2207      	movs	r2, #7
   1b85a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   1b85c:	4b4f      	ldr	r3, [pc, #316]	; (1b99c <f_open+0x52c>)
   1b85e:	18fb      	adds	r3, r7, r3
   1b860:	781b      	ldrb	r3, [r3, #0]
   1b862:	2b00      	cmp	r3, #0
   1b864:	d126      	bne.n	1b8b4 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1b866:	4b4c      	ldr	r3, [pc, #304]	; (1b998 <f_open+0x528>)
   1b868:	2294      	movs	r2, #148	; 0x94
   1b86a:	0092      	lsls	r2, r2, #2
   1b86c:	4694      	mov	ip, r2
   1b86e:	44bc      	add	ip, r7
   1b870:	4463      	add	r3, ip
   1b872:	781b      	ldrb	r3, [r3, #0]
   1b874:	2208      	movs	r2, #8
   1b876:	4013      	ands	r3, r2
   1b878:	d00f      	beq.n	1b89a <f_open+0x42a>
			mode |= FA__WRITTEN;
   1b87a:	4b47      	ldr	r3, [pc, #284]	; (1b998 <f_open+0x528>)
   1b87c:	2294      	movs	r2, #148	; 0x94
   1b87e:	0092      	lsls	r2, r2, #2
   1b880:	4694      	mov	ip, r2
   1b882:	44bc      	add	ip, r7
   1b884:	4463      	add	r3, ip
   1b886:	4a44      	ldr	r2, [pc, #272]	; (1b998 <f_open+0x528>)
   1b888:	2194      	movs	r1, #148	; 0x94
   1b88a:	0089      	lsls	r1, r1, #2
   1b88c:	468c      	mov	ip, r1
   1b88e:	44bc      	add	ip, r7
   1b890:	4462      	add	r2, ip
   1b892:	7812      	ldrb	r2, [r2, #0]
   1b894:	2120      	movs	r1, #32
   1b896:	430a      	orrs	r2, r1
   1b898:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   1b89a:	2387      	movs	r3, #135	; 0x87
   1b89c:	009b      	lsls	r3, r3, #2
   1b89e:	18fb      	adds	r3, r7, r3
   1b8a0:	681b      	ldr	r3, [r3, #0]
   1b8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b8a4:	68fb      	ldr	r3, [r7, #12]
   1b8a6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   1b8a8:	68fb      	ldr	r3, [r7, #12]
   1b8aa:	2292      	movs	r2, #146	; 0x92
   1b8ac:	0092      	lsls	r2, r2, #2
   1b8ae:	18ba      	adds	r2, r7, r2
   1b8b0:	6812      	ldr	r2, [r2, #0]
   1b8b2:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   1b8b4:	4b39      	ldr	r3, [pc, #228]	; (1b99c <f_open+0x52c>)
   1b8b6:	18fb      	adds	r3, r7, r3
   1b8b8:	781b      	ldrb	r3, [r3, #0]
   1b8ba:	2b00      	cmp	r3, #0
   1b8bc:	d163      	bne.n	1b986 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   1b8be:	68fb      	ldr	r3, [r7, #12]
   1b8c0:	4a35      	ldr	r2, [pc, #212]	; (1b998 <f_open+0x528>)
   1b8c2:	2194      	movs	r1, #148	; 0x94
   1b8c4:	0089      	lsls	r1, r1, #2
   1b8c6:	468c      	mov	ip, r1
   1b8c8:	44bc      	add	ip, r7
   1b8ca:	4462      	add	r2, ip
   1b8cc:	7812      	ldrb	r2, [r2, #0]
   1b8ce:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   1b8d0:	2392      	movs	r3, #146	; 0x92
   1b8d2:	009b      	lsls	r3, r3, #2
   1b8d4:	18fb      	adds	r3, r7, r3
   1b8d6:	681b      	ldr	r3, [r3, #0]
   1b8d8:	3315      	adds	r3, #21
   1b8da:	781b      	ldrb	r3, [r3, #0]
   1b8dc:	021b      	lsls	r3, r3, #8
   1b8de:	b21a      	sxth	r2, r3
   1b8e0:	2392      	movs	r3, #146	; 0x92
   1b8e2:	009b      	lsls	r3, r3, #2
   1b8e4:	18fb      	adds	r3, r7, r3
   1b8e6:	681b      	ldr	r3, [r3, #0]
   1b8e8:	3314      	adds	r3, #20
   1b8ea:	781b      	ldrb	r3, [r3, #0]
   1b8ec:	b21b      	sxth	r3, r3
   1b8ee:	4313      	orrs	r3, r2
   1b8f0:	b21b      	sxth	r3, r3
   1b8f2:	b29b      	uxth	r3, r3
   1b8f4:	041b      	lsls	r3, r3, #16
   1b8f6:	2292      	movs	r2, #146	; 0x92
   1b8f8:	0092      	lsls	r2, r2, #2
   1b8fa:	18ba      	adds	r2, r7, r2
   1b8fc:	6812      	ldr	r2, [r2, #0]
   1b8fe:	321b      	adds	r2, #27
   1b900:	7812      	ldrb	r2, [r2, #0]
   1b902:	0212      	lsls	r2, r2, #8
   1b904:	b211      	sxth	r1, r2
   1b906:	2292      	movs	r2, #146	; 0x92
   1b908:	0092      	lsls	r2, r2, #2
   1b90a:	18ba      	adds	r2, r7, r2
   1b90c:	6812      	ldr	r2, [r2, #0]
   1b90e:	321a      	adds	r2, #26
   1b910:	7812      	ldrb	r2, [r2, #0]
   1b912:	b212      	sxth	r2, r2
   1b914:	430a      	orrs	r2, r1
   1b916:	b212      	sxth	r2, r2
   1b918:	b292      	uxth	r2, r2
   1b91a:	431a      	orrs	r2, r3
   1b91c:	68fb      	ldr	r3, [r7, #12]
   1b91e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1b920:	2392      	movs	r3, #146	; 0x92
   1b922:	009b      	lsls	r3, r3, #2
   1b924:	18fb      	adds	r3, r7, r3
   1b926:	681b      	ldr	r3, [r3, #0]
   1b928:	331f      	adds	r3, #31
   1b92a:	781b      	ldrb	r3, [r3, #0]
   1b92c:	061a      	lsls	r2, r3, #24
   1b92e:	2392      	movs	r3, #146	; 0x92
   1b930:	009b      	lsls	r3, r3, #2
   1b932:	18fb      	adds	r3, r7, r3
   1b934:	681b      	ldr	r3, [r3, #0]
   1b936:	331e      	adds	r3, #30
   1b938:	781b      	ldrb	r3, [r3, #0]
   1b93a:	041b      	lsls	r3, r3, #16
   1b93c:	4313      	orrs	r3, r2
   1b93e:	2292      	movs	r2, #146	; 0x92
   1b940:	0092      	lsls	r2, r2, #2
   1b942:	18ba      	adds	r2, r7, r2
   1b944:	6812      	ldr	r2, [r2, #0]
   1b946:	321d      	adds	r2, #29
   1b948:	7812      	ldrb	r2, [r2, #0]
   1b94a:	0212      	lsls	r2, r2, #8
   1b94c:	4313      	orrs	r3, r2
   1b94e:	2292      	movs	r2, #146	; 0x92
   1b950:	0092      	lsls	r2, r2, #2
   1b952:	18ba      	adds	r2, r7, r2
   1b954:	6812      	ldr	r2, [r2, #0]
   1b956:	321c      	adds	r2, #28
   1b958:	7812      	ldrb	r2, [r2, #0]
   1b95a:	431a      	orrs	r2, r3
   1b95c:	68fb      	ldr	r3, [r7, #12]
   1b95e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   1b960:	68fb      	ldr	r3, [r7, #12]
   1b962:	2200      	movs	r2, #0
   1b964:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   1b966:	68fb      	ldr	r3, [r7, #12]
   1b968:	2200      	movs	r2, #0
   1b96a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1b96c:	2387      	movs	r3, #135	; 0x87
   1b96e:	009b      	lsls	r3, r3, #2
   1b970:	18fb      	adds	r3, r7, r3
   1b972:	681a      	ldr	r2, [r3, #0]
   1b974:	68fb      	ldr	r3, [r7, #12]
   1b976:	601a      	str	r2, [r3, #0]
   1b978:	2387      	movs	r3, #135	; 0x87
   1b97a:	009b      	lsls	r3, r3, #2
   1b97c:	18fb      	adds	r3, r7, r3
   1b97e:	681b      	ldr	r3, [r3, #0]
   1b980:	88da      	ldrh	r2, [r3, #6]
   1b982:	68fb      	ldr	r3, [r7, #12]
   1b984:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   1b986:	4b05      	ldr	r3, [pc, #20]	; (1b99c <f_open+0x52c>)
   1b988:	18fb      	adds	r3, r7, r3
   1b98a:	781b      	ldrb	r3, [r3, #0]
}
   1b98c:	0018      	movs	r0, r3
   1b98e:	46bd      	mov	sp, r7
   1b990:	2395      	movs	r3, #149	; 0x95
   1b992:	009b      	lsls	r3, r3, #2
   1b994:	449d      	add	sp, r3
   1b996:	bd90      	pop	{r4, r7, pc}
   1b998:	fffffdb7 	.word	0xfffffdb7
   1b99c:	0000024f 	.word	0x0000024f

0001b9a0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   1b9a0:	b590      	push	{r4, r7, lr}
   1b9a2:	b08b      	sub	sp, #44	; 0x2c
   1b9a4:	af00      	add	r7, sp, #0
   1b9a6:	60f8      	str	r0, [r7, #12]
   1b9a8:	60b9      	str	r1, [r7, #8]
   1b9aa:	607a      	str	r2, [r7, #4]
   1b9ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   1b9ae:	68bb      	ldr	r3, [r7, #8]
   1b9b0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   1b9b2:	683b      	ldr	r3, [r7, #0]
   1b9b4:	2200      	movs	r2, #0
   1b9b6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   1b9b8:	68fb      	ldr	r3, [r7, #12]
   1b9ba:	681a      	ldr	r2, [r3, #0]
   1b9bc:	68fb      	ldr	r3, [r7, #12]
   1b9be:	889b      	ldrh	r3, [r3, #4]
   1b9c0:	2117      	movs	r1, #23
   1b9c2:	187c      	adds	r4, r7, r1
   1b9c4:	0019      	movs	r1, r3
   1b9c6:	0010      	movs	r0, r2
   1b9c8:	4bc3      	ldr	r3, [pc, #780]	; (1bcd8 <f_write+0x338>)
   1b9ca:	4798      	blx	r3
   1b9cc:	0003      	movs	r3, r0
   1b9ce:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   1b9d0:	2317      	movs	r3, #23
   1b9d2:	18fb      	adds	r3, r7, r3
   1b9d4:	781b      	ldrb	r3, [r3, #0]
   1b9d6:	2b00      	cmp	r3, #0
   1b9d8:	d003      	beq.n	1b9e2 <f_write+0x42>
   1b9da:	2317      	movs	r3, #23
   1b9dc:	18fb      	adds	r3, r7, r3
   1b9de:	781b      	ldrb	r3, [r3, #0]
   1b9e0:	e176      	b.n	1bcd0 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   1b9e2:	68fb      	ldr	r3, [r7, #12]
   1b9e4:	799b      	ldrb	r3, [r3, #6]
   1b9e6:	b25b      	sxtb	r3, r3
   1b9e8:	2b00      	cmp	r3, #0
   1b9ea:	da01      	bge.n	1b9f0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   1b9ec:	2302      	movs	r3, #2
   1b9ee:	e16f      	b.n	1bcd0 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   1b9f0:	68fb      	ldr	r3, [r7, #12]
   1b9f2:	799b      	ldrb	r3, [r3, #6]
   1b9f4:	001a      	movs	r2, r3
   1b9f6:	2302      	movs	r3, #2
   1b9f8:	4013      	ands	r3, r2
   1b9fa:	d101      	bne.n	1ba00 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   1b9fc:	2307      	movs	r3, #7
   1b9fe:	e167      	b.n	1bcd0 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   1ba00:	68fb      	ldr	r3, [r7, #12]
   1ba02:	68da      	ldr	r2, [r3, #12]
   1ba04:	687b      	ldr	r3, [r7, #4]
   1ba06:	18d2      	adds	r2, r2, r3
   1ba08:	68fb      	ldr	r3, [r7, #12]
   1ba0a:	68db      	ldr	r3, [r3, #12]
   1ba0c:	429a      	cmp	r2, r3
   1ba0e:	d300      	bcc.n	1ba12 <f_write+0x72>
   1ba10:	e146      	b.n	1bca0 <f_write+0x300>
   1ba12:	2300      	movs	r3, #0
   1ba14:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   1ba16:	e143      	b.n	1bca0 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   1ba18:	68fb      	ldr	r3, [r7, #12]
   1ba1a:	689b      	ldr	r3, [r3, #8]
   1ba1c:	05db      	lsls	r3, r3, #23
   1ba1e:	0ddb      	lsrs	r3, r3, #23
   1ba20:	d000      	beq.n	1ba24 <f_write+0x84>
   1ba22:	e0f6      	b.n	1bc12 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1ba24:	68fb      	ldr	r3, [r7, #12]
   1ba26:	689b      	ldr	r3, [r3, #8]
   1ba28:	0a5b      	lsrs	r3, r3, #9
   1ba2a:	b2da      	uxtb	r2, r3
   1ba2c:	68fb      	ldr	r3, [r7, #12]
   1ba2e:	681b      	ldr	r3, [r3, #0]
   1ba30:	789b      	ldrb	r3, [r3, #2]
   1ba32:	3b01      	subs	r3, #1
   1ba34:	b2d9      	uxtb	r1, r3
   1ba36:	2316      	movs	r3, #22
   1ba38:	18fb      	adds	r3, r7, r3
   1ba3a:	400a      	ands	r2, r1
   1ba3c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   1ba3e:	2316      	movs	r3, #22
   1ba40:	18fb      	adds	r3, r7, r3
   1ba42:	781b      	ldrb	r3, [r3, #0]
   1ba44:	2b00      	cmp	r3, #0
   1ba46:	d140      	bne.n	1baca <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1ba48:	68fb      	ldr	r3, [r7, #12]
   1ba4a:	689b      	ldr	r3, [r3, #8]
   1ba4c:	2b00      	cmp	r3, #0
   1ba4e:	d111      	bne.n	1ba74 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   1ba50:	68fb      	ldr	r3, [r7, #12]
   1ba52:	691b      	ldr	r3, [r3, #16]
   1ba54:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   1ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba58:	2b00      	cmp	r3, #0
   1ba5a:	d115      	bne.n	1ba88 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   1ba5c:	68fb      	ldr	r3, [r7, #12]
   1ba5e:	681b      	ldr	r3, [r3, #0]
   1ba60:	2100      	movs	r1, #0
   1ba62:	0018      	movs	r0, r3
   1ba64:	4b9d      	ldr	r3, [pc, #628]	; (1bcdc <f_write+0x33c>)
   1ba66:	4798      	blx	r3
   1ba68:	0003      	movs	r3, r0
   1ba6a:	627b      	str	r3, [r7, #36]	; 0x24
   1ba6c:	68fb      	ldr	r3, [r7, #12]
   1ba6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ba70:	611a      	str	r2, [r3, #16]
   1ba72:	e009      	b.n	1ba88 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1ba74:	68fb      	ldr	r3, [r7, #12]
   1ba76:	681a      	ldr	r2, [r3, #0]
   1ba78:	68fb      	ldr	r3, [r7, #12]
   1ba7a:	695b      	ldr	r3, [r3, #20]
   1ba7c:	0019      	movs	r1, r3
   1ba7e:	0010      	movs	r0, r2
   1ba80:	4b96      	ldr	r3, [pc, #600]	; (1bcdc <f_write+0x33c>)
   1ba82:	4798      	blx	r3
   1ba84:	0003      	movs	r3, r0
   1ba86:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba8a:	2b00      	cmp	r3, #0
   1ba8c:	d100      	bne.n	1ba90 <f_write+0xf0>
   1ba8e:	e10c      	b.n	1bcaa <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba92:	2b01      	cmp	r3, #1
   1ba94:	d109      	bne.n	1baaa <f_write+0x10a>
   1ba96:	68fb      	ldr	r3, [r7, #12]
   1ba98:	799b      	ldrb	r3, [r3, #6]
   1ba9a:	2280      	movs	r2, #128	; 0x80
   1ba9c:	4252      	negs	r2, r2
   1ba9e:	4313      	orrs	r3, r2
   1baa0:	b2da      	uxtb	r2, r3
   1baa2:	68fb      	ldr	r3, [r7, #12]
   1baa4:	719a      	strb	r2, [r3, #6]
   1baa6:	2302      	movs	r3, #2
   1baa8:	e112      	b.n	1bcd0 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1baac:	3301      	adds	r3, #1
   1baae:	d109      	bne.n	1bac4 <f_write+0x124>
   1bab0:	68fb      	ldr	r3, [r7, #12]
   1bab2:	799b      	ldrb	r3, [r3, #6]
   1bab4:	2280      	movs	r2, #128	; 0x80
   1bab6:	4252      	negs	r2, r2
   1bab8:	4313      	orrs	r3, r2
   1baba:	b2da      	uxtb	r2, r3
   1babc:	68fb      	ldr	r3, [r7, #12]
   1babe:	719a      	strb	r2, [r3, #6]
   1bac0:	2301      	movs	r3, #1
   1bac2:	e105      	b.n	1bcd0 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   1bac4:	68fb      	ldr	r3, [r7, #12]
   1bac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bac8:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1baca:	68fb      	ldr	r3, [r7, #12]
   1bacc:	681b      	ldr	r3, [r3, #0]
   1bace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bad0:	68fb      	ldr	r3, [r7, #12]
   1bad2:	699b      	ldr	r3, [r3, #24]
   1bad4:	429a      	cmp	r2, r3
   1bad6:	d111      	bne.n	1bafc <f_write+0x15c>
   1bad8:	68fb      	ldr	r3, [r7, #12]
   1bada:	681b      	ldr	r3, [r3, #0]
   1badc:	2100      	movs	r1, #0
   1bade:	0018      	movs	r0, r3
   1bae0:	4b7f      	ldr	r3, [pc, #508]	; (1bce0 <f_write+0x340>)
   1bae2:	4798      	blx	r3
   1bae4:	1e03      	subs	r3, r0, #0
   1bae6:	d009      	beq.n	1bafc <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   1bae8:	68fb      	ldr	r3, [r7, #12]
   1baea:	799b      	ldrb	r3, [r3, #6]
   1baec:	2280      	movs	r2, #128	; 0x80
   1baee:	4252      	negs	r2, r2
   1baf0:	4313      	orrs	r3, r2
   1baf2:	b2da      	uxtb	r2, r3
   1baf4:	68fb      	ldr	r3, [r7, #12]
   1baf6:	719a      	strb	r2, [r3, #6]
   1baf8:	2301      	movs	r3, #1
   1bafa:	e0e9      	b.n	1bcd0 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1bafc:	68fb      	ldr	r3, [r7, #12]
   1bafe:	681a      	ldr	r2, [r3, #0]
   1bb00:	68fb      	ldr	r3, [r7, #12]
   1bb02:	695b      	ldr	r3, [r3, #20]
   1bb04:	0019      	movs	r1, r3
   1bb06:	0010      	movs	r0, r2
   1bb08:	4b76      	ldr	r3, [pc, #472]	; (1bce4 <f_write+0x344>)
   1bb0a:	4798      	blx	r3
   1bb0c:	0003      	movs	r3, r0
   1bb0e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1bb10:	693b      	ldr	r3, [r7, #16]
   1bb12:	2b00      	cmp	r3, #0
   1bb14:	d109      	bne.n	1bb2a <f_write+0x18a>
   1bb16:	68fb      	ldr	r3, [r7, #12]
   1bb18:	799b      	ldrb	r3, [r3, #6]
   1bb1a:	2280      	movs	r2, #128	; 0x80
   1bb1c:	4252      	negs	r2, r2
   1bb1e:	4313      	orrs	r3, r2
   1bb20:	b2da      	uxtb	r2, r3
   1bb22:	68fb      	ldr	r3, [r7, #12]
   1bb24:	719a      	strb	r2, [r3, #6]
   1bb26:	2302      	movs	r3, #2
   1bb28:	e0d2      	b.n	1bcd0 <f_write+0x330>
			sect += csect;
   1bb2a:	2316      	movs	r3, #22
   1bb2c:	18fb      	adds	r3, r7, r3
   1bb2e:	781b      	ldrb	r3, [r3, #0]
   1bb30:	693a      	ldr	r2, [r7, #16]
   1bb32:	18d3      	adds	r3, r2, r3
   1bb34:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1bb36:	687b      	ldr	r3, [r7, #4]
   1bb38:	0a5b      	lsrs	r3, r3, #9
   1bb3a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   1bb3c:	69fb      	ldr	r3, [r7, #28]
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d048      	beq.n	1bbd4 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1bb42:	2316      	movs	r3, #22
   1bb44:	18fb      	adds	r3, r7, r3
   1bb46:	781a      	ldrb	r2, [r3, #0]
   1bb48:	69fb      	ldr	r3, [r7, #28]
   1bb4a:	18d2      	adds	r2, r2, r3
   1bb4c:	68fb      	ldr	r3, [r7, #12]
   1bb4e:	681b      	ldr	r3, [r3, #0]
   1bb50:	789b      	ldrb	r3, [r3, #2]
   1bb52:	429a      	cmp	r2, r3
   1bb54:	d908      	bls.n	1bb68 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   1bb56:	68fb      	ldr	r3, [r7, #12]
   1bb58:	681b      	ldr	r3, [r3, #0]
   1bb5a:	789b      	ldrb	r3, [r3, #2]
   1bb5c:	001a      	movs	r2, r3
   1bb5e:	2316      	movs	r3, #22
   1bb60:	18fb      	adds	r3, r7, r3
   1bb62:	781b      	ldrb	r3, [r3, #0]
   1bb64:	1ad3      	subs	r3, r2, r3
   1bb66:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   1bb68:	68fb      	ldr	r3, [r7, #12]
   1bb6a:	681b      	ldr	r3, [r3, #0]
   1bb6c:	7858      	ldrb	r0, [r3, #1]
   1bb6e:	69fb      	ldr	r3, [r7, #28]
   1bb70:	b2db      	uxtb	r3, r3
   1bb72:	693a      	ldr	r2, [r7, #16]
   1bb74:	69b9      	ldr	r1, [r7, #24]
   1bb76:	4c5c      	ldr	r4, [pc, #368]	; (1bce8 <f_write+0x348>)
   1bb78:	47a0      	blx	r4
   1bb7a:	1e03      	subs	r3, r0, #0
   1bb7c:	d009      	beq.n	1bb92 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   1bb7e:	68fb      	ldr	r3, [r7, #12]
   1bb80:	799b      	ldrb	r3, [r3, #6]
   1bb82:	2280      	movs	r2, #128	; 0x80
   1bb84:	4252      	negs	r2, r2
   1bb86:	4313      	orrs	r3, r2
   1bb88:	b2da      	uxtb	r2, r3
   1bb8a:	68fb      	ldr	r3, [r7, #12]
   1bb8c:	719a      	strb	r2, [r3, #6]
   1bb8e:	2301      	movs	r3, #1
   1bb90:	e09e      	b.n	1bcd0 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   1bb92:	68fb      	ldr	r3, [r7, #12]
   1bb94:	681b      	ldr	r3, [r3, #0]
   1bb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bb98:	693b      	ldr	r3, [r7, #16]
   1bb9a:	1ad2      	subs	r2, r2, r3
   1bb9c:	69fb      	ldr	r3, [r7, #28]
   1bb9e:	429a      	cmp	r2, r3
   1bba0:	d214      	bcs.n	1bbcc <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   1bba2:	68fb      	ldr	r3, [r7, #12]
   1bba4:	681b      	ldr	r3, [r3, #0]
   1bba6:	3330      	adds	r3, #48	; 0x30
   1bba8:	0018      	movs	r0, r3
   1bbaa:	68fb      	ldr	r3, [r7, #12]
   1bbac:	681b      	ldr	r3, [r3, #0]
   1bbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bbb0:	693b      	ldr	r3, [r7, #16]
   1bbb2:	1ad3      	subs	r3, r2, r3
   1bbb4:	025b      	lsls	r3, r3, #9
   1bbb6:	69ba      	ldr	r2, [r7, #24]
   1bbb8:	18d1      	adds	r1, r2, r3
   1bbba:	2380      	movs	r3, #128	; 0x80
   1bbbc:	009b      	lsls	r3, r3, #2
   1bbbe:	001a      	movs	r2, r3
   1bbc0:	4b4a      	ldr	r3, [pc, #296]	; (1bcec <f_write+0x34c>)
   1bbc2:	4798      	blx	r3
					fp->fs->wflag = 0;
   1bbc4:	68fb      	ldr	r3, [r7, #12]
   1bbc6:	681b      	ldr	r3, [r3, #0]
   1bbc8:	2200      	movs	r2, #0
   1bbca:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   1bbcc:	69fb      	ldr	r3, [r7, #28]
   1bbce:	025b      	lsls	r3, r3, #9
   1bbd0:	623b      	str	r3, [r7, #32]
				continue;
   1bbd2:	e051      	b.n	1bc78 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   1bbd4:	68fb      	ldr	r3, [r7, #12]
   1bbd6:	689a      	ldr	r2, [r3, #8]
   1bbd8:	68fb      	ldr	r3, [r7, #12]
   1bbda:	68db      	ldr	r3, [r3, #12]
   1bbdc:	429a      	cmp	r2, r3
   1bbde:	d315      	bcc.n	1bc0c <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1bbe0:	68fb      	ldr	r3, [r7, #12]
   1bbe2:	681b      	ldr	r3, [r3, #0]
   1bbe4:	2100      	movs	r1, #0
   1bbe6:	0018      	movs	r0, r3
   1bbe8:	4b3d      	ldr	r3, [pc, #244]	; (1bce0 <f_write+0x340>)
   1bbea:	4798      	blx	r3
   1bbec:	1e03      	subs	r3, r0, #0
   1bbee:	d009      	beq.n	1bc04 <f_write+0x264>
   1bbf0:	68fb      	ldr	r3, [r7, #12]
   1bbf2:	799b      	ldrb	r3, [r3, #6]
   1bbf4:	2280      	movs	r2, #128	; 0x80
   1bbf6:	4252      	negs	r2, r2
   1bbf8:	4313      	orrs	r3, r2
   1bbfa:	b2da      	uxtb	r2, r3
   1bbfc:	68fb      	ldr	r3, [r7, #12]
   1bbfe:	719a      	strb	r2, [r3, #6]
   1bc00:	2301      	movs	r3, #1
   1bc02:	e065      	b.n	1bcd0 <f_write+0x330>
				fp->fs->winsect = sect;
   1bc04:	68fb      	ldr	r3, [r7, #12]
   1bc06:	681b      	ldr	r3, [r3, #0]
   1bc08:	693a      	ldr	r2, [r7, #16]
   1bc0a:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   1bc0c:	68fb      	ldr	r3, [r7, #12]
   1bc0e:	693a      	ldr	r2, [r7, #16]
   1bc10:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   1bc12:	68fb      	ldr	r3, [r7, #12]
   1bc14:	689b      	ldr	r3, [r3, #8]
   1bc16:	05db      	lsls	r3, r3, #23
   1bc18:	0ddb      	lsrs	r3, r3, #23
   1bc1a:	2280      	movs	r2, #128	; 0x80
   1bc1c:	0092      	lsls	r2, r2, #2
   1bc1e:	1ad3      	subs	r3, r2, r3
   1bc20:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   1bc22:	6a3a      	ldr	r2, [r7, #32]
   1bc24:	687b      	ldr	r3, [r7, #4]
   1bc26:	429a      	cmp	r2, r3
   1bc28:	d901      	bls.n	1bc2e <f_write+0x28e>
   1bc2a:	687b      	ldr	r3, [r7, #4]
   1bc2c:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   1bc2e:	68fb      	ldr	r3, [r7, #12]
   1bc30:	681a      	ldr	r2, [r3, #0]
   1bc32:	68fb      	ldr	r3, [r7, #12]
   1bc34:	699b      	ldr	r3, [r3, #24]
   1bc36:	0019      	movs	r1, r3
   1bc38:	0010      	movs	r0, r2
   1bc3a:	4b29      	ldr	r3, [pc, #164]	; (1bce0 <f_write+0x340>)
   1bc3c:	4798      	blx	r3
   1bc3e:	1e03      	subs	r3, r0, #0
   1bc40:	d009      	beq.n	1bc56 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   1bc42:	68fb      	ldr	r3, [r7, #12]
   1bc44:	799b      	ldrb	r3, [r3, #6]
   1bc46:	2280      	movs	r2, #128	; 0x80
   1bc48:	4252      	negs	r2, r2
   1bc4a:	4313      	orrs	r3, r2
   1bc4c:	b2da      	uxtb	r2, r3
   1bc4e:	68fb      	ldr	r3, [r7, #12]
   1bc50:	719a      	strb	r2, [r3, #6]
   1bc52:	2301      	movs	r3, #1
   1bc54:	e03c      	b.n	1bcd0 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   1bc56:	68fb      	ldr	r3, [r7, #12]
   1bc58:	681a      	ldr	r2, [r3, #0]
   1bc5a:	68fb      	ldr	r3, [r7, #12]
   1bc5c:	689b      	ldr	r3, [r3, #8]
   1bc5e:	05db      	lsls	r3, r3, #23
   1bc60:	0ddb      	lsrs	r3, r3, #23
   1bc62:	3330      	adds	r3, #48	; 0x30
   1bc64:	18d3      	adds	r3, r2, r3
   1bc66:	6a3a      	ldr	r2, [r7, #32]
   1bc68:	69b9      	ldr	r1, [r7, #24]
   1bc6a:	0018      	movs	r0, r3
   1bc6c:	4b1f      	ldr	r3, [pc, #124]	; (1bcec <f_write+0x34c>)
   1bc6e:	4798      	blx	r3
		fp->fs->wflag = 1;
   1bc70:	68fb      	ldr	r3, [r7, #12]
   1bc72:	681b      	ldr	r3, [r3, #0]
   1bc74:	2201      	movs	r2, #1
   1bc76:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1bc78:	69ba      	ldr	r2, [r7, #24]
   1bc7a:	6a3b      	ldr	r3, [r7, #32]
   1bc7c:	18d3      	adds	r3, r2, r3
   1bc7e:	61bb      	str	r3, [r7, #24]
   1bc80:	68fb      	ldr	r3, [r7, #12]
   1bc82:	689a      	ldr	r2, [r3, #8]
   1bc84:	6a3b      	ldr	r3, [r7, #32]
   1bc86:	18d2      	adds	r2, r2, r3
   1bc88:	68fb      	ldr	r3, [r7, #12]
   1bc8a:	609a      	str	r2, [r3, #8]
   1bc8c:	683b      	ldr	r3, [r7, #0]
   1bc8e:	681a      	ldr	r2, [r3, #0]
   1bc90:	6a3b      	ldr	r3, [r7, #32]
   1bc92:	18d2      	adds	r2, r2, r3
   1bc94:	683b      	ldr	r3, [r7, #0]
   1bc96:	601a      	str	r2, [r3, #0]
   1bc98:	687a      	ldr	r2, [r7, #4]
   1bc9a:	6a3b      	ldr	r3, [r7, #32]
   1bc9c:	1ad3      	subs	r3, r2, r3
   1bc9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   1bca0:	687b      	ldr	r3, [r7, #4]
   1bca2:	2b00      	cmp	r3, #0
   1bca4:	d000      	beq.n	1bca8 <f_write+0x308>
   1bca6:	e6b7      	b.n	1ba18 <f_write+0x78>
   1bca8:	e000      	b.n	1bcac <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1bcaa:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   1bcac:	68fb      	ldr	r3, [r7, #12]
   1bcae:	689a      	ldr	r2, [r3, #8]
   1bcb0:	68fb      	ldr	r3, [r7, #12]
   1bcb2:	68db      	ldr	r3, [r3, #12]
   1bcb4:	429a      	cmp	r2, r3
   1bcb6:	d903      	bls.n	1bcc0 <f_write+0x320>
   1bcb8:	68fb      	ldr	r3, [r7, #12]
   1bcba:	689a      	ldr	r2, [r3, #8]
   1bcbc:	68fb      	ldr	r3, [r7, #12]
   1bcbe:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   1bcc0:	68fb      	ldr	r3, [r7, #12]
   1bcc2:	799b      	ldrb	r3, [r3, #6]
   1bcc4:	2220      	movs	r2, #32
   1bcc6:	4313      	orrs	r3, r2
   1bcc8:	b2da      	uxtb	r2, r3
   1bcca:	68fb      	ldr	r3, [r7, #12]
   1bccc:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   1bcce:	2300      	movs	r3, #0
}
   1bcd0:	0018      	movs	r0, r3
   1bcd2:	46bd      	mov	sp, r7
   1bcd4:	b00b      	add	sp, #44	; 0x2c
   1bcd6:	bd90      	pop	{r4, r7, pc}
   1bcd8:	0001b3c5 	.word	0x0001b3c5
   1bcdc:	00019a51 	.word	0x00019a51
   1bce0:	00019349 	.word	0x00019349
   1bce4:	000195a9 	.word	0x000195a9
   1bce8:	00019035 	.word	0x00019035
   1bcec:	00019265 	.word	0x00019265

0001bcf0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   1bcf0:	b590      	push	{r4, r7, lr}
   1bcf2:	b087      	sub	sp, #28
   1bcf4:	af00      	add	r7, sp, #0
   1bcf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   1bcf8:	687b      	ldr	r3, [r7, #4]
   1bcfa:	681a      	ldr	r2, [r3, #0]
   1bcfc:	687b      	ldr	r3, [r7, #4]
   1bcfe:	889b      	ldrh	r3, [r3, #4]
   1bd00:	2117      	movs	r1, #23
   1bd02:	187c      	adds	r4, r7, r1
   1bd04:	0019      	movs	r1, r3
   1bd06:	0010      	movs	r0, r2
   1bd08:	4b55      	ldr	r3, [pc, #340]	; (1be60 <f_sync+0x170>)
   1bd0a:	4798      	blx	r3
   1bd0c:	0003      	movs	r3, r0
   1bd0e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1bd10:	2317      	movs	r3, #23
   1bd12:	18fb      	adds	r3, r7, r3
   1bd14:	781b      	ldrb	r3, [r3, #0]
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	d000      	beq.n	1bd1c <f_sync+0x2c>
   1bd1a:	e09a      	b.n	1be52 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   1bd1c:	687b      	ldr	r3, [r7, #4]
   1bd1e:	799b      	ldrb	r3, [r3, #6]
   1bd20:	001a      	movs	r2, r3
   1bd22:	2320      	movs	r3, #32
   1bd24:	4013      	ands	r3, r2
   1bd26:	d100      	bne.n	1bd2a <f_sync+0x3a>
   1bd28:	e093      	b.n	1be52 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   1bd2a:	687b      	ldr	r3, [r7, #4]
   1bd2c:	681a      	ldr	r2, [r3, #0]
   1bd2e:	687b      	ldr	r3, [r7, #4]
   1bd30:	69db      	ldr	r3, [r3, #28]
   1bd32:	2117      	movs	r1, #23
   1bd34:	187c      	adds	r4, r7, r1
   1bd36:	0019      	movs	r1, r3
   1bd38:	0010      	movs	r0, r2
   1bd3a:	4b4a      	ldr	r3, [pc, #296]	; (1be64 <f_sync+0x174>)
   1bd3c:	4798      	blx	r3
   1bd3e:	0003      	movs	r3, r0
   1bd40:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   1bd42:	2317      	movs	r3, #23
   1bd44:	18fb      	adds	r3, r7, r3
   1bd46:	781b      	ldrb	r3, [r3, #0]
   1bd48:	2b00      	cmp	r3, #0
   1bd4a:	d000      	beq.n	1bd4e <f_sync+0x5e>
   1bd4c:	e081      	b.n	1be52 <f_sync+0x162>
				dir = fp->dir_ptr;
   1bd4e:	687b      	ldr	r3, [r7, #4]
   1bd50:	6a1b      	ldr	r3, [r3, #32]
   1bd52:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   1bd54:	693b      	ldr	r3, [r7, #16]
   1bd56:	330b      	adds	r3, #11
   1bd58:	693a      	ldr	r2, [r7, #16]
   1bd5a:	320b      	adds	r2, #11
   1bd5c:	7812      	ldrb	r2, [r2, #0]
   1bd5e:	2120      	movs	r1, #32
   1bd60:	430a      	orrs	r2, r1
   1bd62:	b2d2      	uxtb	r2, r2
   1bd64:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1bd66:	693b      	ldr	r3, [r7, #16]
   1bd68:	331c      	adds	r3, #28
   1bd6a:	001a      	movs	r2, r3
   1bd6c:	687b      	ldr	r3, [r7, #4]
   1bd6e:	68db      	ldr	r3, [r3, #12]
   1bd70:	b2db      	uxtb	r3, r3
   1bd72:	7013      	strb	r3, [r2, #0]
   1bd74:	693b      	ldr	r3, [r7, #16]
   1bd76:	331d      	adds	r3, #29
   1bd78:	001a      	movs	r2, r3
   1bd7a:	687b      	ldr	r3, [r7, #4]
   1bd7c:	68db      	ldr	r3, [r3, #12]
   1bd7e:	b29b      	uxth	r3, r3
   1bd80:	0a1b      	lsrs	r3, r3, #8
   1bd82:	b29b      	uxth	r3, r3
   1bd84:	b2db      	uxtb	r3, r3
   1bd86:	7013      	strb	r3, [r2, #0]
   1bd88:	693b      	ldr	r3, [r7, #16]
   1bd8a:	331e      	adds	r3, #30
   1bd8c:	001a      	movs	r2, r3
   1bd8e:	687b      	ldr	r3, [r7, #4]
   1bd90:	68db      	ldr	r3, [r3, #12]
   1bd92:	0c1b      	lsrs	r3, r3, #16
   1bd94:	b2db      	uxtb	r3, r3
   1bd96:	7013      	strb	r3, [r2, #0]
   1bd98:	693b      	ldr	r3, [r7, #16]
   1bd9a:	331f      	adds	r3, #31
   1bd9c:	001a      	movs	r2, r3
   1bd9e:	687b      	ldr	r3, [r7, #4]
   1bda0:	68db      	ldr	r3, [r3, #12]
   1bda2:	0e1b      	lsrs	r3, r3, #24
   1bda4:	b2db      	uxtb	r3, r3
   1bda6:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   1bda8:	693b      	ldr	r3, [r7, #16]
   1bdaa:	331a      	adds	r3, #26
   1bdac:	001a      	movs	r2, r3
   1bdae:	687b      	ldr	r3, [r7, #4]
   1bdb0:	691b      	ldr	r3, [r3, #16]
   1bdb2:	b2db      	uxtb	r3, r3
   1bdb4:	7013      	strb	r3, [r2, #0]
   1bdb6:	693b      	ldr	r3, [r7, #16]
   1bdb8:	331b      	adds	r3, #27
   1bdba:	001a      	movs	r2, r3
   1bdbc:	687b      	ldr	r3, [r7, #4]
   1bdbe:	691b      	ldr	r3, [r3, #16]
   1bdc0:	b29b      	uxth	r3, r3
   1bdc2:	0a1b      	lsrs	r3, r3, #8
   1bdc4:	b29b      	uxth	r3, r3
   1bdc6:	b2db      	uxtb	r3, r3
   1bdc8:	7013      	strb	r3, [r2, #0]
   1bdca:	693b      	ldr	r3, [r7, #16]
   1bdcc:	3314      	adds	r3, #20
   1bdce:	001a      	movs	r2, r3
   1bdd0:	687b      	ldr	r3, [r7, #4]
   1bdd2:	691b      	ldr	r3, [r3, #16]
   1bdd4:	0c1b      	lsrs	r3, r3, #16
   1bdd6:	b2db      	uxtb	r3, r3
   1bdd8:	7013      	strb	r3, [r2, #0]
   1bdda:	693b      	ldr	r3, [r7, #16]
   1bddc:	3315      	adds	r3, #21
   1bdde:	001a      	movs	r2, r3
   1bde0:	687b      	ldr	r3, [r7, #4]
   1bde2:	691b      	ldr	r3, [r3, #16]
   1bde4:	0c1b      	lsrs	r3, r3, #16
   1bde6:	b29b      	uxth	r3, r3
   1bde8:	0a1b      	lsrs	r3, r3, #8
   1bdea:	b29b      	uxth	r3, r3
   1bdec:	b2db      	uxtb	r3, r3
   1bdee:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   1bdf0:	4b1d      	ldr	r3, [pc, #116]	; (1be68 <f_sync+0x178>)
   1bdf2:	4798      	blx	r3
   1bdf4:	0003      	movs	r3, r0
   1bdf6:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   1bdf8:	693b      	ldr	r3, [r7, #16]
   1bdfa:	3316      	adds	r3, #22
   1bdfc:	68fa      	ldr	r2, [r7, #12]
   1bdfe:	b2d2      	uxtb	r2, r2
   1be00:	701a      	strb	r2, [r3, #0]
   1be02:	693b      	ldr	r3, [r7, #16]
   1be04:	3317      	adds	r3, #23
   1be06:	68fa      	ldr	r2, [r7, #12]
   1be08:	b292      	uxth	r2, r2
   1be0a:	0a12      	lsrs	r2, r2, #8
   1be0c:	b292      	uxth	r2, r2
   1be0e:	b2d2      	uxtb	r2, r2
   1be10:	701a      	strb	r2, [r3, #0]
   1be12:	693b      	ldr	r3, [r7, #16]
   1be14:	3318      	adds	r3, #24
   1be16:	68fa      	ldr	r2, [r7, #12]
   1be18:	0c12      	lsrs	r2, r2, #16
   1be1a:	b2d2      	uxtb	r2, r2
   1be1c:	701a      	strb	r2, [r3, #0]
   1be1e:	693b      	ldr	r3, [r7, #16]
   1be20:	3319      	adds	r3, #25
   1be22:	68fa      	ldr	r2, [r7, #12]
   1be24:	0e12      	lsrs	r2, r2, #24
   1be26:	b2d2      	uxtb	r2, r2
   1be28:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   1be2a:	687b      	ldr	r3, [r7, #4]
   1be2c:	799b      	ldrb	r3, [r3, #6]
   1be2e:	2220      	movs	r2, #32
   1be30:	4393      	bics	r3, r2
   1be32:	b2da      	uxtb	r2, r3
   1be34:	687b      	ldr	r3, [r7, #4]
   1be36:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   1be38:	687b      	ldr	r3, [r7, #4]
   1be3a:	681b      	ldr	r3, [r3, #0]
   1be3c:	2201      	movs	r2, #1
   1be3e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   1be40:	687b      	ldr	r3, [r7, #4]
   1be42:	681b      	ldr	r3, [r3, #0]
   1be44:	2217      	movs	r2, #23
   1be46:	18bc      	adds	r4, r7, r2
   1be48:	0018      	movs	r0, r3
   1be4a:	4b08      	ldr	r3, [pc, #32]	; (1be6c <f_sync+0x17c>)
   1be4c:	4798      	blx	r3
   1be4e:	0003      	movs	r3, r0
   1be50:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   1be52:	2317      	movs	r3, #23
   1be54:	18fb      	adds	r3, r7, r3
   1be56:	781b      	ldrb	r3, [r3, #0]
}
   1be58:	0018      	movs	r0, r3
   1be5a:	46bd      	mov	sp, r7
   1be5c:	b007      	add	sp, #28
   1be5e:	bd90      	pop	{r4, r7, pc}
   1be60:	0001b3c5 	.word	0x0001b3c5
   1be64:	00019349 	.word	0x00019349
   1be68:	00019205 	.word	0x00019205
   1be6c:	00019411 	.word	0x00019411

0001be70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   1be70:	b590      	push	{r4, r7, lr}
   1be72:	b085      	sub	sp, #20
   1be74:	af00      	add	r7, sp, #0
   1be76:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   1be78:	230f      	movs	r3, #15
   1be7a:	18fc      	adds	r4, r7, r3
   1be7c:	687b      	ldr	r3, [r7, #4]
   1be7e:	0018      	movs	r0, r3
   1be80:	4b09      	ldr	r3, [pc, #36]	; (1bea8 <f_close+0x38>)
   1be82:	4798      	blx	r3
   1be84:	0003      	movs	r3, r0
   1be86:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   1be88:	230f      	movs	r3, #15
   1be8a:	18fb      	adds	r3, r7, r3
   1be8c:	781b      	ldrb	r3, [r3, #0]
   1be8e:	2b00      	cmp	r3, #0
   1be90:	d102      	bne.n	1be98 <f_close+0x28>
   1be92:	687b      	ldr	r3, [r7, #4]
   1be94:	2200      	movs	r2, #0
   1be96:	601a      	str	r2, [r3, #0]
	return res;
   1be98:	230f      	movs	r3, #15
   1be9a:	18fb      	adds	r3, r7, r3
   1be9c:	781b      	ldrb	r3, [r3, #0]
#endif
}
   1be9e:	0018      	movs	r0, r3
   1bea0:	46bd      	mov	sp, r7
   1bea2:	b005      	add	sp, #20
   1bea4:	bd90      	pop	{r4, r7, pc}
   1bea6:	46c0      	nop			; (mov r8, r8)
   1bea8:	0001bcf1 	.word	0x0001bcf1

0001beac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   1beac:	b580      	push	{r7, lr}
   1beae:	b084      	sub	sp, #16
   1beb0:	af00      	add	r7, sp, #0
   1beb2:	0002      	movs	r2, r0
   1beb4:	6039      	str	r1, [r7, #0]
   1beb6:	1dbb      	adds	r3, r7, #6
   1beb8:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   1beba:	1dbb      	adds	r3, r7, #6
   1bebc:	881b      	ldrh	r3, [r3, #0]
   1bebe:	2b7f      	cmp	r3, #127	; 0x7f
   1bec0:	d805      	bhi.n	1bece <ff_convert+0x22>
		c = src;
   1bec2:	230e      	movs	r3, #14
   1bec4:	18fb      	adds	r3, r7, r3
   1bec6:	1dba      	adds	r2, r7, #6
   1bec8:	8812      	ldrh	r2, [r2, #0]
   1beca:	801a      	strh	r2, [r3, #0]
   1becc:	e03a      	b.n	1bf44 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   1bece:	683b      	ldr	r3, [r7, #0]
   1bed0:	2b00      	cmp	r3, #0
   1bed2:	d010      	beq.n	1bef6 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   1bed4:	1dbb      	adds	r3, r7, #6
   1bed6:	881b      	ldrh	r3, [r3, #0]
   1bed8:	2bff      	cmp	r3, #255	; 0xff
   1beda:	d807      	bhi.n	1beec <ff_convert+0x40>
   1bedc:	1dbb      	adds	r3, r7, #6
   1bede:	881b      	ldrh	r3, [r3, #0]
   1bee0:	3b80      	subs	r3, #128	; 0x80
   1bee2:	001a      	movs	r2, r3
   1bee4:	4b1b      	ldr	r3, [pc, #108]	; (1bf54 <ff_convert+0xa8>)
   1bee6:	0052      	lsls	r2, r2, #1
   1bee8:	5ad2      	ldrh	r2, [r2, r3]
   1beea:	e000      	b.n	1beee <ff_convert+0x42>
   1beec:	2200      	movs	r2, #0
   1beee:	230e      	movs	r3, #14
   1bef0:	18fb      	adds	r3, r7, r3
   1bef2:	801a      	strh	r2, [r3, #0]
   1bef4:	e026      	b.n	1bf44 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   1bef6:	230e      	movs	r3, #14
   1bef8:	18fb      	adds	r3, r7, r3
   1befa:	2200      	movs	r2, #0
   1befc:	801a      	strh	r2, [r3, #0]
   1befe:	e010      	b.n	1bf22 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   1bf00:	230e      	movs	r3, #14
   1bf02:	18fb      	adds	r3, r7, r3
   1bf04:	881a      	ldrh	r2, [r3, #0]
   1bf06:	4b13      	ldr	r3, [pc, #76]	; (1bf54 <ff_convert+0xa8>)
   1bf08:	0052      	lsls	r2, r2, #1
   1bf0a:	5ad3      	ldrh	r3, [r2, r3]
   1bf0c:	1dba      	adds	r2, r7, #6
   1bf0e:	8812      	ldrh	r2, [r2, #0]
   1bf10:	429a      	cmp	r2, r3
   1bf12:	d00c      	beq.n	1bf2e <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   1bf14:	230e      	movs	r3, #14
   1bf16:	18fb      	adds	r3, r7, r3
   1bf18:	881a      	ldrh	r2, [r3, #0]
   1bf1a:	230e      	movs	r3, #14
   1bf1c:	18fb      	adds	r3, r7, r3
   1bf1e:	3201      	adds	r2, #1
   1bf20:	801a      	strh	r2, [r3, #0]
   1bf22:	230e      	movs	r3, #14
   1bf24:	18fb      	adds	r3, r7, r3
   1bf26:	881b      	ldrh	r3, [r3, #0]
   1bf28:	2b7f      	cmp	r3, #127	; 0x7f
   1bf2a:	d9e9      	bls.n	1bf00 <ff_convert+0x54>
   1bf2c:	e000      	b.n	1bf30 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   1bf2e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   1bf30:	230e      	movs	r3, #14
   1bf32:	18fb      	adds	r3, r7, r3
   1bf34:	881b      	ldrh	r3, [r3, #0]
   1bf36:	3380      	adds	r3, #128	; 0x80
   1bf38:	b29a      	uxth	r2, r3
   1bf3a:	230e      	movs	r3, #14
   1bf3c:	18fb      	adds	r3, r7, r3
   1bf3e:	21ff      	movs	r1, #255	; 0xff
   1bf40:	400a      	ands	r2, r1
   1bf42:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   1bf44:	230e      	movs	r3, #14
   1bf46:	18fb      	adds	r3, r7, r3
   1bf48:	881b      	ldrh	r3, [r3, #0]
}
   1bf4a:	0018      	movs	r0, r3
   1bf4c:	46bd      	mov	sp, r7
   1bf4e:	b004      	add	sp, #16
   1bf50:	bd80      	pop	{r7, pc}
   1bf52:	46c0      	nop			; (mov r8, r8)
   1bf54:	00028440 	.word	0x00028440

0001bf58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   1bf58:	b580      	push	{r7, lr}
   1bf5a:	b084      	sub	sp, #16
   1bf5c:	af00      	add	r7, sp, #0
   1bf5e:	0002      	movs	r2, r0
   1bf60:	1dbb      	adds	r3, r7, #6
   1bf62:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   1bf64:	2300      	movs	r3, #0
   1bf66:	60fb      	str	r3, [r7, #12]
   1bf68:	e002      	b.n	1bf70 <ff_wtoupper+0x18>
   1bf6a:	68fb      	ldr	r3, [r7, #12]
   1bf6c:	3301      	adds	r3, #1
   1bf6e:	60fb      	str	r3, [r7, #12]
   1bf70:	4b0f      	ldr	r3, [pc, #60]	; (1bfb0 <ff_wtoupper+0x58>)
   1bf72:	68fa      	ldr	r2, [r7, #12]
   1bf74:	0052      	lsls	r2, r2, #1
   1bf76:	5ad3      	ldrh	r3, [r2, r3]
   1bf78:	2b00      	cmp	r3, #0
   1bf7a:	d007      	beq.n	1bf8c <ff_wtoupper+0x34>
   1bf7c:	4b0c      	ldr	r3, [pc, #48]	; (1bfb0 <ff_wtoupper+0x58>)
   1bf7e:	68fa      	ldr	r2, [r7, #12]
   1bf80:	0052      	lsls	r2, r2, #1
   1bf82:	5ad3      	ldrh	r3, [r2, r3]
   1bf84:	1dba      	adds	r2, r7, #6
   1bf86:	8812      	ldrh	r2, [r2, #0]
   1bf88:	429a      	cmp	r2, r3
   1bf8a:	d1ee      	bne.n	1bf6a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   1bf8c:	4b08      	ldr	r3, [pc, #32]	; (1bfb0 <ff_wtoupper+0x58>)
   1bf8e:	68fa      	ldr	r2, [r7, #12]
   1bf90:	0052      	lsls	r2, r2, #1
   1bf92:	5ad3      	ldrh	r3, [r2, r3]
   1bf94:	2b00      	cmp	r3, #0
   1bf96:	d004      	beq.n	1bfa2 <ff_wtoupper+0x4a>
   1bf98:	4b06      	ldr	r3, [pc, #24]	; (1bfb4 <ff_wtoupper+0x5c>)
   1bf9a:	68fa      	ldr	r2, [r7, #12]
   1bf9c:	0052      	lsls	r2, r2, #1
   1bf9e:	5ad3      	ldrh	r3, [r2, r3]
   1bfa0:	e001      	b.n	1bfa6 <ff_wtoupper+0x4e>
   1bfa2:	1dbb      	adds	r3, r7, #6
   1bfa4:	881b      	ldrh	r3, [r3, #0]
}
   1bfa6:	0018      	movs	r0, r3
   1bfa8:	46bd      	mov	sp, r7
   1bfaa:	b004      	add	sp, #16
   1bfac:	bd80      	pop	{r7, pc}
   1bfae:	46c0      	nop			; (mov r8, r8)
   1bfb0:	00028540 	.word	0x00028540
   1bfb4:	00028720 	.word	0x00028720

0001bfb8 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   1bfb8:	b580      	push	{r7, lr}
   1bfba:	b084      	sub	sp, #16
   1bfbc:	af00      	add	r7, sp, #0
   1bfbe:	60f8      	str	r0, [r7, #12]
   1bfc0:	60b9      	str	r1, [r7, #8]
   1bfc2:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   1bfc4:	68fb      	ldr	r3, [r7, #12]
   1bfc6:	68ba      	ldr	r2, [r7, #8]
   1bfc8:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   1bfca:	68fb      	ldr	r3, [r7, #12]
   1bfcc:	687a      	ldr	r2, [r7, #4]
   1bfce:	601a      	str	r2, [r3, #0]
}
   1bfd0:	46c0      	nop			; (mov r8, r8)
   1bfd2:	46bd      	mov	sp, r7
   1bfd4:	b004      	add	sp, #16
   1bfd6:	bd80      	pop	{r7, pc}

0001bfd8 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   1bfd8:	b580      	push	{r7, lr}
   1bfda:	b082      	sub	sp, #8
   1bfdc:	af00      	add	r7, sp, #0
   1bfde:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1bfe0:	687b      	ldr	r3, [r7, #4]
   1bfe2:	681b      	ldr	r3, [r3, #0]
   1bfe4:	4a07      	ldr	r2, [pc, #28]	; (1c004 <getNextPacketId+0x2c>)
   1bfe6:	4293      	cmp	r3, r2
   1bfe8:	d003      	beq.n	1bff2 <getNextPacketId+0x1a>
   1bfea:	687b      	ldr	r3, [r7, #4]
   1bfec:	681b      	ldr	r3, [r3, #0]
   1bfee:	1c5a      	adds	r2, r3, #1
   1bff0:	e000      	b.n	1bff4 <getNextPacketId+0x1c>
   1bff2:	2201      	movs	r2, #1
   1bff4:	687b      	ldr	r3, [r7, #4]
   1bff6:	601a      	str	r2, [r3, #0]
   1bff8:	687b      	ldr	r3, [r7, #4]
   1bffa:	681b      	ldr	r3, [r3, #0]
}
   1bffc:	0018      	movs	r0, r3
   1bffe:	46bd      	mov	sp, r7
   1c000:	b002      	add	sp, #8
   1c002:	bd80      	pop	{r7, pc}
   1c004:	0000ffff 	.word	0x0000ffff

0001c008 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1c008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c00a:	b087      	sub	sp, #28
   1c00c:	af00      	add	r7, sp, #0
   1c00e:	60f8      	str	r0, [r7, #12]
   1c010:	60b9      	str	r1, [r7, #8]
   1c012:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   1c014:	2301      	movs	r3, #1
   1c016:	425b      	negs	r3, r3
   1c018:	617b      	str	r3, [r7, #20]
        sent = 0;
   1c01a:	2300      	movs	r3, #0
   1c01c:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   1c01e:	e01a      	b.n	1c056 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1c020:	68fb      	ldr	r3, [r7, #12]
   1c022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c024:	68dc      	ldr	r4, [r3, #12]
   1c026:	68fb      	ldr	r3, [r7, #12]
   1c028:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1c02a:	68fb      	ldr	r3, [r7, #12]
   1c02c:	691a      	ldr	r2, [r3, #16]
   1c02e:	693b      	ldr	r3, [r7, #16]
   1c030:	18d6      	adds	r6, r2, r3
   1c032:	687b      	ldr	r3, [r7, #4]
   1c034:	0018      	movs	r0, r3
   1c036:	4b1a      	ldr	r3, [pc, #104]	; (1c0a0 <sendPacket+0x98>)
   1c038:	4798      	blx	r3
   1c03a:	0003      	movs	r3, r0
   1c03c:	68ba      	ldr	r2, [r7, #8]
   1c03e:	0031      	movs	r1, r6
   1c040:	0028      	movs	r0, r5
   1c042:	47a0      	blx	r4
   1c044:	0003      	movs	r3, r0
   1c046:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   1c048:	697b      	ldr	r3, [r7, #20]
   1c04a:	2b00      	cmp	r3, #0
   1c04c:	db0e      	blt.n	1c06c <sendPacket+0x64>
            break;
        sent += rc;
   1c04e:	693a      	ldr	r2, [r7, #16]
   1c050:	697b      	ldr	r3, [r7, #20]
   1c052:	18d3      	adds	r3, r2, r3
   1c054:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   1c056:	693a      	ldr	r2, [r7, #16]
   1c058:	68bb      	ldr	r3, [r7, #8]
   1c05a:	429a      	cmp	r2, r3
   1c05c:	da07      	bge.n	1c06e <sendPacket+0x66>
   1c05e:	687b      	ldr	r3, [r7, #4]
   1c060:	0018      	movs	r0, r3
   1c062:	4b10      	ldr	r3, [pc, #64]	; (1c0a4 <sendPacket+0x9c>)
   1c064:	4798      	blx	r3
   1c066:	1e03      	subs	r3, r0, #0
   1c068:	d0da      	beq.n	1c020 <sendPacket+0x18>
   1c06a:	e000      	b.n	1c06e <sendPacket+0x66>
            break;
   1c06c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   1c06e:	693a      	ldr	r2, [r7, #16]
   1c070:	68bb      	ldr	r3, [r7, #8]
   1c072:	429a      	cmp	r2, r3
   1c074:	d10b      	bne.n	1c08e <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1c076:	68fb      	ldr	r3, [r7, #12]
   1c078:	3354      	adds	r3, #84	; 0x54
   1c07a:	001a      	movs	r2, r3
   1c07c:	68fb      	ldr	r3, [r7, #12]
   1c07e:	699b      	ldr	r3, [r3, #24]
   1c080:	0019      	movs	r1, r3
   1c082:	0010      	movs	r0, r2
   1c084:	4b08      	ldr	r3, [pc, #32]	; (1c0a8 <sendPacket+0xa0>)
   1c086:	4798      	blx	r3
        rc = SUCCESS;
   1c088:	2300      	movs	r3, #0
   1c08a:	617b      	str	r3, [r7, #20]
   1c08c:	e002      	b.n	1c094 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   1c08e:	2301      	movs	r3, #1
   1c090:	425b      	negs	r3, r3
   1c092:	617b      	str	r3, [r7, #20]
    return rc;
   1c094:	697b      	ldr	r3, [r7, #20]
}
   1c096:	0018      	movs	r0, r3
   1c098:	46bd      	mov	sp, r7
   1c09a:	b007      	add	sp, #28
   1c09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c09e:	46c0      	nop			; (mov r8, r8)
   1c0a0:	0001ce69 	.word	0x0001ce69
   1c0a4:	0001cded 	.word	0x0001cded
   1c0a8:	0001ce41 	.word	0x0001ce41

0001c0ac <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1c0ac:	b580      	push	{r7, lr}
   1c0ae:	b086      	sub	sp, #24
   1c0b0:	af00      	add	r7, sp, #0
   1c0b2:	60f8      	str	r0, [r7, #12]
   1c0b4:	60b9      	str	r1, [r7, #8]
   1c0b6:	607a      	str	r2, [r7, #4]
   1c0b8:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   1c0ba:	68fb      	ldr	r3, [r7, #12]
   1c0bc:	68ba      	ldr	r2, [r7, #8]
   1c0be:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1c0c0:	2300      	movs	r3, #0
   1c0c2:	617b      	str	r3, [r7, #20]
   1c0c4:	e00a      	b.n	1c0dc <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   1c0c6:	68fa      	ldr	r2, [r7, #12]
   1c0c8:	697b      	ldr	r3, [r7, #20]
   1c0ca:	3304      	adds	r3, #4
   1c0cc:	00db      	lsls	r3, r3, #3
   1c0ce:	18d3      	adds	r3, r2, r3
   1c0d0:	3304      	adds	r3, #4
   1c0d2:	2200      	movs	r2, #0
   1c0d4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1c0d6:	697b      	ldr	r3, [r7, #20]
   1c0d8:	3301      	adds	r3, #1
   1c0da:	617b      	str	r3, [r7, #20]
   1c0dc:	697b      	ldr	r3, [r7, #20]
   1c0de:	2b04      	cmp	r3, #4
   1c0e0:	ddf1      	ble.n	1c0c6 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   1c0e2:	68fb      	ldr	r3, [r7, #12]
   1c0e4:	687a      	ldr	r2, [r7, #4]
   1c0e6:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   1c0e8:	68fb      	ldr	r3, [r7, #12]
   1c0ea:	683a      	ldr	r2, [r7, #0]
   1c0ec:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   1c0ee:	68fb      	ldr	r3, [r7, #12]
   1c0f0:	6a3a      	ldr	r2, [r7, #32]
   1c0f2:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   1c0f4:	68fb      	ldr	r3, [r7, #12]
   1c0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c0f8:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   1c0fa:	68fb      	ldr	r3, [r7, #12]
   1c0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c0fe:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   1c100:	68fb      	ldr	r3, [r7, #12]
   1c102:	2200      	movs	r2, #0
   1c104:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   1c106:	68fb      	ldr	r3, [r7, #12]
   1c108:	2200      	movs	r2, #0
   1c10a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   1c10c:	68fb      	ldr	r3, [r7, #12]
   1c10e:	2200      	movs	r2, #0
   1c110:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   1c112:	68fb      	ldr	r3, [r7, #12]
   1c114:	2201      	movs	r2, #1
   1c116:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   1c118:	68fb      	ldr	r3, [r7, #12]
   1c11a:	3354      	adds	r3, #84	; 0x54
   1c11c:	0018      	movs	r0, r3
   1c11e:	4b03      	ldr	r3, [pc, #12]	; (1c12c <MQTTClientInit+0x80>)
   1c120:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   1c122:	46c0      	nop			; (mov r8, r8)
   1c124:	46bd      	mov	sp, r7
   1c126:	b006      	add	sp, #24
   1c128:	bd80      	pop	{r7, pc}
   1c12a:	46c0      	nop			; (mov r8, r8)
   1c12c:	0001ce91 	.word	0x0001ce91

0001c130 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   1c130:	b590      	push	{r4, r7, lr}
   1c132:	b08b      	sub	sp, #44	; 0x2c
   1c134:	af00      	add	r7, sp, #0
   1c136:	60f8      	str	r0, [r7, #12]
   1c138:	60b9      	str	r1, [r7, #8]
   1c13a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   1c13c:	2301      	movs	r3, #1
   1c13e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   1c140:	2300      	movs	r3, #0
   1c142:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   1c144:	2304      	movs	r3, #4
   1c146:	61fb      	str	r3, [r7, #28]

    *value = 0;
   1c148:	68bb      	ldr	r3, [r7, #8]
   1c14a:	2200      	movs	r2, #0
   1c14c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   1c14e:	2301      	movs	r3, #1
   1c150:	425b      	negs	r3, r3
   1c152:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1c154:	6a3b      	ldr	r3, [r7, #32]
   1c156:	3301      	adds	r3, #1
   1c158:	623b      	str	r3, [r7, #32]
   1c15a:	6a3a      	ldr	r2, [r7, #32]
   1c15c:	69fb      	ldr	r3, [r7, #28]
   1c15e:	429a      	cmp	r2, r3
   1c160:	dd03      	ble.n	1c16a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   1c162:	2301      	movs	r3, #1
   1c164:	425b      	negs	r3, r3
   1c166:	61bb      	str	r3, [r7, #24]
            goto exit;
   1c168:	e026      	b.n	1c1b8 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   1c16a:	68fb      	ldr	r3, [r7, #12]
   1c16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c16e:	689c      	ldr	r4, [r3, #8]
   1c170:	68fb      	ldr	r3, [r7, #12]
   1c172:	6d18      	ldr	r0, [r3, #80]	; 0x50
   1c174:	687b      	ldr	r3, [r7, #4]
   1c176:	2217      	movs	r2, #23
   1c178:	18b9      	adds	r1, r7, r2
   1c17a:	2201      	movs	r2, #1
   1c17c:	47a0      	blx	r4
   1c17e:	0003      	movs	r3, r0
   1c180:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   1c182:	69bb      	ldr	r3, [r7, #24]
   1c184:	2b01      	cmp	r3, #1
   1c186:	d116      	bne.n	1c1b6 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   1c188:	68bb      	ldr	r3, [r7, #8]
   1c18a:	681a      	ldr	r2, [r3, #0]
   1c18c:	2317      	movs	r3, #23
   1c18e:	18fb      	adds	r3, r7, r3
   1c190:	781b      	ldrb	r3, [r3, #0]
   1c192:	0019      	movs	r1, r3
   1c194:	237f      	movs	r3, #127	; 0x7f
   1c196:	400b      	ands	r3, r1
   1c198:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1c19a:	434b      	muls	r3, r1
   1c19c:	18d2      	adds	r2, r2, r3
   1c19e:	68bb      	ldr	r3, [r7, #8]
   1c1a0:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   1c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1a4:	01db      	lsls	r3, r3, #7
   1c1a6:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   1c1a8:	2317      	movs	r3, #23
   1c1aa:	18fb      	adds	r3, r7, r3
   1c1ac:	781b      	ldrb	r3, [r3, #0]
   1c1ae:	b25b      	sxtb	r3, r3
   1c1b0:	2b00      	cmp	r3, #0
   1c1b2:	dbcc      	blt.n	1c14e <decodePacket+0x1e>
   1c1b4:	e000      	b.n	1c1b8 <decodePacket+0x88>
            goto exit;
   1c1b6:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   1c1b8:	6a3b      	ldr	r3, [r7, #32]
}
   1c1ba:	0018      	movs	r0, r3
   1c1bc:	46bd      	mov	sp, r7
   1c1be:	b00b      	add	sp, #44	; 0x2c
   1c1c0:	bd90      	pop	{r4, r7, pc}
	...

0001c1c4 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   1c1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1c6:	46c6      	mov	lr, r8
   1c1c8:	b500      	push	{lr}
   1c1ca:	b086      	sub	sp, #24
   1c1cc:	af00      	add	r7, sp, #0
   1c1ce:	6078      	str	r0, [r7, #4]
   1c1d0:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   1c1d2:	2301      	movs	r3, #1
   1c1d4:	425b      	negs	r3, r3
   1c1d6:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   1c1d8:	2300      	movs	r3, #0
   1c1da:	60fb      	str	r3, [r7, #12]
    int len = 0;
   1c1dc:	2300      	movs	r3, #0
   1c1de:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   1c1e0:	2300      	movs	r3, #0
   1c1e2:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   1c1e4:	687b      	ldr	r3, [r7, #4]
   1c1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c1e8:	689c      	ldr	r4, [r3, #8]
   1c1ea:	687b      	ldr	r3, [r7, #4]
   1c1ec:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1c1ee:	687b      	ldr	r3, [r7, #4]
   1c1f0:	695e      	ldr	r6, [r3, #20]
   1c1f2:	683b      	ldr	r3, [r7, #0]
   1c1f4:	0018      	movs	r0, r3
   1c1f6:	4b2b      	ldr	r3, [pc, #172]	; (1c2a4 <readPacket+0xe0>)
   1c1f8:	4798      	blx	r3
   1c1fa:	0003      	movs	r3, r0
   1c1fc:	2201      	movs	r2, #1
   1c1fe:	0031      	movs	r1, r6
   1c200:	0028      	movs	r0, r5
   1c202:	47a0      	blx	r4
   1c204:	0003      	movs	r3, r0
   1c206:	2b01      	cmp	r3, #1
   1c208:	d141      	bne.n	1c28e <readPacket+0xca>
        goto exit;

    len = 1;
   1c20a:	2301      	movs	r3, #1
   1c20c:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   1c20e:	683b      	ldr	r3, [r7, #0]
   1c210:	0018      	movs	r0, r3
   1c212:	4b24      	ldr	r3, [pc, #144]	; (1c2a4 <readPacket+0xe0>)
   1c214:	4798      	blx	r3
   1c216:	0002      	movs	r2, r0
   1c218:	2308      	movs	r3, #8
   1c21a:	18f9      	adds	r1, r7, r3
   1c21c:	687b      	ldr	r3, [r7, #4]
   1c21e:	0018      	movs	r0, r3
   1c220:	4b21      	ldr	r3, [pc, #132]	; (1c2a8 <readPacket+0xe4>)
   1c222:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1c224:	687b      	ldr	r3, [r7, #4]
   1c226:	695b      	ldr	r3, [r3, #20]
   1c228:	3301      	adds	r3, #1
   1c22a:	68ba      	ldr	r2, [r7, #8]
   1c22c:	0011      	movs	r1, r2
   1c22e:	0018      	movs	r0, r3
   1c230:	4b1e      	ldr	r3, [pc, #120]	; (1c2ac <readPacket+0xe8>)
   1c232:	4798      	blx	r3
   1c234:	0002      	movs	r2, r0
   1c236:	693b      	ldr	r3, [r7, #16]
   1c238:	189b      	adds	r3, r3, r2
   1c23a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1c23c:	68bb      	ldr	r3, [r7, #8]
   1c23e:	2b00      	cmp	r3, #0
   1c240:	dd17      	ble.n	1c272 <readPacket+0xae>
   1c242:	687b      	ldr	r3, [r7, #4]
   1c244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c246:	689c      	ldr	r4, [r3, #8]
   1c248:	687b      	ldr	r3, [r7, #4]
   1c24a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1c24c:	687b      	ldr	r3, [r7, #4]
   1c24e:	695a      	ldr	r2, [r3, #20]
   1c250:	693b      	ldr	r3, [r7, #16]
   1c252:	18d6      	adds	r6, r2, r3
   1c254:	68bb      	ldr	r3, [r7, #8]
   1c256:	4698      	mov	r8, r3
   1c258:	683b      	ldr	r3, [r7, #0]
   1c25a:	0018      	movs	r0, r3
   1c25c:	4b11      	ldr	r3, [pc, #68]	; (1c2a4 <readPacket+0xe0>)
   1c25e:	4798      	blx	r3
   1c260:	0003      	movs	r3, r0
   1c262:	4642      	mov	r2, r8
   1c264:	0031      	movs	r1, r6
   1c266:	0028      	movs	r0, r5
   1c268:	47a0      	blx	r4
   1c26a:	0002      	movs	r2, r0
   1c26c:	68bb      	ldr	r3, [r7, #8]
   1c26e:	429a      	cmp	r2, r3
   1c270:	d10f      	bne.n	1c292 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   1c272:	687b      	ldr	r3, [r7, #4]
   1c274:	695b      	ldr	r3, [r3, #20]
   1c276:	781a      	ldrb	r2, [r3, #0]
   1c278:	230c      	movs	r3, #12
   1c27a:	18fb      	adds	r3, r7, r3
   1c27c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   1c27e:	230c      	movs	r3, #12
   1c280:	18fb      	adds	r3, r7, r3
   1c282:	781b      	ldrb	r3, [r3, #0]
   1c284:	061b      	lsls	r3, r3, #24
   1c286:	0f1b      	lsrs	r3, r3, #28
   1c288:	b2db      	uxtb	r3, r3
   1c28a:	617b      	str	r3, [r7, #20]
   1c28c:	e002      	b.n	1c294 <readPacket+0xd0>
        goto exit;
   1c28e:	46c0      	nop			; (mov r8, r8)
   1c290:	e000      	b.n	1c294 <readPacket+0xd0>
        goto exit;
   1c292:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   1c294:	697b      	ldr	r3, [r7, #20]
}
   1c296:	0018      	movs	r0, r3
   1c298:	46bd      	mov	sp, r7
   1c29a:	b006      	add	sp, #24
   1c29c:	bc04      	pop	{r2}
   1c29e:	4690      	mov	r8, r2
   1c2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c2a2:	46c0      	nop			; (mov r8, r8)
   1c2a4:	0001ce69 	.word	0x0001ce69
   1c2a8:	0001c131 	.word	0x0001c131
   1c2ac:	0001dc41 	.word	0x0001dc41

0001c2b0 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   1c2b0:	b580      	push	{r7, lr}
   1c2b2:	b086      	sub	sp, #24
   1c2b4:	af00      	add	r7, sp, #0
   1c2b6:	6078      	str	r0, [r7, #4]
   1c2b8:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   1c2ba:	687b      	ldr	r3, [r7, #4]
   1c2bc:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   1c2be:	683b      	ldr	r3, [r7, #0]
   1c2c0:	689b      	ldr	r3, [r3, #8]
   1c2c2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   1c2c4:	683b      	ldr	r3, [r7, #0]
   1c2c6:	685b      	ldr	r3, [r3, #4]
   1c2c8:	001a      	movs	r2, r3
   1c2ca:	693b      	ldr	r3, [r7, #16]
   1c2cc:	189b      	adds	r3, r3, r2
   1c2ce:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   1c2d0:	e039      	b.n	1c346 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   1c2d2:	693b      	ldr	r3, [r7, #16]
   1c2d4:	781b      	ldrb	r3, [r3, #0]
   1c2d6:	2b2f      	cmp	r3, #47	; 0x2f
   1c2d8:	d103      	bne.n	1c2e2 <isTopicMatched+0x32>
   1c2da:	697b      	ldr	r3, [r7, #20]
   1c2dc:	781b      	ldrb	r3, [r3, #0]
   1c2de:	2b2f      	cmp	r3, #47	; 0x2f
   1c2e0:	d13a      	bne.n	1c358 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1c2e2:	697b      	ldr	r3, [r7, #20]
   1c2e4:	781b      	ldrb	r3, [r3, #0]
   1c2e6:	2b2b      	cmp	r3, #43	; 0x2b
   1c2e8:	d009      	beq.n	1c2fe <isTopicMatched+0x4e>
   1c2ea:	697b      	ldr	r3, [r7, #20]
   1c2ec:	781b      	ldrb	r3, [r3, #0]
   1c2ee:	2b23      	cmp	r3, #35	; 0x23
   1c2f0:	d005      	beq.n	1c2fe <isTopicMatched+0x4e>
   1c2f2:	697b      	ldr	r3, [r7, #20]
   1c2f4:	781a      	ldrb	r2, [r3, #0]
   1c2f6:	693b      	ldr	r3, [r7, #16]
   1c2f8:	781b      	ldrb	r3, [r3, #0]
   1c2fa:	429a      	cmp	r2, r3
   1c2fc:	d12e      	bne.n	1c35c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   1c2fe:	697b      	ldr	r3, [r7, #20]
   1c300:	781b      	ldrb	r3, [r3, #0]
   1c302:	2b2b      	cmp	r3, #43	; 0x2b
   1c304:	d112      	bne.n	1c32c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   1c306:	693b      	ldr	r3, [r7, #16]
   1c308:	3301      	adds	r3, #1
   1c30a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1c30c:	e005      	b.n	1c31a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   1c30e:	693b      	ldr	r3, [r7, #16]
   1c310:	3301      	adds	r3, #1
   1c312:	613b      	str	r3, [r7, #16]
   1c314:	693b      	ldr	r3, [r7, #16]
   1c316:	3301      	adds	r3, #1
   1c318:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1c31a:	68fa      	ldr	r2, [r7, #12]
   1c31c:	68bb      	ldr	r3, [r7, #8]
   1c31e:	429a      	cmp	r2, r3
   1c320:	d20b      	bcs.n	1c33a <isTopicMatched+0x8a>
   1c322:	68fb      	ldr	r3, [r7, #12]
   1c324:	781b      	ldrb	r3, [r3, #0]
   1c326:	2b2f      	cmp	r3, #47	; 0x2f
   1c328:	d1f1      	bne.n	1c30e <isTopicMatched+0x5e>
   1c32a:	e006      	b.n	1c33a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   1c32c:	697b      	ldr	r3, [r7, #20]
   1c32e:	781b      	ldrb	r3, [r3, #0]
   1c330:	2b23      	cmp	r3, #35	; 0x23
   1c332:	d102      	bne.n	1c33a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   1c334:	68bb      	ldr	r3, [r7, #8]
   1c336:	3b01      	subs	r3, #1
   1c338:	613b      	str	r3, [r7, #16]
        curf++;
   1c33a:	697b      	ldr	r3, [r7, #20]
   1c33c:	3301      	adds	r3, #1
   1c33e:	617b      	str	r3, [r7, #20]
        curn++;
   1c340:	693b      	ldr	r3, [r7, #16]
   1c342:	3301      	adds	r3, #1
   1c344:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   1c346:	697b      	ldr	r3, [r7, #20]
   1c348:	781b      	ldrb	r3, [r3, #0]
   1c34a:	2b00      	cmp	r3, #0
   1c34c:	d007      	beq.n	1c35e <isTopicMatched+0xae>
   1c34e:	693a      	ldr	r2, [r7, #16]
   1c350:	68bb      	ldr	r3, [r7, #8]
   1c352:	429a      	cmp	r2, r3
   1c354:	d3bd      	bcc.n	1c2d2 <isTopicMatched+0x22>
   1c356:	e002      	b.n	1c35e <isTopicMatched+0xae>
            break;
   1c358:	46c0      	nop			; (mov r8, r8)
   1c35a:	e000      	b.n	1c35e <isTopicMatched+0xae>
            break;
   1c35c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   1c35e:	693a      	ldr	r2, [r7, #16]
   1c360:	68bb      	ldr	r3, [r7, #8]
   1c362:	429a      	cmp	r2, r3
   1c364:	d105      	bne.n	1c372 <isTopicMatched+0xc2>
   1c366:	697b      	ldr	r3, [r7, #20]
   1c368:	781b      	ldrb	r3, [r3, #0]
   1c36a:	2b00      	cmp	r3, #0
   1c36c:	d101      	bne.n	1c372 <isTopicMatched+0xc2>
   1c36e:	2301      	movs	r3, #1
   1c370:	e000      	b.n	1c374 <isTopicMatched+0xc4>
   1c372:	2300      	movs	r3, #0
   1c374:	b2db      	uxtb	r3, r3
}
   1c376:	0018      	movs	r0, r3
   1c378:	46bd      	mov	sp, r7
   1c37a:	b006      	add	sp, #24
   1c37c:	bd80      	pop	{r7, pc}
	...

0001c380 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   1c380:	b580      	push	{r7, lr}
   1c382:	b08a      	sub	sp, #40	; 0x28
   1c384:	af00      	add	r7, sp, #0
   1c386:	60f8      	str	r0, [r7, #12]
   1c388:	60b9      	str	r1, [r7, #8]
   1c38a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   1c38c:	2301      	movs	r3, #1
   1c38e:	425b      	negs	r3, r3
   1c390:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1c392:	2300      	movs	r3, #0
   1c394:	627b      	str	r3, [r7, #36]	; 0x24
   1c396:	e044      	b.n	1c422 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1c398:	68fa      	ldr	r2, [r7, #12]
   1c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c39c:	3304      	adds	r3, #4
   1c39e:	00db      	lsls	r3, r3, #3
   1c3a0:	18d3      	adds	r3, r2, r3
   1c3a2:	3304      	adds	r3, #4
   1c3a4:	681b      	ldr	r3, [r3, #0]
   1c3a6:	2b00      	cmp	r3, #0
   1c3a8:	d038      	beq.n	1c41c <deliverMessage+0x9c>
   1c3aa:	68fa      	ldr	r2, [r7, #12]
   1c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c3ae:	3304      	adds	r3, #4
   1c3b0:	00db      	lsls	r3, r3, #3
   1c3b2:	18d3      	adds	r3, r2, r3
   1c3b4:	3304      	adds	r3, #4
   1c3b6:	681a      	ldr	r2, [r3, #0]
   1c3b8:	68bb      	ldr	r3, [r7, #8]
   1c3ba:	0011      	movs	r1, r2
   1c3bc:	0018      	movs	r0, r3
   1c3be:	4b28      	ldr	r3, [pc, #160]	; (1c460 <deliverMessage+0xe0>)
   1c3c0:	4798      	blx	r3
   1c3c2:	1e03      	subs	r3, r0, #0
   1c3c4:	d10d      	bne.n	1c3e2 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   1c3c6:	68fa      	ldr	r2, [r7, #12]
   1c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c3ca:	3304      	adds	r3, #4
   1c3cc:	00db      	lsls	r3, r3, #3
   1c3ce:	18d3      	adds	r3, r2, r3
   1c3d0:	3304      	adds	r3, #4
   1c3d2:	681b      	ldr	r3, [r3, #0]
   1c3d4:	68ba      	ldr	r2, [r7, #8]
   1c3d6:	0011      	movs	r1, r2
   1c3d8:	0018      	movs	r0, r3
   1c3da:	4b22      	ldr	r3, [pc, #136]	; (1c464 <deliverMessage+0xe4>)
   1c3dc:	4798      	blx	r3
   1c3de:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1c3e0:	d01c      	beq.n	1c41c <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   1c3e2:	68fa      	ldr	r2, [r7, #12]
   1c3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c3e6:	3304      	adds	r3, #4
   1c3e8:	00db      	lsls	r3, r3, #3
   1c3ea:	18d3      	adds	r3, r2, r3
   1c3ec:	3308      	adds	r3, #8
   1c3ee:	681b      	ldr	r3, [r3, #0]
   1c3f0:	2b00      	cmp	r3, #0
   1c3f2:	d013      	beq.n	1c41c <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   1c3f4:	687a      	ldr	r2, [r7, #4]
   1c3f6:	68b9      	ldr	r1, [r7, #8]
   1c3f8:	2318      	movs	r3, #24
   1c3fa:	18fb      	adds	r3, r7, r3
   1c3fc:	0018      	movs	r0, r3
   1c3fe:	4b1a      	ldr	r3, [pc, #104]	; (1c468 <deliverMessage+0xe8>)
   1c400:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   1c402:	68fa      	ldr	r2, [r7, #12]
   1c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c406:	3304      	adds	r3, #4
   1c408:	00db      	lsls	r3, r3, #3
   1c40a:	18d3      	adds	r3, r2, r3
   1c40c:	3308      	adds	r3, #8
   1c40e:	681b      	ldr	r3, [r3, #0]
   1c410:	2218      	movs	r2, #24
   1c412:	18ba      	adds	r2, r7, r2
   1c414:	0010      	movs	r0, r2
   1c416:	4798      	blx	r3
                rc = SUCCESS;
   1c418:	2300      	movs	r3, #0
   1c41a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c41e:	3301      	adds	r3, #1
   1c420:	627b      	str	r3, [r7, #36]	; 0x24
   1c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c424:	2b04      	cmp	r3, #4
   1c426:	ddb7      	ble.n	1c398 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1c428:	6a3b      	ldr	r3, [r7, #32]
   1c42a:	3301      	adds	r3, #1
   1c42c:	d112      	bne.n	1c454 <deliverMessage+0xd4>
   1c42e:	68fb      	ldr	r3, [r7, #12]
   1c430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c432:	2b00      	cmp	r3, #0
   1c434:	d00e      	beq.n	1c454 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   1c436:	687a      	ldr	r2, [r7, #4]
   1c438:	68b9      	ldr	r1, [r7, #8]
   1c43a:	2310      	movs	r3, #16
   1c43c:	18fb      	adds	r3, r7, r3
   1c43e:	0018      	movs	r0, r3
   1c440:	4b09      	ldr	r3, [pc, #36]	; (1c468 <deliverMessage+0xe8>)
   1c442:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   1c444:	68fb      	ldr	r3, [r7, #12]
   1c446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c448:	2210      	movs	r2, #16
   1c44a:	18ba      	adds	r2, r7, r2
   1c44c:	0010      	movs	r0, r2
   1c44e:	4798      	blx	r3
        rc = SUCCESS;
   1c450:	2300      	movs	r3, #0
   1c452:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   1c454:	6a3b      	ldr	r3, [r7, #32]
}
   1c456:	0018      	movs	r0, r3
   1c458:	46bd      	mov	sp, r7
   1c45a:	b00a      	add	sp, #40	; 0x28
   1c45c:	bd80      	pop	{r7, pc}
   1c45e:	46c0      	nop			; (mov r8, r8)
   1c460:	0001e055 	.word	0x0001e055
   1c464:	0001c2b1 	.word	0x0001c2b1
   1c468:	0001bfb9 	.word	0x0001bfb9

0001c46c <keepalive>:


int keepalive(MQTTClient* c)
{
   1c46c:	b580      	push	{r7, lr}
   1c46e:	b088      	sub	sp, #32
   1c470:	af00      	add	r7, sp, #0
   1c472:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1c474:	2301      	movs	r3, #1
   1c476:	425b      	negs	r3, r3
   1c478:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   1c47a:	687b      	ldr	r3, [r7, #4]
   1c47c:	699b      	ldr	r3, [r3, #24]
   1c47e:	2b00      	cmp	r3, #0
   1c480:	d102      	bne.n	1c488 <keepalive+0x1c>
    {
        rc = SUCCESS;
   1c482:	2300      	movs	r3, #0
   1c484:	61fb      	str	r3, [r7, #28]
        goto exit;
   1c486:	e033      	b.n	1c4f0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   1c488:	687b      	ldr	r3, [r7, #4]
   1c48a:	3354      	adds	r3, #84	; 0x54
   1c48c:	0018      	movs	r0, r3
   1c48e:	4b1b      	ldr	r3, [pc, #108]	; (1c4fc <keepalive+0x90>)
   1c490:	4798      	blx	r3
   1c492:	1e03      	subs	r3, r0, #0
   1c494:	d02c      	beq.n	1c4f0 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   1c496:	687b      	ldr	r3, [r7, #4]
   1c498:	7f1b      	ldrb	r3, [r3, #28]
   1c49a:	2b00      	cmp	r3, #0
   1c49c:	d128      	bne.n	1c4f0 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   1c49e:	230c      	movs	r3, #12
   1c4a0:	18fb      	adds	r3, r7, r3
   1c4a2:	0018      	movs	r0, r3
   1c4a4:	4b16      	ldr	r3, [pc, #88]	; (1c500 <keepalive+0x94>)
   1c4a6:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   1c4a8:	23fa      	movs	r3, #250	; 0xfa
   1c4aa:	009a      	lsls	r2, r3, #2
   1c4ac:	230c      	movs	r3, #12
   1c4ae:	18fb      	adds	r3, r7, r3
   1c4b0:	0011      	movs	r1, r2
   1c4b2:	0018      	movs	r0, r3
   1c4b4:	4b13      	ldr	r3, [pc, #76]	; (1c504 <keepalive+0x98>)
   1c4b6:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   1c4b8:	687b      	ldr	r3, [r7, #4]
   1c4ba:	691a      	ldr	r2, [r3, #16]
   1c4bc:	687b      	ldr	r3, [r7, #4]
   1c4be:	689b      	ldr	r3, [r3, #8]
   1c4c0:	0019      	movs	r1, r3
   1c4c2:	0010      	movs	r0, r2
   1c4c4:	4b10      	ldr	r3, [pc, #64]	; (1c508 <keepalive+0x9c>)
   1c4c6:	4798      	blx	r3
   1c4c8:	0003      	movs	r3, r0
   1c4ca:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   1c4cc:	69bb      	ldr	r3, [r7, #24]
   1c4ce:	2b00      	cmp	r3, #0
   1c4d0:	dd0e      	ble.n	1c4f0 <keepalive+0x84>
   1c4d2:	230c      	movs	r3, #12
   1c4d4:	18fa      	adds	r2, r7, r3
   1c4d6:	69b9      	ldr	r1, [r7, #24]
   1c4d8:	687b      	ldr	r3, [r7, #4]
   1c4da:	0018      	movs	r0, r3
   1c4dc:	4b0b      	ldr	r3, [pc, #44]	; (1c50c <keepalive+0xa0>)
   1c4de:	4798      	blx	r3
   1c4e0:	0003      	movs	r3, r0
   1c4e2:	61fb      	str	r3, [r7, #28]
   1c4e4:	69fb      	ldr	r3, [r7, #28]
   1c4e6:	2b00      	cmp	r3, #0
   1c4e8:	d102      	bne.n	1c4f0 <keepalive+0x84>
                c->ping_outstanding = 1;
   1c4ea:	687b      	ldr	r3, [r7, #4]
   1c4ec:	2201      	movs	r2, #1
   1c4ee:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   1c4f0:	69fb      	ldr	r3, [r7, #28]
}
   1c4f2:	0018      	movs	r0, r3
   1c4f4:	46bd      	mov	sp, r7
   1c4f6:	b008      	add	sp, #32
   1c4f8:	bd80      	pop	{r7, pc}
   1c4fa:	46c0      	nop			; (mov r8, r8)
   1c4fc:	0001cded 	.word	0x0001cded
   1c500:	0001ce91 	.word	0x0001ce91
   1c504:	0001ce19 	.word	0x0001ce19
   1c508:	0001da65 	.word	0x0001da65
   1c50c:	0001c009 	.word	0x0001c009

0001c510 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   1c510:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c512:	b095      	sub	sp, #84	; 0x54
   1c514:	af06      	add	r7, sp, #24
   1c516:	6078      	str	r0, [r7, #4]
   1c518:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   1c51a:	683a      	ldr	r2, [r7, #0]
   1c51c:	687b      	ldr	r3, [r7, #4]
   1c51e:	0011      	movs	r1, r2
   1c520:	0018      	movs	r0, r3
   1c522:	4b70      	ldr	r3, [pc, #448]	; (1c6e4 <cycle+0x1d4>)
   1c524:	4798      	blx	r3
   1c526:	0002      	movs	r2, r0
   1c528:	232e      	movs	r3, #46	; 0x2e
   1c52a:	18fb      	adds	r3, r7, r3
   1c52c:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   1c52e:	2300      	movs	r3, #0
   1c530:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   1c532:	2300      	movs	r3, #0
   1c534:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   1c536:	232e      	movs	r3, #46	; 0x2e
   1c538:	18fb      	adds	r3, r7, r3
   1c53a:	881b      	ldrh	r3, [r3, #0]
   1c53c:	2b0d      	cmp	r3, #13
   1c53e:	d900      	bls.n	1c542 <cycle+0x32>
   1c540:	e0bd      	b.n	1c6be <cycle+0x1ae>
   1c542:	009a      	lsls	r2, r3, #2
   1c544:	4b68      	ldr	r3, [pc, #416]	; (1c6e8 <cycle+0x1d8>)
   1c546:	18d3      	adds	r3, r2, r3
   1c548:	681b      	ldr	r3, [r3, #0]
   1c54a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1c54c:	687b      	ldr	r3, [r7, #4]
   1c54e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   1c550:	687b      	ldr	r3, [r7, #4]
   1c552:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1c554:	001e      	movs	r6, r3
   1c556:	2310      	movs	r3, #16
   1c558:	18fb      	adds	r3, r7, r3
   1c55a:	1d1d      	adds	r5, r3, #4
   1c55c:	2310      	movs	r3, #16
   1c55e:	18fb      	adds	r3, r7, r3
   1c560:	1c5c      	adds	r4, r3, #1
   1c562:	230c      	movs	r3, #12
   1c564:	18f9      	adds	r1, r7, r3
   1c566:	2310      	movs	r3, #16
   1c568:	18fb      	adds	r3, r7, r3
   1c56a:	1c98      	adds	r0, r3, #2
   1c56c:	9604      	str	r6, [sp, #16]
   1c56e:	9203      	str	r2, [sp, #12]
   1c570:	2310      	movs	r3, #16
   1c572:	18fb      	adds	r3, r7, r3
   1c574:	330c      	adds	r3, #12
   1c576:	9302      	str	r3, [sp, #8]
   1c578:	2310      	movs	r3, #16
   1c57a:	18fb      	adds	r3, r7, r3
   1c57c:	3308      	adds	r3, #8
   1c57e:	9301      	str	r3, [sp, #4]
   1c580:	2320      	movs	r3, #32
   1c582:	18fb      	adds	r3, r7, r3
   1c584:	9300      	str	r3, [sp, #0]
   1c586:	002b      	movs	r3, r5
   1c588:	0022      	movs	r2, r4
   1c58a:	4c58      	ldr	r4, [pc, #352]	; (1c6ec <cycle+0x1dc>)
   1c58c:	47a0      	blx	r4
   1c58e:	0003      	movs	r3, r0
   1c590:	2b01      	cmp	r3, #1
   1c592:	d000      	beq.n	1c596 <cycle+0x86>
   1c594:	e098      	b.n	1c6c8 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   1c596:	68fb      	ldr	r3, [r7, #12]
   1c598:	b2da      	uxtb	r2, r3
   1c59a:	2310      	movs	r3, #16
   1c59c:	18fb      	adds	r3, r7, r3
   1c59e:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   1c5a0:	2310      	movs	r3, #16
   1c5a2:	18fa      	adds	r2, r7, r3
   1c5a4:	2320      	movs	r3, #32
   1c5a6:	18f9      	adds	r1, r7, r3
   1c5a8:	687b      	ldr	r3, [r7, #4]
   1c5aa:	0018      	movs	r0, r3
   1c5ac:	4b50      	ldr	r3, [pc, #320]	; (1c6f0 <cycle+0x1e0>)
   1c5ae:	4798      	blx	r3
            if (msg.qos != QOS0)
   1c5b0:	2310      	movs	r3, #16
   1c5b2:	18fb      	adds	r3, r7, r3
   1c5b4:	781b      	ldrb	r3, [r3, #0]
   1c5b6:	2b00      	cmp	r3, #0
   1c5b8:	d100      	bne.n	1c5bc <cycle+0xac>
   1c5ba:	e07d      	b.n	1c6b8 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   1c5bc:	2310      	movs	r3, #16
   1c5be:	18fb      	adds	r3, r7, r3
   1c5c0:	781b      	ldrb	r3, [r3, #0]
   1c5c2:	2b01      	cmp	r3, #1
   1c5c4:	d10f      	bne.n	1c5e6 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   1c5c6:	687b      	ldr	r3, [r7, #4]
   1c5c8:	6918      	ldr	r0, [r3, #16]
   1c5ca:	687b      	ldr	r3, [r7, #4]
   1c5cc:	689b      	ldr	r3, [r3, #8]
   1c5ce:	0019      	movs	r1, r3
   1c5d0:	2310      	movs	r3, #16
   1c5d2:	18fb      	adds	r3, r7, r3
   1c5d4:	889b      	ldrh	r3, [r3, #4]
   1c5d6:	9300      	str	r3, [sp, #0]
   1c5d8:	2300      	movs	r3, #0
   1c5da:	2204      	movs	r2, #4
   1c5dc:	4c45      	ldr	r4, [pc, #276]	; (1c6f4 <cycle+0x1e4>)
   1c5de:	47a0      	blx	r4
   1c5e0:	0003      	movs	r3, r0
   1c5e2:	637b      	str	r3, [r7, #52]	; 0x34
   1c5e4:	e013      	b.n	1c60e <cycle+0xfe>
                else if (msg.qos == QOS2)
   1c5e6:	2310      	movs	r3, #16
   1c5e8:	18fb      	adds	r3, r7, r3
   1c5ea:	781b      	ldrb	r3, [r3, #0]
   1c5ec:	2b02      	cmp	r3, #2
   1c5ee:	d10e      	bne.n	1c60e <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   1c5f0:	687b      	ldr	r3, [r7, #4]
   1c5f2:	6918      	ldr	r0, [r3, #16]
   1c5f4:	687b      	ldr	r3, [r7, #4]
   1c5f6:	689b      	ldr	r3, [r3, #8]
   1c5f8:	0019      	movs	r1, r3
   1c5fa:	2310      	movs	r3, #16
   1c5fc:	18fb      	adds	r3, r7, r3
   1c5fe:	889b      	ldrh	r3, [r3, #4]
   1c600:	9300      	str	r3, [sp, #0]
   1c602:	2300      	movs	r3, #0
   1c604:	2205      	movs	r2, #5
   1c606:	4c3b      	ldr	r4, [pc, #236]	; (1c6f4 <cycle+0x1e4>)
   1c608:	47a0      	blx	r4
   1c60a:	0003      	movs	r3, r0
   1c60c:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   1c60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c610:	2b00      	cmp	r3, #0
   1c612:	dc03      	bgt.n	1c61c <cycle+0x10c>
                    rc = FAILURE;
   1c614:	2301      	movs	r3, #1
   1c616:	425b      	negs	r3, r3
   1c618:	633b      	str	r3, [r7, #48]	; 0x30
   1c61a:	e007      	b.n	1c62c <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   1c61c:	683a      	ldr	r2, [r7, #0]
   1c61e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1c620:	687b      	ldr	r3, [r7, #4]
   1c622:	0018      	movs	r0, r3
   1c624:	4b34      	ldr	r3, [pc, #208]	; (1c6f8 <cycle+0x1e8>)
   1c626:	4798      	blx	r3
   1c628:	0003      	movs	r3, r0
   1c62a:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   1c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c62e:	3301      	adds	r3, #1
   1c630:	d142      	bne.n	1c6b8 <cycle+0x1a8>
                    goto exit; // there was a problem
   1c632:	46c0      	nop			; (mov r8, r8)
   1c634:	e049      	b.n	1c6ca <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1c636:	687b      	ldr	r3, [r7, #4]
   1c638:	695c      	ldr	r4, [r3, #20]
   1c63a:	687b      	ldr	r3, [r7, #4]
   1c63c:	68db      	ldr	r3, [r3, #12]
   1c63e:	220a      	movs	r2, #10
   1c640:	18ba      	adds	r2, r7, r2
   1c642:	2109      	movs	r1, #9
   1c644:	1879      	adds	r1, r7, r1
   1c646:	2008      	movs	r0, #8
   1c648:	1838      	adds	r0, r7, r0
   1c64a:	9300      	str	r3, [sp, #0]
   1c64c:	0023      	movs	r3, r4
   1c64e:	4c2b      	ldr	r4, [pc, #172]	; (1c6fc <cycle+0x1ec>)
   1c650:	47a0      	blx	r4
   1c652:	0003      	movs	r3, r0
   1c654:	2b01      	cmp	r3, #1
   1c656:	d003      	beq.n	1c660 <cycle+0x150>
                rc = FAILURE;
   1c658:	2301      	movs	r3, #1
   1c65a:	425b      	negs	r3, r3
   1c65c:	633b      	str	r3, [r7, #48]	; 0x30
   1c65e:	e023      	b.n	1c6a8 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   1c660:	687b      	ldr	r3, [r7, #4]
   1c662:	6918      	ldr	r0, [r3, #16]
   1c664:	687b      	ldr	r3, [r7, #4]
   1c666:	689b      	ldr	r3, [r3, #8]
   1c668:	0019      	movs	r1, r3
   1c66a:	230a      	movs	r3, #10
   1c66c:	18fb      	adds	r3, r7, r3
   1c66e:	881b      	ldrh	r3, [r3, #0]
   1c670:	9300      	str	r3, [sp, #0]
   1c672:	2300      	movs	r3, #0
   1c674:	2206      	movs	r2, #6
   1c676:	4c1f      	ldr	r4, [pc, #124]	; (1c6f4 <cycle+0x1e4>)
   1c678:	47a0      	blx	r4
   1c67a:	0003      	movs	r3, r0
   1c67c:	637b      	str	r3, [r7, #52]	; 0x34
   1c67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c680:	2b00      	cmp	r3, #0
   1c682:	dc03      	bgt.n	1c68c <cycle+0x17c>
                rc = FAILURE;
   1c684:	2301      	movs	r3, #1
   1c686:	425b      	negs	r3, r3
   1c688:	633b      	str	r3, [r7, #48]	; 0x30
   1c68a:	e00d      	b.n	1c6a8 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   1c68c:	683a      	ldr	r2, [r7, #0]
   1c68e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1c690:	687b      	ldr	r3, [r7, #4]
   1c692:	0018      	movs	r0, r3
   1c694:	4b18      	ldr	r3, [pc, #96]	; (1c6f8 <cycle+0x1e8>)
   1c696:	4798      	blx	r3
   1c698:	0003      	movs	r3, r0
   1c69a:	633b      	str	r3, [r7, #48]	; 0x30
   1c69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c69e:	2b00      	cmp	r3, #0
   1c6a0:	d002      	beq.n	1c6a8 <cycle+0x198>
                rc = FAILURE; // there was a problem
   1c6a2:	2301      	movs	r3, #1
   1c6a4:	425b      	negs	r3, r3
   1c6a6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   1c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c6aa:	3301      	adds	r3, #1
   1c6ac:	d106      	bne.n	1c6bc <cycle+0x1ac>
                goto exit; // there was a problem
   1c6ae:	e00c      	b.n	1c6ca <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   1c6b0:	687b      	ldr	r3, [r7, #4]
   1c6b2:	2200      	movs	r2, #0
   1c6b4:	771a      	strb	r2, [r3, #28]
            break;
   1c6b6:	e002      	b.n	1c6be <cycle+0x1ae>
            break;
   1c6b8:	46c0      	nop			; (mov r8, r8)
   1c6ba:	e000      	b.n	1c6be <cycle+0x1ae>
            break;
   1c6bc:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   1c6be:	687b      	ldr	r3, [r7, #4]
   1c6c0:	0018      	movs	r0, r3
   1c6c2:	4b0f      	ldr	r3, [pc, #60]	; (1c700 <cycle+0x1f0>)
   1c6c4:	4798      	blx	r3
   1c6c6:	e000      	b.n	1c6ca <cycle+0x1ba>
                goto exit;
   1c6c8:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   1c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c6cc:	2b00      	cmp	r3, #0
   1c6ce:	d103      	bne.n	1c6d8 <cycle+0x1c8>
        rc = packet_type;
   1c6d0:	232e      	movs	r3, #46	; 0x2e
   1c6d2:	18fb      	adds	r3, r7, r3
   1c6d4:	881b      	ldrh	r3, [r3, #0]
   1c6d6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   1c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   1c6da:	0018      	movs	r0, r3
   1c6dc:	46bd      	mov	sp, r7
   1c6de:	b00f      	add	sp, #60	; 0x3c
   1c6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c6e2:	46c0      	nop			; (mov r8, r8)
   1c6e4:	0001c1c5 	.word	0x0001c1c5
   1c6e8:	00028900 	.word	0x00028900
   1c6ec:	0001da89 	.word	0x0001da89
   1c6f0:	0001c381 	.word	0x0001c381
   1c6f4:	0001e281 	.word	0x0001e281
   1c6f8:	0001c009 	.word	0x0001c009
   1c6fc:	0001db8d 	.word	0x0001db8d
   1c700:	0001c46d 	.word	0x0001c46d

0001c704 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1c704:	b580      	push	{r7, lr}
   1c706:	b086      	sub	sp, #24
   1c708:	af00      	add	r7, sp, #0
   1c70a:	6078      	str	r0, [r7, #4]
   1c70c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   1c70e:	2300      	movs	r3, #0
   1c710:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   1c712:	2308      	movs	r3, #8
   1c714:	18fb      	adds	r3, r7, r3
   1c716:	0018      	movs	r0, r3
   1c718:	4b11      	ldr	r3, [pc, #68]	; (1c760 <MQTTYield+0x5c>)
   1c71a:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1c71c:	683a      	ldr	r2, [r7, #0]
   1c71e:	2308      	movs	r3, #8
   1c720:	18fb      	adds	r3, r7, r3
   1c722:	0011      	movs	r1, r2
   1c724:	0018      	movs	r0, r3
   1c726:	4b0f      	ldr	r3, [pc, #60]	; (1c764 <MQTTYield+0x60>)
   1c728:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   1c72a:	2308      	movs	r3, #8
   1c72c:	18fa      	adds	r2, r7, r3
   1c72e:	687b      	ldr	r3, [r7, #4]
   1c730:	0011      	movs	r1, r2
   1c732:	0018      	movs	r0, r3
   1c734:	4b0c      	ldr	r3, [pc, #48]	; (1c768 <MQTTYield+0x64>)
   1c736:	4798      	blx	r3
   1c738:	0003      	movs	r3, r0
   1c73a:	3301      	adds	r3, #1
   1c73c:	d103      	bne.n	1c746 <MQTTYield+0x42>
        {
            rc = FAILURE;
   1c73e:	2301      	movs	r3, #1
   1c740:	425b      	negs	r3, r3
   1c742:	617b      	str	r3, [r7, #20]
            break;
   1c744:	e006      	b.n	1c754 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   1c746:	2308      	movs	r3, #8
   1c748:	18fb      	adds	r3, r7, r3
   1c74a:	0018      	movs	r0, r3
   1c74c:	4b07      	ldr	r3, [pc, #28]	; (1c76c <MQTTYield+0x68>)
   1c74e:	4798      	blx	r3
   1c750:	1e03      	subs	r3, r0, #0
   1c752:	d0ea      	beq.n	1c72a <MQTTYield+0x26>
        
    return rc;
   1c754:	697b      	ldr	r3, [r7, #20]
}
   1c756:	0018      	movs	r0, r3
   1c758:	46bd      	mov	sp, r7
   1c75a:	b006      	add	sp, #24
   1c75c:	bd80      	pop	{r7, pc}
   1c75e:	46c0      	nop			; (mov r8, r8)
   1c760:	0001ce91 	.word	0x0001ce91
   1c764:	0001ce19 	.word	0x0001ce19
   1c768:	0001c511 	.word	0x0001c511
   1c76c:	0001cded 	.word	0x0001cded

0001c770 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   1c770:	b580      	push	{r7, lr}
   1c772:	b086      	sub	sp, #24
   1c774:	af00      	add	r7, sp, #0
   1c776:	60f8      	str	r0, [r7, #12]
   1c778:	60b9      	str	r1, [r7, #8]
   1c77a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1c77c:	2301      	movs	r3, #1
   1c77e:	425b      	negs	r3, r3
   1c780:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   1c782:	687b      	ldr	r3, [r7, #4]
   1c784:	0018      	movs	r0, r3
   1c786:	4b0b      	ldr	r3, [pc, #44]	; (1c7b4 <waitfor+0x44>)
   1c788:	4798      	blx	r3
   1c78a:	1e03      	subs	r3, r0, #0
   1c78c:	d10c      	bne.n	1c7a8 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   1c78e:	687a      	ldr	r2, [r7, #4]
   1c790:	68fb      	ldr	r3, [r7, #12]
   1c792:	0011      	movs	r1, r2
   1c794:	0018      	movs	r0, r3
   1c796:	4b08      	ldr	r3, [pc, #32]	; (1c7b8 <waitfor+0x48>)
   1c798:	4798      	blx	r3
   1c79a:	0003      	movs	r3, r0
   1c79c:	617b      	str	r3, [r7, #20]
   1c79e:	697a      	ldr	r2, [r7, #20]
   1c7a0:	68bb      	ldr	r3, [r7, #8]
   1c7a2:	429a      	cmp	r2, r3
   1c7a4:	d1ed      	bne.n	1c782 <waitfor+0x12>
   1c7a6:	e000      	b.n	1c7aa <waitfor+0x3a>
            break; // we timed out
   1c7a8:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   1c7aa:	697b      	ldr	r3, [r7, #20]
}
   1c7ac:	0018      	movs	r0, r3
   1c7ae:	46bd      	mov	sp, r7
   1c7b0:	b006      	add	sp, #24
   1c7b2:	bd80      	pop	{r7, pc}
   1c7b4:	0001cded 	.word	0x0001cded
   1c7b8:	0001c511 	.word	0x0001c511

0001c7bc <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   1c7bc:	b590      	push	{r4, r7, lr}
   1c7be:	b09f      	sub	sp, #124	; 0x7c
   1c7c0:	af00      	add	r7, sp, #0
   1c7c2:	6078      	str	r0, [r7, #4]
   1c7c4:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   1c7c6:	2301      	movs	r3, #1
   1c7c8:	425b      	negs	r3, r3
   1c7ca:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   1c7cc:	230c      	movs	r3, #12
   1c7ce:	18fa      	adds	r2, r7, r3
   1c7d0:	4b41      	ldr	r3, [pc, #260]	; (1c8d8 <MQTTConnect+0x11c>)
   1c7d2:	0010      	movs	r0, r2
   1c7d4:	0019      	movs	r1, r3
   1c7d6:	2358      	movs	r3, #88	; 0x58
   1c7d8:	001a      	movs	r2, r3
   1c7da:	4b40      	ldr	r3, [pc, #256]	; (1c8dc <MQTTConnect+0x120>)
   1c7dc:	4798      	blx	r3
    int len = 0;
   1c7de:	2300      	movs	r3, #0
   1c7e0:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1c7e2:	687b      	ldr	r3, [r7, #4]
   1c7e4:	6a1b      	ldr	r3, [r3, #32]
   1c7e6:	2b00      	cmp	r3, #0
   1c7e8:	d166      	bne.n	1c8b8 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   1c7ea:	2364      	movs	r3, #100	; 0x64
   1c7ec:	18fb      	adds	r3, r7, r3
   1c7ee:	0018      	movs	r0, r3
   1c7f0:	4b3b      	ldr	r3, [pc, #236]	; (1c8e0 <MQTTConnect+0x124>)
   1c7f2:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1c7f4:	687b      	ldr	r3, [r7, #4]
   1c7f6:	685a      	ldr	r2, [r3, #4]
   1c7f8:	2364      	movs	r3, #100	; 0x64
   1c7fa:	18fb      	adds	r3, r7, r3
   1c7fc:	0011      	movs	r1, r2
   1c7fe:	0018      	movs	r0, r3
   1c800:	4b38      	ldr	r3, [pc, #224]	; (1c8e4 <MQTTConnect+0x128>)
   1c802:	4798      	blx	r3

    if (options == 0)
   1c804:	683b      	ldr	r3, [r7, #0]
   1c806:	2b00      	cmp	r3, #0
   1c808:	d102      	bne.n	1c810 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   1c80a:	230c      	movs	r3, #12
   1c80c:	18fb      	adds	r3, r7, r3
   1c80e:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   1c810:	683b      	ldr	r3, [r7, #0]
   1c812:	8b1b      	ldrh	r3, [r3, #24]
   1c814:	001a      	movs	r2, r3
   1c816:	687b      	ldr	r3, [r7, #4]
   1c818:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1c81a:	687b      	ldr	r3, [r7, #4]
   1c81c:	3354      	adds	r3, #84	; 0x54
   1c81e:	001a      	movs	r2, r3
   1c820:	687b      	ldr	r3, [r7, #4]
   1c822:	699b      	ldr	r3, [r3, #24]
   1c824:	0019      	movs	r1, r3
   1c826:	0010      	movs	r0, r2
   1c828:	4b2f      	ldr	r3, [pc, #188]	; (1c8e8 <MQTTConnect+0x12c>)
   1c82a:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   1c82c:	687b      	ldr	r3, [r7, #4]
   1c82e:	6918      	ldr	r0, [r3, #16]
   1c830:	687b      	ldr	r3, [r7, #4]
   1c832:	689b      	ldr	r3, [r3, #8]
   1c834:	0019      	movs	r1, r3
   1c836:	683b      	ldr	r3, [r7, #0]
   1c838:	001a      	movs	r2, r3
   1c83a:	4b2c      	ldr	r3, [pc, #176]	; (1c8ec <MQTTConnect+0x130>)
   1c83c:	4798      	blx	r3
   1c83e:	0003      	movs	r3, r0
   1c840:	673b      	str	r3, [r7, #112]	; 0x70
   1c842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1c844:	2b00      	cmp	r3, #0
   1c846:	dd39      	ble.n	1c8bc <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   1c848:	2364      	movs	r3, #100	; 0x64
   1c84a:	18fa      	adds	r2, r7, r3
   1c84c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1c84e:	687b      	ldr	r3, [r7, #4]
   1c850:	0018      	movs	r0, r3
   1c852:	4b27      	ldr	r3, [pc, #156]	; (1c8f0 <MQTTConnect+0x134>)
   1c854:	4798      	blx	r3
   1c856:	0003      	movs	r3, r0
   1c858:	677b      	str	r3, [r7, #116]	; 0x74
   1c85a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1c85c:	2b00      	cmp	r3, #0
   1c85e:	d12f      	bne.n	1c8c0 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   1c860:	2364      	movs	r3, #100	; 0x64
   1c862:	18fa      	adds	r2, r7, r3
   1c864:	687b      	ldr	r3, [r7, #4]
   1c866:	2102      	movs	r1, #2
   1c868:	0018      	movs	r0, r3
   1c86a:	4b22      	ldr	r3, [pc, #136]	; (1c8f4 <MQTTConnect+0x138>)
   1c86c:	4798      	blx	r3
   1c86e:	0003      	movs	r3, r0
   1c870:	2b02      	cmp	r3, #2
   1c872:	d11d      	bne.n	1c8b0 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   1c874:	230b      	movs	r3, #11
   1c876:	18fb      	adds	r3, r7, r3
   1c878:	22ff      	movs	r2, #255	; 0xff
   1c87a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   1c87c:	230a      	movs	r3, #10
   1c87e:	18fb      	adds	r3, r7, r3
   1c880:	2200      	movs	r2, #0
   1c882:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1c884:	687b      	ldr	r3, [r7, #4]
   1c886:	695a      	ldr	r2, [r3, #20]
   1c888:	687b      	ldr	r3, [r7, #4]
   1c88a:	68db      	ldr	r3, [r3, #12]
   1c88c:	210b      	movs	r1, #11
   1c88e:	1879      	adds	r1, r7, r1
   1c890:	200a      	movs	r0, #10
   1c892:	1838      	adds	r0, r7, r0
   1c894:	4c18      	ldr	r4, [pc, #96]	; (1c8f8 <MQTTConnect+0x13c>)
   1c896:	47a0      	blx	r4
   1c898:	0003      	movs	r3, r0
   1c89a:	2b01      	cmp	r3, #1
   1c89c:	d104      	bne.n	1c8a8 <MQTTConnect+0xec>
            rc = connack_rc;
   1c89e:	230b      	movs	r3, #11
   1c8a0:	18fb      	adds	r3, r7, r3
   1c8a2:	781b      	ldrb	r3, [r3, #0]
   1c8a4:	677b      	str	r3, [r7, #116]	; 0x74
   1c8a6:	e00c      	b.n	1c8c2 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   1c8a8:	2301      	movs	r3, #1
   1c8aa:	425b      	negs	r3, r3
   1c8ac:	677b      	str	r3, [r7, #116]	; 0x74
   1c8ae:	e008      	b.n	1c8c2 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   1c8b0:	2301      	movs	r3, #1
   1c8b2:	425b      	negs	r3, r3
   1c8b4:	677b      	str	r3, [r7, #116]	; 0x74
   1c8b6:	e004      	b.n	1c8c2 <MQTTConnect+0x106>
		goto exit;
   1c8b8:	46c0      	nop			; (mov r8, r8)
   1c8ba:	e002      	b.n	1c8c2 <MQTTConnect+0x106>
        goto exit;
   1c8bc:	46c0      	nop			; (mov r8, r8)
   1c8be:	e000      	b.n	1c8c2 <MQTTConnect+0x106>
        goto exit; // there was a problem
   1c8c0:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   1c8c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1c8c4:	2b00      	cmp	r3, #0
   1c8c6:	d102      	bne.n	1c8ce <MQTTConnect+0x112>
        c->isconnected = 1;
   1c8c8:	687b      	ldr	r3, [r7, #4]
   1c8ca:	2201      	movs	r2, #1
   1c8cc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   1c8ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1c8d0:	0018      	movs	r0, r3
   1c8d2:	46bd      	mov	sp, r7
   1c8d4:	b01f      	add	sp, #124	; 0x7c
   1c8d6:	bd90      	pop	{r4, r7, pc}
   1c8d8:	00028938 	.word	0x00028938
   1c8dc:	00022d85 	.word	0x00022d85
   1c8e0:	0001ce91 	.word	0x0001ce91
   1c8e4:	0001ce19 	.word	0x0001ce19
   1c8e8:	0001ce41 	.word	0x0001ce41
   1c8ec:	0001d66d 	.word	0x0001d66d
   1c8f0:	0001c009 	.word	0x0001c009
   1c8f4:	0001c771 	.word	0x0001c771
   1c8f8:	0001d8e9 	.word	0x0001d8e9

0001c8fc <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   1c8fc:	b5b0      	push	{r4, r5, r7, lr}
   1c8fe:	b096      	sub	sp, #88	; 0x58
   1c900:	af04      	add	r7, sp, #16
   1c902:	60f8      	str	r0, [r7, #12]
   1c904:	60b9      	str	r1, [r7, #8]
   1c906:	603b      	str	r3, [r7, #0]
   1c908:	1dfb      	adds	r3, r7, #7
   1c90a:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   1c90c:	2301      	movs	r3, #1
   1c90e:	425b      	negs	r3, r3
   1c910:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   1c912:	2300      	movs	r3, #0
   1c914:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   1c916:	2324      	movs	r3, #36	; 0x24
   1c918:	18fb      	adds	r3, r7, r3
   1c91a:	2200      	movs	r2, #0
   1c91c:	601a      	str	r2, [r3, #0]
   1c91e:	2324      	movs	r3, #36	; 0x24
   1c920:	18fb      	adds	r3, r7, r3
   1c922:	2200      	movs	r2, #0
   1c924:	605a      	str	r2, [r3, #4]
   1c926:	2324      	movs	r3, #36	; 0x24
   1c928:	18fb      	adds	r3, r7, r3
   1c92a:	2200      	movs	r2, #0
   1c92c:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   1c92e:	1dfb      	adds	r3, r7, #7
   1c930:	781b      	ldrb	r3, [r3, #0]
   1c932:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   1c934:	2324      	movs	r3, #36	; 0x24
   1c936:	18fb      	adds	r3, r7, r3
   1c938:	68ba      	ldr	r2, [r7, #8]
   1c93a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1c93c:	68fb      	ldr	r3, [r7, #12]
   1c93e:	6a1b      	ldr	r3, [r3, #32]
   1c940:	2b00      	cmp	r3, #0
   1c942:	d100      	bne.n	1c946 <MQTTSubscribe+0x4a>
   1c944:	e088      	b.n	1ca58 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   1c946:	2330      	movs	r3, #48	; 0x30
   1c948:	18fb      	adds	r3, r7, r3
   1c94a:	0018      	movs	r0, r3
   1c94c:	4b47      	ldr	r3, [pc, #284]	; (1ca6c <MQTTSubscribe+0x170>)
   1c94e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1c950:	68fb      	ldr	r3, [r7, #12]
   1c952:	685a      	ldr	r2, [r3, #4]
   1c954:	2330      	movs	r3, #48	; 0x30
   1c956:	18fb      	adds	r3, r7, r3
   1c958:	0011      	movs	r1, r2
   1c95a:	0018      	movs	r0, r3
   1c95c:	4b44      	ldr	r3, [pc, #272]	; (1ca70 <MQTTSubscribe+0x174>)
   1c95e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1c960:	68fb      	ldr	r3, [r7, #12]
   1c962:	691c      	ldr	r4, [r3, #16]
   1c964:	68fb      	ldr	r3, [r7, #12]
   1c966:	689b      	ldr	r3, [r3, #8]
   1c968:	001d      	movs	r5, r3
   1c96a:	68fb      	ldr	r3, [r7, #12]
   1c96c:	0018      	movs	r0, r3
   1c96e:	4b41      	ldr	r3, [pc, #260]	; (1ca74 <MQTTSubscribe+0x178>)
   1c970:	4798      	blx	r3
   1c972:	0003      	movs	r3, r0
   1c974:	b29a      	uxth	r2, r3
   1c976:	2320      	movs	r3, #32
   1c978:	18fb      	adds	r3, r7, r3
   1c97a:	9302      	str	r3, [sp, #8]
   1c97c:	2324      	movs	r3, #36	; 0x24
   1c97e:	18fb      	adds	r3, r7, r3
   1c980:	9301      	str	r3, [sp, #4]
   1c982:	2301      	movs	r3, #1
   1c984:	9300      	str	r3, [sp, #0]
   1c986:	0013      	movs	r3, r2
   1c988:	2200      	movs	r2, #0
   1c98a:	0029      	movs	r1, r5
   1c98c:	0020      	movs	r0, r4
   1c98e:	4c3a      	ldr	r4, [pc, #232]	; (1ca78 <MQTTSubscribe+0x17c>)
   1c990:	47a0      	blx	r4
   1c992:	0003      	movs	r3, r0
   1c994:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   1c996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c998:	2b00      	cmp	r3, #0
   1c99a:	dd5f      	ble.n	1ca5c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1c99c:	2330      	movs	r3, #48	; 0x30
   1c99e:	18fa      	adds	r2, r7, r3
   1c9a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c9a2:	68fb      	ldr	r3, [r7, #12]
   1c9a4:	0018      	movs	r0, r3
   1c9a6:	4b35      	ldr	r3, [pc, #212]	; (1ca7c <MQTTSubscribe+0x180>)
   1c9a8:	4798      	blx	r3
   1c9aa:	0003      	movs	r3, r0
   1c9ac:	647b      	str	r3, [r7, #68]	; 0x44
   1c9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c9b0:	2b00      	cmp	r3, #0
   1c9b2:	d155      	bne.n	1ca60 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   1c9b4:	2330      	movs	r3, #48	; 0x30
   1c9b6:	18fa      	adds	r2, r7, r3
   1c9b8:	68fb      	ldr	r3, [r7, #12]
   1c9ba:	2109      	movs	r1, #9
   1c9bc:	0018      	movs	r0, r3
   1c9be:	4b30      	ldr	r3, [pc, #192]	; (1ca80 <MQTTSubscribe+0x184>)
   1c9c0:	4798      	blx	r3
   1c9c2:	0003      	movs	r3, r0
   1c9c4:	2b09      	cmp	r3, #9
   1c9c6:	d143      	bne.n	1ca50 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   1c9c8:	2300      	movs	r3, #0
   1c9ca:	61fb      	str	r3, [r7, #28]
   1c9cc:	2301      	movs	r3, #1
   1c9ce:	425b      	negs	r3, r3
   1c9d0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1c9d2:	68fb      	ldr	r3, [r7, #12]
   1c9d4:	695a      	ldr	r2, [r3, #20]
   1c9d6:	68fb      	ldr	r3, [r7, #12]
   1c9d8:	68db      	ldr	r3, [r3, #12]
   1c9da:	001c      	movs	r4, r3
   1c9dc:	2318      	movs	r3, #24
   1c9de:	18fb      	adds	r3, r7, r3
   1c9e0:	211c      	movs	r1, #28
   1c9e2:	1879      	adds	r1, r7, r1
   1c9e4:	2016      	movs	r0, #22
   1c9e6:	1838      	adds	r0, r7, r0
   1c9e8:	9401      	str	r4, [sp, #4]
   1c9ea:	9200      	str	r2, [sp, #0]
   1c9ec:	000a      	movs	r2, r1
   1c9ee:	2101      	movs	r1, #1
   1c9f0:	4c24      	ldr	r4, [pc, #144]	; (1ca84 <MQTTSubscribe+0x188>)
   1c9f2:	47a0      	blx	r4
   1c9f4:	0003      	movs	r3, r0
   1c9f6:	2b01      	cmp	r3, #1
   1c9f8:	d101      	bne.n	1c9fe <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   1c9fa:	69bb      	ldr	r3, [r7, #24]
   1c9fc:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   1c9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ca00:	2b80      	cmp	r3, #128	; 0x80
   1ca02:	d02e      	beq.n	1ca62 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1ca04:	2300      	movs	r3, #0
   1ca06:	643b      	str	r3, [r7, #64]	; 0x40
   1ca08:	e01e      	b.n	1ca48 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   1ca0a:	68fa      	ldr	r2, [r7, #12]
   1ca0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ca0e:	3304      	adds	r3, #4
   1ca10:	00db      	lsls	r3, r3, #3
   1ca12:	18d3      	adds	r3, r2, r3
   1ca14:	3304      	adds	r3, #4
   1ca16:	681b      	ldr	r3, [r3, #0]
   1ca18:	2b00      	cmp	r3, #0
   1ca1a:	d112      	bne.n	1ca42 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   1ca1c:	68fa      	ldr	r2, [r7, #12]
   1ca1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ca20:	3304      	adds	r3, #4
   1ca22:	00db      	lsls	r3, r3, #3
   1ca24:	18d3      	adds	r3, r2, r3
   1ca26:	3304      	adds	r3, #4
   1ca28:	68ba      	ldr	r2, [r7, #8]
   1ca2a:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   1ca2c:	68fa      	ldr	r2, [r7, #12]
   1ca2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ca30:	3304      	adds	r3, #4
   1ca32:	00db      	lsls	r3, r3, #3
   1ca34:	18d3      	adds	r3, r2, r3
   1ca36:	3308      	adds	r3, #8
   1ca38:	683a      	ldr	r2, [r7, #0]
   1ca3a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   1ca3c:	2300      	movs	r3, #0
   1ca3e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   1ca40:	e00f      	b.n	1ca62 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1ca42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ca44:	3301      	adds	r3, #1
   1ca46:	643b      	str	r3, [r7, #64]	; 0x40
   1ca48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ca4a:	2b04      	cmp	r3, #4
   1ca4c:	dddd      	ble.n	1ca0a <MQTTSubscribe+0x10e>
   1ca4e:	e008      	b.n	1ca62 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   1ca50:	2301      	movs	r3, #1
   1ca52:	425b      	negs	r3, r3
   1ca54:	647b      	str	r3, [r7, #68]	; 0x44
   1ca56:	e004      	b.n	1ca62 <MQTTSubscribe+0x166>
		goto exit;
   1ca58:	46c0      	nop			; (mov r8, r8)
   1ca5a:	e002      	b.n	1ca62 <MQTTSubscribe+0x166>
        goto exit;
   1ca5c:	46c0      	nop			; (mov r8, r8)
   1ca5e:	e000      	b.n	1ca62 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   1ca60:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1ca62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1ca64:	0018      	movs	r0, r3
   1ca66:	46bd      	mov	sp, r7
   1ca68:	b012      	add	sp, #72	; 0x48
   1ca6a:	bdb0      	pop	{r4, r5, r7, pc}
   1ca6c:	0001ce91 	.word	0x0001ce91
   1ca70:	0001ce19 	.word	0x0001ce19
   1ca74:	0001bfd9 	.word	0x0001bfd9
   1ca78:	0001e3c9 	.word	0x0001e3c9
   1ca7c:	0001c009 	.word	0x0001c009
   1ca80:	0001c771 	.word	0x0001c771
   1ca84:	0001e519 	.word	0x0001e519

0001ca88 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1ca88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca8a:	46ce      	mov	lr, r9
   1ca8c:	4647      	mov	r7, r8
   1ca8e:	b580      	push	{r7, lr}
   1ca90:	b097      	sub	sp, #92	; 0x5c
   1ca92:	af08      	add	r7, sp, #32
   1ca94:	60f8      	str	r0, [r7, #12]
   1ca96:	60b9      	str	r1, [r7, #8]
   1ca98:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1ca9a:	2301      	movs	r3, #1
   1ca9c:	425b      	negs	r3, r3
   1ca9e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   1caa0:	2318      	movs	r3, #24
   1caa2:	18fb      	adds	r3, r7, r3
   1caa4:	2200      	movs	r2, #0
   1caa6:	601a      	str	r2, [r3, #0]
   1caa8:	2318      	movs	r3, #24
   1caaa:	18fb      	adds	r3, r7, r3
   1caac:	2200      	movs	r2, #0
   1caae:	605a      	str	r2, [r3, #4]
   1cab0:	2318      	movs	r3, #24
   1cab2:	18fb      	adds	r3, r7, r3
   1cab4:	2200      	movs	r2, #0
   1cab6:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   1cab8:	2318      	movs	r3, #24
   1caba:	18fb      	adds	r3, r7, r3
   1cabc:	68ba      	ldr	r2, [r7, #8]
   1cabe:	601a      	str	r2, [r3, #0]
    int len = 0;
   1cac0:	2300      	movs	r3, #0
   1cac2:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1cac4:	68fb      	ldr	r3, [r7, #12]
   1cac6:	6a1b      	ldr	r3, [r3, #32]
   1cac8:	2b00      	cmp	r3, #0
   1caca:	d100      	bne.n	1cace <MQTTPublish+0x46>
   1cacc:	e0a0      	b.n	1cc10 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   1cace:	2324      	movs	r3, #36	; 0x24
   1cad0:	18fb      	adds	r3, r7, r3
   1cad2:	0018      	movs	r0, r3
   1cad4:	4b55      	ldr	r3, [pc, #340]	; (1cc2c <MQTTPublish+0x1a4>)
   1cad6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1cad8:	68fb      	ldr	r3, [r7, #12]
   1cada:	685a      	ldr	r2, [r3, #4]
   1cadc:	2324      	movs	r3, #36	; 0x24
   1cade:	18fb      	adds	r3, r7, r3
   1cae0:	0011      	movs	r1, r2
   1cae2:	0018      	movs	r0, r3
   1cae4:	4b52      	ldr	r3, [pc, #328]	; (1cc30 <MQTTPublish+0x1a8>)
   1cae6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1cae8:	687b      	ldr	r3, [r7, #4]
   1caea:	781b      	ldrb	r3, [r3, #0]
   1caec:	2b01      	cmp	r3, #1
   1caee:	d003      	beq.n	1caf8 <MQTTPublish+0x70>
   1caf0:	687b      	ldr	r3, [r7, #4]
   1caf2:	781b      	ldrb	r3, [r3, #0]
   1caf4:	2b02      	cmp	r3, #2
   1caf6:	d107      	bne.n	1cb08 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   1caf8:	68fb      	ldr	r3, [r7, #12]
   1cafa:	0018      	movs	r0, r3
   1cafc:	4b4d      	ldr	r3, [pc, #308]	; (1cc34 <MQTTPublish+0x1ac>)
   1cafe:	4798      	blx	r3
   1cb00:	0003      	movs	r3, r0
   1cb02:	b29a      	uxth	r2, r3
   1cb04:	687b      	ldr	r3, [r7, #4]
   1cb06:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1cb08:	68fb      	ldr	r3, [r7, #12]
   1cb0a:	691b      	ldr	r3, [r3, #16]
   1cb0c:	469c      	mov	ip, r3
   1cb0e:	68fb      	ldr	r3, [r7, #12]
   1cb10:	689b      	ldr	r3, [r3, #8]
   1cb12:	001d      	movs	r5, r3
   1cb14:	687b      	ldr	r3, [r7, #4]
   1cb16:	781b      	ldrb	r3, [r3, #0]
   1cb18:	001e      	movs	r6, r3
   1cb1a:	687b      	ldr	r3, [r7, #4]
   1cb1c:	785b      	ldrb	r3, [r3, #1]
   1cb1e:	4698      	mov	r8, r3
   1cb20:	687b      	ldr	r3, [r7, #4]
   1cb22:	889b      	ldrh	r3, [r3, #4]
   1cb24:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   1cb26:	687b      	ldr	r3, [r7, #4]
   1cb28:	689a      	ldr	r2, [r3, #8]
   1cb2a:	687b      	ldr	r3, [r7, #4]
   1cb2c:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1cb2e:	9306      	str	r3, [sp, #24]
   1cb30:	9205      	str	r2, [sp, #20]
   1cb32:	2318      	movs	r3, #24
   1cb34:	18fa      	adds	r2, r7, r3
   1cb36:	2308      	movs	r3, #8
   1cb38:	446b      	add	r3, sp
   1cb3a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1cb3c:	c313      	stmia	r3!, {r0, r1, r4}
   1cb3e:	464b      	mov	r3, r9
   1cb40:	9301      	str	r3, [sp, #4]
   1cb42:	4643      	mov	r3, r8
   1cb44:	9300      	str	r3, [sp, #0]
   1cb46:	0033      	movs	r3, r6
   1cb48:	2200      	movs	r2, #0
   1cb4a:	0029      	movs	r1, r5
   1cb4c:	4660      	mov	r0, ip
   1cb4e:	4c3a      	ldr	r4, [pc, #232]	; (1cc38 <MQTTPublish+0x1b0>)
   1cb50:	47a0      	blx	r4
   1cb52:	0003      	movs	r3, r0
   1cb54:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   1cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cb58:	2b00      	cmp	r3, #0
   1cb5a:	dd5b      	ble.n	1cc14 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1cb5c:	2324      	movs	r3, #36	; 0x24
   1cb5e:	18fa      	adds	r2, r7, r3
   1cb60:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1cb62:	68fb      	ldr	r3, [r7, #12]
   1cb64:	0018      	movs	r0, r3
   1cb66:	4b35      	ldr	r3, [pc, #212]	; (1cc3c <MQTTPublish+0x1b4>)
   1cb68:	4798      	blx	r3
   1cb6a:	0003      	movs	r3, r0
   1cb6c:	637b      	str	r3, [r7, #52]	; 0x34
   1cb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cb70:	2b00      	cmp	r3, #0
   1cb72:	d151      	bne.n	1cc18 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1cb74:	687b      	ldr	r3, [r7, #4]
   1cb76:	781b      	ldrb	r3, [r3, #0]
   1cb78:	2b01      	cmp	r3, #1
   1cb7a:	d122      	bne.n	1cbc2 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   1cb7c:	2324      	movs	r3, #36	; 0x24
   1cb7e:	18fa      	adds	r2, r7, r3
   1cb80:	68fb      	ldr	r3, [r7, #12]
   1cb82:	2104      	movs	r1, #4
   1cb84:	0018      	movs	r0, r3
   1cb86:	4b2e      	ldr	r3, [pc, #184]	; (1cc40 <MQTTPublish+0x1b8>)
   1cb88:	4798      	blx	r3
   1cb8a:	0003      	movs	r3, r0
   1cb8c:	2b04      	cmp	r3, #4
   1cb8e:	d114      	bne.n	1cbba <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1cb90:	68fb      	ldr	r3, [r7, #12]
   1cb92:	695c      	ldr	r4, [r3, #20]
   1cb94:	68fb      	ldr	r3, [r7, #12]
   1cb96:	68db      	ldr	r3, [r3, #12]
   1cb98:	2216      	movs	r2, #22
   1cb9a:	18ba      	adds	r2, r7, r2
   1cb9c:	2115      	movs	r1, #21
   1cb9e:	1879      	adds	r1, r7, r1
   1cba0:	2014      	movs	r0, #20
   1cba2:	1838      	adds	r0, r7, r0
   1cba4:	9300      	str	r3, [sp, #0]
   1cba6:	0023      	movs	r3, r4
   1cba8:	4c26      	ldr	r4, [pc, #152]	; (1cc44 <MQTTPublish+0x1bc>)
   1cbaa:	47a0      	blx	r4
   1cbac:	0003      	movs	r3, r0
   1cbae:	2b01      	cmp	r3, #1
   1cbb0:	d033      	beq.n	1cc1a <MQTTPublish+0x192>
                rc = FAILURE;
   1cbb2:	2301      	movs	r3, #1
   1cbb4:	425b      	negs	r3, r3
   1cbb6:	637b      	str	r3, [r7, #52]	; 0x34
   1cbb8:	e02f      	b.n	1cc1a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1cbba:	2301      	movs	r3, #1
   1cbbc:	425b      	negs	r3, r3
   1cbbe:	637b      	str	r3, [r7, #52]	; 0x34
   1cbc0:	e02b      	b.n	1cc1a <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   1cbc2:	687b      	ldr	r3, [r7, #4]
   1cbc4:	781b      	ldrb	r3, [r3, #0]
   1cbc6:	2b02      	cmp	r3, #2
   1cbc8:	d127      	bne.n	1cc1a <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   1cbca:	2324      	movs	r3, #36	; 0x24
   1cbcc:	18fa      	adds	r2, r7, r3
   1cbce:	68fb      	ldr	r3, [r7, #12]
   1cbd0:	2107      	movs	r1, #7
   1cbd2:	0018      	movs	r0, r3
   1cbd4:	4b1a      	ldr	r3, [pc, #104]	; (1cc40 <MQTTPublish+0x1b8>)
   1cbd6:	4798      	blx	r3
   1cbd8:	0003      	movs	r3, r0
   1cbda:	2b07      	cmp	r3, #7
   1cbdc:	d114      	bne.n	1cc08 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1cbde:	68fb      	ldr	r3, [r7, #12]
   1cbe0:	695c      	ldr	r4, [r3, #20]
   1cbe2:	68fb      	ldr	r3, [r7, #12]
   1cbe4:	68db      	ldr	r3, [r3, #12]
   1cbe6:	2212      	movs	r2, #18
   1cbe8:	18ba      	adds	r2, r7, r2
   1cbea:	2111      	movs	r1, #17
   1cbec:	1879      	adds	r1, r7, r1
   1cbee:	2010      	movs	r0, #16
   1cbf0:	1838      	adds	r0, r7, r0
   1cbf2:	9300      	str	r3, [sp, #0]
   1cbf4:	0023      	movs	r3, r4
   1cbf6:	4c13      	ldr	r4, [pc, #76]	; (1cc44 <MQTTPublish+0x1bc>)
   1cbf8:	47a0      	blx	r4
   1cbfa:	0003      	movs	r3, r0
   1cbfc:	2b01      	cmp	r3, #1
   1cbfe:	d00c      	beq.n	1cc1a <MQTTPublish+0x192>
                rc = FAILURE;
   1cc00:	2301      	movs	r3, #1
   1cc02:	425b      	negs	r3, r3
   1cc04:	637b      	str	r3, [r7, #52]	; 0x34
   1cc06:	e008      	b.n	1cc1a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1cc08:	2301      	movs	r3, #1
   1cc0a:	425b      	negs	r3, r3
   1cc0c:	637b      	str	r3, [r7, #52]	; 0x34
   1cc0e:	e004      	b.n	1cc1a <MQTTPublish+0x192>
		goto exit;
   1cc10:	46c0      	nop			; (mov r8, r8)
   1cc12:	e002      	b.n	1cc1a <MQTTPublish+0x192>
        goto exit;
   1cc14:	46c0      	nop			; (mov r8, r8)
   1cc16:	e000      	b.n	1cc1a <MQTTPublish+0x192>
        goto exit; // there was a problem
   1cc18:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1cc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1cc1c:	0018      	movs	r0, r3
   1cc1e:	46bd      	mov	sp, r7
   1cc20:	b00f      	add	sp, #60	; 0x3c
   1cc22:	bc0c      	pop	{r2, r3}
   1cc24:	4690      	mov	r8, r2
   1cc26:	4699      	mov	r9, r3
   1cc28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc2a:	46c0      	nop			; (mov r8, r8)
   1cc2c:	0001ce91 	.word	0x0001ce91
   1cc30:	0001ce19 	.word	0x0001ce19
   1cc34:	0001bfd9 	.word	0x0001bfd9
   1cc38:	0001e115 	.word	0x0001e115
   1cc3c:	0001c009 	.word	0x0001c009
   1cc40:	0001c771 	.word	0x0001c771
   1cc44:	0001db8d 	.word	0x0001db8d

0001cc48 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   1cc48:	b580      	push	{r7, lr}
   1cc4a:	b088      	sub	sp, #32
   1cc4c:	af00      	add	r7, sp, #0
   1cc4e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1cc50:	2301      	movs	r3, #1
   1cc52:	425b      	negs	r3, r3
   1cc54:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   1cc56:	2300      	movs	r3, #0
   1cc58:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1cc5a:	230c      	movs	r3, #12
   1cc5c:	18fb      	adds	r3, r7, r3
   1cc5e:	0018      	movs	r0, r3
   1cc60:	4b13      	ldr	r3, [pc, #76]	; (1ccb0 <MQTTDisconnect+0x68>)
   1cc62:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1cc64:	687b      	ldr	r3, [r7, #4]
   1cc66:	685a      	ldr	r2, [r3, #4]
   1cc68:	230c      	movs	r3, #12
   1cc6a:	18fb      	adds	r3, r7, r3
   1cc6c:	0011      	movs	r1, r2
   1cc6e:	0018      	movs	r0, r3
   1cc70:	4b10      	ldr	r3, [pc, #64]	; (1ccb4 <MQTTDisconnect+0x6c>)
   1cc72:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   1cc74:	687b      	ldr	r3, [r7, #4]
   1cc76:	691a      	ldr	r2, [r3, #16]
   1cc78:	687b      	ldr	r3, [r7, #4]
   1cc7a:	689b      	ldr	r3, [r3, #8]
   1cc7c:	0019      	movs	r1, r3
   1cc7e:	0010      	movs	r0, r2
   1cc80:	4b0d      	ldr	r3, [pc, #52]	; (1ccb8 <MQTTDisconnect+0x70>)
   1cc82:	4798      	blx	r3
   1cc84:	0003      	movs	r3, r0
   1cc86:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   1cc88:	69bb      	ldr	r3, [r7, #24]
   1cc8a:	2b00      	cmp	r3, #0
   1cc8c:	dd08      	ble.n	1cca0 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   1cc8e:	230c      	movs	r3, #12
   1cc90:	18fa      	adds	r2, r7, r3
   1cc92:	69b9      	ldr	r1, [r7, #24]
   1cc94:	687b      	ldr	r3, [r7, #4]
   1cc96:	0018      	movs	r0, r3
   1cc98:	4b08      	ldr	r3, [pc, #32]	; (1ccbc <MQTTDisconnect+0x74>)
   1cc9a:	4798      	blx	r3
   1cc9c:	0003      	movs	r3, r0
   1cc9e:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   1cca0:	687b      	ldr	r3, [r7, #4]
   1cca2:	2200      	movs	r2, #0
   1cca4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1cca6:	69fb      	ldr	r3, [r7, #28]
}
   1cca8:	0018      	movs	r0, r3
   1ccaa:	46bd      	mov	sp, r7
   1ccac:	b008      	add	sp, #32
   1ccae:	bd80      	pop	{r7, pc}
   1ccb0:	0001ce91 	.word	0x0001ce91
   1ccb4:	0001ce19 	.word	0x0001ce19
   1ccb8:	0001da41 	.word	0x0001da41
   1ccbc:	0001c009 	.word	0x0001c009

0001ccc0 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   1ccc0:	b580      	push	{r7, lr}
   1ccc2:	b084      	sub	sp, #16
   1ccc4:	af00      	add	r7, sp, #0
   1ccc6:	0002      	movs	r2, r0
   1ccc8:	1dfb      	adds	r3, r7, #7
   1ccca:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1cccc:	2300      	movs	r3, #0
   1ccce:	60fb      	str	r3, [r7, #12]
   1ccd0:	e01c      	b.n	1cd0c <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1ccd2:	4a12      	ldr	r2, [pc, #72]	; (1cd1c <isMQTTSocket+0x5c>)
   1ccd4:	68fb      	ldr	r3, [r7, #12]
   1ccd6:	2164      	movs	r1, #100	; 0x64
   1ccd8:	434b      	muls	r3, r1
   1ccda:	18d3      	adds	r3, r2, r3
   1ccdc:	3360      	adds	r3, #96	; 0x60
   1ccde:	681b      	ldr	r3, [r3, #0]
   1cce0:	2b00      	cmp	r3, #0
   1cce2:	d010      	beq.n	1cd06 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   1cce4:	4a0d      	ldr	r2, [pc, #52]	; (1cd1c <isMQTTSocket+0x5c>)
   1cce6:	68fb      	ldr	r3, [r7, #12]
   1cce8:	2164      	movs	r1, #100	; 0x64
   1ccea:	434b      	muls	r3, r1
   1ccec:	18d3      	adds	r3, r2, r3
   1ccee:	3360      	adds	r3, #96	; 0x60
   1ccf0:	681b      	ldr	r3, [r3, #0]
   1ccf2:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   1ccf4:	68bb      	ldr	r3, [r7, #8]
   1ccf6:	6a1a      	ldr	r2, [r3, #32]
   1ccf8:	1dfb      	adds	r3, r7, #7
   1ccfa:	781b      	ldrb	r3, [r3, #0]
   1ccfc:	b25b      	sxtb	r3, r3
   1ccfe:	429a      	cmp	r2, r3
   1cd00:	d101      	bne.n	1cd06 <isMQTTSocket+0x46>
				return true;
   1cd02:	2301      	movs	r3, #1
   1cd04:	e006      	b.n	1cd14 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1cd06:	68fb      	ldr	r3, [r7, #12]
   1cd08:	3301      	adds	r3, #1
   1cd0a:	60fb      	str	r3, [r7, #12]
   1cd0c:	68fb      	ldr	r3, [r7, #12]
   1cd0e:	2b06      	cmp	r3, #6
   1cd10:	d9df      	bls.n	1ccd2 <isMQTTSocket+0x12>
		}
	}
	return false;
   1cd12:	2300      	movs	r3, #0
}
   1cd14:	0018      	movs	r0, r3
   1cd16:	46bd      	mov	sp, r7
   1cd18:	b004      	add	sp, #16
   1cd1a:	bd80      	pop	{r7, pc}
   1cd1c:	200044c4 	.word	0x200044c4

0001cd20 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   1cd20:	b580      	push	{r7, lr}
   1cd22:	b082      	sub	sp, #8
   1cd24:	af00      	add	r7, sp, #0
   1cd26:	6078      	str	r0, [r7, #4]
   1cd28:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   1cd2a:	4b0d      	ldr	r3, [pc, #52]	; (1cd60 <dnsResolveCallback+0x40>)
   1cd2c:	781b      	ldrb	r3, [r3, #0]
   1cd2e:	2201      	movs	r2, #1
   1cd30:	4053      	eors	r3, r2
   1cd32:	b2db      	uxtb	r3, r3
   1cd34:	2b00      	cmp	r3, #0
   1cd36:	d00e      	beq.n	1cd56 <dnsResolveCallback+0x36>
   1cd38:	4b0a      	ldr	r3, [pc, #40]	; (1cd64 <dnsResolveCallback+0x44>)
   1cd3a:	681b      	ldr	r3, [r3, #0]
   1cd3c:	687a      	ldr	r2, [r7, #4]
   1cd3e:	0011      	movs	r1, r2
   1cd40:	0018      	movs	r0, r3
   1cd42:	4b09      	ldr	r3, [pc, #36]	; (1cd68 <dnsResolveCallback+0x48>)
   1cd44:	4798      	blx	r3
   1cd46:	1e03      	subs	r3, r0, #0
   1cd48:	d105      	bne.n	1cd56 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   1cd4a:	683a      	ldr	r2, [r7, #0]
   1cd4c:	4b07      	ldr	r3, [pc, #28]	; (1cd6c <dnsResolveCallback+0x4c>)
   1cd4e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   1cd50:	4b03      	ldr	r3, [pc, #12]	; (1cd60 <dnsResolveCallback+0x40>)
   1cd52:	2201      	movs	r2, #1
   1cd54:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   1cd56:	46c0      	nop			; (mov r8, r8)
   1cd58:	46bd      	mov	sp, r7
   1cd5a:	b002      	add	sp, #8
   1cd5c:	bd80      	pop	{r7, pc}
   1cd5e:	46c0      	nop			; (mov r8, r8)
   1cd60:	200043b4 	.word	0x200043b4
   1cd64:	200044c0 	.word	0x200044c0
   1cd68:	000230f9 	.word	0x000230f9
   1cd6c:	200043ac 	.word	0x200043ac

0001cd70 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   1cd70:	b580      	push	{r7, lr}
   1cd72:	b084      	sub	sp, #16
   1cd74:	af00      	add	r7, sp, #0
   1cd76:	603a      	str	r2, [r7, #0]
   1cd78:	1dfb      	adds	r3, r7, #7
   1cd7a:	1c02      	adds	r2, r0, #0
   1cd7c:	701a      	strb	r2, [r3, #0]
   1cd7e:	1dbb      	adds	r3, r7, #6
   1cd80:	1c0a      	adds	r2, r1, #0
   1cd82:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   1cd84:	1dfb      	adds	r3, r7, #7
   1cd86:	781b      	ldrb	r3, [r3, #0]
   1cd88:	b25b      	sxtb	r3, r3
   1cd8a:	0018      	movs	r0, r3
   1cd8c:	4b12      	ldr	r3, [pc, #72]	; (1cdd8 <tcpClientSocketEventHandler+0x68>)
   1cd8e:	4798      	blx	r3
   1cd90:	1e03      	subs	r3, r0, #0
   1cd92:	d01c      	beq.n	1cdce <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   1cd94:	1dbb      	adds	r3, r7, #6
   1cd96:	781b      	ldrb	r3, [r3, #0]
   1cd98:	2b06      	cmp	r3, #6
   1cd9a:	d00c      	beq.n	1cdb6 <tcpClientSocketEventHandler+0x46>
   1cd9c:	2b07      	cmp	r3, #7
   1cd9e:	d006      	beq.n	1cdae <tcpClientSocketEventHandler+0x3e>
   1cda0:	2b05      	cmp	r3, #5
   1cda2:	d000      	beq.n	1cda6 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   1cda4:	e013      	b.n	1cdce <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   1cda6:	4b0d      	ldr	r3, [pc, #52]	; (1cddc <tcpClientSocketEventHandler+0x6c>)
   1cda8:	2201      	movs	r2, #1
   1cdaa:	701a      	strb	r2, [r3, #0]
			break;
   1cdac:	e00f      	b.n	1cdce <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   1cdae:	4b0c      	ldr	r3, [pc, #48]	; (1cde0 <tcpClientSocketEventHandler+0x70>)
   1cdb0:	2201      	movs	r2, #1
   1cdb2:	701a      	strb	r2, [r3, #0]
			break;
   1cdb4:	e00b      	b.n	1cdce <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   1cdb6:	683b      	ldr	r3, [r7, #0]
   1cdb8:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   1cdba:	68fb      	ldr	r3, [r7, #12]
   1cdbc:	2204      	movs	r2, #4
   1cdbe:	5e9b      	ldrsh	r3, [r3, r2]
   1cdc0:	001a      	movs	r2, r3
   1cdc2:	4b08      	ldr	r3, [pc, #32]	; (1cde4 <tcpClientSocketEventHandler+0x74>)
   1cdc4:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1cdc6:	4b08      	ldr	r3, [pc, #32]	; (1cde8 <tcpClientSocketEventHandler+0x78>)
   1cdc8:	2201      	movs	r2, #1
   1cdca:	701a      	strb	r2, [r3, #0]
			break;
   1cdcc:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1cdce:	46c0      	nop			; (mov r8, r8)
   1cdd0:	46bd      	mov	sp, r7
   1cdd2:	b004      	add	sp, #16
   1cdd4:	bd80      	pop	{r7, pc}
   1cdd6:	46c0      	nop			; (mov r8, r8)
   1cdd8:	0001ccc1 	.word	0x0001ccc1
   1cddc:	200043b5 	.word	0x200043b5
   1cde0:	200043b6 	.word	0x200043b6
   1cde4:	200043b0 	.word	0x200043b0
   1cde8:	200043b7 	.word	0x200043b7

0001cdec <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   1cdec:	b580      	push	{r7, lr}
   1cdee:	b082      	sub	sp, #8
   1cdf0:	af00      	add	r7, sp, #0
   1cdf2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   1cdf4:	687b      	ldr	r3, [r7, #4]
   1cdf6:	3304      	adds	r3, #4
   1cdf8:	687a      	ldr	r2, [r7, #4]
   1cdfa:	0011      	movs	r1, r2
   1cdfc:	0018      	movs	r0, r3
   1cdfe:	4b05      	ldr	r3, [pc, #20]	; (1ce14 <TimerIsExpired+0x28>)
   1ce00:	4798      	blx	r3
   1ce02:	0003      	movs	r3, r0
   1ce04:	3b01      	subs	r3, #1
   1ce06:	425a      	negs	r2, r3
   1ce08:	4153      	adcs	r3, r2
   1ce0a:	b2db      	uxtb	r3, r3
}
   1ce0c:	0018      	movs	r0, r3
   1ce0e:	46bd      	mov	sp, r7
   1ce10:	b002      	add	sp, #8
   1ce12:	bd80      	pop	{r7, pc}
   1ce14:	0000a621 	.word	0x0000a621

0001ce18 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   1ce18:	b580      	push	{r7, lr}
   1ce1a:	b082      	sub	sp, #8
   1ce1c:	af00      	add	r7, sp, #0
   1ce1e:	6078      	str	r0, [r7, #4]
   1ce20:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   1ce22:	687b      	ldr	r3, [r7, #4]
   1ce24:	683a      	ldr	r2, [r7, #0]
   1ce26:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   1ce28:	687b      	ldr	r3, [r7, #4]
   1ce2a:	3304      	adds	r3, #4
   1ce2c:	0018      	movs	r0, r3
   1ce2e:	4b03      	ldr	r3, [pc, #12]	; (1ce3c <TimerCountdownMS+0x24>)
   1ce30:	4798      	blx	r3
}
   1ce32:	46c0      	nop			; (mov r8, r8)
   1ce34:	46bd      	mov	sp, r7
   1ce36:	b002      	add	sp, #8
   1ce38:	bd80      	pop	{r7, pc}
   1ce3a:	46c0      	nop			; (mov r8, r8)
   1ce3c:	0000a5b5 	.word	0x0000a5b5

0001ce40 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   1ce40:	b580      	push	{r7, lr}
   1ce42:	b082      	sub	sp, #8
   1ce44:	af00      	add	r7, sp, #0
   1ce46:	6078      	str	r0, [r7, #4]
   1ce48:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   1ce4a:	683b      	ldr	r3, [r7, #0]
   1ce4c:	22fa      	movs	r2, #250	; 0xfa
   1ce4e:	0092      	lsls	r2, r2, #2
   1ce50:	435a      	muls	r2, r3
   1ce52:	687b      	ldr	r3, [r7, #4]
   1ce54:	0011      	movs	r1, r2
   1ce56:	0018      	movs	r0, r3
   1ce58:	4b02      	ldr	r3, [pc, #8]	; (1ce64 <TimerCountdown+0x24>)
   1ce5a:	4798      	blx	r3
}
   1ce5c:	46c0      	nop			; (mov r8, r8)
   1ce5e:	46bd      	mov	sp, r7
   1ce60:	b002      	add	sp, #8
   1ce62:	bd80      	pop	{r7, pc}
   1ce64:	0001ce19 	.word	0x0001ce19

0001ce68 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   1ce68:	b580      	push	{r7, lr}
   1ce6a:	b082      	sub	sp, #8
   1ce6c:	af00      	add	r7, sp, #0
   1ce6e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   1ce70:	687b      	ldr	r3, [r7, #4]
   1ce72:	3304      	adds	r3, #4
   1ce74:	687a      	ldr	r2, [r7, #4]
   1ce76:	0011      	movs	r1, r2
   1ce78:	0018      	movs	r0, r3
   1ce7a:	4b04      	ldr	r3, [pc, #16]	; (1ce8c <TimerLeftMS+0x24>)
   1ce7c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   1ce7e:	687b      	ldr	r3, [r7, #4]
   1ce80:	681b      	ldr	r3, [r3, #0]
}
   1ce82:	0018      	movs	r0, r3
   1ce84:	46bd      	mov	sp, r7
   1ce86:	b002      	add	sp, #8
   1ce88:	bd80      	pop	{r7, pc}
   1ce8a:	46c0      	nop			; (mov r8, r8)
   1ce8c:	0000a621 	.word	0x0000a621

0001ce90 <TimerInit>:


void TimerInit(Timer* timer) {
   1ce90:	b580      	push	{r7, lr}
   1ce92:	b082      	sub	sp, #8
   1ce94:	af00      	add	r7, sp, #0
   1ce96:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   1ce98:	687b      	ldr	r3, [r7, #4]
   1ce9a:	2200      	movs	r2, #0
   1ce9c:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   1ce9e:	687b      	ldr	r3, [r7, #4]
   1cea0:	3304      	adds	r3, #4
   1cea2:	2208      	movs	r2, #8
   1cea4:	2100      	movs	r1, #0
   1cea6:	0018      	movs	r0, r3
   1cea8:	4b02      	ldr	r3, [pc, #8]	; (1ceb4 <TimerInit+0x24>)
   1ceaa:	4798      	blx	r3
}
   1ceac:	46c0      	nop			; (mov r8, r8)
   1ceae:	46bd      	mov	sp, r7
   1ceb0:	b002      	add	sp, #8
   1ceb2:	bd80      	pop	{r7, pc}
   1ceb4:	00022dbb 	.word	0x00022dbb

0001ceb8 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1ceb8:	b590      	push	{r4, r7, lr}
   1ceba:	b085      	sub	sp, #20
   1cebc:	af00      	add	r7, sp, #0
   1cebe:	60f8      	str	r0, [r7, #12]
   1cec0:	60b9      	str	r1, [r7, #8]
   1cec2:	607a      	str	r2, [r7, #4]
   1cec4:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   1cec6:	683b      	ldr	r3, [r7, #0]
   1cec8:	2b00      	cmp	r3, #0
   1ceca:	d101      	bne.n	1ced0 <WINC1500_read+0x18>
   1cecc:	230a      	movs	r3, #10
   1cece:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1ced0:	4b2c      	ldr	r3, [pc, #176]	; (1cf84 <WINC1500_read+0xcc>)
   1ced2:	681b      	ldr	r3, [r3, #0]
   1ced4:	2b00      	cmp	r3, #0
   1ced6:	d131      	bne.n	1cf3c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   1ced8:	4b2b      	ldr	r3, [pc, #172]	; (1cf88 <WINC1500_read+0xd0>)
   1ceda:	2200      	movs	r2, #0
   1cedc:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1cede:	68fb      	ldr	r3, [r7, #12]
   1cee0:	681b      	ldr	r3, [r3, #0]
   1cee2:	b258      	sxtb	r0, r3
   1cee4:	683c      	ldr	r4, [r7, #0]
   1cee6:	2380      	movs	r3, #128	; 0x80
   1cee8:	005a      	lsls	r2, r3, #1
   1ceea:	4928      	ldr	r1, [pc, #160]	; (1cf8c <WINC1500_read+0xd4>)
   1ceec:	0023      	movs	r3, r4
   1ceee:	4c28      	ldr	r4, [pc, #160]	; (1cf90 <WINC1500_read+0xd8>)
   1cef0:	47a0      	blx	r4
   1cef2:	1e03      	subs	r3, r0, #0
   1cef4:	d005      	beq.n	1cf02 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   1cef6:	2301      	movs	r3, #1
   1cef8:	425b      	negs	r3, r3
   1cefa:	e03e      	b.n	1cf7a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   1cefc:	2000      	movs	r0, #0
   1cefe:	4b25      	ldr	r3, [pc, #148]	; (1cf94 <WINC1500_read+0xdc>)
   1cf00:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   1cf02:	4b21      	ldr	r3, [pc, #132]	; (1cf88 <WINC1500_read+0xd0>)
   1cf04:	781b      	ldrb	r3, [r3, #0]
   1cf06:	2201      	movs	r2, #1
   1cf08:	4053      	eors	r3, r2
   1cf0a:	b2db      	uxtb	r3, r3
   1cf0c:	2b00      	cmp	r3, #0
   1cf0e:	d1f5      	bne.n	1cefc <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   1cf10:	4b21      	ldr	r3, [pc, #132]	; (1cf98 <WINC1500_read+0xe0>)
   1cf12:	681b      	ldr	r3, [r3, #0]
   1cf14:	2b00      	cmp	r3, #0
   1cf16:	dd08      	ble.n	1cf2a <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1cf18:	4b1f      	ldr	r3, [pc, #124]	; (1cf98 <WINC1500_read+0xe0>)
   1cf1a:	681b      	ldr	r3, [r3, #0]
   1cf1c:	001a      	movs	r2, r3
   1cf1e:	4b19      	ldr	r3, [pc, #100]	; (1cf84 <WINC1500_read+0xcc>)
   1cf20:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   1cf22:	4b1e      	ldr	r3, [pc, #120]	; (1cf9c <WINC1500_read+0xe4>)
   1cf24:	2200      	movs	r2, #0
   1cf26:	601a      	str	r2, [r3, #0]
   1cf28:	e008      	b.n	1cf3c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   1cf2a:	4b16      	ldr	r3, [pc, #88]	; (1cf84 <WINC1500_read+0xcc>)
   1cf2c:	2200      	movs	r2, #0
   1cf2e:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   1cf30:	4b1a      	ldr	r3, [pc, #104]	; (1cf9c <WINC1500_read+0xe4>)
   1cf32:	2200      	movs	r2, #0
   1cf34:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   1cf36:	4b18      	ldr	r3, [pc, #96]	; (1cf98 <WINC1500_read+0xe0>)
   1cf38:	681b      	ldr	r3, [r3, #0]
   1cf3a:	e01e      	b.n	1cf7a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   1cf3c:	4b11      	ldr	r3, [pc, #68]	; (1cf84 <WINC1500_read+0xcc>)
   1cf3e:	681b      	ldr	r3, [r3, #0]
   1cf40:	001a      	movs	r2, r3
   1cf42:	687b      	ldr	r3, [r7, #4]
   1cf44:	4293      	cmp	r3, r2
   1cf46:	dd02      	ble.n	1cf4e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   1cf48:	2301      	movs	r3, #1
   1cf4a:	425b      	negs	r3, r3
   1cf4c:	e015      	b.n	1cf7a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1cf4e:	4b13      	ldr	r3, [pc, #76]	; (1cf9c <WINC1500_read+0xe4>)
   1cf50:	681a      	ldr	r2, [r3, #0]
   1cf52:	4b0e      	ldr	r3, [pc, #56]	; (1cf8c <WINC1500_read+0xd4>)
   1cf54:	18d1      	adds	r1, r2, r3
   1cf56:	687a      	ldr	r2, [r7, #4]
   1cf58:	68bb      	ldr	r3, [r7, #8]
   1cf5a:	0018      	movs	r0, r3
   1cf5c:	4b10      	ldr	r3, [pc, #64]	; (1cfa0 <WINC1500_read+0xe8>)
   1cf5e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1cf60:	4b08      	ldr	r3, [pc, #32]	; (1cf84 <WINC1500_read+0xcc>)
   1cf62:	681a      	ldr	r2, [r3, #0]
   1cf64:	687b      	ldr	r3, [r7, #4]
   1cf66:	1ad2      	subs	r2, r2, r3
   1cf68:	4b06      	ldr	r3, [pc, #24]	; (1cf84 <WINC1500_read+0xcc>)
   1cf6a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1cf6c:	4b0b      	ldr	r3, [pc, #44]	; (1cf9c <WINC1500_read+0xe4>)
   1cf6e:	681a      	ldr	r2, [r3, #0]
   1cf70:	687b      	ldr	r3, [r7, #4]
   1cf72:	18d2      	adds	r2, r2, r3
   1cf74:	4b09      	ldr	r3, [pc, #36]	; (1cf9c <WINC1500_read+0xe4>)
   1cf76:	601a      	str	r2, [r3, #0]
  
  return len;
   1cf78:	687b      	ldr	r3, [r7, #4]
}
   1cf7a:	0018      	movs	r0, r3
   1cf7c:	46bd      	mov	sp, r7
   1cf7e:	b005      	add	sp, #20
   1cf80:	bd90      	pop	{r4, r7, pc}
   1cf82:	46c0      	nop			; (mov r8, r8)
   1cf84:	200044bc 	.word	0x200044bc
   1cf88:	200043b7 	.word	0x200043b7
   1cf8c:	200043b8 	.word	0x200043b8
   1cf90:	0001356d 	.word	0x0001356d
   1cf94:	0000fab5 	.word	0x0000fab5
   1cf98:	200043b0 	.word	0x200043b0
   1cf9c:	200044b8 	.word	0x200044b8
   1cfa0:	00022d85 	.word	0x00022d85

0001cfa4 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   1cfa4:	b590      	push	{r4, r7, lr}
   1cfa6:	b085      	sub	sp, #20
   1cfa8:	af00      	add	r7, sp, #0
   1cfaa:	60f8      	str	r0, [r7, #12]
   1cfac:	60b9      	str	r1, [r7, #8]
   1cfae:	607a      	str	r2, [r7, #4]
   1cfb0:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   1cfb2:	4b10      	ldr	r3, [pc, #64]	; (1cff4 <WINC1500_write+0x50>)
   1cfb4:	2200      	movs	r2, #0
   1cfb6:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1cfb8:	68fb      	ldr	r3, [r7, #12]
   1cfba:	681b      	ldr	r3, [r3, #0]
   1cfbc:	b258      	sxtb	r0, r3
   1cfbe:	687b      	ldr	r3, [r7, #4]
   1cfc0:	b29a      	uxth	r2, r3
   1cfc2:	68b9      	ldr	r1, [r7, #8]
   1cfc4:	2300      	movs	r3, #0
   1cfc6:	4c0c      	ldr	r4, [pc, #48]	; (1cff8 <WINC1500_write+0x54>)
   1cfc8:	47a0      	blx	r4
   1cfca:	1e03      	subs	r3, r0, #0
   1cfcc:	d005      	beq.n	1cfda <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   1cfce:	2301      	movs	r3, #1
   1cfd0:	425b      	negs	r3, r3
   1cfd2:	e00a      	b.n	1cfea <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   1cfd4:	2000      	movs	r0, #0
   1cfd6:	4b09      	ldr	r3, [pc, #36]	; (1cffc <WINC1500_write+0x58>)
   1cfd8:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   1cfda:	4b06      	ldr	r3, [pc, #24]	; (1cff4 <WINC1500_write+0x50>)
   1cfdc:	781b      	ldrb	r3, [r3, #0]
   1cfde:	2201      	movs	r2, #1
   1cfe0:	4053      	eors	r3, r2
   1cfe2:	b2db      	uxtb	r3, r3
   1cfe4:	2b00      	cmp	r3, #0
   1cfe6:	d1f5      	bne.n	1cfd4 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   1cfe8:	687b      	ldr	r3, [r7, #4]
}
   1cfea:	0018      	movs	r0, r3
   1cfec:	46bd      	mov	sp, r7
   1cfee:	b005      	add	sp, #20
   1cff0:	bd90      	pop	{r4, r7, pc}
   1cff2:	46c0      	nop			; (mov r8, r8)
   1cff4:	200043b6 	.word	0x200043b6
   1cff8:	00013409 	.word	0x00013409
   1cffc:	0000fab5 	.word	0x0000fab5

0001d000 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   1d000:	b580      	push	{r7, lr}
   1d002:	b082      	sub	sp, #8
   1d004:	af00      	add	r7, sp, #0
   1d006:	6078      	str	r0, [r7, #4]
	close(n->socket);
   1d008:	687b      	ldr	r3, [r7, #4]
   1d00a:	681b      	ldr	r3, [r3, #0]
   1d00c:	b25b      	sxtb	r3, r3
   1d00e:	0018      	movs	r0, r3
   1d010:	4b06      	ldr	r3, [pc, #24]	; (1d02c <WINC1500_disconnect+0x2c>)
   1d012:	4798      	blx	r3
	n->socket=-1;
   1d014:	687b      	ldr	r3, [r7, #4]
   1d016:	2201      	movs	r2, #1
   1d018:	4252      	negs	r2, r2
   1d01a:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   1d01c:	4b04      	ldr	r3, [pc, #16]	; (1d030 <WINC1500_disconnect+0x30>)
   1d01e:	2200      	movs	r2, #0
   1d020:	701a      	strb	r2, [r3, #0]
}
   1d022:	46c0      	nop			; (mov r8, r8)
   1d024:	46bd      	mov	sp, r7
   1d026:	b002      	add	sp, #8
   1d028:	bd80      	pop	{r7, pc}
   1d02a:	46c0      	nop			; (mov r8, r8)
   1d02c:	000136ed 	.word	0x000136ed
   1d030:	200043b5 	.word	0x200043b5

0001d034 <NetworkInit>:


void NetworkInit(Network* n) {
   1d034:	b580      	push	{r7, lr}
   1d036:	b082      	sub	sp, #8
   1d038:	af00      	add	r7, sp, #0
   1d03a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   1d03c:	687b      	ldr	r3, [r7, #4]
   1d03e:	2201      	movs	r2, #1
   1d040:	4252      	negs	r2, r2
   1d042:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   1d044:	687b      	ldr	r3, [r7, #4]
   1d046:	4a06      	ldr	r2, [pc, #24]	; (1d060 <NetworkInit+0x2c>)
   1d048:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   1d04a:	687b      	ldr	r3, [r7, #4]
   1d04c:	4a05      	ldr	r2, [pc, #20]	; (1d064 <NetworkInit+0x30>)
   1d04e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   1d050:	687b      	ldr	r3, [r7, #4]
   1d052:	4a05      	ldr	r2, [pc, #20]	; (1d068 <NetworkInit+0x34>)
   1d054:	611a      	str	r2, [r3, #16]
}
   1d056:	46c0      	nop			; (mov r8, r8)
   1d058:	46bd      	mov	sp, r7
   1d05a:	b002      	add	sp, #8
   1d05c:	bd80      	pop	{r7, pc}
   1d05e:	46c0      	nop			; (mov r8, r8)
   1d060:	0001ceb9 	.word	0x0001ceb9
   1d064:	0001cfa5 	.word	0x0001cfa5
   1d068:	0001d001 	.word	0x0001d001

0001d06c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   1d06c:	b580      	push	{r7, lr}
   1d06e:	b088      	sub	sp, #32
   1d070:	af00      	add	r7, sp, #0
   1d072:	60f8      	str	r0, [r7, #12]
   1d074:	60b9      	str	r1, [r7, #8]
   1d076:	607a      	str	r2, [r7, #4]
   1d078:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1d07a:	4b37      	ldr	r3, [pc, #220]	; (1d158 <ConnectNetwork+0xec>)
   1d07c:	2200      	movs	r2, #0
   1d07e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   1d080:	4b36      	ldr	r3, [pc, #216]	; (1d15c <ConnectNetwork+0xf0>)
   1d082:	68ba      	ldr	r2, [r7, #8]
   1d084:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   1d086:	68bb      	ldr	r3, [r7, #8]
   1d088:	0018      	movs	r0, r3
   1d08a:	4b35      	ldr	r3, [pc, #212]	; (1d160 <ConnectNetwork+0xf4>)
   1d08c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1d08e:	e002      	b.n	1d096 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   1d090:	2000      	movs	r0, #0
   1d092:	4b34      	ldr	r3, [pc, #208]	; (1d164 <ConnectNetwork+0xf8>)
   1d094:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   1d096:	4b30      	ldr	r3, [pc, #192]	; (1d158 <ConnectNetwork+0xec>)
   1d098:	781b      	ldrb	r3, [r3, #0]
   1d09a:	2201      	movs	r2, #1
   1d09c:	4053      	eors	r3, r2
   1d09e:	b2db      	uxtb	r3, r3
   1d0a0:	2b00      	cmp	r3, #0
   1d0a2:	d1f5      	bne.n	1d090 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1d0a4:	4b30      	ldr	r3, [pc, #192]	; (1d168 <ConnectNetwork+0xfc>)
   1d0a6:	681a      	ldr	r2, [r3, #0]
   1d0a8:	68fb      	ldr	r3, [r7, #12]
   1d0aa:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   1d0ac:	2310      	movs	r3, #16
   1d0ae:	18fb      	adds	r3, r7, r3
   1d0b0:	2202      	movs	r2, #2
   1d0b2:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   1d0b4:	687b      	ldr	r3, [r7, #4]
   1d0b6:	b29b      	uxth	r3, r3
   1d0b8:	021b      	lsls	r3, r3, #8
   1d0ba:	b21a      	sxth	r2, r3
   1d0bc:	687b      	ldr	r3, [r7, #4]
   1d0be:	b29b      	uxth	r3, r3
   1d0c0:	0a1b      	lsrs	r3, r3, #8
   1d0c2:	b29b      	uxth	r3, r3
   1d0c4:	b21b      	sxth	r3, r3
   1d0c6:	4313      	orrs	r3, r2
   1d0c8:	b21b      	sxth	r3, r3
   1d0ca:	b29a      	uxth	r2, r3
   1d0cc:	2310      	movs	r3, #16
   1d0ce:	18fb      	adds	r3, r7, r3
   1d0d0:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   1d0d2:	4b25      	ldr	r3, [pc, #148]	; (1d168 <ConnectNetwork+0xfc>)
   1d0d4:	681b      	ldr	r3, [r3, #0]
   1d0d6:	001a      	movs	r2, r3
   1d0d8:	2310      	movs	r3, #16
   1d0da:	18fb      	adds	r3, r7, r3
   1d0dc:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   1d0de:	68fb      	ldr	r3, [r7, #12]
   1d0e0:	681b      	ldr	r3, [r3, #0]
   1d0e2:	2b00      	cmp	r3, #0
   1d0e4:	da0a      	bge.n	1d0fc <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1d0e6:	683b      	ldr	r3, [r7, #0]
   1d0e8:	b2db      	uxtb	r3, r3
   1d0ea:	001a      	movs	r2, r3
   1d0ec:	2101      	movs	r1, #1
   1d0ee:	2002      	movs	r0, #2
   1d0f0:	4b1e      	ldr	r3, [pc, #120]	; (1d16c <ConnectNetwork+0x100>)
   1d0f2:	4798      	blx	r3
   1d0f4:	0003      	movs	r3, r0
   1d0f6:	001a      	movs	r2, r3
   1d0f8:	68fb      	ldr	r3, [r7, #12]
   1d0fa:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1d0fc:	68fb      	ldr	r3, [r7, #12]
   1d0fe:	681b      	ldr	r3, [r3, #0]
   1d100:	3301      	adds	r3, #1
   1d102:	d108      	bne.n	1d116 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   1d104:	68fb      	ldr	r3, [r7, #12]
   1d106:	681b      	ldr	r3, [r3, #0]
   1d108:	b25b      	sxtb	r3, r3
   1d10a:	0018      	movs	r0, r3
   1d10c:	4b18      	ldr	r3, [pc, #96]	; (1d170 <ConnectNetwork+0x104>)
   1d10e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1d110:	2309      	movs	r3, #9
   1d112:	425b      	negs	r3, r3
   1d114:	e01c      	b.n	1d150 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   1d116:	68fb      	ldr	r3, [r7, #12]
   1d118:	681b      	ldr	r3, [r3, #0]
   1d11a:	b25b      	sxtb	r3, r3
   1d11c:	2210      	movs	r2, #16
   1d11e:	18b9      	adds	r1, r7, r2
   1d120:	2210      	movs	r2, #16
   1d122:	0018      	movs	r0, r3
   1d124:	4b13      	ldr	r3, [pc, #76]	; (1d174 <ConnectNetwork+0x108>)
   1d126:	4798      	blx	r3
   1d128:	1e03      	subs	r3, r0, #0
   1d12a:	d002      	beq.n	1d132 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   1d12c:	2309      	movs	r3, #9
   1d12e:	425b      	negs	r3, r3
   1d130:	e00e      	b.n	1d150 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   1d132:	4b11      	ldr	r3, [pc, #68]	; (1d178 <ConnectNetwork+0x10c>)
   1d134:	2200      	movs	r2, #0
   1d136:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   1d138:	e002      	b.n	1d140 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   1d13a:	2000      	movs	r0, #0
   1d13c:	4b09      	ldr	r3, [pc, #36]	; (1d164 <ConnectNetwork+0xf8>)
   1d13e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   1d140:	4b0d      	ldr	r3, [pc, #52]	; (1d178 <ConnectNetwork+0x10c>)
   1d142:	781b      	ldrb	r3, [r3, #0]
   1d144:	2201      	movs	r2, #1
   1d146:	4053      	eors	r3, r2
   1d148:	b2db      	uxtb	r3, r3
   1d14a:	2b00      	cmp	r3, #0
   1d14c:	d1f5      	bne.n	1d13a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   1d14e:	2300      	movs	r3, #0
   1d150:	0018      	movs	r0, r3
   1d152:	46bd      	mov	sp, r7
   1d154:	b008      	add	sp, #32
   1d156:	bd80      	pop	{r7, pc}
   1d158:	200043b4 	.word	0x200043b4
   1d15c:	200044c0 	.word	0x200044c0
   1d160:	00013935 	.word	0x00013935
   1d164:	0000fab5 	.word	0x0000fab5
   1d168:	200043ac 	.word	0x200043ac
   1d16c:	000130e1 	.word	0x000130e1
   1d170:	000136ed 	.word	0x000136ed
   1d174:	000132f5 	.word	0x000132f5
   1d178:	200043b5 	.word	0x200043b5

0001d17c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   1d17c:	b580      	push	{r7, lr}
   1d17e:	b084      	sub	sp, #16
   1d180:	af00      	add	r7, sp, #0
   1d182:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   1d184:	687b      	ldr	r3, [r7, #4]
   1d186:	2b00      	cmp	r3, #0
   1d188:	d022      	beq.n	1d1d0 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1d18a:	2300      	movs	r3, #0
   1d18c:	60fb      	str	r3, [r7, #12]
   1d18e:	e01b      	b.n	1d1c8 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1d190:	4a11      	ldr	r2, [pc, #68]	; (1d1d8 <allocateClient+0x5c>)
   1d192:	68fb      	ldr	r3, [r7, #12]
   1d194:	2164      	movs	r1, #100	; 0x64
   1d196:	434b      	muls	r3, r1
   1d198:	18d3      	adds	r3, r2, r3
   1d19a:	3360      	adds	r3, #96	; 0x60
   1d19c:	681b      	ldr	r3, [r3, #0]
   1d19e:	2b00      	cmp	r3, #0
   1d1a0:	d10f      	bne.n	1d1c2 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   1d1a2:	4a0d      	ldr	r2, [pc, #52]	; (1d1d8 <allocateClient+0x5c>)
   1d1a4:	68fb      	ldr	r3, [r7, #12]
   1d1a6:	2164      	movs	r1, #100	; 0x64
   1d1a8:	434b      	muls	r3, r1
   1d1aa:	18d3      	adds	r3, r2, r3
   1d1ac:	3360      	adds	r3, #96	; 0x60
   1d1ae:	687a      	ldr	r2, [r7, #4]
   1d1b0:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   1d1b2:	68fb      	ldr	r3, [r7, #12]
   1d1b4:	2264      	movs	r2, #100	; 0x64
   1d1b6:	435a      	muls	r2, r3
   1d1b8:	4b07      	ldr	r3, [pc, #28]	; (1d1d8 <allocateClient+0x5c>)
   1d1ba:	18d2      	adds	r2, r2, r3
   1d1bc:	687b      	ldr	r3, [r7, #4]
   1d1be:	61da      	str	r2, [r3, #28]
			return;
   1d1c0:	e007      	b.n	1d1d2 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1d1c2:	68fb      	ldr	r3, [r7, #12]
   1d1c4:	3301      	adds	r3, #1
   1d1c6:	60fb      	str	r3, [r7, #12]
   1d1c8:	68fb      	ldr	r3, [r7, #12]
   1d1ca:	2b06      	cmp	r3, #6
   1d1cc:	d9e0      	bls.n	1d190 <allocateClient+0x14>
   1d1ce:	e000      	b.n	1d1d2 <allocateClient+0x56>
		return;
   1d1d0:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   1d1d2:	46bd      	mov	sp, r7
   1d1d4:	b004      	add	sp, #16
   1d1d6:	bd80      	pop	{r7, pc}
   1d1d8:	200044c4 	.word	0x200044c4

0001d1dc <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   1d1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1de:	b089      	sub	sp, #36	; 0x24
   1d1e0:	af04      	add	r7, sp, #16
   1d1e2:	6078      	str	r0, [r7, #4]
   1d1e4:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   1d1e6:	687b      	ldr	r3, [r7, #4]
   1d1e8:	2b00      	cmp	r3, #0
   1d1ea:	d00a      	beq.n	1d202 <mqtt_init+0x26>
   1d1ec:	683b      	ldr	r3, [r7, #0]
   1d1ee:	2b00      	cmp	r3, #0
   1d1f0:	d007      	beq.n	1d202 <mqtt_init+0x26>
   1d1f2:	683b      	ldr	r3, [r7, #0]
   1d1f4:	691b      	ldr	r3, [r3, #16]
   1d1f6:	2b00      	cmp	r3, #0
   1d1f8:	d003      	beq.n	1d202 <mqtt_init+0x26>
   1d1fa:	683b      	ldr	r3, [r7, #0]
   1d1fc:	689b      	ldr	r3, [r3, #8]
   1d1fe:	2b00      	cmp	r3, #0
   1d200:	d102      	bne.n	1d208 <mqtt_init+0x2c>
		return FAILURE;
   1d202:	2301      	movs	r3, #1
   1d204:	425b      	negs	r3, r3
   1d206:	e034      	b.n	1d272 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   1d208:	683b      	ldr	r3, [r7, #0]
   1d20a:	889b      	ldrh	r3, [r3, #4]
   1d20c:	001a      	movs	r2, r3
   1d20e:	23fa      	movs	r3, #250	; 0xfa
   1d210:	009b      	lsls	r3, r3, #2
   1d212:	4353      	muls	r3, r2
   1d214:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   1d216:	687b      	ldr	r3, [r7, #4]
   1d218:	3320      	adds	r3, #32
   1d21a:	0018      	movs	r0, r3
   1d21c:	4b17      	ldr	r3, [pc, #92]	; (1d27c <mqtt_init+0xa0>)
   1d21e:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1d220:	687b      	ldr	r3, [r7, #4]
   1d222:	3304      	adds	r3, #4
   1d224:	6839      	ldr	r1, [r7, #0]
   1d226:	2218      	movs	r2, #24
   1d228:	0018      	movs	r0, r3
   1d22a:	4b15      	ldr	r3, [pc, #84]	; (1d280 <mqtt_init+0xa4>)
   1d22c:	4798      	blx	r3
	allocateClient(module);
   1d22e:	687b      	ldr	r3, [r7, #4]
   1d230:	0018      	movs	r0, r3
   1d232:	4b14      	ldr	r3, [pc, #80]	; (1d284 <mqtt_init+0xa8>)
   1d234:	4798      	blx	r3
	
	if(module->client)
   1d236:	687b      	ldr	r3, [r7, #4]
   1d238:	69db      	ldr	r3, [r3, #28]
   1d23a:	2b00      	cmp	r3, #0
   1d23c:	d017      	beq.n	1d26e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1d23e:	687b      	ldr	r3, [r7, #4]
   1d240:	69d8      	ldr	r0, [r3, #28]
   1d242:	687b      	ldr	r3, [r7, #4]
   1d244:	3320      	adds	r3, #32
   1d246:	001c      	movs	r4, r3
   1d248:	683b      	ldr	r3, [r7, #0]
   1d24a:	691e      	ldr	r6, [r3, #16]
   1d24c:	683b      	ldr	r3, [r7, #0]
   1d24e:	695a      	ldr	r2, [r3, #20]
   1d250:	683b      	ldr	r3, [r7, #0]
   1d252:	6899      	ldr	r1, [r3, #8]
   1d254:	683b      	ldr	r3, [r7, #0]
   1d256:	68db      	ldr	r3, [r3, #12]
   1d258:	68fd      	ldr	r5, [r7, #12]
   1d25a:	9302      	str	r3, [sp, #8]
   1d25c:	9101      	str	r1, [sp, #4]
   1d25e:	9200      	str	r2, [sp, #0]
   1d260:	0033      	movs	r3, r6
   1d262:	002a      	movs	r2, r5
   1d264:	0021      	movs	r1, r4
   1d266:	4c08      	ldr	r4, [pc, #32]	; (1d288 <mqtt_init+0xac>)
   1d268:	47a0      	blx	r4
		return SUCCESS;
   1d26a:	2300      	movs	r3, #0
   1d26c:	e001      	b.n	1d272 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   1d26e:	2301      	movs	r3, #1
   1d270:	425b      	negs	r3, r3
}
   1d272:	0018      	movs	r0, r3
   1d274:	46bd      	mov	sp, r7
   1d276:	b005      	add	sp, #20
   1d278:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d27a:	46c0      	nop			; (mov r8, r8)
   1d27c:	0001d035 	.word	0x0001d035
   1d280:	00022d85 	.word	0x00022d85
   1d284:	0001d17d 	.word	0x0001d17d
   1d288:	0001c0ad 	.word	0x0001c0ad

0001d28c <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   1d28c:	b580      	push	{r7, lr}
   1d28e:	b082      	sub	sp, #8
   1d290:	af00      	add	r7, sp, #0
   1d292:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   1d294:	687b      	ldr	r3, [r7, #4]
   1d296:	4a0c      	ldr	r2, [pc, #48]	; (1d2c8 <mqtt_get_config_defaults+0x3c>)
   1d298:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1d29a:	687b      	ldr	r3, [r7, #4]
   1d29c:	2200      	movs	r2, #0
   1d29e:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   1d2a0:	687b      	ldr	r3, [r7, #4]
   1d2a2:	223c      	movs	r2, #60	; 0x3c
   1d2a4:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   1d2a6:	687b      	ldr	r3, [r7, #4]
   1d2a8:	2200      	movs	r2, #0
   1d2aa:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   1d2ac:	687b      	ldr	r3, [r7, #4]
   1d2ae:	2200      	movs	r2, #0
   1d2b0:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   1d2b2:	687b      	ldr	r3, [r7, #4]
   1d2b4:	2200      	movs	r2, #0
   1d2b6:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   1d2b8:	687b      	ldr	r3, [r7, #4]
   1d2ba:	2200      	movs	r2, #0
   1d2bc:	615a      	str	r2, [r3, #20]
}
   1d2be:	46c0      	nop			; (mov r8, r8)
   1d2c0:	46bd      	mov	sp, r7
   1d2c2:	b002      	add	sp, #8
   1d2c4:	bd80      	pop	{r7, pc}
   1d2c6:	46c0      	nop			; (mov r8, r8)
   1d2c8:	0000075b 	.word	0x0000075b

0001d2cc <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   1d2cc:	b580      	push	{r7, lr}
   1d2ce:	b082      	sub	sp, #8
   1d2d0:	af00      	add	r7, sp, #0
   1d2d2:	6078      	str	r0, [r7, #4]
   1d2d4:	6039      	str	r1, [r7, #0]
	if(module)
   1d2d6:	687b      	ldr	r3, [r7, #4]
   1d2d8:	2b00      	cmp	r3, #0
   1d2da:	d004      	beq.n	1d2e6 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   1d2dc:	687b      	ldr	r3, [r7, #4]
   1d2de:	683a      	ldr	r2, [r7, #0]
   1d2e0:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   1d2e2:	2300      	movs	r3, #0
   1d2e4:	e001      	b.n	1d2ea <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   1d2e6:	2301      	movs	r3, #1
   1d2e8:	425b      	negs	r3, r3
}
   1d2ea:	0018      	movs	r0, r3
   1d2ec:	46bd      	mov	sp, r7
   1d2ee:	b002      	add	sp, #8
   1d2f0:	bd80      	pop	{r7, pc}
	...

0001d2f4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1d2f4:	b580      	push	{r7, lr}
   1d2f6:	b082      	sub	sp, #8
   1d2f8:	af00      	add	r7, sp, #0
   1d2fa:	603a      	str	r2, [r7, #0]
   1d2fc:	1dfb      	adds	r3, r7, #7
   1d2fe:	1c02      	adds	r2, r0, #0
   1d300:	701a      	strb	r2, [r3, #0]
   1d302:	1dbb      	adds	r3, r7, #6
   1d304:	1c0a      	adds	r2, r1, #0
   1d306:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   1d308:	683a      	ldr	r2, [r7, #0]
   1d30a:	1dbb      	adds	r3, r7, #6
   1d30c:	7819      	ldrb	r1, [r3, #0]
   1d30e:	1dfb      	adds	r3, r7, #7
   1d310:	781b      	ldrb	r3, [r3, #0]
   1d312:	b25b      	sxtb	r3, r3
   1d314:	0018      	movs	r0, r3
   1d316:	4b03      	ldr	r3, [pc, #12]	; (1d324 <mqtt_socket_event_handler+0x30>)
   1d318:	4798      	blx	r3
}
   1d31a:	46c0      	nop			; (mov r8, r8)
   1d31c:	46bd      	mov	sp, r7
   1d31e:	b002      	add	sp, #8
   1d320:	bd80      	pop	{r7, pc}
   1d322:	46c0      	nop			; (mov r8, r8)
   1d324:	0001cd71 	.word	0x0001cd71

0001d328 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   1d328:	b580      	push	{r7, lr}
   1d32a:	b082      	sub	sp, #8
   1d32c:	af00      	add	r7, sp, #0
   1d32e:	6078      	str	r0, [r7, #4]
   1d330:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   1d332:	683a      	ldr	r2, [r7, #0]
   1d334:	687b      	ldr	r3, [r7, #4]
   1d336:	0011      	movs	r1, r2
   1d338:	0018      	movs	r0, r3
   1d33a:	4b03      	ldr	r3, [pc, #12]	; (1d348 <mqtt_socket_resolve_handler+0x20>)
   1d33c:	4798      	blx	r3
}
   1d33e:	46c0      	nop			; (mov r8, r8)
   1d340:	46bd      	mov	sp, r7
   1d342:	b002      	add	sp, #8
   1d344:	bd80      	pop	{r7, pc}
   1d346:	46c0      	nop			; (mov r8, r8)
   1d348:	0001cd21 	.word	0x0001cd21

0001d34c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1d34c:	b590      	push	{r4, r7, lr}
   1d34e:	b085      	sub	sp, #20
   1d350:	af00      	add	r7, sp, #0
   1d352:	6078      	str	r0, [r7, #4]
   1d354:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   1d356:	687b      	ldr	r3, [r7, #4]
   1d358:	3320      	adds	r3, #32
   1d35a:	0018      	movs	r0, r3
   1d35c:	687b      	ldr	r3, [r7, #4]
   1d35e:	889b      	ldrh	r3, [r3, #4]
   1d360:	001a      	movs	r2, r3
   1d362:	687b      	ldr	r3, [r7, #4]
   1d364:	799b      	ldrb	r3, [r3, #6]
   1d366:	6839      	ldr	r1, [r7, #0]
   1d368:	4c09      	ldr	r4, [pc, #36]	; (1d390 <mqtt_connect+0x44>)
   1d36a:	47a0      	blx	r4
   1d36c:	0003      	movs	r3, r0
   1d36e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   1d370:	687b      	ldr	r3, [r7, #4]
   1d372:	681b      	ldr	r3, [r3, #0]
   1d374:	2b00      	cmp	r3, #0
   1d376:	d006      	beq.n	1d386 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   1d378:	687b      	ldr	r3, [r7, #4]
   1d37a:	681b      	ldr	r3, [r3, #0]
   1d37c:	220c      	movs	r2, #12
   1d37e:	18ba      	adds	r2, r7, r2
   1d380:	6878      	ldr	r0, [r7, #4]
   1d382:	2100      	movs	r1, #0
   1d384:	4798      	blx	r3
	return connResult.sock_connected.result;
   1d386:	68fb      	ldr	r3, [r7, #12]
}
   1d388:	0018      	movs	r0, r3
   1d38a:	46bd      	mov	sp, r7
   1d38c:	b005      	add	sp, #20
   1d38e:	bd90      	pop	{r4, r7, pc}
   1d390:	0001d06d 	.word	0x0001d06d

0001d394 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   1d394:	b580      	push	{r7, lr}
   1d396:	b09c      	sub	sp, #112	; 0x70
   1d398:	af00      	add	r7, sp, #0
   1d39a:	60f8      	str	r0, [r7, #12]
   1d39c:	607a      	str	r2, [r7, #4]
   1d39e:	603b      	str	r3, [r7, #0]
   1d3a0:	230b      	movs	r3, #11
   1d3a2:	18fb      	adds	r3, r7, r3
   1d3a4:	1c0a      	adds	r2, r1, #0
   1d3a6:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   1d3a8:	2310      	movs	r3, #16
   1d3aa:	18fa      	adds	r2, r7, r3
   1d3ac:	4b31      	ldr	r3, [pc, #196]	; (1d474 <mqtt_connect_broker+0xe0>)
   1d3ae:	0010      	movs	r0, r2
   1d3b0:	0019      	movs	r1, r3
   1d3b2:	2358      	movs	r3, #88	; 0x58
   1d3b4:	001a      	movs	r2, r3
   1d3b6:	4b30      	ldr	r3, [pc, #192]	; (1d478 <mqtt_connect_broker+0xe4>)
   1d3b8:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   1d3ba:	2310      	movs	r3, #16
   1d3bc:	18fb      	adds	r3, r7, r3
   1d3be:	2204      	movs	r2, #4
   1d3c0:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   1d3c2:	2310      	movs	r3, #16
   1d3c4:	18fb      	adds	r3, r7, r3
   1d3c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1d3c8:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   1d3ca:	2310      	movs	r3, #16
   1d3cc:	18fb      	adds	r3, r7, r3
   1d3ce:	687a      	ldr	r2, [r7, #4]
   1d3d0:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1d3d2:	2310      	movs	r3, #16
   1d3d4:	18fb      	adds	r3, r7, r3
   1d3d6:	683a      	ldr	r2, [r7, #0]
   1d3d8:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1d3da:	2310      	movs	r3, #16
   1d3dc:	18fb      	adds	r3, r7, r3
   1d3de:	220b      	movs	r2, #11
   1d3e0:	18ba      	adds	r2, r7, r2
   1d3e2:	7812      	ldrb	r2, [r2, #0]
   1d3e4:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   1d3e6:	2310      	movs	r3, #16
   1d3e8:	18fb      	adds	r3, r7, r3
   1d3ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1d3ec:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   1d3ee:	2310      	movs	r3, #16
   1d3f0:	18fb      	adds	r3, r7, r3
   1d3f2:	2280      	movs	r2, #128	; 0x80
   1d3f4:	18ba      	adds	r2, r7, r2
   1d3f6:	6812      	ldr	r2, [r2, #0]
   1d3f8:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   1d3fa:	2310      	movs	r3, #16
   1d3fc:	18fb      	adds	r3, r7, r3
   1d3fe:	228c      	movs	r2, #140	; 0x8c
   1d400:	18ba      	adds	r2, r7, r2
   1d402:	213c      	movs	r1, #60	; 0x3c
   1d404:	7812      	ldrb	r2, [r2, #0]
   1d406:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   1d408:	2310      	movs	r3, #16
   1d40a:	18fb      	adds	r3, r7, r3
   1d40c:	2288      	movs	r2, #136	; 0x88
   1d40e:	18ba      	adds	r2, r7, r2
   1d410:	213d      	movs	r1, #61	; 0x3d
   1d412:	7812      	ldrb	r2, [r2, #0]
   1d414:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   1d416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1d418:	2b00      	cmp	r3, #0
   1d41a:	d008      	beq.n	1d42e <mqtt_connect_broker+0x9a>
   1d41c:	2380      	movs	r3, #128	; 0x80
   1d41e:	18fb      	adds	r3, r7, r3
   1d420:	681b      	ldr	r3, [r3, #0]
   1d422:	2b00      	cmp	r3, #0
   1d424:	d003      	beq.n	1d42e <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   1d426:	2310      	movs	r3, #16
   1d428:	18fb      	adds	r3, r7, r3
   1d42a:	2201      	movs	r2, #1
   1d42c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   1d42e:	68fb      	ldr	r3, [r7, #12]
   1d430:	69db      	ldr	r3, [r3, #28]
   1d432:	2210      	movs	r2, #16
   1d434:	18ba      	adds	r2, r7, r2
   1d436:	0011      	movs	r1, r2
   1d438:	0018      	movs	r0, r3
   1d43a:	4b10      	ldr	r3, [pc, #64]	; (1d47c <mqtt_connect_broker+0xe8>)
   1d43c:	4798      	blx	r3
   1d43e:	0003      	movs	r3, r0
   1d440:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   1d442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1d444:	b2da      	uxtb	r2, r3
   1d446:	2368      	movs	r3, #104	; 0x68
   1d448:	18fb      	adds	r3, r7, r3
   1d44a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   1d44c:	68fb      	ldr	r3, [r7, #12]
   1d44e:	681b      	ldr	r3, [r3, #0]
   1d450:	2b00      	cmp	r3, #0
   1d452:	d006      	beq.n	1d462 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1d454:	68fb      	ldr	r3, [r7, #12]
   1d456:	681b      	ldr	r3, [r3, #0]
   1d458:	2268      	movs	r2, #104	; 0x68
   1d45a:	18ba      	adds	r2, r7, r2
   1d45c:	68f8      	ldr	r0, [r7, #12]
   1d45e:	2101      	movs	r1, #1
   1d460:	4798      	blx	r3
	
	module->isConnected = true;
   1d462:	68fb      	ldr	r3, [r7, #12]
   1d464:	2234      	movs	r2, #52	; 0x34
   1d466:	2101      	movs	r1, #1
   1d468:	5499      	strb	r1, [r3, r2]
	return rc;
   1d46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   1d46c:	0018      	movs	r0, r3
   1d46e:	46bd      	mov	sp, r7
   1d470:	b01c      	add	sp, #112	; 0x70
   1d472:	bd80      	pop	{r7, pc}
   1d474:	00028990 	.word	0x00028990
   1d478:	00022d85 	.word	0x00022d85
   1d47c:	0001c7bd 	.word	0x0001c7bd

0001d480 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   1d480:	b580      	push	{r7, lr}
   1d482:	b084      	sub	sp, #16
   1d484:	af00      	add	r7, sp, #0
   1d486:	6078      	str	r0, [r7, #4]
   1d488:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1d48a:	687b      	ldr	r3, [r7, #4]
   1d48c:	69db      	ldr	r3, [r3, #28]
   1d48e:	0018      	movs	r0, r3
   1d490:	4b0c      	ldr	r3, [pc, #48]	; (1d4c4 <mqtt_disconnect+0x44>)
   1d492:	4798      	blx	r3
   1d494:	0003      	movs	r3, r0
   1d496:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   1d498:	68fb      	ldr	r3, [r7, #12]
   1d49a:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   1d49c:	687b      	ldr	r3, [r7, #4]
   1d49e:	681b      	ldr	r3, [r3, #0]
   1d4a0:	2b00      	cmp	r3, #0
   1d4a2:	d006      	beq.n	1d4b2 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   1d4a4:	687b      	ldr	r3, [r7, #4]
   1d4a6:	681b      	ldr	r3, [r3, #0]
   1d4a8:	2208      	movs	r2, #8
   1d4aa:	18ba      	adds	r2, r7, r2
   1d4ac:	6878      	ldr	r0, [r7, #4]
   1d4ae:	2105      	movs	r1, #5
   1d4b0:	4798      	blx	r3
	
	module->isConnected = false;
   1d4b2:	687b      	ldr	r3, [r7, #4]
   1d4b4:	2234      	movs	r2, #52	; 0x34
   1d4b6:	2100      	movs	r1, #0
   1d4b8:	5499      	strb	r1, [r3, r2]
	return rc;
   1d4ba:	68fb      	ldr	r3, [r7, #12]
}
   1d4bc:	0018      	movs	r0, r3
   1d4be:	46bd      	mov	sp, r7
   1d4c0:	b004      	add	sp, #16
   1d4c2:	bd80      	pop	{r7, pc}
   1d4c4:	0001cc49 	.word	0x0001cc49

0001d4c8 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   1d4c8:	b580      	push	{r7, lr}
   1d4ca:	b08a      	sub	sp, #40	; 0x28
   1d4cc:	af00      	add	r7, sp, #0
   1d4ce:	60f8      	str	r0, [r7, #12]
   1d4d0:	60b9      	str	r1, [r7, #8]
   1d4d2:	607a      	str	r2, [r7, #4]
   1d4d4:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1d4d6:	2314      	movs	r3, #20
   1d4d8:	18fb      	adds	r3, r7, r3
   1d4da:	2230      	movs	r2, #48	; 0x30
   1d4dc:	18ba      	adds	r2, r7, r2
   1d4de:	7812      	ldrb	r2, [r2, #0]
   1d4e0:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   1d4e2:	2314      	movs	r3, #20
   1d4e4:	18fb      	adds	r3, r7, r3
   1d4e6:	687a      	ldr	r2, [r7, #4]
   1d4e8:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   1d4ea:	2314      	movs	r3, #20
   1d4ec:	18fb      	adds	r3, r7, r3
   1d4ee:	683a      	ldr	r2, [r7, #0]
   1d4f0:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   1d4f2:	2314      	movs	r3, #20
   1d4f4:	18fb      	adds	r3, r7, r3
   1d4f6:	2234      	movs	r2, #52	; 0x34
   1d4f8:	18ba      	adds	r2, r7, r2
   1d4fa:	7812      	ldrb	r2, [r2, #0]
   1d4fc:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   1d4fe:	68fb      	ldr	r3, [r7, #12]
   1d500:	69db      	ldr	r3, [r3, #28]
   1d502:	2214      	movs	r2, #20
   1d504:	18ba      	adds	r2, r7, r2
   1d506:	68b9      	ldr	r1, [r7, #8]
   1d508:	0018      	movs	r0, r3
   1d50a:	4b09      	ldr	r3, [pc, #36]	; (1d530 <mqtt_publish+0x68>)
   1d50c:	4798      	blx	r3
   1d50e:	0003      	movs	r3, r0
   1d510:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   1d512:	68fb      	ldr	r3, [r7, #12]
   1d514:	681b      	ldr	r3, [r3, #0]
   1d516:	2b00      	cmp	r3, #0
   1d518:	d005      	beq.n	1d526 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   1d51a:	68fb      	ldr	r3, [r7, #12]
   1d51c:	681b      	ldr	r3, [r3, #0]
   1d51e:	68f8      	ldr	r0, [r7, #12]
   1d520:	2200      	movs	r2, #0
   1d522:	2102      	movs	r1, #2
   1d524:	4798      	blx	r3
	
	return rc;
   1d526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d528:	0018      	movs	r0, r3
   1d52a:	46bd      	mov	sp, r7
   1d52c:	b00a      	add	sp, #40	; 0x28
   1d52e:	bd80      	pop	{r7, pc}
   1d530:	0001ca89 	.word	0x0001ca89

0001d534 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1d534:	b590      	push	{r4, r7, lr}
   1d536:	b087      	sub	sp, #28
   1d538:	af00      	add	r7, sp, #0
   1d53a:	60f8      	str	r0, [r7, #12]
   1d53c:	60b9      	str	r1, [r7, #8]
   1d53e:	603b      	str	r3, [r7, #0]
   1d540:	1dfb      	adds	r3, r7, #7
   1d542:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   1d544:	68fb      	ldr	r3, [r7, #12]
   1d546:	69d8      	ldr	r0, [r3, #28]
   1d548:	683c      	ldr	r4, [r7, #0]
   1d54a:	1dfb      	adds	r3, r7, #7
   1d54c:	781a      	ldrb	r2, [r3, #0]
   1d54e:	68b9      	ldr	r1, [r7, #8]
   1d550:	0023      	movs	r3, r4
   1d552:	4c09      	ldr	r4, [pc, #36]	; (1d578 <mqtt_subscribe+0x44>)
   1d554:	47a0      	blx	r4
   1d556:	0003      	movs	r3, r0
   1d558:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   1d55a:	68fb      	ldr	r3, [r7, #12]
   1d55c:	681b      	ldr	r3, [r3, #0]
   1d55e:	2b00      	cmp	r3, #0
   1d560:	d005      	beq.n	1d56e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1d562:	68fb      	ldr	r3, [r7, #12]
   1d564:	681b      	ldr	r3, [r3, #0]
   1d566:	68f8      	ldr	r0, [r7, #12]
   1d568:	2200      	movs	r2, #0
   1d56a:	2103      	movs	r1, #3
   1d56c:	4798      	blx	r3
	
	return rc;
   1d56e:	697b      	ldr	r3, [r7, #20]
}
   1d570:	0018      	movs	r0, r3
   1d572:	46bd      	mov	sp, r7
   1d574:	b007      	add	sp, #28
   1d576:	bd90      	pop	{r4, r7, pc}
   1d578:	0001c8fd 	.word	0x0001c8fd

0001d57c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   1d57c:	b580      	push	{r7, lr}
   1d57e:	b082      	sub	sp, #8
   1d580:	af00      	add	r7, sp, #0
   1d582:	6078      	str	r0, [r7, #4]
   1d584:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   1d586:	687b      	ldr	r3, [r7, #4]
   1d588:	69db      	ldr	r3, [r3, #28]
   1d58a:	683a      	ldr	r2, [r7, #0]
   1d58c:	0011      	movs	r1, r2
   1d58e:	0018      	movs	r0, r3
   1d590:	4b03      	ldr	r3, [pc, #12]	; (1d5a0 <mqtt_yield+0x24>)
   1d592:	4798      	blx	r3
   1d594:	0003      	movs	r3, r0
   1d596:	0018      	movs	r0, r3
   1d598:	46bd      	mov	sp, r7
   1d59a:	b002      	add	sp, #8
   1d59c:	bd80      	pop	{r7, pc}
   1d59e:	46c0      	nop			; (mov r8, r8)
   1d5a0:	0001c705 	.word	0x0001c705

0001d5a4 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1d5a4:	b590      	push	{r4, r7, lr}
   1d5a6:	b085      	sub	sp, #20
   1d5a8:	af00      	add	r7, sp, #0
   1d5aa:	6078      	str	r0, [r7, #4]
	int len = 0;
   1d5ac:	2300      	movs	r3, #0
   1d5ae:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   1d5b0:	687b      	ldr	r3, [r7, #4]
   1d5b2:	7a1b      	ldrb	r3, [r3, #8]
   1d5b4:	2b03      	cmp	r3, #3
   1d5b6:	d102      	bne.n	1d5be <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   1d5b8:	230c      	movs	r3, #12
   1d5ba:	60fb      	str	r3, [r7, #12]
   1d5bc:	e005      	b.n	1d5ca <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   1d5be:	687b      	ldr	r3, [r7, #4]
   1d5c0:	7a1b      	ldrb	r3, [r3, #8]
   1d5c2:	2b04      	cmp	r3, #4
   1d5c4:	d101      	bne.n	1d5ca <MQTTSerialize_connectLength+0x26>
		len = 10;
   1d5c6:	230a      	movs	r3, #10
   1d5c8:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   1d5ca:	687b      	ldr	r3, [r7, #4]
   1d5cc:	68d8      	ldr	r0, [r3, #12]
   1d5ce:	6919      	ldr	r1, [r3, #16]
   1d5d0:	695a      	ldr	r2, [r3, #20]
   1d5d2:	4b25      	ldr	r3, [pc, #148]	; (1d668 <MQTTSerialize_connectLength+0xc4>)
   1d5d4:	4798      	blx	r3
   1d5d6:	0003      	movs	r3, r0
   1d5d8:	3302      	adds	r3, #2
   1d5da:	68fa      	ldr	r2, [r7, #12]
   1d5dc:	18d3      	adds	r3, r2, r3
   1d5de:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   1d5e0:	687b      	ldr	r3, [r7, #4]
   1d5e2:	7edb      	ldrb	r3, [r3, #27]
   1d5e4:	2b00      	cmp	r3, #0
   1d5e6:	d013      	beq.n	1d610 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   1d5e8:	687b      	ldr	r3, [r7, #4]
   1d5ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1d5ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1d5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5f0:	4b1d      	ldr	r3, [pc, #116]	; (1d668 <MQTTSerialize_connectLength+0xc4>)
   1d5f2:	4798      	blx	r3
   1d5f4:	0003      	movs	r3, r0
   1d5f6:	1c9c      	adds	r4, r3, #2
   1d5f8:	687b      	ldr	r3, [r7, #4]
   1d5fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1d5fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1d5fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1d600:	4b19      	ldr	r3, [pc, #100]	; (1d668 <MQTTSerialize_connectLength+0xc4>)
   1d602:	4798      	blx	r3
   1d604:	0003      	movs	r3, r0
   1d606:	18e3      	adds	r3, r4, r3
   1d608:	3302      	adds	r3, #2
   1d60a:	68fa      	ldr	r2, [r7, #12]
   1d60c:	18d3      	adds	r3, r2, r3
   1d60e:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   1d610:	687b      	ldr	r3, [r7, #4]
   1d612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d614:	2b00      	cmp	r3, #0
   1d616:	d103      	bne.n	1d620 <MQTTSerialize_connectLength+0x7c>
   1d618:	687b      	ldr	r3, [r7, #4]
   1d61a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d61c:	2b00      	cmp	r3, #0
   1d61e:	d00a      	beq.n	1d636 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   1d620:	687b      	ldr	r3, [r7, #4]
   1d622:	6c18      	ldr	r0, [r3, #64]	; 0x40
   1d624:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1d626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d628:	4b0f      	ldr	r3, [pc, #60]	; (1d668 <MQTTSerialize_connectLength+0xc4>)
   1d62a:	4798      	blx	r3
   1d62c:	0003      	movs	r3, r0
   1d62e:	3302      	adds	r3, #2
   1d630:	68fa      	ldr	r2, [r7, #12]
   1d632:	18d3      	adds	r3, r2, r3
   1d634:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   1d636:	687b      	ldr	r3, [r7, #4]
   1d638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d63a:	2b00      	cmp	r3, #0
   1d63c:	d103      	bne.n	1d646 <MQTTSerialize_connectLength+0xa2>
   1d63e:	687b      	ldr	r3, [r7, #4]
   1d640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d642:	2b00      	cmp	r3, #0
   1d644:	d00a      	beq.n	1d65c <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   1d646:	687b      	ldr	r3, [r7, #4]
   1d648:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   1d64a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1d64c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1d64e:	4b06      	ldr	r3, [pc, #24]	; (1d668 <MQTTSerialize_connectLength+0xc4>)
   1d650:	4798      	blx	r3
   1d652:	0003      	movs	r3, r0
   1d654:	3302      	adds	r3, #2
   1d656:	68fa      	ldr	r2, [r7, #12]
   1d658:	18d3      	adds	r3, r2, r3
   1d65a:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   1d65c:	68fb      	ldr	r3, [r7, #12]
}
   1d65e:	0018      	movs	r0, r3
   1d660:	46bd      	mov	sp, r7
   1d662:	b005      	add	sp, #20
   1d664:	bd90      	pop	{r4, r7, pc}
   1d666:	46c0      	nop			; (mov r8, r8)
   1d668:	0001e015 	.word	0x0001e015

0001d66c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   1d66c:	b590      	push	{r4, r7, lr}
   1d66e:	b08b      	sub	sp, #44	; 0x2c
   1d670:	af00      	add	r7, sp, #0
   1d672:	60f8      	str	r0, [r7, #12]
   1d674:	60b9      	str	r1, [r7, #8]
   1d676:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   1d678:	68fb      	ldr	r3, [r7, #12]
   1d67a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   1d67c:	2300      	movs	r3, #0
   1d67e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   1d680:	2300      	movs	r3, #0
   1d682:	617b      	str	r3, [r7, #20]
	int len = 0;
   1d684:	2300      	movs	r3, #0
   1d686:	623b      	str	r3, [r7, #32]
	int rc = -1;
   1d688:	2301      	movs	r3, #1
   1d68a:	425b      	negs	r3, r3
   1d68c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1d68e:	687b      	ldr	r3, [r7, #4]
   1d690:	0018      	movs	r0, r3
   1d692:	4b8c      	ldr	r3, [pc, #560]	; (1d8c4 <MQTTSerialize_connect+0x258>)
   1d694:	4798      	blx	r3
   1d696:	0003      	movs	r3, r0
   1d698:	623b      	str	r3, [r7, #32]
   1d69a:	6a3b      	ldr	r3, [r7, #32]
   1d69c:	0018      	movs	r0, r3
   1d69e:	4b8a      	ldr	r3, [pc, #552]	; (1d8c8 <MQTTSerialize_connect+0x25c>)
   1d6a0:	4798      	blx	r3
   1d6a2:	0002      	movs	r2, r0
   1d6a4:	68bb      	ldr	r3, [r7, #8]
   1d6a6:	429a      	cmp	r2, r3
   1d6a8:	dd03      	ble.n	1d6b2 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1d6aa:	2302      	movs	r3, #2
   1d6ac:	425b      	negs	r3, r3
   1d6ae:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1d6b0:	e103      	b.n	1d8ba <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   1d6b2:	2318      	movs	r3, #24
   1d6b4:	18fb      	adds	r3, r7, r3
   1d6b6:	2200      	movs	r2, #0
   1d6b8:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   1d6ba:	2318      	movs	r3, #24
   1d6bc:	18fb      	adds	r3, r7, r3
   1d6be:	781a      	ldrb	r2, [r3, #0]
   1d6c0:	210f      	movs	r1, #15
   1d6c2:	400a      	ands	r2, r1
   1d6c4:	1c11      	adds	r1, r2, #0
   1d6c6:	2210      	movs	r2, #16
   1d6c8:	430a      	orrs	r2, r1
   1d6ca:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1d6cc:	2318      	movs	r3, #24
   1d6ce:	18fb      	adds	r3, r7, r3
   1d6d0:	781a      	ldrb	r2, [r3, #0]
   1d6d2:	231c      	movs	r3, #28
   1d6d4:	18fb      	adds	r3, r7, r3
   1d6d6:	0011      	movs	r1, r2
   1d6d8:	0018      	movs	r0, r3
   1d6da:	4b7c      	ldr	r3, [pc, #496]	; (1d8cc <MQTTSerialize_connect+0x260>)
   1d6dc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1d6de:	69fb      	ldr	r3, [r7, #28]
   1d6e0:	6a3a      	ldr	r2, [r7, #32]
   1d6e2:	0011      	movs	r1, r2
   1d6e4:	0018      	movs	r0, r3
   1d6e6:	4b7a      	ldr	r3, [pc, #488]	; (1d8d0 <MQTTSerialize_connect+0x264>)
   1d6e8:	4798      	blx	r3
   1d6ea:	0002      	movs	r2, r0
   1d6ec:	69fb      	ldr	r3, [r7, #28]
   1d6ee:	189b      	adds	r3, r3, r2
   1d6f0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   1d6f2:	687b      	ldr	r3, [r7, #4]
   1d6f4:	7a1b      	ldrb	r3, [r3, #8]
   1d6f6:	2b04      	cmp	r3, #4
   1d6f8:	d10d      	bne.n	1d716 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   1d6fa:	4a76      	ldr	r2, [pc, #472]	; (1d8d4 <MQTTSerialize_connect+0x268>)
   1d6fc:	231c      	movs	r3, #28
   1d6fe:	18fb      	adds	r3, r7, r3
   1d700:	0011      	movs	r1, r2
   1d702:	0018      	movs	r0, r3
   1d704:	4b74      	ldr	r3, [pc, #464]	; (1d8d8 <MQTTSerialize_connect+0x26c>)
   1d706:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   1d708:	231c      	movs	r3, #28
   1d70a:	18fb      	adds	r3, r7, r3
   1d70c:	2104      	movs	r1, #4
   1d70e:	0018      	movs	r0, r3
   1d710:	4b6e      	ldr	r3, [pc, #440]	; (1d8cc <MQTTSerialize_connect+0x260>)
   1d712:	4798      	blx	r3
   1d714:	e00c      	b.n	1d730 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   1d716:	4a71      	ldr	r2, [pc, #452]	; (1d8dc <MQTTSerialize_connect+0x270>)
   1d718:	231c      	movs	r3, #28
   1d71a:	18fb      	adds	r3, r7, r3
   1d71c:	0011      	movs	r1, r2
   1d71e:	0018      	movs	r0, r3
   1d720:	4b6d      	ldr	r3, [pc, #436]	; (1d8d8 <MQTTSerialize_connect+0x26c>)
   1d722:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   1d724:	231c      	movs	r3, #28
   1d726:	18fb      	adds	r3, r7, r3
   1d728:	2103      	movs	r1, #3
   1d72a:	0018      	movs	r0, r3
   1d72c:	4b67      	ldr	r3, [pc, #412]	; (1d8cc <MQTTSerialize_connect+0x260>)
   1d72e:	4798      	blx	r3
	}

	flags.all = 0;
   1d730:	2314      	movs	r3, #20
   1d732:	18fb      	adds	r3, r7, r3
   1d734:	2200      	movs	r2, #0
   1d736:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   1d738:	687b      	ldr	r3, [r7, #4]
   1d73a:	7e9b      	ldrb	r3, [r3, #26]
   1d73c:	1c1a      	adds	r2, r3, #0
   1d73e:	2301      	movs	r3, #1
   1d740:	4013      	ands	r3, r2
   1d742:	b2da      	uxtb	r2, r3
   1d744:	2314      	movs	r3, #20
   1d746:	18fb      	adds	r3, r7, r3
   1d748:	2101      	movs	r1, #1
   1d74a:	400a      	ands	r2, r1
   1d74c:	1890      	adds	r0, r2, r2
   1d74e:	781a      	ldrb	r2, [r3, #0]
   1d750:	2102      	movs	r1, #2
   1d752:	438a      	bics	r2, r1
   1d754:	1c11      	adds	r1, r2, #0
   1d756:	1c02      	adds	r2, r0, #0
   1d758:	430a      	orrs	r2, r1
   1d75a:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   1d75c:	687b      	ldr	r3, [r7, #4]
   1d75e:	7edb      	ldrb	r3, [r3, #27]
   1d760:	1e5a      	subs	r2, r3, #1
   1d762:	4193      	sbcs	r3, r2
   1d764:	b2da      	uxtb	r2, r3
   1d766:	2314      	movs	r3, #20
   1d768:	18fb      	adds	r3, r7, r3
   1d76a:	2101      	movs	r1, #1
   1d76c:	400a      	ands	r2, r1
   1d76e:	0090      	lsls	r0, r2, #2
   1d770:	781a      	ldrb	r2, [r3, #0]
   1d772:	2104      	movs	r1, #4
   1d774:	438a      	bics	r2, r1
   1d776:	1c11      	adds	r1, r2, #0
   1d778:	1c02      	adds	r2, r0, #0
   1d77a:	430a      	orrs	r2, r1
   1d77c:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   1d77e:	2314      	movs	r3, #20
   1d780:	18fb      	adds	r3, r7, r3
   1d782:	781b      	ldrb	r3, [r3, #0]
   1d784:	2204      	movs	r2, #4
   1d786:	4013      	ands	r3, r2
   1d788:	b2db      	uxtb	r3, r3
   1d78a:	2b00      	cmp	r3, #0
   1d78c:	d025      	beq.n	1d7da <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   1d78e:	687b      	ldr	r3, [r7, #4]
   1d790:	223d      	movs	r2, #61	; 0x3d
   1d792:	5c9b      	ldrb	r3, [r3, r2]
   1d794:	1c1a      	adds	r2, r3, #0
   1d796:	2303      	movs	r3, #3
   1d798:	4013      	ands	r3, r2
   1d79a:	b2da      	uxtb	r2, r3
   1d79c:	2314      	movs	r3, #20
   1d79e:	18fb      	adds	r3, r7, r3
   1d7a0:	2103      	movs	r1, #3
   1d7a2:	400a      	ands	r2, r1
   1d7a4:	00d0      	lsls	r0, r2, #3
   1d7a6:	781a      	ldrb	r2, [r3, #0]
   1d7a8:	2118      	movs	r1, #24
   1d7aa:	438a      	bics	r2, r1
   1d7ac:	1c11      	adds	r1, r2, #0
   1d7ae:	1c02      	adds	r2, r0, #0
   1d7b0:	430a      	orrs	r2, r1
   1d7b2:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   1d7b4:	687b      	ldr	r3, [r7, #4]
   1d7b6:	223c      	movs	r2, #60	; 0x3c
   1d7b8:	5c9b      	ldrb	r3, [r3, r2]
   1d7ba:	1c1a      	adds	r2, r3, #0
   1d7bc:	2301      	movs	r3, #1
   1d7be:	4013      	ands	r3, r2
   1d7c0:	b2da      	uxtb	r2, r3
   1d7c2:	2314      	movs	r3, #20
   1d7c4:	18fb      	adds	r3, r7, r3
   1d7c6:	2101      	movs	r1, #1
   1d7c8:	400a      	ands	r2, r1
   1d7ca:	0150      	lsls	r0, r2, #5
   1d7cc:	781a      	ldrb	r2, [r3, #0]
   1d7ce:	2120      	movs	r1, #32
   1d7d0:	438a      	bics	r2, r1
   1d7d2:	1c11      	adds	r1, r2, #0
   1d7d4:	1c02      	adds	r2, r0, #0
   1d7d6:	430a      	orrs	r2, r1
   1d7d8:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   1d7da:	687b      	ldr	r3, [r7, #4]
   1d7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d7de:	2b00      	cmp	r3, #0
   1d7e0:	d103      	bne.n	1d7ea <MQTTSerialize_connect+0x17e>
   1d7e2:	687b      	ldr	r3, [r7, #4]
   1d7e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d7e6:	2b00      	cmp	r3, #0
   1d7e8:	d006      	beq.n	1d7f8 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   1d7ea:	2314      	movs	r3, #20
   1d7ec:	18fb      	adds	r3, r7, r3
   1d7ee:	781a      	ldrb	r2, [r3, #0]
   1d7f0:	2180      	movs	r1, #128	; 0x80
   1d7f2:	4249      	negs	r1, r1
   1d7f4:	430a      	orrs	r2, r1
   1d7f6:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   1d7f8:	687b      	ldr	r3, [r7, #4]
   1d7fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d7fc:	2b00      	cmp	r3, #0
   1d7fe:	d103      	bne.n	1d808 <MQTTSerialize_connect+0x19c>
   1d800:	687b      	ldr	r3, [r7, #4]
   1d802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d804:	2b00      	cmp	r3, #0
   1d806:	d005      	beq.n	1d814 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   1d808:	2314      	movs	r3, #20
   1d80a:	18fb      	adds	r3, r7, r3
   1d80c:	781a      	ldrb	r2, [r3, #0]
   1d80e:	2140      	movs	r1, #64	; 0x40
   1d810:	430a      	orrs	r2, r1
   1d812:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   1d814:	2314      	movs	r3, #20
   1d816:	18fb      	adds	r3, r7, r3
   1d818:	781a      	ldrb	r2, [r3, #0]
   1d81a:	231c      	movs	r3, #28
   1d81c:	18fb      	adds	r3, r7, r3
   1d81e:	0011      	movs	r1, r2
   1d820:	0018      	movs	r0, r3
   1d822:	4b2a      	ldr	r3, [pc, #168]	; (1d8cc <MQTTSerialize_connect+0x260>)
   1d824:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   1d826:	687b      	ldr	r3, [r7, #4]
   1d828:	8b1b      	ldrh	r3, [r3, #24]
   1d82a:	001a      	movs	r2, r3
   1d82c:	231c      	movs	r3, #28
   1d82e:	18fb      	adds	r3, r7, r3
   1d830:	0011      	movs	r1, r2
   1d832:	0018      	movs	r0, r3
   1d834:	4b2a      	ldr	r3, [pc, #168]	; (1d8e0 <MQTTSerialize_connect+0x274>)
   1d836:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   1d838:	687b      	ldr	r3, [r7, #4]
   1d83a:	221c      	movs	r2, #28
   1d83c:	18b8      	adds	r0, r7, r2
   1d83e:	68d9      	ldr	r1, [r3, #12]
   1d840:	691a      	ldr	r2, [r3, #16]
   1d842:	695b      	ldr	r3, [r3, #20]
   1d844:	4c27      	ldr	r4, [pc, #156]	; (1d8e4 <MQTTSerialize_connect+0x278>)
   1d846:	47a0      	blx	r4
	if (options->willFlag)
   1d848:	687b      	ldr	r3, [r7, #4]
   1d84a:	7edb      	ldrb	r3, [r3, #27]
   1d84c:	2b00      	cmp	r3, #0
   1d84e:	d00f      	beq.n	1d870 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   1d850:	687b      	ldr	r3, [r7, #4]
   1d852:	221c      	movs	r2, #28
   1d854:	18b8      	adds	r0, r7, r2
   1d856:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1d858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d85c:	4c21      	ldr	r4, [pc, #132]	; (1d8e4 <MQTTSerialize_connect+0x278>)
   1d85e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   1d860:	687b      	ldr	r3, [r7, #4]
   1d862:	221c      	movs	r2, #28
   1d864:	18b8      	adds	r0, r7, r2
   1d866:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1d868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1d86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d86c:	4c1d      	ldr	r4, [pc, #116]	; (1d8e4 <MQTTSerialize_connect+0x278>)
   1d86e:	47a0      	blx	r4
	}
	if (flags.bits.username)
   1d870:	2314      	movs	r3, #20
   1d872:	18fb      	adds	r3, r7, r3
   1d874:	781b      	ldrb	r3, [r3, #0]
   1d876:	227f      	movs	r2, #127	; 0x7f
   1d878:	4393      	bics	r3, r2
   1d87a:	b2db      	uxtb	r3, r3
   1d87c:	2b00      	cmp	r3, #0
   1d87e:	d007      	beq.n	1d890 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   1d880:	687b      	ldr	r3, [r7, #4]
   1d882:	221c      	movs	r2, #28
   1d884:	18b8      	adds	r0, r7, r2
   1d886:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1d888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d88a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d88c:	4c15      	ldr	r4, [pc, #84]	; (1d8e4 <MQTTSerialize_connect+0x278>)
   1d88e:	47a0      	blx	r4
	if (flags.bits.password)
   1d890:	2314      	movs	r3, #20
   1d892:	18fb      	adds	r3, r7, r3
   1d894:	781b      	ldrb	r3, [r3, #0]
   1d896:	2240      	movs	r2, #64	; 0x40
   1d898:	4013      	ands	r3, r2
   1d89a:	b2db      	uxtb	r3, r3
   1d89c:	2b00      	cmp	r3, #0
   1d89e:	d007      	beq.n	1d8b0 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   1d8a0:	687b      	ldr	r3, [r7, #4]
   1d8a2:	221c      	movs	r2, #28
   1d8a4:	18b8      	adds	r0, r7, r2
   1d8a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1d8a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1d8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d8ac:	4c0d      	ldr	r4, [pc, #52]	; (1d8e4 <MQTTSerialize_connect+0x278>)
   1d8ae:	47a0      	blx	r4

	rc = ptr - buf;
   1d8b0:	69fb      	ldr	r3, [r7, #28]
   1d8b2:	001a      	movs	r2, r3
   1d8b4:	68fb      	ldr	r3, [r7, #12]
   1d8b6:	1ad3      	subs	r3, r2, r3
   1d8b8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   1d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d8bc:	0018      	movs	r0, r3
   1d8be:	46bd      	mov	sp, r7
   1d8c0:	b00b      	add	sp, #44	; 0x2c
   1d8c2:	bd90      	pop	{r4, r7, pc}
   1d8c4:	0001d5a5 	.word	0x0001d5a5
   1d8c8:	0001dd39 	.word	0x0001dd39
   1d8cc:	0001de5b 	.word	0x0001de5b
   1d8d0:	0001dc41 	.word	0x0001dc41
   1d8d4:	000289e8 	.word	0x000289e8
   1d8d8:	0001dedd 	.word	0x0001dedd
   1d8dc:	000289f0 	.word	0x000289f0
   1d8e0:	0001de85 	.word	0x0001de85
   1d8e4:	0001df2d 	.word	0x0001df2d

0001d8e8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   1d8e8:	b580      	push	{r7, lr}
   1d8ea:	b08a      	sub	sp, #40	; 0x28
   1d8ec:	af00      	add	r7, sp, #0
   1d8ee:	60f8      	str	r0, [r7, #12]
   1d8f0:	60b9      	str	r1, [r7, #8]
   1d8f2:	607a      	str	r2, [r7, #4]
   1d8f4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1d8f6:	2300      	movs	r3, #0
   1d8f8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1d8fa:	687b      	ldr	r3, [r7, #4]
   1d8fc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1d8fe:	2300      	movs	r3, #0
   1d900:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1d902:	2300      	movs	r3, #0
   1d904:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   1d906:	2300      	movs	r3, #0
   1d908:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1d90a:	2318      	movs	r3, #24
   1d90c:	18fb      	adds	r3, r7, r3
   1d90e:	0018      	movs	r0, r3
   1d910:	4b25      	ldr	r3, [pc, #148]	; (1d9a8 <MQTTDeserialize_connack+0xc0>)
   1d912:	4798      	blx	r3
   1d914:	0003      	movs	r3, r0
   1d916:	001a      	movs	r2, r3
   1d918:	231c      	movs	r3, #28
   1d91a:	18fb      	adds	r3, r7, r3
   1d91c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   1d91e:	231c      	movs	r3, #28
   1d920:	18fb      	adds	r3, r7, r3
   1d922:	781b      	ldrb	r3, [r3, #0]
   1d924:	220f      	movs	r2, #15
   1d926:	4393      	bics	r3, r2
   1d928:	b2db      	uxtb	r3, r3
   1d92a:	2b20      	cmp	r3, #32
   1d92c:	d134      	bne.n	1d998 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1d92e:	69bb      	ldr	r3, [r7, #24]
   1d930:	2214      	movs	r2, #20
   1d932:	18ba      	adds	r2, r7, r2
   1d934:	0011      	movs	r1, r2
   1d936:	0018      	movs	r0, r3
   1d938:	4b1c      	ldr	r3, [pc, #112]	; (1d9ac <MQTTDeserialize_connack+0xc4>)
   1d93a:	4798      	blx	r3
   1d93c:	0003      	movs	r3, r0
   1d93e:	627b      	str	r3, [r7, #36]	; 0x24
   1d940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d942:	69bb      	ldr	r3, [r7, #24]
   1d944:	189b      	adds	r3, r3, r2
   1d946:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1d948:	69bb      	ldr	r3, [r7, #24]
   1d94a:	697a      	ldr	r2, [r7, #20]
   1d94c:	189b      	adds	r3, r3, r2
   1d94e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1d950:	6a3b      	ldr	r3, [r7, #32]
   1d952:	69ba      	ldr	r2, [r7, #24]
   1d954:	1a9b      	subs	r3, r3, r2
   1d956:	2b01      	cmp	r3, #1
   1d958:	dd20      	ble.n	1d99c <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   1d95a:	2318      	movs	r3, #24
   1d95c:	18fb      	adds	r3, r7, r3
   1d95e:	0018      	movs	r0, r3
   1d960:	4b11      	ldr	r3, [pc, #68]	; (1d9a8 <MQTTDeserialize_connack+0xc0>)
   1d962:	4798      	blx	r3
   1d964:	0003      	movs	r3, r0
   1d966:	001a      	movs	r2, r3
   1d968:	2310      	movs	r3, #16
   1d96a:	18fb      	adds	r3, r7, r3
   1d96c:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   1d96e:	2310      	movs	r3, #16
   1d970:	18fb      	adds	r3, r7, r3
   1d972:	781b      	ldrb	r3, [r3, #0]
   1d974:	061b      	lsls	r3, r3, #24
   1d976:	0fdb      	lsrs	r3, r3, #31
   1d978:	b2db      	uxtb	r3, r3
   1d97a:	001a      	movs	r2, r3
   1d97c:	68fb      	ldr	r3, [r7, #12]
   1d97e:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   1d980:	2318      	movs	r3, #24
   1d982:	18fb      	adds	r3, r7, r3
   1d984:	0018      	movs	r0, r3
   1d986:	4b08      	ldr	r3, [pc, #32]	; (1d9a8 <MQTTDeserialize_connack+0xc0>)
   1d988:	4798      	blx	r3
   1d98a:	0003      	movs	r3, r0
   1d98c:	001a      	movs	r2, r3
   1d98e:	68bb      	ldr	r3, [r7, #8]
   1d990:	701a      	strb	r2, [r3, #0]

	rc = 1;
   1d992:	2301      	movs	r3, #1
   1d994:	627b      	str	r3, [r7, #36]	; 0x24
   1d996:	e002      	b.n	1d99e <MQTTDeserialize_connack+0xb6>
		goto exit;
   1d998:	46c0      	nop			; (mov r8, r8)
   1d99a:	e000      	b.n	1d99e <MQTTDeserialize_connack+0xb6>
		goto exit;
   1d99c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d9a0:	0018      	movs	r0, r3
   1d9a2:	46bd      	mov	sp, r7
   1d9a4:	b00a      	add	sp, #40	; 0x28
   1d9a6:	bd80      	pop	{r7, pc}
   1d9a8:	0001de2f 	.word	0x0001de2f
   1d9ac:	0001ddc9 	.word	0x0001ddc9

0001d9b0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1d9b0:	b580      	push	{r7, lr}
   1d9b2:	b088      	sub	sp, #32
   1d9b4:	af00      	add	r7, sp, #0
   1d9b6:	60f8      	str	r0, [r7, #12]
   1d9b8:	60b9      	str	r1, [r7, #8]
   1d9ba:	1dfb      	adds	r3, r7, #7
   1d9bc:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1d9be:	2300      	movs	r3, #0
   1d9c0:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   1d9c2:	2301      	movs	r3, #1
   1d9c4:	425b      	negs	r3, r3
   1d9c6:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1d9c8:	68fb      	ldr	r3, [r7, #12]
   1d9ca:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   1d9cc:	68bb      	ldr	r3, [r7, #8]
   1d9ce:	2b01      	cmp	r3, #1
   1d9d0:	dc03      	bgt.n	1d9da <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1d9d2:	2302      	movs	r3, #2
   1d9d4:	425b      	negs	r3, r3
   1d9d6:	61fb      	str	r3, [r7, #28]
		goto exit;
   1d9d8:	e029      	b.n	1da2e <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   1d9da:	2318      	movs	r3, #24
   1d9dc:	18fb      	adds	r3, r7, r3
   1d9de:	2200      	movs	r2, #0
   1d9e0:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   1d9e2:	1dfb      	adds	r3, r7, #7
   1d9e4:	781b      	ldrb	r3, [r3, #0]
   1d9e6:	220f      	movs	r2, #15
   1d9e8:	4013      	ands	r3, r2
   1d9ea:	b2da      	uxtb	r2, r3
   1d9ec:	2318      	movs	r3, #24
   1d9ee:	18fb      	adds	r3, r7, r3
   1d9f0:	0110      	lsls	r0, r2, #4
   1d9f2:	781a      	ldrb	r2, [r3, #0]
   1d9f4:	210f      	movs	r1, #15
   1d9f6:	400a      	ands	r2, r1
   1d9f8:	1c11      	adds	r1, r2, #0
   1d9fa:	1c02      	adds	r2, r0, #0
   1d9fc:	430a      	orrs	r2, r1
   1d9fe:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1da00:	2318      	movs	r3, #24
   1da02:	18fb      	adds	r3, r7, r3
   1da04:	781a      	ldrb	r2, [r3, #0]
   1da06:	2314      	movs	r3, #20
   1da08:	18fb      	adds	r3, r7, r3
   1da0a:	0011      	movs	r1, r2
   1da0c:	0018      	movs	r0, r3
   1da0e:	4b0a      	ldr	r3, [pc, #40]	; (1da38 <MQTTSerialize_zero+0x88>)
   1da10:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   1da12:	697b      	ldr	r3, [r7, #20]
   1da14:	2100      	movs	r1, #0
   1da16:	0018      	movs	r0, r3
   1da18:	4b08      	ldr	r3, [pc, #32]	; (1da3c <MQTTSerialize_zero+0x8c>)
   1da1a:	4798      	blx	r3
   1da1c:	0002      	movs	r2, r0
   1da1e:	697b      	ldr	r3, [r7, #20]
   1da20:	189b      	adds	r3, r3, r2
   1da22:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   1da24:	697b      	ldr	r3, [r7, #20]
   1da26:	001a      	movs	r2, r3
   1da28:	68fb      	ldr	r3, [r7, #12]
   1da2a:	1ad3      	subs	r3, r2, r3
   1da2c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1da2e:	69fb      	ldr	r3, [r7, #28]
}
   1da30:	0018      	movs	r0, r3
   1da32:	46bd      	mov	sp, r7
   1da34:	b008      	add	sp, #32
   1da36:	bd80      	pop	{r7, pc}
   1da38:	0001de5b 	.word	0x0001de5b
   1da3c:	0001dc41 	.word	0x0001dc41

0001da40 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   1da40:	b580      	push	{r7, lr}
   1da42:	b082      	sub	sp, #8
   1da44:	af00      	add	r7, sp, #0
   1da46:	6078      	str	r0, [r7, #4]
   1da48:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1da4a:	6839      	ldr	r1, [r7, #0]
   1da4c:	687b      	ldr	r3, [r7, #4]
   1da4e:	220e      	movs	r2, #14
   1da50:	0018      	movs	r0, r3
   1da52:	4b03      	ldr	r3, [pc, #12]	; (1da60 <MQTTSerialize_disconnect+0x20>)
   1da54:	4798      	blx	r3
   1da56:	0003      	movs	r3, r0
}
   1da58:	0018      	movs	r0, r3
   1da5a:	46bd      	mov	sp, r7
   1da5c:	b002      	add	sp, #8
   1da5e:	bd80      	pop	{r7, pc}
   1da60:	0001d9b1 	.word	0x0001d9b1

0001da64 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   1da64:	b580      	push	{r7, lr}
   1da66:	b082      	sub	sp, #8
   1da68:	af00      	add	r7, sp, #0
   1da6a:	6078      	str	r0, [r7, #4]
   1da6c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1da6e:	6839      	ldr	r1, [r7, #0]
   1da70:	687b      	ldr	r3, [r7, #4]
   1da72:	220c      	movs	r2, #12
   1da74:	0018      	movs	r0, r3
   1da76:	4b03      	ldr	r3, [pc, #12]	; (1da84 <MQTTSerialize_pingreq+0x20>)
   1da78:	4798      	blx	r3
   1da7a:	0003      	movs	r3, r0
}
   1da7c:	0018      	movs	r0, r3
   1da7e:	46bd      	mov	sp, r7
   1da80:	b002      	add	sp, #8
   1da82:	bd80      	pop	{r7, pc}
   1da84:	0001d9b1 	.word	0x0001d9b1

0001da88 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   1da88:	b580      	push	{r7, lr}
   1da8a:	b08a      	sub	sp, #40	; 0x28
   1da8c:	af00      	add	r7, sp, #0
   1da8e:	60f8      	str	r0, [r7, #12]
   1da90:	60b9      	str	r1, [r7, #8]
   1da92:	607a      	str	r2, [r7, #4]
   1da94:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1da96:	2300      	movs	r3, #0
   1da98:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1da9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1da9c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1da9e:	2300      	movs	r3, #0
   1daa0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1daa2:	2300      	movs	r3, #0
   1daa4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   1daa6:	2300      	movs	r3, #0
   1daa8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1daaa:	2318      	movs	r3, #24
   1daac:	18fb      	adds	r3, r7, r3
   1daae:	0018      	movs	r0, r3
   1dab0:	4b32      	ldr	r3, [pc, #200]	; (1db7c <MQTTDeserialize_publish+0xf4>)
   1dab2:	4798      	blx	r3
   1dab4:	0003      	movs	r3, r0
   1dab6:	001a      	movs	r2, r3
   1dab8:	231c      	movs	r3, #28
   1daba:	18fb      	adds	r3, r7, r3
   1dabc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   1dabe:	231c      	movs	r3, #28
   1dac0:	18fb      	adds	r3, r7, r3
   1dac2:	781b      	ldrb	r3, [r3, #0]
   1dac4:	220f      	movs	r2, #15
   1dac6:	4393      	bics	r3, r2
   1dac8:	b2db      	uxtb	r3, r3
   1daca:	2b30      	cmp	r3, #48	; 0x30
   1dacc:	d150      	bne.n	1db70 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   1dace:	231c      	movs	r3, #28
   1dad0:	18fb      	adds	r3, r7, r3
   1dad2:	781b      	ldrb	r3, [r3, #0]
   1dad4:	071b      	lsls	r3, r3, #28
   1dad6:	0fdb      	lsrs	r3, r3, #31
   1dad8:	b2db      	uxtb	r3, r3
   1dada:	001a      	movs	r2, r3
   1dadc:	68fb      	ldr	r3, [r7, #12]
   1dade:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   1dae0:	231c      	movs	r3, #28
   1dae2:	18fb      	adds	r3, r7, r3
   1dae4:	781b      	ldrb	r3, [r3, #0]
   1dae6:	075b      	lsls	r3, r3, #29
   1dae8:	0f9b      	lsrs	r3, r3, #30
   1daea:	b2db      	uxtb	r3, r3
   1daec:	001a      	movs	r2, r3
   1daee:	68bb      	ldr	r3, [r7, #8]
   1daf0:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   1daf2:	231c      	movs	r3, #28
   1daf4:	18fb      	adds	r3, r7, r3
   1daf6:	781b      	ldrb	r3, [r3, #0]
   1daf8:	07db      	lsls	r3, r3, #31
   1dafa:	0fdb      	lsrs	r3, r3, #31
   1dafc:	b2db      	uxtb	r3, r3
   1dafe:	001a      	movs	r2, r3
   1db00:	687b      	ldr	r3, [r7, #4]
   1db02:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1db04:	69bb      	ldr	r3, [r7, #24]
   1db06:	2214      	movs	r2, #20
   1db08:	18ba      	adds	r2, r7, r2
   1db0a:	0011      	movs	r1, r2
   1db0c:	0018      	movs	r0, r3
   1db0e:	4b1c      	ldr	r3, [pc, #112]	; (1db80 <MQTTDeserialize_publish+0xf8>)
   1db10:	4798      	blx	r3
   1db12:	0003      	movs	r3, r0
   1db14:	627b      	str	r3, [r7, #36]	; 0x24
   1db16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1db18:	69bb      	ldr	r3, [r7, #24]
   1db1a:	189b      	adds	r3, r3, r2
   1db1c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1db1e:	69bb      	ldr	r3, [r7, #24]
   1db20:	697a      	ldr	r2, [r7, #20]
   1db22:	189b      	adds	r3, r3, r2
   1db24:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1db26:	6a3a      	ldr	r2, [r7, #32]
   1db28:	2318      	movs	r3, #24
   1db2a:	18f9      	adds	r1, r7, r3
   1db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1db2e:	0018      	movs	r0, r3
   1db30:	4b14      	ldr	r3, [pc, #80]	; (1db84 <MQTTDeserialize_publish+0xfc>)
   1db32:	4798      	blx	r3
   1db34:	1e03      	subs	r3, r0, #0
   1db36:	d01c      	beq.n	1db72 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   1db38:	6a3b      	ldr	r3, [r7, #32]
   1db3a:	69ba      	ldr	r2, [r7, #24]
   1db3c:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1db3e:	d418      	bmi.n	1db72 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   1db40:	68bb      	ldr	r3, [r7, #8]
   1db42:	681b      	ldr	r3, [r3, #0]
   1db44:	2b00      	cmp	r3, #0
   1db46:	dd08      	ble.n	1db5a <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   1db48:	2318      	movs	r3, #24
   1db4a:	18fb      	adds	r3, r7, r3
   1db4c:	0018      	movs	r0, r3
   1db4e:	4b0e      	ldr	r3, [pc, #56]	; (1db88 <MQTTDeserialize_publish+0x100>)
   1db50:	4798      	blx	r3
   1db52:	0003      	movs	r3, r0
   1db54:	b29a      	uxth	r2, r3
   1db56:	683b      	ldr	r3, [r7, #0]
   1db58:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   1db5a:	6a3b      	ldr	r3, [r7, #32]
   1db5c:	69ba      	ldr	r2, [r7, #24]
   1db5e:	1a9a      	subs	r2, r3, r2
   1db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1db62:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   1db64:	69ba      	ldr	r2, [r7, #24]
   1db66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1db68:	601a      	str	r2, [r3, #0]
	rc = 1;
   1db6a:	2301      	movs	r3, #1
   1db6c:	627b      	str	r3, [r7, #36]	; 0x24
   1db6e:	e000      	b.n	1db72 <MQTTDeserialize_publish+0xea>
		goto exit;
   1db70:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1db74:	0018      	movs	r0, r3
   1db76:	46bd      	mov	sp, r7
   1db78:	b00a      	add	sp, #40	; 0x28
   1db7a:	bd80      	pop	{r7, pc}
   1db7c:	0001de2f 	.word	0x0001de2f
   1db80:	0001ddc9 	.word	0x0001ddc9
   1db84:	0001dfad 	.word	0x0001dfad
   1db88:	0001ddfd 	.word	0x0001ddfd

0001db8c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   1db8c:	b580      	push	{r7, lr}
   1db8e:	b08a      	sub	sp, #40	; 0x28
   1db90:	af00      	add	r7, sp, #0
   1db92:	60f8      	str	r0, [r7, #12]
   1db94:	60b9      	str	r1, [r7, #8]
   1db96:	607a      	str	r2, [r7, #4]
   1db98:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1db9a:	2300      	movs	r3, #0
   1db9c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1db9e:	683b      	ldr	r3, [r7, #0]
   1dba0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1dba2:	2300      	movs	r3, #0
   1dba4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1dba6:	2300      	movs	r3, #0
   1dba8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1dbaa:	2318      	movs	r3, #24
   1dbac:	18fb      	adds	r3, r7, r3
   1dbae:	0018      	movs	r0, r3
   1dbb0:	4b20      	ldr	r3, [pc, #128]	; (1dc34 <MQTTDeserialize_ack+0xa8>)
   1dbb2:	4798      	blx	r3
   1dbb4:	0003      	movs	r3, r0
   1dbb6:	001a      	movs	r2, r3
   1dbb8:	231c      	movs	r3, #28
   1dbba:	18fb      	adds	r3, r7, r3
   1dbbc:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   1dbbe:	231c      	movs	r3, #28
   1dbc0:	18fb      	adds	r3, r7, r3
   1dbc2:	781b      	ldrb	r3, [r3, #0]
   1dbc4:	071b      	lsls	r3, r3, #28
   1dbc6:	0fdb      	lsrs	r3, r3, #31
   1dbc8:	b2db      	uxtb	r3, r3
   1dbca:	001a      	movs	r2, r3
   1dbcc:	68bb      	ldr	r3, [r7, #8]
   1dbce:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   1dbd0:	231c      	movs	r3, #28
   1dbd2:	18fb      	adds	r3, r7, r3
   1dbd4:	781b      	ldrb	r3, [r3, #0]
   1dbd6:	061b      	lsls	r3, r3, #24
   1dbd8:	0f1b      	lsrs	r3, r3, #28
   1dbda:	b2db      	uxtb	r3, r3
   1dbdc:	001a      	movs	r2, r3
   1dbde:	68fb      	ldr	r3, [r7, #12]
   1dbe0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1dbe2:	69bb      	ldr	r3, [r7, #24]
   1dbe4:	2214      	movs	r2, #20
   1dbe6:	18ba      	adds	r2, r7, r2
   1dbe8:	0011      	movs	r1, r2
   1dbea:	0018      	movs	r0, r3
   1dbec:	4b12      	ldr	r3, [pc, #72]	; (1dc38 <MQTTDeserialize_ack+0xac>)
   1dbee:	4798      	blx	r3
   1dbf0:	0003      	movs	r3, r0
   1dbf2:	627b      	str	r3, [r7, #36]	; 0x24
   1dbf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1dbf6:	69bb      	ldr	r3, [r7, #24]
   1dbf8:	189b      	adds	r3, r3, r2
   1dbfa:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1dbfc:	69bb      	ldr	r3, [r7, #24]
   1dbfe:	697a      	ldr	r2, [r7, #20]
   1dc00:	189b      	adds	r3, r3, r2
   1dc02:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   1dc04:	6a3b      	ldr	r3, [r7, #32]
   1dc06:	69ba      	ldr	r2, [r7, #24]
   1dc08:	1a9b      	subs	r3, r3, r2
   1dc0a:	2b01      	cmp	r3, #1
   1dc0c:	dd0b      	ble.n	1dc26 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   1dc0e:	2318      	movs	r3, #24
   1dc10:	18fb      	adds	r3, r7, r3
   1dc12:	0018      	movs	r0, r3
   1dc14:	4b09      	ldr	r3, [pc, #36]	; (1dc3c <MQTTDeserialize_ack+0xb0>)
   1dc16:	4798      	blx	r3
   1dc18:	0003      	movs	r3, r0
   1dc1a:	b29a      	uxth	r2, r3
   1dc1c:	687b      	ldr	r3, [r7, #4]
   1dc1e:	801a      	strh	r2, [r3, #0]

	rc = 1;
   1dc20:	2301      	movs	r3, #1
   1dc22:	627b      	str	r3, [r7, #36]	; 0x24
   1dc24:	e000      	b.n	1dc28 <MQTTDeserialize_ack+0x9c>
		goto exit;
   1dc26:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1dc2a:	0018      	movs	r0, r3
   1dc2c:	46bd      	mov	sp, r7
   1dc2e:	b00a      	add	sp, #40	; 0x28
   1dc30:	bd80      	pop	{r7, pc}
   1dc32:	46c0      	nop			; (mov r8, r8)
   1dc34:	0001de2f 	.word	0x0001de2f
   1dc38:	0001ddc9 	.word	0x0001ddc9
   1dc3c:	0001ddfd 	.word	0x0001ddfd

0001dc40 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   1dc40:	b580      	push	{r7, lr}
   1dc42:	b084      	sub	sp, #16
   1dc44:	af00      	add	r7, sp, #0
   1dc46:	6078      	str	r0, [r7, #4]
   1dc48:	6039      	str	r1, [r7, #0]
	int rc = 0;
   1dc4a:	2300      	movs	r3, #0
   1dc4c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   1dc4e:	683b      	ldr	r3, [r7, #0]
   1dc50:	4a17      	ldr	r2, [pc, #92]	; (1dcb0 <MQTTPacket_encode+0x70>)
   1dc52:	4013      	ands	r3, r2
   1dc54:	d504      	bpl.n	1dc60 <MQTTPacket_encode+0x20>
   1dc56:	3b01      	subs	r3, #1
   1dc58:	2280      	movs	r2, #128	; 0x80
   1dc5a:	4252      	negs	r2, r2
   1dc5c:	4313      	orrs	r3, r2
   1dc5e:	3301      	adds	r3, #1
   1dc60:	001a      	movs	r2, r3
   1dc62:	230b      	movs	r3, #11
   1dc64:	18fb      	adds	r3, r7, r3
   1dc66:	701a      	strb	r2, [r3, #0]
		length /= 128;
   1dc68:	683b      	ldr	r3, [r7, #0]
   1dc6a:	2b00      	cmp	r3, #0
   1dc6c:	da00      	bge.n	1dc70 <MQTTPacket_encode+0x30>
   1dc6e:	337f      	adds	r3, #127	; 0x7f
   1dc70:	11db      	asrs	r3, r3, #7
   1dc72:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   1dc74:	683b      	ldr	r3, [r7, #0]
   1dc76:	2b00      	cmp	r3, #0
   1dc78:	dd08      	ble.n	1dc8c <MQTTPacket_encode+0x4c>
			d |= 0x80;
   1dc7a:	230b      	movs	r3, #11
   1dc7c:	18fb      	adds	r3, r7, r3
   1dc7e:	220b      	movs	r2, #11
   1dc80:	18ba      	adds	r2, r7, r2
   1dc82:	7812      	ldrb	r2, [r2, #0]
   1dc84:	2180      	movs	r1, #128	; 0x80
   1dc86:	4249      	negs	r1, r1
   1dc88:	430a      	orrs	r2, r1
   1dc8a:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   1dc8c:	68fb      	ldr	r3, [r7, #12]
   1dc8e:	1c5a      	adds	r2, r3, #1
   1dc90:	60fa      	str	r2, [r7, #12]
   1dc92:	001a      	movs	r2, r3
   1dc94:	687b      	ldr	r3, [r7, #4]
   1dc96:	189b      	adds	r3, r3, r2
   1dc98:	220b      	movs	r2, #11
   1dc9a:	18ba      	adds	r2, r7, r2
   1dc9c:	7812      	ldrb	r2, [r2, #0]
   1dc9e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   1dca0:	683b      	ldr	r3, [r7, #0]
   1dca2:	2b00      	cmp	r3, #0
   1dca4:	dcd3      	bgt.n	1dc4e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   1dca6:	68fb      	ldr	r3, [r7, #12]
}
   1dca8:	0018      	movs	r0, r3
   1dcaa:	46bd      	mov	sp, r7
   1dcac:	b004      	add	sp, #16
   1dcae:	bd80      	pop	{r7, pc}
   1dcb0:	8000007f 	.word	0x8000007f

0001dcb4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   1dcb4:	b580      	push	{r7, lr}
   1dcb6:	b086      	sub	sp, #24
   1dcb8:	af00      	add	r7, sp, #0
   1dcba:	6078      	str	r0, [r7, #4]
   1dcbc:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   1dcbe:	2301      	movs	r3, #1
   1dcc0:	617b      	str	r3, [r7, #20]
	int len = 0;
   1dcc2:	2300      	movs	r3, #0
   1dcc4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   1dcc6:	683b      	ldr	r3, [r7, #0]
   1dcc8:	2200      	movs	r2, #0
   1dcca:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   1dccc:	2301      	movs	r3, #1
   1dcce:	425b      	negs	r3, r3
   1dcd0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1dcd2:	693b      	ldr	r3, [r7, #16]
   1dcd4:	3301      	adds	r3, #1
   1dcd6:	613b      	str	r3, [r7, #16]
   1dcd8:	693b      	ldr	r3, [r7, #16]
   1dcda:	2b04      	cmp	r3, #4
   1dcdc:	dd03      	ble.n	1dce6 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   1dcde:	2301      	movs	r3, #1
   1dce0:	425b      	negs	r3, r3
   1dce2:	60fb      	str	r3, [r7, #12]
			goto exit;
   1dce4:	e022      	b.n	1dd2c <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   1dce6:	230b      	movs	r3, #11
   1dce8:	18fa      	adds	r2, r7, r3
   1dcea:	687b      	ldr	r3, [r7, #4]
   1dcec:	2101      	movs	r1, #1
   1dcee:	0010      	movs	r0, r2
   1dcf0:	4798      	blx	r3
   1dcf2:	0003      	movs	r3, r0
   1dcf4:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   1dcf6:	68fb      	ldr	r3, [r7, #12]
   1dcf8:	2b01      	cmp	r3, #1
   1dcfa:	d116      	bne.n	1dd2a <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   1dcfc:	683b      	ldr	r3, [r7, #0]
   1dcfe:	681a      	ldr	r2, [r3, #0]
   1dd00:	230b      	movs	r3, #11
   1dd02:	18fb      	adds	r3, r7, r3
   1dd04:	781b      	ldrb	r3, [r3, #0]
   1dd06:	0019      	movs	r1, r3
   1dd08:	237f      	movs	r3, #127	; 0x7f
   1dd0a:	400b      	ands	r3, r1
   1dd0c:	6979      	ldr	r1, [r7, #20]
   1dd0e:	434b      	muls	r3, r1
   1dd10:	18d2      	adds	r2, r2, r3
   1dd12:	683b      	ldr	r3, [r7, #0]
   1dd14:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   1dd16:	697b      	ldr	r3, [r7, #20]
   1dd18:	01db      	lsls	r3, r3, #7
   1dd1a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   1dd1c:	230b      	movs	r3, #11
   1dd1e:	18fb      	adds	r3, r7, r3
   1dd20:	781b      	ldrb	r3, [r3, #0]
   1dd22:	b25b      	sxtb	r3, r3
   1dd24:	2b00      	cmp	r3, #0
   1dd26:	dbd1      	blt.n	1dccc <MQTTPacket_decode+0x18>
   1dd28:	e000      	b.n	1dd2c <MQTTPacket_decode+0x78>
			goto exit;
   1dd2a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   1dd2c:	693b      	ldr	r3, [r7, #16]
}
   1dd2e:	0018      	movs	r0, r3
   1dd30:	46bd      	mov	sp, r7
   1dd32:	b006      	add	sp, #24
   1dd34:	bd80      	pop	{r7, pc}
	...

0001dd38 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   1dd38:	b580      	push	{r7, lr}
   1dd3a:	b082      	sub	sp, #8
   1dd3c:	af00      	add	r7, sp, #0
   1dd3e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   1dd40:	687b      	ldr	r3, [r7, #4]
   1dd42:	3301      	adds	r3, #1
   1dd44:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   1dd46:	687b      	ldr	r3, [r7, #4]
   1dd48:	2b7f      	cmp	r3, #127	; 0x7f
   1dd4a:	dc03      	bgt.n	1dd54 <MQTTPacket_len+0x1c>
		rem_len += 1;
   1dd4c:	687b      	ldr	r3, [r7, #4]
   1dd4e:	3301      	adds	r3, #1
   1dd50:	607b      	str	r3, [r7, #4]
   1dd52:	e012      	b.n	1dd7a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   1dd54:	687b      	ldr	r3, [r7, #4]
   1dd56:	4a0b      	ldr	r2, [pc, #44]	; (1dd84 <MQTTPacket_len+0x4c>)
   1dd58:	4293      	cmp	r3, r2
   1dd5a:	dc03      	bgt.n	1dd64 <MQTTPacket_len+0x2c>
		rem_len += 2;
   1dd5c:	687b      	ldr	r3, [r7, #4]
   1dd5e:	3302      	adds	r3, #2
   1dd60:	607b      	str	r3, [r7, #4]
   1dd62:	e00a      	b.n	1dd7a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   1dd64:	687b      	ldr	r3, [r7, #4]
   1dd66:	4a08      	ldr	r2, [pc, #32]	; (1dd88 <MQTTPacket_len+0x50>)
   1dd68:	4293      	cmp	r3, r2
   1dd6a:	dc03      	bgt.n	1dd74 <MQTTPacket_len+0x3c>
		rem_len += 3;
   1dd6c:	687b      	ldr	r3, [r7, #4]
   1dd6e:	3303      	adds	r3, #3
   1dd70:	607b      	str	r3, [r7, #4]
   1dd72:	e002      	b.n	1dd7a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   1dd74:	687b      	ldr	r3, [r7, #4]
   1dd76:	3304      	adds	r3, #4
   1dd78:	607b      	str	r3, [r7, #4]
	return rem_len;
   1dd7a:	687b      	ldr	r3, [r7, #4]
}
   1dd7c:	0018      	movs	r0, r3
   1dd7e:	46bd      	mov	sp, r7
   1dd80:	b002      	add	sp, #8
   1dd82:	bd80      	pop	{r7, pc}
   1dd84:	00003fff 	.word	0x00003fff
   1dd88:	001ffffe 	.word	0x001ffffe

0001dd8c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1dd8c:	b580      	push	{r7, lr}
   1dd8e:	b084      	sub	sp, #16
   1dd90:	af00      	add	r7, sp, #0
   1dd92:	6078      	str	r0, [r7, #4]
   1dd94:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   1dd96:	2300      	movs	r3, #0
   1dd98:	60fb      	str	r3, [r7, #12]
   1dd9a:	e00a      	b.n	1ddb2 <bufchar+0x26>
		*c = *bufptr++;
   1dd9c:	4b09      	ldr	r3, [pc, #36]	; (1ddc4 <bufchar+0x38>)
   1dd9e:	681b      	ldr	r3, [r3, #0]
   1dda0:	1c59      	adds	r1, r3, #1
   1dda2:	4a08      	ldr	r2, [pc, #32]	; (1ddc4 <bufchar+0x38>)
   1dda4:	6011      	str	r1, [r2, #0]
   1dda6:	781a      	ldrb	r2, [r3, #0]
   1dda8:	687b      	ldr	r3, [r7, #4]
   1ddaa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   1ddac:	68fb      	ldr	r3, [r7, #12]
   1ddae:	3301      	adds	r3, #1
   1ddb0:	60fb      	str	r3, [r7, #12]
   1ddb2:	68fa      	ldr	r2, [r7, #12]
   1ddb4:	683b      	ldr	r3, [r7, #0]
   1ddb6:	429a      	cmp	r2, r3
   1ddb8:	dbf0      	blt.n	1dd9c <bufchar+0x10>
	return count;
   1ddba:	683b      	ldr	r3, [r7, #0]
}
   1ddbc:	0018      	movs	r0, r3
   1ddbe:	46bd      	mov	sp, r7
   1ddc0:	b004      	add	sp, #16
   1ddc2:	bd80      	pop	{r7, pc}
   1ddc4:	20004780 	.word	0x20004780

0001ddc8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   1ddc8:	b580      	push	{r7, lr}
   1ddca:	b082      	sub	sp, #8
   1ddcc:	af00      	add	r7, sp, #0
   1ddce:	6078      	str	r0, [r7, #4]
   1ddd0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   1ddd2:	4b07      	ldr	r3, [pc, #28]	; (1ddf0 <MQTTPacket_decodeBuf+0x28>)
   1ddd4:	687a      	ldr	r2, [r7, #4]
   1ddd6:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   1ddd8:	683a      	ldr	r2, [r7, #0]
   1ddda:	4b06      	ldr	r3, [pc, #24]	; (1ddf4 <MQTTPacket_decodeBuf+0x2c>)
   1dddc:	0011      	movs	r1, r2
   1ddde:	0018      	movs	r0, r3
   1dde0:	4b05      	ldr	r3, [pc, #20]	; (1ddf8 <MQTTPacket_decodeBuf+0x30>)
   1dde2:	4798      	blx	r3
   1dde4:	0003      	movs	r3, r0
}
   1dde6:	0018      	movs	r0, r3
   1dde8:	46bd      	mov	sp, r7
   1ddea:	b002      	add	sp, #8
   1ddec:	bd80      	pop	{r7, pc}
   1ddee:	46c0      	nop			; (mov r8, r8)
   1ddf0:	20004780 	.word	0x20004780
   1ddf4:	0001dd8d 	.word	0x0001dd8d
   1ddf8:	0001dcb5 	.word	0x0001dcb5

0001ddfc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   1ddfc:	b580      	push	{r7, lr}
   1ddfe:	b084      	sub	sp, #16
   1de00:	af00      	add	r7, sp, #0
   1de02:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   1de04:	687b      	ldr	r3, [r7, #4]
   1de06:	681b      	ldr	r3, [r3, #0]
   1de08:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   1de0a:	68fb      	ldr	r3, [r7, #12]
   1de0c:	781b      	ldrb	r3, [r3, #0]
   1de0e:	021b      	lsls	r3, r3, #8
   1de10:	68fa      	ldr	r2, [r7, #12]
   1de12:	3201      	adds	r2, #1
   1de14:	7812      	ldrb	r2, [r2, #0]
   1de16:	189b      	adds	r3, r3, r2
   1de18:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   1de1a:	687b      	ldr	r3, [r7, #4]
   1de1c:	681b      	ldr	r3, [r3, #0]
   1de1e:	1c9a      	adds	r2, r3, #2
   1de20:	687b      	ldr	r3, [r7, #4]
   1de22:	601a      	str	r2, [r3, #0]
	return len;
   1de24:	68bb      	ldr	r3, [r7, #8]
}
   1de26:	0018      	movs	r0, r3
   1de28:	46bd      	mov	sp, r7
   1de2a:	b004      	add	sp, #16
   1de2c:	bd80      	pop	{r7, pc}

0001de2e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1de2e:	b580      	push	{r7, lr}
   1de30:	b084      	sub	sp, #16
   1de32:	af00      	add	r7, sp, #0
   1de34:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   1de36:	687b      	ldr	r3, [r7, #4]
   1de38:	681a      	ldr	r2, [r3, #0]
   1de3a:	230f      	movs	r3, #15
   1de3c:	18fb      	adds	r3, r7, r3
   1de3e:	7812      	ldrb	r2, [r2, #0]
   1de40:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1de42:	687b      	ldr	r3, [r7, #4]
   1de44:	681b      	ldr	r3, [r3, #0]
   1de46:	1c5a      	adds	r2, r3, #1
   1de48:	687b      	ldr	r3, [r7, #4]
   1de4a:	601a      	str	r2, [r3, #0]
	return c;
   1de4c:	230f      	movs	r3, #15
   1de4e:	18fb      	adds	r3, r7, r3
   1de50:	781b      	ldrb	r3, [r3, #0]
}
   1de52:	0018      	movs	r0, r3
   1de54:	46bd      	mov	sp, r7
   1de56:	b004      	add	sp, #16
   1de58:	bd80      	pop	{r7, pc}

0001de5a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   1de5a:	b580      	push	{r7, lr}
   1de5c:	b082      	sub	sp, #8
   1de5e:	af00      	add	r7, sp, #0
   1de60:	6078      	str	r0, [r7, #4]
   1de62:	000a      	movs	r2, r1
   1de64:	1cfb      	adds	r3, r7, #3
   1de66:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   1de68:	687b      	ldr	r3, [r7, #4]
   1de6a:	681b      	ldr	r3, [r3, #0]
   1de6c:	1cfa      	adds	r2, r7, #3
   1de6e:	7812      	ldrb	r2, [r2, #0]
   1de70:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1de72:	687b      	ldr	r3, [r7, #4]
   1de74:	681b      	ldr	r3, [r3, #0]
   1de76:	1c5a      	adds	r2, r3, #1
   1de78:	687b      	ldr	r3, [r7, #4]
   1de7a:	601a      	str	r2, [r3, #0]
}
   1de7c:	46c0      	nop			; (mov r8, r8)
   1de7e:	46bd      	mov	sp, r7
   1de80:	b002      	add	sp, #8
   1de82:	bd80      	pop	{r7, pc}

0001de84 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   1de84:	b580      	push	{r7, lr}
   1de86:	b082      	sub	sp, #8
   1de88:	af00      	add	r7, sp, #0
   1de8a:	6078      	str	r0, [r7, #4]
   1de8c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   1de8e:	687b      	ldr	r3, [r7, #4]
   1de90:	681a      	ldr	r2, [r3, #0]
   1de92:	683b      	ldr	r3, [r7, #0]
   1de94:	2b00      	cmp	r3, #0
   1de96:	da00      	bge.n	1de9a <writeInt+0x16>
   1de98:	33ff      	adds	r3, #255	; 0xff
   1de9a:	121b      	asrs	r3, r3, #8
   1de9c:	b2db      	uxtb	r3, r3
   1de9e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1dea0:	687b      	ldr	r3, [r7, #4]
   1dea2:	681b      	ldr	r3, [r3, #0]
   1dea4:	1c5a      	adds	r2, r3, #1
   1dea6:	687b      	ldr	r3, [r7, #4]
   1dea8:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   1deaa:	687b      	ldr	r3, [r7, #4]
   1deac:	681a      	ldr	r2, [r3, #0]
   1deae:	683b      	ldr	r3, [r7, #0]
   1deb0:	4908      	ldr	r1, [pc, #32]	; (1ded4 <writeInt+0x50>)
   1deb2:	400b      	ands	r3, r1
   1deb4:	d503      	bpl.n	1debe <writeInt+0x3a>
   1deb6:	3b01      	subs	r3, #1
   1deb8:	4907      	ldr	r1, [pc, #28]	; (1ded8 <writeInt+0x54>)
   1deba:	430b      	orrs	r3, r1
   1debc:	3301      	adds	r3, #1
   1debe:	b2db      	uxtb	r3, r3
   1dec0:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1dec2:	687b      	ldr	r3, [r7, #4]
   1dec4:	681b      	ldr	r3, [r3, #0]
   1dec6:	1c5a      	adds	r2, r3, #1
   1dec8:	687b      	ldr	r3, [r7, #4]
   1deca:	601a      	str	r2, [r3, #0]
}
   1decc:	46c0      	nop			; (mov r8, r8)
   1dece:	46bd      	mov	sp, r7
   1ded0:	b002      	add	sp, #8
   1ded2:	bd80      	pop	{r7, pc}
   1ded4:	800000ff 	.word	0x800000ff
   1ded8:	ffffff00 	.word	0xffffff00

0001dedc <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1dedc:	b580      	push	{r7, lr}
   1dede:	b084      	sub	sp, #16
   1dee0:	af00      	add	r7, sp, #0
   1dee2:	6078      	str	r0, [r7, #4]
   1dee4:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   1dee6:	683b      	ldr	r3, [r7, #0]
   1dee8:	0018      	movs	r0, r3
   1deea:	4b0d      	ldr	r3, [pc, #52]	; (1df20 <writeCString+0x44>)
   1deec:	4798      	blx	r3
   1deee:	0003      	movs	r3, r0
   1def0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   1def2:	68fa      	ldr	r2, [r7, #12]
   1def4:	687b      	ldr	r3, [r7, #4]
   1def6:	0011      	movs	r1, r2
   1def8:	0018      	movs	r0, r3
   1defa:	4b0a      	ldr	r3, [pc, #40]	; (1df24 <writeCString+0x48>)
   1defc:	4798      	blx	r3
	memcpy(*pptr, string, len);
   1defe:	687b      	ldr	r3, [r7, #4]
   1df00:	681b      	ldr	r3, [r3, #0]
   1df02:	68fa      	ldr	r2, [r7, #12]
   1df04:	6839      	ldr	r1, [r7, #0]
   1df06:	0018      	movs	r0, r3
   1df08:	4b07      	ldr	r3, [pc, #28]	; (1df28 <writeCString+0x4c>)
   1df0a:	4798      	blx	r3
	*pptr += len;
   1df0c:	687b      	ldr	r3, [r7, #4]
   1df0e:	681a      	ldr	r2, [r3, #0]
   1df10:	68fb      	ldr	r3, [r7, #12]
   1df12:	18d2      	adds	r2, r2, r3
   1df14:	687b      	ldr	r3, [r7, #4]
   1df16:	601a      	str	r2, [r3, #0]
}
   1df18:	46c0      	nop			; (mov r8, r8)
   1df1a:	46bd      	mov	sp, r7
   1df1c:	b004      	add	sp, #16
   1df1e:	bd80      	pop	{r7, pc}
   1df20:	00023157 	.word	0x00023157
   1df24:	0001de85 	.word	0x0001de85
   1df28:	00022d85 	.word	0x00022d85

0001df2c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   1df2c:	b580      	push	{r7, lr}
   1df2e:	b084      	sub	sp, #16
   1df30:	af00      	add	r7, sp, #0
   1df32:	60f8      	str	r0, [r7, #12]
   1df34:	0038      	movs	r0, r7
   1df36:	6001      	str	r1, [r0, #0]
   1df38:	6042      	str	r2, [r0, #4]
   1df3a:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   1df3c:	003b      	movs	r3, r7
   1df3e:	685b      	ldr	r3, [r3, #4]
   1df40:	2b00      	cmp	r3, #0
   1df42:	dd17      	ble.n	1df74 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   1df44:	003b      	movs	r3, r7
   1df46:	685a      	ldr	r2, [r3, #4]
   1df48:	68fb      	ldr	r3, [r7, #12]
   1df4a:	0011      	movs	r1, r2
   1df4c:	0018      	movs	r0, r3
   1df4e:	4b14      	ldr	r3, [pc, #80]	; (1dfa0 <writeMQTTString+0x74>)
   1df50:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   1df52:	68fb      	ldr	r3, [r7, #12]
   1df54:	6818      	ldr	r0, [r3, #0]
   1df56:	003b      	movs	r3, r7
   1df58:	6899      	ldr	r1, [r3, #8]
   1df5a:	003b      	movs	r3, r7
   1df5c:	685b      	ldr	r3, [r3, #4]
   1df5e:	001a      	movs	r2, r3
   1df60:	4b10      	ldr	r3, [pc, #64]	; (1dfa4 <writeMQTTString+0x78>)
   1df62:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   1df64:	68fb      	ldr	r3, [r7, #12]
   1df66:	681a      	ldr	r2, [r3, #0]
   1df68:	003b      	movs	r3, r7
   1df6a:	685b      	ldr	r3, [r3, #4]
   1df6c:	18d2      	adds	r2, r2, r3
   1df6e:	68fb      	ldr	r3, [r7, #12]
   1df70:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   1df72:	e010      	b.n	1df96 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   1df74:	003b      	movs	r3, r7
   1df76:	681b      	ldr	r3, [r3, #0]
   1df78:	2b00      	cmp	r3, #0
   1df7a:	d007      	beq.n	1df8c <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   1df7c:	003b      	movs	r3, r7
   1df7e:	681a      	ldr	r2, [r3, #0]
   1df80:	68fb      	ldr	r3, [r7, #12]
   1df82:	0011      	movs	r1, r2
   1df84:	0018      	movs	r0, r3
   1df86:	4b08      	ldr	r3, [pc, #32]	; (1dfa8 <writeMQTTString+0x7c>)
   1df88:	4798      	blx	r3
}
   1df8a:	e004      	b.n	1df96 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   1df8c:	68fb      	ldr	r3, [r7, #12]
   1df8e:	2100      	movs	r1, #0
   1df90:	0018      	movs	r0, r3
   1df92:	4b03      	ldr	r3, [pc, #12]	; (1dfa0 <writeMQTTString+0x74>)
   1df94:	4798      	blx	r3
}
   1df96:	46c0      	nop			; (mov r8, r8)
   1df98:	46bd      	mov	sp, r7
   1df9a:	b004      	add	sp, #16
   1df9c:	bd80      	pop	{r7, pc}
   1df9e:	46c0      	nop			; (mov r8, r8)
   1dfa0:	0001de85 	.word	0x0001de85
   1dfa4:	00022d85 	.word	0x00022d85
   1dfa8:	0001dedd 	.word	0x0001dedd

0001dfac <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   1dfac:	b580      	push	{r7, lr}
   1dfae:	b086      	sub	sp, #24
   1dfb0:	af00      	add	r7, sp, #0
   1dfb2:	60f8      	str	r0, [r7, #12]
   1dfb4:	60b9      	str	r1, [r7, #8]
   1dfb6:	607a      	str	r2, [r7, #4]
	int rc = 0;
   1dfb8:	2300      	movs	r3, #0
   1dfba:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   1dfbc:	687a      	ldr	r2, [r7, #4]
   1dfbe:	68bb      	ldr	r3, [r7, #8]
   1dfc0:	681b      	ldr	r3, [r3, #0]
   1dfc2:	1ad3      	subs	r3, r2, r3
   1dfc4:	2b01      	cmp	r3, #1
   1dfc6:	dd1b      	ble.n	1e000 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   1dfc8:	68bb      	ldr	r3, [r7, #8]
   1dfca:	0018      	movs	r0, r3
   1dfcc:	4b10      	ldr	r3, [pc, #64]	; (1e010 <readMQTTLenString+0x64>)
   1dfce:	4798      	blx	r3
   1dfd0:	0002      	movs	r2, r0
   1dfd2:	68fb      	ldr	r3, [r7, #12]
   1dfd4:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1dfd6:	68bb      	ldr	r3, [r7, #8]
   1dfd8:	681a      	ldr	r2, [r3, #0]
   1dfda:	68fb      	ldr	r3, [r7, #12]
   1dfdc:	685b      	ldr	r3, [r3, #4]
   1dfde:	18d2      	adds	r2, r2, r3
   1dfe0:	687b      	ldr	r3, [r7, #4]
   1dfe2:	429a      	cmp	r2, r3
   1dfe4:	d80c      	bhi.n	1e000 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   1dfe6:	68bb      	ldr	r3, [r7, #8]
   1dfe8:	681a      	ldr	r2, [r3, #0]
   1dfea:	68fb      	ldr	r3, [r7, #12]
   1dfec:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   1dfee:	68bb      	ldr	r3, [r7, #8]
   1dff0:	681a      	ldr	r2, [r3, #0]
   1dff2:	68fb      	ldr	r3, [r7, #12]
   1dff4:	685b      	ldr	r3, [r3, #4]
   1dff6:	18d2      	adds	r2, r2, r3
   1dff8:	68bb      	ldr	r3, [r7, #8]
   1dffa:	601a      	str	r2, [r3, #0]
			rc = 1;
   1dffc:	2301      	movs	r3, #1
   1dffe:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   1e000:	68fb      	ldr	r3, [r7, #12]
   1e002:	2200      	movs	r2, #0
   1e004:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   1e006:	697b      	ldr	r3, [r7, #20]
}
   1e008:	0018      	movs	r0, r3
   1e00a:	46bd      	mov	sp, r7
   1e00c:	b006      	add	sp, #24
   1e00e:	bd80      	pop	{r7, pc}
   1e010:	0001ddfd 	.word	0x0001ddfd

0001e014 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   1e014:	b580      	push	{r7, lr}
   1e016:	b086      	sub	sp, #24
   1e018:	af00      	add	r7, sp, #0
   1e01a:	1d3b      	adds	r3, r7, #4
   1e01c:	6018      	str	r0, [r3, #0]
   1e01e:	6059      	str	r1, [r3, #4]
   1e020:	609a      	str	r2, [r3, #8]
	int rc = 0;
   1e022:	2300      	movs	r3, #0
   1e024:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   1e026:	1d3b      	adds	r3, r7, #4
   1e028:	681b      	ldr	r3, [r3, #0]
   1e02a:	2b00      	cmp	r3, #0
   1e02c:	d007      	beq.n	1e03e <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   1e02e:	1d3b      	adds	r3, r7, #4
   1e030:	681b      	ldr	r3, [r3, #0]
   1e032:	0018      	movs	r0, r3
   1e034:	4b06      	ldr	r3, [pc, #24]	; (1e050 <MQTTstrlen+0x3c>)
   1e036:	4798      	blx	r3
   1e038:	0003      	movs	r3, r0
   1e03a:	617b      	str	r3, [r7, #20]
   1e03c:	e002      	b.n	1e044 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   1e03e:	1d3b      	adds	r3, r7, #4
   1e040:	685b      	ldr	r3, [r3, #4]
   1e042:	617b      	str	r3, [r7, #20]
	return rc;
   1e044:	697b      	ldr	r3, [r7, #20]
}
   1e046:	0018      	movs	r0, r3
   1e048:	46bd      	mov	sp, r7
   1e04a:	b006      	add	sp, #24
   1e04c:	bd80      	pop	{r7, pc}
   1e04e:	46c0      	nop			; (mov r8, r8)
   1e050:	00023157 	.word	0x00023157

0001e054 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1e054:	b580      	push	{r7, lr}
   1e056:	b086      	sub	sp, #24
   1e058:	af00      	add	r7, sp, #0
   1e05a:	6078      	str	r0, [r7, #4]
   1e05c:	6039      	str	r1, [r7, #0]
	int alen = 0,
   1e05e:	2300      	movs	r3, #0
   1e060:	617b      	str	r3, [r7, #20]
		blen = 0;
   1e062:	2300      	movs	r3, #0
   1e064:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   1e066:	687b      	ldr	r3, [r7, #4]
   1e068:	681b      	ldr	r3, [r3, #0]
   1e06a:	2b00      	cmp	r3, #0
   1e06c:	d00a      	beq.n	1e084 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   1e06e:	687b      	ldr	r3, [r7, #4]
   1e070:	681b      	ldr	r3, [r3, #0]
   1e072:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   1e074:	687b      	ldr	r3, [r7, #4]
   1e076:	681b      	ldr	r3, [r3, #0]
   1e078:	0018      	movs	r0, r3
   1e07a:	4b12      	ldr	r3, [pc, #72]	; (1e0c4 <MQTTPacket_equals+0x70>)
   1e07c:	4798      	blx	r3
   1e07e:	0003      	movs	r3, r0
   1e080:	617b      	str	r3, [r7, #20]
   1e082:	e005      	b.n	1e090 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   1e084:	687b      	ldr	r3, [r7, #4]
   1e086:	689b      	ldr	r3, [r3, #8]
   1e088:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   1e08a:	687b      	ldr	r3, [r7, #4]
   1e08c:	685b      	ldr	r3, [r3, #4]
   1e08e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   1e090:	683b      	ldr	r3, [r7, #0]
   1e092:	0018      	movs	r0, r3
   1e094:	4b0b      	ldr	r3, [pc, #44]	; (1e0c4 <MQTTPacket_equals+0x70>)
   1e096:	4798      	blx	r3
   1e098:	0003      	movs	r3, r0
   1e09a:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   1e09c:	697a      	ldr	r2, [r7, #20]
   1e09e:	68fb      	ldr	r3, [r7, #12]
   1e0a0:	429a      	cmp	r2, r3
   1e0a2:	d109      	bne.n	1e0b8 <MQTTPacket_equals+0x64>
   1e0a4:	697a      	ldr	r2, [r7, #20]
   1e0a6:	6839      	ldr	r1, [r7, #0]
   1e0a8:	693b      	ldr	r3, [r7, #16]
   1e0aa:	0018      	movs	r0, r3
   1e0ac:	4b06      	ldr	r3, [pc, #24]	; (1e0c8 <MQTTPacket_equals+0x74>)
   1e0ae:	4798      	blx	r3
   1e0b0:	1e03      	subs	r3, r0, #0
   1e0b2:	d101      	bne.n	1e0b8 <MQTTPacket_equals+0x64>
   1e0b4:	2301      	movs	r3, #1
   1e0b6:	e000      	b.n	1e0ba <MQTTPacket_equals+0x66>
   1e0b8:	2300      	movs	r3, #0
}
   1e0ba:	0018      	movs	r0, r3
   1e0bc:	46bd      	mov	sp, r7
   1e0be:	b006      	add	sp, #24
   1e0c0:	bd80      	pop	{r7, pc}
   1e0c2:	46c0      	nop			; (mov r8, r8)
   1e0c4:	00023157 	.word	0x00023157
   1e0c8:	00023165 	.word	0x00023165

0001e0cc <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   1e0cc:	b580      	push	{r7, lr}
   1e0ce:	b086      	sub	sp, #24
   1e0d0:	af00      	add	r7, sp, #0
   1e0d2:	60f8      	str	r0, [r7, #12]
   1e0d4:	0038      	movs	r0, r7
   1e0d6:	6001      	str	r1, [r0, #0]
   1e0d8:	6042      	str	r2, [r0, #4]
   1e0da:	6083      	str	r3, [r0, #8]
	int len = 0;
   1e0dc:	2300      	movs	r3, #0
   1e0de:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   1e0e0:	003b      	movs	r3, r7
   1e0e2:	6818      	ldr	r0, [r3, #0]
   1e0e4:	6859      	ldr	r1, [r3, #4]
   1e0e6:	689a      	ldr	r2, [r3, #8]
   1e0e8:	4b09      	ldr	r3, [pc, #36]	; (1e110 <MQTTSerialize_publishLength+0x44>)
   1e0ea:	4798      	blx	r3
   1e0ec:	0003      	movs	r3, r0
   1e0ee:	1c9a      	adds	r2, r3, #2
   1e0f0:	6a3b      	ldr	r3, [r7, #32]
   1e0f2:	18d3      	adds	r3, r2, r3
   1e0f4:	697a      	ldr	r2, [r7, #20]
   1e0f6:	18d3      	adds	r3, r2, r3
   1e0f8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   1e0fa:	68fb      	ldr	r3, [r7, #12]
   1e0fc:	2b00      	cmp	r3, #0
   1e0fe:	dd02      	ble.n	1e106 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   1e100:	697b      	ldr	r3, [r7, #20]
   1e102:	3302      	adds	r3, #2
   1e104:	617b      	str	r3, [r7, #20]
	return len;
   1e106:	697b      	ldr	r3, [r7, #20]
}
   1e108:	0018      	movs	r0, r3
   1e10a:	46bd      	mov	sp, r7
   1e10c:	b006      	add	sp, #24
   1e10e:	bd80      	pop	{r7, pc}
   1e110:	0001e015 	.word	0x0001e015

0001e114 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   1e114:	b590      	push	{r4, r7, lr}
   1e116:	b08b      	sub	sp, #44	; 0x2c
   1e118:	af02      	add	r7, sp, #8
   1e11a:	60f8      	str	r0, [r7, #12]
   1e11c:	60b9      	str	r1, [r7, #8]
   1e11e:	603b      	str	r3, [r7, #0]
   1e120:	1dfb      	adds	r3, r7, #7
   1e122:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   1e124:	68fb      	ldr	r3, [r7, #12]
   1e126:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   1e128:	2300      	movs	r3, #0
   1e12a:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   1e12c:	2300      	movs	r3, #0
   1e12e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1e130:	2300      	movs	r3, #0
   1e132:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   1e134:	2308      	movs	r3, #8
   1e136:	2230      	movs	r2, #48	; 0x30
   1e138:	4694      	mov	ip, r2
   1e13a:	44bc      	add	ip, r7
   1e13c:	4463      	add	r3, ip
   1e13e:	6838      	ldr	r0, [r7, #0]
   1e140:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1e142:	9200      	str	r2, [sp, #0]
   1e144:	6819      	ldr	r1, [r3, #0]
   1e146:	685a      	ldr	r2, [r3, #4]
   1e148:	689b      	ldr	r3, [r3, #8]
   1e14a:	4c46      	ldr	r4, [pc, #280]	; (1e264 <MQTTSerialize_publish+0x150>)
   1e14c:	47a0      	blx	r4
   1e14e:	0003      	movs	r3, r0
   1e150:	61bb      	str	r3, [r7, #24]
   1e152:	69bb      	ldr	r3, [r7, #24]
   1e154:	0018      	movs	r0, r3
   1e156:	4b44      	ldr	r3, [pc, #272]	; (1e268 <MQTTSerialize_publish+0x154>)
   1e158:	4798      	blx	r3
   1e15a:	0002      	movs	r2, r0
   1e15c:	68bb      	ldr	r3, [r7, #8]
   1e15e:	429a      	cmp	r2, r3
   1e160:	dd03      	ble.n	1e16a <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1e162:	2302      	movs	r3, #2
   1e164:	425b      	negs	r3, r3
   1e166:	61fb      	str	r3, [r7, #28]
		goto exit;
   1e168:	e077      	b.n	1e25a <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   1e16a:	2310      	movs	r3, #16
   1e16c:	18fb      	adds	r3, r7, r3
   1e16e:	781a      	ldrb	r2, [r3, #0]
   1e170:	210f      	movs	r1, #15
   1e172:	400a      	ands	r2, r1
   1e174:	1c11      	adds	r1, r2, #0
   1e176:	2230      	movs	r2, #48	; 0x30
   1e178:	430a      	orrs	r2, r1
   1e17a:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1e17c:	1dfb      	adds	r3, r7, #7
   1e17e:	781b      	ldrb	r3, [r3, #0]
   1e180:	2201      	movs	r2, #1
   1e182:	4013      	ands	r3, r2
   1e184:	b2da      	uxtb	r2, r3
   1e186:	2310      	movs	r3, #16
   1e188:	18fb      	adds	r3, r7, r3
   1e18a:	2101      	movs	r1, #1
   1e18c:	400a      	ands	r2, r1
   1e18e:	00d0      	lsls	r0, r2, #3
   1e190:	781a      	ldrb	r2, [r3, #0]
   1e192:	2108      	movs	r1, #8
   1e194:	438a      	bics	r2, r1
   1e196:	1c11      	adds	r1, r2, #0
   1e198:	1c02      	adds	r2, r0, #0
   1e19a:	430a      	orrs	r2, r1
   1e19c:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   1e19e:	683b      	ldr	r3, [r7, #0]
   1e1a0:	b2db      	uxtb	r3, r3
   1e1a2:	1c1a      	adds	r2, r3, #0
   1e1a4:	2303      	movs	r3, #3
   1e1a6:	4013      	ands	r3, r2
   1e1a8:	b2da      	uxtb	r2, r3
   1e1aa:	2310      	movs	r3, #16
   1e1ac:	18fb      	adds	r3, r7, r3
   1e1ae:	2103      	movs	r1, #3
   1e1b0:	400a      	ands	r2, r1
   1e1b2:	1890      	adds	r0, r2, r2
   1e1b4:	781a      	ldrb	r2, [r3, #0]
   1e1b6:	2106      	movs	r1, #6
   1e1b8:	438a      	bics	r2, r1
   1e1ba:	1c11      	adds	r1, r2, #0
   1e1bc:	1c02      	adds	r2, r0, #0
   1e1be:	430a      	orrs	r2, r1
   1e1c0:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   1e1c2:	2330      	movs	r3, #48	; 0x30
   1e1c4:	18fb      	adds	r3, r7, r3
   1e1c6:	781b      	ldrb	r3, [r3, #0]
   1e1c8:	2201      	movs	r2, #1
   1e1ca:	4013      	ands	r3, r2
   1e1cc:	b2da      	uxtb	r2, r3
   1e1ce:	2310      	movs	r3, #16
   1e1d0:	18fb      	adds	r3, r7, r3
   1e1d2:	2101      	movs	r1, #1
   1e1d4:	400a      	ands	r2, r1
   1e1d6:	0010      	movs	r0, r2
   1e1d8:	781a      	ldrb	r2, [r3, #0]
   1e1da:	2101      	movs	r1, #1
   1e1dc:	438a      	bics	r2, r1
   1e1de:	1c11      	adds	r1, r2, #0
   1e1e0:	1c02      	adds	r2, r0, #0
   1e1e2:	430a      	orrs	r2, r1
   1e1e4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1e1e6:	2310      	movs	r3, #16
   1e1e8:	18fb      	adds	r3, r7, r3
   1e1ea:	781a      	ldrb	r2, [r3, #0]
   1e1ec:	2314      	movs	r3, #20
   1e1ee:	18fb      	adds	r3, r7, r3
   1e1f0:	0011      	movs	r1, r2
   1e1f2:	0018      	movs	r0, r3
   1e1f4:	4b1d      	ldr	r3, [pc, #116]	; (1e26c <MQTTSerialize_publish+0x158>)
   1e1f6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1e1f8:	697b      	ldr	r3, [r7, #20]
   1e1fa:	69ba      	ldr	r2, [r7, #24]
   1e1fc:	0011      	movs	r1, r2
   1e1fe:	0018      	movs	r0, r3
   1e200:	4b1b      	ldr	r3, [pc, #108]	; (1e270 <MQTTSerialize_publish+0x15c>)
   1e202:	4798      	blx	r3
   1e204:	0002      	movs	r2, r0
   1e206:	697b      	ldr	r3, [r7, #20]
   1e208:	189b      	adds	r3, r3, r2
   1e20a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   1e20c:	2308      	movs	r3, #8
   1e20e:	2230      	movs	r2, #48	; 0x30
   1e210:	4694      	mov	ip, r2
   1e212:	44bc      	add	ip, r7
   1e214:	4463      	add	r3, ip
   1e216:	2214      	movs	r2, #20
   1e218:	18b8      	adds	r0, r7, r2
   1e21a:	6819      	ldr	r1, [r3, #0]
   1e21c:	685a      	ldr	r2, [r3, #4]
   1e21e:	689b      	ldr	r3, [r3, #8]
   1e220:	4c14      	ldr	r4, [pc, #80]	; (1e274 <MQTTSerialize_publish+0x160>)
   1e222:	47a0      	blx	r4

	if (qos > 0)
   1e224:	683b      	ldr	r3, [r7, #0]
   1e226:	2b00      	cmp	r3, #0
   1e228:	dd08      	ble.n	1e23c <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   1e22a:	2334      	movs	r3, #52	; 0x34
   1e22c:	18fb      	adds	r3, r7, r3
   1e22e:	881a      	ldrh	r2, [r3, #0]
   1e230:	2314      	movs	r3, #20
   1e232:	18fb      	adds	r3, r7, r3
   1e234:	0011      	movs	r1, r2
   1e236:	0018      	movs	r0, r3
   1e238:	4b0f      	ldr	r3, [pc, #60]	; (1e278 <MQTTSerialize_publish+0x164>)
   1e23a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1e23c:	697b      	ldr	r3, [r7, #20]
   1e23e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1e240:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1e242:	0018      	movs	r0, r3
   1e244:	4b0d      	ldr	r3, [pc, #52]	; (1e27c <MQTTSerialize_publish+0x168>)
   1e246:	4798      	blx	r3
	ptr += payloadlen;
   1e248:	697a      	ldr	r2, [r7, #20]
   1e24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e24c:	18d3      	adds	r3, r2, r3
   1e24e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   1e250:	697b      	ldr	r3, [r7, #20]
   1e252:	001a      	movs	r2, r3
   1e254:	68fb      	ldr	r3, [r7, #12]
   1e256:	1ad3      	subs	r3, r2, r3
   1e258:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1e25a:	69fb      	ldr	r3, [r7, #28]
}
   1e25c:	0018      	movs	r0, r3
   1e25e:	46bd      	mov	sp, r7
   1e260:	b009      	add	sp, #36	; 0x24
   1e262:	bd90      	pop	{r4, r7, pc}
   1e264:	0001e0cd 	.word	0x0001e0cd
   1e268:	0001dd39 	.word	0x0001dd39
   1e26c:	0001de5b 	.word	0x0001de5b
   1e270:	0001dc41 	.word	0x0001dc41
   1e274:	0001df2d 	.word	0x0001df2d
   1e278:	0001de85 	.word	0x0001de85
   1e27c:	00022d85 	.word	0x00022d85

0001e280 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   1e280:	b580      	push	{r7, lr}
   1e282:	b088      	sub	sp, #32
   1e284:	af00      	add	r7, sp, #0
   1e286:	60f8      	str	r0, [r7, #12]
   1e288:	60b9      	str	r1, [r7, #8]
   1e28a:	0019      	movs	r1, r3
   1e28c:	1dfb      	adds	r3, r7, #7
   1e28e:	701a      	strb	r2, [r3, #0]
   1e290:	1dbb      	adds	r3, r7, #6
   1e292:	1c0a      	adds	r2, r1, #0
   1e294:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1e296:	2300      	movs	r3, #0
   1e298:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1e29a:	2300      	movs	r3, #0
   1e29c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1e29e:	68fb      	ldr	r3, [r7, #12]
   1e2a0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   1e2a2:	68bb      	ldr	r3, [r7, #8]
   1e2a4:	2b03      	cmp	r3, #3
   1e2a6:	dc03      	bgt.n	1e2b0 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1e2a8:	2302      	movs	r3, #2
   1e2aa:	425b      	negs	r3, r3
   1e2ac:	61fb      	str	r3, [r7, #28]
		goto exit;
   1e2ae:	e055      	b.n	1e35c <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   1e2b0:	1dfb      	adds	r3, r7, #7
   1e2b2:	781b      	ldrb	r3, [r3, #0]
   1e2b4:	220f      	movs	r2, #15
   1e2b6:	4013      	ands	r3, r2
   1e2b8:	b2da      	uxtb	r2, r3
   1e2ba:	2318      	movs	r3, #24
   1e2bc:	18fb      	adds	r3, r7, r3
   1e2be:	0110      	lsls	r0, r2, #4
   1e2c0:	781a      	ldrb	r2, [r3, #0]
   1e2c2:	210f      	movs	r1, #15
   1e2c4:	400a      	ands	r2, r1
   1e2c6:	1c11      	adds	r1, r2, #0
   1e2c8:	1c02      	adds	r2, r0, #0
   1e2ca:	430a      	orrs	r2, r1
   1e2cc:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1e2ce:	1dbb      	adds	r3, r7, #6
   1e2d0:	781b      	ldrb	r3, [r3, #0]
   1e2d2:	2201      	movs	r2, #1
   1e2d4:	4013      	ands	r3, r2
   1e2d6:	b2da      	uxtb	r2, r3
   1e2d8:	2318      	movs	r3, #24
   1e2da:	18fb      	adds	r3, r7, r3
   1e2dc:	2101      	movs	r1, #1
   1e2de:	400a      	ands	r2, r1
   1e2e0:	00d0      	lsls	r0, r2, #3
   1e2e2:	781a      	ldrb	r2, [r3, #0]
   1e2e4:	2108      	movs	r1, #8
   1e2e6:	438a      	bics	r2, r1
   1e2e8:	1c11      	adds	r1, r2, #0
   1e2ea:	1c02      	adds	r2, r0, #0
   1e2ec:	430a      	orrs	r2, r1
   1e2ee:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1e2f0:	1dfb      	adds	r3, r7, #7
   1e2f2:	781b      	ldrb	r3, [r3, #0]
   1e2f4:	3b06      	subs	r3, #6
   1e2f6:	425a      	negs	r2, r3
   1e2f8:	4153      	adcs	r3, r2
   1e2fa:	b2db      	uxtb	r3, r3
   1e2fc:	1c1a      	adds	r2, r3, #0
   1e2fe:	2303      	movs	r3, #3
   1e300:	4013      	ands	r3, r2
   1e302:	b2da      	uxtb	r2, r3
   1e304:	2318      	movs	r3, #24
   1e306:	18fb      	adds	r3, r7, r3
   1e308:	2103      	movs	r1, #3
   1e30a:	400a      	ands	r2, r1
   1e30c:	1890      	adds	r0, r2, r2
   1e30e:	781a      	ldrb	r2, [r3, #0]
   1e310:	2106      	movs	r1, #6
   1e312:	438a      	bics	r2, r1
   1e314:	1c11      	adds	r1, r2, #0
   1e316:	1c02      	adds	r2, r0, #0
   1e318:	430a      	orrs	r2, r1
   1e31a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1e31c:	2318      	movs	r3, #24
   1e31e:	18fb      	adds	r3, r7, r3
   1e320:	781a      	ldrb	r2, [r3, #0]
   1e322:	2314      	movs	r3, #20
   1e324:	18fb      	adds	r3, r7, r3
   1e326:	0011      	movs	r1, r2
   1e328:	0018      	movs	r0, r3
   1e32a:	4b0f      	ldr	r3, [pc, #60]	; (1e368 <MQTTSerialize_ack+0xe8>)
   1e32c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   1e32e:	697b      	ldr	r3, [r7, #20]
   1e330:	2102      	movs	r1, #2
   1e332:	0018      	movs	r0, r3
   1e334:	4b0d      	ldr	r3, [pc, #52]	; (1e36c <MQTTSerialize_ack+0xec>)
   1e336:	4798      	blx	r3
   1e338:	0002      	movs	r2, r0
   1e33a:	697b      	ldr	r3, [r7, #20]
   1e33c:	189b      	adds	r3, r3, r2
   1e33e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   1e340:	2328      	movs	r3, #40	; 0x28
   1e342:	18fb      	adds	r3, r7, r3
   1e344:	881a      	ldrh	r2, [r3, #0]
   1e346:	2314      	movs	r3, #20
   1e348:	18fb      	adds	r3, r7, r3
   1e34a:	0011      	movs	r1, r2
   1e34c:	0018      	movs	r0, r3
   1e34e:	4b08      	ldr	r3, [pc, #32]	; (1e370 <MQTTSerialize_ack+0xf0>)
   1e350:	4798      	blx	r3
	rc = ptr - buf;
   1e352:	697b      	ldr	r3, [r7, #20]
   1e354:	001a      	movs	r2, r3
   1e356:	68fb      	ldr	r3, [r7, #12]
   1e358:	1ad3      	subs	r3, r2, r3
   1e35a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1e35c:	69fb      	ldr	r3, [r7, #28]
}
   1e35e:	0018      	movs	r0, r3
   1e360:	46bd      	mov	sp, r7
   1e362:	b008      	add	sp, #32
   1e364:	bd80      	pop	{r7, pc}
   1e366:	46c0      	nop			; (mov r8, r8)
   1e368:	0001de5b 	.word	0x0001de5b
   1e36c:	0001dc41 	.word	0x0001dc41
   1e370:	0001de85 	.word	0x0001de85

0001e374 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   1e374:	b580      	push	{r7, lr}
   1e376:	b084      	sub	sp, #16
   1e378:	af00      	add	r7, sp, #0
   1e37a:	6078      	str	r0, [r7, #4]
   1e37c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   1e37e:	2302      	movs	r3, #2
   1e380:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   1e382:	2300      	movs	r3, #0
   1e384:	60fb      	str	r3, [r7, #12]
   1e386:	e014      	b.n	1e3b2 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   1e388:	68fa      	ldr	r2, [r7, #12]
   1e38a:	0013      	movs	r3, r2
   1e38c:	005b      	lsls	r3, r3, #1
   1e38e:	189b      	adds	r3, r3, r2
   1e390:	009b      	lsls	r3, r3, #2
   1e392:	001a      	movs	r2, r3
   1e394:	683b      	ldr	r3, [r7, #0]
   1e396:	189b      	adds	r3, r3, r2
   1e398:	6818      	ldr	r0, [r3, #0]
   1e39a:	6859      	ldr	r1, [r3, #4]
   1e39c:	689a      	ldr	r2, [r3, #8]
   1e39e:	4b09      	ldr	r3, [pc, #36]	; (1e3c4 <MQTTSerialize_subscribeLength+0x50>)
   1e3a0:	4798      	blx	r3
   1e3a2:	0003      	movs	r3, r0
   1e3a4:	3303      	adds	r3, #3
   1e3a6:	68ba      	ldr	r2, [r7, #8]
   1e3a8:	18d3      	adds	r3, r2, r3
   1e3aa:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   1e3ac:	68fb      	ldr	r3, [r7, #12]
   1e3ae:	3301      	adds	r3, #1
   1e3b0:	60fb      	str	r3, [r7, #12]
   1e3b2:	68fa      	ldr	r2, [r7, #12]
   1e3b4:	687b      	ldr	r3, [r7, #4]
   1e3b6:	429a      	cmp	r2, r3
   1e3b8:	dbe6      	blt.n	1e388 <MQTTSerialize_subscribeLength+0x14>
	return len;
   1e3ba:	68bb      	ldr	r3, [r7, #8]
}
   1e3bc:	0018      	movs	r0, r3
   1e3be:	46bd      	mov	sp, r7
   1e3c0:	b004      	add	sp, #16
   1e3c2:	bd80      	pop	{r7, pc}
   1e3c4:	0001e015 	.word	0x0001e015

0001e3c8 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1e3c8:	b590      	push	{r4, r7, lr}
   1e3ca:	b08b      	sub	sp, #44	; 0x2c
   1e3cc:	af00      	add	r7, sp, #0
   1e3ce:	60f8      	str	r0, [r7, #12]
   1e3d0:	60b9      	str	r1, [r7, #8]
   1e3d2:	0019      	movs	r1, r3
   1e3d4:	1dfb      	adds	r3, r7, #7
   1e3d6:	701a      	strb	r2, [r3, #0]
   1e3d8:	1d3b      	adds	r3, r7, #4
   1e3da:	1c0a      	adds	r2, r1, #0
   1e3dc:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   1e3de:	68fb      	ldr	r3, [r7, #12]
   1e3e0:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   1e3e2:	2300      	movs	r3, #0
   1e3e4:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   1e3e6:	2300      	movs	r3, #0
   1e3e8:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   1e3ea:	2300      	movs	r3, #0
   1e3ec:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   1e3ee:	2300      	movs	r3, #0
   1e3f0:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   1e3f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1e3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e3f6:	0011      	movs	r1, r2
   1e3f8:	0018      	movs	r0, r3
   1e3fa:	4b41      	ldr	r3, [pc, #260]	; (1e500 <MQTTSerialize_subscribe+0x138>)
   1e3fc:	4798      	blx	r3
   1e3fe:	0003      	movs	r3, r0
   1e400:	61fb      	str	r3, [r7, #28]
   1e402:	69fb      	ldr	r3, [r7, #28]
   1e404:	0018      	movs	r0, r3
   1e406:	4b3f      	ldr	r3, [pc, #252]	; (1e504 <MQTTSerialize_subscribe+0x13c>)
   1e408:	4798      	blx	r3
   1e40a:	0002      	movs	r2, r0
   1e40c:	68bb      	ldr	r3, [r7, #8]
   1e40e:	429a      	cmp	r2, r3
   1e410:	dd03      	ble.n	1e41a <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1e412:	2302      	movs	r3, #2
   1e414:	425b      	negs	r3, r3
   1e416:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1e418:	e06c      	b.n	1e4f4 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   1e41a:	2314      	movs	r3, #20
   1e41c:	18fb      	adds	r3, r7, r3
   1e41e:	2200      	movs	r2, #0
   1e420:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   1e422:	2314      	movs	r3, #20
   1e424:	18fb      	adds	r3, r7, r3
   1e426:	781a      	ldrb	r2, [r3, #0]
   1e428:	210f      	movs	r1, #15
   1e42a:	400a      	ands	r2, r1
   1e42c:	1c11      	adds	r1, r2, #0
   1e42e:	2280      	movs	r2, #128	; 0x80
   1e430:	4252      	negs	r2, r2
   1e432:	430a      	orrs	r2, r1
   1e434:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1e436:	1dfb      	adds	r3, r7, #7
   1e438:	781b      	ldrb	r3, [r3, #0]
   1e43a:	2201      	movs	r2, #1
   1e43c:	4013      	ands	r3, r2
   1e43e:	b2da      	uxtb	r2, r3
   1e440:	2314      	movs	r3, #20
   1e442:	18fb      	adds	r3, r7, r3
   1e444:	2101      	movs	r1, #1
   1e446:	400a      	ands	r2, r1
   1e448:	00d0      	lsls	r0, r2, #3
   1e44a:	781a      	ldrb	r2, [r3, #0]
   1e44c:	2108      	movs	r1, #8
   1e44e:	438a      	bics	r2, r1
   1e450:	1c11      	adds	r1, r2, #0
   1e452:	1c02      	adds	r2, r0, #0
   1e454:	430a      	orrs	r2, r1
   1e456:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   1e458:	2314      	movs	r3, #20
   1e45a:	18fb      	adds	r3, r7, r3
   1e45c:	781a      	ldrb	r2, [r3, #0]
   1e45e:	2106      	movs	r1, #6
   1e460:	438a      	bics	r2, r1
   1e462:	1c11      	adds	r1, r2, #0
   1e464:	2202      	movs	r2, #2
   1e466:	430a      	orrs	r2, r1
   1e468:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1e46a:	2314      	movs	r3, #20
   1e46c:	18fb      	adds	r3, r7, r3
   1e46e:	781a      	ldrb	r2, [r3, #0]
   1e470:	2318      	movs	r3, #24
   1e472:	18fb      	adds	r3, r7, r3
   1e474:	0011      	movs	r1, r2
   1e476:	0018      	movs	r0, r3
   1e478:	4b23      	ldr	r3, [pc, #140]	; (1e508 <MQTTSerialize_subscribe+0x140>)
   1e47a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1e47c:	69bb      	ldr	r3, [r7, #24]
   1e47e:	69fa      	ldr	r2, [r7, #28]
   1e480:	0011      	movs	r1, r2
   1e482:	0018      	movs	r0, r3
   1e484:	4b21      	ldr	r3, [pc, #132]	; (1e50c <MQTTSerialize_subscribe+0x144>)
   1e486:	4798      	blx	r3
   1e488:	0002      	movs	r2, r0
   1e48a:	69bb      	ldr	r3, [r7, #24]
   1e48c:	189b      	adds	r3, r3, r2
   1e48e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   1e490:	1d3b      	adds	r3, r7, #4
   1e492:	881a      	ldrh	r2, [r3, #0]
   1e494:	2318      	movs	r3, #24
   1e496:	18fb      	adds	r3, r7, r3
   1e498:	0011      	movs	r1, r2
   1e49a:	0018      	movs	r0, r3
   1e49c:	4b1c      	ldr	r3, [pc, #112]	; (1e510 <MQTTSerialize_subscribe+0x148>)
   1e49e:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1e4a0:	2300      	movs	r3, #0
   1e4a2:	623b      	str	r3, [r7, #32]
   1e4a4:	e01d      	b.n	1e4e2 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1e4a6:	6a3a      	ldr	r2, [r7, #32]
   1e4a8:	0013      	movs	r3, r2
   1e4aa:	005b      	lsls	r3, r3, #1
   1e4ac:	189b      	adds	r3, r3, r2
   1e4ae:	009b      	lsls	r3, r3, #2
   1e4b0:	001a      	movs	r2, r3
   1e4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e4b4:	189b      	adds	r3, r3, r2
   1e4b6:	2218      	movs	r2, #24
   1e4b8:	18b8      	adds	r0, r7, r2
   1e4ba:	6819      	ldr	r1, [r3, #0]
   1e4bc:	685a      	ldr	r2, [r3, #4]
   1e4be:	689b      	ldr	r3, [r3, #8]
   1e4c0:	4c14      	ldr	r4, [pc, #80]	; (1e514 <MQTTSerialize_subscribe+0x14c>)
   1e4c2:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   1e4c4:	6a3b      	ldr	r3, [r7, #32]
   1e4c6:	009b      	lsls	r3, r3, #2
   1e4c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1e4ca:	18d3      	adds	r3, r2, r3
   1e4cc:	681b      	ldr	r3, [r3, #0]
   1e4ce:	b2da      	uxtb	r2, r3
   1e4d0:	2318      	movs	r3, #24
   1e4d2:	18fb      	adds	r3, r7, r3
   1e4d4:	0011      	movs	r1, r2
   1e4d6:	0018      	movs	r0, r3
   1e4d8:	4b0b      	ldr	r3, [pc, #44]	; (1e508 <MQTTSerialize_subscribe+0x140>)
   1e4da:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   1e4dc:	6a3b      	ldr	r3, [r7, #32]
   1e4de:	3301      	adds	r3, #1
   1e4e0:	623b      	str	r3, [r7, #32]
   1e4e2:	6a3a      	ldr	r2, [r7, #32]
   1e4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e4e6:	429a      	cmp	r2, r3
   1e4e8:	dbdd      	blt.n	1e4a6 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   1e4ea:	69bb      	ldr	r3, [r7, #24]
   1e4ec:	001a      	movs	r2, r3
   1e4ee:	68fb      	ldr	r3, [r7, #12]
   1e4f0:	1ad3      	subs	r3, r2, r3
   1e4f2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1e4f6:	0018      	movs	r0, r3
   1e4f8:	46bd      	mov	sp, r7
   1e4fa:	b00b      	add	sp, #44	; 0x2c
   1e4fc:	bd90      	pop	{r4, r7, pc}
   1e4fe:	46c0      	nop			; (mov r8, r8)
   1e500:	0001e375 	.word	0x0001e375
   1e504:	0001dd39 	.word	0x0001dd39
   1e508:	0001de5b 	.word	0x0001de5b
   1e50c:	0001dc41 	.word	0x0001dc41
   1e510:	0001de85 	.word	0x0001de85
   1e514:	0001df2d 	.word	0x0001df2d

0001e518 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   1e518:	b590      	push	{r4, r7, lr}
   1e51a:	b08b      	sub	sp, #44	; 0x2c
   1e51c:	af00      	add	r7, sp, #0
   1e51e:	60f8      	str	r0, [r7, #12]
   1e520:	60b9      	str	r1, [r7, #8]
   1e522:	607a      	str	r2, [r7, #4]
   1e524:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1e526:	2300      	movs	r3, #0
   1e528:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1e52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e52c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1e52e:	2300      	movs	r3, #0
   1e530:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1e532:	2300      	movs	r3, #0
   1e534:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1e536:	2318      	movs	r3, #24
   1e538:	18fb      	adds	r3, r7, r3
   1e53a:	0018      	movs	r0, r3
   1e53c:	4b2c      	ldr	r3, [pc, #176]	; (1e5f0 <MQTTDeserialize_suback+0xd8>)
   1e53e:	4798      	blx	r3
   1e540:	0003      	movs	r3, r0
   1e542:	001a      	movs	r2, r3
   1e544:	231c      	movs	r3, #28
   1e546:	18fb      	adds	r3, r7, r3
   1e548:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   1e54a:	231c      	movs	r3, #28
   1e54c:	18fb      	adds	r3, r7, r3
   1e54e:	781b      	ldrb	r3, [r3, #0]
   1e550:	220f      	movs	r2, #15
   1e552:	4393      	bics	r3, r2
   1e554:	b2db      	uxtb	r3, r3
   1e556:	2b90      	cmp	r3, #144	; 0x90
   1e558:	d142      	bne.n	1e5e0 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1e55a:	69bb      	ldr	r3, [r7, #24]
   1e55c:	2214      	movs	r2, #20
   1e55e:	18ba      	adds	r2, r7, r2
   1e560:	0011      	movs	r1, r2
   1e562:	0018      	movs	r0, r3
   1e564:	4b23      	ldr	r3, [pc, #140]	; (1e5f4 <MQTTDeserialize_suback+0xdc>)
   1e566:	4798      	blx	r3
   1e568:	0003      	movs	r3, r0
   1e56a:	627b      	str	r3, [r7, #36]	; 0x24
   1e56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e56e:	69bb      	ldr	r3, [r7, #24]
   1e570:	189b      	adds	r3, r3, r2
   1e572:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1e574:	69bb      	ldr	r3, [r7, #24]
   1e576:	697a      	ldr	r2, [r7, #20]
   1e578:	189b      	adds	r3, r3, r2
   1e57a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1e57c:	6a3b      	ldr	r3, [r7, #32]
   1e57e:	69ba      	ldr	r2, [r7, #24]
   1e580:	1a9b      	subs	r3, r3, r2
   1e582:	2b01      	cmp	r3, #1
   1e584:	dd2e      	ble.n	1e5e4 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   1e586:	2318      	movs	r3, #24
   1e588:	18fb      	adds	r3, r7, r3
   1e58a:	0018      	movs	r0, r3
   1e58c:	4b1a      	ldr	r3, [pc, #104]	; (1e5f8 <MQTTDeserialize_suback+0xe0>)
   1e58e:	4798      	blx	r3
   1e590:	0003      	movs	r3, r0
   1e592:	b29a      	uxth	r2, r3
   1e594:	68fb      	ldr	r3, [r7, #12]
   1e596:	801a      	strh	r2, [r3, #0]

	*count = 0;
   1e598:	687b      	ldr	r3, [r7, #4]
   1e59a:	2200      	movs	r2, #0
   1e59c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   1e59e:	e018      	b.n	1e5d2 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   1e5a0:	687b      	ldr	r3, [r7, #4]
   1e5a2:	681a      	ldr	r2, [r3, #0]
   1e5a4:	68bb      	ldr	r3, [r7, #8]
   1e5a6:	429a      	cmp	r2, r3
   1e5a8:	dd03      	ble.n	1e5b2 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   1e5aa:	2301      	movs	r3, #1
   1e5ac:	425b      	negs	r3, r3
   1e5ae:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   1e5b0:	e019      	b.n	1e5e6 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   1e5b2:	687b      	ldr	r3, [r7, #4]
   1e5b4:	681a      	ldr	r2, [r3, #0]
   1e5b6:	1c51      	adds	r1, r2, #1
   1e5b8:	687b      	ldr	r3, [r7, #4]
   1e5ba:	6019      	str	r1, [r3, #0]
   1e5bc:	0013      	movs	r3, r2
   1e5be:	009b      	lsls	r3, r3, #2
   1e5c0:	683a      	ldr	r2, [r7, #0]
   1e5c2:	18d4      	adds	r4, r2, r3
   1e5c4:	2318      	movs	r3, #24
   1e5c6:	18fb      	adds	r3, r7, r3
   1e5c8:	0018      	movs	r0, r3
   1e5ca:	4b09      	ldr	r3, [pc, #36]	; (1e5f0 <MQTTDeserialize_suback+0xd8>)
   1e5cc:	4798      	blx	r3
   1e5ce:	0003      	movs	r3, r0
   1e5d0:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   1e5d2:	69ba      	ldr	r2, [r7, #24]
   1e5d4:	6a3b      	ldr	r3, [r7, #32]
   1e5d6:	429a      	cmp	r2, r3
   1e5d8:	d3e2      	bcc.n	1e5a0 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   1e5da:	2301      	movs	r3, #1
   1e5dc:	627b      	str	r3, [r7, #36]	; 0x24
   1e5de:	e002      	b.n	1e5e6 <MQTTDeserialize_suback+0xce>
		goto exit;
   1e5e0:	46c0      	nop			; (mov r8, r8)
   1e5e2:	e000      	b.n	1e5e6 <MQTTDeserialize_suback+0xce>
		goto exit;
   1e5e4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1e5e8:	0018      	movs	r0, r3
   1e5ea:	46bd      	mov	sp, r7
   1e5ec:	b00b      	add	sp, #44	; 0x2c
   1e5ee:	bd90      	pop	{r4, r7, pc}
   1e5f0:	0001de2f 	.word	0x0001de2f
   1e5f4:	0001ddc9 	.word	0x0001ddc9
   1e5f8:	0001ddfd 	.word	0x0001ddfd

0001e5fc <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   1e5fc:	b580      	push	{r7, lr}
   1e5fe:	b082      	sub	sp, #8
   1e600:	af00      	add	r7, sp, #0
   1e602:	6078      	str	r0, [r7, #4]
	config->port = 80;
   1e604:	687b      	ldr	r3, [r7, #4]
   1e606:	2250      	movs	r2, #80	; 0x50
   1e608:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1e60a:	687b      	ldr	r3, [r7, #4]
   1e60c:	2200      	movs	r2, #0
   1e60e:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   1e610:	687b      	ldr	r3, [r7, #4]
   1e612:	4a0b      	ldr	r2, [pc, #44]	; (1e640 <http_client_get_config_defaults+0x44>)
   1e614:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   1e616:	687b      	ldr	r3, [r7, #4]
   1e618:	2200      	movs	r2, #0
   1e61a:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   1e61c:	687b      	ldr	r3, [r7, #4]
   1e61e:	2200      	movs	r2, #0
   1e620:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   1e622:	687b      	ldr	r3, [r7, #4]
   1e624:	2280      	movs	r2, #128	; 0x80
   1e626:	0052      	lsls	r2, r2, #1
   1e628:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1e62a:	687b      	ldr	r3, [r7, #4]
   1e62c:	2252      	movs	r2, #82	; 0x52
   1e62e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   1e630:	687b      	ldr	r3, [r7, #4]
   1e632:	4a04      	ldr	r2, [pc, #16]	; (1e644 <http_client_get_config_defaults+0x48>)
   1e634:	619a      	str	r2, [r3, #24]
}
   1e636:	46c0      	nop			; (mov r8, r8)
   1e638:	46bd      	mov	sp, r7
   1e63a:	b002      	add	sp, #8
   1e63c:	bd80      	pop	{r7, pc}
   1e63e:	46c0      	nop			; (mov r8, r8)
   1e640:	00004e20 	.word	0x00004e20
   1e644:	000289f8 	.word	0x000289f8

0001e648 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   1e648:	b590      	push	{r4, r7, lr}
   1e64a:	b083      	sub	sp, #12
   1e64c:	af00      	add	r7, sp, #0
   1e64e:	6078      	str	r0, [r7, #4]
   1e650:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   1e652:	687b      	ldr	r3, [r7, #4]
   1e654:	2b00      	cmp	r3, #0
   1e656:	d002      	beq.n	1e65e <http_client_init+0x16>
   1e658:	683b      	ldr	r3, [r7, #0]
   1e65a:	2b00      	cmp	r3, #0
   1e65c:	d102      	bne.n	1e664 <http_client_init+0x1c>
		return -EINVAL;
   1e65e:	2316      	movs	r3, #22
   1e660:	425b      	negs	r3, r3
   1e662:	e058      	b.n	1e716 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   1e664:	683b      	ldr	r3, [r7, #0]
   1e666:	691b      	ldr	r3, [r3, #16]
   1e668:	2b00      	cmp	r3, #0
   1e66a:	d102      	bne.n	1e672 <http_client_init+0x2a>
		return -EINVAL;
   1e66c:	2316      	movs	r3, #22
   1e66e:	425b      	negs	r3, r3
   1e670:	e051      	b.n	1e716 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   1e672:	683b      	ldr	r3, [r7, #0]
   1e674:	685b      	ldr	r3, [r3, #4]
   1e676:	2b00      	cmp	r3, #0
   1e678:	d102      	bne.n	1e680 <http_client_init+0x38>
		return -EINVAL;
   1e67a:	2316      	movs	r3, #22
   1e67c:	425b      	negs	r3, r3
   1e67e:	e04a      	b.n	1e716 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1e680:	683b      	ldr	r3, [r7, #0]
   1e682:	695b      	ldr	r3, [r3, #20]
   1e684:	2b51      	cmp	r3, #81	; 0x51
   1e686:	d802      	bhi.n	1e68e <http_client_init+0x46>
		return -EINVAL;
   1e688:	2316      	movs	r3, #22
   1e68a:	425b      	negs	r3, r3
   1e68c:	e043      	b.n	1e716 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   1e68e:	687b      	ldr	r3, [r7, #4]
   1e690:	22e8      	movs	r2, #232	; 0xe8
   1e692:	2100      	movs	r1, #0
   1e694:	0018      	movs	r0, r3
   1e696:	4b22      	ldr	r3, [pc, #136]	; (1e720 <http_client_init+0xd8>)
   1e698:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   1e69a:	687b      	ldr	r3, [r7, #4]
   1e69c:	3350      	adds	r3, #80	; 0x50
   1e69e:	6839      	ldr	r1, [r7, #0]
   1e6a0:	221c      	movs	r2, #28
   1e6a2:	0018      	movs	r0, r3
   1e6a4:	4b1f      	ldr	r3, [pc, #124]	; (1e724 <http_client_init+0xdc>)
   1e6a6:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   1e6a8:	687b      	ldr	r3, [r7, #4]
   1e6aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e6ac:	2b00      	cmp	r3, #0
   1e6ae:	d115      	bne.n	1e6dc <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   1e6b0:	683b      	ldr	r3, [r7, #0]
   1e6b2:	691b      	ldr	r3, [r3, #16]
   1e6b4:	0018      	movs	r0, r3
   1e6b6:	4b1c      	ldr	r3, [pc, #112]	; (1e728 <http_client_init+0xe0>)
   1e6b8:	4798      	blx	r3
   1e6ba:	0003      	movs	r3, r0
   1e6bc:	001a      	movs	r2, r3
   1e6be:	687b      	ldr	r3, [r7, #4]
   1e6c0:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1e6c2:	687b      	ldr	r3, [r7, #4]
   1e6c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e6c6:	2b00      	cmp	r3, #0
   1e6c8:	d102      	bne.n	1e6d0 <http_client_init+0x88>
			return -ENOMEM;
   1e6ca:	230c      	movs	r3, #12
   1e6cc:	425b      	negs	r3, r3
   1e6ce:	e022      	b.n	1e716 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   1e6d0:	687b      	ldr	r3, [r7, #4]
   1e6d2:	2241      	movs	r2, #65	; 0x41
   1e6d4:	5c99      	ldrb	r1, [r3, r2]
   1e6d6:	2004      	movs	r0, #4
   1e6d8:	4301      	orrs	r1, r0
   1e6da:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   1e6dc:	683b      	ldr	r3, [r7, #0]
   1e6de:	891b      	ldrh	r3, [r3, #8]
   1e6e0:	2b00      	cmp	r3, #0
   1e6e2:	d010      	beq.n	1e706 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1e6e4:	683b      	ldr	r3, [r7, #0]
   1e6e6:	6858      	ldr	r0, [r3, #4]
   1e6e8:	687a      	ldr	r2, [r7, #4]
   1e6ea:	4910      	ldr	r1, [pc, #64]	; (1e72c <http_client_init+0xe4>)
   1e6ec:	2300      	movs	r3, #0
   1e6ee:	4c10      	ldr	r4, [pc, #64]	; (1e730 <http_client_init+0xe8>)
   1e6f0:	47a0      	blx	r4
   1e6f2:	0002      	movs	r2, r0
   1e6f4:	687b      	ldr	r3, [r7, #4]
   1e6f6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   1e6f8:	687b      	ldr	r3, [r7, #4]
   1e6fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e6fc:	2b00      	cmp	r3, #0
   1e6fe:	da02      	bge.n	1e706 <http_client_init+0xbe>
			return -ENOSPC;
   1e700:	231c      	movs	r3, #28
   1e702:	425b      	negs	r3, r3
   1e704:	e007      	b.n	1e716 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   1e706:	687b      	ldr	r3, [r7, #4]
   1e708:	2200      	movs	r2, #0
   1e70a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1e70c:	687b      	ldr	r3, [r7, #4]
   1e70e:	22d8      	movs	r2, #216	; 0xd8
   1e710:	2100      	movs	r1, #0
   1e712:	5099      	str	r1, [r3, r2]

	return 0;
   1e714:	2300      	movs	r3, #0
}
   1e716:	0018      	movs	r0, r3
   1e718:	46bd      	mov	sp, r7
   1e71a:	b003      	add	sp, #12
   1e71c:	bd90      	pop	{r4, r7, pc}
   1e71e:	46c0      	nop			; (mov r8, r8)
   1e720:	00022dbb 	.word	0x00022dbb
   1e724:	00022d85 	.word	0x00022d85
   1e728:	00022d5d 	.word	0x00022d5d
   1e72c:	0001e9f9 	.word	0x0001e9f9
   1e730:	0002009d 	.word	0x0002009d

0001e734 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   1e734:	b580      	push	{r7, lr}
   1e736:	b082      	sub	sp, #8
   1e738:	af00      	add	r7, sp, #0
   1e73a:	6078      	str	r0, [r7, #4]
   1e73c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   1e73e:	687b      	ldr	r3, [r7, #4]
   1e740:	2b00      	cmp	r3, #0
   1e742:	d102      	bne.n	1e74a <http_client_register_callback+0x16>
		return -EINVAL;
   1e744:	2316      	movs	r3, #22
   1e746:	425b      	negs	r3, r3
   1e748:	e003      	b.n	1e752 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   1e74a:	687b      	ldr	r3, [r7, #4]
   1e74c:	683a      	ldr	r2, [r7, #0]
   1e74e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   1e750:	2300      	movs	r3, #0
}
   1e752:	0018      	movs	r0, r3
   1e754:	46bd      	mov	sp, r7
   1e756:	b002      	add	sp, #8
   1e758:	bd80      	pop	{r7, pc}
	...

0001e75c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   1e75c:	b580      	push	{r7, lr}
   1e75e:	b082      	sub	sp, #8
   1e760:	af00      	add	r7, sp, #0
   1e762:	6078      	str	r0, [r7, #4]
	switch (err) {
   1e764:	687b      	ldr	r3, [r7, #4]
   1e766:	330e      	adds	r3, #14
   1e768:	2b0e      	cmp	r3, #14
   1e76a:	d825      	bhi.n	1e7b8 <_hwerr_to_stderr+0x5c>
   1e76c:	009a      	lsls	r2, r3, #2
   1e76e:	4b18      	ldr	r3, [pc, #96]	; (1e7d0 <_hwerr_to_stderr+0x74>)
   1e770:	18d3      	adds	r3, r2, r3
   1e772:	681b      	ldr	r3, [r3, #0]
   1e774:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   1e776:	2305      	movs	r3, #5
   1e778:	425b      	negs	r3, r3
   1e77a:	e024      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   1e77c:	2302      	movs	r3, #2
   1e77e:	425b      	negs	r3, r3
   1e780:	e021      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   1e782:	2370      	movs	r3, #112	; 0x70
   1e784:	425b      	negs	r3, r3
   1e786:	e01e      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   1e788:	230c      	movs	r3, #12
   1e78a:	425b      	negs	r3, r3
   1e78c:	e01b      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   1e78e:	2316      	movs	r3, #22
   1e790:	425b      	negs	r3, r3
   1e792:	e018      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   1e794:	230c      	movs	r3, #12
   1e796:	425b      	negs	r3, r3
   1e798:	e015      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   1e79a:	2305      	movs	r3, #5
   1e79c:	425b      	negs	r3, r3
   1e79e:	e012      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   1e7a0:	2379      	movs	r3, #121	; 0x79
   1e7a2:	425b      	negs	r3, r3
   1e7a4:	e00f      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   1e7a6:	2368      	movs	r3, #104	; 0x68
   1e7a8:	425b      	negs	r3, r3
   1e7aa:	e00c      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   1e7ac:	230b      	movs	r3, #11
   1e7ae:	425b      	negs	r3, r3
   1e7b0:	e009      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   1e7b2:	2310      	movs	r3, #16
   1e7b4:	425b      	negs	r3, r3
   1e7b6:	e006      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   1e7b8:	687b      	ldr	r3, [r7, #4]
   1e7ba:	2b00      	cmp	r3, #0
   1e7bc:	da02      	bge.n	1e7c4 <_hwerr_to_stderr+0x68>
				return -EIO;
   1e7be:	2305      	movs	r3, #5
   1e7c0:	425b      	negs	r3, r3
   1e7c2:	e000      	b.n	1e7c6 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   1e7c4:	2300      	movs	r3, #0
	}
}
   1e7c6:	0018      	movs	r0, r3
   1e7c8:	46bd      	mov	sp, r7
   1e7ca:	b002      	add	sp, #8
   1e7cc:	bd80      	pop	{r7, pc}
   1e7ce:	46c0      	nop			; (mov r8, r8)
   1e7d0:	00028b34 	.word	0x00028b34

0001e7d4 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1e7d4:	b580      	push	{r7, lr}
   1e7d6:	b08a      	sub	sp, #40	; 0x28
   1e7d8:	af00      	add	r7, sp, #0
   1e7da:	603a      	str	r2, [r7, #0]
   1e7dc:	1dfb      	adds	r3, r7, #7
   1e7de:	1c02      	adds	r2, r0, #0
   1e7e0:	701a      	strb	r2, [r3, #0]
   1e7e2:	1dbb      	adds	r3, r7, #6
   1e7e4:	1c0a      	adds	r2, r1, #0
   1e7e6:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   1e7e8:	1dfb      	adds	r3, r7, #7
   1e7ea:	2200      	movs	r2, #0
   1e7ec:	569a      	ldrsb	r2, [r3, r2]
   1e7ee:	4b4b      	ldr	r3, [pc, #300]	; (1e91c <http_client_socket_event_handler+0x148>)
   1e7f0:	0092      	lsls	r2, r2, #2
   1e7f2:	58d3      	ldr	r3, [r2, r3]
   1e7f4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   1e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e7f8:	2b00      	cmp	r3, #0
   1e7fa:	d100      	bne.n	1e7fe <http_client_socket_event_handler+0x2a>
   1e7fc:	e08a      	b.n	1e914 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   1e7fe:	1dbb      	adds	r3, r7, #6
   1e800:	781b      	ldrb	r3, [r3, #0]
   1e802:	2b06      	cmp	r3, #6
   1e804:	d040      	beq.n	1e888 <http_client_socket_event_handler+0xb4>
   1e806:	2b07      	cmp	r3, #7
   1e808:	d060      	beq.n	1e8cc <http_client_socket_event_handler+0xf8>
   1e80a:	2b05      	cmp	r3, #5
   1e80c:	d000      	beq.n	1e810 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   1e80e:	e082      	b.n	1e916 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   1e810:	683b      	ldr	r3, [r7, #0]
   1e812:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   1e814:	6a3b      	ldr	r3, [r7, #32]
   1e816:	785b      	ldrb	r3, [r3, #1]
   1e818:	b25b      	sxtb	r3, r3
   1e81a:	001a      	movs	r2, r3
   1e81c:	230c      	movs	r3, #12
   1e81e:	18fb      	adds	r3, r7, r3
   1e820:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   1e822:	6a3b      	ldr	r3, [r7, #32]
   1e824:	785b      	ldrb	r3, [r3, #1]
   1e826:	b25b      	sxtb	r3, r3
   1e828:	2b00      	cmp	r3, #0
   1e82a:	da0c      	bge.n	1e846 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   1e82c:	6a3b      	ldr	r3, [r7, #32]
   1e82e:	785b      	ldrb	r3, [r3, #1]
   1e830:	b25b      	sxtb	r3, r3
   1e832:	0018      	movs	r0, r3
   1e834:	4b3a      	ldr	r3, [pc, #232]	; (1e920 <http_client_socket_event_handler+0x14c>)
   1e836:	4798      	blx	r3
   1e838:	0002      	movs	r2, r0
   1e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e83c:	0011      	movs	r1, r2
   1e83e:	0018      	movs	r0, r3
   1e840:	4b38      	ldr	r3, [pc, #224]	; (1e924 <http_client_socket_event_handler+0x150>)
   1e842:	4798      	blx	r3
    	break;
   1e844:	e067      	b.n	1e916 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   1e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e84a:	2b00      	cmp	r3, #0
   1e84c:	d006      	beq.n	1e85c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   1e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e852:	220c      	movs	r2, #12
   1e854:	18ba      	adds	r2, r7, r2
   1e856:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1e858:	2100      	movs	r1, #0
   1e85a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   1e85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e85e:	2203      	movs	r2, #3
   1e860:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   1e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e864:	6d58      	ldr	r0, [r3, #84]	; 0x54
   1e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e868:	6c99      	ldr	r1, [r3, #72]	; 0x48
   1e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e86c:	2258      	movs	r2, #88	; 0x58
   1e86e:	5a9b      	ldrh	r3, [r3, r2]
   1e870:	001a      	movs	r2, r3
   1e872:	4b2d      	ldr	r3, [pc, #180]	; (1e928 <http_client_socket_event_handler+0x154>)
   1e874:	4798      	blx	r3
    		_http_client_recv_packet(module);
   1e876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e878:	0018      	movs	r0, r3
   1e87a:	4b2c      	ldr	r3, [pc, #176]	; (1e92c <http_client_socket_event_handler+0x158>)
   1e87c:	4798      	blx	r3
			_http_client_request(module);
   1e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e880:	0018      	movs	r0, r3
   1e882:	4b2b      	ldr	r3, [pc, #172]	; (1e930 <http_client_socket_event_handler+0x15c>)
   1e884:	4798      	blx	r3
    	break;
   1e886:	e046      	b.n	1e916 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   1e888:	683b      	ldr	r3, [r7, #0]
   1e88a:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   1e88c:	69fb      	ldr	r3, [r7, #28]
   1e88e:	2204      	movs	r2, #4
   1e890:	5e9b      	ldrsh	r3, [r3, r2]
   1e892:	2b00      	cmp	r3, #0
   1e894:	dd09      	ble.n	1e8aa <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   1e896:	69fb      	ldr	r3, [r7, #28]
   1e898:	2204      	movs	r2, #4
   1e89a:	5e9b      	ldrsh	r3, [r3, r2]
   1e89c:	001a      	movs	r2, r3
   1e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8a0:	0011      	movs	r1, r2
   1e8a2:	0018      	movs	r0, r3
   1e8a4:	4b23      	ldr	r3, [pc, #140]	; (1e934 <http_client_socket_event_handler+0x160>)
   1e8a6:	4798      	blx	r3
   1e8a8:	e00b      	b.n	1e8c2 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   1e8aa:	69fb      	ldr	r3, [r7, #28]
   1e8ac:	2204      	movs	r2, #4
   1e8ae:	5e9b      	ldrsh	r3, [r3, r2]
   1e8b0:	0018      	movs	r0, r3
   1e8b2:	4b1b      	ldr	r3, [pc, #108]	; (1e920 <http_client_socket_event_handler+0x14c>)
   1e8b4:	4798      	blx	r3
   1e8b6:	0002      	movs	r2, r0
   1e8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8ba:	0011      	movs	r1, r2
   1e8bc:	0018      	movs	r0, r3
   1e8be:	4b19      	ldr	r3, [pc, #100]	; (1e924 <http_client_socket_event_handler+0x150>)
   1e8c0:	4798      	blx	r3
		_http_client_recv_packet(module);
   1e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8c4:	0018      	movs	r0, r3
   1e8c6:	4b19      	ldr	r3, [pc, #100]	; (1e92c <http_client_socket_event_handler+0x158>)
   1e8c8:	4798      	blx	r3
		break;
   1e8ca:	e024      	b.n	1e916 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   1e8cc:	231a      	movs	r3, #26
   1e8ce:	18fb      	adds	r3, r7, r3
   1e8d0:	683a      	ldr	r2, [r7, #0]
   1e8d2:	8812      	ldrh	r2, [r2, #0]
   1e8d4:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   1e8d6:	231a      	movs	r3, #26
   1e8d8:	18fb      	adds	r3, r7, r3
   1e8da:	2200      	movs	r2, #0
   1e8dc:	5e9b      	ldrsh	r3, [r3, r2]
   1e8de:	2b00      	cmp	r3, #0
   1e8e0:	da0d      	bge.n	1e8fe <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   1e8e2:	231a      	movs	r3, #26
   1e8e4:	18fb      	adds	r3, r7, r3
   1e8e6:	2200      	movs	r2, #0
   1e8e8:	5e9b      	ldrsh	r3, [r3, r2]
   1e8ea:	0018      	movs	r0, r3
   1e8ec:	4b0c      	ldr	r3, [pc, #48]	; (1e920 <http_client_socket_event_handler+0x14c>)
   1e8ee:	4798      	blx	r3
   1e8f0:	0002      	movs	r2, r0
   1e8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8f4:	0011      	movs	r1, r2
   1e8f6:	0018      	movs	r0, r3
   1e8f8:	4b0a      	ldr	r3, [pc, #40]	; (1e924 <http_client_socket_event_handler+0x150>)
   1e8fa:	4798      	blx	r3
   1e8fc:	e003      	b.n	1e906 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   1e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e900:	0018      	movs	r0, r3
   1e902:	4b0b      	ldr	r3, [pc, #44]	; (1e930 <http_client_socket_event_handler+0x15c>)
   1e904:	4798      	blx	r3
		module->sending = 0;
   1e906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e908:	2241      	movs	r2, #65	; 0x41
   1e90a:	5c99      	ldrb	r1, [r3, r2]
   1e90c:	2001      	movs	r0, #1
   1e90e:	4381      	bics	r1, r0
   1e910:	5499      	strb	r1, [r3, r2]
    	break;
   1e912:	e000      	b.n	1e916 <http_client_socket_event_handler+0x142>
		return;
   1e914:	46c0      	nop			; (mov r8, r8)
	}

}
   1e916:	46bd      	mov	sp, r7
   1e918:	b00a      	add	sp, #40	; 0x28
   1e91a:	bd80      	pop	{r7, pc}
   1e91c:	20004784 	.word	0x20004784
   1e920:	0001e75d 	.word	0x0001e75d
   1e924:	0001edd1 	.word	0x0001edd1
   1e928:	0002012d 	.word	0x0002012d
   1e92c:	0001f65d 	.word	0x0001f65d
   1e930:	0001ef25 	.word	0x0001ef25
   1e934:	0001f6c1 	.word	0x0001f6c1

0001e938 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   1e938:	b580      	push	{r7, lr}
   1e93a:	b088      	sub	sp, #32
   1e93c:	af00      	add	r7, sp, #0
   1e93e:	6078      	str	r0, [r7, #4]
   1e940:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1e942:	2300      	movs	r3, #0
   1e944:	61fb      	str	r3, [r7, #28]
   1e946:	e048      	b.n	1e9da <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   1e948:	4b27      	ldr	r3, [pc, #156]	; (1e9e8 <http_client_socket_resolve_handler+0xb0>)
   1e94a:	69fa      	ldr	r2, [r7, #28]
   1e94c:	0092      	lsls	r2, r2, #2
   1e94e:	58d3      	ldr	r3, [r2, r3]
   1e950:	2b00      	cmp	r3, #0
   1e952:	d03f      	beq.n	1e9d4 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   1e954:	4b24      	ldr	r3, [pc, #144]	; (1e9e8 <http_client_socket_resolve_handler+0xb0>)
   1e956:	69fa      	ldr	r2, [r7, #28]
   1e958:	0092      	lsls	r2, r2, #2
   1e95a:	58d3      	ldr	r3, [r2, r3]
   1e95c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1e95e:	69bb      	ldr	r3, [r7, #24]
   1e960:	1c5a      	adds	r2, r3, #1
   1e962:	687b      	ldr	r3, [r7, #4]
   1e964:	0011      	movs	r1, r2
   1e966:	0018      	movs	r0, r3
   1e968:	4b20      	ldr	r3, [pc, #128]	; (1e9ec <http_client_socket_resolve_handler+0xb4>)
   1e96a:	4798      	blx	r3
   1e96c:	1e03      	subs	r3, r0, #0
   1e96e:	d131      	bne.n	1e9d4 <http_client_socket_resolve_handler+0x9c>
   1e970:	69bb      	ldr	r3, [r7, #24]
   1e972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1e974:	2b01      	cmp	r3, #1
   1e976:	d12d      	bne.n	1e9d4 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   1e978:	683b      	ldr	r3, [r7, #0]
   1e97a:	2b00      	cmp	r3, #0
   1e97c:	d107      	bne.n	1e98e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   1e97e:	2376      	movs	r3, #118	; 0x76
   1e980:	425a      	negs	r2, r3
   1e982:	69bb      	ldr	r3, [r7, #24]
   1e984:	0011      	movs	r1, r2
   1e986:	0018      	movs	r0, r3
   1e988:	4b19      	ldr	r3, [pc, #100]	; (1e9f0 <http_client_socket_resolve_handler+0xb8>)
   1e98a:	4798      	blx	r3
					return;
   1e98c:	e028      	b.n	1e9e0 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   1e98e:	2308      	movs	r3, #8
   1e990:	18fb      	adds	r3, r7, r3
   1e992:	2202      	movs	r2, #2
   1e994:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1e996:	69bb      	ldr	r3, [r7, #24]
   1e998:	2250      	movs	r2, #80	; 0x50
   1e99a:	5a9b      	ldrh	r3, [r3, r2]
   1e99c:	021b      	lsls	r3, r3, #8
   1e99e:	b21a      	sxth	r2, r3
   1e9a0:	69bb      	ldr	r3, [r7, #24]
   1e9a2:	2150      	movs	r1, #80	; 0x50
   1e9a4:	5a5b      	ldrh	r3, [r3, r1]
   1e9a6:	0a1b      	lsrs	r3, r3, #8
   1e9a8:	b29b      	uxth	r3, r3
   1e9aa:	b21b      	sxth	r3, r3
   1e9ac:	4313      	orrs	r3, r2
   1e9ae:	b21b      	sxth	r3, r3
   1e9b0:	b29a      	uxth	r2, r3
   1e9b2:	2308      	movs	r3, #8
   1e9b4:	18fb      	adds	r3, r7, r3
   1e9b6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1e9b8:	2308      	movs	r3, #8
   1e9ba:	18fb      	adds	r3, r7, r3
   1e9bc:	683a      	ldr	r2, [r7, #0]
   1e9be:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1e9c0:	69bb      	ldr	r3, [r7, #24]
   1e9c2:	781b      	ldrb	r3, [r3, #0]
   1e9c4:	b25b      	sxtb	r3, r3
   1e9c6:	2208      	movs	r2, #8
   1e9c8:	18b9      	adds	r1, r7, r2
   1e9ca:	2210      	movs	r2, #16
   1e9cc:	0018      	movs	r0, r3
   1e9ce:	4b09      	ldr	r3, [pc, #36]	; (1e9f4 <http_client_socket_resolve_handler+0xbc>)
   1e9d0:	4798      	blx	r3
				return;
   1e9d2:	e005      	b.n	1e9e0 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1e9d4:	69fb      	ldr	r3, [r7, #28]
   1e9d6:	3301      	adds	r3, #1
   1e9d8:	61fb      	str	r3, [r7, #28]
   1e9da:	69fb      	ldr	r3, [r7, #28]
   1e9dc:	2b06      	cmp	r3, #6
   1e9de:	ddb3      	ble.n	1e948 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   1e9e0:	46bd      	mov	sp, r7
   1e9e2:	b008      	add	sp, #32
   1e9e4:	bd80      	pop	{r7, pc}
   1e9e6:	46c0      	nop			; (mov r8, r8)
   1e9e8:	20004784 	.word	0x20004784
   1e9ec:	000230f9 	.word	0x000230f9
   1e9f0:	0001edd1 	.word	0x0001edd1
   1e9f4:	000132f5 	.word	0x000132f5

0001e9f8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   1e9f8:	b580      	push	{r7, lr}
   1e9fa:	b086      	sub	sp, #24
   1e9fc:	af00      	add	r7, sp, #0
   1e9fe:	60f8      	str	r0, [r7, #12]
   1ea00:	60b9      	str	r1, [r7, #8]
   1ea02:	607a      	str	r2, [r7, #4]
   1ea04:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   1ea06:	687b      	ldr	r3, [r7, #4]
   1ea08:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   1ea0a:	697b      	ldr	r3, [r7, #20]
   1ea0c:	2b00      	cmp	r3, #0
   1ea0e:	d007      	beq.n	1ea20 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   1ea10:	233e      	movs	r3, #62	; 0x3e
   1ea12:	425a      	negs	r2, r3
   1ea14:	697b      	ldr	r3, [r7, #20]
   1ea16:	0011      	movs	r1, r2
   1ea18:	0018      	movs	r0, r3
   1ea1a:	4b03      	ldr	r3, [pc, #12]	; (1ea28 <http_client_timer_callback+0x30>)
   1ea1c:	4798      	blx	r3
   1ea1e:	e000      	b.n	1ea22 <http_client_timer_callback+0x2a>
		return;
   1ea20:	46c0      	nop			; (mov r8, r8)
}
   1ea22:	46bd      	mov	sp, r7
   1ea24:	b006      	add	sp, #24
   1ea26:	bd80      	pop	{r7, pc}
   1ea28:	0001edd1 	.word	0x0001edd1

0001ea2c <_is_ip>:

static int _is_ip(const char *host)
{
   1ea2c:	b580      	push	{r7, lr}
   1ea2e:	b084      	sub	sp, #16
   1ea30:	af00      	add	r7, sp, #0
   1ea32:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   1ea34:	2300      	movs	r3, #0
   1ea36:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   1ea38:	e03a      	b.n	1eab0 <_is_ip+0x84>
		ch = *host++;
   1ea3a:	687b      	ldr	r3, [r7, #4]
   1ea3c:	1c5a      	adds	r2, r3, #1
   1ea3e:	607a      	str	r2, [r7, #4]
   1ea40:	220b      	movs	r2, #11
   1ea42:	18ba      	adds	r2, r7, r2
   1ea44:	781b      	ldrb	r3, [r3, #0]
   1ea46:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   1ea48:	230b      	movs	r3, #11
   1ea4a:	18fb      	adds	r3, r7, r3
   1ea4c:	781b      	ldrb	r3, [r3, #0]
   1ea4e:	2b60      	cmp	r3, #96	; 0x60
   1ea50:	d904      	bls.n	1ea5c <_is_ip+0x30>
   1ea52:	230b      	movs	r3, #11
   1ea54:	18fb      	adds	r3, r7, r3
   1ea56:	781b      	ldrb	r3, [r3, #0]
   1ea58:	2b66      	cmp	r3, #102	; 0x66
   1ea5a:	d913      	bls.n	1ea84 <_is_ip+0x58>
   1ea5c:	230b      	movs	r3, #11
   1ea5e:	18fb      	adds	r3, r7, r3
   1ea60:	781b      	ldrb	r3, [r3, #0]
   1ea62:	2b40      	cmp	r3, #64	; 0x40
   1ea64:	d904      	bls.n	1ea70 <_is_ip+0x44>
   1ea66:	230b      	movs	r3, #11
   1ea68:	18fb      	adds	r3, r7, r3
   1ea6a:	781b      	ldrb	r3, [r3, #0]
   1ea6c:	2b46      	cmp	r3, #70	; 0x46
   1ea6e:	d909      	bls.n	1ea84 <_is_ip+0x58>
   1ea70:	230b      	movs	r3, #11
   1ea72:	18fb      	adds	r3, r7, r3
   1ea74:	781b      	ldrb	r3, [r3, #0]
   1ea76:	2b3a      	cmp	r3, #58	; 0x3a
   1ea78:	d004      	beq.n	1ea84 <_is_ip+0x58>
   1ea7a:	230b      	movs	r3, #11
   1ea7c:	18fb      	adds	r3, r7, r3
   1ea7e:	781b      	ldrb	r3, [r3, #0]
   1ea80:	2b2f      	cmp	r3, #47	; 0x2f
   1ea82:	d102      	bne.n	1ea8a <_is_ip+0x5e>
			isv6 = 1;
   1ea84:	2301      	movs	r3, #1
   1ea86:	60fb      	str	r3, [r7, #12]
   1ea88:	e012      	b.n	1eab0 <_is_ip+0x84>
		} else if (ch == '.') {
   1ea8a:	230b      	movs	r3, #11
   1ea8c:	18fb      	adds	r3, r7, r3
   1ea8e:	781b      	ldrb	r3, [r3, #0]
   1ea90:	2b2e      	cmp	r3, #46	; 0x2e
   1ea92:	d104      	bne.n	1ea9e <_is_ip+0x72>
			if (isv6) {
   1ea94:	68fb      	ldr	r3, [r7, #12]
   1ea96:	2b00      	cmp	r3, #0
   1ea98:	d00a      	beq.n	1eab0 <_is_ip+0x84>
				return 0;
   1ea9a:	2300      	movs	r3, #0
   1ea9c:	e00d      	b.n	1eaba <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   1ea9e:	230b      	movs	r3, #11
   1eaa0:	18fb      	adds	r3, r7, r3
   1eaa2:	781b      	ldrb	r3, [r3, #0]
   1eaa4:	2230      	movs	r2, #48	; 0x30
   1eaa6:	4013      	ands	r3, r2
   1eaa8:	2b30      	cmp	r3, #48	; 0x30
   1eaaa:	d001      	beq.n	1eab0 <_is_ip+0x84>
			return 0;
   1eaac:	2300      	movs	r3, #0
   1eaae:	e004      	b.n	1eaba <_is_ip+0x8e>
	while (*host != '\0') {
   1eab0:	687b      	ldr	r3, [r7, #4]
   1eab2:	781b      	ldrb	r3, [r3, #0]
   1eab4:	2b00      	cmp	r3, #0
   1eab6:	d1c0      	bne.n	1ea3a <_is_ip+0xe>
		}
	}
	return 1;
   1eab8:	2301      	movs	r3, #1
}
   1eaba:	0018      	movs	r0, r3
   1eabc:	46bd      	mov	sp, r7
   1eabe:	b004      	add	sp, #16
   1eac0:	bd80      	pop	{r7, pc}
	...

0001eac4 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   1eac4:	b5b0      	push	{r4, r5, r7, lr}
   1eac6:	b08e      	sub	sp, #56	; 0x38
   1eac8:	af00      	add	r7, sp, #0
   1eaca:	60f8      	str	r0, [r7, #12]
   1eacc:	60b9      	str	r1, [r7, #8]
   1eace:	603b      	str	r3, [r7, #0]
   1ead0:	1dfb      	adds	r3, r7, #7
   1ead2:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   1ead4:	2337      	movs	r3, #55	; 0x37
   1ead6:	18fb      	adds	r3, r7, r3
   1ead8:	2200      	movs	r2, #0
   1eada:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   1eadc:	2300      	movs	r3, #0
   1eade:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   1eae0:	2300      	movs	r3, #0
   1eae2:	633b      	str	r3, [r7, #48]	; 0x30
   1eae4:	2300      	movs	r3, #0
   1eae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   1eae8:	2300      	movs	r3, #0
   1eaea:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   1eaec:	68fb      	ldr	r3, [r7, #12]
   1eaee:	2b00      	cmp	r3, #0
   1eaf0:	d102      	bne.n	1eaf8 <http_client_send_request+0x34>
		return -EINVAL;
   1eaf2:	2316      	movs	r3, #22
   1eaf4:	425b      	negs	r3, r3
   1eaf6:	e145      	b.n	1ed84 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   1eaf8:	68fb      	ldr	r3, [r7, #12]
   1eafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1eafc:	2b02      	cmp	r3, #2
   1eafe:	d902      	bls.n	1eb06 <http_client_send_request+0x42>
		return -EBUSY;
   1eb00:	2310      	movs	r3, #16
   1eb02:	425b      	negs	r3, r3
   1eb04:	e13e      	b.n	1ed84 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   1eb06:	49a1      	ldr	r1, [pc, #644]	; (1ed8c <http_client_send_request+0x2c8>)
   1eb08:	68bb      	ldr	r3, [r7, #8]
   1eb0a:	2207      	movs	r2, #7
   1eb0c:	0018      	movs	r0, r3
   1eb0e:	4ba0      	ldr	r3, [pc, #640]	; (1ed90 <http_client_send_request+0x2cc>)
   1eb10:	4798      	blx	r3
   1eb12:	1e03      	subs	r3, r0, #0
   1eb14:	d102      	bne.n	1eb1c <http_client_send_request+0x58>
		i = 7;
   1eb16:	2307      	movs	r3, #7
   1eb18:	633b      	str	r3, [r7, #48]	; 0x30
   1eb1a:	e009      	b.n	1eb30 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   1eb1c:	499d      	ldr	r1, [pc, #628]	; (1ed94 <http_client_send_request+0x2d0>)
   1eb1e:	68bb      	ldr	r3, [r7, #8]
   1eb20:	2208      	movs	r2, #8
   1eb22:	0018      	movs	r0, r3
   1eb24:	4b9a      	ldr	r3, [pc, #616]	; (1ed90 <http_client_send_request+0x2cc>)
   1eb26:	4798      	blx	r3
   1eb28:	1e03      	subs	r3, r0, #0
   1eb2a:	d101      	bne.n	1eb30 <http_client_send_request+0x6c>
		i = 8;
   1eb2c:	2308      	movs	r3, #8
   1eb2e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   1eb30:	68fb      	ldr	r3, [r7, #12]
   1eb32:	1c5c      	adds	r4, r3, #1
   1eb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1eb36:	68ba      	ldr	r2, [r7, #8]
   1eb38:	18d5      	adds	r5, r2, r3
   1eb3a:	68fb      	ldr	r3, [r7, #12]
   1eb3c:	3301      	adds	r3, #1
   1eb3e:	0018      	movs	r0, r3
   1eb40:	4b95      	ldr	r3, [pc, #596]	; (1ed98 <http_client_send_request+0x2d4>)
   1eb42:	4798      	blx	r3
   1eb44:	0003      	movs	r3, r0
   1eb46:	001a      	movs	r2, r3
   1eb48:	0029      	movs	r1, r5
   1eb4a:	0020      	movs	r0, r4
   1eb4c:	4b90      	ldr	r3, [pc, #576]	; (1ed90 <http_client_send_request+0x2cc>)
   1eb4e:	4798      	blx	r3
   1eb50:	0003      	movs	r3, r0
   1eb52:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1eb54:	e00d      	b.n	1eb72 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   1eb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1eb58:	1c5a      	adds	r2, r3, #1
   1eb5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   1eb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1eb5e:	68b9      	ldr	r1, [r7, #8]
   1eb60:	188a      	adds	r2, r1, r2
   1eb62:	7811      	ldrb	r1, [r2, #0]
   1eb64:	68fa      	ldr	r2, [r7, #12]
   1eb66:	18d3      	adds	r3, r2, r3
   1eb68:	1c0a      	adds	r2, r1, #0
   1eb6a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1eb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1eb6e:	3301      	adds	r3, #1
   1eb70:	633b      	str	r3, [r7, #48]	; 0x30
   1eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1eb74:	68ba      	ldr	r2, [r7, #8]
   1eb76:	18d3      	adds	r3, r2, r3
   1eb78:	781b      	ldrb	r3, [r3, #0]
   1eb7a:	2b00      	cmp	r3, #0
   1eb7c:	d005      	beq.n	1eb8a <http_client_send_request+0xc6>
   1eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1eb80:	68ba      	ldr	r2, [r7, #8]
   1eb82:	18d3      	adds	r3, r2, r3
   1eb84:	781b      	ldrb	r3, [r3, #0]
   1eb86:	2b2f      	cmp	r3, #47	; 0x2f
   1eb88:	d1e5      	bne.n	1eb56 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   1eb8a:	68fa      	ldr	r2, [r7, #12]
   1eb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1eb8e:	18d3      	adds	r3, r2, r3
   1eb90:	3301      	adds	r3, #1
   1eb92:	2200      	movs	r2, #0
   1eb94:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   1eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1eb98:	68ba      	ldr	r2, [r7, #8]
   1eb9a:	18d3      	adds	r3, r2, r3
   1eb9c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   1eb9e:	68fb      	ldr	r3, [r7, #12]
   1eba0:	3301      	adds	r3, #1
   1eba2:	781b      	ldrb	r3, [r3, #0]
   1eba4:	2b00      	cmp	r3, #0
   1eba6:	d102      	bne.n	1ebae <http_client_send_request+0xea>
		return -EINVAL;
   1eba8:	2316      	movs	r3, #22
   1ebaa:	425b      	negs	r3, r3
   1ebac:	e0ea      	b.n	1ed84 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   1ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ebb0:	0018      	movs	r0, r3
   1ebb2:	4b79      	ldr	r3, [pc, #484]	; (1ed98 <http_client_send_request+0x2d4>)
   1ebb4:	4798      	blx	r3
   1ebb6:	0003      	movs	r3, r0
   1ebb8:	2b3f      	cmp	r3, #63	; 0x3f
   1ebba:	d902      	bls.n	1ebc2 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   1ebbc:	235b      	movs	r3, #91	; 0x5b
   1ebbe:	425b      	negs	r3, r3
   1ebc0:	e0e0      	b.n	1ed84 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   1ebc2:	68fb      	ldr	r3, [r7, #12]
   1ebc4:	22d4      	movs	r2, #212	; 0xd4
   1ebc6:	589b      	ldr	r3, [r3, r2]
   1ebc8:	2b00      	cmp	r3, #0
   1ebca:	d005      	beq.n	1ebd8 <http_client_send_request+0x114>
		free(module->req.ext_header);
   1ebcc:	68fb      	ldr	r3, [r7, #12]
   1ebce:	22d4      	movs	r2, #212	; 0xd4
   1ebd0:	589b      	ldr	r3, [r3, r2]
   1ebd2:	0018      	movs	r0, r3
   1ebd4:	4b71      	ldr	r3, [pc, #452]	; (1ed9c <http_client_send_request+0x2d8>)
   1ebd6:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   1ebd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ebda:	2b00      	cmp	r3, #0
   1ebdc:	d010      	beq.n	1ec00 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   1ebde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ebe0:	0018      	movs	r0, r3
   1ebe2:	4b6f      	ldr	r3, [pc, #444]	; (1eda0 <http_client_send_request+0x2dc>)
   1ebe4:	4798      	blx	r3
   1ebe6:	0003      	movs	r3, r0
   1ebe8:	0019      	movs	r1, r3
   1ebea:	68fb      	ldr	r3, [r7, #12]
   1ebec:	22d4      	movs	r2, #212	; 0xd4
   1ebee:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   1ebf0:	68fb      	ldr	r3, [r7, #12]
   1ebf2:	22d4      	movs	r2, #212	; 0xd4
   1ebf4:	589b      	ldr	r3, [r3, r2]
   1ebf6:	2b00      	cmp	r3, #0
   1ebf8:	d106      	bne.n	1ec08 <http_client_send_request+0x144>
			return -ENOMEM;
   1ebfa:	230c      	movs	r3, #12
   1ebfc:	425b      	negs	r3, r3
   1ebfe:	e0c1      	b.n	1ed84 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   1ec00:	68fb      	ldr	r3, [r7, #12]
   1ec02:	22d4      	movs	r2, #212	; 0xd4
   1ec04:	2100      	movs	r1, #0
   1ec06:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   1ec08:	68fb      	ldr	r3, [r7, #12]
   1ec0a:	2241      	movs	r2, #65	; 0x41
   1ec0c:	5c99      	ldrb	r1, [r3, r2]
   1ec0e:	2001      	movs	r0, #1
   1ec10:	4381      	bics	r1, r0
   1ec12:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   1ec14:	68fb      	ldr	r3, [r7, #12]
   1ec16:	2200      	movs	r2, #0
   1ec18:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   1ec1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec1c:	781b      	ldrb	r3, [r3, #0]
   1ec1e:	2b2f      	cmp	r3, #47	; 0x2f
   1ec20:	d107      	bne.n	1ec32 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   1ec22:	68fb      	ldr	r3, [r7, #12]
   1ec24:	3370      	adds	r3, #112	; 0x70
   1ec26:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ec28:	0011      	movs	r1, r2
   1ec2a:	0018      	movs	r0, r3
   1ec2c:	4b5d      	ldr	r3, [pc, #372]	; (1eda4 <http_client_send_request+0x2e0>)
   1ec2e:	4798      	blx	r3
   1ec30:	e00f      	b.n	1ec52 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   1ec32:	68fb      	ldr	r3, [r7, #12]
   1ec34:	2270      	movs	r2, #112	; 0x70
   1ec36:	212f      	movs	r1, #47	; 0x2f
   1ec38:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   1ec3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec3c:	781b      	ldrb	r3, [r3, #0]
   1ec3e:	2b00      	cmp	r3, #0
   1ec40:	d007      	beq.n	1ec52 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   1ec42:	68fb      	ldr	r3, [r7, #12]
   1ec44:	3370      	adds	r3, #112	; 0x70
   1ec46:	3301      	adds	r3, #1
   1ec48:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ec4a:	0011      	movs	r1, r2
   1ec4c:	0018      	movs	r0, r3
   1ec4e:	4b55      	ldr	r3, [pc, #340]	; (1eda4 <http_client_send_request+0x2e0>)
   1ec50:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   1ec52:	683b      	ldr	r3, [r7, #0]
   1ec54:	2b00      	cmp	r3, #0
   1ec56:	d007      	beq.n	1ec68 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1ec58:	68fb      	ldr	r3, [r7, #12]
   1ec5a:	33b0      	adds	r3, #176	; 0xb0
   1ec5c:	6839      	ldr	r1, [r7, #0]
   1ec5e:	2218      	movs	r2, #24
   1ec60:	0018      	movs	r0, r3
   1ec62:	4b51      	ldr	r3, [pc, #324]	; (1eda8 <http_client_send_request+0x2e4>)
   1ec64:	4798      	blx	r3
   1ec66:	e006      	b.n	1ec76 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   1ec68:	68fb      	ldr	r3, [r7, #12]
   1ec6a:	33b0      	adds	r3, #176	; 0xb0
   1ec6c:	2218      	movs	r2, #24
   1ec6e:	2100      	movs	r1, #0
   1ec70:	0018      	movs	r0, r3
   1ec72:	4b4e      	ldr	r3, [pc, #312]	; (1edac <http_client_send_request+0x2e8>)
   1ec74:	4798      	blx	r3
	}

	module->req.method = method;
   1ec76:	68fb      	ldr	r3, [r7, #12]
   1ec78:	1dfa      	adds	r2, r7, #7
   1ec7a:	21c8      	movs	r1, #200	; 0xc8
   1ec7c:	7812      	ldrb	r2, [r2, #0]
   1ec7e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   1ec80:	68fb      	ldr	r3, [r7, #12]
   1ec82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1ec84:	2b01      	cmp	r3, #1
   1ec86:	d003      	beq.n	1ec90 <http_client_send_request+0x1cc>
   1ec88:	d316      	bcc.n	1ecb8 <http_client_send_request+0x1f4>
   1ec8a:	2b02      	cmp	r3, #2
   1ec8c:	d004      	beq.n	1ec98 <http_client_send_request+0x1d4>
   1ec8e:	e074      	b.n	1ed7a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   1ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec92:	2b00      	cmp	r3, #0
   1ec94:	d100      	bne.n	1ec98 <http_client_send_request+0x1d4>
   1ec96:	e073      	b.n	1ed80 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   1ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec9a:	2b00      	cmp	r3, #0
   1ec9c:	d107      	bne.n	1ecae <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   1ec9e:	68fb      	ldr	r3, [r7, #12]
   1eca0:	2203      	movs	r2, #3
   1eca2:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   1eca4:	68fb      	ldr	r3, [r7, #12]
   1eca6:	0018      	movs	r0, r3
   1eca8:	4b41      	ldr	r3, [pc, #260]	; (1edb0 <http_client_send_request+0x2ec>)
   1ecaa:	4798      	blx	r3
			break;
   1ecac:	e069      	b.n	1ed82 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   1ecae:	68fb      	ldr	r3, [r7, #12]
   1ecb0:	2100      	movs	r1, #0
   1ecb2:	0018      	movs	r0, r3
   1ecb4:	4b3f      	ldr	r3, [pc, #252]	; (1edb4 <http_client_send_request+0x2f0>)
   1ecb6:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   1ecb8:	68fb      	ldr	r3, [r7, #12]
   1ecba:	2252      	movs	r2, #82	; 0x52
   1ecbc:	5c9b      	ldrb	r3, [r3, r2]
   1ecbe:	2b00      	cmp	r3, #0
   1ecc0:	d007      	beq.n	1ecd2 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   1ecc2:	2337      	movs	r3, #55	; 0x37
   1ecc4:	18fb      	adds	r3, r7, r3
   1ecc6:	2237      	movs	r2, #55	; 0x37
   1ecc8:	18ba      	adds	r2, r7, r2
   1ecca:	7812      	ldrb	r2, [r2, #0]
   1eccc:	2101      	movs	r1, #1
   1ecce:	430a      	orrs	r2, r1
   1ecd0:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   1ecd2:	2337      	movs	r3, #55	; 0x37
   1ecd4:	18fb      	adds	r3, r7, r3
   1ecd6:	781b      	ldrb	r3, [r3, #0]
   1ecd8:	001a      	movs	r2, r3
   1ecda:	2101      	movs	r1, #1
   1ecdc:	2002      	movs	r0, #2
   1ecde:	4b36      	ldr	r3, [pc, #216]	; (1edb8 <http_client_send_request+0x2f4>)
   1ece0:	4798      	blx	r3
   1ece2:	0003      	movs	r3, r0
   1ece4:	001a      	movs	r2, r3
   1ece6:	68fb      	ldr	r3, [r7, #12]
   1ece8:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   1ecea:	68fb      	ldr	r3, [r7, #12]
   1ecec:	781b      	ldrb	r3, [r3, #0]
   1ecee:	b25b      	sxtb	r3, r3
   1ecf0:	2b00      	cmp	r3, #0
   1ecf2:	db3f      	blt.n	1ed74 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   1ecf4:	68fb      	ldr	r3, [r7, #12]
   1ecf6:	781b      	ldrb	r3, [r3, #0]
   1ecf8:	b25b      	sxtb	r3, r3
   1ecfa:	001a      	movs	r2, r3
   1ecfc:	4b2f      	ldr	r3, [pc, #188]	; (1edbc <http_client_send_request+0x2f8>)
   1ecfe:	0092      	lsls	r2, r2, #2
   1ed00:	68f9      	ldr	r1, [r7, #12]
   1ed02:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   1ed04:	68fb      	ldr	r3, [r7, #12]
   1ed06:	3301      	adds	r3, #1
   1ed08:	0018      	movs	r0, r3
   1ed0a:	4b2d      	ldr	r3, [pc, #180]	; (1edc0 <http_client_send_request+0x2fc>)
   1ed0c:	4798      	blx	r3
   1ed0e:	1e03      	subs	r3, r0, #0
   1ed10:	d027      	beq.n	1ed62 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   1ed12:	2314      	movs	r3, #20
   1ed14:	18fb      	adds	r3, r7, r3
   1ed16:	2202      	movs	r2, #2
   1ed18:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1ed1a:	68fb      	ldr	r3, [r7, #12]
   1ed1c:	2250      	movs	r2, #80	; 0x50
   1ed1e:	5a9b      	ldrh	r3, [r3, r2]
   1ed20:	021b      	lsls	r3, r3, #8
   1ed22:	b21a      	sxth	r2, r3
   1ed24:	68fb      	ldr	r3, [r7, #12]
   1ed26:	2150      	movs	r1, #80	; 0x50
   1ed28:	5a5b      	ldrh	r3, [r3, r1]
   1ed2a:	0a1b      	lsrs	r3, r3, #8
   1ed2c:	b29b      	uxth	r3, r3
   1ed2e:	b21b      	sxth	r3, r3
   1ed30:	4313      	orrs	r3, r2
   1ed32:	b21b      	sxth	r3, r3
   1ed34:	b29a      	uxth	r2, r3
   1ed36:	2314      	movs	r3, #20
   1ed38:	18fb      	adds	r3, r7, r3
   1ed3a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   1ed3c:	68fb      	ldr	r3, [r7, #12]
   1ed3e:	3301      	adds	r3, #1
   1ed40:	0018      	movs	r0, r3
   1ed42:	4b20      	ldr	r3, [pc, #128]	; (1edc4 <http_client_send_request+0x300>)
   1ed44:	4798      	blx	r3
   1ed46:	0002      	movs	r2, r0
   1ed48:	2314      	movs	r3, #20
   1ed4a:	18fb      	adds	r3, r7, r3
   1ed4c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1ed4e:	68fb      	ldr	r3, [r7, #12]
   1ed50:	781b      	ldrb	r3, [r3, #0]
   1ed52:	b25b      	sxtb	r3, r3
   1ed54:	2214      	movs	r2, #20
   1ed56:	18b9      	adds	r1, r7, r2
   1ed58:	2210      	movs	r2, #16
   1ed5a:	0018      	movs	r0, r3
   1ed5c:	4b1a      	ldr	r3, [pc, #104]	; (1edc8 <http_client_send_request+0x304>)
   1ed5e:	4798      	blx	r3
   1ed60:	e004      	b.n	1ed6c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   1ed62:	68fb      	ldr	r3, [r7, #12]
   1ed64:	3301      	adds	r3, #1
   1ed66:	0018      	movs	r0, r3
   1ed68:	4b18      	ldr	r3, [pc, #96]	; (1edcc <http_client_send_request+0x308>)
   1ed6a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   1ed6c:	68fb      	ldr	r3, [r7, #12]
   1ed6e:	2201      	movs	r2, #1
   1ed70:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   1ed72:	e006      	b.n	1ed82 <http_client_send_request+0x2be>
			return -ENOSPC;
   1ed74:	231c      	movs	r3, #28
   1ed76:	425b      	negs	r3, r3
   1ed78:	e004      	b.n	1ed84 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   1ed7a:	230b      	movs	r3, #11
   1ed7c:	425b      	negs	r3, r3
   1ed7e:	e001      	b.n	1ed84 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   1ed80:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   1ed82:	2300      	movs	r3, #0
}
   1ed84:	0018      	movs	r0, r3
   1ed86:	46bd      	mov	sp, r7
   1ed88:	b00e      	add	sp, #56	; 0x38
   1ed8a:	bdb0      	pop	{r4, r5, r7, pc}
   1ed8c:	00028a04 	.word	0x00028a04
   1ed90:	00023165 	.word	0x00023165
   1ed94:	00028a0c 	.word	0x00028a0c
   1ed98:	00023157 	.word	0x00023157
   1ed9c:	00022d71 	.word	0x00022d71
   1eda0:	0002311d 	.word	0x0002311d
   1eda4:	0002310d 	.word	0x0002310d
   1eda8:	00022d85 	.word	0x00022d85
   1edac:	00022dbb 	.word	0x00022dbb
   1edb0:	0001ef25 	.word	0x0001ef25
   1edb4:	0001edd1 	.word	0x0001edd1
   1edb8:	000130e1 	.word	0x000130e1
   1edbc:	20004784 	.word	0x20004784
   1edc0:	0001ea2d 	.word	0x0001ea2d
   1edc4:	0001382d 	.word	0x0001382d
   1edc8:	000132f5 	.word	0x000132f5
   1edcc:	00013935 	.word	0x00013935

0001edd0 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   1edd0:	b580      	push	{r7, lr}
   1edd2:	b086      	sub	sp, #24
   1edd4:	af00      	add	r7, sp, #0
   1edd6:	6078      	str	r0, [r7, #4]
   1edd8:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   1edda:	687b      	ldr	r3, [r7, #4]
   1eddc:	22c0      	movs	r2, #192	; 0xc0
   1edde:	589b      	ldr	r3, [r3, r2]
   1ede0:	2b00      	cmp	r3, #0
   1ede2:	d007      	beq.n	1edf4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   1ede4:	687b      	ldr	r3, [r7, #4]
   1ede6:	22c0      	movs	r2, #192	; 0xc0
   1ede8:	589b      	ldr	r3, [r3, r2]
   1edea:	687a      	ldr	r2, [r7, #4]
   1edec:	21c4      	movs	r1, #196	; 0xc4
   1edee:	5852      	ldr	r2, [r2, r1]
   1edf0:	0010      	movs	r0, r2
   1edf2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   1edf4:	687b      	ldr	r3, [r7, #4]
   1edf6:	33b0      	adds	r3, #176	; 0xb0
   1edf8:	2218      	movs	r2, #24
   1edfa:	2100      	movs	r1, #0
   1edfc:	0018      	movs	r0, r3
   1edfe:	4b24      	ldr	r3, [pc, #144]	; (1ee90 <_http_client_clear_conn+0xc0>)
   1ee00:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   1ee02:	687b      	ldr	r3, [r7, #4]
   1ee04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1ee06:	2b00      	cmp	r3, #0
   1ee08:	d005      	beq.n	1ee16 <_http_client_clear_conn+0x46>
		close(module->sock);
   1ee0a:	687b      	ldr	r3, [r7, #4]
   1ee0c:	781b      	ldrb	r3, [r3, #0]
   1ee0e:	b25b      	sxtb	r3, r3
   1ee10:	0018      	movs	r0, r3
   1ee12:	4b20      	ldr	r3, [pc, #128]	; (1ee94 <_http_client_clear_conn+0xc4>)
   1ee14:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   1ee16:	687b      	ldr	r3, [r7, #4]
   1ee18:	781b      	ldrb	r3, [r3, #0]
   1ee1a:	b25b      	sxtb	r3, r3
   1ee1c:	001a      	movs	r2, r3
   1ee1e:	4b1e      	ldr	r3, [pc, #120]	; (1ee98 <_http_client_clear_conn+0xc8>)
   1ee20:	0092      	lsls	r2, r2, #2
   1ee22:	2100      	movs	r1, #0
   1ee24:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   1ee26:	687b      	ldr	r3, [r7, #4]
   1ee28:	336c      	adds	r3, #108	; 0x6c
   1ee2a:	226c      	movs	r2, #108	; 0x6c
   1ee2c:	2100      	movs	r1, #0
   1ee2e:	0018      	movs	r0, r3
   1ee30:	4b17      	ldr	r3, [pc, #92]	; (1ee90 <_http_client_clear_conn+0xc0>)
   1ee32:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   1ee34:	687b      	ldr	r3, [r7, #4]
   1ee36:	33d8      	adds	r3, #216	; 0xd8
   1ee38:	2210      	movs	r2, #16
   1ee3a:	2100      	movs	r1, #0
   1ee3c:	0018      	movs	r0, r3
   1ee3e:	4b14      	ldr	r3, [pc, #80]	; (1ee90 <_http_client_clear_conn+0xc0>)
   1ee40:	4798      	blx	r3
	module->req.state = STATE_INIT;
   1ee42:	687b      	ldr	r3, [r7, #4]
   1ee44:	2200      	movs	r2, #0
   1ee46:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1ee48:	687b      	ldr	r3, [r7, #4]
   1ee4a:	22d8      	movs	r2, #216	; 0xd8
   1ee4c:	2100      	movs	r1, #0
   1ee4e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   1ee50:	687b      	ldr	r3, [r7, #4]
   1ee52:	2241      	movs	r2, #65	; 0x41
   1ee54:	5c99      	ldrb	r1, [r3, r2]
   1ee56:	2001      	movs	r0, #1
   1ee58:	4381      	bics	r1, r0
   1ee5a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   1ee5c:	687b      	ldr	r3, [r7, #4]
   1ee5e:	2241      	movs	r2, #65	; 0x41
   1ee60:	5c99      	ldrb	r1, [r3, r2]
   1ee62:	2002      	movs	r0, #2
   1ee64:	4381      	bics	r1, r0
   1ee66:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   1ee68:	230c      	movs	r3, #12
   1ee6a:	18fb      	adds	r3, r7, r3
   1ee6c:	683a      	ldr	r2, [r7, #0]
   1ee6e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   1ee70:	687b      	ldr	r3, [r7, #4]
   1ee72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ee74:	2b00      	cmp	r3, #0
   1ee76:	d006      	beq.n	1ee86 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   1ee78:	687b      	ldr	r3, [r7, #4]
   1ee7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ee7c:	220c      	movs	r2, #12
   1ee7e:	18ba      	adds	r2, r7, r2
   1ee80:	6878      	ldr	r0, [r7, #4]
   1ee82:	2104      	movs	r1, #4
   1ee84:	4798      	blx	r3
	}
}
   1ee86:	46c0      	nop			; (mov r8, r8)
   1ee88:	46bd      	mov	sp, r7
   1ee8a:	b006      	add	sp, #24
   1ee8c:	bd80      	pop	{r7, pc}
   1ee8e:	46c0      	nop			; (mov r8, r8)
   1ee90:	00022dbb 	.word	0x00022dbb
   1ee94:	000136ed 	.word	0x000136ed
   1ee98:	20004784 	.word	0x20004784

0001ee9c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   1ee9c:	b590      	push	{r4, r7, lr}
   1ee9e:	b087      	sub	sp, #28
   1eea0:	af00      	add	r7, sp, #0
   1eea2:	60f8      	str	r0, [r7, #12]
   1eea4:	60b9      	str	r1, [r7, #8]
   1eea6:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   1eea8:	68fb      	ldr	r3, [r7, #12]
   1eeaa:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   1eeac:	697b      	ldr	r3, [r7, #20]
   1eeae:	2241      	movs	r2, #65	; 0x41
   1eeb0:	5c99      	ldrb	r1, [r3, r2]
   1eeb2:	2001      	movs	r0, #1
   1eeb4:	4301      	orrs	r1, r0
   1eeb6:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   1eeb8:	697b      	ldr	r3, [r7, #20]
   1eeba:	2000      	movs	r0, #0
   1eebc:	5618      	ldrsb	r0, [r3, r0]
   1eebe:	687b      	ldr	r3, [r7, #4]
   1eec0:	b29a      	uxth	r2, r3
   1eec2:	68b9      	ldr	r1, [r7, #8]
   1eec4:	2300      	movs	r3, #0
   1eec6:	4c14      	ldr	r4, [pc, #80]	; (1ef18 <_http_client_send_wait+0x7c>)
   1eec8:	47a0      	blx	r4
   1eeca:	0003      	movs	r3, r0
   1eecc:	613b      	str	r3, [r7, #16]
   1eece:	693b      	ldr	r3, [r7, #16]
   1eed0:	2b00      	cmp	r3, #0
   1eed2:	da0f      	bge.n	1eef4 <_http_client_send_wait+0x58>
		module->sending = 0;
   1eed4:	697b      	ldr	r3, [r7, #20]
   1eed6:	2241      	movs	r2, #65	; 0x41
   1eed8:	5c99      	ldrb	r1, [r3, r2]
   1eeda:	2001      	movs	r0, #1
   1eedc:	4381      	bics	r1, r0
   1eede:	5499      	strb	r1, [r3, r2]
		return result;
   1eee0:	693b      	ldr	r3, [r7, #16]
   1eee2:	e014      	b.n	1ef0e <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   1eee4:	2000      	movs	r0, #0
   1eee6:	4b0d      	ldr	r3, [pc, #52]	; (1ef1c <_http_client_send_wait+0x80>)
   1eee8:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   1eeea:	697b      	ldr	r3, [r7, #20]
   1eeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1eeee:	0018      	movs	r0, r3
   1eef0:	4b0b      	ldr	r3, [pc, #44]	; (1ef20 <_http_client_send_wait+0x84>)
   1eef2:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1eef4:	697b      	ldr	r3, [r7, #20]
   1eef6:	2241      	movs	r2, #65	; 0x41
   1eef8:	5c9b      	ldrb	r3, [r3, r2]
   1eefa:	2201      	movs	r2, #1
   1eefc:	4013      	ands	r3, r2
   1eefe:	b2db      	uxtb	r3, r3
   1ef00:	2b00      	cmp	r3, #0
   1ef02:	d003      	beq.n	1ef0c <_http_client_send_wait+0x70>
   1ef04:	697b      	ldr	r3, [r7, #20]
   1ef06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1ef08:	2b02      	cmp	r3, #2
   1ef0a:	d8eb      	bhi.n	1eee4 <_http_client_send_wait+0x48>
	}

	return 0;
   1ef0c:	2300      	movs	r3, #0
}
   1ef0e:	0018      	movs	r0, r3
   1ef10:	46bd      	mov	sp, r7
   1ef12:	b007      	add	sp, #28
   1ef14:	bd90      	pop	{r4, r7, pc}
   1ef16:	46c0      	nop			; (mov r8, r8)
   1ef18:	00013409 	.word	0x00013409
   1ef1c:	0000fab5 	.word	0x0000fab5
   1ef20:	000201a9 	.word	0x000201a9

0001ef24 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   1ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef26:	46c6      	mov	lr, r8
   1ef28:	b500      	push	{lr}
   1ef2a:	b0a0      	sub	sp, #128	; 0x80
   1ef2c:	af02      	add	r7, sp, #8
   1ef2e:	61f8      	str	r0, [r7, #28]
   1ef30:	4668      	mov	r0, sp
   1ef32:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1ef34:	2318      	movs	r3, #24
   1ef36:	2218      	movs	r2, #24
   1ef38:	18ba      	adds	r2, r7, r2
   1ef3a:	18d0      	adds	r0, r2, r3
   1ef3c:	4bbd      	ldr	r3, [pc, #756]	; (1f234 <_http_client_request+0x310>)
   1ef3e:	469c      	mov	ip, r3
   1ef40:	4663      	mov	r3, ip
   1ef42:	cb16      	ldmia	r3!, {r1, r2, r4}
   1ef44:	c016      	stmia	r0!, {r1, r2, r4}
   1ef46:	469c      	mov	ip, r3
   1ef48:	4663      	mov	r3, ip
   1ef4a:	681b      	ldr	r3, [r3, #0]
   1ef4c:	469c      	mov	ip, r3
   1ef4e:	4663      	mov	r3, ip
   1ef50:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1ef52:	69f8      	ldr	r0, [r7, #28]
   1ef54:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1ef56:	4684      	mov	ip, r0
   1ef58:	2301      	movs	r3, #1
   1ef5a:	425b      	negs	r3, r3
   1ef5c:	4698      	mov	r8, r3
   1ef5e:	44c4      	add	ip, r8
   1ef60:	4663      	mov	r3, ip
   1ef62:	66fb      	str	r3, [r7, #108]	; 0x6c
   1ef64:	6038      	str	r0, [r7, #0]
   1ef66:	2300      	movs	r3, #0
   1ef68:	607b      	str	r3, [r7, #4]
   1ef6a:	6839      	ldr	r1, [r7, #0]
   1ef6c:	687a      	ldr	r2, [r7, #4]
   1ef6e:	000b      	movs	r3, r1
   1ef70:	0f5b      	lsrs	r3, r3, #29
   1ef72:	469c      	mov	ip, r3
   1ef74:	0013      	movs	r3, r2
   1ef76:	00db      	lsls	r3, r3, #3
   1ef78:	617b      	str	r3, [r7, #20]
   1ef7a:	4663      	mov	r3, ip
   1ef7c:	697c      	ldr	r4, [r7, #20]
   1ef7e:	431c      	orrs	r4, r3
   1ef80:	617c      	str	r4, [r7, #20]
   1ef82:	000b      	movs	r3, r1
   1ef84:	00db      	lsls	r3, r3, #3
   1ef86:	613b      	str	r3, [r7, #16]
   1ef88:	0005      	movs	r5, r0
   1ef8a:	2200      	movs	r2, #0
   1ef8c:	0016      	movs	r6, r2
   1ef8e:	0f6a      	lsrs	r2, r5, #29
   1ef90:	00f3      	lsls	r3, r6, #3
   1ef92:	60fb      	str	r3, [r7, #12]
   1ef94:	68fb      	ldr	r3, [r7, #12]
   1ef96:	4313      	orrs	r3, r2
   1ef98:	60fb      	str	r3, [r7, #12]
   1ef9a:	00eb      	lsls	r3, r5, #3
   1ef9c:	60bb      	str	r3, [r7, #8]
   1ef9e:	1dc3      	adds	r3, r0, #7
   1efa0:	08db      	lsrs	r3, r3, #3
   1efa2:	00db      	lsls	r3, r3, #3
   1efa4:	466a      	mov	r2, sp
   1efa6:	1ad3      	subs	r3, r2, r3
   1efa8:	469d      	mov	sp, r3
   1efaa:	ab02      	add	r3, sp, #8
   1efac:	3300      	adds	r3, #0
   1efae:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   1efb0:	69fb      	ldr	r3, [r7, #28]
   1efb2:	2b00      	cmp	r3, #0
   1efb4:	d100      	bne.n	1efb8 <_http_client_request+0x94>
   1efb6:	e346      	b.n	1f646 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   1efb8:	69fb      	ldr	r3, [r7, #28]
   1efba:	2241      	movs	r2, #65	; 0x41
   1efbc:	5c9b      	ldrb	r3, [r3, r2]
   1efbe:	2201      	movs	r2, #1
   1efc0:	4013      	ands	r3, r2
   1efc2:	b2db      	uxtb	r3, r3
   1efc4:	2b00      	cmp	r3, #0
   1efc6:	d000      	beq.n	1efca <_http_client_request+0xa6>
   1efc8:	e33f      	b.n	1f64a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   1efca:	69fb      	ldr	r3, [r7, #28]
   1efcc:	33b0      	adds	r3, #176	; 0xb0
   1efce:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   1efd0:	69fb      	ldr	r3, [r7, #28]
   1efd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1efd4:	2b03      	cmp	r3, #3
   1efd6:	d003      	beq.n	1efe0 <_http_client_request+0xbc>
   1efd8:	2b04      	cmp	r3, #4
   1efda:	d100      	bne.n	1efde <_http_client_request+0xba>
   1efdc:	e1b3      	b.n	1f346 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   1efde:	e32f      	b.n	1f640 <_http_client_request+0x71c>
		module->req.content_length = 0;
   1efe0:	69fb      	ldr	r3, [r7, #28]
   1efe2:	22cc      	movs	r2, #204	; 0xcc
   1efe4:	2100      	movs	r1, #0
   1efe6:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   1efe8:	69fb      	ldr	r3, [r7, #28]
   1efea:	22d0      	movs	r2, #208	; 0xd0
   1efec:	2100      	movs	r1, #0
   1efee:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   1eff0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1eff2:	69fb      	ldr	r3, [r7, #28]
   1eff4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1eff6:	4c90      	ldr	r4, [pc, #576]	; (1f238 <_http_client_request+0x314>)
   1eff8:	2334      	movs	r3, #52	; 0x34
   1effa:	2018      	movs	r0, #24
   1effc:	1838      	adds	r0, r7, r0
   1effe:	18c0      	adds	r0, r0, r3
   1f000:	69fb      	ldr	r3, [r7, #28]
   1f002:	9300      	str	r3, [sp, #0]
   1f004:	0023      	movs	r3, r4
   1f006:	4c8d      	ldr	r4, [pc, #564]	; (1f23c <_http_client_request+0x318>)
   1f008:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   1f00a:	69fb      	ldr	r3, [r7, #28]
   1f00c:	22c8      	movs	r2, #200	; 0xc8
   1f00e:	5c9b      	ldrb	r3, [r3, r2]
   1f010:	2b01      	cmp	r3, #1
   1f012:	d10a      	bne.n	1f02a <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1f014:	498a      	ldr	r1, [pc, #552]	; (1f240 <_http_client_request+0x31c>)
   1f016:	2334      	movs	r3, #52	; 0x34
   1f018:	2218      	movs	r2, #24
   1f01a:	4694      	mov	ip, r2
   1f01c:	44bc      	add	ip, r7
   1f01e:	4463      	add	r3, ip
   1f020:	2204      	movs	r2, #4
   1f022:	0018      	movs	r0, r3
   1f024:	4b87      	ldr	r3, [pc, #540]	; (1f244 <_http_client_request+0x320>)
   1f026:	4798      	blx	r3
   1f028:	e04e      	b.n	1f0c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   1f02a:	69fb      	ldr	r3, [r7, #28]
   1f02c:	22c8      	movs	r2, #200	; 0xc8
   1f02e:	5c9b      	ldrb	r3, [r3, r2]
   1f030:	2b02      	cmp	r3, #2
   1f032:	d10a      	bne.n	1f04a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1f034:	4984      	ldr	r1, [pc, #528]	; (1f248 <_http_client_request+0x324>)
   1f036:	2334      	movs	r3, #52	; 0x34
   1f038:	2218      	movs	r2, #24
   1f03a:	4694      	mov	ip, r2
   1f03c:	44bc      	add	ip, r7
   1f03e:	4463      	add	r3, ip
   1f040:	2205      	movs	r2, #5
   1f042:	0018      	movs	r0, r3
   1f044:	4b7f      	ldr	r3, [pc, #508]	; (1f244 <_http_client_request+0x320>)
   1f046:	4798      	blx	r3
   1f048:	e03e      	b.n	1f0c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   1f04a:	69fb      	ldr	r3, [r7, #28]
   1f04c:	22c8      	movs	r2, #200	; 0xc8
   1f04e:	5c9b      	ldrb	r3, [r3, r2]
   1f050:	2b03      	cmp	r3, #3
   1f052:	d10a      	bne.n	1f06a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1f054:	497d      	ldr	r1, [pc, #500]	; (1f24c <_http_client_request+0x328>)
   1f056:	2334      	movs	r3, #52	; 0x34
   1f058:	2218      	movs	r2, #24
   1f05a:	4694      	mov	ip, r2
   1f05c:	44bc      	add	ip, r7
   1f05e:	4463      	add	r3, ip
   1f060:	2207      	movs	r2, #7
   1f062:	0018      	movs	r0, r3
   1f064:	4b77      	ldr	r3, [pc, #476]	; (1f244 <_http_client_request+0x320>)
   1f066:	4798      	blx	r3
   1f068:	e02e      	b.n	1f0c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1f06a:	69fb      	ldr	r3, [r7, #28]
   1f06c:	22c8      	movs	r2, #200	; 0xc8
   1f06e:	5c9b      	ldrb	r3, [r3, r2]
   1f070:	2b04      	cmp	r3, #4
   1f072:	d10a      	bne.n	1f08a <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   1f074:	4976      	ldr	r1, [pc, #472]	; (1f250 <_http_client_request+0x32c>)
   1f076:	2334      	movs	r3, #52	; 0x34
   1f078:	2218      	movs	r2, #24
   1f07a:	4694      	mov	ip, r2
   1f07c:	44bc      	add	ip, r7
   1f07e:	4463      	add	r3, ip
   1f080:	2204      	movs	r2, #4
   1f082:	0018      	movs	r0, r3
   1f084:	4b6f      	ldr	r3, [pc, #444]	; (1f244 <_http_client_request+0x320>)
   1f086:	4798      	blx	r3
   1f088:	e01e      	b.n	1f0c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   1f08a:	69fb      	ldr	r3, [r7, #28]
   1f08c:	22c8      	movs	r2, #200	; 0xc8
   1f08e:	5c9b      	ldrb	r3, [r3, r2]
   1f090:	2b05      	cmp	r3, #5
   1f092:	d10a      	bne.n	1f0aa <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   1f094:	496f      	ldr	r1, [pc, #444]	; (1f254 <_http_client_request+0x330>)
   1f096:	2334      	movs	r3, #52	; 0x34
   1f098:	2218      	movs	r2, #24
   1f09a:	4694      	mov	ip, r2
   1f09c:	44bc      	add	ip, r7
   1f09e:	4463      	add	r3, ip
   1f0a0:	2208      	movs	r2, #8
   1f0a2:	0018      	movs	r0, r3
   1f0a4:	4b67      	ldr	r3, [pc, #412]	; (1f244 <_http_client_request+0x320>)
   1f0a6:	4798      	blx	r3
   1f0a8:	e00e      	b.n	1f0c8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   1f0aa:	69fb      	ldr	r3, [r7, #28]
   1f0ac:	22c8      	movs	r2, #200	; 0xc8
   1f0ae:	5c9b      	ldrb	r3, [r3, r2]
   1f0b0:	2b06      	cmp	r3, #6
   1f0b2:	d109      	bne.n	1f0c8 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   1f0b4:	4968      	ldr	r1, [pc, #416]	; (1f258 <_http_client_request+0x334>)
   1f0b6:	2334      	movs	r3, #52	; 0x34
   1f0b8:	2218      	movs	r2, #24
   1f0ba:	4694      	mov	ip, r2
   1f0bc:	44bc      	add	ip, r7
   1f0be:	4463      	add	r3, ip
   1f0c0:	2205      	movs	r2, #5
   1f0c2:	0018      	movs	r0, r3
   1f0c4:	4b5f      	ldr	r3, [pc, #380]	; (1f244 <_http_client_request+0x320>)
   1f0c6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1f0c8:	69fb      	ldr	r3, [r7, #28]
   1f0ca:	3370      	adds	r3, #112	; 0x70
   1f0cc:	001c      	movs	r4, r3
   1f0ce:	69fb      	ldr	r3, [r7, #28]
   1f0d0:	3370      	adds	r3, #112	; 0x70
   1f0d2:	0018      	movs	r0, r3
   1f0d4:	4b61      	ldr	r3, [pc, #388]	; (1f25c <_http_client_request+0x338>)
   1f0d6:	4798      	blx	r3
   1f0d8:	0002      	movs	r2, r0
   1f0da:	2334      	movs	r3, #52	; 0x34
   1f0dc:	2118      	movs	r1, #24
   1f0de:	468c      	mov	ip, r1
   1f0e0:	44bc      	add	ip, r7
   1f0e2:	4463      	add	r3, ip
   1f0e4:	0021      	movs	r1, r4
   1f0e6:	0018      	movs	r0, r3
   1f0e8:	4b56      	ldr	r3, [pc, #344]	; (1f244 <_http_client_request+0x320>)
   1f0ea:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   1f0ec:	495c      	ldr	r1, [pc, #368]	; (1f260 <_http_client_request+0x33c>)
   1f0ee:	2334      	movs	r3, #52	; 0x34
   1f0f0:	2218      	movs	r2, #24
   1f0f2:	4694      	mov	ip, r2
   1f0f4:	44bc      	add	ip, r7
   1f0f6:	4463      	add	r3, ip
   1f0f8:	220b      	movs	r2, #11
   1f0fa:	0018      	movs	r0, r3
   1f0fc:	4b51      	ldr	r3, [pc, #324]	; (1f244 <_http_client_request+0x320>)
   1f0fe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   1f100:	4958      	ldr	r1, [pc, #352]	; (1f264 <_http_client_request+0x340>)
   1f102:	2334      	movs	r3, #52	; 0x34
   1f104:	2218      	movs	r2, #24
   1f106:	4694      	mov	ip, r2
   1f108:	44bc      	add	ip, r7
   1f10a:	4463      	add	r3, ip
   1f10c:	220c      	movs	r2, #12
   1f10e:	0018      	movs	r0, r3
   1f110:	4b4c      	ldr	r3, [pc, #304]	; (1f244 <_http_client_request+0x320>)
   1f112:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   1f114:	69fb      	ldr	r3, [r7, #28]
   1f116:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   1f118:	69fb      	ldr	r3, [r7, #28]
   1f11a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1f11c:	0018      	movs	r0, r3
   1f11e:	4b4f      	ldr	r3, [pc, #316]	; (1f25c <_http_client_request+0x338>)
   1f120:	4798      	blx	r3
   1f122:	0002      	movs	r2, r0
   1f124:	2334      	movs	r3, #52	; 0x34
   1f126:	2118      	movs	r1, #24
   1f128:	468c      	mov	ip, r1
   1f12a:	44bc      	add	ip, r7
   1f12c:	4463      	add	r3, ip
   1f12e:	0021      	movs	r1, r4
   1f130:	0018      	movs	r0, r3
   1f132:	4b44      	ldr	r3, [pc, #272]	; (1f244 <_http_client_request+0x320>)
   1f134:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1f136:	494c      	ldr	r1, [pc, #304]	; (1f268 <_http_client_request+0x344>)
   1f138:	2334      	movs	r3, #52	; 0x34
   1f13a:	2218      	movs	r2, #24
   1f13c:	4694      	mov	ip, r2
   1f13e:	44bc      	add	ip, r7
   1f140:	4463      	add	r3, ip
   1f142:	2202      	movs	r2, #2
   1f144:	0018      	movs	r0, r3
   1f146:	4b3f      	ldr	r3, [pc, #252]	; (1f244 <_http_client_request+0x320>)
   1f148:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   1f14a:	4948      	ldr	r1, [pc, #288]	; (1f26c <_http_client_request+0x348>)
   1f14c:	2334      	movs	r3, #52	; 0x34
   1f14e:	2218      	movs	r2, #24
   1f150:	4694      	mov	ip, r2
   1f152:	44bc      	add	ip, r7
   1f154:	4463      	add	r3, ip
   1f156:	2206      	movs	r2, #6
   1f158:	0018      	movs	r0, r3
   1f15a:	4b3a      	ldr	r3, [pc, #232]	; (1f244 <_http_client_request+0x320>)
   1f15c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   1f15e:	69fb      	ldr	r3, [r7, #28]
   1f160:	1c5c      	adds	r4, r3, #1
   1f162:	69fb      	ldr	r3, [r7, #28]
   1f164:	3301      	adds	r3, #1
   1f166:	0018      	movs	r0, r3
   1f168:	4b3c      	ldr	r3, [pc, #240]	; (1f25c <_http_client_request+0x338>)
   1f16a:	4798      	blx	r3
   1f16c:	0002      	movs	r2, r0
   1f16e:	2334      	movs	r3, #52	; 0x34
   1f170:	2118      	movs	r1, #24
   1f172:	468c      	mov	ip, r1
   1f174:	44bc      	add	ip, r7
   1f176:	4463      	add	r3, ip
   1f178:	0021      	movs	r1, r4
   1f17a:	0018      	movs	r0, r3
   1f17c:	4b31      	ldr	r3, [pc, #196]	; (1f244 <_http_client_request+0x320>)
   1f17e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1f180:	4939      	ldr	r1, [pc, #228]	; (1f268 <_http_client_request+0x344>)
   1f182:	2334      	movs	r3, #52	; 0x34
   1f184:	2218      	movs	r2, #24
   1f186:	4694      	mov	ip, r2
   1f188:	44bc      	add	ip, r7
   1f18a:	4463      	add	r3, ip
   1f18c:	2202      	movs	r2, #2
   1f18e:	0018      	movs	r0, r3
   1f190:	4b2c      	ldr	r3, [pc, #176]	; (1f244 <_http_client_request+0x320>)
   1f192:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   1f194:	4936      	ldr	r1, [pc, #216]	; (1f270 <_http_client_request+0x34c>)
   1f196:	2334      	movs	r3, #52	; 0x34
   1f198:	2218      	movs	r2, #24
   1f19a:	4694      	mov	ip, r2
   1f19c:	44bc      	add	ip, r7
   1f19e:	4463      	add	r3, ip
   1f1a0:	2218      	movs	r2, #24
   1f1a2:	0018      	movs	r0, r3
   1f1a4:	4b27      	ldr	r3, [pc, #156]	; (1f244 <_http_client_request+0x320>)
   1f1a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   1f1a8:	4932      	ldr	r1, [pc, #200]	; (1f274 <_http_client_request+0x350>)
   1f1aa:	2334      	movs	r3, #52	; 0x34
   1f1ac:	2218      	movs	r2, #24
   1f1ae:	4694      	mov	ip, r2
   1f1b0:	44bc      	add	ip, r7
   1f1b2:	4463      	add	r3, ip
   1f1b4:	2213      	movs	r2, #19
   1f1b6:	0018      	movs	r0, r3
   1f1b8:	4b22      	ldr	r3, [pc, #136]	; (1f244 <_http_client_request+0x320>)
   1f1ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   1f1bc:	492e      	ldr	r1, [pc, #184]	; (1f278 <_http_client_request+0x354>)
   1f1be:	2334      	movs	r3, #52	; 0x34
   1f1c0:	2218      	movs	r2, #24
   1f1c2:	4694      	mov	ip, r2
   1f1c4:	44bc      	add	ip, r7
   1f1c6:	4463      	add	r3, ip
   1f1c8:	2217      	movs	r2, #23
   1f1ca:	0018      	movs	r0, r3
   1f1cc:	4b1d      	ldr	r3, [pc, #116]	; (1f244 <_http_client_request+0x320>)
   1f1ce:	4798      	blx	r3
		if (entity->read != NULL) {
   1f1d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f1d2:	68db      	ldr	r3, [r3, #12]
   1f1d4:	2b00      	cmp	r3, #0
   1f1d6:	d100      	bne.n	1f1da <_http_client_request+0x2b6>
   1f1d8:	e088      	b.n	1f2ec <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   1f1da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f1dc:	781b      	ldrb	r3, [r3, #0]
   1f1de:	2b00      	cmp	r3, #0
   1f1e0:	d00f      	beq.n	1f202 <_http_client_request+0x2de>
				module->req.content_length = -1;
   1f1e2:	69fb      	ldr	r3, [r7, #28]
   1f1e4:	21cc      	movs	r1, #204	; 0xcc
   1f1e6:	2201      	movs	r2, #1
   1f1e8:	4252      	negs	r2, r2
   1f1ea:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   1f1ec:	4923      	ldr	r1, [pc, #140]	; (1f27c <_http_client_request+0x358>)
   1f1ee:	2334      	movs	r3, #52	; 0x34
   1f1f0:	2218      	movs	r2, #24
   1f1f2:	4694      	mov	ip, r2
   1f1f4:	44bc      	add	ip, r7
   1f1f6:	4463      	add	r3, ip
   1f1f8:	221c      	movs	r2, #28
   1f1fa:	0018      	movs	r0, r3
   1f1fc:	4b11      	ldr	r3, [pc, #68]	; (1f244 <_http_client_request+0x320>)
   1f1fe:	4798      	blx	r3
   1f200:	e074      	b.n	1f2ec <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   1f202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f204:	689b      	ldr	r3, [r3, #8]
   1f206:	2b00      	cmp	r3, #0
   1f208:	d070      	beq.n	1f2ec <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   1f20a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f20c:	689a      	ldr	r2, [r3, #8]
   1f20e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f210:	695b      	ldr	r3, [r3, #20]
   1f212:	0018      	movs	r0, r3
   1f214:	4790      	blx	r2
   1f216:	0001      	movs	r1, r0
   1f218:	69fb      	ldr	r3, [r7, #28]
   1f21a:	22cc      	movs	r2, #204	; 0xcc
   1f21c:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   1f21e:	69fb      	ldr	r3, [r7, #28]
   1f220:	22cc      	movs	r2, #204	; 0xcc
   1f222:	589b      	ldr	r3, [r3, r2]
   1f224:	2b00      	cmp	r3, #0
   1f226:	da2b      	bge.n	1f280 <_http_client_request+0x35c>
					module->req.content_length = 0;
   1f228:	69fb      	ldr	r3, [r7, #28]
   1f22a:	22cc      	movs	r2, #204	; 0xcc
   1f22c:	2100      	movs	r1, #0
   1f22e:	5099      	str	r1, [r3, r2]
   1f230:	e05c      	b.n	1f2ec <_http_client_request+0x3c8>
   1f232:	46c0      	nop			; (mov r8, r8)
   1f234:	00028af4 	.word	0x00028af4
   1f238:	0001ee9d 	.word	0x0001ee9d
   1f23c:	0001fe05 	.word	0x0001fe05
   1f240:	00028a18 	.word	0x00028a18
   1f244:	0001fe85 	.word	0x0001fe85
   1f248:	00028a20 	.word	0x00028a20
   1f24c:	00028a28 	.word	0x00028a28
   1f250:	00028a30 	.word	0x00028a30
   1f254:	00028a38 	.word	0x00028a38
   1f258:	00028a44 	.word	0x00028a44
   1f25c:	00023157 	.word	0x00023157
   1f260:	00028a4c 	.word	0x00028a4c
   1f264:	00028a58 	.word	0x00028a58
   1f268:	00028a68 	.word	0x00028a68
   1f26c:	00028a6c 	.word	0x00028a6c
   1f270:	00028a74 	.word	0x00028a74
   1f274:	00028a90 	.word	0x00028a90
   1f278:	00028aa4 	.word	0x00028aa4
   1f27c:	00028abc 	.word	0x00028abc
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   1f280:	69fb      	ldr	r3, [r7, #28]
   1f282:	22cc      	movs	r2, #204	; 0xcc
   1f284:	589b      	ldr	r3, [r3, r2]
   1f286:	001a      	movs	r2, r3
   1f288:	49e0      	ldr	r1, [pc, #896]	; (1f60c <_http_client_request+0x6e8>)
   1f28a:	2328      	movs	r3, #40	; 0x28
   1f28c:	2018      	movs	r0, #24
   1f28e:	4684      	mov	ip, r0
   1f290:	44bc      	add	ip, r7
   1f292:	4463      	add	r3, ip
   1f294:	0018      	movs	r0, r3
   1f296:	4bde      	ldr	r3, [pc, #888]	; (1f610 <_http_client_request+0x6ec>)
   1f298:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1f29a:	49de      	ldr	r1, [pc, #888]	; (1f614 <_http_client_request+0x6f0>)
   1f29c:	2334      	movs	r3, #52	; 0x34
   1f29e:	2218      	movs	r2, #24
   1f2a0:	4694      	mov	ip, r2
   1f2a2:	44bc      	add	ip, r7
   1f2a4:	4463      	add	r3, ip
   1f2a6:	2210      	movs	r2, #16
   1f2a8:	0018      	movs	r0, r3
   1f2aa:	4bdb      	ldr	r3, [pc, #876]	; (1f618 <_http_client_request+0x6f4>)
   1f2ac:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   1f2ae:	2328      	movs	r3, #40	; 0x28
   1f2b0:	2218      	movs	r2, #24
   1f2b2:	4694      	mov	ip, r2
   1f2b4:	44bc      	add	ip, r7
   1f2b6:	4463      	add	r3, ip
   1f2b8:	0018      	movs	r0, r3
   1f2ba:	4bd8      	ldr	r3, [pc, #864]	; (1f61c <_http_client_request+0x6f8>)
   1f2bc:	4798      	blx	r3
   1f2be:	0002      	movs	r2, r0
   1f2c0:	2328      	movs	r3, #40	; 0x28
   1f2c2:	2118      	movs	r1, #24
   1f2c4:	1879      	adds	r1, r7, r1
   1f2c6:	18c9      	adds	r1, r1, r3
   1f2c8:	2334      	movs	r3, #52	; 0x34
   1f2ca:	2018      	movs	r0, #24
   1f2cc:	4684      	mov	ip, r0
   1f2ce:	44bc      	add	ip, r7
   1f2d0:	4463      	add	r3, ip
   1f2d2:	0018      	movs	r0, r3
   1f2d4:	4bd0      	ldr	r3, [pc, #832]	; (1f618 <_http_client_request+0x6f4>)
   1f2d6:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1f2d8:	49d1      	ldr	r1, [pc, #836]	; (1f620 <_http_client_request+0x6fc>)
   1f2da:	2334      	movs	r3, #52	; 0x34
   1f2dc:	2218      	movs	r2, #24
   1f2de:	4694      	mov	ip, r2
   1f2e0:	44bc      	add	ip, r7
   1f2e2:	4463      	add	r3, ip
   1f2e4:	2202      	movs	r2, #2
   1f2e6:	0018      	movs	r0, r3
   1f2e8:	4bcb      	ldr	r3, [pc, #812]	; (1f618 <_http_client_request+0x6f4>)
   1f2ea:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   1f2ec:	69fb      	ldr	r3, [r7, #28]
   1f2ee:	22d4      	movs	r2, #212	; 0xd4
   1f2f0:	589b      	ldr	r3, [r3, r2]
   1f2f2:	2b00      	cmp	r3, #0
   1f2f4:	d012      	beq.n	1f31c <_http_client_request+0x3f8>
				module->req.ext_header,
   1f2f6:	69fb      	ldr	r3, [r7, #28]
   1f2f8:	22d4      	movs	r2, #212	; 0xd4
   1f2fa:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   1f2fc:	69fb      	ldr	r3, [r7, #28]
   1f2fe:	22d4      	movs	r2, #212	; 0xd4
   1f300:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   1f302:	0018      	movs	r0, r3
   1f304:	4bc5      	ldr	r3, [pc, #788]	; (1f61c <_http_client_request+0x6f8>)
   1f306:	4798      	blx	r3
   1f308:	0002      	movs	r2, r0
   1f30a:	2334      	movs	r3, #52	; 0x34
   1f30c:	2118      	movs	r1, #24
   1f30e:	468c      	mov	ip, r1
   1f310:	44bc      	add	ip, r7
   1f312:	4463      	add	r3, ip
   1f314:	0021      	movs	r1, r4
   1f316:	0018      	movs	r0, r3
   1f318:	4bbf      	ldr	r3, [pc, #764]	; (1f618 <_http_client_request+0x6f4>)
   1f31a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1f31c:	49c0      	ldr	r1, [pc, #768]	; (1f620 <_http_client_request+0x6fc>)
   1f31e:	2334      	movs	r3, #52	; 0x34
   1f320:	2218      	movs	r2, #24
   1f322:	4694      	mov	ip, r2
   1f324:	44bc      	add	ip, r7
   1f326:	4463      	add	r3, ip
   1f328:	2202      	movs	r2, #2
   1f32a:	0018      	movs	r0, r3
   1f32c:	4bba      	ldr	r3, [pc, #744]	; (1f618 <_http_client_request+0x6f4>)
   1f32e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   1f330:	2334      	movs	r3, #52	; 0x34
   1f332:	2218      	movs	r2, #24
   1f334:	4694      	mov	ip, r2
   1f336:	44bc      	add	ip, r7
   1f338:	4463      	add	r3, ip
   1f33a:	0018      	movs	r0, r3
   1f33c:	4bb9      	ldr	r3, [pc, #740]	; (1f624 <_http_client_request+0x700>)
   1f33e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   1f340:	69fb      	ldr	r3, [r7, #28]
   1f342:	2204      	movs	r2, #4
   1f344:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   1f346:	69fb      	ldr	r3, [r7, #28]
   1f348:	22cc      	movs	r2, #204	; 0xcc
   1f34a:	589b      	ldr	r3, [r3, r2]
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	db00      	blt.n	1f352 <_http_client_request+0x42e>
   1f350:	e0c6      	b.n	1f4e0 <_http_client_request+0x5bc>
   1f352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f354:	68db      	ldr	r3, [r3, #12]
   1f356:	2b00      	cmp	r3, #0
   1f358:	d100      	bne.n	1f35c <_http_client_request+0x438>
   1f35a:	e0c1      	b.n	1f4e0 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1f35c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f35e:	68dc      	ldr	r4, [r3, #12]
   1f360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f362:	6958      	ldr	r0, [r3, #20]
   1f364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f366:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1f368:	69fb      	ldr	r3, [r7, #28]
   1f36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1f36c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1f36e:	69fb      	ldr	r3, [r7, #28]
   1f370:	22d0      	movs	r2, #208	; 0xd0
   1f372:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1f374:	002a      	movs	r2, r5
   1f376:	47a0      	blx	r4
   1f378:	0003      	movs	r3, r0
   1f37a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1f37c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f37e:	2b00      	cmp	r3, #0
   1f380:	da01      	bge.n	1f386 <_http_client_request+0x462>
				size = 0;
   1f382:	2300      	movs	r3, #0
   1f384:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   1f386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f388:	220a      	movs	r2, #10
   1f38a:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1f38c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f38e:	220d      	movs	r2, #13
   1f390:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1f392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f394:	3305      	adds	r3, #5
   1f396:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1f398:	210d      	movs	r1, #13
   1f39a:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   1f39c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f39e:	3306      	adds	r3, #6
   1f3a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1f3a2:	210a      	movs	r1, #10
   1f3a4:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   1f3a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f3a8:	2b00      	cmp	r3, #0
   1f3aa:	db14      	blt.n	1f3d6 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   1f3ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f3ae:	3302      	adds	r3, #2
   1f3b0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   1f3b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f3b4:	4a9c      	ldr	r2, [pc, #624]	; (1f628 <_http_client_request+0x704>)
   1f3b6:	4013      	ands	r3, r2
   1f3b8:	d504      	bpl.n	1f3c4 <_http_client_request+0x4a0>
   1f3ba:	3b01      	subs	r3, #1
   1f3bc:	2210      	movs	r2, #16
   1f3be:	4252      	negs	r2, r2
   1f3c0:	4313      	orrs	r3, r2
   1f3c2:	3301      	adds	r3, #1
   1f3c4:	001a      	movs	r2, r3
   1f3c6:	2318      	movs	r3, #24
   1f3c8:	2118      	movs	r1, #24
   1f3ca:	468c      	mov	ip, r1
   1f3cc:	44bc      	add	ip, r7
   1f3ce:	4463      	add	r3, ip
   1f3d0:	5c9a      	ldrb	r2, [r3, r2]
   1f3d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1f3d4:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   1f3d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f3d8:	2b0f      	cmp	r3, #15
   1f3da:	dd19      	ble.n	1f410 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   1f3dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f3de:	3301      	adds	r3, #1
   1f3e0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   1f3e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f3e4:	2b00      	cmp	r3, #0
   1f3e6:	da00      	bge.n	1f3ea <_http_client_request+0x4c6>
   1f3e8:	330f      	adds	r3, #15
   1f3ea:	111b      	asrs	r3, r3, #4
   1f3ec:	001a      	movs	r2, r3
   1f3ee:	4b8e      	ldr	r3, [pc, #568]	; (1f628 <_http_client_request+0x704>)
   1f3f0:	4013      	ands	r3, r2
   1f3f2:	d504      	bpl.n	1f3fe <_http_client_request+0x4da>
   1f3f4:	3b01      	subs	r3, #1
   1f3f6:	2210      	movs	r2, #16
   1f3f8:	4252      	negs	r2, r2
   1f3fa:	4313      	orrs	r3, r2
   1f3fc:	3301      	adds	r3, #1
   1f3fe:	001a      	movs	r2, r3
   1f400:	2318      	movs	r3, #24
   1f402:	2118      	movs	r1, #24
   1f404:	468c      	mov	ip, r1
   1f406:	44bc      	add	ip, r7
   1f408:	4463      	add	r3, ip
   1f40a:	5c9a      	ldrb	r2, [r3, r2]
   1f40c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1f40e:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   1f410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f412:	2bff      	cmp	r3, #255	; 0xff
   1f414:	dd18      	ble.n	1f448 <_http_client_request+0x524>
				ptr = buffer;
   1f416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f418:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   1f41a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f41c:	2b00      	cmp	r3, #0
   1f41e:	da00      	bge.n	1f422 <_http_client_request+0x4fe>
   1f420:	33ff      	adds	r3, #255	; 0xff
   1f422:	121b      	asrs	r3, r3, #8
   1f424:	001a      	movs	r2, r3
   1f426:	4b80      	ldr	r3, [pc, #512]	; (1f628 <_http_client_request+0x704>)
   1f428:	4013      	ands	r3, r2
   1f42a:	d504      	bpl.n	1f436 <_http_client_request+0x512>
   1f42c:	3b01      	subs	r3, #1
   1f42e:	2210      	movs	r2, #16
   1f430:	4252      	negs	r2, r2
   1f432:	4313      	orrs	r3, r2
   1f434:	3301      	adds	r3, #1
   1f436:	001a      	movs	r2, r3
   1f438:	2318      	movs	r3, #24
   1f43a:	2118      	movs	r1, #24
   1f43c:	468c      	mov	ip, r1
   1f43e:	44bc      	add	ip, r7
   1f440:	4463      	add	r3, ip
   1f442:	5c9a      	ldrb	r2, [r3, r2]
   1f444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1f446:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   1f448:	69fb      	ldr	r3, [r7, #28]
   1f44a:	2000      	movs	r0, #0
   1f44c:	5618      	ldrsb	r0, [r3, r0]
   1f44e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1f450:	3303      	adds	r3, #3
   1f452:	001a      	movs	r2, r3
   1f454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f456:	1ad3      	subs	r3, r2, r3
   1f458:	b29a      	uxth	r2, r3
   1f45a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f45c:	b29b      	uxth	r3, r3
   1f45e:	18d3      	adds	r3, r2, r3
   1f460:	b29b      	uxth	r3, r3
   1f462:	3304      	adds	r3, #4
   1f464:	b29a      	uxth	r2, r3
   1f466:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1f468:	2300      	movs	r3, #0
   1f46a:	4c70      	ldr	r4, [pc, #448]	; (1f62c <_http_client_request+0x708>)
   1f46c:	47a0      	blx	r4
   1f46e:	0003      	movs	r3, r0
   1f470:	663b      	str	r3, [r7, #96]	; 0x60
   1f472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1f474:	2b00      	cmp	r3, #0
   1f476:	da07      	bge.n	1f488 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   1f478:	2305      	movs	r3, #5
   1f47a:	425a      	negs	r2, r3
   1f47c:	69fb      	ldr	r3, [r7, #28]
   1f47e:	0011      	movs	r1, r2
   1f480:	0018      	movs	r0, r3
   1f482:	4b6b      	ldr	r3, [pc, #428]	; (1f630 <_http_client_request+0x70c>)
   1f484:	4798      	blx	r3
				return;
   1f486:	e0e1      	b.n	1f64c <_http_client_request+0x728>
			module->req.sent_length += size;
   1f488:	69fb      	ldr	r3, [r7, #28]
   1f48a:	22d0      	movs	r2, #208	; 0xd0
   1f48c:	589a      	ldr	r2, [r3, r2]
   1f48e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f490:	18d2      	adds	r2, r2, r3
   1f492:	69fb      	ldr	r3, [r7, #28]
   1f494:	21d0      	movs	r1, #208	; 0xd0
   1f496:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   1f498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f49a:	2b00      	cmp	r3, #0
   1f49c:	d000      	beq.n	1f4a0 <_http_client_request+0x57c>
   1f49e:	e0c9      	b.n	1f634 <_http_client_request+0x710>
				if (module->req.entity.close) {
   1f4a0:	69fb      	ldr	r3, [r7, #28]
   1f4a2:	22c0      	movs	r2, #192	; 0xc0
   1f4a4:	589b      	ldr	r3, [r3, r2]
   1f4a6:	2b00      	cmp	r3, #0
   1f4a8:	d007      	beq.n	1f4ba <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   1f4aa:	69fb      	ldr	r3, [r7, #28]
   1f4ac:	22c0      	movs	r2, #192	; 0xc0
   1f4ae:	589b      	ldr	r3, [r3, r2]
   1f4b0:	69fa      	ldr	r2, [r7, #28]
   1f4b2:	21c4      	movs	r1, #196	; 0xc4
   1f4b4:	5852      	ldr	r2, [r2, r1]
   1f4b6:	0010      	movs	r0, r2
   1f4b8:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1f4ba:	69fb      	ldr	r3, [r7, #28]
   1f4bc:	2202      	movs	r2, #2
   1f4be:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1f4c0:	69fb      	ldr	r3, [r7, #28]
   1f4c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f4c4:	2b00      	cmp	r3, #0
   1f4c6:	d100      	bne.n	1f4ca <_http_client_request+0x5a6>
   1f4c8:	e0b5      	b.n	1f636 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1f4ca:	69fb      	ldr	r3, [r7, #28]
   1f4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f4ce:	220c      	movs	r2, #12
   1f4d0:	2118      	movs	r1, #24
   1f4d2:	468c      	mov	ip, r1
   1f4d4:	44bc      	add	ip, r7
   1f4d6:	4462      	add	r2, ip
   1f4d8:	69f8      	ldr	r0, [r7, #28]
   1f4da:	2101      	movs	r1, #1
   1f4dc:	4798      	blx	r3
				break;
   1f4de:	e0aa      	b.n	1f636 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   1f4e0:	69fb      	ldr	r3, [r7, #28]
   1f4e2:	22cc      	movs	r2, #204	; 0xcc
   1f4e4:	589b      	ldr	r3, [r3, r2]
   1f4e6:	2b00      	cmp	r3, #0
   1f4e8:	dc00      	bgt.n	1f4ec <_http_client_request+0x5c8>
   1f4ea:	e07c      	b.n	1f5e6 <_http_client_request+0x6c2>
   1f4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f4ee:	68db      	ldr	r3, [r3, #12]
   1f4f0:	2b00      	cmp	r3, #0
   1f4f2:	d100      	bne.n	1f4f6 <_http_client_request+0x5d2>
   1f4f4:	e077      	b.n	1f5e6 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   1f4f6:	69fb      	ldr	r3, [r7, #28]
   1f4f8:	22d0      	movs	r2, #208	; 0xd0
   1f4fa:	589a      	ldr	r2, [r3, r2]
   1f4fc:	69fb      	ldr	r3, [r7, #28]
   1f4fe:	21cc      	movs	r1, #204	; 0xcc
   1f500:	585b      	ldr	r3, [r3, r1]
   1f502:	429a      	cmp	r2, r3
   1f504:	db1f      	blt.n	1f546 <_http_client_request+0x622>
				if (module->req.entity.close) {
   1f506:	69fb      	ldr	r3, [r7, #28]
   1f508:	22c0      	movs	r2, #192	; 0xc0
   1f50a:	589b      	ldr	r3, [r3, r2]
   1f50c:	2b00      	cmp	r3, #0
   1f50e:	d007      	beq.n	1f520 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   1f510:	69fb      	ldr	r3, [r7, #28]
   1f512:	22c0      	movs	r2, #192	; 0xc0
   1f514:	589b      	ldr	r3, [r3, r2]
   1f516:	69fa      	ldr	r2, [r7, #28]
   1f518:	21c4      	movs	r1, #196	; 0xc4
   1f51a:	5852      	ldr	r2, [r2, r1]
   1f51c:	0010      	movs	r0, r2
   1f51e:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1f520:	69fb      	ldr	r3, [r7, #28]
   1f522:	2202      	movs	r2, #2
   1f524:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1f526:	69fb      	ldr	r3, [r7, #28]
   1f528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f52a:	2b00      	cmp	r3, #0
   1f52c:	d100      	bne.n	1f530 <_http_client_request+0x60c>
   1f52e:	e084      	b.n	1f63a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1f530:	69fb      	ldr	r3, [r7, #28]
   1f532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f534:	220c      	movs	r2, #12
   1f536:	2118      	movs	r1, #24
   1f538:	468c      	mov	ip, r1
   1f53a:	44bc      	add	ip, r7
   1f53c:	4462      	add	r2, ip
   1f53e:	69f8      	ldr	r0, [r7, #28]
   1f540:	2101      	movs	r1, #1
   1f542:	4798      	blx	r3
				break;
   1f544:	e079      	b.n	1f63a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   1f546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f548:	68dc      	ldr	r4, [r3, #12]
   1f54a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f54c:	6958      	ldr	r0, [r3, #20]
   1f54e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1f550:	69fb      	ldr	r3, [r7, #28]
   1f552:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   1f554:	69fb      	ldr	r3, [r7, #28]
   1f556:	22d0      	movs	r2, #208	; 0xd0
   1f558:	589b      	ldr	r3, [r3, r2]
   1f55a:	002a      	movs	r2, r5
   1f55c:	47a0      	blx	r4
   1f55e:	0003      	movs	r3, r0
   1f560:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1f562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f564:	2b00      	cmp	r3, #0
   1f566:	da0d      	bge.n	1f584 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1f568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f56a:	2b00      	cmp	r3, #0
   1f56c:	d102      	bne.n	1f574 <_http_client_request+0x650>
   1f56e:	234d      	movs	r3, #77	; 0x4d
   1f570:	425b      	negs	r3, r3
   1f572:	e001      	b.n	1f578 <_http_client_request+0x654>
   1f574:	2305      	movs	r3, #5
   1f576:	425b      	negs	r3, r3
   1f578:	69fa      	ldr	r2, [r7, #28]
   1f57a:	0019      	movs	r1, r3
   1f57c:	0010      	movs	r0, r2
   1f57e:	4b2c      	ldr	r3, [pc, #176]	; (1f630 <_http_client_request+0x70c>)
   1f580:	4798      	blx	r3
			if (size < 0) {
   1f582:	e057      	b.n	1f634 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   1f584:	69fb      	ldr	r3, [r7, #28]
   1f586:	22cc      	movs	r2, #204	; 0xcc
   1f588:	589a      	ldr	r2, [r3, r2]
   1f58a:	69fb      	ldr	r3, [r7, #28]
   1f58c:	21d0      	movs	r1, #208	; 0xd0
   1f58e:	585b      	ldr	r3, [r3, r1]
   1f590:	1ad2      	subs	r2, r2, r3
   1f592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f594:	429a      	cmp	r2, r3
   1f596:	da07      	bge.n	1f5a8 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   1f598:	69fb      	ldr	r3, [r7, #28]
   1f59a:	22cc      	movs	r2, #204	; 0xcc
   1f59c:	589a      	ldr	r2, [r3, r2]
   1f59e:	69fb      	ldr	r3, [r7, #28]
   1f5a0:	21d0      	movs	r1, #208	; 0xd0
   1f5a2:	585b      	ldr	r3, [r3, r1]
   1f5a4:	1ad3      	subs	r3, r2, r3
   1f5a6:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   1f5a8:	69fb      	ldr	r3, [r7, #28]
   1f5aa:	2000      	movs	r0, #0
   1f5ac:	5618      	ldrsb	r0, [r3, r0]
   1f5ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1f5b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f5b2:	b29a      	uxth	r2, r3
   1f5b4:	2300      	movs	r3, #0
   1f5b6:	4c1d      	ldr	r4, [pc, #116]	; (1f62c <_http_client_request+0x708>)
   1f5b8:	47a0      	blx	r4
   1f5ba:	0003      	movs	r3, r0
   1f5bc:	663b      	str	r3, [r7, #96]	; 0x60
   1f5be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1f5c0:	2b00      	cmp	r3, #0
   1f5c2:	da07      	bge.n	1f5d4 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   1f5c4:	2305      	movs	r3, #5
   1f5c6:	425a      	negs	r2, r3
   1f5c8:	69fb      	ldr	r3, [r7, #28]
   1f5ca:	0011      	movs	r1, r2
   1f5cc:	0018      	movs	r0, r3
   1f5ce:	4b18      	ldr	r3, [pc, #96]	; (1f630 <_http_client_request+0x70c>)
   1f5d0:	4798      	blx	r3
					return;
   1f5d2:	e03b      	b.n	1f64c <_http_client_request+0x728>
				module->req.sent_length += size;
   1f5d4:	69fb      	ldr	r3, [r7, #28]
   1f5d6:	22d0      	movs	r2, #208	; 0xd0
   1f5d8:	589a      	ldr	r2, [r3, r2]
   1f5da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1f5dc:	18d2      	adds	r2, r2, r3
   1f5de:	69fb      	ldr	r3, [r7, #28]
   1f5e0:	21d0      	movs	r1, #208	; 0xd0
   1f5e2:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   1f5e4:	e026      	b.n	1f634 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   1f5e6:	69fb      	ldr	r3, [r7, #28]
   1f5e8:	2202      	movs	r2, #2
   1f5ea:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   1f5ec:	69fb      	ldr	r3, [r7, #28]
   1f5ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f5f0:	2b00      	cmp	r3, #0
   1f5f2:	d024      	beq.n	1f63e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1f5f4:	69fb      	ldr	r3, [r7, #28]
   1f5f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f5f8:	220c      	movs	r2, #12
   1f5fa:	2118      	movs	r1, #24
   1f5fc:	468c      	mov	ip, r1
   1f5fe:	44bc      	add	ip, r7
   1f600:	4462      	add	r2, ip
   1f602:	69f8      	ldr	r0, [r7, #28]
   1f604:	2101      	movs	r1, #1
   1f606:	4798      	blx	r3
			break;
   1f608:	e019      	b.n	1f63e <_http_client_request+0x71a>
   1f60a:	46c0      	nop			; (mov r8, r8)
   1f60c:	00028adc 	.word	0x00028adc
   1f610:	00023079 	.word	0x00023079
   1f614:	00028ae0 	.word	0x00028ae0
   1f618:	0001fe85 	.word	0x0001fe85
   1f61c:	00023157 	.word	0x00023157
   1f620:	00028a68 	.word	0x00028a68
   1f624:	0001fec1 	.word	0x0001fec1
   1f628:	8000000f 	.word	0x8000000f
   1f62c:	00013409 	.word	0x00013409
   1f630:	0001edd1 	.word	0x0001edd1
		break;
   1f634:	e004      	b.n	1f640 <_http_client_request+0x71c>
				break;
   1f636:	46c0      	nop			; (mov r8, r8)
   1f638:	e002      	b.n	1f640 <_http_client_request+0x71c>
				break;
   1f63a:	46c0      	nop			; (mov r8, r8)
   1f63c:	e000      	b.n	1f640 <_http_client_request+0x71c>
			break;
   1f63e:	46c0      	nop			; (mov r8, r8)
   1f640:	69bb      	ldr	r3, [r7, #24]
   1f642:	469d      	mov	sp, r3
   1f644:	e004      	b.n	1f650 <_http_client_request+0x72c>
		return;
   1f646:	46c0      	nop			; (mov r8, r8)
   1f648:	e000      	b.n	1f64c <_http_client_request+0x728>
		return;
   1f64a:	46c0      	nop			; (mov r8, r8)
   1f64c:	69bb      	ldr	r3, [r7, #24]
   1f64e:	469d      	mov	sp, r3
	}
}
   1f650:	46bd      	mov	sp, r7
   1f652:	b01e      	add	sp, #120	; 0x78
   1f654:	bc04      	pop	{r2}
   1f656:	4690      	mov	r8, r2
   1f658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f65a:	46c0      	nop			; (mov r8, r8)

0001f65c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   1f65c:	b590      	push	{r4, r7, lr}
   1f65e:	b083      	sub	sp, #12
   1f660:	af00      	add	r7, sp, #0
   1f662:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   1f664:	687b      	ldr	r3, [r7, #4]
   1f666:	2b00      	cmp	r3, #0
   1f668:	d021      	beq.n	1f6ae <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1f66a:	687b      	ldr	r3, [r7, #4]
   1f66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f66e:	687b      	ldr	r3, [r7, #4]
   1f670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1f672:	429a      	cmp	r2, r3
   1f674:	d307      	bcc.n	1f686 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   1f676:	238b      	movs	r3, #139	; 0x8b
   1f678:	425a      	negs	r2, r3
   1f67a:	687b      	ldr	r3, [r7, #4]
   1f67c:	0011      	movs	r1, r2
   1f67e:	0018      	movs	r0, r3
   1f680:	4b0d      	ldr	r3, [pc, #52]	; (1f6b8 <_http_client_recv_packet+0x5c>)
   1f682:	4798      	blx	r3
		return;
   1f684:	e014      	b.n	1f6b0 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   1f686:	687b      	ldr	r3, [r7, #4]
   1f688:	2000      	movs	r0, #0
   1f68a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   1f68c:	687b      	ldr	r3, [r7, #4]
   1f68e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1f690:	687b      	ldr	r3, [r7, #4]
   1f692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f694:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1f696:	687b      	ldr	r3, [r7, #4]
   1f698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   1f69a:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1f69c:	687b      	ldr	r3, [r7, #4]
   1f69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   1f6a0:	b29b      	uxth	r3, r3
   1f6a2:	1ad3      	subs	r3, r2, r3
   1f6a4:	b29a      	uxth	r2, r3
   1f6a6:	2300      	movs	r3, #0
   1f6a8:	4c04      	ldr	r4, [pc, #16]	; (1f6bc <_http_client_recv_packet+0x60>)
   1f6aa:	47a0      	blx	r4
   1f6ac:	e000      	b.n	1f6b0 <_http_client_recv_packet+0x54>
		return;
   1f6ae:	46c0      	nop			; (mov r8, r8)
}
   1f6b0:	46bd      	mov	sp, r7
   1f6b2:	b003      	add	sp, #12
   1f6b4:	bd90      	pop	{r4, r7, pc}
   1f6b6:	46c0      	nop			; (mov r8, r8)
   1f6b8:	0001edd1 	.word	0x0001edd1
   1f6bc:	0001356d 	.word	0x0001356d

0001f6c0 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   1f6c0:	b580      	push	{r7, lr}
   1f6c2:	b082      	sub	sp, #8
   1f6c4:	af00      	add	r7, sp, #0
   1f6c6:	6078      	str	r0, [r7, #4]
   1f6c8:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   1f6ca:	687b      	ldr	r3, [r7, #4]
   1f6cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f6ce:	683b      	ldr	r3, [r7, #0]
   1f6d0:	18d2      	adds	r2, r2, r3
   1f6d2:	687b      	ldr	r3, [r7, #4]
   1f6d4:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   1f6d6:	687b      	ldr	r3, [r7, #4]
   1f6d8:	2258      	movs	r2, #88	; 0x58
   1f6da:	5a9b      	ldrh	r3, [r3, r2]
   1f6dc:	2b00      	cmp	r3, #0
   1f6de:	d007      	beq.n	1f6f0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   1f6e0:	687b      	ldr	r3, [r7, #4]
   1f6e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1f6e4:	687b      	ldr	r3, [r7, #4]
   1f6e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f6e8:	0019      	movs	r1, r3
   1f6ea:	0010      	movs	r0, r2
   1f6ec:	4b06      	ldr	r3, [pc, #24]	; (1f708 <_http_client_recved_packet+0x48>)
   1f6ee:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   1f6f0:	46c0      	nop			; (mov r8, r8)
   1f6f2:	687b      	ldr	r3, [r7, #4]
   1f6f4:	0018      	movs	r0, r3
   1f6f6:	4b05      	ldr	r3, [pc, #20]	; (1f70c <_http_client_recved_packet+0x4c>)
   1f6f8:	4798      	blx	r3
   1f6fa:	1e03      	subs	r3, r0, #0
   1f6fc:	d1f9      	bne.n	1f6f2 <_http_client_recved_packet+0x32>
}
   1f6fe:	46c0      	nop			; (mov r8, r8)
   1f700:	46bd      	mov	sp, r7
   1f702:	b002      	add	sp, #8
   1f704:	bd80      	pop	{r7, pc}
   1f706:	46c0      	nop			; (mov r8, r8)
   1f708:	0002017d 	.word	0x0002017d
   1f70c:	0001f711 	.word	0x0001f711

0001f710 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   1f710:	b580      	push	{r7, lr}
   1f712:	b082      	sub	sp, #8
   1f714:	af00      	add	r7, sp, #0
   1f716:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   1f718:	687b      	ldr	r3, [r7, #4]
   1f71a:	22d8      	movs	r2, #216	; 0xd8
   1f71c:	589b      	ldr	r3, [r3, r2]
   1f71e:	2b00      	cmp	r3, #0
   1f720:	d002      	beq.n	1f728 <_http_client_handle_response+0x18>
   1f722:	2b01      	cmp	r3, #1
   1f724:	d006      	beq.n	1f734 <_http_client_handle_response+0x24>
   1f726:	e00b      	b.n	1f740 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   1f728:	687b      	ldr	r3, [r7, #4]
   1f72a:	0018      	movs	r0, r3
   1f72c:	4b07      	ldr	r3, [pc, #28]	; (1f74c <_http_client_handle_response+0x3c>)
   1f72e:	4798      	blx	r3
   1f730:	0003      	movs	r3, r0
   1f732:	e006      	b.n	1f742 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   1f734:	687b      	ldr	r3, [r7, #4]
   1f736:	0018      	movs	r0, r3
   1f738:	4b05      	ldr	r3, [pc, #20]	; (1f750 <_http_client_handle_response+0x40>)
   1f73a:	4798      	blx	r3
   1f73c:	0003      	movs	r3, r0
   1f73e:	e000      	b.n	1f742 <_http_client_handle_response+0x32>
	}
	return 0;
   1f740:	2300      	movs	r3, #0
}
   1f742:	0018      	movs	r0, r3
   1f744:	46bd      	mov	sp, r7
   1f746:	b002      	add	sp, #8
   1f748:	bd80      	pop	{r7, pc}
   1f74a:	46c0      	nop			; (mov r8, r8)
   1f74c:	0001f755 	.word	0x0001f755
   1f750:	0001fc0d 	.word	0x0001fc0d

0001f754 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   1f754:	b590      	push	{r4, r7, lr}
   1f756:	b08b      	sub	sp, #44	; 0x2c
   1f758:	af00      	add	r7, sp, #0
   1f75a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   1f75c:	687b      	ldr	r3, [r7, #4]
   1f75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1f760:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1f762:	4b9a      	ldr	r3, [pc, #616]	; (1f9cc <_http_client_handle_header+0x278>)
   1f764:	681a      	ldr	r2, [r3, #0]
   1f766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f768:	0011      	movs	r1, r2
   1f76a:	0018      	movs	r0, r3
   1f76c:	4b98      	ldr	r3, [pc, #608]	; (1f9d0 <_http_client_handle_header+0x27c>)
   1f76e:	4798      	blx	r3
   1f770:	0003      	movs	r3, r0
   1f772:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   1f774:	69bb      	ldr	r3, [r7, #24]
   1f776:	2b00      	cmp	r3, #0
   1f778:	d007      	beq.n	1f78a <_http_client_handle_header+0x36>
   1f77a:	687b      	ldr	r3, [r7, #4]
   1f77c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1f77e:	687b      	ldr	r3, [r7, #4]
   1f780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f782:	18d2      	adds	r2, r2, r3
   1f784:	69bb      	ldr	r3, [r7, #24]
   1f786:	429a      	cmp	r2, r3
   1f788:	d807      	bhi.n	1f79a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   1f78a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f78c:	687b      	ldr	r3, [r7, #4]
   1f78e:	0011      	movs	r1, r2
   1f790:	0018      	movs	r0, r3
   1f792:	4b90      	ldr	r3, [pc, #576]	; (1f9d4 <_http_client_handle_header+0x280>)
   1f794:	4798      	blx	r3
			return 0;
   1f796:	2300      	movs	r3, #0
   1f798:	e114      	b.n	1f9c4 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1f79a:	4b8c      	ldr	r3, [pc, #560]	; (1f9cc <_http_client_handle_header+0x278>)
   1f79c:	681c      	ldr	r4, [r3, #0]
   1f79e:	4b8b      	ldr	r3, [pc, #556]	; (1f9cc <_http_client_handle_header+0x278>)
   1f7a0:	681b      	ldr	r3, [r3, #0]
   1f7a2:	0018      	movs	r0, r3
   1f7a4:	4b8c      	ldr	r3, [pc, #560]	; (1f9d8 <_http_client_handle_header+0x284>)
   1f7a6:	4798      	blx	r3
   1f7a8:	0002      	movs	r2, r0
   1f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f7ac:	0021      	movs	r1, r4
   1f7ae:	0018      	movs	r0, r3
   1f7b0:	4b8a      	ldr	r3, [pc, #552]	; (1f9dc <_http_client_handle_header+0x288>)
   1f7b2:	4798      	blx	r3
   1f7b4:	1e03      	subs	r3, r0, #0
   1f7b6:	d15d      	bne.n	1f874 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1f7b8:	4b84      	ldr	r3, [pc, #528]	; (1f9cc <_http_client_handle_header+0x278>)
   1f7ba:	681b      	ldr	r3, [r3, #0]
   1f7bc:	0018      	movs	r0, r3
   1f7be:	4b86      	ldr	r3, [pc, #536]	; (1f9d8 <_http_client_handle_header+0x284>)
   1f7c0:	4798      	blx	r3
   1f7c2:	0002      	movs	r2, r0
   1f7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f7c6:	189a      	adds	r2, r3, r2
   1f7c8:	687b      	ldr	r3, [r7, #4]
   1f7ca:	0011      	movs	r1, r2
   1f7cc:	0018      	movs	r0, r3
   1f7ce:	4b81      	ldr	r3, [pc, #516]	; (1f9d4 <_http_client_handle_header+0x280>)
   1f7d0:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   1f7d2:	687b      	ldr	r3, [r7, #4]
   1f7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f7d6:	2b00      	cmp	r3, #0
   1f7d8:	d046      	beq.n	1f868 <_http_client_handle_header+0x114>
   1f7da:	687b      	ldr	r3, [r7, #4]
   1f7dc:	22e4      	movs	r2, #228	; 0xe4
   1f7de:	5a9b      	ldrh	r3, [r3, r2]
   1f7e0:	2b00      	cmp	r3, #0
   1f7e2:	d041      	beq.n	1f868 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   1f7e4:	687b      	ldr	r3, [r7, #4]
   1f7e6:	22dc      	movs	r2, #220	; 0xdc
   1f7e8:	589b      	ldr	r3, [r3, r2]
   1f7ea:	2b00      	cmp	r3, #0
   1f7ec:	da19      	bge.n	1f822 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   1f7ee:	687b      	ldr	r3, [r7, #4]
   1f7f0:	22e4      	movs	r2, #228	; 0xe4
   1f7f2:	5a9a      	ldrh	r2, [r3, r2]
   1f7f4:	230c      	movs	r3, #12
   1f7f6:	18fb      	adds	r3, r7, r3
   1f7f8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   1f7fa:	230c      	movs	r3, #12
   1f7fc:	18fb      	adds	r3, r7, r3
   1f7fe:	2201      	movs	r2, #1
   1f800:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   1f802:	687b      	ldr	r3, [r7, #4]
   1f804:	22e0      	movs	r2, #224	; 0xe0
   1f806:	2100      	movs	r1, #0
   1f808:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   1f80a:	230c      	movs	r3, #12
   1f80c:	18fb      	adds	r3, r7, r3
   1f80e:	2200      	movs	r2, #0
   1f810:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1f812:	687b      	ldr	r3, [r7, #4]
   1f814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f816:	220c      	movs	r2, #12
   1f818:	18ba      	adds	r2, r7, r2
   1f81a:	6878      	ldr	r0, [r7, #4]
   1f81c:	2102      	movs	r1, #2
   1f81e:	4798      	blx	r3
   1f820:	e022      	b.n	1f868 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   1f822:	687b      	ldr	r3, [r7, #4]
   1f824:	22dc      	movs	r2, #220	; 0xdc
   1f826:	589a      	ldr	r2, [r3, r2]
   1f828:	687b      	ldr	r3, [r7, #4]
   1f82a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1f82c:	429a      	cmp	r2, r3
   1f82e:	dd1b      	ble.n	1f868 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   1f830:	687b      	ldr	r3, [r7, #4]
   1f832:	22e4      	movs	r2, #228	; 0xe4
   1f834:	5a9a      	ldrh	r2, [r3, r2]
   1f836:	230c      	movs	r3, #12
   1f838:	18fb      	adds	r3, r7, r3
   1f83a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   1f83c:	687b      	ldr	r3, [r7, #4]
   1f83e:	22dc      	movs	r2, #220	; 0xdc
   1f840:	589b      	ldr	r3, [r3, r2]
   1f842:	001a      	movs	r2, r3
   1f844:	230c      	movs	r3, #12
   1f846:	18fb      	adds	r3, r7, r3
   1f848:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   1f84a:	230c      	movs	r3, #12
   1f84c:	18fb      	adds	r3, r7, r3
   1f84e:	2200      	movs	r2, #0
   1f850:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   1f852:	687b      	ldr	r3, [r7, #4]
   1f854:	22e0      	movs	r2, #224	; 0xe0
   1f856:	2100      	movs	r1, #0
   1f858:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1f85a:	687b      	ldr	r3, [r7, #4]
   1f85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f85e:	220c      	movs	r2, #12
   1f860:	18ba      	adds	r2, r7, r2
   1f862:	6878      	ldr	r0, [r7, #4]
   1f864:	2102      	movs	r1, #2
   1f866:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   1f868:	687b      	ldr	r3, [r7, #4]
   1f86a:	22d8      	movs	r2, #216	; 0xd8
   1f86c:	2101      	movs	r1, #1
   1f86e:	5099      	str	r1, [r3, r2]
			return 1;
   1f870:	2301      	movs	r3, #1
   1f872:	e0a7      	b.n	1f9c4 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   1f874:	495a      	ldr	r1, [pc, #360]	; (1f9e0 <_http_client_handle_header+0x28c>)
   1f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f878:	2210      	movs	r2, #16
   1f87a:	0018      	movs	r0, r3
   1f87c:	4b57      	ldr	r3, [pc, #348]	; (1f9dc <_http_client_handle_header+0x288>)
   1f87e:	4798      	blx	r3
   1f880:	1e03      	subs	r3, r0, #0
   1f882:	d109      	bne.n	1f898 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   1f884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f886:	3310      	adds	r3, #16
   1f888:	0018      	movs	r0, r3
   1f88a:	4b56      	ldr	r3, [pc, #344]	; (1f9e4 <_http_client_handle_header+0x290>)
   1f88c:	4798      	blx	r3
   1f88e:	0001      	movs	r1, r0
   1f890:	687b      	ldr	r3, [r7, #4]
   1f892:	22dc      	movs	r2, #220	; 0xdc
   1f894:	5099      	str	r1, [r3, r2]
   1f896:	e08b      	b.n	1f9b0 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   1f898:	4953      	ldr	r1, [pc, #332]	; (1f9e8 <_http_client_handle_header+0x294>)
   1f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f89c:	2213      	movs	r2, #19
   1f89e:	0018      	movs	r0, r3
   1f8a0:	4b4e      	ldr	r3, [pc, #312]	; (1f9dc <_http_client_handle_header+0x288>)
   1f8a2:	4798      	blx	r3
   1f8a4:	1e03      	subs	r3, r0, #0
   1f8a6:	d127      	bne.n	1f8f8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   1f8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f8aa:	3313      	adds	r3, #19
   1f8ac:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1f8ae:	e01e      	b.n	1f8ee <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   1f8b0:	6a3b      	ldr	r3, [r7, #32]
   1f8b2:	781b      	ldrb	r3, [r3, #0]
   1f8b4:	2b20      	cmp	r3, #32
   1f8b6:	d103      	bne.n	1f8c0 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1f8b8:	6a3b      	ldr	r3, [r7, #32]
   1f8ba:	3301      	adds	r3, #1
   1f8bc:	623b      	str	r3, [r7, #32]
   1f8be:	e016      	b.n	1f8ee <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   1f8c0:	6a3b      	ldr	r3, [r7, #32]
   1f8c2:	781b      	ldrb	r3, [r3, #0]
   1f8c4:	2b43      	cmp	r3, #67	; 0x43
   1f8c6:	d003      	beq.n	1f8d0 <_http_client_handle_header+0x17c>
   1f8c8:	6a3b      	ldr	r3, [r7, #32]
   1f8ca:	781b      	ldrb	r3, [r3, #0]
   1f8cc:	2b63      	cmp	r3, #99	; 0x63
   1f8ce:	d105      	bne.n	1f8dc <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   1f8d0:	687b      	ldr	r3, [r7, #4]
   1f8d2:	21cc      	movs	r1, #204	; 0xcc
   1f8d4:	2201      	movs	r2, #1
   1f8d6:	4252      	negs	r2, r2
   1f8d8:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   1f8da:	e069      	b.n	1f9b0 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   1f8dc:	2386      	movs	r3, #134	; 0x86
   1f8de:	425a      	negs	r2, r3
   1f8e0:	687b      	ldr	r3, [r7, #4]
   1f8e2:	0011      	movs	r1, r2
   1f8e4:	0018      	movs	r0, r3
   1f8e6:	4b41      	ldr	r3, [pc, #260]	; (1f9ec <_http_client_handle_header+0x298>)
   1f8e8:	4798      	blx	r3
					return 0;
   1f8ea:	2300      	movs	r3, #0
   1f8ec:	e06a      	b.n	1f9c4 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1f8ee:	69ba      	ldr	r2, [r7, #24]
   1f8f0:	6a3b      	ldr	r3, [r7, #32]
   1f8f2:	429a      	cmp	r2, r3
   1f8f4:	d8dc      	bhi.n	1f8b0 <_http_client_handle_header+0x15c>
   1f8f6:	e05b      	b.n	1f9b0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   1f8f8:	493d      	ldr	r1, [pc, #244]	; (1f9f0 <_http_client_handle_header+0x29c>)
   1f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f8fc:	220c      	movs	r2, #12
   1f8fe:	0018      	movs	r0, r3
   1f900:	4b36      	ldr	r3, [pc, #216]	; (1f9dc <_http_client_handle_header+0x288>)
   1f902:	4798      	blx	r3
   1f904:	1e03      	subs	r3, r0, #0
   1f906:	d126      	bne.n	1f956 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   1f908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f90a:	330c      	adds	r3, #12
   1f90c:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1f90e:	e01d      	b.n	1f94c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   1f910:	69fb      	ldr	r3, [r7, #28]
   1f912:	781b      	ldrb	r3, [r3, #0]
   1f914:	2b20      	cmp	r3, #32
   1f916:	d103      	bne.n	1f920 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1f918:	69fb      	ldr	r3, [r7, #28]
   1f91a:	3301      	adds	r3, #1
   1f91c:	61fb      	str	r3, [r7, #28]
   1f91e:	e015      	b.n	1f94c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   1f920:	69fb      	ldr	r3, [r7, #28]
   1f922:	781b      	ldrb	r3, [r3, #0]
   1f924:	2b4b      	cmp	r3, #75	; 0x4b
   1f926:	d003      	beq.n	1f930 <_http_client_handle_header+0x1dc>
   1f928:	69fb      	ldr	r3, [r7, #28]
   1f92a:	781b      	ldrb	r3, [r3, #0]
   1f92c:	2b6b      	cmp	r3, #107	; 0x6b
   1f92e:	d106      	bne.n	1f93e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   1f930:	687b      	ldr	r3, [r7, #4]
   1f932:	2241      	movs	r2, #65	; 0x41
   1f934:	5c99      	ldrb	r1, [r3, r2]
   1f936:	2002      	movs	r0, #2
   1f938:	4301      	orrs	r1, r0
   1f93a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   1f93c:	e038      	b.n	1f9b0 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   1f93e:	687b      	ldr	r3, [r7, #4]
   1f940:	2241      	movs	r2, #65	; 0x41
   1f942:	5c99      	ldrb	r1, [r3, r2]
   1f944:	2002      	movs	r0, #2
   1f946:	4381      	bics	r1, r0
   1f948:	5499      	strb	r1, [r3, r2]
				break;
   1f94a:	e031      	b.n	1f9b0 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1f94c:	69ba      	ldr	r2, [r7, #24]
   1f94e:	69fb      	ldr	r3, [r7, #28]
   1f950:	429a      	cmp	r2, r3
   1f952:	d8dd      	bhi.n	1f910 <_http_client_handle_header+0x1bc>
   1f954:	e02c      	b.n	1f9b0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   1f956:	4927      	ldr	r1, [pc, #156]	; (1f9f4 <_http_client_handle_header+0x2a0>)
   1f958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f95a:	2205      	movs	r2, #5
   1f95c:	0018      	movs	r0, r3
   1f95e:	4b1f      	ldr	r3, [pc, #124]	; (1f9dc <_http_client_handle_header+0x288>)
   1f960:	4798      	blx	r3
   1f962:	1e03      	subs	r3, r0, #0
   1f964:	d124      	bne.n	1f9b0 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   1f966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f968:	3309      	adds	r3, #9
   1f96a:	0018      	movs	r0, r3
   1f96c:	4b1d      	ldr	r3, [pc, #116]	; (1f9e4 <_http_client_handle_header+0x290>)
   1f96e:	4798      	blx	r3
   1f970:	0003      	movs	r3, r0
   1f972:	b299      	uxth	r1, r3
   1f974:	687b      	ldr	r3, [r7, #4]
   1f976:	22e4      	movs	r2, #228	; 0xe4
   1f978:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   1f97a:	687b      	ldr	r3, [r7, #4]
   1f97c:	22dc      	movs	r2, #220	; 0xdc
   1f97e:	2100      	movs	r1, #0
   1f980:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   1f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f984:	3305      	adds	r3, #5
   1f986:	781b      	ldrb	r3, [r3, #0]
   1f988:	2b31      	cmp	r3, #49	; 0x31
   1f98a:	d804      	bhi.n	1f996 <_http_client_handle_header+0x242>
   1f98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f98e:	3307      	adds	r3, #7
   1f990:	781b      	ldrb	r3, [r3, #0]
   1f992:	2b30      	cmp	r3, #48	; 0x30
   1f994:	d906      	bls.n	1f9a4 <_http_client_handle_header+0x250>
				module->permanent = 1;
   1f996:	687b      	ldr	r3, [r7, #4]
   1f998:	2241      	movs	r2, #65	; 0x41
   1f99a:	5c99      	ldrb	r1, [r3, r2]
   1f99c:	2002      	movs	r0, #2
   1f99e:	4301      	orrs	r1, r0
   1f9a0:	5499      	strb	r1, [r3, r2]
   1f9a2:	e005      	b.n	1f9b0 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   1f9a4:	687b      	ldr	r3, [r7, #4]
   1f9a6:	2241      	movs	r2, #65	; 0x41
   1f9a8:	5c99      	ldrb	r1, [r3, r2]
   1f9aa:	2002      	movs	r0, #2
   1f9ac:	4381      	bics	r1, r0
   1f9ae:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   1f9b0:	4b06      	ldr	r3, [pc, #24]	; (1f9cc <_http_client_handle_header+0x278>)
   1f9b2:	681b      	ldr	r3, [r3, #0]
   1f9b4:	0018      	movs	r0, r3
   1f9b6:	4b08      	ldr	r3, [pc, #32]	; (1f9d8 <_http_client_handle_header+0x284>)
   1f9b8:	4798      	blx	r3
   1f9ba:	0002      	movs	r2, r0
   1f9bc:	69bb      	ldr	r3, [r7, #24]
   1f9be:	189b      	adds	r3, r3, r2
   1f9c0:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1f9c2:	e6ce      	b.n	1f762 <_http_client_handle_header+0xe>
	}
}
   1f9c4:	0018      	movs	r0, r3
   1f9c6:	46bd      	mov	sp, r7
   1f9c8:	b00b      	add	sp, #44	; 0x2c
   1f9ca:	bd90      	pop	{r4, r7, pc}
   1f9cc:	2000012c 	.word	0x2000012c
   1f9d0:	000231d5 	.word	0x000231d5
   1f9d4:	0001fdb9 	.word	0x0001fdb9
   1f9d8:	00023157 	.word	0x00023157
   1f9dc:	00023165 	.word	0x00023165
   1f9e0:	00028ae0 	.word	0x00028ae0
   1f9e4:	00022d09 	.word	0x00022d09
   1f9e8:	00028b04 	.word	0x00028b04
   1f9ec:	0001edd1 	.word	0x0001edd1
   1f9f0:	00028b18 	.word	0x00028b18
   1f9f4:	00028b28 	.word	0x00028b28

0001f9f8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   1f9f8:	b580      	push	{r7, lr}
   1f9fa:	b088      	sub	sp, #32
   1f9fc:	af00      	add	r7, sp, #0
   1f9fe:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   1fa00:	687b      	ldr	r3, [r7, #4]
   1fa02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fa04:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   1fa06:	2300      	movs	r3, #0
   1fa08:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   1fa0a:	687b      	ldr	r3, [r7, #4]
   1fa0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1fa0e:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   1fa10:	687b      	ldr	r3, [r7, #4]
   1fa12:	22e0      	movs	r2, #224	; 0xe0
   1fa14:	589b      	ldr	r3, [r3, r2]
   1fa16:	2b00      	cmp	r3, #0
   1fa18:	db71      	blt.n	1fafe <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   1fa1a:	687b      	ldr	r3, [r7, #4]
   1fa1c:	22e0      	movs	r2, #224	; 0xe0
   1fa1e:	589b      	ldr	r3, [r3, r2]
   1fa20:	2b00      	cmp	r3, #0
   1fa22:	d134      	bne.n	1fa8e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1fa24:	687b      	ldr	r3, [r7, #4]
   1fa26:	22d8      	movs	r2, #216	; 0xd8
   1fa28:	2100      	movs	r1, #0
   1fa2a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1fa2c:	687b      	ldr	r3, [r7, #4]
   1fa2e:	22e4      	movs	r2, #228	; 0xe4
   1fa30:	2100      	movs	r1, #0
   1fa32:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1fa34:	2308      	movs	r3, #8
   1fa36:	18fb      	adds	r3, r7, r3
   1fa38:	2201      	movs	r2, #1
   1fa3a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   1fa3c:	2308      	movs	r3, #8
   1fa3e:	18fb      	adds	r3, r7, r3
   1fa40:	2200      	movs	r2, #0
   1fa42:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   1fa44:	2308      	movs	r3, #8
   1fa46:	18fb      	adds	r3, r7, r3
   1fa48:	2200      	movs	r2, #0
   1fa4a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   1fa4c:	687b      	ldr	r3, [r7, #4]
   1fa4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1fa50:	2b00      	cmp	r3, #0
   1fa52:	d006      	beq.n	1fa62 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1fa54:	687b      	ldr	r3, [r7, #4]
   1fa56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1fa58:	2208      	movs	r2, #8
   1fa5a:	18ba      	adds	r2, r7, r2
   1fa5c:	6878      	ldr	r0, [r7, #4]
   1fa5e:	2103      	movs	r1, #3
   1fa60:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   1fa62:	687b      	ldr	r3, [r7, #4]
   1fa64:	2241      	movs	r2, #65	; 0x41
   1fa66:	5c9b      	ldrb	r3, [r3, r2]
   1fa68:	2202      	movs	r2, #2
   1fa6a:	4013      	ands	r3, r2
   1fa6c:	b2db      	uxtb	r3, r3
   1fa6e:	2b00      	cmp	r3, #0
   1fa70:	d105      	bne.n	1fa7e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   1fa72:	687b      	ldr	r3, [r7, #4]
   1fa74:	2100      	movs	r1, #0
   1fa76:	0018      	movs	r0, r3
   1fa78:	4b62      	ldr	r3, [pc, #392]	; (1fc04 <_http_client_read_chuked_entity+0x20c>)
   1fa7a:	4798      	blx	r3
					return;
   1fa7c:	e0bf      	b.n	1fbfe <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   1fa7e:	697b      	ldr	r3, [r7, #20]
   1fa80:	1c9a      	adds	r2, r3, #2
   1fa82:	687b      	ldr	r3, [r7, #4]
   1fa84:	0011      	movs	r1, r2
   1fa86:	0018      	movs	r0, r3
   1fa88:	4b5f      	ldr	r3, [pc, #380]	; (1fc08 <_http_client_read_chuked_entity+0x210>)
   1fa8a:	4798      	blx	r3
   1fa8c:	e0b2      	b.n	1fbf4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   1fa8e:	687b      	ldr	r3, [r7, #4]
   1fa90:	22e0      	movs	r2, #224	; 0xe0
   1fa92:	589a      	ldr	r2, [r3, r2]
   1fa94:	69fb      	ldr	r3, [r7, #28]
   1fa96:	429a      	cmp	r2, r3
   1fa98:	dd00      	ble.n	1fa9c <_http_client_read_chuked_entity+0xa4>
   1fa9a:	e0ab      	b.n	1fbf4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   1fa9c:	687b      	ldr	r3, [r7, #4]
   1fa9e:	22e0      	movs	r2, #224	; 0xe0
   1faa0:	589b      	ldr	r3, [r3, r2]
   1faa2:	001a      	movs	r2, r3
   1faa4:	2308      	movs	r3, #8
   1faa6:	18fb      	adds	r3, r7, r3
   1faa8:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   1faaa:	2308      	movs	r3, #8
   1faac:	18fb      	adds	r3, r7, r3
   1faae:	697a      	ldr	r2, [r7, #20]
   1fab0:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   1fab2:	2308      	movs	r3, #8
   1fab4:	18fb      	adds	r3, r7, r3
   1fab6:	2200      	movs	r2, #0
   1fab8:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   1faba:	687b      	ldr	r3, [r7, #4]
   1fabc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1fabe:	2b00      	cmp	r3, #0
   1fac0:	d006      	beq.n	1fad0 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1fac2:	687b      	ldr	r3, [r7, #4]
   1fac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1fac6:	2208      	movs	r2, #8
   1fac8:	18ba      	adds	r2, r7, r2
   1faca:	6878      	ldr	r0, [r7, #4]
   1facc:	2103      	movs	r1, #3
   1face:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   1fad0:	687b      	ldr	r3, [r7, #4]
   1fad2:	22e0      	movs	r2, #224	; 0xe0
   1fad4:	589b      	ldr	r3, [r3, r2]
   1fad6:	3302      	adds	r3, #2
   1fad8:	697a      	ldr	r2, [r7, #20]
   1fada:	18d2      	adds	r2, r2, r3
   1fadc:	687b      	ldr	r3, [r7, #4]
   1fade:	0011      	movs	r1, r2
   1fae0:	0018      	movs	r0, r3
   1fae2:	4b49      	ldr	r3, [pc, #292]	; (1fc08 <_http_client_read_chuked_entity+0x210>)
   1fae4:	4798      	blx	r3
				length = (int)module->recved_size;
   1fae6:	687b      	ldr	r3, [r7, #4]
   1fae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1faea:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   1faec:	687b      	ldr	r3, [r7, #4]
   1faee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1faf0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   1faf2:	687b      	ldr	r3, [r7, #4]
   1faf4:	21e0      	movs	r1, #224	; 0xe0
   1faf6:	2201      	movs	r2, #1
   1faf8:	4252      	negs	r2, r2
   1fafa:	505a      	str	r2, [r3, r1]
   1fafc:	e07a      	b.n	1fbf4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   1fafe:	687b      	ldr	r3, [r7, #4]
   1fb00:	22e0      	movs	r2, #224	; 0xe0
   1fb02:	2100      	movs	r1, #0
   1fb04:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   1fb06:	e05a      	b.n	1fbbe <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   1fb08:	697b      	ldr	r3, [r7, #20]
   1fb0a:	781b      	ldrb	r3, [r3, #0]
   1fb0c:	2b0a      	cmp	r3, #10
   1fb0e:	d106      	bne.n	1fb1e <_http_client_read_chuked_entity+0x126>
					buffer++;
   1fb10:	697b      	ldr	r3, [r7, #20]
   1fb12:	3301      	adds	r3, #1
   1fb14:	617b      	str	r3, [r7, #20]
					length--;
   1fb16:	69fb      	ldr	r3, [r7, #28]
   1fb18:	3b01      	subs	r3, #1
   1fb1a:	61fb      	str	r3, [r7, #28]
					break;
   1fb1c:	e052      	b.n	1fbc4 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   1fb1e:	69bb      	ldr	r3, [r7, #24]
   1fb20:	2b00      	cmp	r3, #0
   1fb22:	d145      	bne.n	1fbb0 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   1fb24:	697b      	ldr	r3, [r7, #20]
   1fb26:	781b      	ldrb	r3, [r3, #0]
   1fb28:	2b2f      	cmp	r3, #47	; 0x2f
   1fb2a:	d910      	bls.n	1fb4e <_http_client_read_chuked_entity+0x156>
   1fb2c:	697b      	ldr	r3, [r7, #20]
   1fb2e:	781b      	ldrb	r3, [r3, #0]
   1fb30:	2b39      	cmp	r3, #57	; 0x39
   1fb32:	d80c      	bhi.n	1fb4e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   1fb34:	687b      	ldr	r3, [r7, #4]
   1fb36:	22e0      	movs	r2, #224	; 0xe0
   1fb38:	589b      	ldr	r3, [r3, r2]
   1fb3a:	011b      	lsls	r3, r3, #4
   1fb3c:	697a      	ldr	r2, [r7, #20]
   1fb3e:	7812      	ldrb	r2, [r2, #0]
   1fb40:	189b      	adds	r3, r3, r2
   1fb42:	3b30      	subs	r3, #48	; 0x30
   1fb44:	001a      	movs	r2, r3
   1fb46:	687b      	ldr	r3, [r7, #4]
   1fb48:	21e0      	movs	r1, #224	; 0xe0
   1fb4a:	505a      	str	r2, [r3, r1]
   1fb4c:	e031      	b.n	1fbb2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   1fb4e:	697b      	ldr	r3, [r7, #20]
   1fb50:	781b      	ldrb	r3, [r3, #0]
   1fb52:	2b60      	cmp	r3, #96	; 0x60
   1fb54:	d910      	bls.n	1fb78 <_http_client_read_chuked_entity+0x180>
   1fb56:	697b      	ldr	r3, [r7, #20]
   1fb58:	781b      	ldrb	r3, [r3, #0]
   1fb5a:	2b66      	cmp	r3, #102	; 0x66
   1fb5c:	d80c      	bhi.n	1fb78 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   1fb5e:	687b      	ldr	r3, [r7, #4]
   1fb60:	22e0      	movs	r2, #224	; 0xe0
   1fb62:	589b      	ldr	r3, [r3, r2]
   1fb64:	011b      	lsls	r3, r3, #4
   1fb66:	697a      	ldr	r2, [r7, #20]
   1fb68:	7812      	ldrb	r2, [r2, #0]
   1fb6a:	189b      	adds	r3, r3, r2
   1fb6c:	3b61      	subs	r3, #97	; 0x61
   1fb6e:	001a      	movs	r2, r3
   1fb70:	687b      	ldr	r3, [r7, #4]
   1fb72:	21e0      	movs	r1, #224	; 0xe0
   1fb74:	505a      	str	r2, [r3, r1]
   1fb76:	e01c      	b.n	1fbb2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   1fb78:	697b      	ldr	r3, [r7, #20]
   1fb7a:	781b      	ldrb	r3, [r3, #0]
   1fb7c:	2b40      	cmp	r3, #64	; 0x40
   1fb7e:	d910      	bls.n	1fba2 <_http_client_read_chuked_entity+0x1aa>
   1fb80:	697b      	ldr	r3, [r7, #20]
   1fb82:	781b      	ldrb	r3, [r3, #0]
   1fb84:	2b46      	cmp	r3, #70	; 0x46
   1fb86:	d80c      	bhi.n	1fba2 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1fb88:	687b      	ldr	r3, [r7, #4]
   1fb8a:	22e0      	movs	r2, #224	; 0xe0
   1fb8c:	589b      	ldr	r3, [r3, r2]
   1fb8e:	011b      	lsls	r3, r3, #4
   1fb90:	697a      	ldr	r2, [r7, #20]
   1fb92:	7812      	ldrb	r2, [r2, #0]
   1fb94:	189b      	adds	r3, r3, r2
   1fb96:	3b41      	subs	r3, #65	; 0x41
   1fb98:	001a      	movs	r2, r3
   1fb9a:	687b      	ldr	r3, [r7, #4]
   1fb9c:	21e0      	movs	r1, #224	; 0xe0
   1fb9e:	505a      	str	r2, [r3, r1]
   1fba0:	e007      	b.n	1fbb2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   1fba2:	697b      	ldr	r3, [r7, #20]
   1fba4:	781b      	ldrb	r3, [r3, #0]
   1fba6:	2b3b      	cmp	r3, #59	; 0x3b
   1fba8:	d103      	bne.n	1fbb2 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   1fbaa:	2301      	movs	r3, #1
   1fbac:	61bb      	str	r3, [r7, #24]
   1fbae:	e000      	b.n	1fbb2 <_http_client_read_chuked_entity+0x1ba>
					continue;
   1fbb0:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   1fbb2:	697b      	ldr	r3, [r7, #20]
   1fbb4:	3301      	adds	r3, #1
   1fbb6:	617b      	str	r3, [r7, #20]
   1fbb8:	69fb      	ldr	r3, [r7, #28]
   1fbba:	3b01      	subs	r3, #1
   1fbbc:	61fb      	str	r3, [r7, #28]
   1fbbe:	69fb      	ldr	r3, [r7, #28]
   1fbc0:	2b00      	cmp	r3, #0
   1fbc2:	dca1      	bgt.n	1fb08 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   1fbc4:	687b      	ldr	r3, [r7, #4]
   1fbc6:	22e0      	movs	r2, #224	; 0xe0
   1fbc8:	589a      	ldr	r2, [r3, r2]
   1fbca:	687b      	ldr	r3, [r7, #4]
   1fbcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1fbce:	429a      	cmp	r2, r3
   1fbd0:	dd07      	ble.n	1fbe2 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   1fbd2:	238b      	movs	r3, #139	; 0x8b
   1fbd4:	425a      	negs	r2, r3
   1fbd6:	687b      	ldr	r3, [r7, #4]
   1fbd8:	0011      	movs	r1, r2
   1fbda:	0018      	movs	r0, r3
   1fbdc:	4b09      	ldr	r3, [pc, #36]	; (1fc04 <_http_client_read_chuked_entity+0x20c>)
   1fbde:	4798      	blx	r3
				return;
   1fbe0:	e00d      	b.n	1fbfe <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   1fbe2:	69fb      	ldr	r3, [r7, #28]
   1fbe4:	2b00      	cmp	r3, #0
   1fbe6:	d105      	bne.n	1fbf4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   1fbe8:	687b      	ldr	r3, [r7, #4]
   1fbea:	21e0      	movs	r1, #224	; 0xe0
   1fbec:	2201      	movs	r2, #1
   1fbee:	4252      	negs	r2, r2
   1fbf0:	505a      	str	r2, [r3, r1]
				return;
   1fbf2:	e004      	b.n	1fbfe <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   1fbf4:	687b      	ldr	r3, [r7, #4]
   1fbf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fbf8:	2b00      	cmp	r3, #0
   1fbfa:	d000      	beq.n	1fbfe <_http_client_read_chuked_entity+0x206>
   1fbfc:	e708      	b.n	1fa10 <_http_client_read_chuked_entity+0x18>
}
   1fbfe:	46bd      	mov	sp, r7
   1fc00:	b008      	add	sp, #32
   1fc02:	bd80      	pop	{r7, pc}
   1fc04:	0001edd1 	.word	0x0001edd1
   1fc08:	0001fdb9 	.word	0x0001fdb9

0001fc0c <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   1fc0c:	b580      	push	{r7, lr}
   1fc0e:	b086      	sub	sp, #24
   1fc10:	af00      	add	r7, sp, #0
   1fc12:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   1fc14:	687b      	ldr	r3, [r7, #4]
   1fc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1fc18:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   1fc1a:	687b      	ldr	r3, [r7, #4]
   1fc1c:	22dc      	movs	r2, #220	; 0xdc
   1fc1e:	589b      	ldr	r3, [r3, r2]
   1fc20:	2b00      	cmp	r3, #0
   1fc22:	db58      	blt.n	1fcd6 <_http_client_handle_entity+0xca>
   1fc24:	687b      	ldr	r3, [r7, #4]
   1fc26:	22dc      	movs	r2, #220	; 0xdc
   1fc28:	589a      	ldr	r2, [r3, r2]
   1fc2a:	687b      	ldr	r3, [r7, #4]
   1fc2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1fc2e:	429a      	cmp	r2, r3
   1fc30:	dc51      	bgt.n	1fcd6 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   1fc32:	687b      	ldr	r3, [r7, #4]
   1fc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fc36:	0019      	movs	r1, r3
   1fc38:	687b      	ldr	r3, [r7, #4]
   1fc3a:	22dc      	movs	r2, #220	; 0xdc
   1fc3c:	589b      	ldr	r3, [r3, r2]
   1fc3e:	4299      	cmp	r1, r3
   1fc40:	da00      	bge.n	1fc44 <_http_client_handle_entity+0x38>
   1fc42:	e0a9      	b.n	1fd98 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   1fc44:	687b      	ldr	r3, [r7, #4]
   1fc46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1fc48:	2b00      	cmp	r3, #0
   1fc4a:	d020      	beq.n	1fc8e <_http_client_handle_entity+0x82>
   1fc4c:	687b      	ldr	r3, [r7, #4]
   1fc4e:	22e4      	movs	r2, #228	; 0xe4
   1fc50:	5a9b      	ldrh	r3, [r3, r2]
   1fc52:	2b00      	cmp	r3, #0
   1fc54:	d01b      	beq.n	1fc8e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   1fc56:	687b      	ldr	r3, [r7, #4]
   1fc58:	22e4      	movs	r2, #228	; 0xe4
   1fc5a:	5a9a      	ldrh	r2, [r3, r2]
   1fc5c:	2308      	movs	r3, #8
   1fc5e:	18fb      	adds	r3, r7, r3
   1fc60:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   1fc62:	2308      	movs	r3, #8
   1fc64:	18fb      	adds	r3, r7, r3
   1fc66:	2200      	movs	r2, #0
   1fc68:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   1fc6a:	687b      	ldr	r3, [r7, #4]
   1fc6c:	22dc      	movs	r2, #220	; 0xdc
   1fc6e:	589b      	ldr	r3, [r3, r2]
   1fc70:	001a      	movs	r2, r3
   1fc72:	2308      	movs	r3, #8
   1fc74:	18fb      	adds	r3, r7, r3
   1fc76:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   1fc78:	2308      	movs	r3, #8
   1fc7a:	18fb      	adds	r3, r7, r3
   1fc7c:	697a      	ldr	r2, [r7, #20]
   1fc7e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1fc80:	687b      	ldr	r3, [r7, #4]
   1fc82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1fc84:	2208      	movs	r2, #8
   1fc86:	18ba      	adds	r2, r7, r2
   1fc88:	6878      	ldr	r0, [r7, #4]
   1fc8a:	2102      	movs	r1, #2
   1fc8c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   1fc8e:	687b      	ldr	r3, [r7, #4]
   1fc90:	22d8      	movs	r2, #216	; 0xd8
   1fc92:	2100      	movs	r1, #0
   1fc94:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   1fc96:	687b      	ldr	r3, [r7, #4]
   1fc98:	22e4      	movs	r2, #228	; 0xe4
   1fc9a:	2100      	movs	r1, #0
   1fc9c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   1fc9e:	687b      	ldr	r3, [r7, #4]
   1fca0:	2241      	movs	r2, #65	; 0x41
   1fca2:	5c9b      	ldrb	r3, [r3, r2]
   1fca4:	2202      	movs	r2, #2
   1fca6:	4013      	ands	r3, r2
   1fca8:	b2db      	uxtb	r3, r3
   1fcaa:	2b00      	cmp	r3, #0
   1fcac:	d105      	bne.n	1fcba <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   1fcae:	687b      	ldr	r3, [r7, #4]
   1fcb0:	2100      	movs	r1, #0
   1fcb2:	0018      	movs	r0, r3
   1fcb4:	4b3b      	ldr	r3, [pc, #236]	; (1fda4 <_http_client_handle_entity+0x198>)
   1fcb6:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   1fcb8:	e06e      	b.n	1fd98 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   1fcba:	687b      	ldr	r3, [r7, #4]
   1fcbc:	22dc      	movs	r2, #220	; 0xdc
   1fcbe:	589b      	ldr	r3, [r3, r2]
   1fcc0:	001a      	movs	r2, r3
   1fcc2:	697b      	ldr	r3, [r7, #20]
   1fcc4:	189a      	adds	r2, r3, r2
   1fcc6:	687b      	ldr	r3, [r7, #4]
   1fcc8:	0011      	movs	r1, r2
   1fcca:	0018      	movs	r0, r3
   1fccc:	4b36      	ldr	r3, [pc, #216]	; (1fda8 <_http_client_handle_entity+0x19c>)
   1fcce:	4798      	blx	r3
				return module->recved_size;
   1fcd0:	687b      	ldr	r3, [r7, #4]
   1fcd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fcd4:	e061      	b.n	1fd9a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   1fcd6:	687b      	ldr	r3, [r7, #4]
   1fcd8:	22dc      	movs	r2, #220	; 0xdc
   1fcda:	589b      	ldr	r3, [r3, r2]
   1fcdc:	2b00      	cmp	r3, #0
   1fcde:	db57      	blt.n	1fd90 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   1fce0:	687b      	ldr	r3, [r7, #4]
   1fce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1fce4:	2308      	movs	r3, #8
   1fce6:	18fb      	adds	r3, r7, r3
   1fce8:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   1fcea:	2308      	movs	r3, #8
   1fcec:	18fb      	adds	r3, r7, r3
   1fcee:	697a      	ldr	r2, [r7, #20]
   1fcf0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   1fcf2:	687b      	ldr	r3, [r7, #4]
   1fcf4:	22e0      	movs	r2, #224	; 0xe0
   1fcf6:	589a      	ldr	r2, [r3, r2]
   1fcf8:	687b      	ldr	r3, [r7, #4]
   1fcfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fcfc:	18d2      	adds	r2, r2, r3
   1fcfe:	687b      	ldr	r3, [r7, #4]
   1fd00:	21e0      	movs	r1, #224	; 0xe0
   1fd02:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   1fd04:	687b      	ldr	r3, [r7, #4]
   1fd06:	22dc      	movs	r2, #220	; 0xdc
   1fd08:	589a      	ldr	r2, [r3, r2]
   1fd0a:	687b      	ldr	r3, [r7, #4]
   1fd0c:	21e0      	movs	r1, #224	; 0xe0
   1fd0e:	585b      	ldr	r3, [r3, r1]
   1fd10:	429a      	cmp	r2, r3
   1fd12:	dc0c      	bgt.n	1fd2e <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1fd14:	687b      	ldr	r3, [r7, #4]
   1fd16:	22d8      	movs	r2, #216	; 0xd8
   1fd18:	2100      	movs	r1, #0
   1fd1a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1fd1c:	687b      	ldr	r3, [r7, #4]
   1fd1e:	22e4      	movs	r2, #228	; 0xe4
   1fd20:	2100      	movs	r1, #0
   1fd22:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1fd24:	2308      	movs	r3, #8
   1fd26:	18fb      	adds	r3, r7, r3
   1fd28:	2201      	movs	r2, #1
   1fd2a:	721a      	strb	r2, [r3, #8]
   1fd2c:	e003      	b.n	1fd36 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   1fd2e:	2308      	movs	r3, #8
   1fd30:	18fb      	adds	r3, r7, r3
   1fd32:	2200      	movs	r2, #0
   1fd34:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   1fd36:	687b      	ldr	r3, [r7, #4]
   1fd38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1fd3a:	2b00      	cmp	r3, #0
   1fd3c:	d006      	beq.n	1fd4c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1fd3e:	687b      	ldr	r3, [r7, #4]
   1fd40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1fd42:	2208      	movs	r2, #8
   1fd44:	18ba      	adds	r2, r7, r2
   1fd46:	6878      	ldr	r0, [r7, #4]
   1fd48:	2103      	movs	r1, #3
   1fd4a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   1fd4c:	2308      	movs	r3, #8
   1fd4e:	18fb      	adds	r3, r7, r3
   1fd50:	7a1b      	ldrb	r3, [r3, #8]
   1fd52:	2b01      	cmp	r3, #1
   1fd54:	d112      	bne.n	1fd7c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   1fd56:	687b      	ldr	r3, [r7, #4]
   1fd58:	2241      	movs	r2, #65	; 0x41
   1fd5a:	5c9b      	ldrb	r3, [r3, r2]
   1fd5c:	2202      	movs	r2, #2
   1fd5e:	4013      	ands	r3, r2
   1fd60:	b2db      	uxtb	r3, r3
   1fd62:	2b00      	cmp	r3, #0
   1fd64:	d10a      	bne.n	1fd7c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   1fd66:	4b11      	ldr	r3, [pc, #68]	; (1fdac <_http_client_handle_entity+0x1a0>)
   1fd68:	0018      	movs	r0, r3
   1fd6a:	4b11      	ldr	r3, [pc, #68]	; (1fdb0 <_http_client_handle_entity+0x1a4>)
   1fd6c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1fd6e:	687b      	ldr	r3, [r7, #4]
   1fd70:	2100      	movs	r1, #0
   1fd72:	0018      	movs	r0, r3
   1fd74:	4b0b      	ldr	r3, [pc, #44]	; (1fda4 <_http_client_handle_entity+0x198>)
   1fd76:	4798      	blx	r3
					return 0;
   1fd78:	2300      	movs	r3, #0
   1fd7a:	e00e      	b.n	1fd9a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   1fd7c:	687b      	ldr	r3, [r7, #4]
   1fd7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fd80:	697a      	ldr	r2, [r7, #20]
   1fd82:	18d2      	adds	r2, r2, r3
   1fd84:	687b      	ldr	r3, [r7, #4]
   1fd86:	0011      	movs	r1, r2
   1fd88:	0018      	movs	r0, r3
   1fd8a:	4b07      	ldr	r3, [pc, #28]	; (1fda8 <_http_client_handle_entity+0x19c>)
   1fd8c:	4798      	blx	r3
   1fd8e:	e003      	b.n	1fd98 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   1fd90:	687b      	ldr	r3, [r7, #4]
   1fd92:	0018      	movs	r0, r3
   1fd94:	4b07      	ldr	r3, [pc, #28]	; (1fdb4 <_http_client_handle_entity+0x1a8>)
   1fd96:	4798      	blx	r3
		}
	}

	return 0;
   1fd98:	2300      	movs	r3, #0
}
   1fd9a:	0018      	movs	r0, r3
   1fd9c:	46bd      	mov	sp, r7
   1fd9e:	b006      	add	sp, #24
   1fda0:	bd80      	pop	{r7, pc}
   1fda2:	46c0      	nop			; (mov r8, r8)
   1fda4:	0001edd1 	.word	0x0001edd1
   1fda8:	0001fdb9 	.word	0x0001fdb9
   1fdac:	00028b30 	.word	0x00028b30
   1fdb0:	00022fdd 	.word	0x00022fdd
   1fdb4:	0001f9f9 	.word	0x0001f9f9

0001fdb8 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   1fdb8:	b580      	push	{r7, lr}
   1fdba:	b084      	sub	sp, #16
   1fdbc:	af00      	add	r7, sp, #0
   1fdbe:	6078      	str	r0, [r7, #4]
   1fdc0:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   1fdc2:	687b      	ldr	r3, [r7, #4]
   1fdc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1fdc6:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   1fdc8:	687b      	ldr	r3, [r7, #4]
   1fdca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fdcc:	001a      	movs	r2, r3
   1fdce:	683b      	ldr	r3, [r7, #0]
   1fdd0:	1ad2      	subs	r2, r2, r3
   1fdd2:	68fb      	ldr	r3, [r7, #12]
   1fdd4:	18d3      	adds	r3, r2, r3
   1fdd6:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   1fdd8:	68bb      	ldr	r3, [r7, #8]
   1fdda:	2b00      	cmp	r3, #0
   1fddc:	dd09      	ble.n	1fdf2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   1fdde:	68ba      	ldr	r2, [r7, #8]
   1fde0:	6839      	ldr	r1, [r7, #0]
   1fde2:	68fb      	ldr	r3, [r7, #12]
   1fde4:	0018      	movs	r0, r3
   1fde6:	4b06      	ldr	r3, [pc, #24]	; (1fe00 <_http_client_move_buffer+0x48>)
   1fde8:	4798      	blx	r3
		module->recved_size = remain;
   1fdea:	68ba      	ldr	r2, [r7, #8]
   1fdec:	687b      	ldr	r3, [r7, #4]
   1fdee:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   1fdf0:	e002      	b.n	1fdf8 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   1fdf2:	687b      	ldr	r3, [r7, #4]
   1fdf4:	2200      	movs	r2, #0
   1fdf6:	645a      	str	r2, [r3, #68]	; 0x44
}
   1fdf8:	46c0      	nop			; (mov r8, r8)
   1fdfa:	46bd      	mov	sp, r7
   1fdfc:	b004      	add	sp, #16
   1fdfe:	bd80      	pop	{r7, pc}
   1fe00:	00022d97 	.word	0x00022d97

0001fe04 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   1fe04:	b580      	push	{r7, lr}
   1fe06:	b084      	sub	sp, #16
   1fe08:	af00      	add	r7, sp, #0
   1fe0a:	60f8      	str	r0, [r7, #12]
   1fe0c:	60b9      	str	r1, [r7, #8]
   1fe0e:	607a      	str	r2, [r7, #4]
   1fe10:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   1fe12:	68fb      	ldr	r3, [r7, #12]
   1fe14:	687a      	ldr	r2, [r7, #4]
   1fe16:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   1fe18:	68fb      	ldr	r3, [r7, #12]
   1fe1a:	68ba      	ldr	r2, [r7, #8]
   1fe1c:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   1fe1e:	68fb      	ldr	r3, [r7, #12]
   1fe20:	2200      	movs	r2, #0
   1fe22:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   1fe24:	68fb      	ldr	r3, [r7, #12]
   1fe26:	683a      	ldr	r2, [r7, #0]
   1fe28:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   1fe2a:	68fb      	ldr	r3, [r7, #12]
   1fe2c:	69ba      	ldr	r2, [r7, #24]
   1fe2e:	60da      	str	r2, [r3, #12]
}
   1fe30:	46c0      	nop			; (mov r8, r8)
   1fe32:	46bd      	mov	sp, r7
   1fe34:	b004      	add	sp, #16
   1fe36:	bd80      	pop	{r7, pc}

0001fe38 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   1fe38:	b580      	push	{r7, lr}
   1fe3a:	b084      	sub	sp, #16
   1fe3c:	af00      	add	r7, sp, #0
   1fe3e:	6078      	str	r0, [r7, #4]
   1fe40:	000a      	movs	r2, r1
   1fe42:	1cfb      	adds	r3, r7, #3
   1fe44:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   1fe46:	687b      	ldr	r3, [r7, #4]
   1fe48:	681a      	ldr	r2, [r3, #0]
   1fe4a:	687b      	ldr	r3, [r7, #4]
   1fe4c:	685b      	ldr	r3, [r3, #4]
   1fe4e:	1ad3      	subs	r3, r2, r3
   1fe50:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   1fe52:	68fb      	ldr	r3, [r7, #12]
   1fe54:	2b00      	cmp	r3, #0
   1fe56:	dc03      	bgt.n	1fe60 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   1fe58:	687b      	ldr	r3, [r7, #4]
   1fe5a:	0018      	movs	r0, r3
   1fe5c:	4b08      	ldr	r3, [pc, #32]	; (1fe80 <stream_writer_send_8+0x48>)
   1fe5e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   1fe60:	687b      	ldr	r3, [r7, #4]
   1fe62:	6919      	ldr	r1, [r3, #16]
   1fe64:	687b      	ldr	r3, [r7, #4]
   1fe66:	685b      	ldr	r3, [r3, #4]
   1fe68:	1c58      	adds	r0, r3, #1
   1fe6a:	687a      	ldr	r2, [r7, #4]
   1fe6c:	6050      	str	r0, [r2, #4]
   1fe6e:	18cb      	adds	r3, r1, r3
   1fe70:	1cfa      	adds	r2, r7, #3
   1fe72:	7812      	ldrb	r2, [r2, #0]
   1fe74:	701a      	strb	r2, [r3, #0]
}
   1fe76:	46c0      	nop			; (mov r8, r8)
   1fe78:	46bd      	mov	sp, r7
   1fe7a:	b004      	add	sp, #16
   1fe7c:	bd80      	pop	{r7, pc}
   1fe7e:	46c0      	nop			; (mov r8, r8)
   1fe80:	0001fec1 	.word	0x0001fec1

0001fe84 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   1fe84:	b580      	push	{r7, lr}
   1fe86:	b084      	sub	sp, #16
   1fe88:	af00      	add	r7, sp, #0
   1fe8a:	60f8      	str	r0, [r7, #12]
   1fe8c:	60b9      	str	r1, [r7, #8]
   1fe8e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   1fe90:	e00d      	b.n	1feae <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   1fe92:	68bb      	ldr	r3, [r7, #8]
   1fe94:	781b      	ldrb	r3, [r3, #0]
   1fe96:	b25a      	sxtb	r2, r3
   1fe98:	68fb      	ldr	r3, [r7, #12]
   1fe9a:	0011      	movs	r1, r2
   1fe9c:	0018      	movs	r0, r3
   1fe9e:	4b07      	ldr	r3, [pc, #28]	; (1febc <stream_writer_send_buffer+0x38>)
   1fea0:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   1fea2:	687b      	ldr	r3, [r7, #4]
   1fea4:	3b01      	subs	r3, #1
   1fea6:	607b      	str	r3, [r7, #4]
   1fea8:	68bb      	ldr	r3, [r7, #8]
   1feaa:	3301      	adds	r3, #1
   1feac:	60bb      	str	r3, [r7, #8]
   1feae:	687b      	ldr	r3, [r7, #4]
   1feb0:	2b00      	cmp	r3, #0
   1feb2:	d1ee      	bne.n	1fe92 <stream_writer_send_buffer+0xe>
	}
}
   1feb4:	46c0      	nop			; (mov r8, r8)
   1feb6:	46bd      	mov	sp, r7
   1feb8:	b004      	add	sp, #16
   1feba:	bd80      	pop	{r7, pc}
   1febc:	0001fe39 	.word	0x0001fe39

0001fec0 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   1fec0:	b590      	push	{r4, r7, lr}
   1fec2:	b083      	sub	sp, #12
   1fec4:	af00      	add	r7, sp, #0
   1fec6:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   1fec8:	687b      	ldr	r3, [r7, #4]
   1feca:	685b      	ldr	r3, [r3, #4]
   1fecc:	2b00      	cmp	r3, #0
   1fece:	d00c      	beq.n	1feea <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   1fed0:	687b      	ldr	r3, [r7, #4]
   1fed2:	689c      	ldr	r4, [r3, #8]
   1fed4:	687b      	ldr	r3, [r7, #4]
   1fed6:	68d8      	ldr	r0, [r3, #12]
   1fed8:	687b      	ldr	r3, [r7, #4]
   1feda:	6919      	ldr	r1, [r3, #16]
   1fedc:	687b      	ldr	r3, [r7, #4]
   1fede:	685b      	ldr	r3, [r3, #4]
   1fee0:	001a      	movs	r2, r3
   1fee2:	47a0      	blx	r4
		writer->written = 0;
   1fee4:	687b      	ldr	r3, [r7, #4]
   1fee6:	2200      	movs	r2, #0
   1fee8:	605a      	str	r2, [r3, #4]
	}
}
   1feea:	46c0      	nop			; (mov r8, r8)
   1feec:	46bd      	mov	sp, r7
   1feee:	b003      	add	sp, #12
   1fef0:	bd90      	pop	{r4, r7, pc}
	...

0001fef4 <system_cpu_clock_get_hz>:
{
   1fef4:	b580      	push	{r7, lr}
   1fef6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1fef8:	2000      	movs	r0, #0
   1fefa:	4b05      	ldr	r3, [pc, #20]	; (1ff10 <system_cpu_clock_get_hz+0x1c>)
   1fefc:	4798      	blx	r3
   1fefe:	0002      	movs	r2, r0
   1ff00:	4b04      	ldr	r3, [pc, #16]	; (1ff14 <system_cpu_clock_get_hz+0x20>)
   1ff02:	7a1b      	ldrb	r3, [r3, #8]
   1ff04:	b2db      	uxtb	r3, r3
   1ff06:	40da      	lsrs	r2, r3
   1ff08:	0013      	movs	r3, r2
}
   1ff0a:	0018      	movs	r0, r3
   1ff0c:	46bd      	mov	sp, r7
   1ff0e:	bd80      	pop	{r7, pc}
   1ff10:	000178d5 	.word	0x000178d5
   1ff14:	40000400 	.word	0x40000400

0001ff18 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   1ff18:	b580      	push	{r7, lr}
   1ff1a:	b084      	sub	sp, #16
   1ff1c:	af00      	add	r7, sp, #0
   1ff1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   1ff20:	687b      	ldr	r3, [r7, #4]
   1ff22:	681b      	ldr	r3, [r3, #0]
   1ff24:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1ff26:	46c0      	nop			; (mov r8, r8)
   1ff28:	68fb      	ldr	r3, [r7, #12]
   1ff2a:	689b      	ldr	r3, [r3, #8]
   1ff2c:	2202      	movs	r2, #2
   1ff2e:	4013      	ands	r3, r2
   1ff30:	d1fa      	bne.n	1ff28 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1ff32:	68fb      	ldr	r3, [r7, #12]
   1ff34:	681b      	ldr	r3, [r3, #0]
   1ff36:	2202      	movs	r2, #2
   1ff38:	431a      	orrs	r2, r3
   1ff3a:	68fb      	ldr	r3, [r7, #12]
   1ff3c:	601a      	str	r2, [r3, #0]
}
   1ff3e:	46c0      	nop			; (mov r8, r8)
   1ff40:	46bd      	mov	sp, r7
   1ff42:	b004      	add	sp, #16
   1ff44:	bd80      	pop	{r7, pc}
	...

0001ff48 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   1ff48:	b580      	push	{r7, lr}
   1ff4a:	b082      	sub	sp, #8
   1ff4c:	af00      	add	r7, sp, #0
   1ff4e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   1ff50:	4b04      	ldr	r3, [pc, #16]	; (1ff64 <sw_timer_tcc_callback+0x1c>)
   1ff52:	681b      	ldr	r3, [r3, #0]
   1ff54:	1c5a      	adds	r2, r3, #1
   1ff56:	4b03      	ldr	r3, [pc, #12]	; (1ff64 <sw_timer_tcc_callback+0x1c>)
   1ff58:	601a      	str	r2, [r3, #0]
}
   1ff5a:	46c0      	nop			; (mov r8, r8)
   1ff5c:	46bd      	mov	sp, r7
   1ff5e:	b002      	add	sp, #8
   1ff60:	bd80      	pop	{r7, pc}
   1ff62:	46c0      	nop			; (mov r8, r8)
   1ff64:	200047a0 	.word	0x200047a0

0001ff68 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   1ff68:	b580      	push	{r7, lr}
   1ff6a:	b082      	sub	sp, #8
   1ff6c:	af00      	add	r7, sp, #0
   1ff6e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   1ff70:	687b      	ldr	r3, [r7, #4]
   1ff72:	2264      	movs	r2, #100	; 0x64
   1ff74:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   1ff76:	687b      	ldr	r3, [r7, #4]
   1ff78:	2200      	movs	r2, #0
   1ff7a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   1ff7c:	687b      	ldr	r3, [r7, #4]
   1ff7e:	2200      	movs	r2, #0
   1ff80:	705a      	strb	r2, [r3, #1]
}
   1ff82:	46c0      	nop			; (mov r8, r8)
   1ff84:	46bd      	mov	sp, r7
   1ff86:	b002      	add	sp, #8
   1ff88:	bd80      	pop	{r7, pc}
	...

0001ff8c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   1ff8c:	b590      	push	{r4, r7, lr}
   1ff8e:	b0b1      	sub	sp, #196	; 0xc4
   1ff90:	af00      	add	r7, sp, #0
   1ff92:	6078      	str	r0, [r7, #4]
   1ff94:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   1ff96:	230c      	movs	r3, #12
   1ff98:	18fb      	adds	r3, r7, r3
   1ff9a:	4a2e      	ldr	r2, [pc, #184]	; (20054 <sw_timer_init+0xc8>)
   1ff9c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ff9e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   1ffa0:	683b      	ldr	r3, [r7, #0]
   1ffa2:	885b      	ldrh	r3, [r3, #2]
   1ffa4:	001a      	movs	r2, r3
   1ffa6:	687b      	ldr	r3, [r7, #4]
   1ffa8:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   1ffaa:	687b      	ldr	r3, [r7, #4]
   1ffac:	3314      	adds	r3, #20
   1ffae:	22bc      	movs	r2, #188	; 0xbc
   1ffb0:	18ba      	adds	r2, r7, r2
   1ffb2:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   1ffb4:	683b      	ldr	r3, [r7, #0]
   1ffb6:	781b      	ldrb	r3, [r3, #0]
   1ffb8:	001a      	movs	r2, r3
   1ffba:	230c      	movs	r3, #12
   1ffbc:	18fb      	adds	r3, r7, r3
   1ffbe:	0092      	lsls	r2, r2, #2
   1ffc0:	58d2      	ldr	r2, [r2, r3]
   1ffc2:	2318      	movs	r3, #24
   1ffc4:	18fb      	adds	r3, r7, r3
   1ffc6:	0011      	movs	r1, r2
   1ffc8:	0018      	movs	r0, r3
   1ffca:	4b23      	ldr	r3, [pc, #140]	; (20058 <sw_timer_init+0xcc>)
   1ffcc:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   1ffce:	4b23      	ldr	r3, [pc, #140]	; (2005c <sw_timer_init+0xd0>)
   1ffd0:	4798      	blx	r3
   1ffd2:	0004      	movs	r4, r0
   1ffd4:	683b      	ldr	r3, [r7, #0]
   1ffd6:	885b      	ldrh	r3, [r3, #2]
   1ffd8:	001a      	movs	r2, r3
   1ffda:	4b21      	ldr	r3, [pc, #132]	; (20060 <sw_timer_init+0xd4>)
   1ffdc:	0011      	movs	r1, r2
   1ffde:	22fa      	movs	r2, #250	; 0xfa
   1ffe0:	0210      	lsls	r0, r2, #8
   1ffe2:	4798      	blx	r3
   1ffe4:	0003      	movs	r3, r0
   1ffe6:	001a      	movs	r2, r3
   1ffe8:	4b1e      	ldr	r3, [pc, #120]	; (20064 <sw_timer_init+0xd8>)
   1ffea:	0011      	movs	r1, r2
   1ffec:	0020      	movs	r0, r4
   1ffee:	4798      	blx	r3
   1fff0:	0003      	movs	r3, r0
   1fff2:	001a      	movs	r2, r3
   1fff4:	2318      	movs	r3, #24
   1fff6:	18fb      	adds	r3, r7, r3
   1fff8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   1fffa:	2318      	movs	r3, #24
   1fffc:	18fb      	adds	r3, r7, r3
   1fffe:	2205      	movs	r2, #5
   20000:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   20002:	683b      	ldr	r3, [r7, #0]
   20004:	781b      	ldrb	r3, [r3, #0]
   20006:	001a      	movs	r2, r3
   20008:	230c      	movs	r3, #12
   2000a:	18fb      	adds	r3, r7, r3
   2000c:	0092      	lsls	r2, r2, #2
   2000e:	58d1      	ldr	r1, [r2, r3]
   20010:	2318      	movs	r3, #24
   20012:	18fa      	adds	r2, r7, r3
   20014:	23bc      	movs	r3, #188	; 0xbc
   20016:	18fb      	adds	r3, r7, r3
   20018:	681b      	ldr	r3, [r3, #0]
   2001a:	0018      	movs	r0, r3
   2001c:	4b12      	ldr	r3, [pc, #72]	; (20068 <sw_timer_init+0xdc>)
   2001e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   20020:	683b      	ldr	r3, [r7, #0]
   20022:	785b      	ldrb	r3, [r3, #1]
   20024:	3308      	adds	r3, #8
   20026:	b2da      	uxtb	r2, r3
   20028:	4910      	ldr	r1, [pc, #64]	; (2006c <sw_timer_init+0xe0>)
   2002a:	23bc      	movs	r3, #188	; 0xbc
   2002c:	18fb      	adds	r3, r7, r3
   2002e:	681b      	ldr	r3, [r3, #0]
   20030:	0018      	movs	r0, r3
   20032:	4b0f      	ldr	r3, [pc, #60]	; (20070 <sw_timer_init+0xe4>)
   20034:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   20036:	683b      	ldr	r3, [r7, #0]
   20038:	785b      	ldrb	r3, [r3, #1]
   2003a:	3308      	adds	r3, #8
   2003c:	b2da      	uxtb	r2, r3
   2003e:	23bc      	movs	r3, #188	; 0xbc
   20040:	18fb      	adds	r3, r7, r3
   20042:	681b      	ldr	r3, [r3, #0]
   20044:	0011      	movs	r1, r2
   20046:	0018      	movs	r0, r3
   20048:	4b0a      	ldr	r3, [pc, #40]	; (20074 <sw_timer_init+0xe8>)
   2004a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   2004c:	46c0      	nop			; (mov r8, r8)
   2004e:	46bd      	mov	sp, r7
   20050:	b031      	add	sp, #196	; 0xc4
   20052:	bd90      	pop	{r4, r7, pc}
   20054:	00028b70 	.word	0x00028b70
   20058:	00017e6d 	.word	0x00017e6d
   2005c:	0001fef5 	.word	0x0001fef5
   20060:	00020585 	.word	0x00020585
   20064:	00020471 	.word	0x00020471
   20068:	000184c9 	.word	0x000184c9
   2006c:	0001ff49 	.word	0x0001ff49
   20070:	000188e1 	.word	0x000188e1
   20074:	00018921 	.word	0x00018921

00020078 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   20078:	b580      	push	{r7, lr}
   2007a:	b084      	sub	sp, #16
   2007c:	af00      	add	r7, sp, #0
   2007e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   20080:	687b      	ldr	r3, [r7, #4]
   20082:	3314      	adds	r3, #20
   20084:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   20086:	68fb      	ldr	r3, [r7, #12]
   20088:	0018      	movs	r0, r3
   2008a:	4b03      	ldr	r3, [pc, #12]	; (20098 <sw_timer_enable+0x20>)
   2008c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   2008e:	46c0      	nop			; (mov r8, r8)
   20090:	46bd      	mov	sp, r7
   20092:	b004      	add	sp, #16
   20094:	bd80      	pop	{r7, pc}
   20096:	46c0      	nop			; (mov r8, r8)
   20098:	0001ff19 	.word	0x0001ff19

0002009c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   2009c:	b580      	push	{r7, lr}
   2009e:	b086      	sub	sp, #24
   200a0:	af00      	add	r7, sp, #0
   200a2:	60f8      	str	r0, [r7, #12]
   200a4:	60b9      	str	r1, [r7, #8]
   200a6:	607a      	str	r2, [r7, #4]
   200a8:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   200aa:	2300      	movs	r3, #0
   200ac:	617b      	str	r3, [r7, #20]
   200ae:	e032      	b.n	20116 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   200b0:	68f9      	ldr	r1, [r7, #12]
   200b2:	697a      	ldr	r2, [r7, #20]
   200b4:	0013      	movs	r3, r2
   200b6:	009b      	lsls	r3, r3, #2
   200b8:	189b      	adds	r3, r3, r2
   200ba:	009b      	lsls	r3, r3, #2
   200bc:	5c5b      	ldrb	r3, [r3, r1]
   200be:	07db      	lsls	r3, r3, #31
   200c0:	0fdb      	lsrs	r3, r3, #31
   200c2:	b2db      	uxtb	r3, r3
   200c4:	2b00      	cmp	r3, #0
   200c6:	d123      	bne.n	20110 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   200c8:	697a      	ldr	r2, [r7, #20]
   200ca:	0013      	movs	r3, r2
   200cc:	009b      	lsls	r3, r3, #2
   200ce:	189b      	adds	r3, r3, r2
   200d0:	009b      	lsls	r3, r3, #2
   200d2:	68fa      	ldr	r2, [r7, #12]
   200d4:	18d3      	adds	r3, r2, r3
   200d6:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   200d8:	693b      	ldr	r3, [r7, #16]
   200da:	68ba      	ldr	r2, [r7, #8]
   200dc:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   200de:	693b      	ldr	r3, [r7, #16]
   200e0:	781a      	ldrb	r2, [r3, #0]
   200e2:	2102      	movs	r1, #2
   200e4:	438a      	bics	r2, r1
   200e6:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   200e8:	693b      	ldr	r3, [r7, #16]
   200ea:	687a      	ldr	r2, [r7, #4]
   200ec:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   200ee:	68fb      	ldr	r3, [r7, #12]
   200f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   200f2:	4b0d      	ldr	r3, [pc, #52]	; (20128 <sw_timer_register_callback+0x8c>)
   200f4:	0011      	movs	r1, r2
   200f6:	6838      	ldr	r0, [r7, #0]
   200f8:	4798      	blx	r3
   200fa:	0003      	movs	r3, r0
   200fc:	001a      	movs	r2, r3
   200fe:	693b      	ldr	r3, [r7, #16]
   20100:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   20102:	693b      	ldr	r3, [r7, #16]
   20104:	781a      	ldrb	r2, [r3, #0]
   20106:	2101      	movs	r1, #1
   20108:	430a      	orrs	r2, r1
   2010a:	701a      	strb	r2, [r3, #0]
			return index;
   2010c:	697b      	ldr	r3, [r7, #20]
   2010e:	e007      	b.n	20120 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   20110:	697b      	ldr	r3, [r7, #20]
   20112:	3301      	adds	r3, #1
   20114:	617b      	str	r3, [r7, #20]
   20116:	697b      	ldr	r3, [r7, #20]
   20118:	2b00      	cmp	r3, #0
   2011a:	ddc9      	ble.n	200b0 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   2011c:	2301      	movs	r3, #1
   2011e:	425b      	negs	r3, r3
}
   20120:	0018      	movs	r0, r3
   20122:	46bd      	mov	sp, r7
   20124:	b006      	add	sp, #24
   20126:	bd80      	pop	{r7, pc}
   20128:	00020471 	.word	0x00020471

0002012c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   2012c:	b580      	push	{r7, lr}
   2012e:	b086      	sub	sp, #24
   20130:	af00      	add	r7, sp, #0
   20132:	60f8      	str	r0, [r7, #12]
   20134:	60b9      	str	r1, [r7, #8]
   20136:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   20138:	68ba      	ldr	r2, [r7, #8]
   2013a:	0013      	movs	r3, r2
   2013c:	009b      	lsls	r3, r3, #2
   2013e:	189b      	adds	r3, r3, r2
   20140:	009b      	lsls	r3, r3, #2
   20142:	68fa      	ldr	r2, [r7, #12]
   20144:	18d3      	adds	r3, r2, r3
   20146:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   20148:	697b      	ldr	r3, [r7, #20]
   2014a:	781a      	ldrb	r2, [r3, #0]
   2014c:	2102      	movs	r1, #2
   2014e:	430a      	orrs	r2, r1
   20150:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   20152:	68fb      	ldr	r3, [r7, #12]
   20154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   20156:	4b07      	ldr	r3, [pc, #28]	; (20174 <sw_timer_enable_callback+0x48>)
   20158:	0011      	movs	r1, r2
   2015a:	6878      	ldr	r0, [r7, #4]
   2015c:	4798      	blx	r3
   2015e:	0003      	movs	r3, r0
   20160:	001a      	movs	r2, r3
   20162:	4b05      	ldr	r3, [pc, #20]	; (20178 <sw_timer_enable_callback+0x4c>)
   20164:	681b      	ldr	r3, [r3, #0]
   20166:	18d2      	adds	r2, r2, r3
   20168:	697b      	ldr	r3, [r7, #20]
   2016a:	611a      	str	r2, [r3, #16]
}
   2016c:	46c0      	nop			; (mov r8, r8)
   2016e:	46bd      	mov	sp, r7
   20170:	b006      	add	sp, #24
   20172:	bd80      	pop	{r7, pc}
   20174:	00020471 	.word	0x00020471
   20178:	200047a0 	.word	0x200047a0

0002017c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   2017c:	b580      	push	{r7, lr}
   2017e:	b084      	sub	sp, #16
   20180:	af00      	add	r7, sp, #0
   20182:	6078      	str	r0, [r7, #4]
   20184:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   20186:	683a      	ldr	r2, [r7, #0]
   20188:	0013      	movs	r3, r2
   2018a:	009b      	lsls	r3, r3, #2
   2018c:	189b      	adds	r3, r3, r2
   2018e:	009b      	lsls	r3, r3, #2
   20190:	687a      	ldr	r2, [r7, #4]
   20192:	18d3      	adds	r3, r2, r3
   20194:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   20196:	68fb      	ldr	r3, [r7, #12]
   20198:	781a      	ldrb	r2, [r3, #0]
   2019a:	2102      	movs	r1, #2
   2019c:	438a      	bics	r2, r1
   2019e:	701a      	strb	r2, [r3, #0]
}
   201a0:	46c0      	nop			; (mov r8, r8)
   201a2:	46bd      	mov	sp, r7
   201a4:	b004      	add	sp, #16
   201a6:	bd80      	pop	{r7, pc}

000201a8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   201a8:	b590      	push	{r4, r7, lr}
   201aa:	b085      	sub	sp, #20
   201ac:	af00      	add	r7, sp, #0
   201ae:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   201b0:	2300      	movs	r3, #0
   201b2:	60fb      	str	r3, [r7, #12]
   201b4:	e053      	b.n	2025e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   201b6:	6879      	ldr	r1, [r7, #4]
   201b8:	68fa      	ldr	r2, [r7, #12]
   201ba:	0013      	movs	r3, r2
   201bc:	009b      	lsls	r3, r3, #2
   201be:	189b      	adds	r3, r3, r2
   201c0:	009b      	lsls	r3, r3, #2
   201c2:	5c5b      	ldrb	r3, [r3, r1]
   201c4:	07db      	lsls	r3, r3, #31
   201c6:	0fdb      	lsrs	r3, r3, #31
   201c8:	b2db      	uxtb	r3, r3
   201ca:	2b00      	cmp	r3, #0
   201cc:	d044      	beq.n	20258 <sw_timer_task+0xb0>
   201ce:	6879      	ldr	r1, [r7, #4]
   201d0:	68fa      	ldr	r2, [r7, #12]
   201d2:	0013      	movs	r3, r2
   201d4:	009b      	lsls	r3, r3, #2
   201d6:	189b      	adds	r3, r3, r2
   201d8:	009b      	lsls	r3, r3, #2
   201da:	5c5b      	ldrb	r3, [r3, r1]
   201dc:	079b      	lsls	r3, r3, #30
   201de:	0fdb      	lsrs	r3, r3, #31
   201e0:	b2db      	uxtb	r3, r3
   201e2:	2b00      	cmp	r3, #0
   201e4:	d038      	beq.n	20258 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   201e6:	68fa      	ldr	r2, [r7, #12]
   201e8:	0013      	movs	r3, r2
   201ea:	009b      	lsls	r3, r3, #2
   201ec:	189b      	adds	r3, r3, r2
   201ee:	009b      	lsls	r3, r3, #2
   201f0:	687a      	ldr	r2, [r7, #4]
   201f2:	18d3      	adds	r3, r2, r3
   201f4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   201f6:	68bb      	ldr	r3, [r7, #8]
   201f8:	691a      	ldr	r2, [r3, #16]
   201fa:	4b1c      	ldr	r3, [pc, #112]	; (2026c <sw_timer_task+0xc4>)
   201fc:	681b      	ldr	r3, [r3, #0]
   201fe:	1ad3      	subs	r3, r2, r3
   20200:	d52a      	bpl.n	20258 <sw_timer_task+0xb0>
   20202:	68bb      	ldr	r3, [r7, #8]
   20204:	781b      	ldrb	r3, [r3, #0]
   20206:	2204      	movs	r2, #4
   20208:	4013      	ands	r3, r2
   2020a:	b2db      	uxtb	r3, r3
   2020c:	2b00      	cmp	r3, #0
   2020e:	d123      	bne.n	20258 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   20210:	68bb      	ldr	r3, [r7, #8]
   20212:	781a      	ldrb	r2, [r3, #0]
   20214:	2104      	movs	r1, #4
   20216:	430a      	orrs	r2, r1
   20218:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   2021a:	68bb      	ldr	r3, [r7, #8]
   2021c:	68db      	ldr	r3, [r3, #12]
   2021e:	2b00      	cmp	r3, #0
   20220:	d007      	beq.n	20232 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   20222:	68bb      	ldr	r3, [r7, #8]
   20224:	68da      	ldr	r2, [r3, #12]
   20226:	4b11      	ldr	r3, [pc, #68]	; (2026c <sw_timer_task+0xc4>)
   20228:	681b      	ldr	r3, [r3, #0]
   2022a:	18d2      	adds	r2, r2, r3
   2022c:	68bb      	ldr	r3, [r7, #8]
   2022e:	611a      	str	r2, [r3, #16]
   20230:	e004      	b.n	2023c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   20232:	68bb      	ldr	r3, [r7, #8]
   20234:	781a      	ldrb	r2, [r3, #0]
   20236:	2102      	movs	r1, #2
   20238:	438a      	bics	r2, r1
   2023a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   2023c:	68bb      	ldr	r3, [r7, #8]
   2023e:	685c      	ldr	r4, [r3, #4]
   20240:	68bb      	ldr	r3, [r7, #8]
   20242:	689a      	ldr	r2, [r3, #8]
   20244:	68bb      	ldr	r3, [r7, #8]
   20246:	68db      	ldr	r3, [r3, #12]
   20248:	68f9      	ldr	r1, [r7, #12]
   2024a:	6878      	ldr	r0, [r7, #4]
   2024c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   2024e:	68bb      	ldr	r3, [r7, #8]
   20250:	781a      	ldrb	r2, [r3, #0]
   20252:	2104      	movs	r1, #4
   20254:	438a      	bics	r2, r1
   20256:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   20258:	68fb      	ldr	r3, [r7, #12]
   2025a:	3301      	adds	r3, #1
   2025c:	60fb      	str	r3, [r7, #12]
   2025e:	68fb      	ldr	r3, [r7, #12]
   20260:	2b00      	cmp	r3, #0
   20262:	dda8      	ble.n	201b6 <sw_timer_task+0xe>
			}
		}
	}
}
   20264:	46c0      	nop			; (mov r8, r8)
   20266:	46bd      	mov	sp, r7
   20268:	b005      	add	sp, #20
   2026a:	bd90      	pop	{r4, r7, pc}
   2026c:	200047a0 	.word	0x200047a0

00020270 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   20270:	b580      	push	{r7, lr}
   20272:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   20274:	4b06      	ldr	r3, [pc, #24]	; (20290 <main+0x20>)
   20276:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   20278:	4b06      	ldr	r3, [pc, #24]	; (20294 <main+0x24>)
   2027a:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   2027c:	2001      	movs	r0, #1
   2027e:	4b06      	ldr	r3, [pc, #24]	; (20298 <main+0x28>)
   20280:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   20282:	4b06      	ldr	r3, [pc, #24]	; (2029c <main+0x2c>)
   20284:	4798      	blx	r3

    return 0;  // Will not get here
   20286:	2300      	movs	r3, #0
}
   20288:	0018      	movs	r0, r3
   2028a:	46bd      	mov	sp, r7
   2028c:	bd80      	pop	{r7, pc}
   2028e:	46c0      	nop			; (mov r8, r8)
   20290:	00017d61 	.word	0x00017d61
   20294:	0000b805 	.word	0x0000b805
   20298:	00005ecd 	.word	0x00005ecd
   2029c:	00009e5d 	.word	0x00009e5d

000202a0 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   202a0:	b580      	push	{r7, lr}
   202a2:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   202a4:	4b10      	ldr	r3, [pc, #64]	; (202e8 <vApplicationDaemonTaskStartupHook+0x48>)
   202a6:	0018      	movs	r0, r3
   202a8:	4b10      	ldr	r3, [pc, #64]	; (202ec <vApplicationDaemonTaskStartupHook+0x4c>)
   202aa:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   202ac:	4b10      	ldr	r3, [pc, #64]	; (202f0 <vApplicationDaemonTaskStartupHook+0x50>)
   202ae:	0018      	movs	r0, r3
   202b0:	4b0e      	ldr	r3, [pc, #56]	; (202ec <vApplicationDaemonTaskStartupHook+0x4c>)
   202b2:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   202b4:	4b0f      	ldr	r3, [pc, #60]	; (202f4 <vApplicationDaemonTaskStartupHook+0x54>)
   202b6:	4798      	blx	r3
   202b8:	1e03      	subs	r3, r0, #0
   202ba:	d004      	beq.n	202c6 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   202bc:	4b0e      	ldr	r3, [pc, #56]	; (202f8 <vApplicationDaemonTaskStartupHook+0x58>)
   202be:	0018      	movs	r0, r3
   202c0:	4b0a      	ldr	r3, [pc, #40]	; (202ec <vApplicationDaemonTaskStartupHook+0x4c>)
   202c2:	4798      	blx	r3
   202c4:	e003      	b.n	202ce <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   202c6:	4b0d      	ldr	r3, [pc, #52]	; (202fc <vApplicationDaemonTaskStartupHook+0x5c>)
   202c8:	0018      	movs	r0, r3
   202ca:	4b08      	ldr	r3, [pc, #32]	; (202ec <vApplicationDaemonTaskStartupHook+0x4c>)
   202cc:	4798      	blx	r3
    }
	
	Acc_init();
   202ce:	4b0c      	ldr	r3, [pc, #48]	; (20300 <vApplicationDaemonTaskStartupHook+0x60>)
   202d0:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   202d2:	4b0c      	ldr	r3, [pc, #48]	; (20304 <vApplicationDaemonTaskStartupHook+0x64>)
   202d4:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   202d6:	4b0c      	ldr	r3, [pc, #48]	; (20308 <vApplicationDaemonTaskStartupHook+0x68>)
   202d8:	681b      	ldr	r3, [r3, #0]
   202da:	0018      	movs	r0, r3
   202dc:	4b0b      	ldr	r3, [pc, #44]	; (2030c <vApplicationDaemonTaskStartupHook+0x6c>)
   202de:	4798      	blx	r3
}
   202e0:	46c0      	nop			; (mov r8, r8)
   202e2:	46bd      	mov	sp, r7
   202e4:	bd80      	pop	{r7, pc}
   202e6:	46c0      	nop			; (mov r8, r8)
   202e8:	00028b7c 	.word	0x00028b7c
   202ec:	0000b875 	.word	0x0000b875
   202f0:	00028ba0 	.word	0x00028ba0
   202f4:	00002b29 	.word	0x00002b29
   202f8:	00028bb8 	.word	0x00028bb8
   202fc:	00028bdc 	.word	0x00028bdc
   20300:	00000211 	.word	0x00000211
   20304:	00020311 	.word	0x00020311
   20308:	200047a8 	.word	0x200047a8
   2030c:	00009d01 	.word	0x00009d01

00020310 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   20310:	b590      	push	{r4, r7, lr}
   20312:	b083      	sub	sp, #12
   20314:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   20316:	4b35      	ldr	r3, [pc, #212]	; (203ec <StartTasks+0xdc>)
   20318:	4798      	blx	r3
   2031a:	0003      	movs	r3, r0
   2031c:	4a34      	ldr	r2, [pc, #208]	; (203f0 <StartTasks+0xe0>)
   2031e:	4835      	ldr	r0, [pc, #212]	; (203f4 <StartTasks+0xe4>)
   20320:	2140      	movs	r1, #64	; 0x40
   20322:	4c35      	ldr	r4, [pc, #212]	; (203f8 <StartTasks+0xe8>)
   20324:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   20326:	4b33      	ldr	r3, [pc, #204]	; (203f4 <StartTasks+0xe4>)
   20328:	0018      	movs	r0, r3
   2032a:	4b34      	ldr	r3, [pc, #208]	; (203fc <StartTasks+0xec>)
   2032c:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   2032e:	23c8      	movs	r3, #200	; 0xc8
   20330:	005a      	lsls	r2, r3, #1
   20332:	4933      	ldr	r1, [pc, #204]	; (20400 <StartTasks+0xf0>)
   20334:	4833      	ldr	r0, [pc, #204]	; (20404 <StartTasks+0xf4>)
   20336:	4b34      	ldr	r3, [pc, #208]	; (20408 <StartTasks+0xf8>)
   20338:	9301      	str	r3, [sp, #4]
   2033a:	2304      	movs	r3, #4
   2033c:	9300      	str	r3, [sp, #0]
   2033e:	2300      	movs	r3, #0
   20340:	4c32      	ldr	r4, [pc, #200]	; (2040c <StartTasks+0xfc>)
   20342:	47a0      	blx	r4
   20344:	0003      	movs	r3, r0
   20346:	2b01      	cmp	r3, #1
   20348:	d003      	beq.n	20352 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   2034a:	4b31      	ldr	r3, [pc, #196]	; (20410 <StartTasks+0x100>)
   2034c:	0018      	movs	r0, r3
   2034e:	4b2b      	ldr	r3, [pc, #172]	; (203fc <StartTasks+0xec>)
   20350:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   20352:	4b26      	ldr	r3, [pc, #152]	; (203ec <StartTasks+0xdc>)
   20354:	4798      	blx	r3
   20356:	0003      	movs	r3, r0
   20358:	4a2e      	ldr	r2, [pc, #184]	; (20414 <StartTasks+0x104>)
   2035a:	4826      	ldr	r0, [pc, #152]	; (203f4 <StartTasks+0xe4>)
   2035c:	2140      	movs	r1, #64	; 0x40
   2035e:	4c26      	ldr	r4, [pc, #152]	; (203f8 <StartTasks+0xe8>)
   20360:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   20362:	4b24      	ldr	r3, [pc, #144]	; (203f4 <StartTasks+0xe4>)
   20364:	0018      	movs	r0, r3
   20366:	4b25      	ldr	r3, [pc, #148]	; (203fc <StartTasks+0xec>)
   20368:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   2036a:	23fa      	movs	r3, #250	; 0xfa
   2036c:	009a      	lsls	r2, r3, #2
   2036e:	492a      	ldr	r1, [pc, #168]	; (20418 <StartTasks+0x108>)
   20370:	482a      	ldr	r0, [pc, #168]	; (2041c <StartTasks+0x10c>)
   20372:	4b2b      	ldr	r3, [pc, #172]	; (20420 <StartTasks+0x110>)
   20374:	9301      	str	r3, [sp, #4]
   20376:	2304      	movs	r3, #4
   20378:	9300      	str	r3, [sp, #0]
   2037a:	2300      	movs	r3, #0
   2037c:	4c23      	ldr	r4, [pc, #140]	; (2040c <StartTasks+0xfc>)
   2037e:	47a0      	blx	r4
   20380:	0003      	movs	r3, r0
   20382:	2b01      	cmp	r3, #1
   20384:	d003      	beq.n	2038e <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   20386:	4b27      	ldr	r3, [pc, #156]	; (20424 <StartTasks+0x114>)
   20388:	0018      	movs	r0, r3
   2038a:	4b1c      	ldr	r3, [pc, #112]	; (203fc <StartTasks+0xec>)
   2038c:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   2038e:	4b17      	ldr	r3, [pc, #92]	; (203ec <StartTasks+0xdc>)
   20390:	4798      	blx	r3
   20392:	0003      	movs	r3, r0
   20394:	4a24      	ldr	r2, [pc, #144]	; (20428 <StartTasks+0x118>)
   20396:	4817      	ldr	r0, [pc, #92]	; (203f4 <StartTasks+0xe4>)
   20398:	2140      	movs	r1, #64	; 0x40
   2039a:	4c17      	ldr	r4, [pc, #92]	; (203f8 <StartTasks+0xe8>)
   2039c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   2039e:	4b15      	ldr	r3, [pc, #84]	; (203f4 <StartTasks+0xe4>)
   203a0:	0018      	movs	r0, r3
   203a2:	4b16      	ldr	r3, [pc, #88]	; (203fc <StartTasks+0xec>)
   203a4:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   203a6:	23fa      	movs	r3, #250	; 0xfa
   203a8:	005a      	lsls	r2, r3, #1
   203aa:	4920      	ldr	r1, [pc, #128]	; (2042c <StartTasks+0x11c>)
   203ac:	4820      	ldr	r0, [pc, #128]	; (20430 <StartTasks+0x120>)
   203ae:	4b21      	ldr	r3, [pc, #132]	; (20434 <StartTasks+0x124>)
   203b0:	9301      	str	r3, [sp, #4]
   203b2:	2304      	movs	r3, #4
   203b4:	9300      	str	r3, [sp, #0]
   203b6:	2300      	movs	r3, #0
   203b8:	4c14      	ldr	r4, [pc, #80]	; (2040c <StartTasks+0xfc>)
   203ba:	47a0      	blx	r4
   203bc:	0003      	movs	r3, r0
   203be:	2b01      	cmp	r3, #1
   203c0:	d003      	beq.n	203ca <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   203c2:	4b1d      	ldr	r3, [pc, #116]	; (20438 <StartTasks+0x128>)
   203c4:	0018      	movs	r0, r3
   203c6:	4b0d      	ldr	r3, [pc, #52]	; (203fc <StartTasks+0xec>)
   203c8:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   203ca:	4b08      	ldr	r3, [pc, #32]	; (203ec <StartTasks+0xdc>)
   203cc:	4798      	blx	r3
   203ce:	0003      	movs	r3, r0
   203d0:	4a1a      	ldr	r2, [pc, #104]	; (2043c <StartTasks+0x12c>)
   203d2:	4808      	ldr	r0, [pc, #32]	; (203f4 <StartTasks+0xe4>)
   203d4:	2140      	movs	r1, #64	; 0x40
   203d6:	4c08      	ldr	r4, [pc, #32]	; (203f8 <StartTasks+0xe8>)
   203d8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   203da:	4b06      	ldr	r3, [pc, #24]	; (203f4 <StartTasks+0xe4>)
   203dc:	0018      	movs	r0, r3
   203de:	4b07      	ldr	r3, [pc, #28]	; (203fc <StartTasks+0xec>)
   203e0:	4798      	blx	r3
}
   203e2:	46c0      	nop			; (mov r8, r8)
   203e4:	46bd      	mov	sp, r7
   203e6:	b001      	add	sp, #4
   203e8:	bd90      	pop	{r4, r7, pc}
   203ea:	46c0      	nop			; (mov r8, r8)
   203ec:	00007e41 	.word	0x00007e41
   203f0:	00028bf8 	.word	0x00028bf8
   203f4:	200047d0 	.word	0x200047d0
   203f8:	00023015 	.word	0x00023015
   203fc:	0000b875 	.word	0x0000b875
   20400:	00028c1c 	.word	0x00028c1c
   20404:	00002191 	.word	0x00002191
   20408:	200047a4 	.word	0x200047a4
   2040c:	00009885 	.word	0x00009885
   20410:	00028c28 	.word	0x00028c28
   20414:	00028c54 	.word	0x00028c54
   20418:	00028c74 	.word	0x00028c74
   2041c:	00004ca9 	.word	0x00004ca9
   20420:	200047ac 	.word	0x200047ac
   20424:	00028c80 	.word	0x00028c80
   20428:	00028cac 	.word	0x00028cac
   2042c:	00028ccc 	.word	0x00028ccc
   20430:	00003611 	.word	0x00003611
   20434:	200047b0 	.word	0x200047b0
   20438:	00028cd4 	.word	0x00028cd4
   2043c:	00028d00 	.word	0x00028d00

00020440 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   20440:	b580      	push	{r7, lr}
   20442:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   20444:	4b02      	ldr	r3, [pc, #8]	; (20450 <vApplicationMallocFailedHook+0x10>)
   20446:	0018      	movs	r0, r3
   20448:	4b02      	ldr	r3, [pc, #8]	; (20454 <vApplicationMallocFailedHook+0x14>)
   2044a:	4798      	blx	r3
    while (1)
   2044c:	e7fe      	b.n	2044c <vApplicationMallocFailedHook+0xc>
   2044e:	46c0      	nop			; (mov r8, r8)
   20450:	00028d24 	.word	0x00028d24
   20454:	0000b875 	.word	0x0000b875

00020458 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   20458:	b580      	push	{r7, lr}
   2045a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   2045c:	4b02      	ldr	r3, [pc, #8]	; (20468 <vApplicationStackOverflowHook+0x10>)
   2045e:	0018      	movs	r0, r3
   20460:	4b02      	ldr	r3, [pc, #8]	; (2046c <vApplicationStackOverflowHook+0x14>)
   20462:	4798      	blx	r3
    while (1)
   20464:	e7fe      	b.n	20464 <vApplicationStackOverflowHook+0xc>
   20466:	46c0      	nop			; (mov r8, r8)
   20468:	00028d50 	.word	0x00028d50
   2046c:	0000b875 	.word	0x0000b875

00020470 <__udivsi3>:
   20470:	2200      	movs	r2, #0
   20472:	0843      	lsrs	r3, r0, #1
   20474:	428b      	cmp	r3, r1
   20476:	d374      	bcc.n	20562 <__udivsi3+0xf2>
   20478:	0903      	lsrs	r3, r0, #4
   2047a:	428b      	cmp	r3, r1
   2047c:	d35f      	bcc.n	2053e <__udivsi3+0xce>
   2047e:	0a03      	lsrs	r3, r0, #8
   20480:	428b      	cmp	r3, r1
   20482:	d344      	bcc.n	2050e <__udivsi3+0x9e>
   20484:	0b03      	lsrs	r3, r0, #12
   20486:	428b      	cmp	r3, r1
   20488:	d328      	bcc.n	204dc <__udivsi3+0x6c>
   2048a:	0c03      	lsrs	r3, r0, #16
   2048c:	428b      	cmp	r3, r1
   2048e:	d30d      	bcc.n	204ac <__udivsi3+0x3c>
   20490:	22ff      	movs	r2, #255	; 0xff
   20492:	0209      	lsls	r1, r1, #8
   20494:	ba12      	rev	r2, r2
   20496:	0c03      	lsrs	r3, r0, #16
   20498:	428b      	cmp	r3, r1
   2049a:	d302      	bcc.n	204a2 <__udivsi3+0x32>
   2049c:	1212      	asrs	r2, r2, #8
   2049e:	0209      	lsls	r1, r1, #8
   204a0:	d065      	beq.n	2056e <__udivsi3+0xfe>
   204a2:	0b03      	lsrs	r3, r0, #12
   204a4:	428b      	cmp	r3, r1
   204a6:	d319      	bcc.n	204dc <__udivsi3+0x6c>
   204a8:	e000      	b.n	204ac <__udivsi3+0x3c>
   204aa:	0a09      	lsrs	r1, r1, #8
   204ac:	0bc3      	lsrs	r3, r0, #15
   204ae:	428b      	cmp	r3, r1
   204b0:	d301      	bcc.n	204b6 <__udivsi3+0x46>
   204b2:	03cb      	lsls	r3, r1, #15
   204b4:	1ac0      	subs	r0, r0, r3
   204b6:	4152      	adcs	r2, r2
   204b8:	0b83      	lsrs	r3, r0, #14
   204ba:	428b      	cmp	r3, r1
   204bc:	d301      	bcc.n	204c2 <__udivsi3+0x52>
   204be:	038b      	lsls	r3, r1, #14
   204c0:	1ac0      	subs	r0, r0, r3
   204c2:	4152      	adcs	r2, r2
   204c4:	0b43      	lsrs	r3, r0, #13
   204c6:	428b      	cmp	r3, r1
   204c8:	d301      	bcc.n	204ce <__udivsi3+0x5e>
   204ca:	034b      	lsls	r3, r1, #13
   204cc:	1ac0      	subs	r0, r0, r3
   204ce:	4152      	adcs	r2, r2
   204d0:	0b03      	lsrs	r3, r0, #12
   204d2:	428b      	cmp	r3, r1
   204d4:	d301      	bcc.n	204da <__udivsi3+0x6a>
   204d6:	030b      	lsls	r3, r1, #12
   204d8:	1ac0      	subs	r0, r0, r3
   204da:	4152      	adcs	r2, r2
   204dc:	0ac3      	lsrs	r3, r0, #11
   204de:	428b      	cmp	r3, r1
   204e0:	d301      	bcc.n	204e6 <__udivsi3+0x76>
   204e2:	02cb      	lsls	r3, r1, #11
   204e4:	1ac0      	subs	r0, r0, r3
   204e6:	4152      	adcs	r2, r2
   204e8:	0a83      	lsrs	r3, r0, #10
   204ea:	428b      	cmp	r3, r1
   204ec:	d301      	bcc.n	204f2 <__udivsi3+0x82>
   204ee:	028b      	lsls	r3, r1, #10
   204f0:	1ac0      	subs	r0, r0, r3
   204f2:	4152      	adcs	r2, r2
   204f4:	0a43      	lsrs	r3, r0, #9
   204f6:	428b      	cmp	r3, r1
   204f8:	d301      	bcc.n	204fe <__udivsi3+0x8e>
   204fa:	024b      	lsls	r3, r1, #9
   204fc:	1ac0      	subs	r0, r0, r3
   204fe:	4152      	adcs	r2, r2
   20500:	0a03      	lsrs	r3, r0, #8
   20502:	428b      	cmp	r3, r1
   20504:	d301      	bcc.n	2050a <__udivsi3+0x9a>
   20506:	020b      	lsls	r3, r1, #8
   20508:	1ac0      	subs	r0, r0, r3
   2050a:	4152      	adcs	r2, r2
   2050c:	d2cd      	bcs.n	204aa <__udivsi3+0x3a>
   2050e:	09c3      	lsrs	r3, r0, #7
   20510:	428b      	cmp	r3, r1
   20512:	d301      	bcc.n	20518 <__udivsi3+0xa8>
   20514:	01cb      	lsls	r3, r1, #7
   20516:	1ac0      	subs	r0, r0, r3
   20518:	4152      	adcs	r2, r2
   2051a:	0983      	lsrs	r3, r0, #6
   2051c:	428b      	cmp	r3, r1
   2051e:	d301      	bcc.n	20524 <__udivsi3+0xb4>
   20520:	018b      	lsls	r3, r1, #6
   20522:	1ac0      	subs	r0, r0, r3
   20524:	4152      	adcs	r2, r2
   20526:	0943      	lsrs	r3, r0, #5
   20528:	428b      	cmp	r3, r1
   2052a:	d301      	bcc.n	20530 <__udivsi3+0xc0>
   2052c:	014b      	lsls	r3, r1, #5
   2052e:	1ac0      	subs	r0, r0, r3
   20530:	4152      	adcs	r2, r2
   20532:	0903      	lsrs	r3, r0, #4
   20534:	428b      	cmp	r3, r1
   20536:	d301      	bcc.n	2053c <__udivsi3+0xcc>
   20538:	010b      	lsls	r3, r1, #4
   2053a:	1ac0      	subs	r0, r0, r3
   2053c:	4152      	adcs	r2, r2
   2053e:	08c3      	lsrs	r3, r0, #3
   20540:	428b      	cmp	r3, r1
   20542:	d301      	bcc.n	20548 <__udivsi3+0xd8>
   20544:	00cb      	lsls	r3, r1, #3
   20546:	1ac0      	subs	r0, r0, r3
   20548:	4152      	adcs	r2, r2
   2054a:	0883      	lsrs	r3, r0, #2
   2054c:	428b      	cmp	r3, r1
   2054e:	d301      	bcc.n	20554 <__udivsi3+0xe4>
   20550:	008b      	lsls	r3, r1, #2
   20552:	1ac0      	subs	r0, r0, r3
   20554:	4152      	adcs	r2, r2
   20556:	0843      	lsrs	r3, r0, #1
   20558:	428b      	cmp	r3, r1
   2055a:	d301      	bcc.n	20560 <__udivsi3+0xf0>
   2055c:	004b      	lsls	r3, r1, #1
   2055e:	1ac0      	subs	r0, r0, r3
   20560:	4152      	adcs	r2, r2
   20562:	1a41      	subs	r1, r0, r1
   20564:	d200      	bcs.n	20568 <__udivsi3+0xf8>
   20566:	4601      	mov	r1, r0
   20568:	4152      	adcs	r2, r2
   2056a:	4610      	mov	r0, r2
   2056c:	4770      	bx	lr
   2056e:	e7ff      	b.n	20570 <__udivsi3+0x100>
   20570:	b501      	push	{r0, lr}
   20572:	2000      	movs	r0, #0
   20574:	f000 f8f0 	bl	20758 <__aeabi_idiv0>
   20578:	bd02      	pop	{r1, pc}
   2057a:	46c0      	nop			; (mov r8, r8)

0002057c <__aeabi_uidivmod>:
   2057c:	2900      	cmp	r1, #0
   2057e:	d0f7      	beq.n	20570 <__udivsi3+0x100>
   20580:	e776      	b.n	20470 <__udivsi3>
   20582:	4770      	bx	lr

00020584 <__divsi3>:
   20584:	4603      	mov	r3, r0
   20586:	430b      	orrs	r3, r1
   20588:	d47f      	bmi.n	2068a <__divsi3+0x106>
   2058a:	2200      	movs	r2, #0
   2058c:	0843      	lsrs	r3, r0, #1
   2058e:	428b      	cmp	r3, r1
   20590:	d374      	bcc.n	2067c <__divsi3+0xf8>
   20592:	0903      	lsrs	r3, r0, #4
   20594:	428b      	cmp	r3, r1
   20596:	d35f      	bcc.n	20658 <__divsi3+0xd4>
   20598:	0a03      	lsrs	r3, r0, #8
   2059a:	428b      	cmp	r3, r1
   2059c:	d344      	bcc.n	20628 <__divsi3+0xa4>
   2059e:	0b03      	lsrs	r3, r0, #12
   205a0:	428b      	cmp	r3, r1
   205a2:	d328      	bcc.n	205f6 <__divsi3+0x72>
   205a4:	0c03      	lsrs	r3, r0, #16
   205a6:	428b      	cmp	r3, r1
   205a8:	d30d      	bcc.n	205c6 <__divsi3+0x42>
   205aa:	22ff      	movs	r2, #255	; 0xff
   205ac:	0209      	lsls	r1, r1, #8
   205ae:	ba12      	rev	r2, r2
   205b0:	0c03      	lsrs	r3, r0, #16
   205b2:	428b      	cmp	r3, r1
   205b4:	d302      	bcc.n	205bc <__divsi3+0x38>
   205b6:	1212      	asrs	r2, r2, #8
   205b8:	0209      	lsls	r1, r1, #8
   205ba:	d065      	beq.n	20688 <__divsi3+0x104>
   205bc:	0b03      	lsrs	r3, r0, #12
   205be:	428b      	cmp	r3, r1
   205c0:	d319      	bcc.n	205f6 <__divsi3+0x72>
   205c2:	e000      	b.n	205c6 <__divsi3+0x42>
   205c4:	0a09      	lsrs	r1, r1, #8
   205c6:	0bc3      	lsrs	r3, r0, #15
   205c8:	428b      	cmp	r3, r1
   205ca:	d301      	bcc.n	205d0 <__divsi3+0x4c>
   205cc:	03cb      	lsls	r3, r1, #15
   205ce:	1ac0      	subs	r0, r0, r3
   205d0:	4152      	adcs	r2, r2
   205d2:	0b83      	lsrs	r3, r0, #14
   205d4:	428b      	cmp	r3, r1
   205d6:	d301      	bcc.n	205dc <__divsi3+0x58>
   205d8:	038b      	lsls	r3, r1, #14
   205da:	1ac0      	subs	r0, r0, r3
   205dc:	4152      	adcs	r2, r2
   205de:	0b43      	lsrs	r3, r0, #13
   205e0:	428b      	cmp	r3, r1
   205e2:	d301      	bcc.n	205e8 <__divsi3+0x64>
   205e4:	034b      	lsls	r3, r1, #13
   205e6:	1ac0      	subs	r0, r0, r3
   205e8:	4152      	adcs	r2, r2
   205ea:	0b03      	lsrs	r3, r0, #12
   205ec:	428b      	cmp	r3, r1
   205ee:	d301      	bcc.n	205f4 <__divsi3+0x70>
   205f0:	030b      	lsls	r3, r1, #12
   205f2:	1ac0      	subs	r0, r0, r3
   205f4:	4152      	adcs	r2, r2
   205f6:	0ac3      	lsrs	r3, r0, #11
   205f8:	428b      	cmp	r3, r1
   205fa:	d301      	bcc.n	20600 <__divsi3+0x7c>
   205fc:	02cb      	lsls	r3, r1, #11
   205fe:	1ac0      	subs	r0, r0, r3
   20600:	4152      	adcs	r2, r2
   20602:	0a83      	lsrs	r3, r0, #10
   20604:	428b      	cmp	r3, r1
   20606:	d301      	bcc.n	2060c <__divsi3+0x88>
   20608:	028b      	lsls	r3, r1, #10
   2060a:	1ac0      	subs	r0, r0, r3
   2060c:	4152      	adcs	r2, r2
   2060e:	0a43      	lsrs	r3, r0, #9
   20610:	428b      	cmp	r3, r1
   20612:	d301      	bcc.n	20618 <__divsi3+0x94>
   20614:	024b      	lsls	r3, r1, #9
   20616:	1ac0      	subs	r0, r0, r3
   20618:	4152      	adcs	r2, r2
   2061a:	0a03      	lsrs	r3, r0, #8
   2061c:	428b      	cmp	r3, r1
   2061e:	d301      	bcc.n	20624 <__divsi3+0xa0>
   20620:	020b      	lsls	r3, r1, #8
   20622:	1ac0      	subs	r0, r0, r3
   20624:	4152      	adcs	r2, r2
   20626:	d2cd      	bcs.n	205c4 <__divsi3+0x40>
   20628:	09c3      	lsrs	r3, r0, #7
   2062a:	428b      	cmp	r3, r1
   2062c:	d301      	bcc.n	20632 <__divsi3+0xae>
   2062e:	01cb      	lsls	r3, r1, #7
   20630:	1ac0      	subs	r0, r0, r3
   20632:	4152      	adcs	r2, r2
   20634:	0983      	lsrs	r3, r0, #6
   20636:	428b      	cmp	r3, r1
   20638:	d301      	bcc.n	2063e <__divsi3+0xba>
   2063a:	018b      	lsls	r3, r1, #6
   2063c:	1ac0      	subs	r0, r0, r3
   2063e:	4152      	adcs	r2, r2
   20640:	0943      	lsrs	r3, r0, #5
   20642:	428b      	cmp	r3, r1
   20644:	d301      	bcc.n	2064a <__divsi3+0xc6>
   20646:	014b      	lsls	r3, r1, #5
   20648:	1ac0      	subs	r0, r0, r3
   2064a:	4152      	adcs	r2, r2
   2064c:	0903      	lsrs	r3, r0, #4
   2064e:	428b      	cmp	r3, r1
   20650:	d301      	bcc.n	20656 <__divsi3+0xd2>
   20652:	010b      	lsls	r3, r1, #4
   20654:	1ac0      	subs	r0, r0, r3
   20656:	4152      	adcs	r2, r2
   20658:	08c3      	lsrs	r3, r0, #3
   2065a:	428b      	cmp	r3, r1
   2065c:	d301      	bcc.n	20662 <__divsi3+0xde>
   2065e:	00cb      	lsls	r3, r1, #3
   20660:	1ac0      	subs	r0, r0, r3
   20662:	4152      	adcs	r2, r2
   20664:	0883      	lsrs	r3, r0, #2
   20666:	428b      	cmp	r3, r1
   20668:	d301      	bcc.n	2066e <__divsi3+0xea>
   2066a:	008b      	lsls	r3, r1, #2
   2066c:	1ac0      	subs	r0, r0, r3
   2066e:	4152      	adcs	r2, r2
   20670:	0843      	lsrs	r3, r0, #1
   20672:	428b      	cmp	r3, r1
   20674:	d301      	bcc.n	2067a <__divsi3+0xf6>
   20676:	004b      	lsls	r3, r1, #1
   20678:	1ac0      	subs	r0, r0, r3
   2067a:	4152      	adcs	r2, r2
   2067c:	1a41      	subs	r1, r0, r1
   2067e:	d200      	bcs.n	20682 <__divsi3+0xfe>
   20680:	4601      	mov	r1, r0
   20682:	4152      	adcs	r2, r2
   20684:	4610      	mov	r0, r2
   20686:	4770      	bx	lr
   20688:	e05d      	b.n	20746 <__divsi3+0x1c2>
   2068a:	0fca      	lsrs	r2, r1, #31
   2068c:	d000      	beq.n	20690 <__divsi3+0x10c>
   2068e:	4249      	negs	r1, r1
   20690:	1003      	asrs	r3, r0, #32
   20692:	d300      	bcc.n	20696 <__divsi3+0x112>
   20694:	4240      	negs	r0, r0
   20696:	4053      	eors	r3, r2
   20698:	2200      	movs	r2, #0
   2069a:	469c      	mov	ip, r3
   2069c:	0903      	lsrs	r3, r0, #4
   2069e:	428b      	cmp	r3, r1
   206a0:	d32d      	bcc.n	206fe <__divsi3+0x17a>
   206a2:	0a03      	lsrs	r3, r0, #8
   206a4:	428b      	cmp	r3, r1
   206a6:	d312      	bcc.n	206ce <__divsi3+0x14a>
   206a8:	22fc      	movs	r2, #252	; 0xfc
   206aa:	0189      	lsls	r1, r1, #6
   206ac:	ba12      	rev	r2, r2
   206ae:	0a03      	lsrs	r3, r0, #8
   206b0:	428b      	cmp	r3, r1
   206b2:	d30c      	bcc.n	206ce <__divsi3+0x14a>
   206b4:	0189      	lsls	r1, r1, #6
   206b6:	1192      	asrs	r2, r2, #6
   206b8:	428b      	cmp	r3, r1
   206ba:	d308      	bcc.n	206ce <__divsi3+0x14a>
   206bc:	0189      	lsls	r1, r1, #6
   206be:	1192      	asrs	r2, r2, #6
   206c0:	428b      	cmp	r3, r1
   206c2:	d304      	bcc.n	206ce <__divsi3+0x14a>
   206c4:	0189      	lsls	r1, r1, #6
   206c6:	d03a      	beq.n	2073e <__divsi3+0x1ba>
   206c8:	1192      	asrs	r2, r2, #6
   206ca:	e000      	b.n	206ce <__divsi3+0x14a>
   206cc:	0989      	lsrs	r1, r1, #6
   206ce:	09c3      	lsrs	r3, r0, #7
   206d0:	428b      	cmp	r3, r1
   206d2:	d301      	bcc.n	206d8 <__divsi3+0x154>
   206d4:	01cb      	lsls	r3, r1, #7
   206d6:	1ac0      	subs	r0, r0, r3
   206d8:	4152      	adcs	r2, r2
   206da:	0983      	lsrs	r3, r0, #6
   206dc:	428b      	cmp	r3, r1
   206de:	d301      	bcc.n	206e4 <__divsi3+0x160>
   206e0:	018b      	lsls	r3, r1, #6
   206e2:	1ac0      	subs	r0, r0, r3
   206e4:	4152      	adcs	r2, r2
   206e6:	0943      	lsrs	r3, r0, #5
   206e8:	428b      	cmp	r3, r1
   206ea:	d301      	bcc.n	206f0 <__divsi3+0x16c>
   206ec:	014b      	lsls	r3, r1, #5
   206ee:	1ac0      	subs	r0, r0, r3
   206f0:	4152      	adcs	r2, r2
   206f2:	0903      	lsrs	r3, r0, #4
   206f4:	428b      	cmp	r3, r1
   206f6:	d301      	bcc.n	206fc <__divsi3+0x178>
   206f8:	010b      	lsls	r3, r1, #4
   206fa:	1ac0      	subs	r0, r0, r3
   206fc:	4152      	adcs	r2, r2
   206fe:	08c3      	lsrs	r3, r0, #3
   20700:	428b      	cmp	r3, r1
   20702:	d301      	bcc.n	20708 <__divsi3+0x184>
   20704:	00cb      	lsls	r3, r1, #3
   20706:	1ac0      	subs	r0, r0, r3
   20708:	4152      	adcs	r2, r2
   2070a:	0883      	lsrs	r3, r0, #2
   2070c:	428b      	cmp	r3, r1
   2070e:	d301      	bcc.n	20714 <__divsi3+0x190>
   20710:	008b      	lsls	r3, r1, #2
   20712:	1ac0      	subs	r0, r0, r3
   20714:	4152      	adcs	r2, r2
   20716:	d2d9      	bcs.n	206cc <__divsi3+0x148>
   20718:	0843      	lsrs	r3, r0, #1
   2071a:	428b      	cmp	r3, r1
   2071c:	d301      	bcc.n	20722 <__divsi3+0x19e>
   2071e:	004b      	lsls	r3, r1, #1
   20720:	1ac0      	subs	r0, r0, r3
   20722:	4152      	adcs	r2, r2
   20724:	1a41      	subs	r1, r0, r1
   20726:	d200      	bcs.n	2072a <__divsi3+0x1a6>
   20728:	4601      	mov	r1, r0
   2072a:	4663      	mov	r3, ip
   2072c:	4152      	adcs	r2, r2
   2072e:	105b      	asrs	r3, r3, #1
   20730:	4610      	mov	r0, r2
   20732:	d301      	bcc.n	20738 <__divsi3+0x1b4>
   20734:	4240      	negs	r0, r0
   20736:	2b00      	cmp	r3, #0
   20738:	d500      	bpl.n	2073c <__divsi3+0x1b8>
   2073a:	4249      	negs	r1, r1
   2073c:	4770      	bx	lr
   2073e:	4663      	mov	r3, ip
   20740:	105b      	asrs	r3, r3, #1
   20742:	d300      	bcc.n	20746 <__divsi3+0x1c2>
   20744:	4240      	negs	r0, r0
   20746:	b501      	push	{r0, lr}
   20748:	2000      	movs	r0, #0
   2074a:	f000 f805 	bl	20758 <__aeabi_idiv0>
   2074e:	bd02      	pop	{r1, pc}

00020750 <__aeabi_idivmod>:
   20750:	2900      	cmp	r1, #0
   20752:	d0f8      	beq.n	20746 <__divsi3+0x1c2>
   20754:	e716      	b.n	20584 <__divsi3>
   20756:	4770      	bx	lr

00020758 <__aeabi_idiv0>:
   20758:	4770      	bx	lr
   2075a:	46c0      	nop			; (mov r8, r8)

0002075c <__aeabi_lmul>:
   2075c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2075e:	46ce      	mov	lr, r9
   20760:	4647      	mov	r7, r8
   20762:	0415      	lsls	r5, r2, #16
   20764:	0c2d      	lsrs	r5, r5, #16
   20766:	002e      	movs	r6, r5
   20768:	b580      	push	{r7, lr}
   2076a:	0407      	lsls	r7, r0, #16
   2076c:	0c14      	lsrs	r4, r2, #16
   2076e:	0c3f      	lsrs	r7, r7, #16
   20770:	4699      	mov	r9, r3
   20772:	0c03      	lsrs	r3, r0, #16
   20774:	437e      	muls	r6, r7
   20776:	435d      	muls	r5, r3
   20778:	4367      	muls	r7, r4
   2077a:	4363      	muls	r3, r4
   2077c:	197f      	adds	r7, r7, r5
   2077e:	0c34      	lsrs	r4, r6, #16
   20780:	19e4      	adds	r4, r4, r7
   20782:	469c      	mov	ip, r3
   20784:	42a5      	cmp	r5, r4
   20786:	d903      	bls.n	20790 <__aeabi_lmul+0x34>
   20788:	2380      	movs	r3, #128	; 0x80
   2078a:	025b      	lsls	r3, r3, #9
   2078c:	4698      	mov	r8, r3
   2078e:	44c4      	add	ip, r8
   20790:	464b      	mov	r3, r9
   20792:	4351      	muls	r1, r2
   20794:	4343      	muls	r3, r0
   20796:	0436      	lsls	r6, r6, #16
   20798:	0c36      	lsrs	r6, r6, #16
   2079a:	0c25      	lsrs	r5, r4, #16
   2079c:	0424      	lsls	r4, r4, #16
   2079e:	4465      	add	r5, ip
   207a0:	19a4      	adds	r4, r4, r6
   207a2:	1859      	adds	r1, r3, r1
   207a4:	1949      	adds	r1, r1, r5
   207a6:	0020      	movs	r0, r4
   207a8:	bc0c      	pop	{r2, r3}
   207aa:	4690      	mov	r8, r2
   207ac:	4699      	mov	r9, r3
   207ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000207b0 <__aeabi_fadd>:
   207b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   207b2:	46c6      	mov	lr, r8
   207b4:	024e      	lsls	r6, r1, #9
   207b6:	0247      	lsls	r7, r0, #9
   207b8:	0a76      	lsrs	r6, r6, #9
   207ba:	0a7b      	lsrs	r3, r7, #9
   207bc:	0044      	lsls	r4, r0, #1
   207be:	0fc5      	lsrs	r5, r0, #31
   207c0:	00f7      	lsls	r7, r6, #3
   207c2:	0048      	lsls	r0, r1, #1
   207c4:	4698      	mov	r8, r3
   207c6:	b500      	push	{lr}
   207c8:	0e24      	lsrs	r4, r4, #24
   207ca:	002a      	movs	r2, r5
   207cc:	00db      	lsls	r3, r3, #3
   207ce:	0e00      	lsrs	r0, r0, #24
   207d0:	0fc9      	lsrs	r1, r1, #31
   207d2:	46bc      	mov	ip, r7
   207d4:	428d      	cmp	r5, r1
   207d6:	d067      	beq.n	208a8 <__aeabi_fadd+0xf8>
   207d8:	1a22      	subs	r2, r4, r0
   207da:	2a00      	cmp	r2, #0
   207dc:	dc00      	bgt.n	207e0 <__aeabi_fadd+0x30>
   207de:	e0a5      	b.n	2092c <__aeabi_fadd+0x17c>
   207e0:	2800      	cmp	r0, #0
   207e2:	d13a      	bne.n	2085a <__aeabi_fadd+0xaa>
   207e4:	2f00      	cmp	r7, #0
   207e6:	d100      	bne.n	207ea <__aeabi_fadd+0x3a>
   207e8:	e093      	b.n	20912 <__aeabi_fadd+0x162>
   207ea:	1e51      	subs	r1, r2, #1
   207ec:	2900      	cmp	r1, #0
   207ee:	d000      	beq.n	207f2 <__aeabi_fadd+0x42>
   207f0:	e0bc      	b.n	2096c <__aeabi_fadd+0x1bc>
   207f2:	2401      	movs	r4, #1
   207f4:	1bdb      	subs	r3, r3, r7
   207f6:	015a      	lsls	r2, r3, #5
   207f8:	d546      	bpl.n	20888 <__aeabi_fadd+0xd8>
   207fa:	019b      	lsls	r3, r3, #6
   207fc:	099e      	lsrs	r6, r3, #6
   207fe:	0030      	movs	r0, r6
   20800:	f002 fa64 	bl	22ccc <__clzsi2>
   20804:	3805      	subs	r0, #5
   20806:	4086      	lsls	r6, r0
   20808:	4284      	cmp	r4, r0
   2080a:	dd00      	ble.n	2080e <__aeabi_fadd+0x5e>
   2080c:	e09d      	b.n	2094a <__aeabi_fadd+0x19a>
   2080e:	1b04      	subs	r4, r0, r4
   20810:	0032      	movs	r2, r6
   20812:	2020      	movs	r0, #32
   20814:	3401      	adds	r4, #1
   20816:	40e2      	lsrs	r2, r4
   20818:	1b04      	subs	r4, r0, r4
   2081a:	40a6      	lsls	r6, r4
   2081c:	0033      	movs	r3, r6
   2081e:	1e5e      	subs	r6, r3, #1
   20820:	41b3      	sbcs	r3, r6
   20822:	2400      	movs	r4, #0
   20824:	4313      	orrs	r3, r2
   20826:	075a      	lsls	r2, r3, #29
   20828:	d004      	beq.n	20834 <__aeabi_fadd+0x84>
   2082a:	220f      	movs	r2, #15
   2082c:	401a      	ands	r2, r3
   2082e:	2a04      	cmp	r2, #4
   20830:	d000      	beq.n	20834 <__aeabi_fadd+0x84>
   20832:	3304      	adds	r3, #4
   20834:	015a      	lsls	r2, r3, #5
   20836:	d529      	bpl.n	2088c <__aeabi_fadd+0xdc>
   20838:	3401      	adds	r4, #1
   2083a:	2cff      	cmp	r4, #255	; 0xff
   2083c:	d100      	bne.n	20840 <__aeabi_fadd+0x90>
   2083e:	e081      	b.n	20944 <__aeabi_fadd+0x194>
   20840:	002a      	movs	r2, r5
   20842:	019b      	lsls	r3, r3, #6
   20844:	0a5b      	lsrs	r3, r3, #9
   20846:	b2e4      	uxtb	r4, r4
   20848:	025b      	lsls	r3, r3, #9
   2084a:	05e4      	lsls	r4, r4, #23
   2084c:	0a58      	lsrs	r0, r3, #9
   2084e:	07d2      	lsls	r2, r2, #31
   20850:	4320      	orrs	r0, r4
   20852:	4310      	orrs	r0, r2
   20854:	bc04      	pop	{r2}
   20856:	4690      	mov	r8, r2
   20858:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2085a:	2cff      	cmp	r4, #255	; 0xff
   2085c:	d0e3      	beq.n	20826 <__aeabi_fadd+0x76>
   2085e:	2180      	movs	r1, #128	; 0x80
   20860:	0038      	movs	r0, r7
   20862:	04c9      	lsls	r1, r1, #19
   20864:	4308      	orrs	r0, r1
   20866:	4684      	mov	ip, r0
   20868:	2a1b      	cmp	r2, #27
   2086a:	dd00      	ble.n	2086e <__aeabi_fadd+0xbe>
   2086c:	e082      	b.n	20974 <__aeabi_fadd+0x1c4>
   2086e:	2020      	movs	r0, #32
   20870:	4661      	mov	r1, ip
   20872:	40d1      	lsrs	r1, r2
   20874:	1a82      	subs	r2, r0, r2
   20876:	4660      	mov	r0, ip
   20878:	4090      	lsls	r0, r2
   2087a:	0002      	movs	r2, r0
   2087c:	1e50      	subs	r0, r2, #1
   2087e:	4182      	sbcs	r2, r0
   20880:	430a      	orrs	r2, r1
   20882:	1a9b      	subs	r3, r3, r2
   20884:	015a      	lsls	r2, r3, #5
   20886:	d4b8      	bmi.n	207fa <__aeabi_fadd+0x4a>
   20888:	075a      	lsls	r2, r3, #29
   2088a:	d1ce      	bne.n	2082a <__aeabi_fadd+0x7a>
   2088c:	08de      	lsrs	r6, r3, #3
   2088e:	002a      	movs	r2, r5
   20890:	2cff      	cmp	r4, #255	; 0xff
   20892:	d13a      	bne.n	2090a <__aeabi_fadd+0x15a>
   20894:	2e00      	cmp	r6, #0
   20896:	d100      	bne.n	2089a <__aeabi_fadd+0xea>
   20898:	e0ae      	b.n	209f8 <__aeabi_fadd+0x248>
   2089a:	2380      	movs	r3, #128	; 0x80
   2089c:	03db      	lsls	r3, r3, #15
   2089e:	4333      	orrs	r3, r6
   208a0:	025b      	lsls	r3, r3, #9
   208a2:	0a5b      	lsrs	r3, r3, #9
   208a4:	24ff      	movs	r4, #255	; 0xff
   208a6:	e7cf      	b.n	20848 <__aeabi_fadd+0x98>
   208a8:	1a21      	subs	r1, r4, r0
   208aa:	2900      	cmp	r1, #0
   208ac:	dd52      	ble.n	20954 <__aeabi_fadd+0x1a4>
   208ae:	2800      	cmp	r0, #0
   208b0:	d031      	beq.n	20916 <__aeabi_fadd+0x166>
   208b2:	2cff      	cmp	r4, #255	; 0xff
   208b4:	d0b7      	beq.n	20826 <__aeabi_fadd+0x76>
   208b6:	2080      	movs	r0, #128	; 0x80
   208b8:	003e      	movs	r6, r7
   208ba:	04c0      	lsls	r0, r0, #19
   208bc:	4306      	orrs	r6, r0
   208be:	46b4      	mov	ip, r6
   208c0:	291b      	cmp	r1, #27
   208c2:	dd00      	ble.n	208c6 <__aeabi_fadd+0x116>
   208c4:	e0aa      	b.n	20a1c <__aeabi_fadd+0x26c>
   208c6:	2620      	movs	r6, #32
   208c8:	4660      	mov	r0, ip
   208ca:	40c8      	lsrs	r0, r1
   208cc:	1a71      	subs	r1, r6, r1
   208ce:	4666      	mov	r6, ip
   208d0:	408e      	lsls	r6, r1
   208d2:	0031      	movs	r1, r6
   208d4:	1e4e      	subs	r6, r1, #1
   208d6:	41b1      	sbcs	r1, r6
   208d8:	4301      	orrs	r1, r0
   208da:	185b      	adds	r3, r3, r1
   208dc:	0159      	lsls	r1, r3, #5
   208de:	d5d3      	bpl.n	20888 <__aeabi_fadd+0xd8>
   208e0:	3401      	adds	r4, #1
   208e2:	2cff      	cmp	r4, #255	; 0xff
   208e4:	d100      	bne.n	208e8 <__aeabi_fadd+0x138>
   208e6:	e087      	b.n	209f8 <__aeabi_fadd+0x248>
   208e8:	2201      	movs	r2, #1
   208ea:	4978      	ldr	r1, [pc, #480]	; (20acc <__aeabi_fadd+0x31c>)
   208ec:	401a      	ands	r2, r3
   208ee:	085b      	lsrs	r3, r3, #1
   208f0:	400b      	ands	r3, r1
   208f2:	4313      	orrs	r3, r2
   208f4:	e797      	b.n	20826 <__aeabi_fadd+0x76>
   208f6:	2c00      	cmp	r4, #0
   208f8:	d000      	beq.n	208fc <__aeabi_fadd+0x14c>
   208fa:	e0a7      	b.n	20a4c <__aeabi_fadd+0x29c>
   208fc:	2b00      	cmp	r3, #0
   208fe:	d000      	beq.n	20902 <__aeabi_fadd+0x152>
   20900:	e0b6      	b.n	20a70 <__aeabi_fadd+0x2c0>
   20902:	1e3b      	subs	r3, r7, #0
   20904:	d162      	bne.n	209cc <__aeabi_fadd+0x21c>
   20906:	2600      	movs	r6, #0
   20908:	2200      	movs	r2, #0
   2090a:	0273      	lsls	r3, r6, #9
   2090c:	0a5b      	lsrs	r3, r3, #9
   2090e:	b2e4      	uxtb	r4, r4
   20910:	e79a      	b.n	20848 <__aeabi_fadd+0x98>
   20912:	0014      	movs	r4, r2
   20914:	e787      	b.n	20826 <__aeabi_fadd+0x76>
   20916:	2f00      	cmp	r7, #0
   20918:	d04d      	beq.n	209b6 <__aeabi_fadd+0x206>
   2091a:	1e48      	subs	r0, r1, #1
   2091c:	2800      	cmp	r0, #0
   2091e:	d157      	bne.n	209d0 <__aeabi_fadd+0x220>
   20920:	4463      	add	r3, ip
   20922:	2401      	movs	r4, #1
   20924:	015a      	lsls	r2, r3, #5
   20926:	d5af      	bpl.n	20888 <__aeabi_fadd+0xd8>
   20928:	2402      	movs	r4, #2
   2092a:	e7dd      	b.n	208e8 <__aeabi_fadd+0x138>
   2092c:	2a00      	cmp	r2, #0
   2092e:	d124      	bne.n	2097a <__aeabi_fadd+0x1ca>
   20930:	1c62      	adds	r2, r4, #1
   20932:	b2d2      	uxtb	r2, r2
   20934:	2a01      	cmp	r2, #1
   20936:	ddde      	ble.n	208f6 <__aeabi_fadd+0x146>
   20938:	1bde      	subs	r6, r3, r7
   2093a:	0172      	lsls	r2, r6, #5
   2093c:	d535      	bpl.n	209aa <__aeabi_fadd+0x1fa>
   2093e:	1afe      	subs	r6, r7, r3
   20940:	000d      	movs	r5, r1
   20942:	e75c      	b.n	207fe <__aeabi_fadd+0x4e>
   20944:	002a      	movs	r2, r5
   20946:	2300      	movs	r3, #0
   20948:	e77e      	b.n	20848 <__aeabi_fadd+0x98>
   2094a:	0033      	movs	r3, r6
   2094c:	4a60      	ldr	r2, [pc, #384]	; (20ad0 <__aeabi_fadd+0x320>)
   2094e:	1a24      	subs	r4, r4, r0
   20950:	4013      	ands	r3, r2
   20952:	e768      	b.n	20826 <__aeabi_fadd+0x76>
   20954:	2900      	cmp	r1, #0
   20956:	d163      	bne.n	20a20 <__aeabi_fadd+0x270>
   20958:	1c61      	adds	r1, r4, #1
   2095a:	b2c8      	uxtb	r0, r1
   2095c:	2801      	cmp	r0, #1
   2095e:	dd4e      	ble.n	209fe <__aeabi_fadd+0x24e>
   20960:	29ff      	cmp	r1, #255	; 0xff
   20962:	d049      	beq.n	209f8 <__aeabi_fadd+0x248>
   20964:	4463      	add	r3, ip
   20966:	085b      	lsrs	r3, r3, #1
   20968:	000c      	movs	r4, r1
   2096a:	e75c      	b.n	20826 <__aeabi_fadd+0x76>
   2096c:	2aff      	cmp	r2, #255	; 0xff
   2096e:	d041      	beq.n	209f4 <__aeabi_fadd+0x244>
   20970:	000a      	movs	r2, r1
   20972:	e779      	b.n	20868 <__aeabi_fadd+0xb8>
   20974:	2201      	movs	r2, #1
   20976:	1a9b      	subs	r3, r3, r2
   20978:	e784      	b.n	20884 <__aeabi_fadd+0xd4>
   2097a:	2c00      	cmp	r4, #0
   2097c:	d01d      	beq.n	209ba <__aeabi_fadd+0x20a>
   2097e:	28ff      	cmp	r0, #255	; 0xff
   20980:	d022      	beq.n	209c8 <__aeabi_fadd+0x218>
   20982:	2480      	movs	r4, #128	; 0x80
   20984:	04e4      	lsls	r4, r4, #19
   20986:	4252      	negs	r2, r2
   20988:	4323      	orrs	r3, r4
   2098a:	2a1b      	cmp	r2, #27
   2098c:	dd00      	ble.n	20990 <__aeabi_fadd+0x1e0>
   2098e:	e08a      	b.n	20aa6 <__aeabi_fadd+0x2f6>
   20990:	001c      	movs	r4, r3
   20992:	2520      	movs	r5, #32
   20994:	40d4      	lsrs	r4, r2
   20996:	1aaa      	subs	r2, r5, r2
   20998:	4093      	lsls	r3, r2
   2099a:	1e5a      	subs	r2, r3, #1
   2099c:	4193      	sbcs	r3, r2
   2099e:	4323      	orrs	r3, r4
   209a0:	4662      	mov	r2, ip
   209a2:	0004      	movs	r4, r0
   209a4:	1ad3      	subs	r3, r2, r3
   209a6:	000d      	movs	r5, r1
   209a8:	e725      	b.n	207f6 <__aeabi_fadd+0x46>
   209aa:	2e00      	cmp	r6, #0
   209ac:	d000      	beq.n	209b0 <__aeabi_fadd+0x200>
   209ae:	e726      	b.n	207fe <__aeabi_fadd+0x4e>
   209b0:	2200      	movs	r2, #0
   209b2:	2400      	movs	r4, #0
   209b4:	e7a9      	b.n	2090a <__aeabi_fadd+0x15a>
   209b6:	000c      	movs	r4, r1
   209b8:	e735      	b.n	20826 <__aeabi_fadd+0x76>
   209ba:	2b00      	cmp	r3, #0
   209bc:	d04d      	beq.n	20a5a <__aeabi_fadd+0x2aa>
   209be:	43d2      	mvns	r2, r2
   209c0:	2a00      	cmp	r2, #0
   209c2:	d0ed      	beq.n	209a0 <__aeabi_fadd+0x1f0>
   209c4:	28ff      	cmp	r0, #255	; 0xff
   209c6:	d1e0      	bne.n	2098a <__aeabi_fadd+0x1da>
   209c8:	4663      	mov	r3, ip
   209ca:	24ff      	movs	r4, #255	; 0xff
   209cc:	000d      	movs	r5, r1
   209ce:	e72a      	b.n	20826 <__aeabi_fadd+0x76>
   209d0:	29ff      	cmp	r1, #255	; 0xff
   209d2:	d00f      	beq.n	209f4 <__aeabi_fadd+0x244>
   209d4:	0001      	movs	r1, r0
   209d6:	e773      	b.n	208c0 <__aeabi_fadd+0x110>
   209d8:	2b00      	cmp	r3, #0
   209da:	d061      	beq.n	20aa0 <__aeabi_fadd+0x2f0>
   209dc:	24ff      	movs	r4, #255	; 0xff
   209de:	2f00      	cmp	r7, #0
   209e0:	d100      	bne.n	209e4 <__aeabi_fadd+0x234>
   209e2:	e720      	b.n	20826 <__aeabi_fadd+0x76>
   209e4:	2280      	movs	r2, #128	; 0x80
   209e6:	4641      	mov	r1, r8
   209e8:	03d2      	lsls	r2, r2, #15
   209ea:	4211      	tst	r1, r2
   209ec:	d002      	beq.n	209f4 <__aeabi_fadd+0x244>
   209ee:	4216      	tst	r6, r2
   209f0:	d100      	bne.n	209f4 <__aeabi_fadd+0x244>
   209f2:	003b      	movs	r3, r7
   209f4:	24ff      	movs	r4, #255	; 0xff
   209f6:	e716      	b.n	20826 <__aeabi_fadd+0x76>
   209f8:	24ff      	movs	r4, #255	; 0xff
   209fa:	2300      	movs	r3, #0
   209fc:	e724      	b.n	20848 <__aeabi_fadd+0x98>
   209fe:	2c00      	cmp	r4, #0
   20a00:	d1ea      	bne.n	209d8 <__aeabi_fadd+0x228>
   20a02:	2b00      	cmp	r3, #0
   20a04:	d058      	beq.n	20ab8 <__aeabi_fadd+0x308>
   20a06:	2f00      	cmp	r7, #0
   20a08:	d100      	bne.n	20a0c <__aeabi_fadd+0x25c>
   20a0a:	e70c      	b.n	20826 <__aeabi_fadd+0x76>
   20a0c:	4463      	add	r3, ip
   20a0e:	015a      	lsls	r2, r3, #5
   20a10:	d400      	bmi.n	20a14 <__aeabi_fadd+0x264>
   20a12:	e739      	b.n	20888 <__aeabi_fadd+0xd8>
   20a14:	4a2e      	ldr	r2, [pc, #184]	; (20ad0 <__aeabi_fadd+0x320>)
   20a16:	000c      	movs	r4, r1
   20a18:	4013      	ands	r3, r2
   20a1a:	e704      	b.n	20826 <__aeabi_fadd+0x76>
   20a1c:	2101      	movs	r1, #1
   20a1e:	e75c      	b.n	208da <__aeabi_fadd+0x12a>
   20a20:	2c00      	cmp	r4, #0
   20a22:	d11e      	bne.n	20a62 <__aeabi_fadd+0x2b2>
   20a24:	2b00      	cmp	r3, #0
   20a26:	d040      	beq.n	20aaa <__aeabi_fadd+0x2fa>
   20a28:	43c9      	mvns	r1, r1
   20a2a:	2900      	cmp	r1, #0
   20a2c:	d00b      	beq.n	20a46 <__aeabi_fadd+0x296>
   20a2e:	28ff      	cmp	r0, #255	; 0xff
   20a30:	d036      	beq.n	20aa0 <__aeabi_fadd+0x2f0>
   20a32:	291b      	cmp	r1, #27
   20a34:	dc47      	bgt.n	20ac6 <__aeabi_fadd+0x316>
   20a36:	001c      	movs	r4, r3
   20a38:	2620      	movs	r6, #32
   20a3a:	40cc      	lsrs	r4, r1
   20a3c:	1a71      	subs	r1, r6, r1
   20a3e:	408b      	lsls	r3, r1
   20a40:	1e59      	subs	r1, r3, #1
   20a42:	418b      	sbcs	r3, r1
   20a44:	4323      	orrs	r3, r4
   20a46:	4463      	add	r3, ip
   20a48:	0004      	movs	r4, r0
   20a4a:	e747      	b.n	208dc <__aeabi_fadd+0x12c>
   20a4c:	2b00      	cmp	r3, #0
   20a4e:	d118      	bne.n	20a82 <__aeabi_fadd+0x2d2>
   20a50:	1e3b      	subs	r3, r7, #0
   20a52:	d02d      	beq.n	20ab0 <__aeabi_fadd+0x300>
   20a54:	000d      	movs	r5, r1
   20a56:	24ff      	movs	r4, #255	; 0xff
   20a58:	e6e5      	b.n	20826 <__aeabi_fadd+0x76>
   20a5a:	003b      	movs	r3, r7
   20a5c:	0004      	movs	r4, r0
   20a5e:	000d      	movs	r5, r1
   20a60:	e6e1      	b.n	20826 <__aeabi_fadd+0x76>
   20a62:	28ff      	cmp	r0, #255	; 0xff
   20a64:	d01c      	beq.n	20aa0 <__aeabi_fadd+0x2f0>
   20a66:	2480      	movs	r4, #128	; 0x80
   20a68:	04e4      	lsls	r4, r4, #19
   20a6a:	4249      	negs	r1, r1
   20a6c:	4323      	orrs	r3, r4
   20a6e:	e7e0      	b.n	20a32 <__aeabi_fadd+0x282>
   20a70:	2f00      	cmp	r7, #0
   20a72:	d100      	bne.n	20a76 <__aeabi_fadd+0x2c6>
   20a74:	e6d7      	b.n	20826 <__aeabi_fadd+0x76>
   20a76:	1bde      	subs	r6, r3, r7
   20a78:	0172      	lsls	r2, r6, #5
   20a7a:	d51f      	bpl.n	20abc <__aeabi_fadd+0x30c>
   20a7c:	1afb      	subs	r3, r7, r3
   20a7e:	000d      	movs	r5, r1
   20a80:	e6d1      	b.n	20826 <__aeabi_fadd+0x76>
   20a82:	24ff      	movs	r4, #255	; 0xff
   20a84:	2f00      	cmp	r7, #0
   20a86:	d100      	bne.n	20a8a <__aeabi_fadd+0x2da>
   20a88:	e6cd      	b.n	20826 <__aeabi_fadd+0x76>
   20a8a:	2280      	movs	r2, #128	; 0x80
   20a8c:	4640      	mov	r0, r8
   20a8e:	03d2      	lsls	r2, r2, #15
   20a90:	4210      	tst	r0, r2
   20a92:	d0af      	beq.n	209f4 <__aeabi_fadd+0x244>
   20a94:	4216      	tst	r6, r2
   20a96:	d1ad      	bne.n	209f4 <__aeabi_fadd+0x244>
   20a98:	003b      	movs	r3, r7
   20a9a:	000d      	movs	r5, r1
   20a9c:	24ff      	movs	r4, #255	; 0xff
   20a9e:	e6c2      	b.n	20826 <__aeabi_fadd+0x76>
   20aa0:	4663      	mov	r3, ip
   20aa2:	24ff      	movs	r4, #255	; 0xff
   20aa4:	e6bf      	b.n	20826 <__aeabi_fadd+0x76>
   20aa6:	2301      	movs	r3, #1
   20aa8:	e77a      	b.n	209a0 <__aeabi_fadd+0x1f0>
   20aaa:	003b      	movs	r3, r7
   20aac:	0004      	movs	r4, r0
   20aae:	e6ba      	b.n	20826 <__aeabi_fadd+0x76>
   20ab0:	2680      	movs	r6, #128	; 0x80
   20ab2:	2200      	movs	r2, #0
   20ab4:	03f6      	lsls	r6, r6, #15
   20ab6:	e6f0      	b.n	2089a <__aeabi_fadd+0xea>
   20ab8:	003b      	movs	r3, r7
   20aba:	e6b4      	b.n	20826 <__aeabi_fadd+0x76>
   20abc:	1e33      	subs	r3, r6, #0
   20abe:	d000      	beq.n	20ac2 <__aeabi_fadd+0x312>
   20ac0:	e6e2      	b.n	20888 <__aeabi_fadd+0xd8>
   20ac2:	2200      	movs	r2, #0
   20ac4:	e721      	b.n	2090a <__aeabi_fadd+0x15a>
   20ac6:	2301      	movs	r3, #1
   20ac8:	e7bd      	b.n	20a46 <__aeabi_fadd+0x296>
   20aca:	46c0      	nop			; (mov r8, r8)
   20acc:	7dffffff 	.word	0x7dffffff
   20ad0:	fbffffff 	.word	0xfbffffff

00020ad4 <__aeabi_fdiv>:
   20ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ad6:	4657      	mov	r7, sl
   20ad8:	464e      	mov	r6, r9
   20ada:	46de      	mov	lr, fp
   20adc:	4645      	mov	r5, r8
   20ade:	b5e0      	push	{r5, r6, r7, lr}
   20ae0:	0244      	lsls	r4, r0, #9
   20ae2:	0043      	lsls	r3, r0, #1
   20ae4:	0fc6      	lsrs	r6, r0, #31
   20ae6:	b083      	sub	sp, #12
   20ae8:	1c0f      	adds	r7, r1, #0
   20aea:	0a64      	lsrs	r4, r4, #9
   20aec:	0e1b      	lsrs	r3, r3, #24
   20aee:	46b2      	mov	sl, r6
   20af0:	d053      	beq.n	20b9a <__aeabi_fdiv+0xc6>
   20af2:	2bff      	cmp	r3, #255	; 0xff
   20af4:	d027      	beq.n	20b46 <__aeabi_fdiv+0x72>
   20af6:	2280      	movs	r2, #128	; 0x80
   20af8:	00e4      	lsls	r4, r4, #3
   20afa:	04d2      	lsls	r2, r2, #19
   20afc:	4314      	orrs	r4, r2
   20afe:	227f      	movs	r2, #127	; 0x7f
   20b00:	4252      	negs	r2, r2
   20b02:	4690      	mov	r8, r2
   20b04:	4498      	add	r8, r3
   20b06:	2300      	movs	r3, #0
   20b08:	4699      	mov	r9, r3
   20b0a:	469b      	mov	fp, r3
   20b0c:	027d      	lsls	r5, r7, #9
   20b0e:	0078      	lsls	r0, r7, #1
   20b10:	0ffb      	lsrs	r3, r7, #31
   20b12:	0a6d      	lsrs	r5, r5, #9
   20b14:	0e00      	lsrs	r0, r0, #24
   20b16:	9300      	str	r3, [sp, #0]
   20b18:	d024      	beq.n	20b64 <__aeabi_fdiv+0x90>
   20b1a:	28ff      	cmp	r0, #255	; 0xff
   20b1c:	d046      	beq.n	20bac <__aeabi_fdiv+0xd8>
   20b1e:	2380      	movs	r3, #128	; 0x80
   20b20:	2100      	movs	r1, #0
   20b22:	00ed      	lsls	r5, r5, #3
   20b24:	04db      	lsls	r3, r3, #19
   20b26:	431d      	orrs	r5, r3
   20b28:	387f      	subs	r0, #127	; 0x7f
   20b2a:	4647      	mov	r7, r8
   20b2c:	1a38      	subs	r0, r7, r0
   20b2e:	464f      	mov	r7, r9
   20b30:	430f      	orrs	r7, r1
   20b32:	00bf      	lsls	r7, r7, #2
   20b34:	46b9      	mov	r9, r7
   20b36:	0033      	movs	r3, r6
   20b38:	9a00      	ldr	r2, [sp, #0]
   20b3a:	4f87      	ldr	r7, [pc, #540]	; (20d58 <__aeabi_fdiv+0x284>)
   20b3c:	4053      	eors	r3, r2
   20b3e:	464a      	mov	r2, r9
   20b40:	58ba      	ldr	r2, [r7, r2]
   20b42:	9301      	str	r3, [sp, #4]
   20b44:	4697      	mov	pc, r2
   20b46:	2c00      	cmp	r4, #0
   20b48:	d14e      	bne.n	20be8 <__aeabi_fdiv+0x114>
   20b4a:	2308      	movs	r3, #8
   20b4c:	4699      	mov	r9, r3
   20b4e:	33f7      	adds	r3, #247	; 0xf7
   20b50:	4698      	mov	r8, r3
   20b52:	3bfd      	subs	r3, #253	; 0xfd
   20b54:	469b      	mov	fp, r3
   20b56:	027d      	lsls	r5, r7, #9
   20b58:	0078      	lsls	r0, r7, #1
   20b5a:	0ffb      	lsrs	r3, r7, #31
   20b5c:	0a6d      	lsrs	r5, r5, #9
   20b5e:	0e00      	lsrs	r0, r0, #24
   20b60:	9300      	str	r3, [sp, #0]
   20b62:	d1da      	bne.n	20b1a <__aeabi_fdiv+0x46>
   20b64:	2d00      	cmp	r5, #0
   20b66:	d126      	bne.n	20bb6 <__aeabi_fdiv+0xe2>
   20b68:	2000      	movs	r0, #0
   20b6a:	2101      	movs	r1, #1
   20b6c:	0033      	movs	r3, r6
   20b6e:	9a00      	ldr	r2, [sp, #0]
   20b70:	4f7a      	ldr	r7, [pc, #488]	; (20d5c <__aeabi_fdiv+0x288>)
   20b72:	4053      	eors	r3, r2
   20b74:	4642      	mov	r2, r8
   20b76:	1a10      	subs	r0, r2, r0
   20b78:	464a      	mov	r2, r9
   20b7a:	430a      	orrs	r2, r1
   20b7c:	0092      	lsls	r2, r2, #2
   20b7e:	58ba      	ldr	r2, [r7, r2]
   20b80:	001d      	movs	r5, r3
   20b82:	4697      	mov	pc, r2
   20b84:	9b00      	ldr	r3, [sp, #0]
   20b86:	002c      	movs	r4, r5
   20b88:	469a      	mov	sl, r3
   20b8a:	468b      	mov	fp, r1
   20b8c:	465b      	mov	r3, fp
   20b8e:	2b02      	cmp	r3, #2
   20b90:	d131      	bne.n	20bf6 <__aeabi_fdiv+0x122>
   20b92:	4653      	mov	r3, sl
   20b94:	21ff      	movs	r1, #255	; 0xff
   20b96:	2400      	movs	r4, #0
   20b98:	e038      	b.n	20c0c <__aeabi_fdiv+0x138>
   20b9a:	2c00      	cmp	r4, #0
   20b9c:	d117      	bne.n	20bce <__aeabi_fdiv+0xfa>
   20b9e:	2304      	movs	r3, #4
   20ba0:	4699      	mov	r9, r3
   20ba2:	2300      	movs	r3, #0
   20ba4:	4698      	mov	r8, r3
   20ba6:	3301      	adds	r3, #1
   20ba8:	469b      	mov	fp, r3
   20baa:	e7af      	b.n	20b0c <__aeabi_fdiv+0x38>
   20bac:	20ff      	movs	r0, #255	; 0xff
   20bae:	2d00      	cmp	r5, #0
   20bb0:	d10b      	bne.n	20bca <__aeabi_fdiv+0xf6>
   20bb2:	2102      	movs	r1, #2
   20bb4:	e7da      	b.n	20b6c <__aeabi_fdiv+0x98>
   20bb6:	0028      	movs	r0, r5
   20bb8:	f002 f888 	bl	22ccc <__clzsi2>
   20bbc:	1f43      	subs	r3, r0, #5
   20bbe:	409d      	lsls	r5, r3
   20bc0:	2376      	movs	r3, #118	; 0x76
   20bc2:	425b      	negs	r3, r3
   20bc4:	1a18      	subs	r0, r3, r0
   20bc6:	2100      	movs	r1, #0
   20bc8:	e7af      	b.n	20b2a <__aeabi_fdiv+0x56>
   20bca:	2103      	movs	r1, #3
   20bcc:	e7ad      	b.n	20b2a <__aeabi_fdiv+0x56>
   20bce:	0020      	movs	r0, r4
   20bd0:	f002 f87c 	bl	22ccc <__clzsi2>
   20bd4:	1f43      	subs	r3, r0, #5
   20bd6:	409c      	lsls	r4, r3
   20bd8:	2376      	movs	r3, #118	; 0x76
   20bda:	425b      	negs	r3, r3
   20bdc:	1a1b      	subs	r3, r3, r0
   20bde:	4698      	mov	r8, r3
   20be0:	2300      	movs	r3, #0
   20be2:	4699      	mov	r9, r3
   20be4:	469b      	mov	fp, r3
   20be6:	e791      	b.n	20b0c <__aeabi_fdiv+0x38>
   20be8:	230c      	movs	r3, #12
   20bea:	4699      	mov	r9, r3
   20bec:	33f3      	adds	r3, #243	; 0xf3
   20bee:	4698      	mov	r8, r3
   20bf0:	3bfc      	subs	r3, #252	; 0xfc
   20bf2:	469b      	mov	fp, r3
   20bf4:	e78a      	b.n	20b0c <__aeabi_fdiv+0x38>
   20bf6:	2b03      	cmp	r3, #3
   20bf8:	d100      	bne.n	20bfc <__aeabi_fdiv+0x128>
   20bfa:	e0a5      	b.n	20d48 <__aeabi_fdiv+0x274>
   20bfc:	4655      	mov	r5, sl
   20bfe:	2b01      	cmp	r3, #1
   20c00:	d000      	beq.n	20c04 <__aeabi_fdiv+0x130>
   20c02:	e081      	b.n	20d08 <__aeabi_fdiv+0x234>
   20c04:	2301      	movs	r3, #1
   20c06:	2100      	movs	r1, #0
   20c08:	2400      	movs	r4, #0
   20c0a:	402b      	ands	r3, r5
   20c0c:	0264      	lsls	r4, r4, #9
   20c0e:	05c9      	lsls	r1, r1, #23
   20c10:	0a60      	lsrs	r0, r4, #9
   20c12:	07db      	lsls	r3, r3, #31
   20c14:	4308      	orrs	r0, r1
   20c16:	4318      	orrs	r0, r3
   20c18:	b003      	add	sp, #12
   20c1a:	bc3c      	pop	{r2, r3, r4, r5}
   20c1c:	4690      	mov	r8, r2
   20c1e:	4699      	mov	r9, r3
   20c20:	46a2      	mov	sl, r4
   20c22:	46ab      	mov	fp, r5
   20c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20c26:	2480      	movs	r4, #128	; 0x80
   20c28:	2300      	movs	r3, #0
   20c2a:	03e4      	lsls	r4, r4, #15
   20c2c:	21ff      	movs	r1, #255	; 0xff
   20c2e:	e7ed      	b.n	20c0c <__aeabi_fdiv+0x138>
   20c30:	21ff      	movs	r1, #255	; 0xff
   20c32:	2400      	movs	r4, #0
   20c34:	e7ea      	b.n	20c0c <__aeabi_fdiv+0x138>
   20c36:	2301      	movs	r3, #1
   20c38:	1a59      	subs	r1, r3, r1
   20c3a:	291b      	cmp	r1, #27
   20c3c:	dd66      	ble.n	20d0c <__aeabi_fdiv+0x238>
   20c3e:	9a01      	ldr	r2, [sp, #4]
   20c40:	4013      	ands	r3, r2
   20c42:	2100      	movs	r1, #0
   20c44:	2400      	movs	r4, #0
   20c46:	e7e1      	b.n	20c0c <__aeabi_fdiv+0x138>
   20c48:	2380      	movs	r3, #128	; 0x80
   20c4a:	03db      	lsls	r3, r3, #15
   20c4c:	421c      	tst	r4, r3
   20c4e:	d038      	beq.n	20cc2 <__aeabi_fdiv+0x1ee>
   20c50:	421d      	tst	r5, r3
   20c52:	d051      	beq.n	20cf8 <__aeabi_fdiv+0x224>
   20c54:	431c      	orrs	r4, r3
   20c56:	0264      	lsls	r4, r4, #9
   20c58:	0a64      	lsrs	r4, r4, #9
   20c5a:	0033      	movs	r3, r6
   20c5c:	21ff      	movs	r1, #255	; 0xff
   20c5e:	e7d5      	b.n	20c0c <__aeabi_fdiv+0x138>
   20c60:	0163      	lsls	r3, r4, #5
   20c62:	016c      	lsls	r4, r5, #5
   20c64:	42a3      	cmp	r3, r4
   20c66:	d23b      	bcs.n	20ce0 <__aeabi_fdiv+0x20c>
   20c68:	261b      	movs	r6, #27
   20c6a:	2100      	movs	r1, #0
   20c6c:	3801      	subs	r0, #1
   20c6e:	2501      	movs	r5, #1
   20c70:	001f      	movs	r7, r3
   20c72:	0049      	lsls	r1, r1, #1
   20c74:	005b      	lsls	r3, r3, #1
   20c76:	2f00      	cmp	r7, #0
   20c78:	db01      	blt.n	20c7e <__aeabi_fdiv+0x1aa>
   20c7a:	429c      	cmp	r4, r3
   20c7c:	d801      	bhi.n	20c82 <__aeabi_fdiv+0x1ae>
   20c7e:	1b1b      	subs	r3, r3, r4
   20c80:	4329      	orrs	r1, r5
   20c82:	3e01      	subs	r6, #1
   20c84:	2e00      	cmp	r6, #0
   20c86:	d1f3      	bne.n	20c70 <__aeabi_fdiv+0x19c>
   20c88:	001c      	movs	r4, r3
   20c8a:	1e63      	subs	r3, r4, #1
   20c8c:	419c      	sbcs	r4, r3
   20c8e:	430c      	orrs	r4, r1
   20c90:	0001      	movs	r1, r0
   20c92:	317f      	adds	r1, #127	; 0x7f
   20c94:	2900      	cmp	r1, #0
   20c96:	ddce      	ble.n	20c36 <__aeabi_fdiv+0x162>
   20c98:	0763      	lsls	r3, r4, #29
   20c9a:	d004      	beq.n	20ca6 <__aeabi_fdiv+0x1d2>
   20c9c:	230f      	movs	r3, #15
   20c9e:	4023      	ands	r3, r4
   20ca0:	2b04      	cmp	r3, #4
   20ca2:	d000      	beq.n	20ca6 <__aeabi_fdiv+0x1d2>
   20ca4:	3404      	adds	r4, #4
   20ca6:	0123      	lsls	r3, r4, #4
   20ca8:	d503      	bpl.n	20cb2 <__aeabi_fdiv+0x1de>
   20caa:	0001      	movs	r1, r0
   20cac:	4b2c      	ldr	r3, [pc, #176]	; (20d60 <__aeabi_fdiv+0x28c>)
   20cae:	3180      	adds	r1, #128	; 0x80
   20cb0:	401c      	ands	r4, r3
   20cb2:	29fe      	cmp	r1, #254	; 0xfe
   20cb4:	dd0d      	ble.n	20cd2 <__aeabi_fdiv+0x1fe>
   20cb6:	2301      	movs	r3, #1
   20cb8:	9a01      	ldr	r2, [sp, #4]
   20cba:	21ff      	movs	r1, #255	; 0xff
   20cbc:	4013      	ands	r3, r2
   20cbe:	2400      	movs	r4, #0
   20cc0:	e7a4      	b.n	20c0c <__aeabi_fdiv+0x138>
   20cc2:	2380      	movs	r3, #128	; 0x80
   20cc4:	03db      	lsls	r3, r3, #15
   20cc6:	431c      	orrs	r4, r3
   20cc8:	0264      	lsls	r4, r4, #9
   20cca:	0a64      	lsrs	r4, r4, #9
   20ccc:	0033      	movs	r3, r6
   20cce:	21ff      	movs	r1, #255	; 0xff
   20cd0:	e79c      	b.n	20c0c <__aeabi_fdiv+0x138>
   20cd2:	2301      	movs	r3, #1
   20cd4:	9a01      	ldr	r2, [sp, #4]
   20cd6:	01a4      	lsls	r4, r4, #6
   20cd8:	0a64      	lsrs	r4, r4, #9
   20cda:	b2c9      	uxtb	r1, r1
   20cdc:	4013      	ands	r3, r2
   20cde:	e795      	b.n	20c0c <__aeabi_fdiv+0x138>
   20ce0:	1b1b      	subs	r3, r3, r4
   20ce2:	261a      	movs	r6, #26
   20ce4:	2101      	movs	r1, #1
   20ce6:	e7c2      	b.n	20c6e <__aeabi_fdiv+0x19a>
   20ce8:	9b00      	ldr	r3, [sp, #0]
   20cea:	468b      	mov	fp, r1
   20cec:	469a      	mov	sl, r3
   20cee:	2400      	movs	r4, #0
   20cf0:	e74c      	b.n	20b8c <__aeabi_fdiv+0xb8>
   20cf2:	0263      	lsls	r3, r4, #9
   20cf4:	d5e5      	bpl.n	20cc2 <__aeabi_fdiv+0x1ee>
   20cf6:	2500      	movs	r5, #0
   20cf8:	2480      	movs	r4, #128	; 0x80
   20cfa:	03e4      	lsls	r4, r4, #15
   20cfc:	432c      	orrs	r4, r5
   20cfe:	0264      	lsls	r4, r4, #9
   20d00:	0a64      	lsrs	r4, r4, #9
   20d02:	9b00      	ldr	r3, [sp, #0]
   20d04:	21ff      	movs	r1, #255	; 0xff
   20d06:	e781      	b.n	20c0c <__aeabi_fdiv+0x138>
   20d08:	9501      	str	r5, [sp, #4]
   20d0a:	e7c1      	b.n	20c90 <__aeabi_fdiv+0x1bc>
   20d0c:	0023      	movs	r3, r4
   20d0e:	2020      	movs	r0, #32
   20d10:	40cb      	lsrs	r3, r1
   20d12:	1a41      	subs	r1, r0, r1
   20d14:	408c      	lsls	r4, r1
   20d16:	1e61      	subs	r1, r4, #1
   20d18:	418c      	sbcs	r4, r1
   20d1a:	431c      	orrs	r4, r3
   20d1c:	0763      	lsls	r3, r4, #29
   20d1e:	d004      	beq.n	20d2a <__aeabi_fdiv+0x256>
   20d20:	230f      	movs	r3, #15
   20d22:	4023      	ands	r3, r4
   20d24:	2b04      	cmp	r3, #4
   20d26:	d000      	beq.n	20d2a <__aeabi_fdiv+0x256>
   20d28:	3404      	adds	r4, #4
   20d2a:	0163      	lsls	r3, r4, #5
   20d2c:	d505      	bpl.n	20d3a <__aeabi_fdiv+0x266>
   20d2e:	2301      	movs	r3, #1
   20d30:	9a01      	ldr	r2, [sp, #4]
   20d32:	2101      	movs	r1, #1
   20d34:	4013      	ands	r3, r2
   20d36:	2400      	movs	r4, #0
   20d38:	e768      	b.n	20c0c <__aeabi_fdiv+0x138>
   20d3a:	2301      	movs	r3, #1
   20d3c:	9a01      	ldr	r2, [sp, #4]
   20d3e:	01a4      	lsls	r4, r4, #6
   20d40:	0a64      	lsrs	r4, r4, #9
   20d42:	4013      	ands	r3, r2
   20d44:	2100      	movs	r1, #0
   20d46:	e761      	b.n	20c0c <__aeabi_fdiv+0x138>
   20d48:	2380      	movs	r3, #128	; 0x80
   20d4a:	03db      	lsls	r3, r3, #15
   20d4c:	431c      	orrs	r4, r3
   20d4e:	0264      	lsls	r4, r4, #9
   20d50:	0a64      	lsrs	r4, r4, #9
   20d52:	4653      	mov	r3, sl
   20d54:	21ff      	movs	r1, #255	; 0xff
   20d56:	e759      	b.n	20c0c <__aeabi_fdiv+0x138>
   20d58:	00028d78 	.word	0x00028d78
   20d5c:	00028db8 	.word	0x00028db8
   20d60:	f7ffffff 	.word	0xf7ffffff

00020d64 <__aeabi_fmul>:
   20d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d66:	4657      	mov	r7, sl
   20d68:	464e      	mov	r6, r9
   20d6a:	4645      	mov	r5, r8
   20d6c:	46de      	mov	lr, fp
   20d6e:	b5e0      	push	{r5, r6, r7, lr}
   20d70:	0247      	lsls	r7, r0, #9
   20d72:	0046      	lsls	r6, r0, #1
   20d74:	4688      	mov	r8, r1
   20d76:	0a7f      	lsrs	r7, r7, #9
   20d78:	0e36      	lsrs	r6, r6, #24
   20d7a:	0fc4      	lsrs	r4, r0, #31
   20d7c:	2e00      	cmp	r6, #0
   20d7e:	d047      	beq.n	20e10 <__aeabi_fmul+0xac>
   20d80:	2eff      	cmp	r6, #255	; 0xff
   20d82:	d024      	beq.n	20dce <__aeabi_fmul+0x6a>
   20d84:	00fb      	lsls	r3, r7, #3
   20d86:	2780      	movs	r7, #128	; 0x80
   20d88:	04ff      	lsls	r7, r7, #19
   20d8a:	431f      	orrs	r7, r3
   20d8c:	2300      	movs	r3, #0
   20d8e:	4699      	mov	r9, r3
   20d90:	469a      	mov	sl, r3
   20d92:	3e7f      	subs	r6, #127	; 0x7f
   20d94:	4643      	mov	r3, r8
   20d96:	025d      	lsls	r5, r3, #9
   20d98:	0058      	lsls	r0, r3, #1
   20d9a:	0fdb      	lsrs	r3, r3, #31
   20d9c:	0a6d      	lsrs	r5, r5, #9
   20d9e:	0e00      	lsrs	r0, r0, #24
   20da0:	4698      	mov	r8, r3
   20da2:	d043      	beq.n	20e2c <__aeabi_fmul+0xc8>
   20da4:	28ff      	cmp	r0, #255	; 0xff
   20da6:	d03b      	beq.n	20e20 <__aeabi_fmul+0xbc>
   20da8:	00eb      	lsls	r3, r5, #3
   20daa:	2580      	movs	r5, #128	; 0x80
   20dac:	2200      	movs	r2, #0
   20dae:	04ed      	lsls	r5, r5, #19
   20db0:	431d      	orrs	r5, r3
   20db2:	387f      	subs	r0, #127	; 0x7f
   20db4:	1836      	adds	r6, r6, r0
   20db6:	1c73      	adds	r3, r6, #1
   20db8:	4641      	mov	r1, r8
   20dba:	469b      	mov	fp, r3
   20dbc:	464b      	mov	r3, r9
   20dbe:	4061      	eors	r1, r4
   20dc0:	4313      	orrs	r3, r2
   20dc2:	2b0f      	cmp	r3, #15
   20dc4:	d864      	bhi.n	20e90 <__aeabi_fmul+0x12c>
   20dc6:	4875      	ldr	r0, [pc, #468]	; (20f9c <__aeabi_fmul+0x238>)
   20dc8:	009b      	lsls	r3, r3, #2
   20dca:	58c3      	ldr	r3, [r0, r3]
   20dcc:	469f      	mov	pc, r3
   20dce:	2f00      	cmp	r7, #0
   20dd0:	d142      	bne.n	20e58 <__aeabi_fmul+0xf4>
   20dd2:	2308      	movs	r3, #8
   20dd4:	4699      	mov	r9, r3
   20dd6:	3b06      	subs	r3, #6
   20dd8:	26ff      	movs	r6, #255	; 0xff
   20dda:	469a      	mov	sl, r3
   20ddc:	e7da      	b.n	20d94 <__aeabi_fmul+0x30>
   20dde:	4641      	mov	r1, r8
   20de0:	2a02      	cmp	r2, #2
   20de2:	d028      	beq.n	20e36 <__aeabi_fmul+0xd2>
   20de4:	2a03      	cmp	r2, #3
   20de6:	d100      	bne.n	20dea <__aeabi_fmul+0x86>
   20de8:	e0ce      	b.n	20f88 <__aeabi_fmul+0x224>
   20dea:	2a01      	cmp	r2, #1
   20dec:	d000      	beq.n	20df0 <__aeabi_fmul+0x8c>
   20dee:	e0ac      	b.n	20f4a <__aeabi_fmul+0x1e6>
   20df0:	4011      	ands	r1, r2
   20df2:	2000      	movs	r0, #0
   20df4:	2200      	movs	r2, #0
   20df6:	b2cc      	uxtb	r4, r1
   20df8:	0240      	lsls	r0, r0, #9
   20dfa:	05d2      	lsls	r2, r2, #23
   20dfc:	0a40      	lsrs	r0, r0, #9
   20dfe:	07e4      	lsls	r4, r4, #31
   20e00:	4310      	orrs	r0, r2
   20e02:	4320      	orrs	r0, r4
   20e04:	bc3c      	pop	{r2, r3, r4, r5}
   20e06:	4690      	mov	r8, r2
   20e08:	4699      	mov	r9, r3
   20e0a:	46a2      	mov	sl, r4
   20e0c:	46ab      	mov	fp, r5
   20e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20e10:	2f00      	cmp	r7, #0
   20e12:	d115      	bne.n	20e40 <__aeabi_fmul+0xdc>
   20e14:	2304      	movs	r3, #4
   20e16:	4699      	mov	r9, r3
   20e18:	3b03      	subs	r3, #3
   20e1a:	2600      	movs	r6, #0
   20e1c:	469a      	mov	sl, r3
   20e1e:	e7b9      	b.n	20d94 <__aeabi_fmul+0x30>
   20e20:	20ff      	movs	r0, #255	; 0xff
   20e22:	2202      	movs	r2, #2
   20e24:	2d00      	cmp	r5, #0
   20e26:	d0c5      	beq.n	20db4 <__aeabi_fmul+0x50>
   20e28:	2203      	movs	r2, #3
   20e2a:	e7c3      	b.n	20db4 <__aeabi_fmul+0x50>
   20e2c:	2d00      	cmp	r5, #0
   20e2e:	d119      	bne.n	20e64 <__aeabi_fmul+0x100>
   20e30:	2000      	movs	r0, #0
   20e32:	2201      	movs	r2, #1
   20e34:	e7be      	b.n	20db4 <__aeabi_fmul+0x50>
   20e36:	2401      	movs	r4, #1
   20e38:	22ff      	movs	r2, #255	; 0xff
   20e3a:	400c      	ands	r4, r1
   20e3c:	2000      	movs	r0, #0
   20e3e:	e7db      	b.n	20df8 <__aeabi_fmul+0x94>
   20e40:	0038      	movs	r0, r7
   20e42:	f001 ff43 	bl	22ccc <__clzsi2>
   20e46:	2676      	movs	r6, #118	; 0x76
   20e48:	1f43      	subs	r3, r0, #5
   20e4a:	409f      	lsls	r7, r3
   20e4c:	2300      	movs	r3, #0
   20e4e:	4276      	negs	r6, r6
   20e50:	1a36      	subs	r6, r6, r0
   20e52:	4699      	mov	r9, r3
   20e54:	469a      	mov	sl, r3
   20e56:	e79d      	b.n	20d94 <__aeabi_fmul+0x30>
   20e58:	230c      	movs	r3, #12
   20e5a:	4699      	mov	r9, r3
   20e5c:	3b09      	subs	r3, #9
   20e5e:	26ff      	movs	r6, #255	; 0xff
   20e60:	469a      	mov	sl, r3
   20e62:	e797      	b.n	20d94 <__aeabi_fmul+0x30>
   20e64:	0028      	movs	r0, r5
   20e66:	f001 ff31 	bl	22ccc <__clzsi2>
   20e6a:	1f43      	subs	r3, r0, #5
   20e6c:	409d      	lsls	r5, r3
   20e6e:	2376      	movs	r3, #118	; 0x76
   20e70:	425b      	negs	r3, r3
   20e72:	1a18      	subs	r0, r3, r0
   20e74:	2200      	movs	r2, #0
   20e76:	e79d      	b.n	20db4 <__aeabi_fmul+0x50>
   20e78:	2080      	movs	r0, #128	; 0x80
   20e7a:	2400      	movs	r4, #0
   20e7c:	03c0      	lsls	r0, r0, #15
   20e7e:	22ff      	movs	r2, #255	; 0xff
   20e80:	e7ba      	b.n	20df8 <__aeabi_fmul+0x94>
   20e82:	003d      	movs	r5, r7
   20e84:	4652      	mov	r2, sl
   20e86:	e7ab      	b.n	20de0 <__aeabi_fmul+0x7c>
   20e88:	003d      	movs	r5, r7
   20e8a:	0021      	movs	r1, r4
   20e8c:	4652      	mov	r2, sl
   20e8e:	e7a7      	b.n	20de0 <__aeabi_fmul+0x7c>
   20e90:	0c3b      	lsrs	r3, r7, #16
   20e92:	469c      	mov	ip, r3
   20e94:	042a      	lsls	r2, r5, #16
   20e96:	0c12      	lsrs	r2, r2, #16
   20e98:	0c2b      	lsrs	r3, r5, #16
   20e9a:	0014      	movs	r4, r2
   20e9c:	4660      	mov	r0, ip
   20e9e:	4665      	mov	r5, ip
   20ea0:	043f      	lsls	r7, r7, #16
   20ea2:	0c3f      	lsrs	r7, r7, #16
   20ea4:	437c      	muls	r4, r7
   20ea6:	4342      	muls	r2, r0
   20ea8:	435d      	muls	r5, r3
   20eaa:	437b      	muls	r3, r7
   20eac:	0c27      	lsrs	r7, r4, #16
   20eae:	189b      	adds	r3, r3, r2
   20eb0:	18ff      	adds	r7, r7, r3
   20eb2:	42ba      	cmp	r2, r7
   20eb4:	d903      	bls.n	20ebe <__aeabi_fmul+0x15a>
   20eb6:	2380      	movs	r3, #128	; 0x80
   20eb8:	025b      	lsls	r3, r3, #9
   20eba:	469c      	mov	ip, r3
   20ebc:	4465      	add	r5, ip
   20ebe:	0424      	lsls	r4, r4, #16
   20ec0:	043a      	lsls	r2, r7, #16
   20ec2:	0c24      	lsrs	r4, r4, #16
   20ec4:	1912      	adds	r2, r2, r4
   20ec6:	0193      	lsls	r3, r2, #6
   20ec8:	1e5c      	subs	r4, r3, #1
   20eca:	41a3      	sbcs	r3, r4
   20ecc:	0c3f      	lsrs	r7, r7, #16
   20ece:	0e92      	lsrs	r2, r2, #26
   20ed0:	197d      	adds	r5, r7, r5
   20ed2:	431a      	orrs	r2, r3
   20ed4:	01ad      	lsls	r5, r5, #6
   20ed6:	4315      	orrs	r5, r2
   20ed8:	012b      	lsls	r3, r5, #4
   20eda:	d504      	bpl.n	20ee6 <__aeabi_fmul+0x182>
   20edc:	2301      	movs	r3, #1
   20ede:	465e      	mov	r6, fp
   20ee0:	086a      	lsrs	r2, r5, #1
   20ee2:	401d      	ands	r5, r3
   20ee4:	4315      	orrs	r5, r2
   20ee6:	0032      	movs	r2, r6
   20ee8:	327f      	adds	r2, #127	; 0x7f
   20eea:	2a00      	cmp	r2, #0
   20eec:	dd25      	ble.n	20f3a <__aeabi_fmul+0x1d6>
   20eee:	076b      	lsls	r3, r5, #29
   20ef0:	d004      	beq.n	20efc <__aeabi_fmul+0x198>
   20ef2:	230f      	movs	r3, #15
   20ef4:	402b      	ands	r3, r5
   20ef6:	2b04      	cmp	r3, #4
   20ef8:	d000      	beq.n	20efc <__aeabi_fmul+0x198>
   20efa:	3504      	adds	r5, #4
   20efc:	012b      	lsls	r3, r5, #4
   20efe:	d503      	bpl.n	20f08 <__aeabi_fmul+0x1a4>
   20f00:	0032      	movs	r2, r6
   20f02:	4b27      	ldr	r3, [pc, #156]	; (20fa0 <__aeabi_fmul+0x23c>)
   20f04:	3280      	adds	r2, #128	; 0x80
   20f06:	401d      	ands	r5, r3
   20f08:	2afe      	cmp	r2, #254	; 0xfe
   20f0a:	dc94      	bgt.n	20e36 <__aeabi_fmul+0xd2>
   20f0c:	2401      	movs	r4, #1
   20f0e:	01a8      	lsls	r0, r5, #6
   20f10:	0a40      	lsrs	r0, r0, #9
   20f12:	b2d2      	uxtb	r2, r2
   20f14:	400c      	ands	r4, r1
   20f16:	e76f      	b.n	20df8 <__aeabi_fmul+0x94>
   20f18:	2080      	movs	r0, #128	; 0x80
   20f1a:	03c0      	lsls	r0, r0, #15
   20f1c:	4207      	tst	r7, r0
   20f1e:	d007      	beq.n	20f30 <__aeabi_fmul+0x1cc>
   20f20:	4205      	tst	r5, r0
   20f22:	d105      	bne.n	20f30 <__aeabi_fmul+0x1cc>
   20f24:	4328      	orrs	r0, r5
   20f26:	0240      	lsls	r0, r0, #9
   20f28:	0a40      	lsrs	r0, r0, #9
   20f2a:	4644      	mov	r4, r8
   20f2c:	22ff      	movs	r2, #255	; 0xff
   20f2e:	e763      	b.n	20df8 <__aeabi_fmul+0x94>
   20f30:	4338      	orrs	r0, r7
   20f32:	0240      	lsls	r0, r0, #9
   20f34:	0a40      	lsrs	r0, r0, #9
   20f36:	22ff      	movs	r2, #255	; 0xff
   20f38:	e75e      	b.n	20df8 <__aeabi_fmul+0x94>
   20f3a:	2401      	movs	r4, #1
   20f3c:	1aa3      	subs	r3, r4, r2
   20f3e:	2b1b      	cmp	r3, #27
   20f40:	dd05      	ble.n	20f4e <__aeabi_fmul+0x1ea>
   20f42:	400c      	ands	r4, r1
   20f44:	2200      	movs	r2, #0
   20f46:	2000      	movs	r0, #0
   20f48:	e756      	b.n	20df8 <__aeabi_fmul+0x94>
   20f4a:	465e      	mov	r6, fp
   20f4c:	e7cb      	b.n	20ee6 <__aeabi_fmul+0x182>
   20f4e:	002a      	movs	r2, r5
   20f50:	2020      	movs	r0, #32
   20f52:	40da      	lsrs	r2, r3
   20f54:	1ac3      	subs	r3, r0, r3
   20f56:	409d      	lsls	r5, r3
   20f58:	002b      	movs	r3, r5
   20f5a:	1e5d      	subs	r5, r3, #1
   20f5c:	41ab      	sbcs	r3, r5
   20f5e:	4313      	orrs	r3, r2
   20f60:	075a      	lsls	r2, r3, #29
   20f62:	d004      	beq.n	20f6e <__aeabi_fmul+0x20a>
   20f64:	220f      	movs	r2, #15
   20f66:	401a      	ands	r2, r3
   20f68:	2a04      	cmp	r2, #4
   20f6a:	d000      	beq.n	20f6e <__aeabi_fmul+0x20a>
   20f6c:	3304      	adds	r3, #4
   20f6e:	015a      	lsls	r2, r3, #5
   20f70:	d504      	bpl.n	20f7c <__aeabi_fmul+0x218>
   20f72:	2401      	movs	r4, #1
   20f74:	2201      	movs	r2, #1
   20f76:	400c      	ands	r4, r1
   20f78:	2000      	movs	r0, #0
   20f7a:	e73d      	b.n	20df8 <__aeabi_fmul+0x94>
   20f7c:	2401      	movs	r4, #1
   20f7e:	019b      	lsls	r3, r3, #6
   20f80:	0a58      	lsrs	r0, r3, #9
   20f82:	400c      	ands	r4, r1
   20f84:	2200      	movs	r2, #0
   20f86:	e737      	b.n	20df8 <__aeabi_fmul+0x94>
   20f88:	2080      	movs	r0, #128	; 0x80
   20f8a:	2401      	movs	r4, #1
   20f8c:	03c0      	lsls	r0, r0, #15
   20f8e:	4328      	orrs	r0, r5
   20f90:	0240      	lsls	r0, r0, #9
   20f92:	0a40      	lsrs	r0, r0, #9
   20f94:	400c      	ands	r4, r1
   20f96:	22ff      	movs	r2, #255	; 0xff
   20f98:	e72e      	b.n	20df8 <__aeabi_fmul+0x94>
   20f9a:	46c0      	nop			; (mov r8, r8)
   20f9c:	00028df8 	.word	0x00028df8
   20fa0:	f7ffffff 	.word	0xf7ffffff

00020fa4 <__aeabi_fsub>:
   20fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20fa6:	464f      	mov	r7, r9
   20fa8:	46d6      	mov	lr, sl
   20faa:	4646      	mov	r6, r8
   20fac:	0044      	lsls	r4, r0, #1
   20fae:	b5c0      	push	{r6, r7, lr}
   20fb0:	0fc2      	lsrs	r2, r0, #31
   20fb2:	0247      	lsls	r7, r0, #9
   20fb4:	0248      	lsls	r0, r1, #9
   20fb6:	0a40      	lsrs	r0, r0, #9
   20fb8:	4684      	mov	ip, r0
   20fba:	4666      	mov	r6, ip
   20fbc:	0a7b      	lsrs	r3, r7, #9
   20fbe:	0048      	lsls	r0, r1, #1
   20fc0:	0fc9      	lsrs	r1, r1, #31
   20fc2:	469a      	mov	sl, r3
   20fc4:	0e24      	lsrs	r4, r4, #24
   20fc6:	0015      	movs	r5, r2
   20fc8:	00db      	lsls	r3, r3, #3
   20fca:	0e00      	lsrs	r0, r0, #24
   20fcc:	4689      	mov	r9, r1
   20fce:	00f6      	lsls	r6, r6, #3
   20fd0:	28ff      	cmp	r0, #255	; 0xff
   20fd2:	d100      	bne.n	20fd6 <__aeabi_fsub+0x32>
   20fd4:	e08f      	b.n	210f6 <__aeabi_fsub+0x152>
   20fd6:	2101      	movs	r1, #1
   20fd8:	464f      	mov	r7, r9
   20fda:	404f      	eors	r7, r1
   20fdc:	0039      	movs	r1, r7
   20fde:	4291      	cmp	r1, r2
   20fe0:	d066      	beq.n	210b0 <__aeabi_fsub+0x10c>
   20fe2:	1a22      	subs	r2, r4, r0
   20fe4:	2a00      	cmp	r2, #0
   20fe6:	dc00      	bgt.n	20fea <__aeabi_fsub+0x46>
   20fe8:	e09d      	b.n	21126 <__aeabi_fsub+0x182>
   20fea:	2800      	cmp	r0, #0
   20fec:	d13d      	bne.n	2106a <__aeabi_fsub+0xc6>
   20fee:	2e00      	cmp	r6, #0
   20ff0:	d100      	bne.n	20ff4 <__aeabi_fsub+0x50>
   20ff2:	e08b      	b.n	2110c <__aeabi_fsub+0x168>
   20ff4:	1e51      	subs	r1, r2, #1
   20ff6:	2900      	cmp	r1, #0
   20ff8:	d000      	beq.n	20ffc <__aeabi_fsub+0x58>
   20ffa:	e0b5      	b.n	21168 <__aeabi_fsub+0x1c4>
   20ffc:	2401      	movs	r4, #1
   20ffe:	1b9b      	subs	r3, r3, r6
   21000:	015a      	lsls	r2, r3, #5
   21002:	d544      	bpl.n	2108e <__aeabi_fsub+0xea>
   21004:	019b      	lsls	r3, r3, #6
   21006:	099f      	lsrs	r7, r3, #6
   21008:	0038      	movs	r0, r7
   2100a:	f001 fe5f 	bl	22ccc <__clzsi2>
   2100e:	3805      	subs	r0, #5
   21010:	4087      	lsls	r7, r0
   21012:	4284      	cmp	r4, r0
   21014:	dd00      	ble.n	21018 <__aeabi_fsub+0x74>
   21016:	e096      	b.n	21146 <__aeabi_fsub+0x1a2>
   21018:	1b04      	subs	r4, r0, r4
   2101a:	003a      	movs	r2, r7
   2101c:	2020      	movs	r0, #32
   2101e:	3401      	adds	r4, #1
   21020:	40e2      	lsrs	r2, r4
   21022:	1b04      	subs	r4, r0, r4
   21024:	40a7      	lsls	r7, r4
   21026:	003b      	movs	r3, r7
   21028:	1e5f      	subs	r7, r3, #1
   2102a:	41bb      	sbcs	r3, r7
   2102c:	2400      	movs	r4, #0
   2102e:	4313      	orrs	r3, r2
   21030:	075a      	lsls	r2, r3, #29
   21032:	d004      	beq.n	2103e <__aeabi_fsub+0x9a>
   21034:	220f      	movs	r2, #15
   21036:	401a      	ands	r2, r3
   21038:	2a04      	cmp	r2, #4
   2103a:	d000      	beq.n	2103e <__aeabi_fsub+0x9a>
   2103c:	3304      	adds	r3, #4
   2103e:	015a      	lsls	r2, r3, #5
   21040:	d527      	bpl.n	21092 <__aeabi_fsub+0xee>
   21042:	3401      	adds	r4, #1
   21044:	2cff      	cmp	r4, #255	; 0xff
   21046:	d100      	bne.n	2104a <__aeabi_fsub+0xa6>
   21048:	e079      	b.n	2113e <__aeabi_fsub+0x19a>
   2104a:	2201      	movs	r2, #1
   2104c:	019b      	lsls	r3, r3, #6
   2104e:	0a5b      	lsrs	r3, r3, #9
   21050:	b2e4      	uxtb	r4, r4
   21052:	402a      	ands	r2, r5
   21054:	025b      	lsls	r3, r3, #9
   21056:	05e4      	lsls	r4, r4, #23
   21058:	0a58      	lsrs	r0, r3, #9
   2105a:	07d2      	lsls	r2, r2, #31
   2105c:	4320      	orrs	r0, r4
   2105e:	4310      	orrs	r0, r2
   21060:	bc1c      	pop	{r2, r3, r4}
   21062:	4690      	mov	r8, r2
   21064:	4699      	mov	r9, r3
   21066:	46a2      	mov	sl, r4
   21068:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2106a:	2cff      	cmp	r4, #255	; 0xff
   2106c:	d0e0      	beq.n	21030 <__aeabi_fsub+0x8c>
   2106e:	2180      	movs	r1, #128	; 0x80
   21070:	04c9      	lsls	r1, r1, #19
   21072:	430e      	orrs	r6, r1
   21074:	2a1b      	cmp	r2, #27
   21076:	dc7b      	bgt.n	21170 <__aeabi_fsub+0x1cc>
   21078:	0031      	movs	r1, r6
   2107a:	2020      	movs	r0, #32
   2107c:	40d1      	lsrs	r1, r2
   2107e:	1a82      	subs	r2, r0, r2
   21080:	4096      	lsls	r6, r2
   21082:	1e72      	subs	r2, r6, #1
   21084:	4196      	sbcs	r6, r2
   21086:	430e      	orrs	r6, r1
   21088:	1b9b      	subs	r3, r3, r6
   2108a:	015a      	lsls	r2, r3, #5
   2108c:	d4ba      	bmi.n	21004 <__aeabi_fsub+0x60>
   2108e:	075a      	lsls	r2, r3, #29
   21090:	d1d0      	bne.n	21034 <__aeabi_fsub+0x90>
   21092:	2201      	movs	r2, #1
   21094:	08df      	lsrs	r7, r3, #3
   21096:	402a      	ands	r2, r5
   21098:	2cff      	cmp	r4, #255	; 0xff
   2109a:	d133      	bne.n	21104 <__aeabi_fsub+0x160>
   2109c:	2f00      	cmp	r7, #0
   2109e:	d100      	bne.n	210a2 <__aeabi_fsub+0xfe>
   210a0:	e0a8      	b.n	211f4 <__aeabi_fsub+0x250>
   210a2:	2380      	movs	r3, #128	; 0x80
   210a4:	03db      	lsls	r3, r3, #15
   210a6:	433b      	orrs	r3, r7
   210a8:	025b      	lsls	r3, r3, #9
   210aa:	0a5b      	lsrs	r3, r3, #9
   210ac:	24ff      	movs	r4, #255	; 0xff
   210ae:	e7d1      	b.n	21054 <__aeabi_fsub+0xb0>
   210b0:	1a21      	subs	r1, r4, r0
   210b2:	2900      	cmp	r1, #0
   210b4:	dd4c      	ble.n	21150 <__aeabi_fsub+0x1ac>
   210b6:	2800      	cmp	r0, #0
   210b8:	d02a      	beq.n	21110 <__aeabi_fsub+0x16c>
   210ba:	2cff      	cmp	r4, #255	; 0xff
   210bc:	d0b8      	beq.n	21030 <__aeabi_fsub+0x8c>
   210be:	2080      	movs	r0, #128	; 0x80
   210c0:	04c0      	lsls	r0, r0, #19
   210c2:	4306      	orrs	r6, r0
   210c4:	291b      	cmp	r1, #27
   210c6:	dd00      	ble.n	210ca <__aeabi_fsub+0x126>
   210c8:	e0af      	b.n	2122a <__aeabi_fsub+0x286>
   210ca:	0030      	movs	r0, r6
   210cc:	2720      	movs	r7, #32
   210ce:	40c8      	lsrs	r0, r1
   210d0:	1a79      	subs	r1, r7, r1
   210d2:	408e      	lsls	r6, r1
   210d4:	1e71      	subs	r1, r6, #1
   210d6:	418e      	sbcs	r6, r1
   210d8:	4306      	orrs	r6, r0
   210da:	199b      	adds	r3, r3, r6
   210dc:	0159      	lsls	r1, r3, #5
   210de:	d5d6      	bpl.n	2108e <__aeabi_fsub+0xea>
   210e0:	3401      	adds	r4, #1
   210e2:	2cff      	cmp	r4, #255	; 0xff
   210e4:	d100      	bne.n	210e8 <__aeabi_fsub+0x144>
   210e6:	e085      	b.n	211f4 <__aeabi_fsub+0x250>
   210e8:	2201      	movs	r2, #1
   210ea:	497a      	ldr	r1, [pc, #488]	; (212d4 <__aeabi_fsub+0x330>)
   210ec:	401a      	ands	r2, r3
   210ee:	085b      	lsrs	r3, r3, #1
   210f0:	400b      	ands	r3, r1
   210f2:	4313      	orrs	r3, r2
   210f4:	e79c      	b.n	21030 <__aeabi_fsub+0x8c>
   210f6:	2e00      	cmp	r6, #0
   210f8:	d000      	beq.n	210fc <__aeabi_fsub+0x158>
   210fa:	e770      	b.n	20fde <__aeabi_fsub+0x3a>
   210fc:	e76b      	b.n	20fd6 <__aeabi_fsub+0x32>
   210fe:	1e3b      	subs	r3, r7, #0
   21100:	d1c5      	bne.n	2108e <__aeabi_fsub+0xea>
   21102:	2200      	movs	r2, #0
   21104:	027b      	lsls	r3, r7, #9
   21106:	0a5b      	lsrs	r3, r3, #9
   21108:	b2e4      	uxtb	r4, r4
   2110a:	e7a3      	b.n	21054 <__aeabi_fsub+0xb0>
   2110c:	0014      	movs	r4, r2
   2110e:	e78f      	b.n	21030 <__aeabi_fsub+0x8c>
   21110:	2e00      	cmp	r6, #0
   21112:	d04d      	beq.n	211b0 <__aeabi_fsub+0x20c>
   21114:	1e48      	subs	r0, r1, #1
   21116:	2800      	cmp	r0, #0
   21118:	d157      	bne.n	211ca <__aeabi_fsub+0x226>
   2111a:	199b      	adds	r3, r3, r6
   2111c:	2401      	movs	r4, #1
   2111e:	015a      	lsls	r2, r3, #5
   21120:	d5b5      	bpl.n	2108e <__aeabi_fsub+0xea>
   21122:	2402      	movs	r4, #2
   21124:	e7e0      	b.n	210e8 <__aeabi_fsub+0x144>
   21126:	2a00      	cmp	r2, #0
   21128:	d125      	bne.n	21176 <__aeabi_fsub+0x1d2>
   2112a:	1c62      	adds	r2, r4, #1
   2112c:	b2d2      	uxtb	r2, r2
   2112e:	2a01      	cmp	r2, #1
   21130:	dd72      	ble.n	21218 <__aeabi_fsub+0x274>
   21132:	1b9f      	subs	r7, r3, r6
   21134:	017a      	lsls	r2, r7, #5
   21136:	d535      	bpl.n	211a4 <__aeabi_fsub+0x200>
   21138:	1af7      	subs	r7, r6, r3
   2113a:	000d      	movs	r5, r1
   2113c:	e764      	b.n	21008 <__aeabi_fsub+0x64>
   2113e:	2201      	movs	r2, #1
   21140:	2300      	movs	r3, #0
   21142:	402a      	ands	r2, r5
   21144:	e786      	b.n	21054 <__aeabi_fsub+0xb0>
   21146:	003b      	movs	r3, r7
   21148:	4a63      	ldr	r2, [pc, #396]	; (212d8 <__aeabi_fsub+0x334>)
   2114a:	1a24      	subs	r4, r4, r0
   2114c:	4013      	ands	r3, r2
   2114e:	e76f      	b.n	21030 <__aeabi_fsub+0x8c>
   21150:	2900      	cmp	r1, #0
   21152:	d16c      	bne.n	2122e <__aeabi_fsub+0x28a>
   21154:	1c61      	adds	r1, r4, #1
   21156:	b2c8      	uxtb	r0, r1
   21158:	2801      	cmp	r0, #1
   2115a:	dd4e      	ble.n	211fa <__aeabi_fsub+0x256>
   2115c:	29ff      	cmp	r1, #255	; 0xff
   2115e:	d049      	beq.n	211f4 <__aeabi_fsub+0x250>
   21160:	199b      	adds	r3, r3, r6
   21162:	085b      	lsrs	r3, r3, #1
   21164:	000c      	movs	r4, r1
   21166:	e763      	b.n	21030 <__aeabi_fsub+0x8c>
   21168:	2aff      	cmp	r2, #255	; 0xff
   2116a:	d041      	beq.n	211f0 <__aeabi_fsub+0x24c>
   2116c:	000a      	movs	r2, r1
   2116e:	e781      	b.n	21074 <__aeabi_fsub+0xd0>
   21170:	2601      	movs	r6, #1
   21172:	1b9b      	subs	r3, r3, r6
   21174:	e789      	b.n	2108a <__aeabi_fsub+0xe6>
   21176:	2c00      	cmp	r4, #0
   21178:	d01c      	beq.n	211b4 <__aeabi_fsub+0x210>
   2117a:	28ff      	cmp	r0, #255	; 0xff
   2117c:	d021      	beq.n	211c2 <__aeabi_fsub+0x21e>
   2117e:	2480      	movs	r4, #128	; 0x80
   21180:	04e4      	lsls	r4, r4, #19
   21182:	4252      	negs	r2, r2
   21184:	4323      	orrs	r3, r4
   21186:	2a1b      	cmp	r2, #27
   21188:	dd00      	ble.n	2118c <__aeabi_fsub+0x1e8>
   2118a:	e096      	b.n	212ba <__aeabi_fsub+0x316>
   2118c:	001c      	movs	r4, r3
   2118e:	2520      	movs	r5, #32
   21190:	40d4      	lsrs	r4, r2
   21192:	1aaa      	subs	r2, r5, r2
   21194:	4093      	lsls	r3, r2
   21196:	1e5a      	subs	r2, r3, #1
   21198:	4193      	sbcs	r3, r2
   2119a:	4323      	orrs	r3, r4
   2119c:	1af3      	subs	r3, r6, r3
   2119e:	0004      	movs	r4, r0
   211a0:	000d      	movs	r5, r1
   211a2:	e72d      	b.n	21000 <__aeabi_fsub+0x5c>
   211a4:	2f00      	cmp	r7, #0
   211a6:	d000      	beq.n	211aa <__aeabi_fsub+0x206>
   211a8:	e72e      	b.n	21008 <__aeabi_fsub+0x64>
   211aa:	2200      	movs	r2, #0
   211ac:	2400      	movs	r4, #0
   211ae:	e7a9      	b.n	21104 <__aeabi_fsub+0x160>
   211b0:	000c      	movs	r4, r1
   211b2:	e73d      	b.n	21030 <__aeabi_fsub+0x8c>
   211b4:	2b00      	cmp	r3, #0
   211b6:	d058      	beq.n	2126a <__aeabi_fsub+0x2c6>
   211b8:	43d2      	mvns	r2, r2
   211ba:	2a00      	cmp	r2, #0
   211bc:	d0ee      	beq.n	2119c <__aeabi_fsub+0x1f8>
   211be:	28ff      	cmp	r0, #255	; 0xff
   211c0:	d1e1      	bne.n	21186 <__aeabi_fsub+0x1e2>
   211c2:	0033      	movs	r3, r6
   211c4:	24ff      	movs	r4, #255	; 0xff
   211c6:	000d      	movs	r5, r1
   211c8:	e732      	b.n	21030 <__aeabi_fsub+0x8c>
   211ca:	29ff      	cmp	r1, #255	; 0xff
   211cc:	d010      	beq.n	211f0 <__aeabi_fsub+0x24c>
   211ce:	0001      	movs	r1, r0
   211d0:	e778      	b.n	210c4 <__aeabi_fsub+0x120>
   211d2:	2b00      	cmp	r3, #0
   211d4:	d06e      	beq.n	212b4 <__aeabi_fsub+0x310>
   211d6:	24ff      	movs	r4, #255	; 0xff
   211d8:	2e00      	cmp	r6, #0
   211da:	d100      	bne.n	211de <__aeabi_fsub+0x23a>
   211dc:	e728      	b.n	21030 <__aeabi_fsub+0x8c>
   211de:	2280      	movs	r2, #128	; 0x80
   211e0:	4651      	mov	r1, sl
   211e2:	03d2      	lsls	r2, r2, #15
   211e4:	4211      	tst	r1, r2
   211e6:	d003      	beq.n	211f0 <__aeabi_fsub+0x24c>
   211e8:	4661      	mov	r1, ip
   211ea:	4211      	tst	r1, r2
   211ec:	d100      	bne.n	211f0 <__aeabi_fsub+0x24c>
   211ee:	0033      	movs	r3, r6
   211f0:	24ff      	movs	r4, #255	; 0xff
   211f2:	e71d      	b.n	21030 <__aeabi_fsub+0x8c>
   211f4:	24ff      	movs	r4, #255	; 0xff
   211f6:	2300      	movs	r3, #0
   211f8:	e72c      	b.n	21054 <__aeabi_fsub+0xb0>
   211fa:	2c00      	cmp	r4, #0
   211fc:	d1e9      	bne.n	211d2 <__aeabi_fsub+0x22e>
   211fe:	2b00      	cmp	r3, #0
   21200:	d063      	beq.n	212ca <__aeabi_fsub+0x326>
   21202:	2e00      	cmp	r6, #0
   21204:	d100      	bne.n	21208 <__aeabi_fsub+0x264>
   21206:	e713      	b.n	21030 <__aeabi_fsub+0x8c>
   21208:	199b      	adds	r3, r3, r6
   2120a:	015a      	lsls	r2, r3, #5
   2120c:	d400      	bmi.n	21210 <__aeabi_fsub+0x26c>
   2120e:	e73e      	b.n	2108e <__aeabi_fsub+0xea>
   21210:	4a31      	ldr	r2, [pc, #196]	; (212d8 <__aeabi_fsub+0x334>)
   21212:	000c      	movs	r4, r1
   21214:	4013      	ands	r3, r2
   21216:	e70b      	b.n	21030 <__aeabi_fsub+0x8c>
   21218:	2c00      	cmp	r4, #0
   2121a:	d11e      	bne.n	2125a <__aeabi_fsub+0x2b6>
   2121c:	2b00      	cmp	r3, #0
   2121e:	d12f      	bne.n	21280 <__aeabi_fsub+0x2dc>
   21220:	2e00      	cmp	r6, #0
   21222:	d04f      	beq.n	212c4 <__aeabi_fsub+0x320>
   21224:	0033      	movs	r3, r6
   21226:	000d      	movs	r5, r1
   21228:	e702      	b.n	21030 <__aeabi_fsub+0x8c>
   2122a:	2601      	movs	r6, #1
   2122c:	e755      	b.n	210da <__aeabi_fsub+0x136>
   2122e:	2c00      	cmp	r4, #0
   21230:	d11f      	bne.n	21272 <__aeabi_fsub+0x2ce>
   21232:	2b00      	cmp	r3, #0
   21234:	d043      	beq.n	212be <__aeabi_fsub+0x31a>
   21236:	43c9      	mvns	r1, r1
   21238:	2900      	cmp	r1, #0
   2123a:	d00b      	beq.n	21254 <__aeabi_fsub+0x2b0>
   2123c:	28ff      	cmp	r0, #255	; 0xff
   2123e:	d039      	beq.n	212b4 <__aeabi_fsub+0x310>
   21240:	291b      	cmp	r1, #27
   21242:	dc44      	bgt.n	212ce <__aeabi_fsub+0x32a>
   21244:	001c      	movs	r4, r3
   21246:	2720      	movs	r7, #32
   21248:	40cc      	lsrs	r4, r1
   2124a:	1a79      	subs	r1, r7, r1
   2124c:	408b      	lsls	r3, r1
   2124e:	1e59      	subs	r1, r3, #1
   21250:	418b      	sbcs	r3, r1
   21252:	4323      	orrs	r3, r4
   21254:	199b      	adds	r3, r3, r6
   21256:	0004      	movs	r4, r0
   21258:	e740      	b.n	210dc <__aeabi_fsub+0x138>
   2125a:	2b00      	cmp	r3, #0
   2125c:	d11a      	bne.n	21294 <__aeabi_fsub+0x2f0>
   2125e:	2e00      	cmp	r6, #0
   21260:	d124      	bne.n	212ac <__aeabi_fsub+0x308>
   21262:	2780      	movs	r7, #128	; 0x80
   21264:	2200      	movs	r2, #0
   21266:	03ff      	lsls	r7, r7, #15
   21268:	e71b      	b.n	210a2 <__aeabi_fsub+0xfe>
   2126a:	0033      	movs	r3, r6
   2126c:	0004      	movs	r4, r0
   2126e:	000d      	movs	r5, r1
   21270:	e6de      	b.n	21030 <__aeabi_fsub+0x8c>
   21272:	28ff      	cmp	r0, #255	; 0xff
   21274:	d01e      	beq.n	212b4 <__aeabi_fsub+0x310>
   21276:	2480      	movs	r4, #128	; 0x80
   21278:	04e4      	lsls	r4, r4, #19
   2127a:	4249      	negs	r1, r1
   2127c:	4323      	orrs	r3, r4
   2127e:	e7df      	b.n	21240 <__aeabi_fsub+0x29c>
   21280:	2e00      	cmp	r6, #0
   21282:	d100      	bne.n	21286 <__aeabi_fsub+0x2e2>
   21284:	e6d4      	b.n	21030 <__aeabi_fsub+0x8c>
   21286:	1b9f      	subs	r7, r3, r6
   21288:	017a      	lsls	r2, r7, #5
   2128a:	d400      	bmi.n	2128e <__aeabi_fsub+0x2ea>
   2128c:	e737      	b.n	210fe <__aeabi_fsub+0x15a>
   2128e:	1af3      	subs	r3, r6, r3
   21290:	000d      	movs	r5, r1
   21292:	e6cd      	b.n	21030 <__aeabi_fsub+0x8c>
   21294:	24ff      	movs	r4, #255	; 0xff
   21296:	2e00      	cmp	r6, #0
   21298:	d100      	bne.n	2129c <__aeabi_fsub+0x2f8>
   2129a:	e6c9      	b.n	21030 <__aeabi_fsub+0x8c>
   2129c:	2280      	movs	r2, #128	; 0x80
   2129e:	4650      	mov	r0, sl
   212a0:	03d2      	lsls	r2, r2, #15
   212a2:	4210      	tst	r0, r2
   212a4:	d0a4      	beq.n	211f0 <__aeabi_fsub+0x24c>
   212a6:	4660      	mov	r0, ip
   212a8:	4210      	tst	r0, r2
   212aa:	d1a1      	bne.n	211f0 <__aeabi_fsub+0x24c>
   212ac:	0033      	movs	r3, r6
   212ae:	000d      	movs	r5, r1
   212b0:	24ff      	movs	r4, #255	; 0xff
   212b2:	e6bd      	b.n	21030 <__aeabi_fsub+0x8c>
   212b4:	0033      	movs	r3, r6
   212b6:	24ff      	movs	r4, #255	; 0xff
   212b8:	e6ba      	b.n	21030 <__aeabi_fsub+0x8c>
   212ba:	2301      	movs	r3, #1
   212bc:	e76e      	b.n	2119c <__aeabi_fsub+0x1f8>
   212be:	0033      	movs	r3, r6
   212c0:	0004      	movs	r4, r0
   212c2:	e6b5      	b.n	21030 <__aeabi_fsub+0x8c>
   212c4:	2700      	movs	r7, #0
   212c6:	2200      	movs	r2, #0
   212c8:	e71c      	b.n	21104 <__aeabi_fsub+0x160>
   212ca:	0033      	movs	r3, r6
   212cc:	e6b0      	b.n	21030 <__aeabi_fsub+0x8c>
   212ce:	2301      	movs	r3, #1
   212d0:	e7c0      	b.n	21254 <__aeabi_fsub+0x2b0>
   212d2:	46c0      	nop			; (mov r8, r8)
   212d4:	7dffffff 	.word	0x7dffffff
   212d8:	fbffffff 	.word	0xfbffffff

000212dc <__aeabi_f2iz>:
   212dc:	0241      	lsls	r1, r0, #9
   212de:	0043      	lsls	r3, r0, #1
   212e0:	0fc2      	lsrs	r2, r0, #31
   212e2:	0a49      	lsrs	r1, r1, #9
   212e4:	0e1b      	lsrs	r3, r3, #24
   212e6:	2000      	movs	r0, #0
   212e8:	2b7e      	cmp	r3, #126	; 0x7e
   212ea:	dd0d      	ble.n	21308 <__aeabi_f2iz+0x2c>
   212ec:	2b9d      	cmp	r3, #157	; 0x9d
   212ee:	dc0c      	bgt.n	2130a <__aeabi_f2iz+0x2e>
   212f0:	2080      	movs	r0, #128	; 0x80
   212f2:	0400      	lsls	r0, r0, #16
   212f4:	4301      	orrs	r1, r0
   212f6:	2b95      	cmp	r3, #149	; 0x95
   212f8:	dc0a      	bgt.n	21310 <__aeabi_f2iz+0x34>
   212fa:	2096      	movs	r0, #150	; 0x96
   212fc:	1ac3      	subs	r3, r0, r3
   212fe:	40d9      	lsrs	r1, r3
   21300:	4248      	negs	r0, r1
   21302:	2a00      	cmp	r2, #0
   21304:	d100      	bne.n	21308 <__aeabi_f2iz+0x2c>
   21306:	0008      	movs	r0, r1
   21308:	4770      	bx	lr
   2130a:	4b03      	ldr	r3, [pc, #12]	; (21318 <__aeabi_f2iz+0x3c>)
   2130c:	18d0      	adds	r0, r2, r3
   2130e:	e7fb      	b.n	21308 <__aeabi_f2iz+0x2c>
   21310:	3b96      	subs	r3, #150	; 0x96
   21312:	4099      	lsls	r1, r3
   21314:	e7f4      	b.n	21300 <__aeabi_f2iz+0x24>
   21316:	46c0      	nop			; (mov r8, r8)
   21318:	7fffffff 	.word	0x7fffffff

0002131c <__aeabi_i2f>:
   2131c:	b570      	push	{r4, r5, r6, lr}
   2131e:	2800      	cmp	r0, #0
   21320:	d030      	beq.n	21384 <__aeabi_i2f+0x68>
   21322:	17c3      	asrs	r3, r0, #31
   21324:	18c4      	adds	r4, r0, r3
   21326:	405c      	eors	r4, r3
   21328:	0fc5      	lsrs	r5, r0, #31
   2132a:	0020      	movs	r0, r4
   2132c:	f001 fcce 	bl	22ccc <__clzsi2>
   21330:	239e      	movs	r3, #158	; 0x9e
   21332:	1a1b      	subs	r3, r3, r0
   21334:	2b96      	cmp	r3, #150	; 0x96
   21336:	dc0d      	bgt.n	21354 <__aeabi_i2f+0x38>
   21338:	2296      	movs	r2, #150	; 0x96
   2133a:	1ad2      	subs	r2, r2, r3
   2133c:	4094      	lsls	r4, r2
   2133e:	002a      	movs	r2, r5
   21340:	0264      	lsls	r4, r4, #9
   21342:	0a64      	lsrs	r4, r4, #9
   21344:	b2db      	uxtb	r3, r3
   21346:	0264      	lsls	r4, r4, #9
   21348:	05db      	lsls	r3, r3, #23
   2134a:	0a60      	lsrs	r0, r4, #9
   2134c:	07d2      	lsls	r2, r2, #31
   2134e:	4318      	orrs	r0, r3
   21350:	4310      	orrs	r0, r2
   21352:	bd70      	pop	{r4, r5, r6, pc}
   21354:	2b99      	cmp	r3, #153	; 0x99
   21356:	dc19      	bgt.n	2138c <__aeabi_i2f+0x70>
   21358:	2299      	movs	r2, #153	; 0x99
   2135a:	1ad2      	subs	r2, r2, r3
   2135c:	2a00      	cmp	r2, #0
   2135e:	dd29      	ble.n	213b4 <__aeabi_i2f+0x98>
   21360:	4094      	lsls	r4, r2
   21362:	0022      	movs	r2, r4
   21364:	4c14      	ldr	r4, [pc, #80]	; (213b8 <__aeabi_i2f+0x9c>)
   21366:	4014      	ands	r4, r2
   21368:	0751      	lsls	r1, r2, #29
   2136a:	d004      	beq.n	21376 <__aeabi_i2f+0x5a>
   2136c:	210f      	movs	r1, #15
   2136e:	400a      	ands	r2, r1
   21370:	2a04      	cmp	r2, #4
   21372:	d000      	beq.n	21376 <__aeabi_i2f+0x5a>
   21374:	3404      	adds	r4, #4
   21376:	0162      	lsls	r2, r4, #5
   21378:	d413      	bmi.n	213a2 <__aeabi_i2f+0x86>
   2137a:	01a4      	lsls	r4, r4, #6
   2137c:	0a64      	lsrs	r4, r4, #9
   2137e:	b2db      	uxtb	r3, r3
   21380:	002a      	movs	r2, r5
   21382:	e7e0      	b.n	21346 <__aeabi_i2f+0x2a>
   21384:	2200      	movs	r2, #0
   21386:	2300      	movs	r3, #0
   21388:	2400      	movs	r4, #0
   2138a:	e7dc      	b.n	21346 <__aeabi_i2f+0x2a>
   2138c:	2205      	movs	r2, #5
   2138e:	0021      	movs	r1, r4
   21390:	1a12      	subs	r2, r2, r0
   21392:	40d1      	lsrs	r1, r2
   21394:	22b9      	movs	r2, #185	; 0xb9
   21396:	1ad2      	subs	r2, r2, r3
   21398:	4094      	lsls	r4, r2
   2139a:	1e62      	subs	r2, r4, #1
   2139c:	4194      	sbcs	r4, r2
   2139e:	430c      	orrs	r4, r1
   213a0:	e7da      	b.n	21358 <__aeabi_i2f+0x3c>
   213a2:	4b05      	ldr	r3, [pc, #20]	; (213b8 <__aeabi_i2f+0x9c>)
   213a4:	002a      	movs	r2, r5
   213a6:	401c      	ands	r4, r3
   213a8:	239f      	movs	r3, #159	; 0x9f
   213aa:	01a4      	lsls	r4, r4, #6
   213ac:	1a1b      	subs	r3, r3, r0
   213ae:	0a64      	lsrs	r4, r4, #9
   213b0:	b2db      	uxtb	r3, r3
   213b2:	e7c8      	b.n	21346 <__aeabi_i2f+0x2a>
   213b4:	0022      	movs	r2, r4
   213b6:	e7d5      	b.n	21364 <__aeabi_i2f+0x48>
   213b8:	fbffffff 	.word	0xfbffffff

000213bc <__aeabi_dadd>:
   213bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   213be:	4645      	mov	r5, r8
   213c0:	46de      	mov	lr, fp
   213c2:	4657      	mov	r7, sl
   213c4:	464e      	mov	r6, r9
   213c6:	030c      	lsls	r4, r1, #12
   213c8:	b5e0      	push	{r5, r6, r7, lr}
   213ca:	004e      	lsls	r6, r1, #1
   213cc:	0fc9      	lsrs	r1, r1, #31
   213ce:	4688      	mov	r8, r1
   213d0:	000d      	movs	r5, r1
   213d2:	0a61      	lsrs	r1, r4, #9
   213d4:	0f44      	lsrs	r4, r0, #29
   213d6:	430c      	orrs	r4, r1
   213d8:	00c7      	lsls	r7, r0, #3
   213da:	0319      	lsls	r1, r3, #12
   213dc:	0058      	lsls	r0, r3, #1
   213de:	0fdb      	lsrs	r3, r3, #31
   213e0:	469b      	mov	fp, r3
   213e2:	0a4b      	lsrs	r3, r1, #9
   213e4:	0f51      	lsrs	r1, r2, #29
   213e6:	430b      	orrs	r3, r1
   213e8:	0d76      	lsrs	r6, r6, #21
   213ea:	0d40      	lsrs	r0, r0, #21
   213ec:	0019      	movs	r1, r3
   213ee:	00d2      	lsls	r2, r2, #3
   213f0:	45d8      	cmp	r8, fp
   213f2:	d100      	bne.n	213f6 <__aeabi_dadd+0x3a>
   213f4:	e0ae      	b.n	21554 <__aeabi_dadd+0x198>
   213f6:	1a35      	subs	r5, r6, r0
   213f8:	2d00      	cmp	r5, #0
   213fa:	dc00      	bgt.n	213fe <__aeabi_dadd+0x42>
   213fc:	e0f6      	b.n	215ec <__aeabi_dadd+0x230>
   213fe:	2800      	cmp	r0, #0
   21400:	d10f      	bne.n	21422 <__aeabi_dadd+0x66>
   21402:	4313      	orrs	r3, r2
   21404:	d100      	bne.n	21408 <__aeabi_dadd+0x4c>
   21406:	e0db      	b.n	215c0 <__aeabi_dadd+0x204>
   21408:	1e6b      	subs	r3, r5, #1
   2140a:	2b00      	cmp	r3, #0
   2140c:	d000      	beq.n	21410 <__aeabi_dadd+0x54>
   2140e:	e137      	b.n	21680 <__aeabi_dadd+0x2c4>
   21410:	1aba      	subs	r2, r7, r2
   21412:	4297      	cmp	r7, r2
   21414:	41bf      	sbcs	r7, r7
   21416:	1a64      	subs	r4, r4, r1
   21418:	427f      	negs	r7, r7
   2141a:	1be4      	subs	r4, r4, r7
   2141c:	2601      	movs	r6, #1
   2141e:	0017      	movs	r7, r2
   21420:	e024      	b.n	2146c <__aeabi_dadd+0xb0>
   21422:	4bc6      	ldr	r3, [pc, #792]	; (2173c <__aeabi_dadd+0x380>)
   21424:	429e      	cmp	r6, r3
   21426:	d04d      	beq.n	214c4 <__aeabi_dadd+0x108>
   21428:	2380      	movs	r3, #128	; 0x80
   2142a:	041b      	lsls	r3, r3, #16
   2142c:	4319      	orrs	r1, r3
   2142e:	2d38      	cmp	r5, #56	; 0x38
   21430:	dd00      	ble.n	21434 <__aeabi_dadd+0x78>
   21432:	e107      	b.n	21644 <__aeabi_dadd+0x288>
   21434:	2d1f      	cmp	r5, #31
   21436:	dd00      	ble.n	2143a <__aeabi_dadd+0x7e>
   21438:	e138      	b.n	216ac <__aeabi_dadd+0x2f0>
   2143a:	2020      	movs	r0, #32
   2143c:	1b43      	subs	r3, r0, r5
   2143e:	469a      	mov	sl, r3
   21440:	000b      	movs	r3, r1
   21442:	4650      	mov	r0, sl
   21444:	4083      	lsls	r3, r0
   21446:	4699      	mov	r9, r3
   21448:	0013      	movs	r3, r2
   2144a:	4648      	mov	r0, r9
   2144c:	40eb      	lsrs	r3, r5
   2144e:	4318      	orrs	r0, r3
   21450:	0003      	movs	r3, r0
   21452:	4650      	mov	r0, sl
   21454:	4082      	lsls	r2, r0
   21456:	1e50      	subs	r0, r2, #1
   21458:	4182      	sbcs	r2, r0
   2145a:	40e9      	lsrs	r1, r5
   2145c:	431a      	orrs	r2, r3
   2145e:	1aba      	subs	r2, r7, r2
   21460:	1a61      	subs	r1, r4, r1
   21462:	4297      	cmp	r7, r2
   21464:	41a4      	sbcs	r4, r4
   21466:	0017      	movs	r7, r2
   21468:	4264      	negs	r4, r4
   2146a:	1b0c      	subs	r4, r1, r4
   2146c:	0223      	lsls	r3, r4, #8
   2146e:	d562      	bpl.n	21536 <__aeabi_dadd+0x17a>
   21470:	0264      	lsls	r4, r4, #9
   21472:	0a65      	lsrs	r5, r4, #9
   21474:	2d00      	cmp	r5, #0
   21476:	d100      	bne.n	2147a <__aeabi_dadd+0xbe>
   21478:	e0df      	b.n	2163a <__aeabi_dadd+0x27e>
   2147a:	0028      	movs	r0, r5
   2147c:	f001 fc26 	bl	22ccc <__clzsi2>
   21480:	0003      	movs	r3, r0
   21482:	3b08      	subs	r3, #8
   21484:	2b1f      	cmp	r3, #31
   21486:	dd00      	ble.n	2148a <__aeabi_dadd+0xce>
   21488:	e0d2      	b.n	21630 <__aeabi_dadd+0x274>
   2148a:	2220      	movs	r2, #32
   2148c:	003c      	movs	r4, r7
   2148e:	1ad2      	subs	r2, r2, r3
   21490:	409d      	lsls	r5, r3
   21492:	40d4      	lsrs	r4, r2
   21494:	409f      	lsls	r7, r3
   21496:	4325      	orrs	r5, r4
   21498:	429e      	cmp	r6, r3
   2149a:	dd00      	ble.n	2149e <__aeabi_dadd+0xe2>
   2149c:	e0c4      	b.n	21628 <__aeabi_dadd+0x26c>
   2149e:	1b9e      	subs	r6, r3, r6
   214a0:	1c73      	adds	r3, r6, #1
   214a2:	2b1f      	cmp	r3, #31
   214a4:	dd00      	ble.n	214a8 <__aeabi_dadd+0xec>
   214a6:	e0f1      	b.n	2168c <__aeabi_dadd+0x2d0>
   214a8:	2220      	movs	r2, #32
   214aa:	0038      	movs	r0, r7
   214ac:	0029      	movs	r1, r5
   214ae:	1ad2      	subs	r2, r2, r3
   214b0:	40d8      	lsrs	r0, r3
   214b2:	4091      	lsls	r1, r2
   214b4:	4097      	lsls	r7, r2
   214b6:	002c      	movs	r4, r5
   214b8:	4301      	orrs	r1, r0
   214ba:	1e78      	subs	r0, r7, #1
   214bc:	4187      	sbcs	r7, r0
   214be:	40dc      	lsrs	r4, r3
   214c0:	2600      	movs	r6, #0
   214c2:	430f      	orrs	r7, r1
   214c4:	077b      	lsls	r3, r7, #29
   214c6:	d009      	beq.n	214dc <__aeabi_dadd+0x120>
   214c8:	230f      	movs	r3, #15
   214ca:	403b      	ands	r3, r7
   214cc:	2b04      	cmp	r3, #4
   214ce:	d005      	beq.n	214dc <__aeabi_dadd+0x120>
   214d0:	1d3b      	adds	r3, r7, #4
   214d2:	42bb      	cmp	r3, r7
   214d4:	41bf      	sbcs	r7, r7
   214d6:	427f      	negs	r7, r7
   214d8:	19e4      	adds	r4, r4, r7
   214da:	001f      	movs	r7, r3
   214dc:	0223      	lsls	r3, r4, #8
   214de:	d52c      	bpl.n	2153a <__aeabi_dadd+0x17e>
   214e0:	4b96      	ldr	r3, [pc, #600]	; (2173c <__aeabi_dadd+0x380>)
   214e2:	3601      	adds	r6, #1
   214e4:	429e      	cmp	r6, r3
   214e6:	d100      	bne.n	214ea <__aeabi_dadd+0x12e>
   214e8:	e09a      	b.n	21620 <__aeabi_dadd+0x264>
   214ea:	4645      	mov	r5, r8
   214ec:	4b94      	ldr	r3, [pc, #592]	; (21740 <__aeabi_dadd+0x384>)
   214ee:	08ff      	lsrs	r7, r7, #3
   214f0:	401c      	ands	r4, r3
   214f2:	0760      	lsls	r0, r4, #29
   214f4:	0576      	lsls	r6, r6, #21
   214f6:	0264      	lsls	r4, r4, #9
   214f8:	4307      	orrs	r7, r0
   214fa:	0b24      	lsrs	r4, r4, #12
   214fc:	0d76      	lsrs	r6, r6, #21
   214fe:	2100      	movs	r1, #0
   21500:	0324      	lsls	r4, r4, #12
   21502:	0b23      	lsrs	r3, r4, #12
   21504:	0d0c      	lsrs	r4, r1, #20
   21506:	4a8f      	ldr	r2, [pc, #572]	; (21744 <__aeabi_dadd+0x388>)
   21508:	0524      	lsls	r4, r4, #20
   2150a:	431c      	orrs	r4, r3
   2150c:	4014      	ands	r4, r2
   2150e:	0533      	lsls	r3, r6, #20
   21510:	4323      	orrs	r3, r4
   21512:	005b      	lsls	r3, r3, #1
   21514:	07ed      	lsls	r5, r5, #31
   21516:	085b      	lsrs	r3, r3, #1
   21518:	432b      	orrs	r3, r5
   2151a:	0038      	movs	r0, r7
   2151c:	0019      	movs	r1, r3
   2151e:	bc3c      	pop	{r2, r3, r4, r5}
   21520:	4690      	mov	r8, r2
   21522:	4699      	mov	r9, r3
   21524:	46a2      	mov	sl, r4
   21526:	46ab      	mov	fp, r5
   21528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2152a:	4664      	mov	r4, ip
   2152c:	4304      	orrs	r4, r0
   2152e:	d100      	bne.n	21532 <__aeabi_dadd+0x176>
   21530:	e211      	b.n	21956 <__aeabi_dadd+0x59a>
   21532:	0004      	movs	r4, r0
   21534:	4667      	mov	r7, ip
   21536:	077b      	lsls	r3, r7, #29
   21538:	d1c6      	bne.n	214c8 <__aeabi_dadd+0x10c>
   2153a:	4645      	mov	r5, r8
   2153c:	0760      	lsls	r0, r4, #29
   2153e:	08ff      	lsrs	r7, r7, #3
   21540:	4307      	orrs	r7, r0
   21542:	08e4      	lsrs	r4, r4, #3
   21544:	4b7d      	ldr	r3, [pc, #500]	; (2173c <__aeabi_dadd+0x380>)
   21546:	429e      	cmp	r6, r3
   21548:	d030      	beq.n	215ac <__aeabi_dadd+0x1f0>
   2154a:	0324      	lsls	r4, r4, #12
   2154c:	0576      	lsls	r6, r6, #21
   2154e:	0b24      	lsrs	r4, r4, #12
   21550:	0d76      	lsrs	r6, r6, #21
   21552:	e7d4      	b.n	214fe <__aeabi_dadd+0x142>
   21554:	1a33      	subs	r3, r6, r0
   21556:	469a      	mov	sl, r3
   21558:	2b00      	cmp	r3, #0
   2155a:	dd78      	ble.n	2164e <__aeabi_dadd+0x292>
   2155c:	2800      	cmp	r0, #0
   2155e:	d031      	beq.n	215c4 <__aeabi_dadd+0x208>
   21560:	4876      	ldr	r0, [pc, #472]	; (2173c <__aeabi_dadd+0x380>)
   21562:	4286      	cmp	r6, r0
   21564:	d0ae      	beq.n	214c4 <__aeabi_dadd+0x108>
   21566:	2080      	movs	r0, #128	; 0x80
   21568:	0400      	lsls	r0, r0, #16
   2156a:	4301      	orrs	r1, r0
   2156c:	4653      	mov	r3, sl
   2156e:	2b38      	cmp	r3, #56	; 0x38
   21570:	dc00      	bgt.n	21574 <__aeabi_dadd+0x1b8>
   21572:	e0e9      	b.n	21748 <__aeabi_dadd+0x38c>
   21574:	430a      	orrs	r2, r1
   21576:	1e51      	subs	r1, r2, #1
   21578:	418a      	sbcs	r2, r1
   2157a:	2100      	movs	r1, #0
   2157c:	19d2      	adds	r2, r2, r7
   2157e:	42ba      	cmp	r2, r7
   21580:	41bf      	sbcs	r7, r7
   21582:	1909      	adds	r1, r1, r4
   21584:	427c      	negs	r4, r7
   21586:	0017      	movs	r7, r2
   21588:	190c      	adds	r4, r1, r4
   2158a:	0223      	lsls	r3, r4, #8
   2158c:	d5d3      	bpl.n	21536 <__aeabi_dadd+0x17a>
   2158e:	4b6b      	ldr	r3, [pc, #428]	; (2173c <__aeabi_dadd+0x380>)
   21590:	3601      	adds	r6, #1
   21592:	429e      	cmp	r6, r3
   21594:	d100      	bne.n	21598 <__aeabi_dadd+0x1dc>
   21596:	e13a      	b.n	2180e <__aeabi_dadd+0x452>
   21598:	2001      	movs	r0, #1
   2159a:	4b69      	ldr	r3, [pc, #420]	; (21740 <__aeabi_dadd+0x384>)
   2159c:	401c      	ands	r4, r3
   2159e:	087b      	lsrs	r3, r7, #1
   215a0:	4007      	ands	r7, r0
   215a2:	431f      	orrs	r7, r3
   215a4:	07e0      	lsls	r0, r4, #31
   215a6:	4307      	orrs	r7, r0
   215a8:	0864      	lsrs	r4, r4, #1
   215aa:	e78b      	b.n	214c4 <__aeabi_dadd+0x108>
   215ac:	0023      	movs	r3, r4
   215ae:	433b      	orrs	r3, r7
   215b0:	d100      	bne.n	215b4 <__aeabi_dadd+0x1f8>
   215b2:	e1cb      	b.n	2194c <__aeabi_dadd+0x590>
   215b4:	2280      	movs	r2, #128	; 0x80
   215b6:	0312      	lsls	r2, r2, #12
   215b8:	4314      	orrs	r4, r2
   215ba:	0324      	lsls	r4, r4, #12
   215bc:	0b24      	lsrs	r4, r4, #12
   215be:	e79e      	b.n	214fe <__aeabi_dadd+0x142>
   215c0:	002e      	movs	r6, r5
   215c2:	e77f      	b.n	214c4 <__aeabi_dadd+0x108>
   215c4:	0008      	movs	r0, r1
   215c6:	4310      	orrs	r0, r2
   215c8:	d100      	bne.n	215cc <__aeabi_dadd+0x210>
   215ca:	e0b4      	b.n	21736 <__aeabi_dadd+0x37a>
   215cc:	1e58      	subs	r0, r3, #1
   215ce:	2800      	cmp	r0, #0
   215d0:	d000      	beq.n	215d4 <__aeabi_dadd+0x218>
   215d2:	e0de      	b.n	21792 <__aeabi_dadd+0x3d6>
   215d4:	18ba      	adds	r2, r7, r2
   215d6:	42ba      	cmp	r2, r7
   215d8:	419b      	sbcs	r3, r3
   215da:	1864      	adds	r4, r4, r1
   215dc:	425b      	negs	r3, r3
   215de:	18e4      	adds	r4, r4, r3
   215e0:	0017      	movs	r7, r2
   215e2:	2601      	movs	r6, #1
   215e4:	0223      	lsls	r3, r4, #8
   215e6:	d5a6      	bpl.n	21536 <__aeabi_dadd+0x17a>
   215e8:	2602      	movs	r6, #2
   215ea:	e7d5      	b.n	21598 <__aeabi_dadd+0x1dc>
   215ec:	2d00      	cmp	r5, #0
   215ee:	d16e      	bne.n	216ce <__aeabi_dadd+0x312>
   215f0:	1c70      	adds	r0, r6, #1
   215f2:	0540      	lsls	r0, r0, #21
   215f4:	0d40      	lsrs	r0, r0, #21
   215f6:	2801      	cmp	r0, #1
   215f8:	dc00      	bgt.n	215fc <__aeabi_dadd+0x240>
   215fa:	e0f9      	b.n	217f0 <__aeabi_dadd+0x434>
   215fc:	1ab8      	subs	r0, r7, r2
   215fe:	4684      	mov	ip, r0
   21600:	4287      	cmp	r7, r0
   21602:	4180      	sbcs	r0, r0
   21604:	1ae5      	subs	r5, r4, r3
   21606:	4240      	negs	r0, r0
   21608:	1a2d      	subs	r5, r5, r0
   2160a:	0228      	lsls	r0, r5, #8
   2160c:	d400      	bmi.n	21610 <__aeabi_dadd+0x254>
   2160e:	e089      	b.n	21724 <__aeabi_dadd+0x368>
   21610:	1bd7      	subs	r7, r2, r7
   21612:	42ba      	cmp	r2, r7
   21614:	4192      	sbcs	r2, r2
   21616:	1b1c      	subs	r4, r3, r4
   21618:	4252      	negs	r2, r2
   2161a:	1aa5      	subs	r5, r4, r2
   2161c:	46d8      	mov	r8, fp
   2161e:	e729      	b.n	21474 <__aeabi_dadd+0xb8>
   21620:	4645      	mov	r5, r8
   21622:	2400      	movs	r4, #0
   21624:	2700      	movs	r7, #0
   21626:	e76a      	b.n	214fe <__aeabi_dadd+0x142>
   21628:	4c45      	ldr	r4, [pc, #276]	; (21740 <__aeabi_dadd+0x384>)
   2162a:	1af6      	subs	r6, r6, r3
   2162c:	402c      	ands	r4, r5
   2162e:	e749      	b.n	214c4 <__aeabi_dadd+0x108>
   21630:	003d      	movs	r5, r7
   21632:	3828      	subs	r0, #40	; 0x28
   21634:	4085      	lsls	r5, r0
   21636:	2700      	movs	r7, #0
   21638:	e72e      	b.n	21498 <__aeabi_dadd+0xdc>
   2163a:	0038      	movs	r0, r7
   2163c:	f001 fb46 	bl	22ccc <__clzsi2>
   21640:	3020      	adds	r0, #32
   21642:	e71d      	b.n	21480 <__aeabi_dadd+0xc4>
   21644:	430a      	orrs	r2, r1
   21646:	1e51      	subs	r1, r2, #1
   21648:	418a      	sbcs	r2, r1
   2164a:	2100      	movs	r1, #0
   2164c:	e707      	b.n	2145e <__aeabi_dadd+0xa2>
   2164e:	2b00      	cmp	r3, #0
   21650:	d000      	beq.n	21654 <__aeabi_dadd+0x298>
   21652:	e0f3      	b.n	2183c <__aeabi_dadd+0x480>
   21654:	1c70      	adds	r0, r6, #1
   21656:	0543      	lsls	r3, r0, #21
   21658:	0d5b      	lsrs	r3, r3, #21
   2165a:	2b01      	cmp	r3, #1
   2165c:	dc00      	bgt.n	21660 <__aeabi_dadd+0x2a4>
   2165e:	e0ad      	b.n	217bc <__aeabi_dadd+0x400>
   21660:	4b36      	ldr	r3, [pc, #216]	; (2173c <__aeabi_dadd+0x380>)
   21662:	4298      	cmp	r0, r3
   21664:	d100      	bne.n	21668 <__aeabi_dadd+0x2ac>
   21666:	e0d1      	b.n	2180c <__aeabi_dadd+0x450>
   21668:	18ba      	adds	r2, r7, r2
   2166a:	42ba      	cmp	r2, r7
   2166c:	41bf      	sbcs	r7, r7
   2166e:	1864      	adds	r4, r4, r1
   21670:	427f      	negs	r7, r7
   21672:	19e4      	adds	r4, r4, r7
   21674:	07e7      	lsls	r7, r4, #31
   21676:	0852      	lsrs	r2, r2, #1
   21678:	4317      	orrs	r7, r2
   2167a:	0864      	lsrs	r4, r4, #1
   2167c:	0006      	movs	r6, r0
   2167e:	e721      	b.n	214c4 <__aeabi_dadd+0x108>
   21680:	482e      	ldr	r0, [pc, #184]	; (2173c <__aeabi_dadd+0x380>)
   21682:	4285      	cmp	r5, r0
   21684:	d100      	bne.n	21688 <__aeabi_dadd+0x2cc>
   21686:	e093      	b.n	217b0 <__aeabi_dadd+0x3f4>
   21688:	001d      	movs	r5, r3
   2168a:	e6d0      	b.n	2142e <__aeabi_dadd+0x72>
   2168c:	0029      	movs	r1, r5
   2168e:	3e1f      	subs	r6, #31
   21690:	40f1      	lsrs	r1, r6
   21692:	2b20      	cmp	r3, #32
   21694:	d100      	bne.n	21698 <__aeabi_dadd+0x2dc>
   21696:	e08d      	b.n	217b4 <__aeabi_dadd+0x3f8>
   21698:	2240      	movs	r2, #64	; 0x40
   2169a:	1ad3      	subs	r3, r2, r3
   2169c:	409d      	lsls	r5, r3
   2169e:	432f      	orrs	r7, r5
   216a0:	1e7d      	subs	r5, r7, #1
   216a2:	41af      	sbcs	r7, r5
   216a4:	2400      	movs	r4, #0
   216a6:	430f      	orrs	r7, r1
   216a8:	2600      	movs	r6, #0
   216aa:	e744      	b.n	21536 <__aeabi_dadd+0x17a>
   216ac:	002b      	movs	r3, r5
   216ae:	0008      	movs	r0, r1
   216b0:	3b20      	subs	r3, #32
   216b2:	40d8      	lsrs	r0, r3
   216b4:	0003      	movs	r3, r0
   216b6:	2d20      	cmp	r5, #32
   216b8:	d100      	bne.n	216bc <__aeabi_dadd+0x300>
   216ba:	e07d      	b.n	217b8 <__aeabi_dadd+0x3fc>
   216bc:	2040      	movs	r0, #64	; 0x40
   216be:	1b45      	subs	r5, r0, r5
   216c0:	40a9      	lsls	r1, r5
   216c2:	430a      	orrs	r2, r1
   216c4:	1e51      	subs	r1, r2, #1
   216c6:	418a      	sbcs	r2, r1
   216c8:	2100      	movs	r1, #0
   216ca:	431a      	orrs	r2, r3
   216cc:	e6c7      	b.n	2145e <__aeabi_dadd+0xa2>
   216ce:	2e00      	cmp	r6, #0
   216d0:	d050      	beq.n	21774 <__aeabi_dadd+0x3b8>
   216d2:	4e1a      	ldr	r6, [pc, #104]	; (2173c <__aeabi_dadd+0x380>)
   216d4:	42b0      	cmp	r0, r6
   216d6:	d057      	beq.n	21788 <__aeabi_dadd+0x3cc>
   216d8:	2680      	movs	r6, #128	; 0x80
   216da:	426b      	negs	r3, r5
   216dc:	4699      	mov	r9, r3
   216de:	0436      	lsls	r6, r6, #16
   216e0:	4334      	orrs	r4, r6
   216e2:	464b      	mov	r3, r9
   216e4:	2b38      	cmp	r3, #56	; 0x38
   216e6:	dd00      	ble.n	216ea <__aeabi_dadd+0x32e>
   216e8:	e0d6      	b.n	21898 <__aeabi_dadd+0x4dc>
   216ea:	2b1f      	cmp	r3, #31
   216ec:	dd00      	ble.n	216f0 <__aeabi_dadd+0x334>
   216ee:	e135      	b.n	2195c <__aeabi_dadd+0x5a0>
   216f0:	2620      	movs	r6, #32
   216f2:	1af5      	subs	r5, r6, r3
   216f4:	0026      	movs	r6, r4
   216f6:	40ae      	lsls	r6, r5
   216f8:	46b2      	mov	sl, r6
   216fa:	003e      	movs	r6, r7
   216fc:	40de      	lsrs	r6, r3
   216fe:	46ac      	mov	ip, r5
   21700:	0035      	movs	r5, r6
   21702:	4656      	mov	r6, sl
   21704:	432e      	orrs	r6, r5
   21706:	4665      	mov	r5, ip
   21708:	40af      	lsls	r7, r5
   2170a:	1e7d      	subs	r5, r7, #1
   2170c:	41af      	sbcs	r7, r5
   2170e:	40dc      	lsrs	r4, r3
   21710:	4337      	orrs	r7, r6
   21712:	1bd7      	subs	r7, r2, r7
   21714:	42ba      	cmp	r2, r7
   21716:	4192      	sbcs	r2, r2
   21718:	1b0c      	subs	r4, r1, r4
   2171a:	4252      	negs	r2, r2
   2171c:	1aa4      	subs	r4, r4, r2
   2171e:	0006      	movs	r6, r0
   21720:	46d8      	mov	r8, fp
   21722:	e6a3      	b.n	2146c <__aeabi_dadd+0xb0>
   21724:	4664      	mov	r4, ip
   21726:	4667      	mov	r7, ip
   21728:	432c      	orrs	r4, r5
   2172a:	d000      	beq.n	2172e <__aeabi_dadd+0x372>
   2172c:	e6a2      	b.n	21474 <__aeabi_dadd+0xb8>
   2172e:	2500      	movs	r5, #0
   21730:	2600      	movs	r6, #0
   21732:	2700      	movs	r7, #0
   21734:	e706      	b.n	21544 <__aeabi_dadd+0x188>
   21736:	001e      	movs	r6, r3
   21738:	e6c4      	b.n	214c4 <__aeabi_dadd+0x108>
   2173a:	46c0      	nop			; (mov r8, r8)
   2173c:	000007ff 	.word	0x000007ff
   21740:	ff7fffff 	.word	0xff7fffff
   21744:	800fffff 	.word	0x800fffff
   21748:	2b1f      	cmp	r3, #31
   2174a:	dc63      	bgt.n	21814 <__aeabi_dadd+0x458>
   2174c:	2020      	movs	r0, #32
   2174e:	1ac3      	subs	r3, r0, r3
   21750:	0008      	movs	r0, r1
   21752:	4098      	lsls	r0, r3
   21754:	469c      	mov	ip, r3
   21756:	4683      	mov	fp, r0
   21758:	4653      	mov	r3, sl
   2175a:	0010      	movs	r0, r2
   2175c:	40d8      	lsrs	r0, r3
   2175e:	0003      	movs	r3, r0
   21760:	4658      	mov	r0, fp
   21762:	4318      	orrs	r0, r3
   21764:	4663      	mov	r3, ip
   21766:	409a      	lsls	r2, r3
   21768:	1e53      	subs	r3, r2, #1
   2176a:	419a      	sbcs	r2, r3
   2176c:	4653      	mov	r3, sl
   2176e:	4302      	orrs	r2, r0
   21770:	40d9      	lsrs	r1, r3
   21772:	e703      	b.n	2157c <__aeabi_dadd+0x1c0>
   21774:	0026      	movs	r6, r4
   21776:	433e      	orrs	r6, r7
   21778:	d006      	beq.n	21788 <__aeabi_dadd+0x3cc>
   2177a:	43eb      	mvns	r3, r5
   2177c:	4699      	mov	r9, r3
   2177e:	2b00      	cmp	r3, #0
   21780:	d0c7      	beq.n	21712 <__aeabi_dadd+0x356>
   21782:	4e94      	ldr	r6, [pc, #592]	; (219d4 <__aeabi_dadd+0x618>)
   21784:	42b0      	cmp	r0, r6
   21786:	d1ac      	bne.n	216e2 <__aeabi_dadd+0x326>
   21788:	000c      	movs	r4, r1
   2178a:	0017      	movs	r7, r2
   2178c:	0006      	movs	r6, r0
   2178e:	46d8      	mov	r8, fp
   21790:	e698      	b.n	214c4 <__aeabi_dadd+0x108>
   21792:	4b90      	ldr	r3, [pc, #576]	; (219d4 <__aeabi_dadd+0x618>)
   21794:	459a      	cmp	sl, r3
   21796:	d00b      	beq.n	217b0 <__aeabi_dadd+0x3f4>
   21798:	4682      	mov	sl, r0
   2179a:	e6e7      	b.n	2156c <__aeabi_dadd+0x1b0>
   2179c:	2800      	cmp	r0, #0
   2179e:	d000      	beq.n	217a2 <__aeabi_dadd+0x3e6>
   217a0:	e09e      	b.n	218e0 <__aeabi_dadd+0x524>
   217a2:	0018      	movs	r0, r3
   217a4:	4310      	orrs	r0, r2
   217a6:	d100      	bne.n	217aa <__aeabi_dadd+0x3ee>
   217a8:	e0e9      	b.n	2197e <__aeabi_dadd+0x5c2>
   217aa:	001c      	movs	r4, r3
   217ac:	0017      	movs	r7, r2
   217ae:	46d8      	mov	r8, fp
   217b0:	4e88      	ldr	r6, [pc, #544]	; (219d4 <__aeabi_dadd+0x618>)
   217b2:	e687      	b.n	214c4 <__aeabi_dadd+0x108>
   217b4:	2500      	movs	r5, #0
   217b6:	e772      	b.n	2169e <__aeabi_dadd+0x2e2>
   217b8:	2100      	movs	r1, #0
   217ba:	e782      	b.n	216c2 <__aeabi_dadd+0x306>
   217bc:	0023      	movs	r3, r4
   217be:	433b      	orrs	r3, r7
   217c0:	2e00      	cmp	r6, #0
   217c2:	d000      	beq.n	217c6 <__aeabi_dadd+0x40a>
   217c4:	e0ab      	b.n	2191e <__aeabi_dadd+0x562>
   217c6:	2b00      	cmp	r3, #0
   217c8:	d100      	bne.n	217cc <__aeabi_dadd+0x410>
   217ca:	e0e7      	b.n	2199c <__aeabi_dadd+0x5e0>
   217cc:	000b      	movs	r3, r1
   217ce:	4313      	orrs	r3, r2
   217d0:	d100      	bne.n	217d4 <__aeabi_dadd+0x418>
   217d2:	e677      	b.n	214c4 <__aeabi_dadd+0x108>
   217d4:	18ba      	adds	r2, r7, r2
   217d6:	42ba      	cmp	r2, r7
   217d8:	41bf      	sbcs	r7, r7
   217da:	1864      	adds	r4, r4, r1
   217dc:	427f      	negs	r7, r7
   217de:	19e4      	adds	r4, r4, r7
   217e0:	0223      	lsls	r3, r4, #8
   217e2:	d400      	bmi.n	217e6 <__aeabi_dadd+0x42a>
   217e4:	e0f2      	b.n	219cc <__aeabi_dadd+0x610>
   217e6:	4b7c      	ldr	r3, [pc, #496]	; (219d8 <__aeabi_dadd+0x61c>)
   217e8:	0017      	movs	r7, r2
   217ea:	401c      	ands	r4, r3
   217ec:	0006      	movs	r6, r0
   217ee:	e669      	b.n	214c4 <__aeabi_dadd+0x108>
   217f0:	0020      	movs	r0, r4
   217f2:	4338      	orrs	r0, r7
   217f4:	2e00      	cmp	r6, #0
   217f6:	d1d1      	bne.n	2179c <__aeabi_dadd+0x3e0>
   217f8:	2800      	cmp	r0, #0
   217fa:	d15b      	bne.n	218b4 <__aeabi_dadd+0x4f8>
   217fc:	001c      	movs	r4, r3
   217fe:	4314      	orrs	r4, r2
   21800:	d100      	bne.n	21804 <__aeabi_dadd+0x448>
   21802:	e0a8      	b.n	21956 <__aeabi_dadd+0x59a>
   21804:	001c      	movs	r4, r3
   21806:	0017      	movs	r7, r2
   21808:	46d8      	mov	r8, fp
   2180a:	e65b      	b.n	214c4 <__aeabi_dadd+0x108>
   2180c:	0006      	movs	r6, r0
   2180e:	2400      	movs	r4, #0
   21810:	2700      	movs	r7, #0
   21812:	e697      	b.n	21544 <__aeabi_dadd+0x188>
   21814:	4650      	mov	r0, sl
   21816:	000b      	movs	r3, r1
   21818:	3820      	subs	r0, #32
   2181a:	40c3      	lsrs	r3, r0
   2181c:	4699      	mov	r9, r3
   2181e:	4653      	mov	r3, sl
   21820:	2b20      	cmp	r3, #32
   21822:	d100      	bne.n	21826 <__aeabi_dadd+0x46a>
   21824:	e095      	b.n	21952 <__aeabi_dadd+0x596>
   21826:	2340      	movs	r3, #64	; 0x40
   21828:	4650      	mov	r0, sl
   2182a:	1a1b      	subs	r3, r3, r0
   2182c:	4099      	lsls	r1, r3
   2182e:	430a      	orrs	r2, r1
   21830:	1e51      	subs	r1, r2, #1
   21832:	418a      	sbcs	r2, r1
   21834:	464b      	mov	r3, r9
   21836:	2100      	movs	r1, #0
   21838:	431a      	orrs	r2, r3
   2183a:	e69f      	b.n	2157c <__aeabi_dadd+0x1c0>
   2183c:	2e00      	cmp	r6, #0
   2183e:	d130      	bne.n	218a2 <__aeabi_dadd+0x4e6>
   21840:	0026      	movs	r6, r4
   21842:	433e      	orrs	r6, r7
   21844:	d067      	beq.n	21916 <__aeabi_dadd+0x55a>
   21846:	43db      	mvns	r3, r3
   21848:	469a      	mov	sl, r3
   2184a:	2b00      	cmp	r3, #0
   2184c:	d01c      	beq.n	21888 <__aeabi_dadd+0x4cc>
   2184e:	4e61      	ldr	r6, [pc, #388]	; (219d4 <__aeabi_dadd+0x618>)
   21850:	42b0      	cmp	r0, r6
   21852:	d060      	beq.n	21916 <__aeabi_dadd+0x55a>
   21854:	4653      	mov	r3, sl
   21856:	2b38      	cmp	r3, #56	; 0x38
   21858:	dd00      	ble.n	2185c <__aeabi_dadd+0x4a0>
   2185a:	e096      	b.n	2198a <__aeabi_dadd+0x5ce>
   2185c:	2b1f      	cmp	r3, #31
   2185e:	dd00      	ble.n	21862 <__aeabi_dadd+0x4a6>
   21860:	e09f      	b.n	219a2 <__aeabi_dadd+0x5e6>
   21862:	2620      	movs	r6, #32
   21864:	1af3      	subs	r3, r6, r3
   21866:	0026      	movs	r6, r4
   21868:	409e      	lsls	r6, r3
   2186a:	469c      	mov	ip, r3
   2186c:	46b3      	mov	fp, r6
   2186e:	4653      	mov	r3, sl
   21870:	003e      	movs	r6, r7
   21872:	40de      	lsrs	r6, r3
   21874:	0033      	movs	r3, r6
   21876:	465e      	mov	r6, fp
   21878:	431e      	orrs	r6, r3
   2187a:	4663      	mov	r3, ip
   2187c:	409f      	lsls	r7, r3
   2187e:	1e7b      	subs	r3, r7, #1
   21880:	419f      	sbcs	r7, r3
   21882:	4653      	mov	r3, sl
   21884:	40dc      	lsrs	r4, r3
   21886:	4337      	orrs	r7, r6
   21888:	18bf      	adds	r7, r7, r2
   2188a:	4297      	cmp	r7, r2
   2188c:	4192      	sbcs	r2, r2
   2188e:	1864      	adds	r4, r4, r1
   21890:	4252      	negs	r2, r2
   21892:	18a4      	adds	r4, r4, r2
   21894:	0006      	movs	r6, r0
   21896:	e678      	b.n	2158a <__aeabi_dadd+0x1ce>
   21898:	4327      	orrs	r7, r4
   2189a:	1e7c      	subs	r4, r7, #1
   2189c:	41a7      	sbcs	r7, r4
   2189e:	2400      	movs	r4, #0
   218a0:	e737      	b.n	21712 <__aeabi_dadd+0x356>
   218a2:	4e4c      	ldr	r6, [pc, #304]	; (219d4 <__aeabi_dadd+0x618>)
   218a4:	42b0      	cmp	r0, r6
   218a6:	d036      	beq.n	21916 <__aeabi_dadd+0x55a>
   218a8:	2680      	movs	r6, #128	; 0x80
   218aa:	425b      	negs	r3, r3
   218ac:	0436      	lsls	r6, r6, #16
   218ae:	469a      	mov	sl, r3
   218b0:	4334      	orrs	r4, r6
   218b2:	e7cf      	b.n	21854 <__aeabi_dadd+0x498>
   218b4:	0018      	movs	r0, r3
   218b6:	4310      	orrs	r0, r2
   218b8:	d100      	bne.n	218bc <__aeabi_dadd+0x500>
   218ba:	e603      	b.n	214c4 <__aeabi_dadd+0x108>
   218bc:	1ab8      	subs	r0, r7, r2
   218be:	4684      	mov	ip, r0
   218c0:	4567      	cmp	r7, ip
   218c2:	41ad      	sbcs	r5, r5
   218c4:	1ae0      	subs	r0, r4, r3
   218c6:	426d      	negs	r5, r5
   218c8:	1b40      	subs	r0, r0, r5
   218ca:	0205      	lsls	r5, r0, #8
   218cc:	d400      	bmi.n	218d0 <__aeabi_dadd+0x514>
   218ce:	e62c      	b.n	2152a <__aeabi_dadd+0x16e>
   218d0:	1bd7      	subs	r7, r2, r7
   218d2:	42ba      	cmp	r2, r7
   218d4:	4192      	sbcs	r2, r2
   218d6:	1b1c      	subs	r4, r3, r4
   218d8:	4252      	negs	r2, r2
   218da:	1aa4      	subs	r4, r4, r2
   218dc:	46d8      	mov	r8, fp
   218de:	e5f1      	b.n	214c4 <__aeabi_dadd+0x108>
   218e0:	0018      	movs	r0, r3
   218e2:	4310      	orrs	r0, r2
   218e4:	d100      	bne.n	218e8 <__aeabi_dadd+0x52c>
   218e6:	e763      	b.n	217b0 <__aeabi_dadd+0x3f4>
   218e8:	08f8      	lsrs	r0, r7, #3
   218ea:	0767      	lsls	r7, r4, #29
   218ec:	4307      	orrs	r7, r0
   218ee:	2080      	movs	r0, #128	; 0x80
   218f0:	08e4      	lsrs	r4, r4, #3
   218f2:	0300      	lsls	r0, r0, #12
   218f4:	4204      	tst	r4, r0
   218f6:	d008      	beq.n	2190a <__aeabi_dadd+0x54e>
   218f8:	08dd      	lsrs	r5, r3, #3
   218fa:	4205      	tst	r5, r0
   218fc:	d105      	bne.n	2190a <__aeabi_dadd+0x54e>
   218fe:	08d2      	lsrs	r2, r2, #3
   21900:	0759      	lsls	r1, r3, #29
   21902:	4311      	orrs	r1, r2
   21904:	000f      	movs	r7, r1
   21906:	002c      	movs	r4, r5
   21908:	46d8      	mov	r8, fp
   2190a:	0f7b      	lsrs	r3, r7, #29
   2190c:	00e4      	lsls	r4, r4, #3
   2190e:	431c      	orrs	r4, r3
   21910:	00ff      	lsls	r7, r7, #3
   21912:	4e30      	ldr	r6, [pc, #192]	; (219d4 <__aeabi_dadd+0x618>)
   21914:	e5d6      	b.n	214c4 <__aeabi_dadd+0x108>
   21916:	000c      	movs	r4, r1
   21918:	0017      	movs	r7, r2
   2191a:	0006      	movs	r6, r0
   2191c:	e5d2      	b.n	214c4 <__aeabi_dadd+0x108>
   2191e:	2b00      	cmp	r3, #0
   21920:	d038      	beq.n	21994 <__aeabi_dadd+0x5d8>
   21922:	000b      	movs	r3, r1
   21924:	4313      	orrs	r3, r2
   21926:	d100      	bne.n	2192a <__aeabi_dadd+0x56e>
   21928:	e742      	b.n	217b0 <__aeabi_dadd+0x3f4>
   2192a:	08f8      	lsrs	r0, r7, #3
   2192c:	0767      	lsls	r7, r4, #29
   2192e:	4307      	orrs	r7, r0
   21930:	2080      	movs	r0, #128	; 0x80
   21932:	08e4      	lsrs	r4, r4, #3
   21934:	0300      	lsls	r0, r0, #12
   21936:	4204      	tst	r4, r0
   21938:	d0e7      	beq.n	2190a <__aeabi_dadd+0x54e>
   2193a:	08cb      	lsrs	r3, r1, #3
   2193c:	4203      	tst	r3, r0
   2193e:	d1e4      	bne.n	2190a <__aeabi_dadd+0x54e>
   21940:	08d2      	lsrs	r2, r2, #3
   21942:	0749      	lsls	r1, r1, #29
   21944:	4311      	orrs	r1, r2
   21946:	000f      	movs	r7, r1
   21948:	001c      	movs	r4, r3
   2194a:	e7de      	b.n	2190a <__aeabi_dadd+0x54e>
   2194c:	2700      	movs	r7, #0
   2194e:	2400      	movs	r4, #0
   21950:	e5d5      	b.n	214fe <__aeabi_dadd+0x142>
   21952:	2100      	movs	r1, #0
   21954:	e76b      	b.n	2182e <__aeabi_dadd+0x472>
   21956:	2500      	movs	r5, #0
   21958:	2700      	movs	r7, #0
   2195a:	e5f3      	b.n	21544 <__aeabi_dadd+0x188>
   2195c:	464e      	mov	r6, r9
   2195e:	0025      	movs	r5, r4
   21960:	3e20      	subs	r6, #32
   21962:	40f5      	lsrs	r5, r6
   21964:	464b      	mov	r3, r9
   21966:	002e      	movs	r6, r5
   21968:	2b20      	cmp	r3, #32
   2196a:	d02d      	beq.n	219c8 <__aeabi_dadd+0x60c>
   2196c:	2540      	movs	r5, #64	; 0x40
   2196e:	1aed      	subs	r5, r5, r3
   21970:	40ac      	lsls	r4, r5
   21972:	4327      	orrs	r7, r4
   21974:	1e7c      	subs	r4, r7, #1
   21976:	41a7      	sbcs	r7, r4
   21978:	2400      	movs	r4, #0
   2197a:	4337      	orrs	r7, r6
   2197c:	e6c9      	b.n	21712 <__aeabi_dadd+0x356>
   2197e:	2480      	movs	r4, #128	; 0x80
   21980:	2500      	movs	r5, #0
   21982:	0324      	lsls	r4, r4, #12
   21984:	4e13      	ldr	r6, [pc, #76]	; (219d4 <__aeabi_dadd+0x618>)
   21986:	2700      	movs	r7, #0
   21988:	e5dc      	b.n	21544 <__aeabi_dadd+0x188>
   2198a:	4327      	orrs	r7, r4
   2198c:	1e7c      	subs	r4, r7, #1
   2198e:	41a7      	sbcs	r7, r4
   21990:	2400      	movs	r4, #0
   21992:	e779      	b.n	21888 <__aeabi_dadd+0x4cc>
   21994:	000c      	movs	r4, r1
   21996:	0017      	movs	r7, r2
   21998:	4e0e      	ldr	r6, [pc, #56]	; (219d4 <__aeabi_dadd+0x618>)
   2199a:	e593      	b.n	214c4 <__aeabi_dadd+0x108>
   2199c:	000c      	movs	r4, r1
   2199e:	0017      	movs	r7, r2
   219a0:	e590      	b.n	214c4 <__aeabi_dadd+0x108>
   219a2:	4656      	mov	r6, sl
   219a4:	0023      	movs	r3, r4
   219a6:	3e20      	subs	r6, #32
   219a8:	40f3      	lsrs	r3, r6
   219aa:	4699      	mov	r9, r3
   219ac:	4653      	mov	r3, sl
   219ae:	2b20      	cmp	r3, #32
   219b0:	d00e      	beq.n	219d0 <__aeabi_dadd+0x614>
   219b2:	2340      	movs	r3, #64	; 0x40
   219b4:	4656      	mov	r6, sl
   219b6:	1b9b      	subs	r3, r3, r6
   219b8:	409c      	lsls	r4, r3
   219ba:	4327      	orrs	r7, r4
   219bc:	1e7c      	subs	r4, r7, #1
   219be:	41a7      	sbcs	r7, r4
   219c0:	464b      	mov	r3, r9
   219c2:	2400      	movs	r4, #0
   219c4:	431f      	orrs	r7, r3
   219c6:	e75f      	b.n	21888 <__aeabi_dadd+0x4cc>
   219c8:	2400      	movs	r4, #0
   219ca:	e7d2      	b.n	21972 <__aeabi_dadd+0x5b6>
   219cc:	0017      	movs	r7, r2
   219ce:	e5b2      	b.n	21536 <__aeabi_dadd+0x17a>
   219d0:	2400      	movs	r4, #0
   219d2:	e7f2      	b.n	219ba <__aeabi_dadd+0x5fe>
   219d4:	000007ff 	.word	0x000007ff
   219d8:	ff7fffff 	.word	0xff7fffff

000219dc <__aeabi_ddiv>:
   219dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   219de:	4657      	mov	r7, sl
   219e0:	4645      	mov	r5, r8
   219e2:	46de      	mov	lr, fp
   219e4:	464e      	mov	r6, r9
   219e6:	b5e0      	push	{r5, r6, r7, lr}
   219e8:	004c      	lsls	r4, r1, #1
   219ea:	030e      	lsls	r6, r1, #12
   219ec:	b087      	sub	sp, #28
   219ee:	4683      	mov	fp, r0
   219f0:	4692      	mov	sl, r2
   219f2:	001d      	movs	r5, r3
   219f4:	4680      	mov	r8, r0
   219f6:	0b36      	lsrs	r6, r6, #12
   219f8:	0d64      	lsrs	r4, r4, #21
   219fa:	0fcf      	lsrs	r7, r1, #31
   219fc:	2c00      	cmp	r4, #0
   219fe:	d04f      	beq.n	21aa0 <__aeabi_ddiv+0xc4>
   21a00:	4b6f      	ldr	r3, [pc, #444]	; (21bc0 <__aeabi_ddiv+0x1e4>)
   21a02:	429c      	cmp	r4, r3
   21a04:	d035      	beq.n	21a72 <__aeabi_ddiv+0x96>
   21a06:	2380      	movs	r3, #128	; 0x80
   21a08:	0f42      	lsrs	r2, r0, #29
   21a0a:	041b      	lsls	r3, r3, #16
   21a0c:	00f6      	lsls	r6, r6, #3
   21a0e:	4313      	orrs	r3, r2
   21a10:	4333      	orrs	r3, r6
   21a12:	4699      	mov	r9, r3
   21a14:	00c3      	lsls	r3, r0, #3
   21a16:	4698      	mov	r8, r3
   21a18:	4b6a      	ldr	r3, [pc, #424]	; (21bc4 <__aeabi_ddiv+0x1e8>)
   21a1a:	2600      	movs	r6, #0
   21a1c:	469c      	mov	ip, r3
   21a1e:	2300      	movs	r3, #0
   21a20:	4464      	add	r4, ip
   21a22:	9303      	str	r3, [sp, #12]
   21a24:	032b      	lsls	r3, r5, #12
   21a26:	0b1b      	lsrs	r3, r3, #12
   21a28:	469b      	mov	fp, r3
   21a2a:	006b      	lsls	r3, r5, #1
   21a2c:	0fed      	lsrs	r5, r5, #31
   21a2e:	4650      	mov	r0, sl
   21a30:	0d5b      	lsrs	r3, r3, #21
   21a32:	9501      	str	r5, [sp, #4]
   21a34:	d05e      	beq.n	21af4 <__aeabi_ddiv+0x118>
   21a36:	4a62      	ldr	r2, [pc, #392]	; (21bc0 <__aeabi_ddiv+0x1e4>)
   21a38:	4293      	cmp	r3, r2
   21a3a:	d053      	beq.n	21ae4 <__aeabi_ddiv+0x108>
   21a3c:	465a      	mov	r2, fp
   21a3e:	00d1      	lsls	r1, r2, #3
   21a40:	2280      	movs	r2, #128	; 0x80
   21a42:	0f40      	lsrs	r0, r0, #29
   21a44:	0412      	lsls	r2, r2, #16
   21a46:	4302      	orrs	r2, r0
   21a48:	430a      	orrs	r2, r1
   21a4a:	4693      	mov	fp, r2
   21a4c:	4652      	mov	r2, sl
   21a4e:	00d1      	lsls	r1, r2, #3
   21a50:	4a5c      	ldr	r2, [pc, #368]	; (21bc4 <__aeabi_ddiv+0x1e8>)
   21a52:	4694      	mov	ip, r2
   21a54:	2200      	movs	r2, #0
   21a56:	4463      	add	r3, ip
   21a58:	0038      	movs	r0, r7
   21a5a:	4068      	eors	r0, r5
   21a5c:	4684      	mov	ip, r0
   21a5e:	9002      	str	r0, [sp, #8]
   21a60:	1ae4      	subs	r4, r4, r3
   21a62:	4316      	orrs	r6, r2
   21a64:	2e0f      	cmp	r6, #15
   21a66:	d900      	bls.n	21a6a <__aeabi_ddiv+0x8e>
   21a68:	e0b4      	b.n	21bd4 <__aeabi_ddiv+0x1f8>
   21a6a:	4b57      	ldr	r3, [pc, #348]	; (21bc8 <__aeabi_ddiv+0x1ec>)
   21a6c:	00b6      	lsls	r6, r6, #2
   21a6e:	599b      	ldr	r3, [r3, r6]
   21a70:	469f      	mov	pc, r3
   21a72:	0003      	movs	r3, r0
   21a74:	4333      	orrs	r3, r6
   21a76:	4699      	mov	r9, r3
   21a78:	d16c      	bne.n	21b54 <__aeabi_ddiv+0x178>
   21a7a:	2300      	movs	r3, #0
   21a7c:	4698      	mov	r8, r3
   21a7e:	3302      	adds	r3, #2
   21a80:	2608      	movs	r6, #8
   21a82:	9303      	str	r3, [sp, #12]
   21a84:	e7ce      	b.n	21a24 <__aeabi_ddiv+0x48>
   21a86:	46cb      	mov	fp, r9
   21a88:	4641      	mov	r1, r8
   21a8a:	9a03      	ldr	r2, [sp, #12]
   21a8c:	9701      	str	r7, [sp, #4]
   21a8e:	2a02      	cmp	r2, #2
   21a90:	d165      	bne.n	21b5e <__aeabi_ddiv+0x182>
   21a92:	9b01      	ldr	r3, [sp, #4]
   21a94:	4c4a      	ldr	r4, [pc, #296]	; (21bc0 <__aeabi_ddiv+0x1e4>)
   21a96:	469c      	mov	ip, r3
   21a98:	2300      	movs	r3, #0
   21a9a:	2200      	movs	r2, #0
   21a9c:	4698      	mov	r8, r3
   21a9e:	e06b      	b.n	21b78 <__aeabi_ddiv+0x19c>
   21aa0:	0003      	movs	r3, r0
   21aa2:	4333      	orrs	r3, r6
   21aa4:	4699      	mov	r9, r3
   21aa6:	d04e      	beq.n	21b46 <__aeabi_ddiv+0x16a>
   21aa8:	2e00      	cmp	r6, #0
   21aaa:	d100      	bne.n	21aae <__aeabi_ddiv+0xd2>
   21aac:	e1bc      	b.n	21e28 <__aeabi_ddiv+0x44c>
   21aae:	0030      	movs	r0, r6
   21ab0:	f001 f90c 	bl	22ccc <__clzsi2>
   21ab4:	0003      	movs	r3, r0
   21ab6:	3b0b      	subs	r3, #11
   21ab8:	2b1c      	cmp	r3, #28
   21aba:	dd00      	ble.n	21abe <__aeabi_ddiv+0xe2>
   21abc:	e1ac      	b.n	21e18 <__aeabi_ddiv+0x43c>
   21abe:	221d      	movs	r2, #29
   21ac0:	1ad3      	subs	r3, r2, r3
   21ac2:	465a      	mov	r2, fp
   21ac4:	0001      	movs	r1, r0
   21ac6:	40da      	lsrs	r2, r3
   21ac8:	3908      	subs	r1, #8
   21aca:	408e      	lsls	r6, r1
   21acc:	0013      	movs	r3, r2
   21ace:	4333      	orrs	r3, r6
   21ad0:	4699      	mov	r9, r3
   21ad2:	465b      	mov	r3, fp
   21ad4:	408b      	lsls	r3, r1
   21ad6:	4698      	mov	r8, r3
   21ad8:	2300      	movs	r3, #0
   21ada:	4c3c      	ldr	r4, [pc, #240]	; (21bcc <__aeabi_ddiv+0x1f0>)
   21adc:	2600      	movs	r6, #0
   21ade:	1a24      	subs	r4, r4, r0
   21ae0:	9303      	str	r3, [sp, #12]
   21ae2:	e79f      	b.n	21a24 <__aeabi_ddiv+0x48>
   21ae4:	4651      	mov	r1, sl
   21ae6:	465a      	mov	r2, fp
   21ae8:	4311      	orrs	r1, r2
   21aea:	d129      	bne.n	21b40 <__aeabi_ddiv+0x164>
   21aec:	2200      	movs	r2, #0
   21aee:	4693      	mov	fp, r2
   21af0:	3202      	adds	r2, #2
   21af2:	e7b1      	b.n	21a58 <__aeabi_ddiv+0x7c>
   21af4:	4659      	mov	r1, fp
   21af6:	4301      	orrs	r1, r0
   21af8:	d01e      	beq.n	21b38 <__aeabi_ddiv+0x15c>
   21afa:	465b      	mov	r3, fp
   21afc:	2b00      	cmp	r3, #0
   21afe:	d100      	bne.n	21b02 <__aeabi_ddiv+0x126>
   21b00:	e19e      	b.n	21e40 <__aeabi_ddiv+0x464>
   21b02:	4658      	mov	r0, fp
   21b04:	f001 f8e2 	bl	22ccc <__clzsi2>
   21b08:	0003      	movs	r3, r0
   21b0a:	3b0b      	subs	r3, #11
   21b0c:	2b1c      	cmp	r3, #28
   21b0e:	dd00      	ble.n	21b12 <__aeabi_ddiv+0x136>
   21b10:	e18f      	b.n	21e32 <__aeabi_ddiv+0x456>
   21b12:	0002      	movs	r2, r0
   21b14:	4659      	mov	r1, fp
   21b16:	3a08      	subs	r2, #8
   21b18:	4091      	lsls	r1, r2
   21b1a:	468b      	mov	fp, r1
   21b1c:	211d      	movs	r1, #29
   21b1e:	1acb      	subs	r3, r1, r3
   21b20:	4651      	mov	r1, sl
   21b22:	40d9      	lsrs	r1, r3
   21b24:	000b      	movs	r3, r1
   21b26:	4659      	mov	r1, fp
   21b28:	430b      	orrs	r3, r1
   21b2a:	4651      	mov	r1, sl
   21b2c:	469b      	mov	fp, r3
   21b2e:	4091      	lsls	r1, r2
   21b30:	4b26      	ldr	r3, [pc, #152]	; (21bcc <__aeabi_ddiv+0x1f0>)
   21b32:	2200      	movs	r2, #0
   21b34:	1a1b      	subs	r3, r3, r0
   21b36:	e78f      	b.n	21a58 <__aeabi_ddiv+0x7c>
   21b38:	2300      	movs	r3, #0
   21b3a:	2201      	movs	r2, #1
   21b3c:	469b      	mov	fp, r3
   21b3e:	e78b      	b.n	21a58 <__aeabi_ddiv+0x7c>
   21b40:	4651      	mov	r1, sl
   21b42:	2203      	movs	r2, #3
   21b44:	e788      	b.n	21a58 <__aeabi_ddiv+0x7c>
   21b46:	2300      	movs	r3, #0
   21b48:	4698      	mov	r8, r3
   21b4a:	3301      	adds	r3, #1
   21b4c:	2604      	movs	r6, #4
   21b4e:	2400      	movs	r4, #0
   21b50:	9303      	str	r3, [sp, #12]
   21b52:	e767      	b.n	21a24 <__aeabi_ddiv+0x48>
   21b54:	2303      	movs	r3, #3
   21b56:	46b1      	mov	r9, r6
   21b58:	9303      	str	r3, [sp, #12]
   21b5a:	260c      	movs	r6, #12
   21b5c:	e762      	b.n	21a24 <__aeabi_ddiv+0x48>
   21b5e:	2a03      	cmp	r2, #3
   21b60:	d100      	bne.n	21b64 <__aeabi_ddiv+0x188>
   21b62:	e25c      	b.n	2201e <__aeabi_ddiv+0x642>
   21b64:	9b01      	ldr	r3, [sp, #4]
   21b66:	2a01      	cmp	r2, #1
   21b68:	d000      	beq.n	21b6c <__aeabi_ddiv+0x190>
   21b6a:	e1e4      	b.n	21f36 <__aeabi_ddiv+0x55a>
   21b6c:	4013      	ands	r3, r2
   21b6e:	469c      	mov	ip, r3
   21b70:	2300      	movs	r3, #0
   21b72:	2400      	movs	r4, #0
   21b74:	2200      	movs	r2, #0
   21b76:	4698      	mov	r8, r3
   21b78:	2100      	movs	r1, #0
   21b7a:	0312      	lsls	r2, r2, #12
   21b7c:	0b13      	lsrs	r3, r2, #12
   21b7e:	0d0a      	lsrs	r2, r1, #20
   21b80:	0512      	lsls	r2, r2, #20
   21b82:	431a      	orrs	r2, r3
   21b84:	0523      	lsls	r3, r4, #20
   21b86:	4c12      	ldr	r4, [pc, #72]	; (21bd0 <__aeabi_ddiv+0x1f4>)
   21b88:	4640      	mov	r0, r8
   21b8a:	4022      	ands	r2, r4
   21b8c:	4313      	orrs	r3, r2
   21b8e:	4662      	mov	r2, ip
   21b90:	005b      	lsls	r3, r3, #1
   21b92:	07d2      	lsls	r2, r2, #31
   21b94:	085b      	lsrs	r3, r3, #1
   21b96:	4313      	orrs	r3, r2
   21b98:	0019      	movs	r1, r3
   21b9a:	b007      	add	sp, #28
   21b9c:	bc3c      	pop	{r2, r3, r4, r5}
   21b9e:	4690      	mov	r8, r2
   21ba0:	4699      	mov	r9, r3
   21ba2:	46a2      	mov	sl, r4
   21ba4:	46ab      	mov	fp, r5
   21ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ba8:	2300      	movs	r3, #0
   21baa:	2280      	movs	r2, #128	; 0x80
   21bac:	469c      	mov	ip, r3
   21bae:	0312      	lsls	r2, r2, #12
   21bb0:	4698      	mov	r8, r3
   21bb2:	4c03      	ldr	r4, [pc, #12]	; (21bc0 <__aeabi_ddiv+0x1e4>)
   21bb4:	e7e0      	b.n	21b78 <__aeabi_ddiv+0x19c>
   21bb6:	2300      	movs	r3, #0
   21bb8:	4c01      	ldr	r4, [pc, #4]	; (21bc0 <__aeabi_ddiv+0x1e4>)
   21bba:	2200      	movs	r2, #0
   21bbc:	4698      	mov	r8, r3
   21bbe:	e7db      	b.n	21b78 <__aeabi_ddiv+0x19c>
   21bc0:	000007ff 	.word	0x000007ff
   21bc4:	fffffc01 	.word	0xfffffc01
   21bc8:	00028e38 	.word	0x00028e38
   21bcc:	fffffc0d 	.word	0xfffffc0d
   21bd0:	800fffff 	.word	0x800fffff
   21bd4:	45d9      	cmp	r9, fp
   21bd6:	d900      	bls.n	21bda <__aeabi_ddiv+0x1fe>
   21bd8:	e139      	b.n	21e4e <__aeabi_ddiv+0x472>
   21bda:	d100      	bne.n	21bde <__aeabi_ddiv+0x202>
   21bdc:	e134      	b.n	21e48 <__aeabi_ddiv+0x46c>
   21bde:	2300      	movs	r3, #0
   21be0:	4646      	mov	r6, r8
   21be2:	464d      	mov	r5, r9
   21be4:	469a      	mov	sl, r3
   21be6:	3c01      	subs	r4, #1
   21be8:	465b      	mov	r3, fp
   21bea:	0e0a      	lsrs	r2, r1, #24
   21bec:	021b      	lsls	r3, r3, #8
   21bee:	431a      	orrs	r2, r3
   21bf0:	020b      	lsls	r3, r1, #8
   21bf2:	0c17      	lsrs	r7, r2, #16
   21bf4:	9303      	str	r3, [sp, #12]
   21bf6:	0413      	lsls	r3, r2, #16
   21bf8:	0c1b      	lsrs	r3, r3, #16
   21bfa:	0039      	movs	r1, r7
   21bfc:	0028      	movs	r0, r5
   21bfe:	4690      	mov	r8, r2
   21c00:	9301      	str	r3, [sp, #4]
   21c02:	f7fe fc35 	bl	20470 <__udivsi3>
   21c06:	0002      	movs	r2, r0
   21c08:	9b01      	ldr	r3, [sp, #4]
   21c0a:	4683      	mov	fp, r0
   21c0c:	435a      	muls	r2, r3
   21c0e:	0028      	movs	r0, r5
   21c10:	0039      	movs	r1, r7
   21c12:	4691      	mov	r9, r2
   21c14:	f7fe fcb2 	bl	2057c <__aeabi_uidivmod>
   21c18:	0c35      	lsrs	r5, r6, #16
   21c1a:	0409      	lsls	r1, r1, #16
   21c1c:	430d      	orrs	r5, r1
   21c1e:	45a9      	cmp	r9, r5
   21c20:	d90d      	bls.n	21c3e <__aeabi_ddiv+0x262>
   21c22:	465b      	mov	r3, fp
   21c24:	4445      	add	r5, r8
   21c26:	3b01      	subs	r3, #1
   21c28:	45a8      	cmp	r8, r5
   21c2a:	d900      	bls.n	21c2e <__aeabi_ddiv+0x252>
   21c2c:	e13a      	b.n	21ea4 <__aeabi_ddiv+0x4c8>
   21c2e:	45a9      	cmp	r9, r5
   21c30:	d800      	bhi.n	21c34 <__aeabi_ddiv+0x258>
   21c32:	e137      	b.n	21ea4 <__aeabi_ddiv+0x4c8>
   21c34:	2302      	movs	r3, #2
   21c36:	425b      	negs	r3, r3
   21c38:	469c      	mov	ip, r3
   21c3a:	4445      	add	r5, r8
   21c3c:	44e3      	add	fp, ip
   21c3e:	464b      	mov	r3, r9
   21c40:	1aeb      	subs	r3, r5, r3
   21c42:	0039      	movs	r1, r7
   21c44:	0018      	movs	r0, r3
   21c46:	9304      	str	r3, [sp, #16]
   21c48:	f7fe fc12 	bl	20470 <__udivsi3>
   21c4c:	9b01      	ldr	r3, [sp, #4]
   21c4e:	0005      	movs	r5, r0
   21c50:	4343      	muls	r3, r0
   21c52:	0039      	movs	r1, r7
   21c54:	9804      	ldr	r0, [sp, #16]
   21c56:	4699      	mov	r9, r3
   21c58:	f7fe fc90 	bl	2057c <__aeabi_uidivmod>
   21c5c:	0433      	lsls	r3, r6, #16
   21c5e:	0409      	lsls	r1, r1, #16
   21c60:	0c1b      	lsrs	r3, r3, #16
   21c62:	430b      	orrs	r3, r1
   21c64:	4599      	cmp	r9, r3
   21c66:	d909      	bls.n	21c7c <__aeabi_ddiv+0x2a0>
   21c68:	4443      	add	r3, r8
   21c6a:	1e6a      	subs	r2, r5, #1
   21c6c:	4598      	cmp	r8, r3
   21c6e:	d900      	bls.n	21c72 <__aeabi_ddiv+0x296>
   21c70:	e11a      	b.n	21ea8 <__aeabi_ddiv+0x4cc>
   21c72:	4599      	cmp	r9, r3
   21c74:	d800      	bhi.n	21c78 <__aeabi_ddiv+0x29c>
   21c76:	e117      	b.n	21ea8 <__aeabi_ddiv+0x4cc>
   21c78:	3d02      	subs	r5, #2
   21c7a:	4443      	add	r3, r8
   21c7c:	464a      	mov	r2, r9
   21c7e:	1a9b      	subs	r3, r3, r2
   21c80:	465a      	mov	r2, fp
   21c82:	0412      	lsls	r2, r2, #16
   21c84:	432a      	orrs	r2, r5
   21c86:	9903      	ldr	r1, [sp, #12]
   21c88:	4693      	mov	fp, r2
   21c8a:	0c10      	lsrs	r0, r2, #16
   21c8c:	0c0a      	lsrs	r2, r1, #16
   21c8e:	4691      	mov	r9, r2
   21c90:	0409      	lsls	r1, r1, #16
   21c92:	465a      	mov	r2, fp
   21c94:	0c09      	lsrs	r1, r1, #16
   21c96:	464e      	mov	r6, r9
   21c98:	000d      	movs	r5, r1
   21c9a:	0412      	lsls	r2, r2, #16
   21c9c:	0c12      	lsrs	r2, r2, #16
   21c9e:	4345      	muls	r5, r0
   21ca0:	9105      	str	r1, [sp, #20]
   21ca2:	4351      	muls	r1, r2
   21ca4:	4372      	muls	r2, r6
   21ca6:	4370      	muls	r0, r6
   21ca8:	1952      	adds	r2, r2, r5
   21caa:	0c0e      	lsrs	r6, r1, #16
   21cac:	18b2      	adds	r2, r6, r2
   21cae:	4295      	cmp	r5, r2
   21cb0:	d903      	bls.n	21cba <__aeabi_ddiv+0x2de>
   21cb2:	2580      	movs	r5, #128	; 0x80
   21cb4:	026d      	lsls	r5, r5, #9
   21cb6:	46ac      	mov	ip, r5
   21cb8:	4460      	add	r0, ip
   21cba:	0c15      	lsrs	r5, r2, #16
   21cbc:	0409      	lsls	r1, r1, #16
   21cbe:	0412      	lsls	r2, r2, #16
   21cc0:	0c09      	lsrs	r1, r1, #16
   21cc2:	1828      	adds	r0, r5, r0
   21cc4:	1852      	adds	r2, r2, r1
   21cc6:	4283      	cmp	r3, r0
   21cc8:	d200      	bcs.n	21ccc <__aeabi_ddiv+0x2f0>
   21cca:	e0ce      	b.n	21e6a <__aeabi_ddiv+0x48e>
   21ccc:	d100      	bne.n	21cd0 <__aeabi_ddiv+0x2f4>
   21cce:	e0c8      	b.n	21e62 <__aeabi_ddiv+0x486>
   21cd0:	1a1d      	subs	r5, r3, r0
   21cd2:	4653      	mov	r3, sl
   21cd4:	1a9e      	subs	r6, r3, r2
   21cd6:	45b2      	cmp	sl, r6
   21cd8:	4192      	sbcs	r2, r2
   21cda:	4252      	negs	r2, r2
   21cdc:	1aab      	subs	r3, r5, r2
   21cde:	469a      	mov	sl, r3
   21ce0:	4598      	cmp	r8, r3
   21ce2:	d100      	bne.n	21ce6 <__aeabi_ddiv+0x30a>
   21ce4:	e117      	b.n	21f16 <__aeabi_ddiv+0x53a>
   21ce6:	0039      	movs	r1, r7
   21ce8:	0018      	movs	r0, r3
   21cea:	f7fe fbc1 	bl	20470 <__udivsi3>
   21cee:	9b01      	ldr	r3, [sp, #4]
   21cf0:	0005      	movs	r5, r0
   21cf2:	4343      	muls	r3, r0
   21cf4:	0039      	movs	r1, r7
   21cf6:	4650      	mov	r0, sl
   21cf8:	9304      	str	r3, [sp, #16]
   21cfa:	f7fe fc3f 	bl	2057c <__aeabi_uidivmod>
   21cfe:	9804      	ldr	r0, [sp, #16]
   21d00:	040b      	lsls	r3, r1, #16
   21d02:	0c31      	lsrs	r1, r6, #16
   21d04:	4319      	orrs	r1, r3
   21d06:	4288      	cmp	r0, r1
   21d08:	d909      	bls.n	21d1e <__aeabi_ddiv+0x342>
   21d0a:	4441      	add	r1, r8
   21d0c:	1e6b      	subs	r3, r5, #1
   21d0e:	4588      	cmp	r8, r1
   21d10:	d900      	bls.n	21d14 <__aeabi_ddiv+0x338>
   21d12:	e107      	b.n	21f24 <__aeabi_ddiv+0x548>
   21d14:	4288      	cmp	r0, r1
   21d16:	d800      	bhi.n	21d1a <__aeabi_ddiv+0x33e>
   21d18:	e104      	b.n	21f24 <__aeabi_ddiv+0x548>
   21d1a:	3d02      	subs	r5, #2
   21d1c:	4441      	add	r1, r8
   21d1e:	9b04      	ldr	r3, [sp, #16]
   21d20:	1acb      	subs	r3, r1, r3
   21d22:	0018      	movs	r0, r3
   21d24:	0039      	movs	r1, r7
   21d26:	9304      	str	r3, [sp, #16]
   21d28:	f7fe fba2 	bl	20470 <__udivsi3>
   21d2c:	9b01      	ldr	r3, [sp, #4]
   21d2e:	4682      	mov	sl, r0
   21d30:	4343      	muls	r3, r0
   21d32:	0039      	movs	r1, r7
   21d34:	9804      	ldr	r0, [sp, #16]
   21d36:	9301      	str	r3, [sp, #4]
   21d38:	f7fe fc20 	bl	2057c <__aeabi_uidivmod>
   21d3c:	9801      	ldr	r0, [sp, #4]
   21d3e:	040b      	lsls	r3, r1, #16
   21d40:	0431      	lsls	r1, r6, #16
   21d42:	0c09      	lsrs	r1, r1, #16
   21d44:	4319      	orrs	r1, r3
   21d46:	4288      	cmp	r0, r1
   21d48:	d90d      	bls.n	21d66 <__aeabi_ddiv+0x38a>
   21d4a:	4653      	mov	r3, sl
   21d4c:	4441      	add	r1, r8
   21d4e:	3b01      	subs	r3, #1
   21d50:	4588      	cmp	r8, r1
   21d52:	d900      	bls.n	21d56 <__aeabi_ddiv+0x37a>
   21d54:	e0e8      	b.n	21f28 <__aeabi_ddiv+0x54c>
   21d56:	4288      	cmp	r0, r1
   21d58:	d800      	bhi.n	21d5c <__aeabi_ddiv+0x380>
   21d5a:	e0e5      	b.n	21f28 <__aeabi_ddiv+0x54c>
   21d5c:	2302      	movs	r3, #2
   21d5e:	425b      	negs	r3, r3
   21d60:	469c      	mov	ip, r3
   21d62:	4441      	add	r1, r8
   21d64:	44e2      	add	sl, ip
   21d66:	9b01      	ldr	r3, [sp, #4]
   21d68:	042d      	lsls	r5, r5, #16
   21d6a:	1ace      	subs	r6, r1, r3
   21d6c:	4651      	mov	r1, sl
   21d6e:	4329      	orrs	r1, r5
   21d70:	9d05      	ldr	r5, [sp, #20]
   21d72:	464f      	mov	r7, r9
   21d74:	002a      	movs	r2, r5
   21d76:	040b      	lsls	r3, r1, #16
   21d78:	0c08      	lsrs	r0, r1, #16
   21d7a:	0c1b      	lsrs	r3, r3, #16
   21d7c:	435a      	muls	r2, r3
   21d7e:	4345      	muls	r5, r0
   21d80:	437b      	muls	r3, r7
   21d82:	4378      	muls	r0, r7
   21d84:	195b      	adds	r3, r3, r5
   21d86:	0c17      	lsrs	r7, r2, #16
   21d88:	18fb      	adds	r3, r7, r3
   21d8a:	429d      	cmp	r5, r3
   21d8c:	d903      	bls.n	21d96 <__aeabi_ddiv+0x3ba>
   21d8e:	2580      	movs	r5, #128	; 0x80
   21d90:	026d      	lsls	r5, r5, #9
   21d92:	46ac      	mov	ip, r5
   21d94:	4460      	add	r0, ip
   21d96:	0c1d      	lsrs	r5, r3, #16
   21d98:	0412      	lsls	r2, r2, #16
   21d9a:	041b      	lsls	r3, r3, #16
   21d9c:	0c12      	lsrs	r2, r2, #16
   21d9e:	1828      	adds	r0, r5, r0
   21da0:	189b      	adds	r3, r3, r2
   21da2:	4286      	cmp	r6, r0
   21da4:	d200      	bcs.n	21da8 <__aeabi_ddiv+0x3cc>
   21da6:	e093      	b.n	21ed0 <__aeabi_ddiv+0x4f4>
   21da8:	d100      	bne.n	21dac <__aeabi_ddiv+0x3d0>
   21daa:	e08e      	b.n	21eca <__aeabi_ddiv+0x4ee>
   21dac:	2301      	movs	r3, #1
   21dae:	4319      	orrs	r1, r3
   21db0:	4ba0      	ldr	r3, [pc, #640]	; (22034 <__aeabi_ddiv+0x658>)
   21db2:	18e3      	adds	r3, r4, r3
   21db4:	2b00      	cmp	r3, #0
   21db6:	dc00      	bgt.n	21dba <__aeabi_ddiv+0x3de>
   21db8:	e099      	b.n	21eee <__aeabi_ddiv+0x512>
   21dba:	074a      	lsls	r2, r1, #29
   21dbc:	d000      	beq.n	21dc0 <__aeabi_ddiv+0x3e4>
   21dbe:	e09e      	b.n	21efe <__aeabi_ddiv+0x522>
   21dc0:	465a      	mov	r2, fp
   21dc2:	01d2      	lsls	r2, r2, #7
   21dc4:	d506      	bpl.n	21dd4 <__aeabi_ddiv+0x3f8>
   21dc6:	465a      	mov	r2, fp
   21dc8:	4b9b      	ldr	r3, [pc, #620]	; (22038 <__aeabi_ddiv+0x65c>)
   21dca:	401a      	ands	r2, r3
   21dcc:	2380      	movs	r3, #128	; 0x80
   21dce:	4693      	mov	fp, r2
   21dd0:	00db      	lsls	r3, r3, #3
   21dd2:	18e3      	adds	r3, r4, r3
   21dd4:	4a99      	ldr	r2, [pc, #612]	; (2203c <__aeabi_ddiv+0x660>)
   21dd6:	4293      	cmp	r3, r2
   21dd8:	dd68      	ble.n	21eac <__aeabi_ddiv+0x4d0>
   21dda:	2301      	movs	r3, #1
   21ddc:	9a02      	ldr	r2, [sp, #8]
   21dde:	4c98      	ldr	r4, [pc, #608]	; (22040 <__aeabi_ddiv+0x664>)
   21de0:	401a      	ands	r2, r3
   21de2:	2300      	movs	r3, #0
   21de4:	4694      	mov	ip, r2
   21de6:	4698      	mov	r8, r3
   21de8:	2200      	movs	r2, #0
   21dea:	e6c5      	b.n	21b78 <__aeabi_ddiv+0x19c>
   21dec:	2280      	movs	r2, #128	; 0x80
   21dee:	464b      	mov	r3, r9
   21df0:	0312      	lsls	r2, r2, #12
   21df2:	4213      	tst	r3, r2
   21df4:	d00a      	beq.n	21e0c <__aeabi_ddiv+0x430>
   21df6:	465b      	mov	r3, fp
   21df8:	4213      	tst	r3, r2
   21dfa:	d106      	bne.n	21e0a <__aeabi_ddiv+0x42e>
   21dfc:	431a      	orrs	r2, r3
   21dfe:	0312      	lsls	r2, r2, #12
   21e00:	0b12      	lsrs	r2, r2, #12
   21e02:	46ac      	mov	ip, r5
   21e04:	4688      	mov	r8, r1
   21e06:	4c8e      	ldr	r4, [pc, #568]	; (22040 <__aeabi_ddiv+0x664>)
   21e08:	e6b6      	b.n	21b78 <__aeabi_ddiv+0x19c>
   21e0a:	464b      	mov	r3, r9
   21e0c:	431a      	orrs	r2, r3
   21e0e:	0312      	lsls	r2, r2, #12
   21e10:	0b12      	lsrs	r2, r2, #12
   21e12:	46bc      	mov	ip, r7
   21e14:	4c8a      	ldr	r4, [pc, #552]	; (22040 <__aeabi_ddiv+0x664>)
   21e16:	e6af      	b.n	21b78 <__aeabi_ddiv+0x19c>
   21e18:	0003      	movs	r3, r0
   21e1a:	465a      	mov	r2, fp
   21e1c:	3b28      	subs	r3, #40	; 0x28
   21e1e:	409a      	lsls	r2, r3
   21e20:	2300      	movs	r3, #0
   21e22:	4691      	mov	r9, r2
   21e24:	4698      	mov	r8, r3
   21e26:	e657      	b.n	21ad8 <__aeabi_ddiv+0xfc>
   21e28:	4658      	mov	r0, fp
   21e2a:	f000 ff4f 	bl	22ccc <__clzsi2>
   21e2e:	3020      	adds	r0, #32
   21e30:	e640      	b.n	21ab4 <__aeabi_ddiv+0xd8>
   21e32:	0003      	movs	r3, r0
   21e34:	4652      	mov	r2, sl
   21e36:	3b28      	subs	r3, #40	; 0x28
   21e38:	409a      	lsls	r2, r3
   21e3a:	2100      	movs	r1, #0
   21e3c:	4693      	mov	fp, r2
   21e3e:	e677      	b.n	21b30 <__aeabi_ddiv+0x154>
   21e40:	f000 ff44 	bl	22ccc <__clzsi2>
   21e44:	3020      	adds	r0, #32
   21e46:	e65f      	b.n	21b08 <__aeabi_ddiv+0x12c>
   21e48:	4588      	cmp	r8, r1
   21e4a:	d200      	bcs.n	21e4e <__aeabi_ddiv+0x472>
   21e4c:	e6c7      	b.n	21bde <__aeabi_ddiv+0x202>
   21e4e:	464b      	mov	r3, r9
   21e50:	07de      	lsls	r6, r3, #31
   21e52:	085d      	lsrs	r5, r3, #1
   21e54:	4643      	mov	r3, r8
   21e56:	085b      	lsrs	r3, r3, #1
   21e58:	431e      	orrs	r6, r3
   21e5a:	4643      	mov	r3, r8
   21e5c:	07db      	lsls	r3, r3, #31
   21e5e:	469a      	mov	sl, r3
   21e60:	e6c2      	b.n	21be8 <__aeabi_ddiv+0x20c>
   21e62:	2500      	movs	r5, #0
   21e64:	4592      	cmp	sl, r2
   21e66:	d300      	bcc.n	21e6a <__aeabi_ddiv+0x48e>
   21e68:	e733      	b.n	21cd2 <__aeabi_ddiv+0x2f6>
   21e6a:	9e03      	ldr	r6, [sp, #12]
   21e6c:	4659      	mov	r1, fp
   21e6e:	46b4      	mov	ip, r6
   21e70:	44e2      	add	sl, ip
   21e72:	45b2      	cmp	sl, r6
   21e74:	41ad      	sbcs	r5, r5
   21e76:	426d      	negs	r5, r5
   21e78:	4445      	add	r5, r8
   21e7a:	18eb      	adds	r3, r5, r3
   21e7c:	3901      	subs	r1, #1
   21e7e:	4598      	cmp	r8, r3
   21e80:	d207      	bcs.n	21e92 <__aeabi_ddiv+0x4b6>
   21e82:	4298      	cmp	r0, r3
   21e84:	d900      	bls.n	21e88 <__aeabi_ddiv+0x4ac>
   21e86:	e07f      	b.n	21f88 <__aeabi_ddiv+0x5ac>
   21e88:	d100      	bne.n	21e8c <__aeabi_ddiv+0x4b0>
   21e8a:	e0bc      	b.n	22006 <__aeabi_ddiv+0x62a>
   21e8c:	1a1d      	subs	r5, r3, r0
   21e8e:	468b      	mov	fp, r1
   21e90:	e71f      	b.n	21cd2 <__aeabi_ddiv+0x2f6>
   21e92:	4598      	cmp	r8, r3
   21e94:	d1fa      	bne.n	21e8c <__aeabi_ddiv+0x4b0>
   21e96:	9d03      	ldr	r5, [sp, #12]
   21e98:	4555      	cmp	r5, sl
   21e9a:	d9f2      	bls.n	21e82 <__aeabi_ddiv+0x4a6>
   21e9c:	4643      	mov	r3, r8
   21e9e:	468b      	mov	fp, r1
   21ea0:	1a1d      	subs	r5, r3, r0
   21ea2:	e716      	b.n	21cd2 <__aeabi_ddiv+0x2f6>
   21ea4:	469b      	mov	fp, r3
   21ea6:	e6ca      	b.n	21c3e <__aeabi_ddiv+0x262>
   21ea8:	0015      	movs	r5, r2
   21eaa:	e6e7      	b.n	21c7c <__aeabi_ddiv+0x2a0>
   21eac:	465a      	mov	r2, fp
   21eae:	08c9      	lsrs	r1, r1, #3
   21eb0:	0752      	lsls	r2, r2, #29
   21eb2:	430a      	orrs	r2, r1
   21eb4:	055b      	lsls	r3, r3, #21
   21eb6:	4690      	mov	r8, r2
   21eb8:	0d5c      	lsrs	r4, r3, #21
   21eba:	465a      	mov	r2, fp
   21ebc:	2301      	movs	r3, #1
   21ebe:	9902      	ldr	r1, [sp, #8]
   21ec0:	0252      	lsls	r2, r2, #9
   21ec2:	4019      	ands	r1, r3
   21ec4:	0b12      	lsrs	r2, r2, #12
   21ec6:	468c      	mov	ip, r1
   21ec8:	e656      	b.n	21b78 <__aeabi_ddiv+0x19c>
   21eca:	2b00      	cmp	r3, #0
   21ecc:	d100      	bne.n	21ed0 <__aeabi_ddiv+0x4f4>
   21ece:	e76f      	b.n	21db0 <__aeabi_ddiv+0x3d4>
   21ed0:	4446      	add	r6, r8
   21ed2:	1e4a      	subs	r2, r1, #1
   21ed4:	45b0      	cmp	r8, r6
   21ed6:	d929      	bls.n	21f2c <__aeabi_ddiv+0x550>
   21ed8:	0011      	movs	r1, r2
   21eda:	4286      	cmp	r6, r0
   21edc:	d000      	beq.n	21ee0 <__aeabi_ddiv+0x504>
   21ede:	e765      	b.n	21dac <__aeabi_ddiv+0x3d0>
   21ee0:	9a03      	ldr	r2, [sp, #12]
   21ee2:	4293      	cmp	r3, r2
   21ee4:	d000      	beq.n	21ee8 <__aeabi_ddiv+0x50c>
   21ee6:	e761      	b.n	21dac <__aeabi_ddiv+0x3d0>
   21ee8:	e762      	b.n	21db0 <__aeabi_ddiv+0x3d4>
   21eea:	2101      	movs	r1, #1
   21eec:	4249      	negs	r1, r1
   21eee:	2001      	movs	r0, #1
   21ef0:	1ac2      	subs	r2, r0, r3
   21ef2:	2a38      	cmp	r2, #56	; 0x38
   21ef4:	dd21      	ble.n	21f3a <__aeabi_ddiv+0x55e>
   21ef6:	9b02      	ldr	r3, [sp, #8]
   21ef8:	4003      	ands	r3, r0
   21efa:	469c      	mov	ip, r3
   21efc:	e638      	b.n	21b70 <__aeabi_ddiv+0x194>
   21efe:	220f      	movs	r2, #15
   21f00:	400a      	ands	r2, r1
   21f02:	2a04      	cmp	r2, #4
   21f04:	d100      	bne.n	21f08 <__aeabi_ddiv+0x52c>
   21f06:	e75b      	b.n	21dc0 <__aeabi_ddiv+0x3e4>
   21f08:	000a      	movs	r2, r1
   21f0a:	1d11      	adds	r1, r2, #4
   21f0c:	4291      	cmp	r1, r2
   21f0e:	4192      	sbcs	r2, r2
   21f10:	4252      	negs	r2, r2
   21f12:	4493      	add	fp, r2
   21f14:	e754      	b.n	21dc0 <__aeabi_ddiv+0x3e4>
   21f16:	4b47      	ldr	r3, [pc, #284]	; (22034 <__aeabi_ddiv+0x658>)
   21f18:	18e3      	adds	r3, r4, r3
   21f1a:	2b00      	cmp	r3, #0
   21f1c:	dde5      	ble.n	21eea <__aeabi_ddiv+0x50e>
   21f1e:	2201      	movs	r2, #1
   21f20:	4252      	negs	r2, r2
   21f22:	e7f2      	b.n	21f0a <__aeabi_ddiv+0x52e>
   21f24:	001d      	movs	r5, r3
   21f26:	e6fa      	b.n	21d1e <__aeabi_ddiv+0x342>
   21f28:	469a      	mov	sl, r3
   21f2a:	e71c      	b.n	21d66 <__aeabi_ddiv+0x38a>
   21f2c:	42b0      	cmp	r0, r6
   21f2e:	d839      	bhi.n	21fa4 <__aeabi_ddiv+0x5c8>
   21f30:	d06e      	beq.n	22010 <__aeabi_ddiv+0x634>
   21f32:	0011      	movs	r1, r2
   21f34:	e73a      	b.n	21dac <__aeabi_ddiv+0x3d0>
   21f36:	9302      	str	r3, [sp, #8]
   21f38:	e73a      	b.n	21db0 <__aeabi_ddiv+0x3d4>
   21f3a:	2a1f      	cmp	r2, #31
   21f3c:	dc3c      	bgt.n	21fb8 <__aeabi_ddiv+0x5dc>
   21f3e:	2320      	movs	r3, #32
   21f40:	1a9b      	subs	r3, r3, r2
   21f42:	000c      	movs	r4, r1
   21f44:	4658      	mov	r0, fp
   21f46:	4099      	lsls	r1, r3
   21f48:	4098      	lsls	r0, r3
   21f4a:	1e4b      	subs	r3, r1, #1
   21f4c:	4199      	sbcs	r1, r3
   21f4e:	465b      	mov	r3, fp
   21f50:	40d4      	lsrs	r4, r2
   21f52:	40d3      	lsrs	r3, r2
   21f54:	4320      	orrs	r0, r4
   21f56:	4308      	orrs	r0, r1
   21f58:	001a      	movs	r2, r3
   21f5a:	0743      	lsls	r3, r0, #29
   21f5c:	d009      	beq.n	21f72 <__aeabi_ddiv+0x596>
   21f5e:	230f      	movs	r3, #15
   21f60:	4003      	ands	r3, r0
   21f62:	2b04      	cmp	r3, #4
   21f64:	d005      	beq.n	21f72 <__aeabi_ddiv+0x596>
   21f66:	0001      	movs	r1, r0
   21f68:	1d08      	adds	r0, r1, #4
   21f6a:	4288      	cmp	r0, r1
   21f6c:	419b      	sbcs	r3, r3
   21f6e:	425b      	negs	r3, r3
   21f70:	18d2      	adds	r2, r2, r3
   21f72:	0213      	lsls	r3, r2, #8
   21f74:	d53a      	bpl.n	21fec <__aeabi_ddiv+0x610>
   21f76:	2301      	movs	r3, #1
   21f78:	9a02      	ldr	r2, [sp, #8]
   21f7a:	2401      	movs	r4, #1
   21f7c:	401a      	ands	r2, r3
   21f7e:	2300      	movs	r3, #0
   21f80:	4694      	mov	ip, r2
   21f82:	4698      	mov	r8, r3
   21f84:	2200      	movs	r2, #0
   21f86:	e5f7      	b.n	21b78 <__aeabi_ddiv+0x19c>
   21f88:	2102      	movs	r1, #2
   21f8a:	4249      	negs	r1, r1
   21f8c:	468c      	mov	ip, r1
   21f8e:	9d03      	ldr	r5, [sp, #12]
   21f90:	44e3      	add	fp, ip
   21f92:	46ac      	mov	ip, r5
   21f94:	44e2      	add	sl, ip
   21f96:	45aa      	cmp	sl, r5
   21f98:	41ad      	sbcs	r5, r5
   21f9a:	426d      	negs	r5, r5
   21f9c:	4445      	add	r5, r8
   21f9e:	18ed      	adds	r5, r5, r3
   21fa0:	1a2d      	subs	r5, r5, r0
   21fa2:	e696      	b.n	21cd2 <__aeabi_ddiv+0x2f6>
   21fa4:	1e8a      	subs	r2, r1, #2
   21fa6:	9903      	ldr	r1, [sp, #12]
   21fa8:	004d      	lsls	r5, r1, #1
   21faa:	428d      	cmp	r5, r1
   21fac:	4189      	sbcs	r1, r1
   21fae:	4249      	negs	r1, r1
   21fb0:	4441      	add	r1, r8
   21fb2:	1876      	adds	r6, r6, r1
   21fb4:	9503      	str	r5, [sp, #12]
   21fb6:	e78f      	b.n	21ed8 <__aeabi_ddiv+0x4fc>
   21fb8:	201f      	movs	r0, #31
   21fba:	4240      	negs	r0, r0
   21fbc:	1ac3      	subs	r3, r0, r3
   21fbe:	4658      	mov	r0, fp
   21fc0:	40d8      	lsrs	r0, r3
   21fc2:	0003      	movs	r3, r0
   21fc4:	2a20      	cmp	r2, #32
   21fc6:	d028      	beq.n	2201a <__aeabi_ddiv+0x63e>
   21fc8:	2040      	movs	r0, #64	; 0x40
   21fca:	465d      	mov	r5, fp
   21fcc:	1a82      	subs	r2, r0, r2
   21fce:	4095      	lsls	r5, r2
   21fd0:	4329      	orrs	r1, r5
   21fd2:	1e4a      	subs	r2, r1, #1
   21fd4:	4191      	sbcs	r1, r2
   21fd6:	4319      	orrs	r1, r3
   21fd8:	2307      	movs	r3, #7
   21fda:	2200      	movs	r2, #0
   21fdc:	400b      	ands	r3, r1
   21fde:	d009      	beq.n	21ff4 <__aeabi_ddiv+0x618>
   21fe0:	230f      	movs	r3, #15
   21fe2:	2200      	movs	r2, #0
   21fe4:	400b      	ands	r3, r1
   21fe6:	0008      	movs	r0, r1
   21fe8:	2b04      	cmp	r3, #4
   21fea:	d1bd      	bne.n	21f68 <__aeabi_ddiv+0x58c>
   21fec:	0001      	movs	r1, r0
   21fee:	0753      	lsls	r3, r2, #29
   21ff0:	0252      	lsls	r2, r2, #9
   21ff2:	0b12      	lsrs	r2, r2, #12
   21ff4:	08c9      	lsrs	r1, r1, #3
   21ff6:	4319      	orrs	r1, r3
   21ff8:	2301      	movs	r3, #1
   21ffa:	4688      	mov	r8, r1
   21ffc:	9902      	ldr	r1, [sp, #8]
   21ffe:	2400      	movs	r4, #0
   22000:	4019      	ands	r1, r3
   22002:	468c      	mov	ip, r1
   22004:	e5b8      	b.n	21b78 <__aeabi_ddiv+0x19c>
   22006:	4552      	cmp	r2, sl
   22008:	d8be      	bhi.n	21f88 <__aeabi_ddiv+0x5ac>
   2200a:	468b      	mov	fp, r1
   2200c:	2500      	movs	r5, #0
   2200e:	e660      	b.n	21cd2 <__aeabi_ddiv+0x2f6>
   22010:	9d03      	ldr	r5, [sp, #12]
   22012:	429d      	cmp	r5, r3
   22014:	d3c6      	bcc.n	21fa4 <__aeabi_ddiv+0x5c8>
   22016:	0011      	movs	r1, r2
   22018:	e762      	b.n	21ee0 <__aeabi_ddiv+0x504>
   2201a:	2500      	movs	r5, #0
   2201c:	e7d8      	b.n	21fd0 <__aeabi_ddiv+0x5f4>
   2201e:	2280      	movs	r2, #128	; 0x80
   22020:	465b      	mov	r3, fp
   22022:	0312      	lsls	r2, r2, #12
   22024:	431a      	orrs	r2, r3
   22026:	9b01      	ldr	r3, [sp, #4]
   22028:	0312      	lsls	r2, r2, #12
   2202a:	0b12      	lsrs	r2, r2, #12
   2202c:	469c      	mov	ip, r3
   2202e:	4688      	mov	r8, r1
   22030:	4c03      	ldr	r4, [pc, #12]	; (22040 <__aeabi_ddiv+0x664>)
   22032:	e5a1      	b.n	21b78 <__aeabi_ddiv+0x19c>
   22034:	000003ff 	.word	0x000003ff
   22038:	feffffff 	.word	0xfeffffff
   2203c:	000007fe 	.word	0x000007fe
   22040:	000007ff 	.word	0x000007ff

00022044 <__aeabi_dmul>:
   22044:	b5f0      	push	{r4, r5, r6, r7, lr}
   22046:	4657      	mov	r7, sl
   22048:	4645      	mov	r5, r8
   2204a:	46de      	mov	lr, fp
   2204c:	464e      	mov	r6, r9
   2204e:	b5e0      	push	{r5, r6, r7, lr}
   22050:	030c      	lsls	r4, r1, #12
   22052:	4698      	mov	r8, r3
   22054:	004e      	lsls	r6, r1, #1
   22056:	0b23      	lsrs	r3, r4, #12
   22058:	b087      	sub	sp, #28
   2205a:	0007      	movs	r7, r0
   2205c:	4692      	mov	sl, r2
   2205e:	469b      	mov	fp, r3
   22060:	0d76      	lsrs	r6, r6, #21
   22062:	0fcd      	lsrs	r5, r1, #31
   22064:	2e00      	cmp	r6, #0
   22066:	d06b      	beq.n	22140 <__aeabi_dmul+0xfc>
   22068:	4b6d      	ldr	r3, [pc, #436]	; (22220 <__aeabi_dmul+0x1dc>)
   2206a:	429e      	cmp	r6, r3
   2206c:	d035      	beq.n	220da <__aeabi_dmul+0x96>
   2206e:	2480      	movs	r4, #128	; 0x80
   22070:	465b      	mov	r3, fp
   22072:	0f42      	lsrs	r2, r0, #29
   22074:	0424      	lsls	r4, r4, #16
   22076:	00db      	lsls	r3, r3, #3
   22078:	4314      	orrs	r4, r2
   2207a:	431c      	orrs	r4, r3
   2207c:	00c3      	lsls	r3, r0, #3
   2207e:	4699      	mov	r9, r3
   22080:	4b68      	ldr	r3, [pc, #416]	; (22224 <__aeabi_dmul+0x1e0>)
   22082:	46a3      	mov	fp, r4
   22084:	469c      	mov	ip, r3
   22086:	2300      	movs	r3, #0
   22088:	2700      	movs	r7, #0
   2208a:	4466      	add	r6, ip
   2208c:	9302      	str	r3, [sp, #8]
   2208e:	4643      	mov	r3, r8
   22090:	031c      	lsls	r4, r3, #12
   22092:	005a      	lsls	r2, r3, #1
   22094:	0fdb      	lsrs	r3, r3, #31
   22096:	4650      	mov	r0, sl
   22098:	0b24      	lsrs	r4, r4, #12
   2209a:	0d52      	lsrs	r2, r2, #21
   2209c:	4698      	mov	r8, r3
   2209e:	d100      	bne.n	220a2 <__aeabi_dmul+0x5e>
   220a0:	e076      	b.n	22190 <__aeabi_dmul+0x14c>
   220a2:	4b5f      	ldr	r3, [pc, #380]	; (22220 <__aeabi_dmul+0x1dc>)
   220a4:	429a      	cmp	r2, r3
   220a6:	d06d      	beq.n	22184 <__aeabi_dmul+0x140>
   220a8:	2380      	movs	r3, #128	; 0x80
   220aa:	0f41      	lsrs	r1, r0, #29
   220ac:	041b      	lsls	r3, r3, #16
   220ae:	430b      	orrs	r3, r1
   220b0:	495c      	ldr	r1, [pc, #368]	; (22224 <__aeabi_dmul+0x1e0>)
   220b2:	00e4      	lsls	r4, r4, #3
   220b4:	468c      	mov	ip, r1
   220b6:	431c      	orrs	r4, r3
   220b8:	00c3      	lsls	r3, r0, #3
   220ba:	2000      	movs	r0, #0
   220bc:	4462      	add	r2, ip
   220be:	4641      	mov	r1, r8
   220c0:	18b6      	adds	r6, r6, r2
   220c2:	4069      	eors	r1, r5
   220c4:	1c72      	adds	r2, r6, #1
   220c6:	9101      	str	r1, [sp, #4]
   220c8:	4694      	mov	ip, r2
   220ca:	4307      	orrs	r7, r0
   220cc:	2f0f      	cmp	r7, #15
   220ce:	d900      	bls.n	220d2 <__aeabi_dmul+0x8e>
   220d0:	e0b0      	b.n	22234 <__aeabi_dmul+0x1f0>
   220d2:	4a55      	ldr	r2, [pc, #340]	; (22228 <__aeabi_dmul+0x1e4>)
   220d4:	00bf      	lsls	r7, r7, #2
   220d6:	59d2      	ldr	r2, [r2, r7]
   220d8:	4697      	mov	pc, r2
   220da:	465b      	mov	r3, fp
   220dc:	4303      	orrs	r3, r0
   220de:	4699      	mov	r9, r3
   220e0:	d000      	beq.n	220e4 <__aeabi_dmul+0xa0>
   220e2:	e087      	b.n	221f4 <__aeabi_dmul+0x1b0>
   220e4:	2300      	movs	r3, #0
   220e6:	469b      	mov	fp, r3
   220e8:	3302      	adds	r3, #2
   220ea:	2708      	movs	r7, #8
   220ec:	9302      	str	r3, [sp, #8]
   220ee:	e7ce      	b.n	2208e <__aeabi_dmul+0x4a>
   220f0:	4642      	mov	r2, r8
   220f2:	9201      	str	r2, [sp, #4]
   220f4:	2802      	cmp	r0, #2
   220f6:	d067      	beq.n	221c8 <__aeabi_dmul+0x184>
   220f8:	2803      	cmp	r0, #3
   220fa:	d100      	bne.n	220fe <__aeabi_dmul+0xba>
   220fc:	e20e      	b.n	2251c <__aeabi_dmul+0x4d8>
   220fe:	2801      	cmp	r0, #1
   22100:	d000      	beq.n	22104 <__aeabi_dmul+0xc0>
   22102:	e162      	b.n	223ca <__aeabi_dmul+0x386>
   22104:	2300      	movs	r3, #0
   22106:	2400      	movs	r4, #0
   22108:	2200      	movs	r2, #0
   2210a:	4699      	mov	r9, r3
   2210c:	9901      	ldr	r1, [sp, #4]
   2210e:	4001      	ands	r1, r0
   22110:	b2cd      	uxtb	r5, r1
   22112:	2100      	movs	r1, #0
   22114:	0312      	lsls	r2, r2, #12
   22116:	0d0b      	lsrs	r3, r1, #20
   22118:	0b12      	lsrs	r2, r2, #12
   2211a:	051b      	lsls	r3, r3, #20
   2211c:	4313      	orrs	r3, r2
   2211e:	4a43      	ldr	r2, [pc, #268]	; (2222c <__aeabi_dmul+0x1e8>)
   22120:	0524      	lsls	r4, r4, #20
   22122:	4013      	ands	r3, r2
   22124:	431c      	orrs	r4, r3
   22126:	0064      	lsls	r4, r4, #1
   22128:	07ed      	lsls	r5, r5, #31
   2212a:	0864      	lsrs	r4, r4, #1
   2212c:	432c      	orrs	r4, r5
   2212e:	4648      	mov	r0, r9
   22130:	0021      	movs	r1, r4
   22132:	b007      	add	sp, #28
   22134:	bc3c      	pop	{r2, r3, r4, r5}
   22136:	4690      	mov	r8, r2
   22138:	4699      	mov	r9, r3
   2213a:	46a2      	mov	sl, r4
   2213c:	46ab      	mov	fp, r5
   2213e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22140:	4303      	orrs	r3, r0
   22142:	4699      	mov	r9, r3
   22144:	d04f      	beq.n	221e6 <__aeabi_dmul+0x1a2>
   22146:	465b      	mov	r3, fp
   22148:	2b00      	cmp	r3, #0
   2214a:	d100      	bne.n	2214e <__aeabi_dmul+0x10a>
   2214c:	e189      	b.n	22462 <__aeabi_dmul+0x41e>
   2214e:	4658      	mov	r0, fp
   22150:	f000 fdbc 	bl	22ccc <__clzsi2>
   22154:	0003      	movs	r3, r0
   22156:	3b0b      	subs	r3, #11
   22158:	2b1c      	cmp	r3, #28
   2215a:	dd00      	ble.n	2215e <__aeabi_dmul+0x11a>
   2215c:	e17a      	b.n	22454 <__aeabi_dmul+0x410>
   2215e:	221d      	movs	r2, #29
   22160:	1ad3      	subs	r3, r2, r3
   22162:	003a      	movs	r2, r7
   22164:	0001      	movs	r1, r0
   22166:	465c      	mov	r4, fp
   22168:	40da      	lsrs	r2, r3
   2216a:	3908      	subs	r1, #8
   2216c:	408c      	lsls	r4, r1
   2216e:	0013      	movs	r3, r2
   22170:	408f      	lsls	r7, r1
   22172:	4323      	orrs	r3, r4
   22174:	469b      	mov	fp, r3
   22176:	46b9      	mov	r9, r7
   22178:	2300      	movs	r3, #0
   2217a:	4e2d      	ldr	r6, [pc, #180]	; (22230 <__aeabi_dmul+0x1ec>)
   2217c:	2700      	movs	r7, #0
   2217e:	1a36      	subs	r6, r6, r0
   22180:	9302      	str	r3, [sp, #8]
   22182:	e784      	b.n	2208e <__aeabi_dmul+0x4a>
   22184:	4653      	mov	r3, sl
   22186:	4323      	orrs	r3, r4
   22188:	d12a      	bne.n	221e0 <__aeabi_dmul+0x19c>
   2218a:	2400      	movs	r4, #0
   2218c:	2002      	movs	r0, #2
   2218e:	e796      	b.n	220be <__aeabi_dmul+0x7a>
   22190:	4653      	mov	r3, sl
   22192:	4323      	orrs	r3, r4
   22194:	d020      	beq.n	221d8 <__aeabi_dmul+0x194>
   22196:	2c00      	cmp	r4, #0
   22198:	d100      	bne.n	2219c <__aeabi_dmul+0x158>
   2219a:	e157      	b.n	2244c <__aeabi_dmul+0x408>
   2219c:	0020      	movs	r0, r4
   2219e:	f000 fd95 	bl	22ccc <__clzsi2>
   221a2:	0003      	movs	r3, r0
   221a4:	3b0b      	subs	r3, #11
   221a6:	2b1c      	cmp	r3, #28
   221a8:	dd00      	ble.n	221ac <__aeabi_dmul+0x168>
   221aa:	e149      	b.n	22440 <__aeabi_dmul+0x3fc>
   221ac:	211d      	movs	r1, #29
   221ae:	1acb      	subs	r3, r1, r3
   221b0:	4651      	mov	r1, sl
   221b2:	0002      	movs	r2, r0
   221b4:	40d9      	lsrs	r1, r3
   221b6:	4653      	mov	r3, sl
   221b8:	3a08      	subs	r2, #8
   221ba:	4094      	lsls	r4, r2
   221bc:	4093      	lsls	r3, r2
   221be:	430c      	orrs	r4, r1
   221c0:	4a1b      	ldr	r2, [pc, #108]	; (22230 <__aeabi_dmul+0x1ec>)
   221c2:	1a12      	subs	r2, r2, r0
   221c4:	2000      	movs	r0, #0
   221c6:	e77a      	b.n	220be <__aeabi_dmul+0x7a>
   221c8:	2501      	movs	r5, #1
   221ca:	9b01      	ldr	r3, [sp, #4]
   221cc:	4c14      	ldr	r4, [pc, #80]	; (22220 <__aeabi_dmul+0x1dc>)
   221ce:	401d      	ands	r5, r3
   221d0:	2300      	movs	r3, #0
   221d2:	2200      	movs	r2, #0
   221d4:	4699      	mov	r9, r3
   221d6:	e79c      	b.n	22112 <__aeabi_dmul+0xce>
   221d8:	2400      	movs	r4, #0
   221da:	2200      	movs	r2, #0
   221dc:	2001      	movs	r0, #1
   221de:	e76e      	b.n	220be <__aeabi_dmul+0x7a>
   221e0:	4653      	mov	r3, sl
   221e2:	2003      	movs	r0, #3
   221e4:	e76b      	b.n	220be <__aeabi_dmul+0x7a>
   221e6:	2300      	movs	r3, #0
   221e8:	469b      	mov	fp, r3
   221ea:	3301      	adds	r3, #1
   221ec:	2704      	movs	r7, #4
   221ee:	2600      	movs	r6, #0
   221f0:	9302      	str	r3, [sp, #8]
   221f2:	e74c      	b.n	2208e <__aeabi_dmul+0x4a>
   221f4:	2303      	movs	r3, #3
   221f6:	4681      	mov	r9, r0
   221f8:	270c      	movs	r7, #12
   221fa:	9302      	str	r3, [sp, #8]
   221fc:	e747      	b.n	2208e <__aeabi_dmul+0x4a>
   221fe:	2280      	movs	r2, #128	; 0x80
   22200:	2300      	movs	r3, #0
   22202:	2500      	movs	r5, #0
   22204:	0312      	lsls	r2, r2, #12
   22206:	4699      	mov	r9, r3
   22208:	4c05      	ldr	r4, [pc, #20]	; (22220 <__aeabi_dmul+0x1dc>)
   2220a:	e782      	b.n	22112 <__aeabi_dmul+0xce>
   2220c:	465c      	mov	r4, fp
   2220e:	464b      	mov	r3, r9
   22210:	9802      	ldr	r0, [sp, #8]
   22212:	e76f      	b.n	220f4 <__aeabi_dmul+0xb0>
   22214:	465c      	mov	r4, fp
   22216:	464b      	mov	r3, r9
   22218:	9501      	str	r5, [sp, #4]
   2221a:	9802      	ldr	r0, [sp, #8]
   2221c:	e76a      	b.n	220f4 <__aeabi_dmul+0xb0>
   2221e:	46c0      	nop			; (mov r8, r8)
   22220:	000007ff 	.word	0x000007ff
   22224:	fffffc01 	.word	0xfffffc01
   22228:	00028e78 	.word	0x00028e78
   2222c:	800fffff 	.word	0x800fffff
   22230:	fffffc0d 	.word	0xfffffc0d
   22234:	464a      	mov	r2, r9
   22236:	4649      	mov	r1, r9
   22238:	0c17      	lsrs	r7, r2, #16
   2223a:	0c1a      	lsrs	r2, r3, #16
   2223c:	041b      	lsls	r3, r3, #16
   2223e:	0c1b      	lsrs	r3, r3, #16
   22240:	0408      	lsls	r0, r1, #16
   22242:	0019      	movs	r1, r3
   22244:	0c00      	lsrs	r0, r0, #16
   22246:	4341      	muls	r1, r0
   22248:	0015      	movs	r5, r2
   2224a:	4688      	mov	r8, r1
   2224c:	0019      	movs	r1, r3
   2224e:	437d      	muls	r5, r7
   22250:	4379      	muls	r1, r7
   22252:	9503      	str	r5, [sp, #12]
   22254:	4689      	mov	r9, r1
   22256:	0029      	movs	r1, r5
   22258:	0015      	movs	r5, r2
   2225a:	4345      	muls	r5, r0
   2225c:	444d      	add	r5, r9
   2225e:	9502      	str	r5, [sp, #8]
   22260:	4645      	mov	r5, r8
   22262:	0c2d      	lsrs	r5, r5, #16
   22264:	46aa      	mov	sl, r5
   22266:	9d02      	ldr	r5, [sp, #8]
   22268:	4455      	add	r5, sl
   2226a:	45a9      	cmp	r9, r5
   2226c:	d906      	bls.n	2227c <__aeabi_dmul+0x238>
   2226e:	468a      	mov	sl, r1
   22270:	2180      	movs	r1, #128	; 0x80
   22272:	0249      	lsls	r1, r1, #9
   22274:	4689      	mov	r9, r1
   22276:	44ca      	add	sl, r9
   22278:	4651      	mov	r1, sl
   2227a:	9103      	str	r1, [sp, #12]
   2227c:	0c29      	lsrs	r1, r5, #16
   2227e:	9104      	str	r1, [sp, #16]
   22280:	4641      	mov	r1, r8
   22282:	0409      	lsls	r1, r1, #16
   22284:	042d      	lsls	r5, r5, #16
   22286:	0c09      	lsrs	r1, r1, #16
   22288:	4688      	mov	r8, r1
   2228a:	0029      	movs	r1, r5
   2228c:	0c25      	lsrs	r5, r4, #16
   2228e:	0424      	lsls	r4, r4, #16
   22290:	4441      	add	r1, r8
   22292:	0c24      	lsrs	r4, r4, #16
   22294:	9105      	str	r1, [sp, #20]
   22296:	0021      	movs	r1, r4
   22298:	4341      	muls	r1, r0
   2229a:	4688      	mov	r8, r1
   2229c:	0021      	movs	r1, r4
   2229e:	4379      	muls	r1, r7
   222a0:	468a      	mov	sl, r1
   222a2:	4368      	muls	r0, r5
   222a4:	4641      	mov	r1, r8
   222a6:	4450      	add	r0, sl
   222a8:	4681      	mov	r9, r0
   222aa:	0c08      	lsrs	r0, r1, #16
   222ac:	4448      	add	r0, r9
   222ae:	436f      	muls	r7, r5
   222b0:	4582      	cmp	sl, r0
   222b2:	d903      	bls.n	222bc <__aeabi_dmul+0x278>
   222b4:	2180      	movs	r1, #128	; 0x80
   222b6:	0249      	lsls	r1, r1, #9
   222b8:	4689      	mov	r9, r1
   222ba:	444f      	add	r7, r9
   222bc:	0c01      	lsrs	r1, r0, #16
   222be:	4689      	mov	r9, r1
   222c0:	0039      	movs	r1, r7
   222c2:	4449      	add	r1, r9
   222c4:	9102      	str	r1, [sp, #8]
   222c6:	4641      	mov	r1, r8
   222c8:	040f      	lsls	r7, r1, #16
   222ca:	9904      	ldr	r1, [sp, #16]
   222cc:	0c3f      	lsrs	r7, r7, #16
   222ce:	4688      	mov	r8, r1
   222d0:	0400      	lsls	r0, r0, #16
   222d2:	19c0      	adds	r0, r0, r7
   222d4:	4480      	add	r8, r0
   222d6:	4641      	mov	r1, r8
   222d8:	9104      	str	r1, [sp, #16]
   222da:	4659      	mov	r1, fp
   222dc:	0c0f      	lsrs	r7, r1, #16
   222de:	0409      	lsls	r1, r1, #16
   222e0:	0c09      	lsrs	r1, r1, #16
   222e2:	4688      	mov	r8, r1
   222e4:	4359      	muls	r1, r3
   222e6:	468a      	mov	sl, r1
   222e8:	0039      	movs	r1, r7
   222ea:	4351      	muls	r1, r2
   222ec:	4689      	mov	r9, r1
   222ee:	4641      	mov	r1, r8
   222f0:	434a      	muls	r2, r1
   222f2:	4651      	mov	r1, sl
   222f4:	0c09      	lsrs	r1, r1, #16
   222f6:	468b      	mov	fp, r1
   222f8:	437b      	muls	r3, r7
   222fa:	18d2      	adds	r2, r2, r3
   222fc:	445a      	add	r2, fp
   222fe:	4293      	cmp	r3, r2
   22300:	d903      	bls.n	2230a <__aeabi_dmul+0x2c6>
   22302:	2380      	movs	r3, #128	; 0x80
   22304:	025b      	lsls	r3, r3, #9
   22306:	469b      	mov	fp, r3
   22308:	44d9      	add	r9, fp
   2230a:	4651      	mov	r1, sl
   2230c:	0409      	lsls	r1, r1, #16
   2230e:	0c09      	lsrs	r1, r1, #16
   22310:	468a      	mov	sl, r1
   22312:	4641      	mov	r1, r8
   22314:	4361      	muls	r1, r4
   22316:	437c      	muls	r4, r7
   22318:	0c13      	lsrs	r3, r2, #16
   2231a:	0412      	lsls	r2, r2, #16
   2231c:	444b      	add	r3, r9
   2231e:	4452      	add	r2, sl
   22320:	46a1      	mov	r9, r4
   22322:	468a      	mov	sl, r1
   22324:	003c      	movs	r4, r7
   22326:	4641      	mov	r1, r8
   22328:	436c      	muls	r4, r5
   2232a:	434d      	muls	r5, r1
   2232c:	4651      	mov	r1, sl
   2232e:	444d      	add	r5, r9
   22330:	0c0f      	lsrs	r7, r1, #16
   22332:	197d      	adds	r5, r7, r5
   22334:	45a9      	cmp	r9, r5
   22336:	d903      	bls.n	22340 <__aeabi_dmul+0x2fc>
   22338:	2180      	movs	r1, #128	; 0x80
   2233a:	0249      	lsls	r1, r1, #9
   2233c:	4688      	mov	r8, r1
   2233e:	4444      	add	r4, r8
   22340:	9f04      	ldr	r7, [sp, #16]
   22342:	9903      	ldr	r1, [sp, #12]
   22344:	46b8      	mov	r8, r7
   22346:	4441      	add	r1, r8
   22348:	468b      	mov	fp, r1
   2234a:	4583      	cmp	fp, r0
   2234c:	4180      	sbcs	r0, r0
   2234e:	4241      	negs	r1, r0
   22350:	4688      	mov	r8, r1
   22352:	4651      	mov	r1, sl
   22354:	0408      	lsls	r0, r1, #16
   22356:	042f      	lsls	r7, r5, #16
   22358:	0c00      	lsrs	r0, r0, #16
   2235a:	183f      	adds	r7, r7, r0
   2235c:	4658      	mov	r0, fp
   2235e:	9902      	ldr	r1, [sp, #8]
   22360:	1810      	adds	r0, r2, r0
   22362:	4689      	mov	r9, r1
   22364:	4290      	cmp	r0, r2
   22366:	4192      	sbcs	r2, r2
   22368:	444f      	add	r7, r9
   2236a:	46ba      	mov	sl, r7
   2236c:	4252      	negs	r2, r2
   2236e:	4699      	mov	r9, r3
   22370:	4693      	mov	fp, r2
   22372:	44c2      	add	sl, r8
   22374:	44d1      	add	r9, sl
   22376:	44cb      	add	fp, r9
   22378:	428f      	cmp	r7, r1
   2237a:	41bf      	sbcs	r7, r7
   2237c:	45c2      	cmp	sl, r8
   2237e:	4189      	sbcs	r1, r1
   22380:	4599      	cmp	r9, r3
   22382:	419b      	sbcs	r3, r3
   22384:	4593      	cmp	fp, r2
   22386:	4192      	sbcs	r2, r2
   22388:	427f      	negs	r7, r7
   2238a:	4249      	negs	r1, r1
   2238c:	0c2d      	lsrs	r5, r5, #16
   2238e:	4252      	negs	r2, r2
   22390:	430f      	orrs	r7, r1
   22392:	425b      	negs	r3, r3
   22394:	4313      	orrs	r3, r2
   22396:	197f      	adds	r7, r7, r5
   22398:	18ff      	adds	r7, r7, r3
   2239a:	465b      	mov	r3, fp
   2239c:	193c      	adds	r4, r7, r4
   2239e:	0ddb      	lsrs	r3, r3, #23
   223a0:	9a05      	ldr	r2, [sp, #20]
   223a2:	0264      	lsls	r4, r4, #9
   223a4:	431c      	orrs	r4, r3
   223a6:	0243      	lsls	r3, r0, #9
   223a8:	4313      	orrs	r3, r2
   223aa:	1e5d      	subs	r5, r3, #1
   223ac:	41ab      	sbcs	r3, r5
   223ae:	465a      	mov	r2, fp
   223b0:	0dc0      	lsrs	r0, r0, #23
   223b2:	4303      	orrs	r3, r0
   223b4:	0252      	lsls	r2, r2, #9
   223b6:	4313      	orrs	r3, r2
   223b8:	01e2      	lsls	r2, r4, #7
   223ba:	d556      	bpl.n	2246a <__aeabi_dmul+0x426>
   223bc:	2001      	movs	r0, #1
   223be:	085a      	lsrs	r2, r3, #1
   223c0:	4003      	ands	r3, r0
   223c2:	4313      	orrs	r3, r2
   223c4:	07e2      	lsls	r2, r4, #31
   223c6:	4313      	orrs	r3, r2
   223c8:	0864      	lsrs	r4, r4, #1
   223ca:	485a      	ldr	r0, [pc, #360]	; (22534 <__aeabi_dmul+0x4f0>)
   223cc:	4460      	add	r0, ip
   223ce:	2800      	cmp	r0, #0
   223d0:	dd4d      	ble.n	2246e <__aeabi_dmul+0x42a>
   223d2:	075a      	lsls	r2, r3, #29
   223d4:	d009      	beq.n	223ea <__aeabi_dmul+0x3a6>
   223d6:	220f      	movs	r2, #15
   223d8:	401a      	ands	r2, r3
   223da:	2a04      	cmp	r2, #4
   223dc:	d005      	beq.n	223ea <__aeabi_dmul+0x3a6>
   223de:	1d1a      	adds	r2, r3, #4
   223e0:	429a      	cmp	r2, r3
   223e2:	419b      	sbcs	r3, r3
   223e4:	425b      	negs	r3, r3
   223e6:	18e4      	adds	r4, r4, r3
   223e8:	0013      	movs	r3, r2
   223ea:	01e2      	lsls	r2, r4, #7
   223ec:	d504      	bpl.n	223f8 <__aeabi_dmul+0x3b4>
   223ee:	2080      	movs	r0, #128	; 0x80
   223f0:	4a51      	ldr	r2, [pc, #324]	; (22538 <__aeabi_dmul+0x4f4>)
   223f2:	00c0      	lsls	r0, r0, #3
   223f4:	4014      	ands	r4, r2
   223f6:	4460      	add	r0, ip
   223f8:	4a50      	ldr	r2, [pc, #320]	; (2253c <__aeabi_dmul+0x4f8>)
   223fa:	4290      	cmp	r0, r2
   223fc:	dd00      	ble.n	22400 <__aeabi_dmul+0x3bc>
   223fe:	e6e3      	b.n	221c8 <__aeabi_dmul+0x184>
   22400:	2501      	movs	r5, #1
   22402:	08db      	lsrs	r3, r3, #3
   22404:	0762      	lsls	r2, r4, #29
   22406:	431a      	orrs	r2, r3
   22408:	0264      	lsls	r4, r4, #9
   2240a:	9b01      	ldr	r3, [sp, #4]
   2240c:	4691      	mov	r9, r2
   2240e:	0b22      	lsrs	r2, r4, #12
   22410:	0544      	lsls	r4, r0, #21
   22412:	0d64      	lsrs	r4, r4, #21
   22414:	401d      	ands	r5, r3
   22416:	e67c      	b.n	22112 <__aeabi_dmul+0xce>
   22418:	2280      	movs	r2, #128	; 0x80
   2241a:	4659      	mov	r1, fp
   2241c:	0312      	lsls	r2, r2, #12
   2241e:	4211      	tst	r1, r2
   22420:	d008      	beq.n	22434 <__aeabi_dmul+0x3f0>
   22422:	4214      	tst	r4, r2
   22424:	d106      	bne.n	22434 <__aeabi_dmul+0x3f0>
   22426:	4322      	orrs	r2, r4
   22428:	0312      	lsls	r2, r2, #12
   2242a:	0b12      	lsrs	r2, r2, #12
   2242c:	4645      	mov	r5, r8
   2242e:	4699      	mov	r9, r3
   22430:	4c43      	ldr	r4, [pc, #268]	; (22540 <__aeabi_dmul+0x4fc>)
   22432:	e66e      	b.n	22112 <__aeabi_dmul+0xce>
   22434:	465b      	mov	r3, fp
   22436:	431a      	orrs	r2, r3
   22438:	0312      	lsls	r2, r2, #12
   2243a:	0b12      	lsrs	r2, r2, #12
   2243c:	4c40      	ldr	r4, [pc, #256]	; (22540 <__aeabi_dmul+0x4fc>)
   2243e:	e668      	b.n	22112 <__aeabi_dmul+0xce>
   22440:	0003      	movs	r3, r0
   22442:	4654      	mov	r4, sl
   22444:	3b28      	subs	r3, #40	; 0x28
   22446:	409c      	lsls	r4, r3
   22448:	2300      	movs	r3, #0
   2244a:	e6b9      	b.n	221c0 <__aeabi_dmul+0x17c>
   2244c:	f000 fc3e 	bl	22ccc <__clzsi2>
   22450:	3020      	adds	r0, #32
   22452:	e6a6      	b.n	221a2 <__aeabi_dmul+0x15e>
   22454:	0003      	movs	r3, r0
   22456:	3b28      	subs	r3, #40	; 0x28
   22458:	409f      	lsls	r7, r3
   2245a:	2300      	movs	r3, #0
   2245c:	46bb      	mov	fp, r7
   2245e:	4699      	mov	r9, r3
   22460:	e68a      	b.n	22178 <__aeabi_dmul+0x134>
   22462:	f000 fc33 	bl	22ccc <__clzsi2>
   22466:	3020      	adds	r0, #32
   22468:	e674      	b.n	22154 <__aeabi_dmul+0x110>
   2246a:	46b4      	mov	ip, r6
   2246c:	e7ad      	b.n	223ca <__aeabi_dmul+0x386>
   2246e:	2501      	movs	r5, #1
   22470:	1a2a      	subs	r2, r5, r0
   22472:	2a38      	cmp	r2, #56	; 0x38
   22474:	dd06      	ble.n	22484 <__aeabi_dmul+0x440>
   22476:	9b01      	ldr	r3, [sp, #4]
   22478:	2400      	movs	r4, #0
   2247a:	401d      	ands	r5, r3
   2247c:	2300      	movs	r3, #0
   2247e:	2200      	movs	r2, #0
   22480:	4699      	mov	r9, r3
   22482:	e646      	b.n	22112 <__aeabi_dmul+0xce>
   22484:	2a1f      	cmp	r2, #31
   22486:	dc21      	bgt.n	224cc <__aeabi_dmul+0x488>
   22488:	2520      	movs	r5, #32
   2248a:	0020      	movs	r0, r4
   2248c:	1aad      	subs	r5, r5, r2
   2248e:	001e      	movs	r6, r3
   22490:	40ab      	lsls	r3, r5
   22492:	40a8      	lsls	r0, r5
   22494:	40d6      	lsrs	r6, r2
   22496:	1e5d      	subs	r5, r3, #1
   22498:	41ab      	sbcs	r3, r5
   2249a:	4330      	orrs	r0, r6
   2249c:	4318      	orrs	r0, r3
   2249e:	40d4      	lsrs	r4, r2
   224a0:	0743      	lsls	r3, r0, #29
   224a2:	d009      	beq.n	224b8 <__aeabi_dmul+0x474>
   224a4:	230f      	movs	r3, #15
   224a6:	4003      	ands	r3, r0
   224a8:	2b04      	cmp	r3, #4
   224aa:	d005      	beq.n	224b8 <__aeabi_dmul+0x474>
   224ac:	0003      	movs	r3, r0
   224ae:	1d18      	adds	r0, r3, #4
   224b0:	4298      	cmp	r0, r3
   224b2:	419b      	sbcs	r3, r3
   224b4:	425b      	negs	r3, r3
   224b6:	18e4      	adds	r4, r4, r3
   224b8:	0223      	lsls	r3, r4, #8
   224ba:	d521      	bpl.n	22500 <__aeabi_dmul+0x4bc>
   224bc:	2501      	movs	r5, #1
   224be:	9b01      	ldr	r3, [sp, #4]
   224c0:	2401      	movs	r4, #1
   224c2:	401d      	ands	r5, r3
   224c4:	2300      	movs	r3, #0
   224c6:	2200      	movs	r2, #0
   224c8:	4699      	mov	r9, r3
   224ca:	e622      	b.n	22112 <__aeabi_dmul+0xce>
   224cc:	251f      	movs	r5, #31
   224ce:	0021      	movs	r1, r4
   224d0:	426d      	negs	r5, r5
   224d2:	1a28      	subs	r0, r5, r0
   224d4:	40c1      	lsrs	r1, r0
   224d6:	0008      	movs	r0, r1
   224d8:	2a20      	cmp	r2, #32
   224da:	d01d      	beq.n	22518 <__aeabi_dmul+0x4d4>
   224dc:	355f      	adds	r5, #95	; 0x5f
   224de:	1aaa      	subs	r2, r5, r2
   224e0:	4094      	lsls	r4, r2
   224e2:	4323      	orrs	r3, r4
   224e4:	1e5c      	subs	r4, r3, #1
   224e6:	41a3      	sbcs	r3, r4
   224e8:	2507      	movs	r5, #7
   224ea:	4303      	orrs	r3, r0
   224ec:	401d      	ands	r5, r3
   224ee:	2200      	movs	r2, #0
   224f0:	2d00      	cmp	r5, #0
   224f2:	d009      	beq.n	22508 <__aeabi_dmul+0x4c4>
   224f4:	220f      	movs	r2, #15
   224f6:	2400      	movs	r4, #0
   224f8:	401a      	ands	r2, r3
   224fa:	0018      	movs	r0, r3
   224fc:	2a04      	cmp	r2, #4
   224fe:	d1d6      	bne.n	224ae <__aeabi_dmul+0x46a>
   22500:	0003      	movs	r3, r0
   22502:	0765      	lsls	r5, r4, #29
   22504:	0264      	lsls	r4, r4, #9
   22506:	0b22      	lsrs	r2, r4, #12
   22508:	08db      	lsrs	r3, r3, #3
   2250a:	432b      	orrs	r3, r5
   2250c:	2501      	movs	r5, #1
   2250e:	4699      	mov	r9, r3
   22510:	9b01      	ldr	r3, [sp, #4]
   22512:	2400      	movs	r4, #0
   22514:	401d      	ands	r5, r3
   22516:	e5fc      	b.n	22112 <__aeabi_dmul+0xce>
   22518:	2400      	movs	r4, #0
   2251a:	e7e2      	b.n	224e2 <__aeabi_dmul+0x49e>
   2251c:	2280      	movs	r2, #128	; 0x80
   2251e:	2501      	movs	r5, #1
   22520:	0312      	lsls	r2, r2, #12
   22522:	4322      	orrs	r2, r4
   22524:	9901      	ldr	r1, [sp, #4]
   22526:	0312      	lsls	r2, r2, #12
   22528:	0b12      	lsrs	r2, r2, #12
   2252a:	400d      	ands	r5, r1
   2252c:	4699      	mov	r9, r3
   2252e:	4c04      	ldr	r4, [pc, #16]	; (22540 <__aeabi_dmul+0x4fc>)
   22530:	e5ef      	b.n	22112 <__aeabi_dmul+0xce>
   22532:	46c0      	nop			; (mov r8, r8)
   22534:	000003ff 	.word	0x000003ff
   22538:	feffffff 	.word	0xfeffffff
   2253c:	000007fe 	.word	0x000007fe
   22540:	000007ff 	.word	0x000007ff

00022544 <__aeabi_dsub>:
   22544:	b5f0      	push	{r4, r5, r6, r7, lr}
   22546:	4646      	mov	r6, r8
   22548:	46d6      	mov	lr, sl
   2254a:	464f      	mov	r7, r9
   2254c:	030c      	lsls	r4, r1, #12
   2254e:	b5c0      	push	{r6, r7, lr}
   22550:	0fcd      	lsrs	r5, r1, #31
   22552:	004e      	lsls	r6, r1, #1
   22554:	0a61      	lsrs	r1, r4, #9
   22556:	0f44      	lsrs	r4, r0, #29
   22558:	430c      	orrs	r4, r1
   2255a:	00c1      	lsls	r1, r0, #3
   2255c:	0058      	lsls	r0, r3, #1
   2255e:	0d40      	lsrs	r0, r0, #21
   22560:	4684      	mov	ip, r0
   22562:	468a      	mov	sl, r1
   22564:	000f      	movs	r7, r1
   22566:	0319      	lsls	r1, r3, #12
   22568:	0f50      	lsrs	r0, r2, #29
   2256a:	0a49      	lsrs	r1, r1, #9
   2256c:	4301      	orrs	r1, r0
   2256e:	48c6      	ldr	r0, [pc, #792]	; (22888 <__aeabi_dsub+0x344>)
   22570:	0d76      	lsrs	r6, r6, #21
   22572:	46a8      	mov	r8, r5
   22574:	0fdb      	lsrs	r3, r3, #31
   22576:	00d2      	lsls	r2, r2, #3
   22578:	4584      	cmp	ip, r0
   2257a:	d100      	bne.n	2257e <__aeabi_dsub+0x3a>
   2257c:	e0d8      	b.n	22730 <__aeabi_dsub+0x1ec>
   2257e:	2001      	movs	r0, #1
   22580:	4043      	eors	r3, r0
   22582:	42ab      	cmp	r3, r5
   22584:	d100      	bne.n	22588 <__aeabi_dsub+0x44>
   22586:	e0a6      	b.n	226d6 <__aeabi_dsub+0x192>
   22588:	4660      	mov	r0, ip
   2258a:	1a35      	subs	r5, r6, r0
   2258c:	2d00      	cmp	r5, #0
   2258e:	dc00      	bgt.n	22592 <__aeabi_dsub+0x4e>
   22590:	e105      	b.n	2279e <__aeabi_dsub+0x25a>
   22592:	2800      	cmp	r0, #0
   22594:	d110      	bne.n	225b8 <__aeabi_dsub+0x74>
   22596:	000b      	movs	r3, r1
   22598:	4313      	orrs	r3, r2
   2259a:	d100      	bne.n	2259e <__aeabi_dsub+0x5a>
   2259c:	e0d7      	b.n	2274e <__aeabi_dsub+0x20a>
   2259e:	1e6b      	subs	r3, r5, #1
   225a0:	2b00      	cmp	r3, #0
   225a2:	d000      	beq.n	225a6 <__aeabi_dsub+0x62>
   225a4:	e14b      	b.n	2283e <__aeabi_dsub+0x2fa>
   225a6:	4653      	mov	r3, sl
   225a8:	1a9f      	subs	r7, r3, r2
   225aa:	45ba      	cmp	sl, r7
   225ac:	4180      	sbcs	r0, r0
   225ae:	1a64      	subs	r4, r4, r1
   225b0:	4240      	negs	r0, r0
   225b2:	1a24      	subs	r4, r4, r0
   225b4:	2601      	movs	r6, #1
   225b6:	e01e      	b.n	225f6 <__aeabi_dsub+0xb2>
   225b8:	4bb3      	ldr	r3, [pc, #716]	; (22888 <__aeabi_dsub+0x344>)
   225ba:	429e      	cmp	r6, r3
   225bc:	d048      	beq.n	22650 <__aeabi_dsub+0x10c>
   225be:	2380      	movs	r3, #128	; 0x80
   225c0:	041b      	lsls	r3, r3, #16
   225c2:	4319      	orrs	r1, r3
   225c4:	2d38      	cmp	r5, #56	; 0x38
   225c6:	dd00      	ble.n	225ca <__aeabi_dsub+0x86>
   225c8:	e119      	b.n	227fe <__aeabi_dsub+0x2ba>
   225ca:	2d1f      	cmp	r5, #31
   225cc:	dd00      	ble.n	225d0 <__aeabi_dsub+0x8c>
   225ce:	e14c      	b.n	2286a <__aeabi_dsub+0x326>
   225d0:	2320      	movs	r3, #32
   225d2:	000f      	movs	r7, r1
   225d4:	1b5b      	subs	r3, r3, r5
   225d6:	0010      	movs	r0, r2
   225d8:	409a      	lsls	r2, r3
   225da:	409f      	lsls	r7, r3
   225dc:	40e8      	lsrs	r0, r5
   225de:	1e53      	subs	r3, r2, #1
   225e0:	419a      	sbcs	r2, r3
   225e2:	40e9      	lsrs	r1, r5
   225e4:	4307      	orrs	r7, r0
   225e6:	4317      	orrs	r7, r2
   225e8:	4653      	mov	r3, sl
   225ea:	1bdf      	subs	r7, r3, r7
   225ec:	1a61      	subs	r1, r4, r1
   225ee:	45ba      	cmp	sl, r7
   225f0:	41a4      	sbcs	r4, r4
   225f2:	4264      	negs	r4, r4
   225f4:	1b0c      	subs	r4, r1, r4
   225f6:	0223      	lsls	r3, r4, #8
   225f8:	d400      	bmi.n	225fc <__aeabi_dsub+0xb8>
   225fa:	e0c5      	b.n	22788 <__aeabi_dsub+0x244>
   225fc:	0264      	lsls	r4, r4, #9
   225fe:	0a65      	lsrs	r5, r4, #9
   22600:	2d00      	cmp	r5, #0
   22602:	d100      	bne.n	22606 <__aeabi_dsub+0xc2>
   22604:	e0f6      	b.n	227f4 <__aeabi_dsub+0x2b0>
   22606:	0028      	movs	r0, r5
   22608:	f000 fb60 	bl	22ccc <__clzsi2>
   2260c:	0003      	movs	r3, r0
   2260e:	3b08      	subs	r3, #8
   22610:	2b1f      	cmp	r3, #31
   22612:	dd00      	ble.n	22616 <__aeabi_dsub+0xd2>
   22614:	e0e9      	b.n	227ea <__aeabi_dsub+0x2a6>
   22616:	2220      	movs	r2, #32
   22618:	003c      	movs	r4, r7
   2261a:	1ad2      	subs	r2, r2, r3
   2261c:	409d      	lsls	r5, r3
   2261e:	40d4      	lsrs	r4, r2
   22620:	409f      	lsls	r7, r3
   22622:	4325      	orrs	r5, r4
   22624:	429e      	cmp	r6, r3
   22626:	dd00      	ble.n	2262a <__aeabi_dsub+0xe6>
   22628:	e0db      	b.n	227e2 <__aeabi_dsub+0x29e>
   2262a:	1b9e      	subs	r6, r3, r6
   2262c:	1c73      	adds	r3, r6, #1
   2262e:	2b1f      	cmp	r3, #31
   22630:	dd00      	ble.n	22634 <__aeabi_dsub+0xf0>
   22632:	e10a      	b.n	2284a <__aeabi_dsub+0x306>
   22634:	2220      	movs	r2, #32
   22636:	0038      	movs	r0, r7
   22638:	1ad2      	subs	r2, r2, r3
   2263a:	0029      	movs	r1, r5
   2263c:	4097      	lsls	r7, r2
   2263e:	002c      	movs	r4, r5
   22640:	4091      	lsls	r1, r2
   22642:	40d8      	lsrs	r0, r3
   22644:	1e7a      	subs	r2, r7, #1
   22646:	4197      	sbcs	r7, r2
   22648:	40dc      	lsrs	r4, r3
   2264a:	2600      	movs	r6, #0
   2264c:	4301      	orrs	r1, r0
   2264e:	430f      	orrs	r7, r1
   22650:	077b      	lsls	r3, r7, #29
   22652:	d009      	beq.n	22668 <__aeabi_dsub+0x124>
   22654:	230f      	movs	r3, #15
   22656:	403b      	ands	r3, r7
   22658:	2b04      	cmp	r3, #4
   2265a:	d005      	beq.n	22668 <__aeabi_dsub+0x124>
   2265c:	1d3b      	adds	r3, r7, #4
   2265e:	42bb      	cmp	r3, r7
   22660:	41bf      	sbcs	r7, r7
   22662:	427f      	negs	r7, r7
   22664:	19e4      	adds	r4, r4, r7
   22666:	001f      	movs	r7, r3
   22668:	0223      	lsls	r3, r4, #8
   2266a:	d525      	bpl.n	226b8 <__aeabi_dsub+0x174>
   2266c:	4b86      	ldr	r3, [pc, #536]	; (22888 <__aeabi_dsub+0x344>)
   2266e:	3601      	adds	r6, #1
   22670:	429e      	cmp	r6, r3
   22672:	d100      	bne.n	22676 <__aeabi_dsub+0x132>
   22674:	e0af      	b.n	227d6 <__aeabi_dsub+0x292>
   22676:	4b85      	ldr	r3, [pc, #532]	; (2288c <__aeabi_dsub+0x348>)
   22678:	2501      	movs	r5, #1
   2267a:	401c      	ands	r4, r3
   2267c:	4643      	mov	r3, r8
   2267e:	0762      	lsls	r2, r4, #29
   22680:	08ff      	lsrs	r7, r7, #3
   22682:	0264      	lsls	r4, r4, #9
   22684:	0576      	lsls	r6, r6, #21
   22686:	4317      	orrs	r7, r2
   22688:	0b24      	lsrs	r4, r4, #12
   2268a:	0d76      	lsrs	r6, r6, #21
   2268c:	401d      	ands	r5, r3
   2268e:	2100      	movs	r1, #0
   22690:	0324      	lsls	r4, r4, #12
   22692:	0b23      	lsrs	r3, r4, #12
   22694:	0d0c      	lsrs	r4, r1, #20
   22696:	4a7e      	ldr	r2, [pc, #504]	; (22890 <__aeabi_dsub+0x34c>)
   22698:	0524      	lsls	r4, r4, #20
   2269a:	431c      	orrs	r4, r3
   2269c:	4014      	ands	r4, r2
   2269e:	0533      	lsls	r3, r6, #20
   226a0:	4323      	orrs	r3, r4
   226a2:	005b      	lsls	r3, r3, #1
   226a4:	07ed      	lsls	r5, r5, #31
   226a6:	085b      	lsrs	r3, r3, #1
   226a8:	432b      	orrs	r3, r5
   226aa:	0038      	movs	r0, r7
   226ac:	0019      	movs	r1, r3
   226ae:	bc1c      	pop	{r2, r3, r4}
   226b0:	4690      	mov	r8, r2
   226b2:	4699      	mov	r9, r3
   226b4:	46a2      	mov	sl, r4
   226b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226b8:	2501      	movs	r5, #1
   226ba:	4643      	mov	r3, r8
   226bc:	0762      	lsls	r2, r4, #29
   226be:	08ff      	lsrs	r7, r7, #3
   226c0:	4317      	orrs	r7, r2
   226c2:	08e4      	lsrs	r4, r4, #3
   226c4:	401d      	ands	r5, r3
   226c6:	4b70      	ldr	r3, [pc, #448]	; (22888 <__aeabi_dsub+0x344>)
   226c8:	429e      	cmp	r6, r3
   226ca:	d036      	beq.n	2273a <__aeabi_dsub+0x1f6>
   226cc:	0324      	lsls	r4, r4, #12
   226ce:	0576      	lsls	r6, r6, #21
   226d0:	0b24      	lsrs	r4, r4, #12
   226d2:	0d76      	lsrs	r6, r6, #21
   226d4:	e7db      	b.n	2268e <__aeabi_dsub+0x14a>
   226d6:	4663      	mov	r3, ip
   226d8:	1af3      	subs	r3, r6, r3
   226da:	2b00      	cmp	r3, #0
   226dc:	dc00      	bgt.n	226e0 <__aeabi_dsub+0x19c>
   226de:	e094      	b.n	2280a <__aeabi_dsub+0x2c6>
   226e0:	4660      	mov	r0, ip
   226e2:	2800      	cmp	r0, #0
   226e4:	d035      	beq.n	22752 <__aeabi_dsub+0x20e>
   226e6:	4868      	ldr	r0, [pc, #416]	; (22888 <__aeabi_dsub+0x344>)
   226e8:	4286      	cmp	r6, r0
   226ea:	d0b1      	beq.n	22650 <__aeabi_dsub+0x10c>
   226ec:	2780      	movs	r7, #128	; 0x80
   226ee:	043f      	lsls	r7, r7, #16
   226f0:	4339      	orrs	r1, r7
   226f2:	2b38      	cmp	r3, #56	; 0x38
   226f4:	dc00      	bgt.n	226f8 <__aeabi_dsub+0x1b4>
   226f6:	e0fd      	b.n	228f4 <__aeabi_dsub+0x3b0>
   226f8:	430a      	orrs	r2, r1
   226fa:	0017      	movs	r7, r2
   226fc:	2100      	movs	r1, #0
   226fe:	1e7a      	subs	r2, r7, #1
   22700:	4197      	sbcs	r7, r2
   22702:	4457      	add	r7, sl
   22704:	4557      	cmp	r7, sl
   22706:	4180      	sbcs	r0, r0
   22708:	1909      	adds	r1, r1, r4
   2270a:	4244      	negs	r4, r0
   2270c:	190c      	adds	r4, r1, r4
   2270e:	0223      	lsls	r3, r4, #8
   22710:	d53a      	bpl.n	22788 <__aeabi_dsub+0x244>
   22712:	4b5d      	ldr	r3, [pc, #372]	; (22888 <__aeabi_dsub+0x344>)
   22714:	3601      	adds	r6, #1
   22716:	429e      	cmp	r6, r3
   22718:	d100      	bne.n	2271c <__aeabi_dsub+0x1d8>
   2271a:	e14b      	b.n	229b4 <__aeabi_dsub+0x470>
   2271c:	2201      	movs	r2, #1
   2271e:	4b5b      	ldr	r3, [pc, #364]	; (2288c <__aeabi_dsub+0x348>)
   22720:	401c      	ands	r4, r3
   22722:	087b      	lsrs	r3, r7, #1
   22724:	4017      	ands	r7, r2
   22726:	431f      	orrs	r7, r3
   22728:	07e2      	lsls	r2, r4, #31
   2272a:	4317      	orrs	r7, r2
   2272c:	0864      	lsrs	r4, r4, #1
   2272e:	e78f      	b.n	22650 <__aeabi_dsub+0x10c>
   22730:	0008      	movs	r0, r1
   22732:	4310      	orrs	r0, r2
   22734:	d000      	beq.n	22738 <__aeabi_dsub+0x1f4>
   22736:	e724      	b.n	22582 <__aeabi_dsub+0x3e>
   22738:	e721      	b.n	2257e <__aeabi_dsub+0x3a>
   2273a:	0023      	movs	r3, r4
   2273c:	433b      	orrs	r3, r7
   2273e:	d100      	bne.n	22742 <__aeabi_dsub+0x1fe>
   22740:	e1b9      	b.n	22ab6 <__aeabi_dsub+0x572>
   22742:	2280      	movs	r2, #128	; 0x80
   22744:	0312      	lsls	r2, r2, #12
   22746:	4314      	orrs	r4, r2
   22748:	0324      	lsls	r4, r4, #12
   2274a:	0b24      	lsrs	r4, r4, #12
   2274c:	e79f      	b.n	2268e <__aeabi_dsub+0x14a>
   2274e:	002e      	movs	r6, r5
   22750:	e77e      	b.n	22650 <__aeabi_dsub+0x10c>
   22752:	0008      	movs	r0, r1
   22754:	4310      	orrs	r0, r2
   22756:	d100      	bne.n	2275a <__aeabi_dsub+0x216>
   22758:	e0ca      	b.n	228f0 <__aeabi_dsub+0x3ac>
   2275a:	1e58      	subs	r0, r3, #1
   2275c:	4684      	mov	ip, r0
   2275e:	2800      	cmp	r0, #0
   22760:	d000      	beq.n	22764 <__aeabi_dsub+0x220>
   22762:	e0e7      	b.n	22934 <__aeabi_dsub+0x3f0>
   22764:	4452      	add	r2, sl
   22766:	4552      	cmp	r2, sl
   22768:	4180      	sbcs	r0, r0
   2276a:	1864      	adds	r4, r4, r1
   2276c:	4240      	negs	r0, r0
   2276e:	1824      	adds	r4, r4, r0
   22770:	0017      	movs	r7, r2
   22772:	2601      	movs	r6, #1
   22774:	0223      	lsls	r3, r4, #8
   22776:	d507      	bpl.n	22788 <__aeabi_dsub+0x244>
   22778:	2602      	movs	r6, #2
   2277a:	e7cf      	b.n	2271c <__aeabi_dsub+0x1d8>
   2277c:	4664      	mov	r4, ip
   2277e:	432c      	orrs	r4, r5
   22780:	d100      	bne.n	22784 <__aeabi_dsub+0x240>
   22782:	e1b3      	b.n	22aec <__aeabi_dsub+0x5a8>
   22784:	002c      	movs	r4, r5
   22786:	4667      	mov	r7, ip
   22788:	077b      	lsls	r3, r7, #29
   2278a:	d000      	beq.n	2278e <__aeabi_dsub+0x24a>
   2278c:	e762      	b.n	22654 <__aeabi_dsub+0x110>
   2278e:	0763      	lsls	r3, r4, #29
   22790:	08ff      	lsrs	r7, r7, #3
   22792:	431f      	orrs	r7, r3
   22794:	2501      	movs	r5, #1
   22796:	4643      	mov	r3, r8
   22798:	08e4      	lsrs	r4, r4, #3
   2279a:	401d      	ands	r5, r3
   2279c:	e793      	b.n	226c6 <__aeabi_dsub+0x182>
   2279e:	2d00      	cmp	r5, #0
   227a0:	d178      	bne.n	22894 <__aeabi_dsub+0x350>
   227a2:	1c75      	adds	r5, r6, #1
   227a4:	056d      	lsls	r5, r5, #21
   227a6:	0d6d      	lsrs	r5, r5, #21
   227a8:	2d01      	cmp	r5, #1
   227aa:	dc00      	bgt.n	227ae <__aeabi_dsub+0x26a>
   227ac:	e0f2      	b.n	22994 <__aeabi_dsub+0x450>
   227ae:	4650      	mov	r0, sl
   227b0:	1a80      	subs	r0, r0, r2
   227b2:	4582      	cmp	sl, r0
   227b4:	41bf      	sbcs	r7, r7
   227b6:	1a65      	subs	r5, r4, r1
   227b8:	427f      	negs	r7, r7
   227ba:	1bed      	subs	r5, r5, r7
   227bc:	4684      	mov	ip, r0
   227be:	0228      	lsls	r0, r5, #8
   227c0:	d400      	bmi.n	227c4 <__aeabi_dsub+0x280>
   227c2:	e08c      	b.n	228de <__aeabi_dsub+0x39a>
   227c4:	4650      	mov	r0, sl
   227c6:	1a17      	subs	r7, r2, r0
   227c8:	42ba      	cmp	r2, r7
   227ca:	4192      	sbcs	r2, r2
   227cc:	1b0c      	subs	r4, r1, r4
   227ce:	4255      	negs	r5, r2
   227d0:	1b65      	subs	r5, r4, r5
   227d2:	4698      	mov	r8, r3
   227d4:	e714      	b.n	22600 <__aeabi_dsub+0xbc>
   227d6:	2501      	movs	r5, #1
   227d8:	4643      	mov	r3, r8
   227da:	2400      	movs	r4, #0
   227dc:	401d      	ands	r5, r3
   227de:	2700      	movs	r7, #0
   227e0:	e755      	b.n	2268e <__aeabi_dsub+0x14a>
   227e2:	4c2a      	ldr	r4, [pc, #168]	; (2288c <__aeabi_dsub+0x348>)
   227e4:	1af6      	subs	r6, r6, r3
   227e6:	402c      	ands	r4, r5
   227e8:	e732      	b.n	22650 <__aeabi_dsub+0x10c>
   227ea:	003d      	movs	r5, r7
   227ec:	3828      	subs	r0, #40	; 0x28
   227ee:	4085      	lsls	r5, r0
   227f0:	2700      	movs	r7, #0
   227f2:	e717      	b.n	22624 <__aeabi_dsub+0xe0>
   227f4:	0038      	movs	r0, r7
   227f6:	f000 fa69 	bl	22ccc <__clzsi2>
   227fa:	3020      	adds	r0, #32
   227fc:	e706      	b.n	2260c <__aeabi_dsub+0xc8>
   227fe:	430a      	orrs	r2, r1
   22800:	0017      	movs	r7, r2
   22802:	2100      	movs	r1, #0
   22804:	1e7a      	subs	r2, r7, #1
   22806:	4197      	sbcs	r7, r2
   22808:	e6ee      	b.n	225e8 <__aeabi_dsub+0xa4>
   2280a:	2b00      	cmp	r3, #0
   2280c:	d000      	beq.n	22810 <__aeabi_dsub+0x2cc>
   2280e:	e0e5      	b.n	229dc <__aeabi_dsub+0x498>
   22810:	1c73      	adds	r3, r6, #1
   22812:	469c      	mov	ip, r3
   22814:	055b      	lsls	r3, r3, #21
   22816:	0d5b      	lsrs	r3, r3, #21
   22818:	2b01      	cmp	r3, #1
   2281a:	dc00      	bgt.n	2281e <__aeabi_dsub+0x2da>
   2281c:	e09f      	b.n	2295e <__aeabi_dsub+0x41a>
   2281e:	4b1a      	ldr	r3, [pc, #104]	; (22888 <__aeabi_dsub+0x344>)
   22820:	459c      	cmp	ip, r3
   22822:	d100      	bne.n	22826 <__aeabi_dsub+0x2e2>
   22824:	e0c5      	b.n	229b2 <__aeabi_dsub+0x46e>
   22826:	4452      	add	r2, sl
   22828:	4552      	cmp	r2, sl
   2282a:	4180      	sbcs	r0, r0
   2282c:	1864      	adds	r4, r4, r1
   2282e:	4240      	negs	r0, r0
   22830:	1824      	adds	r4, r4, r0
   22832:	07e7      	lsls	r7, r4, #31
   22834:	0852      	lsrs	r2, r2, #1
   22836:	4317      	orrs	r7, r2
   22838:	0864      	lsrs	r4, r4, #1
   2283a:	4666      	mov	r6, ip
   2283c:	e708      	b.n	22650 <__aeabi_dsub+0x10c>
   2283e:	4812      	ldr	r0, [pc, #72]	; (22888 <__aeabi_dsub+0x344>)
   22840:	4285      	cmp	r5, r0
   22842:	d100      	bne.n	22846 <__aeabi_dsub+0x302>
   22844:	e085      	b.n	22952 <__aeabi_dsub+0x40e>
   22846:	001d      	movs	r5, r3
   22848:	e6bc      	b.n	225c4 <__aeabi_dsub+0x80>
   2284a:	0029      	movs	r1, r5
   2284c:	3e1f      	subs	r6, #31
   2284e:	40f1      	lsrs	r1, r6
   22850:	2b20      	cmp	r3, #32
   22852:	d100      	bne.n	22856 <__aeabi_dsub+0x312>
   22854:	e07f      	b.n	22956 <__aeabi_dsub+0x412>
   22856:	2240      	movs	r2, #64	; 0x40
   22858:	1ad3      	subs	r3, r2, r3
   2285a:	409d      	lsls	r5, r3
   2285c:	432f      	orrs	r7, r5
   2285e:	1e7d      	subs	r5, r7, #1
   22860:	41af      	sbcs	r7, r5
   22862:	2400      	movs	r4, #0
   22864:	430f      	orrs	r7, r1
   22866:	2600      	movs	r6, #0
   22868:	e78e      	b.n	22788 <__aeabi_dsub+0x244>
   2286a:	002b      	movs	r3, r5
   2286c:	000f      	movs	r7, r1
   2286e:	3b20      	subs	r3, #32
   22870:	40df      	lsrs	r7, r3
   22872:	2d20      	cmp	r5, #32
   22874:	d071      	beq.n	2295a <__aeabi_dsub+0x416>
   22876:	2340      	movs	r3, #64	; 0x40
   22878:	1b5d      	subs	r5, r3, r5
   2287a:	40a9      	lsls	r1, r5
   2287c:	430a      	orrs	r2, r1
   2287e:	1e51      	subs	r1, r2, #1
   22880:	418a      	sbcs	r2, r1
   22882:	2100      	movs	r1, #0
   22884:	4317      	orrs	r7, r2
   22886:	e6af      	b.n	225e8 <__aeabi_dsub+0xa4>
   22888:	000007ff 	.word	0x000007ff
   2288c:	ff7fffff 	.word	0xff7fffff
   22890:	800fffff 	.word	0x800fffff
   22894:	2e00      	cmp	r6, #0
   22896:	d03e      	beq.n	22916 <__aeabi_dsub+0x3d2>
   22898:	4eb3      	ldr	r6, [pc, #716]	; (22b68 <__aeabi_dsub+0x624>)
   2289a:	45b4      	cmp	ip, r6
   2289c:	d045      	beq.n	2292a <__aeabi_dsub+0x3e6>
   2289e:	2680      	movs	r6, #128	; 0x80
   228a0:	0436      	lsls	r6, r6, #16
   228a2:	426d      	negs	r5, r5
   228a4:	4334      	orrs	r4, r6
   228a6:	2d38      	cmp	r5, #56	; 0x38
   228a8:	dd00      	ble.n	228ac <__aeabi_dsub+0x368>
   228aa:	e0a8      	b.n	229fe <__aeabi_dsub+0x4ba>
   228ac:	2d1f      	cmp	r5, #31
   228ae:	dd00      	ble.n	228b2 <__aeabi_dsub+0x36e>
   228b0:	e11f      	b.n	22af2 <__aeabi_dsub+0x5ae>
   228b2:	2620      	movs	r6, #32
   228b4:	0027      	movs	r7, r4
   228b6:	4650      	mov	r0, sl
   228b8:	1b76      	subs	r6, r6, r5
   228ba:	40b7      	lsls	r7, r6
   228bc:	40e8      	lsrs	r0, r5
   228be:	4307      	orrs	r7, r0
   228c0:	4650      	mov	r0, sl
   228c2:	40b0      	lsls	r0, r6
   228c4:	1e46      	subs	r6, r0, #1
   228c6:	41b0      	sbcs	r0, r6
   228c8:	40ec      	lsrs	r4, r5
   228ca:	4338      	orrs	r0, r7
   228cc:	1a17      	subs	r7, r2, r0
   228ce:	42ba      	cmp	r2, r7
   228d0:	4192      	sbcs	r2, r2
   228d2:	1b0c      	subs	r4, r1, r4
   228d4:	4252      	negs	r2, r2
   228d6:	1aa4      	subs	r4, r4, r2
   228d8:	4666      	mov	r6, ip
   228da:	4698      	mov	r8, r3
   228dc:	e68b      	b.n	225f6 <__aeabi_dsub+0xb2>
   228de:	4664      	mov	r4, ip
   228e0:	4667      	mov	r7, ip
   228e2:	432c      	orrs	r4, r5
   228e4:	d000      	beq.n	228e8 <__aeabi_dsub+0x3a4>
   228e6:	e68b      	b.n	22600 <__aeabi_dsub+0xbc>
   228e8:	2500      	movs	r5, #0
   228ea:	2600      	movs	r6, #0
   228ec:	2700      	movs	r7, #0
   228ee:	e6ea      	b.n	226c6 <__aeabi_dsub+0x182>
   228f0:	001e      	movs	r6, r3
   228f2:	e6ad      	b.n	22650 <__aeabi_dsub+0x10c>
   228f4:	2b1f      	cmp	r3, #31
   228f6:	dc60      	bgt.n	229ba <__aeabi_dsub+0x476>
   228f8:	2720      	movs	r7, #32
   228fa:	1af8      	subs	r0, r7, r3
   228fc:	000f      	movs	r7, r1
   228fe:	4684      	mov	ip, r0
   22900:	4087      	lsls	r7, r0
   22902:	0010      	movs	r0, r2
   22904:	40d8      	lsrs	r0, r3
   22906:	4307      	orrs	r7, r0
   22908:	4660      	mov	r0, ip
   2290a:	4082      	lsls	r2, r0
   2290c:	1e50      	subs	r0, r2, #1
   2290e:	4182      	sbcs	r2, r0
   22910:	40d9      	lsrs	r1, r3
   22912:	4317      	orrs	r7, r2
   22914:	e6f5      	b.n	22702 <__aeabi_dsub+0x1be>
   22916:	0026      	movs	r6, r4
   22918:	4650      	mov	r0, sl
   2291a:	4306      	orrs	r6, r0
   2291c:	d005      	beq.n	2292a <__aeabi_dsub+0x3e6>
   2291e:	43ed      	mvns	r5, r5
   22920:	2d00      	cmp	r5, #0
   22922:	d0d3      	beq.n	228cc <__aeabi_dsub+0x388>
   22924:	4e90      	ldr	r6, [pc, #576]	; (22b68 <__aeabi_dsub+0x624>)
   22926:	45b4      	cmp	ip, r6
   22928:	d1bd      	bne.n	228a6 <__aeabi_dsub+0x362>
   2292a:	000c      	movs	r4, r1
   2292c:	0017      	movs	r7, r2
   2292e:	4666      	mov	r6, ip
   22930:	4698      	mov	r8, r3
   22932:	e68d      	b.n	22650 <__aeabi_dsub+0x10c>
   22934:	488c      	ldr	r0, [pc, #560]	; (22b68 <__aeabi_dsub+0x624>)
   22936:	4283      	cmp	r3, r0
   22938:	d00b      	beq.n	22952 <__aeabi_dsub+0x40e>
   2293a:	4663      	mov	r3, ip
   2293c:	e6d9      	b.n	226f2 <__aeabi_dsub+0x1ae>
   2293e:	2d00      	cmp	r5, #0
   22940:	d000      	beq.n	22944 <__aeabi_dsub+0x400>
   22942:	e096      	b.n	22a72 <__aeabi_dsub+0x52e>
   22944:	0008      	movs	r0, r1
   22946:	4310      	orrs	r0, r2
   22948:	d100      	bne.n	2294c <__aeabi_dsub+0x408>
   2294a:	e0e2      	b.n	22b12 <__aeabi_dsub+0x5ce>
   2294c:	000c      	movs	r4, r1
   2294e:	0017      	movs	r7, r2
   22950:	4698      	mov	r8, r3
   22952:	4e85      	ldr	r6, [pc, #532]	; (22b68 <__aeabi_dsub+0x624>)
   22954:	e67c      	b.n	22650 <__aeabi_dsub+0x10c>
   22956:	2500      	movs	r5, #0
   22958:	e780      	b.n	2285c <__aeabi_dsub+0x318>
   2295a:	2100      	movs	r1, #0
   2295c:	e78e      	b.n	2287c <__aeabi_dsub+0x338>
   2295e:	0023      	movs	r3, r4
   22960:	4650      	mov	r0, sl
   22962:	4303      	orrs	r3, r0
   22964:	2e00      	cmp	r6, #0
   22966:	d000      	beq.n	2296a <__aeabi_dsub+0x426>
   22968:	e0a8      	b.n	22abc <__aeabi_dsub+0x578>
   2296a:	2b00      	cmp	r3, #0
   2296c:	d100      	bne.n	22970 <__aeabi_dsub+0x42c>
   2296e:	e0de      	b.n	22b2e <__aeabi_dsub+0x5ea>
   22970:	000b      	movs	r3, r1
   22972:	4313      	orrs	r3, r2
   22974:	d100      	bne.n	22978 <__aeabi_dsub+0x434>
   22976:	e66b      	b.n	22650 <__aeabi_dsub+0x10c>
   22978:	4452      	add	r2, sl
   2297a:	4552      	cmp	r2, sl
   2297c:	4180      	sbcs	r0, r0
   2297e:	1864      	adds	r4, r4, r1
   22980:	4240      	negs	r0, r0
   22982:	1824      	adds	r4, r4, r0
   22984:	0017      	movs	r7, r2
   22986:	0223      	lsls	r3, r4, #8
   22988:	d400      	bmi.n	2298c <__aeabi_dsub+0x448>
   2298a:	e6fd      	b.n	22788 <__aeabi_dsub+0x244>
   2298c:	4b77      	ldr	r3, [pc, #476]	; (22b6c <__aeabi_dsub+0x628>)
   2298e:	4666      	mov	r6, ip
   22990:	401c      	ands	r4, r3
   22992:	e65d      	b.n	22650 <__aeabi_dsub+0x10c>
   22994:	0025      	movs	r5, r4
   22996:	4650      	mov	r0, sl
   22998:	4305      	orrs	r5, r0
   2299a:	2e00      	cmp	r6, #0
   2299c:	d1cf      	bne.n	2293e <__aeabi_dsub+0x3fa>
   2299e:	2d00      	cmp	r5, #0
   229a0:	d14f      	bne.n	22a42 <__aeabi_dsub+0x4fe>
   229a2:	000c      	movs	r4, r1
   229a4:	4314      	orrs	r4, r2
   229a6:	d100      	bne.n	229aa <__aeabi_dsub+0x466>
   229a8:	e0a0      	b.n	22aec <__aeabi_dsub+0x5a8>
   229aa:	000c      	movs	r4, r1
   229ac:	0017      	movs	r7, r2
   229ae:	4698      	mov	r8, r3
   229b0:	e64e      	b.n	22650 <__aeabi_dsub+0x10c>
   229b2:	4666      	mov	r6, ip
   229b4:	2400      	movs	r4, #0
   229b6:	2700      	movs	r7, #0
   229b8:	e685      	b.n	226c6 <__aeabi_dsub+0x182>
   229ba:	001f      	movs	r7, r3
   229bc:	0008      	movs	r0, r1
   229be:	3f20      	subs	r7, #32
   229c0:	40f8      	lsrs	r0, r7
   229c2:	0007      	movs	r7, r0
   229c4:	2b20      	cmp	r3, #32
   229c6:	d100      	bne.n	229ca <__aeabi_dsub+0x486>
   229c8:	e08e      	b.n	22ae8 <__aeabi_dsub+0x5a4>
   229ca:	2040      	movs	r0, #64	; 0x40
   229cc:	1ac3      	subs	r3, r0, r3
   229ce:	4099      	lsls	r1, r3
   229d0:	430a      	orrs	r2, r1
   229d2:	1e51      	subs	r1, r2, #1
   229d4:	418a      	sbcs	r2, r1
   229d6:	2100      	movs	r1, #0
   229d8:	4317      	orrs	r7, r2
   229da:	e692      	b.n	22702 <__aeabi_dsub+0x1be>
   229dc:	2e00      	cmp	r6, #0
   229de:	d114      	bne.n	22a0a <__aeabi_dsub+0x4c6>
   229e0:	0026      	movs	r6, r4
   229e2:	4650      	mov	r0, sl
   229e4:	4306      	orrs	r6, r0
   229e6:	d062      	beq.n	22aae <__aeabi_dsub+0x56a>
   229e8:	43db      	mvns	r3, r3
   229ea:	2b00      	cmp	r3, #0
   229ec:	d15c      	bne.n	22aa8 <__aeabi_dsub+0x564>
   229ee:	1887      	adds	r7, r0, r2
   229f0:	4297      	cmp	r7, r2
   229f2:	4192      	sbcs	r2, r2
   229f4:	1864      	adds	r4, r4, r1
   229f6:	4252      	negs	r2, r2
   229f8:	18a4      	adds	r4, r4, r2
   229fa:	4666      	mov	r6, ip
   229fc:	e687      	b.n	2270e <__aeabi_dsub+0x1ca>
   229fe:	4650      	mov	r0, sl
   22a00:	4320      	orrs	r0, r4
   22a02:	1e44      	subs	r4, r0, #1
   22a04:	41a0      	sbcs	r0, r4
   22a06:	2400      	movs	r4, #0
   22a08:	e760      	b.n	228cc <__aeabi_dsub+0x388>
   22a0a:	4e57      	ldr	r6, [pc, #348]	; (22b68 <__aeabi_dsub+0x624>)
   22a0c:	45b4      	cmp	ip, r6
   22a0e:	d04e      	beq.n	22aae <__aeabi_dsub+0x56a>
   22a10:	2680      	movs	r6, #128	; 0x80
   22a12:	0436      	lsls	r6, r6, #16
   22a14:	425b      	negs	r3, r3
   22a16:	4334      	orrs	r4, r6
   22a18:	2b38      	cmp	r3, #56	; 0x38
   22a1a:	dd00      	ble.n	22a1e <__aeabi_dsub+0x4da>
   22a1c:	e07f      	b.n	22b1e <__aeabi_dsub+0x5da>
   22a1e:	2b1f      	cmp	r3, #31
   22a20:	dd00      	ble.n	22a24 <__aeabi_dsub+0x4e0>
   22a22:	e08b      	b.n	22b3c <__aeabi_dsub+0x5f8>
   22a24:	2620      	movs	r6, #32
   22a26:	0027      	movs	r7, r4
   22a28:	4650      	mov	r0, sl
   22a2a:	1af6      	subs	r6, r6, r3
   22a2c:	40b7      	lsls	r7, r6
   22a2e:	40d8      	lsrs	r0, r3
   22a30:	4307      	orrs	r7, r0
   22a32:	4650      	mov	r0, sl
   22a34:	40b0      	lsls	r0, r6
   22a36:	1e46      	subs	r6, r0, #1
   22a38:	41b0      	sbcs	r0, r6
   22a3a:	4307      	orrs	r7, r0
   22a3c:	40dc      	lsrs	r4, r3
   22a3e:	18bf      	adds	r7, r7, r2
   22a40:	e7d6      	b.n	229f0 <__aeabi_dsub+0x4ac>
   22a42:	000d      	movs	r5, r1
   22a44:	4315      	orrs	r5, r2
   22a46:	d100      	bne.n	22a4a <__aeabi_dsub+0x506>
   22a48:	e602      	b.n	22650 <__aeabi_dsub+0x10c>
   22a4a:	4650      	mov	r0, sl
   22a4c:	1a80      	subs	r0, r0, r2
   22a4e:	4582      	cmp	sl, r0
   22a50:	41bf      	sbcs	r7, r7
   22a52:	1a65      	subs	r5, r4, r1
   22a54:	427f      	negs	r7, r7
   22a56:	1bed      	subs	r5, r5, r7
   22a58:	4684      	mov	ip, r0
   22a5a:	0228      	lsls	r0, r5, #8
   22a5c:	d400      	bmi.n	22a60 <__aeabi_dsub+0x51c>
   22a5e:	e68d      	b.n	2277c <__aeabi_dsub+0x238>
   22a60:	4650      	mov	r0, sl
   22a62:	1a17      	subs	r7, r2, r0
   22a64:	42ba      	cmp	r2, r7
   22a66:	4192      	sbcs	r2, r2
   22a68:	1b0c      	subs	r4, r1, r4
   22a6a:	4252      	negs	r2, r2
   22a6c:	1aa4      	subs	r4, r4, r2
   22a6e:	4698      	mov	r8, r3
   22a70:	e5ee      	b.n	22650 <__aeabi_dsub+0x10c>
   22a72:	000d      	movs	r5, r1
   22a74:	4315      	orrs	r5, r2
   22a76:	d100      	bne.n	22a7a <__aeabi_dsub+0x536>
   22a78:	e76b      	b.n	22952 <__aeabi_dsub+0x40e>
   22a7a:	4650      	mov	r0, sl
   22a7c:	0767      	lsls	r7, r4, #29
   22a7e:	08c0      	lsrs	r0, r0, #3
   22a80:	4307      	orrs	r7, r0
   22a82:	2080      	movs	r0, #128	; 0x80
   22a84:	08e4      	lsrs	r4, r4, #3
   22a86:	0300      	lsls	r0, r0, #12
   22a88:	4204      	tst	r4, r0
   22a8a:	d007      	beq.n	22a9c <__aeabi_dsub+0x558>
   22a8c:	08cd      	lsrs	r5, r1, #3
   22a8e:	4205      	tst	r5, r0
   22a90:	d104      	bne.n	22a9c <__aeabi_dsub+0x558>
   22a92:	002c      	movs	r4, r5
   22a94:	4698      	mov	r8, r3
   22a96:	08d7      	lsrs	r7, r2, #3
   22a98:	0749      	lsls	r1, r1, #29
   22a9a:	430f      	orrs	r7, r1
   22a9c:	0f7b      	lsrs	r3, r7, #29
   22a9e:	00e4      	lsls	r4, r4, #3
   22aa0:	431c      	orrs	r4, r3
   22aa2:	00ff      	lsls	r7, r7, #3
   22aa4:	4e30      	ldr	r6, [pc, #192]	; (22b68 <__aeabi_dsub+0x624>)
   22aa6:	e5d3      	b.n	22650 <__aeabi_dsub+0x10c>
   22aa8:	4e2f      	ldr	r6, [pc, #188]	; (22b68 <__aeabi_dsub+0x624>)
   22aaa:	45b4      	cmp	ip, r6
   22aac:	d1b4      	bne.n	22a18 <__aeabi_dsub+0x4d4>
   22aae:	000c      	movs	r4, r1
   22ab0:	0017      	movs	r7, r2
   22ab2:	4666      	mov	r6, ip
   22ab4:	e5cc      	b.n	22650 <__aeabi_dsub+0x10c>
   22ab6:	2700      	movs	r7, #0
   22ab8:	2400      	movs	r4, #0
   22aba:	e5e8      	b.n	2268e <__aeabi_dsub+0x14a>
   22abc:	2b00      	cmp	r3, #0
   22abe:	d039      	beq.n	22b34 <__aeabi_dsub+0x5f0>
   22ac0:	000b      	movs	r3, r1
   22ac2:	4313      	orrs	r3, r2
   22ac4:	d100      	bne.n	22ac8 <__aeabi_dsub+0x584>
   22ac6:	e744      	b.n	22952 <__aeabi_dsub+0x40e>
   22ac8:	08c0      	lsrs	r0, r0, #3
   22aca:	0767      	lsls	r7, r4, #29
   22acc:	4307      	orrs	r7, r0
   22ace:	2080      	movs	r0, #128	; 0x80
   22ad0:	08e4      	lsrs	r4, r4, #3
   22ad2:	0300      	lsls	r0, r0, #12
   22ad4:	4204      	tst	r4, r0
   22ad6:	d0e1      	beq.n	22a9c <__aeabi_dsub+0x558>
   22ad8:	08cb      	lsrs	r3, r1, #3
   22ada:	4203      	tst	r3, r0
   22adc:	d1de      	bne.n	22a9c <__aeabi_dsub+0x558>
   22ade:	08d7      	lsrs	r7, r2, #3
   22ae0:	0749      	lsls	r1, r1, #29
   22ae2:	430f      	orrs	r7, r1
   22ae4:	001c      	movs	r4, r3
   22ae6:	e7d9      	b.n	22a9c <__aeabi_dsub+0x558>
   22ae8:	2100      	movs	r1, #0
   22aea:	e771      	b.n	229d0 <__aeabi_dsub+0x48c>
   22aec:	2500      	movs	r5, #0
   22aee:	2700      	movs	r7, #0
   22af0:	e5e9      	b.n	226c6 <__aeabi_dsub+0x182>
   22af2:	002e      	movs	r6, r5
   22af4:	0027      	movs	r7, r4
   22af6:	3e20      	subs	r6, #32
   22af8:	40f7      	lsrs	r7, r6
   22afa:	2d20      	cmp	r5, #32
   22afc:	d02f      	beq.n	22b5e <__aeabi_dsub+0x61a>
   22afe:	2640      	movs	r6, #64	; 0x40
   22b00:	1b75      	subs	r5, r6, r5
   22b02:	40ac      	lsls	r4, r5
   22b04:	4650      	mov	r0, sl
   22b06:	4320      	orrs	r0, r4
   22b08:	1e44      	subs	r4, r0, #1
   22b0a:	41a0      	sbcs	r0, r4
   22b0c:	2400      	movs	r4, #0
   22b0e:	4338      	orrs	r0, r7
   22b10:	e6dc      	b.n	228cc <__aeabi_dsub+0x388>
   22b12:	2480      	movs	r4, #128	; 0x80
   22b14:	2500      	movs	r5, #0
   22b16:	0324      	lsls	r4, r4, #12
   22b18:	4e13      	ldr	r6, [pc, #76]	; (22b68 <__aeabi_dsub+0x624>)
   22b1a:	2700      	movs	r7, #0
   22b1c:	e5d3      	b.n	226c6 <__aeabi_dsub+0x182>
   22b1e:	4650      	mov	r0, sl
   22b20:	4320      	orrs	r0, r4
   22b22:	0007      	movs	r7, r0
   22b24:	1e78      	subs	r0, r7, #1
   22b26:	4187      	sbcs	r7, r0
   22b28:	2400      	movs	r4, #0
   22b2a:	18bf      	adds	r7, r7, r2
   22b2c:	e760      	b.n	229f0 <__aeabi_dsub+0x4ac>
   22b2e:	000c      	movs	r4, r1
   22b30:	0017      	movs	r7, r2
   22b32:	e58d      	b.n	22650 <__aeabi_dsub+0x10c>
   22b34:	000c      	movs	r4, r1
   22b36:	0017      	movs	r7, r2
   22b38:	4e0b      	ldr	r6, [pc, #44]	; (22b68 <__aeabi_dsub+0x624>)
   22b3a:	e589      	b.n	22650 <__aeabi_dsub+0x10c>
   22b3c:	001e      	movs	r6, r3
   22b3e:	0027      	movs	r7, r4
   22b40:	3e20      	subs	r6, #32
   22b42:	40f7      	lsrs	r7, r6
   22b44:	2b20      	cmp	r3, #32
   22b46:	d00c      	beq.n	22b62 <__aeabi_dsub+0x61e>
   22b48:	2640      	movs	r6, #64	; 0x40
   22b4a:	1af3      	subs	r3, r6, r3
   22b4c:	409c      	lsls	r4, r3
   22b4e:	4650      	mov	r0, sl
   22b50:	4320      	orrs	r0, r4
   22b52:	1e44      	subs	r4, r0, #1
   22b54:	41a0      	sbcs	r0, r4
   22b56:	4307      	orrs	r7, r0
   22b58:	2400      	movs	r4, #0
   22b5a:	18bf      	adds	r7, r7, r2
   22b5c:	e748      	b.n	229f0 <__aeabi_dsub+0x4ac>
   22b5e:	2400      	movs	r4, #0
   22b60:	e7d0      	b.n	22b04 <__aeabi_dsub+0x5c0>
   22b62:	2400      	movs	r4, #0
   22b64:	e7f3      	b.n	22b4e <__aeabi_dsub+0x60a>
   22b66:	46c0      	nop			; (mov r8, r8)
   22b68:	000007ff 	.word	0x000007ff
   22b6c:	ff7fffff 	.word	0xff7fffff

00022b70 <__aeabi_d2iz>:
   22b70:	b530      	push	{r4, r5, lr}
   22b72:	4d13      	ldr	r5, [pc, #76]	; (22bc0 <__aeabi_d2iz+0x50>)
   22b74:	030a      	lsls	r2, r1, #12
   22b76:	004b      	lsls	r3, r1, #1
   22b78:	0b12      	lsrs	r2, r2, #12
   22b7a:	0d5b      	lsrs	r3, r3, #21
   22b7c:	0fc9      	lsrs	r1, r1, #31
   22b7e:	2400      	movs	r4, #0
   22b80:	42ab      	cmp	r3, r5
   22b82:	dd10      	ble.n	22ba6 <__aeabi_d2iz+0x36>
   22b84:	4c0f      	ldr	r4, [pc, #60]	; (22bc4 <__aeabi_d2iz+0x54>)
   22b86:	42a3      	cmp	r3, r4
   22b88:	dc0f      	bgt.n	22baa <__aeabi_d2iz+0x3a>
   22b8a:	2480      	movs	r4, #128	; 0x80
   22b8c:	4d0e      	ldr	r5, [pc, #56]	; (22bc8 <__aeabi_d2iz+0x58>)
   22b8e:	0364      	lsls	r4, r4, #13
   22b90:	4322      	orrs	r2, r4
   22b92:	1aed      	subs	r5, r5, r3
   22b94:	2d1f      	cmp	r5, #31
   22b96:	dd0b      	ble.n	22bb0 <__aeabi_d2iz+0x40>
   22b98:	480c      	ldr	r0, [pc, #48]	; (22bcc <__aeabi_d2iz+0x5c>)
   22b9a:	1ac3      	subs	r3, r0, r3
   22b9c:	40da      	lsrs	r2, r3
   22b9e:	4254      	negs	r4, r2
   22ba0:	2900      	cmp	r1, #0
   22ba2:	d100      	bne.n	22ba6 <__aeabi_d2iz+0x36>
   22ba4:	0014      	movs	r4, r2
   22ba6:	0020      	movs	r0, r4
   22ba8:	bd30      	pop	{r4, r5, pc}
   22baa:	4b09      	ldr	r3, [pc, #36]	; (22bd0 <__aeabi_d2iz+0x60>)
   22bac:	18cc      	adds	r4, r1, r3
   22bae:	e7fa      	b.n	22ba6 <__aeabi_d2iz+0x36>
   22bb0:	4c08      	ldr	r4, [pc, #32]	; (22bd4 <__aeabi_d2iz+0x64>)
   22bb2:	40e8      	lsrs	r0, r5
   22bb4:	46a4      	mov	ip, r4
   22bb6:	4463      	add	r3, ip
   22bb8:	409a      	lsls	r2, r3
   22bba:	4302      	orrs	r2, r0
   22bbc:	e7ef      	b.n	22b9e <__aeabi_d2iz+0x2e>
   22bbe:	46c0      	nop			; (mov r8, r8)
   22bc0:	000003fe 	.word	0x000003fe
   22bc4:	0000041d 	.word	0x0000041d
   22bc8:	00000433 	.word	0x00000433
   22bcc:	00000413 	.word	0x00000413
   22bd0:	7fffffff 	.word	0x7fffffff
   22bd4:	fffffbed 	.word	0xfffffbed

00022bd8 <__aeabi_i2d>:
   22bd8:	b570      	push	{r4, r5, r6, lr}
   22bda:	2800      	cmp	r0, #0
   22bdc:	d030      	beq.n	22c40 <__aeabi_i2d+0x68>
   22bde:	17c3      	asrs	r3, r0, #31
   22be0:	18c4      	adds	r4, r0, r3
   22be2:	405c      	eors	r4, r3
   22be4:	0fc5      	lsrs	r5, r0, #31
   22be6:	0020      	movs	r0, r4
   22be8:	f000 f870 	bl	22ccc <__clzsi2>
   22bec:	4b17      	ldr	r3, [pc, #92]	; (22c4c <__aeabi_i2d+0x74>)
   22bee:	4a18      	ldr	r2, [pc, #96]	; (22c50 <__aeabi_i2d+0x78>)
   22bf0:	1a1b      	subs	r3, r3, r0
   22bf2:	1ad2      	subs	r2, r2, r3
   22bf4:	2a1f      	cmp	r2, #31
   22bf6:	dd18      	ble.n	22c2a <__aeabi_i2d+0x52>
   22bf8:	4a16      	ldr	r2, [pc, #88]	; (22c54 <__aeabi_i2d+0x7c>)
   22bfa:	1ad2      	subs	r2, r2, r3
   22bfc:	4094      	lsls	r4, r2
   22bfe:	2200      	movs	r2, #0
   22c00:	0324      	lsls	r4, r4, #12
   22c02:	055b      	lsls	r3, r3, #21
   22c04:	0b24      	lsrs	r4, r4, #12
   22c06:	0d5b      	lsrs	r3, r3, #21
   22c08:	2100      	movs	r1, #0
   22c0a:	0010      	movs	r0, r2
   22c0c:	0324      	lsls	r4, r4, #12
   22c0e:	0d0a      	lsrs	r2, r1, #20
   22c10:	0b24      	lsrs	r4, r4, #12
   22c12:	0512      	lsls	r2, r2, #20
   22c14:	4322      	orrs	r2, r4
   22c16:	4c10      	ldr	r4, [pc, #64]	; (22c58 <__aeabi_i2d+0x80>)
   22c18:	051b      	lsls	r3, r3, #20
   22c1a:	4022      	ands	r2, r4
   22c1c:	4313      	orrs	r3, r2
   22c1e:	005b      	lsls	r3, r3, #1
   22c20:	07ed      	lsls	r5, r5, #31
   22c22:	085b      	lsrs	r3, r3, #1
   22c24:	432b      	orrs	r3, r5
   22c26:	0019      	movs	r1, r3
   22c28:	bd70      	pop	{r4, r5, r6, pc}
   22c2a:	0021      	movs	r1, r4
   22c2c:	4091      	lsls	r1, r2
   22c2e:	000a      	movs	r2, r1
   22c30:	210b      	movs	r1, #11
   22c32:	1a08      	subs	r0, r1, r0
   22c34:	40c4      	lsrs	r4, r0
   22c36:	055b      	lsls	r3, r3, #21
   22c38:	0324      	lsls	r4, r4, #12
   22c3a:	0b24      	lsrs	r4, r4, #12
   22c3c:	0d5b      	lsrs	r3, r3, #21
   22c3e:	e7e3      	b.n	22c08 <__aeabi_i2d+0x30>
   22c40:	2500      	movs	r5, #0
   22c42:	2300      	movs	r3, #0
   22c44:	2400      	movs	r4, #0
   22c46:	2200      	movs	r2, #0
   22c48:	e7de      	b.n	22c08 <__aeabi_i2d+0x30>
   22c4a:	46c0      	nop			; (mov r8, r8)
   22c4c:	0000041e 	.word	0x0000041e
   22c50:	00000433 	.word	0x00000433
   22c54:	00000413 	.word	0x00000413
   22c58:	800fffff 	.word	0x800fffff

00022c5c <__aeabi_ui2d>:
   22c5c:	b510      	push	{r4, lr}
   22c5e:	1e04      	subs	r4, r0, #0
   22c60:	d028      	beq.n	22cb4 <__aeabi_ui2d+0x58>
   22c62:	f000 f833 	bl	22ccc <__clzsi2>
   22c66:	4b15      	ldr	r3, [pc, #84]	; (22cbc <__aeabi_ui2d+0x60>)
   22c68:	4a15      	ldr	r2, [pc, #84]	; (22cc0 <__aeabi_ui2d+0x64>)
   22c6a:	1a1b      	subs	r3, r3, r0
   22c6c:	1ad2      	subs	r2, r2, r3
   22c6e:	2a1f      	cmp	r2, #31
   22c70:	dd15      	ble.n	22c9e <__aeabi_ui2d+0x42>
   22c72:	4a14      	ldr	r2, [pc, #80]	; (22cc4 <__aeabi_ui2d+0x68>)
   22c74:	1ad2      	subs	r2, r2, r3
   22c76:	4094      	lsls	r4, r2
   22c78:	2200      	movs	r2, #0
   22c7a:	0324      	lsls	r4, r4, #12
   22c7c:	055b      	lsls	r3, r3, #21
   22c7e:	0b24      	lsrs	r4, r4, #12
   22c80:	0d5b      	lsrs	r3, r3, #21
   22c82:	2100      	movs	r1, #0
   22c84:	0010      	movs	r0, r2
   22c86:	0324      	lsls	r4, r4, #12
   22c88:	0d0a      	lsrs	r2, r1, #20
   22c8a:	0b24      	lsrs	r4, r4, #12
   22c8c:	0512      	lsls	r2, r2, #20
   22c8e:	4322      	orrs	r2, r4
   22c90:	4c0d      	ldr	r4, [pc, #52]	; (22cc8 <__aeabi_ui2d+0x6c>)
   22c92:	051b      	lsls	r3, r3, #20
   22c94:	4022      	ands	r2, r4
   22c96:	4313      	orrs	r3, r2
   22c98:	005b      	lsls	r3, r3, #1
   22c9a:	0859      	lsrs	r1, r3, #1
   22c9c:	bd10      	pop	{r4, pc}
   22c9e:	0021      	movs	r1, r4
   22ca0:	4091      	lsls	r1, r2
   22ca2:	000a      	movs	r2, r1
   22ca4:	210b      	movs	r1, #11
   22ca6:	1a08      	subs	r0, r1, r0
   22ca8:	40c4      	lsrs	r4, r0
   22caa:	055b      	lsls	r3, r3, #21
   22cac:	0324      	lsls	r4, r4, #12
   22cae:	0b24      	lsrs	r4, r4, #12
   22cb0:	0d5b      	lsrs	r3, r3, #21
   22cb2:	e7e6      	b.n	22c82 <__aeabi_ui2d+0x26>
   22cb4:	2300      	movs	r3, #0
   22cb6:	2400      	movs	r4, #0
   22cb8:	2200      	movs	r2, #0
   22cba:	e7e2      	b.n	22c82 <__aeabi_ui2d+0x26>
   22cbc:	0000041e 	.word	0x0000041e
   22cc0:	00000433 	.word	0x00000433
   22cc4:	00000413 	.word	0x00000413
   22cc8:	800fffff 	.word	0x800fffff

00022ccc <__clzsi2>:
   22ccc:	211c      	movs	r1, #28
   22cce:	2301      	movs	r3, #1
   22cd0:	041b      	lsls	r3, r3, #16
   22cd2:	4298      	cmp	r0, r3
   22cd4:	d301      	bcc.n	22cda <__clzsi2+0xe>
   22cd6:	0c00      	lsrs	r0, r0, #16
   22cd8:	3910      	subs	r1, #16
   22cda:	0a1b      	lsrs	r3, r3, #8
   22cdc:	4298      	cmp	r0, r3
   22cde:	d301      	bcc.n	22ce4 <__clzsi2+0x18>
   22ce0:	0a00      	lsrs	r0, r0, #8
   22ce2:	3908      	subs	r1, #8
   22ce4:	091b      	lsrs	r3, r3, #4
   22ce6:	4298      	cmp	r0, r3
   22ce8:	d301      	bcc.n	22cee <__clzsi2+0x22>
   22cea:	0900      	lsrs	r0, r0, #4
   22cec:	3904      	subs	r1, #4
   22cee:	a202      	add	r2, pc, #8	; (adr r2, 22cf8 <__clzsi2+0x2c>)
   22cf0:	5c10      	ldrb	r0, [r2, r0]
   22cf2:	1840      	adds	r0, r0, r1
   22cf4:	4770      	bx	lr
   22cf6:	46c0      	nop			; (mov r8, r8)
   22cf8:	02020304 	.word	0x02020304
   22cfc:	01010101 	.word	0x01010101
	...

00022d08 <atoi>:
   22d08:	b510      	push	{r4, lr}
   22d0a:	220a      	movs	r2, #10
   22d0c:	2100      	movs	r1, #0
   22d0e:	f000 faff 	bl	23310 <strtol>
   22d12:	bd10      	pop	{r4, pc}

00022d14 <__libc_init_array>:
   22d14:	b570      	push	{r4, r5, r6, lr}
   22d16:	2600      	movs	r6, #0
   22d18:	4d0c      	ldr	r5, [pc, #48]	; (22d4c <__libc_init_array+0x38>)
   22d1a:	4c0d      	ldr	r4, [pc, #52]	; (22d50 <__libc_init_array+0x3c>)
   22d1c:	1b64      	subs	r4, r4, r5
   22d1e:	10a4      	asrs	r4, r4, #2
   22d20:	42a6      	cmp	r6, r4
   22d22:	d109      	bne.n	22d38 <__libc_init_array+0x24>
   22d24:	2600      	movs	r6, #0
   22d26:	f006 f999 	bl	2905c <_init>
   22d2a:	4d0a      	ldr	r5, [pc, #40]	; (22d54 <__libc_init_array+0x40>)
   22d2c:	4c0a      	ldr	r4, [pc, #40]	; (22d58 <__libc_init_array+0x44>)
   22d2e:	1b64      	subs	r4, r4, r5
   22d30:	10a4      	asrs	r4, r4, #2
   22d32:	42a6      	cmp	r6, r4
   22d34:	d105      	bne.n	22d42 <__libc_init_array+0x2e>
   22d36:	bd70      	pop	{r4, r5, r6, pc}
   22d38:	00b3      	lsls	r3, r6, #2
   22d3a:	58eb      	ldr	r3, [r5, r3]
   22d3c:	4798      	blx	r3
   22d3e:	3601      	adds	r6, #1
   22d40:	e7ee      	b.n	22d20 <__libc_init_array+0xc>
   22d42:	00b3      	lsls	r3, r6, #2
   22d44:	58eb      	ldr	r3, [r5, r3]
   22d46:	4798      	blx	r3
   22d48:	3601      	adds	r6, #1
   22d4a:	e7f2      	b.n	22d32 <__libc_init_array+0x1e>
   22d4c:	00029068 	.word	0x00029068
   22d50:	00029068 	.word	0x00029068
   22d54:	00029068 	.word	0x00029068
   22d58:	0002906c 	.word	0x0002906c

00022d5c <malloc>:
   22d5c:	b510      	push	{r4, lr}
   22d5e:	4b03      	ldr	r3, [pc, #12]	; (22d6c <malloc+0x10>)
   22d60:	0001      	movs	r1, r0
   22d62:	6818      	ldr	r0, [r3, #0]
   22d64:	f000 f87c 	bl	22e60 <_malloc_r>
   22d68:	bd10      	pop	{r4, pc}
   22d6a:	46c0      	nop			; (mov r8, r8)
   22d6c:	20000130 	.word	0x20000130

00022d70 <free>:
   22d70:	b510      	push	{r4, lr}
   22d72:	4b03      	ldr	r3, [pc, #12]	; (22d80 <free+0x10>)
   22d74:	0001      	movs	r1, r0
   22d76:	6818      	ldr	r0, [r3, #0]
   22d78:	f000 f828 	bl	22dcc <_free_r>
   22d7c:	bd10      	pop	{r4, pc}
   22d7e:	46c0      	nop			; (mov r8, r8)
   22d80:	20000130 	.word	0x20000130

00022d84 <memcpy>:
   22d84:	2300      	movs	r3, #0
   22d86:	b510      	push	{r4, lr}
   22d88:	429a      	cmp	r2, r3
   22d8a:	d100      	bne.n	22d8e <memcpy+0xa>
   22d8c:	bd10      	pop	{r4, pc}
   22d8e:	5ccc      	ldrb	r4, [r1, r3]
   22d90:	54c4      	strb	r4, [r0, r3]
   22d92:	3301      	adds	r3, #1
   22d94:	e7f8      	b.n	22d88 <memcpy+0x4>

00022d96 <memmove>:
   22d96:	b510      	push	{r4, lr}
   22d98:	4288      	cmp	r0, r1
   22d9a:	d902      	bls.n	22da2 <memmove+0xc>
   22d9c:	188b      	adds	r3, r1, r2
   22d9e:	4298      	cmp	r0, r3
   22da0:	d308      	bcc.n	22db4 <memmove+0x1e>
   22da2:	2300      	movs	r3, #0
   22da4:	429a      	cmp	r2, r3
   22da6:	d007      	beq.n	22db8 <memmove+0x22>
   22da8:	5ccc      	ldrb	r4, [r1, r3]
   22daa:	54c4      	strb	r4, [r0, r3]
   22dac:	3301      	adds	r3, #1
   22dae:	e7f9      	b.n	22da4 <memmove+0xe>
   22db0:	5c8b      	ldrb	r3, [r1, r2]
   22db2:	5483      	strb	r3, [r0, r2]
   22db4:	3a01      	subs	r2, #1
   22db6:	d2fb      	bcs.n	22db0 <memmove+0x1a>
   22db8:	bd10      	pop	{r4, pc}

00022dba <memset>:
   22dba:	0003      	movs	r3, r0
   22dbc:	1882      	adds	r2, r0, r2
   22dbe:	4293      	cmp	r3, r2
   22dc0:	d100      	bne.n	22dc4 <memset+0xa>
   22dc2:	4770      	bx	lr
   22dc4:	7019      	strb	r1, [r3, #0]
   22dc6:	3301      	adds	r3, #1
   22dc8:	e7f9      	b.n	22dbe <memset+0x4>
	...

00022dcc <_free_r>:
   22dcc:	b570      	push	{r4, r5, r6, lr}
   22dce:	0005      	movs	r5, r0
   22dd0:	2900      	cmp	r1, #0
   22dd2:	d010      	beq.n	22df6 <_free_r+0x2a>
   22dd4:	1f0c      	subs	r4, r1, #4
   22dd6:	6823      	ldr	r3, [r4, #0]
   22dd8:	2b00      	cmp	r3, #0
   22dda:	da00      	bge.n	22dde <_free_r+0x12>
   22ddc:	18e4      	adds	r4, r4, r3
   22dde:	0028      	movs	r0, r5
   22de0:	f000 fdca 	bl	23978 <__malloc_lock>
   22de4:	4a1d      	ldr	r2, [pc, #116]	; (22e5c <_free_r+0x90>)
   22de6:	6813      	ldr	r3, [r2, #0]
   22de8:	2b00      	cmp	r3, #0
   22dea:	d105      	bne.n	22df8 <_free_r+0x2c>
   22dec:	6063      	str	r3, [r4, #4]
   22dee:	6014      	str	r4, [r2, #0]
   22df0:	0028      	movs	r0, r5
   22df2:	f000 fdc2 	bl	2397a <__malloc_unlock>
   22df6:	bd70      	pop	{r4, r5, r6, pc}
   22df8:	42a3      	cmp	r3, r4
   22dfa:	d909      	bls.n	22e10 <_free_r+0x44>
   22dfc:	6821      	ldr	r1, [r4, #0]
   22dfe:	1860      	adds	r0, r4, r1
   22e00:	4283      	cmp	r3, r0
   22e02:	d1f3      	bne.n	22dec <_free_r+0x20>
   22e04:	6818      	ldr	r0, [r3, #0]
   22e06:	685b      	ldr	r3, [r3, #4]
   22e08:	1841      	adds	r1, r0, r1
   22e0a:	6021      	str	r1, [r4, #0]
   22e0c:	e7ee      	b.n	22dec <_free_r+0x20>
   22e0e:	0013      	movs	r3, r2
   22e10:	685a      	ldr	r2, [r3, #4]
   22e12:	2a00      	cmp	r2, #0
   22e14:	d001      	beq.n	22e1a <_free_r+0x4e>
   22e16:	42a2      	cmp	r2, r4
   22e18:	d9f9      	bls.n	22e0e <_free_r+0x42>
   22e1a:	6819      	ldr	r1, [r3, #0]
   22e1c:	1858      	adds	r0, r3, r1
   22e1e:	42a0      	cmp	r0, r4
   22e20:	d10b      	bne.n	22e3a <_free_r+0x6e>
   22e22:	6820      	ldr	r0, [r4, #0]
   22e24:	1809      	adds	r1, r1, r0
   22e26:	1858      	adds	r0, r3, r1
   22e28:	6019      	str	r1, [r3, #0]
   22e2a:	4282      	cmp	r2, r0
   22e2c:	d1e0      	bne.n	22df0 <_free_r+0x24>
   22e2e:	6810      	ldr	r0, [r2, #0]
   22e30:	6852      	ldr	r2, [r2, #4]
   22e32:	1841      	adds	r1, r0, r1
   22e34:	6019      	str	r1, [r3, #0]
   22e36:	605a      	str	r2, [r3, #4]
   22e38:	e7da      	b.n	22df0 <_free_r+0x24>
   22e3a:	42a0      	cmp	r0, r4
   22e3c:	d902      	bls.n	22e44 <_free_r+0x78>
   22e3e:	230c      	movs	r3, #12
   22e40:	602b      	str	r3, [r5, #0]
   22e42:	e7d5      	b.n	22df0 <_free_r+0x24>
   22e44:	6821      	ldr	r1, [r4, #0]
   22e46:	1860      	adds	r0, r4, r1
   22e48:	4282      	cmp	r2, r0
   22e4a:	d103      	bne.n	22e54 <_free_r+0x88>
   22e4c:	6810      	ldr	r0, [r2, #0]
   22e4e:	6852      	ldr	r2, [r2, #4]
   22e50:	1841      	adds	r1, r0, r1
   22e52:	6021      	str	r1, [r4, #0]
   22e54:	6062      	str	r2, [r4, #4]
   22e56:	605c      	str	r4, [r3, #4]
   22e58:	e7ca      	b.n	22df0 <_free_r+0x24>
   22e5a:	46c0      	nop			; (mov r8, r8)
   22e5c:	200047b4 	.word	0x200047b4

00022e60 <_malloc_r>:
   22e60:	2303      	movs	r3, #3
   22e62:	b570      	push	{r4, r5, r6, lr}
   22e64:	1ccd      	adds	r5, r1, #3
   22e66:	439d      	bics	r5, r3
   22e68:	3508      	adds	r5, #8
   22e6a:	0006      	movs	r6, r0
   22e6c:	2d0c      	cmp	r5, #12
   22e6e:	d21e      	bcs.n	22eae <_malloc_r+0x4e>
   22e70:	250c      	movs	r5, #12
   22e72:	42a9      	cmp	r1, r5
   22e74:	d81d      	bhi.n	22eb2 <_malloc_r+0x52>
   22e76:	0030      	movs	r0, r6
   22e78:	f000 fd7e 	bl	23978 <__malloc_lock>
   22e7c:	4a25      	ldr	r2, [pc, #148]	; (22f14 <_malloc_r+0xb4>)
   22e7e:	6814      	ldr	r4, [r2, #0]
   22e80:	0021      	movs	r1, r4
   22e82:	2900      	cmp	r1, #0
   22e84:	d119      	bne.n	22eba <_malloc_r+0x5a>
   22e86:	4c24      	ldr	r4, [pc, #144]	; (22f18 <_malloc_r+0xb8>)
   22e88:	6823      	ldr	r3, [r4, #0]
   22e8a:	2b00      	cmp	r3, #0
   22e8c:	d103      	bne.n	22e96 <_malloc_r+0x36>
   22e8e:	0030      	movs	r0, r6
   22e90:	f000 f8ae 	bl	22ff0 <_sbrk_r>
   22e94:	6020      	str	r0, [r4, #0]
   22e96:	0029      	movs	r1, r5
   22e98:	0030      	movs	r0, r6
   22e9a:	f000 f8a9 	bl	22ff0 <_sbrk_r>
   22e9e:	1c43      	adds	r3, r0, #1
   22ea0:	d12c      	bne.n	22efc <_malloc_r+0x9c>
   22ea2:	230c      	movs	r3, #12
   22ea4:	0030      	movs	r0, r6
   22ea6:	6033      	str	r3, [r6, #0]
   22ea8:	f000 fd67 	bl	2397a <__malloc_unlock>
   22eac:	e003      	b.n	22eb6 <_malloc_r+0x56>
   22eae:	2d00      	cmp	r5, #0
   22eb0:	dadf      	bge.n	22e72 <_malloc_r+0x12>
   22eb2:	230c      	movs	r3, #12
   22eb4:	6033      	str	r3, [r6, #0]
   22eb6:	2000      	movs	r0, #0
   22eb8:	bd70      	pop	{r4, r5, r6, pc}
   22eba:	680b      	ldr	r3, [r1, #0]
   22ebc:	1b5b      	subs	r3, r3, r5
   22ebe:	d41a      	bmi.n	22ef6 <_malloc_r+0x96>
   22ec0:	2b0b      	cmp	r3, #11
   22ec2:	d903      	bls.n	22ecc <_malloc_r+0x6c>
   22ec4:	600b      	str	r3, [r1, #0]
   22ec6:	18cc      	adds	r4, r1, r3
   22ec8:	6025      	str	r5, [r4, #0]
   22eca:	e003      	b.n	22ed4 <_malloc_r+0x74>
   22ecc:	428c      	cmp	r4, r1
   22ece:	d10e      	bne.n	22eee <_malloc_r+0x8e>
   22ed0:	6863      	ldr	r3, [r4, #4]
   22ed2:	6013      	str	r3, [r2, #0]
   22ed4:	0030      	movs	r0, r6
   22ed6:	f000 fd50 	bl	2397a <__malloc_unlock>
   22eda:	0020      	movs	r0, r4
   22edc:	2207      	movs	r2, #7
   22ede:	300b      	adds	r0, #11
   22ee0:	1d23      	adds	r3, r4, #4
   22ee2:	4390      	bics	r0, r2
   22ee4:	1ac3      	subs	r3, r0, r3
   22ee6:	d0e7      	beq.n	22eb8 <_malloc_r+0x58>
   22ee8:	425a      	negs	r2, r3
   22eea:	50e2      	str	r2, [r4, r3]
   22eec:	e7e4      	b.n	22eb8 <_malloc_r+0x58>
   22eee:	684b      	ldr	r3, [r1, #4]
   22ef0:	6063      	str	r3, [r4, #4]
   22ef2:	000c      	movs	r4, r1
   22ef4:	e7ee      	b.n	22ed4 <_malloc_r+0x74>
   22ef6:	000c      	movs	r4, r1
   22ef8:	6849      	ldr	r1, [r1, #4]
   22efa:	e7c2      	b.n	22e82 <_malloc_r+0x22>
   22efc:	2303      	movs	r3, #3
   22efe:	1cc4      	adds	r4, r0, #3
   22f00:	439c      	bics	r4, r3
   22f02:	42a0      	cmp	r0, r4
   22f04:	d0e0      	beq.n	22ec8 <_malloc_r+0x68>
   22f06:	1a21      	subs	r1, r4, r0
   22f08:	0030      	movs	r0, r6
   22f0a:	f000 f871 	bl	22ff0 <_sbrk_r>
   22f0e:	1c43      	adds	r3, r0, #1
   22f10:	d1da      	bne.n	22ec8 <_malloc_r+0x68>
   22f12:	e7c6      	b.n	22ea2 <_malloc_r+0x42>
   22f14:	200047b4 	.word	0x200047b4
   22f18:	200047b8 	.word	0x200047b8

00022f1c <_puts_r>:
   22f1c:	b570      	push	{r4, r5, r6, lr}
   22f1e:	0005      	movs	r5, r0
   22f20:	000e      	movs	r6, r1
   22f22:	2800      	cmp	r0, #0
   22f24:	d004      	beq.n	22f30 <_puts_r+0x14>
   22f26:	6983      	ldr	r3, [r0, #24]
   22f28:	2b00      	cmp	r3, #0
   22f2a:	d101      	bne.n	22f30 <_puts_r+0x14>
   22f2c:	f000 fc00 	bl	23730 <__sinit>
   22f30:	69ab      	ldr	r3, [r5, #24]
   22f32:	68ac      	ldr	r4, [r5, #8]
   22f34:	2b00      	cmp	r3, #0
   22f36:	d102      	bne.n	22f3e <_puts_r+0x22>
   22f38:	0028      	movs	r0, r5
   22f3a:	f000 fbf9 	bl	23730 <__sinit>
   22f3e:	4b24      	ldr	r3, [pc, #144]	; (22fd0 <_puts_r+0xb4>)
   22f40:	429c      	cmp	r4, r3
   22f42:	d10f      	bne.n	22f64 <_puts_r+0x48>
   22f44:	686c      	ldr	r4, [r5, #4]
   22f46:	89a3      	ldrh	r3, [r4, #12]
   22f48:	071b      	lsls	r3, r3, #28
   22f4a:	d502      	bpl.n	22f52 <_puts_r+0x36>
   22f4c:	6923      	ldr	r3, [r4, #16]
   22f4e:	2b00      	cmp	r3, #0
   22f50:	d120      	bne.n	22f94 <_puts_r+0x78>
   22f52:	0021      	movs	r1, r4
   22f54:	0028      	movs	r0, r5
   22f56:	f000 fa7d 	bl	23454 <__swsetup_r>
   22f5a:	2800      	cmp	r0, #0
   22f5c:	d01a      	beq.n	22f94 <_puts_r+0x78>
   22f5e:	2001      	movs	r0, #1
   22f60:	4240      	negs	r0, r0
   22f62:	bd70      	pop	{r4, r5, r6, pc}
   22f64:	4b1b      	ldr	r3, [pc, #108]	; (22fd4 <_puts_r+0xb8>)
   22f66:	429c      	cmp	r4, r3
   22f68:	d101      	bne.n	22f6e <_puts_r+0x52>
   22f6a:	68ac      	ldr	r4, [r5, #8]
   22f6c:	e7eb      	b.n	22f46 <_puts_r+0x2a>
   22f6e:	4b1a      	ldr	r3, [pc, #104]	; (22fd8 <_puts_r+0xbc>)
   22f70:	429c      	cmp	r4, r3
   22f72:	d1e8      	bne.n	22f46 <_puts_r+0x2a>
   22f74:	68ec      	ldr	r4, [r5, #12]
   22f76:	e7e6      	b.n	22f46 <_puts_r+0x2a>
   22f78:	3b01      	subs	r3, #1
   22f7a:	3601      	adds	r6, #1
   22f7c:	60a3      	str	r3, [r4, #8]
   22f7e:	2b00      	cmp	r3, #0
   22f80:	da04      	bge.n	22f8c <_puts_r+0x70>
   22f82:	69a2      	ldr	r2, [r4, #24]
   22f84:	4293      	cmp	r3, r2
   22f86:	db16      	blt.n	22fb6 <_puts_r+0x9a>
   22f88:	290a      	cmp	r1, #10
   22f8a:	d014      	beq.n	22fb6 <_puts_r+0x9a>
   22f8c:	6823      	ldr	r3, [r4, #0]
   22f8e:	1c5a      	adds	r2, r3, #1
   22f90:	6022      	str	r2, [r4, #0]
   22f92:	7019      	strb	r1, [r3, #0]
   22f94:	7831      	ldrb	r1, [r6, #0]
   22f96:	68a3      	ldr	r3, [r4, #8]
   22f98:	2900      	cmp	r1, #0
   22f9a:	d1ed      	bne.n	22f78 <_puts_r+0x5c>
   22f9c:	3b01      	subs	r3, #1
   22f9e:	60a3      	str	r3, [r4, #8]
   22fa0:	2b00      	cmp	r3, #0
   22fa2:	da0f      	bge.n	22fc4 <_puts_r+0xa8>
   22fa4:	0022      	movs	r2, r4
   22fa6:	310a      	adds	r1, #10
   22fa8:	0028      	movs	r0, r5
   22faa:	f000 f9fd 	bl	233a8 <__swbuf_r>
   22fae:	1c43      	adds	r3, r0, #1
   22fb0:	d0d5      	beq.n	22f5e <_puts_r+0x42>
   22fb2:	200a      	movs	r0, #10
   22fb4:	e7d5      	b.n	22f62 <_puts_r+0x46>
   22fb6:	0022      	movs	r2, r4
   22fb8:	0028      	movs	r0, r5
   22fba:	f000 f9f5 	bl	233a8 <__swbuf_r>
   22fbe:	1c43      	adds	r3, r0, #1
   22fc0:	d1e8      	bne.n	22f94 <_puts_r+0x78>
   22fc2:	e7cc      	b.n	22f5e <_puts_r+0x42>
   22fc4:	200a      	movs	r0, #10
   22fc6:	6823      	ldr	r3, [r4, #0]
   22fc8:	1c5a      	adds	r2, r3, #1
   22fca:	6022      	str	r2, [r4, #0]
   22fcc:	7018      	strb	r0, [r3, #0]
   22fce:	e7c8      	b.n	22f62 <_puts_r+0x46>
   22fd0:	00028edc 	.word	0x00028edc
   22fd4:	00028efc 	.word	0x00028efc
   22fd8:	00028ebc 	.word	0x00028ebc

00022fdc <puts>:
   22fdc:	b510      	push	{r4, lr}
   22fde:	4b03      	ldr	r3, [pc, #12]	; (22fec <puts+0x10>)
   22fe0:	0001      	movs	r1, r0
   22fe2:	6818      	ldr	r0, [r3, #0]
   22fe4:	f7ff ff9a 	bl	22f1c <_puts_r>
   22fe8:	bd10      	pop	{r4, pc}
   22fea:	46c0      	nop			; (mov r8, r8)
   22fec:	20000130 	.word	0x20000130

00022ff0 <_sbrk_r>:
   22ff0:	2300      	movs	r3, #0
   22ff2:	b570      	push	{r4, r5, r6, lr}
   22ff4:	4c06      	ldr	r4, [pc, #24]	; (23010 <_sbrk_r+0x20>)
   22ff6:	0005      	movs	r5, r0
   22ff8:	0008      	movs	r0, r1
   22ffa:	6023      	str	r3, [r4, #0]
   22ffc:	f7f5 fe4c 	bl	18c98 <_sbrk>
   23000:	1c43      	adds	r3, r0, #1
   23002:	d103      	bne.n	2300c <_sbrk_r+0x1c>
   23004:	6823      	ldr	r3, [r4, #0]
   23006:	2b00      	cmp	r3, #0
   23008:	d000      	beq.n	2300c <_sbrk_r+0x1c>
   2300a:	602b      	str	r3, [r5, #0]
   2300c:	bd70      	pop	{r4, r5, r6, pc}
   2300e:	46c0      	nop			; (mov r8, r8)
   23010:	20005d30 	.word	0x20005d30

00023014 <sniprintf>:
   23014:	b40c      	push	{r2, r3}
   23016:	b530      	push	{r4, r5, lr}
   23018:	4b16      	ldr	r3, [pc, #88]	; (23074 <sniprintf+0x60>)
   2301a:	b09d      	sub	sp, #116	; 0x74
   2301c:	1e0c      	subs	r4, r1, #0
   2301e:	681d      	ldr	r5, [r3, #0]
   23020:	da08      	bge.n	23034 <sniprintf+0x20>
   23022:	238b      	movs	r3, #139	; 0x8b
   23024:	2001      	movs	r0, #1
   23026:	602b      	str	r3, [r5, #0]
   23028:	4240      	negs	r0, r0
   2302a:	b01d      	add	sp, #116	; 0x74
   2302c:	bc30      	pop	{r4, r5}
   2302e:	bc08      	pop	{r3}
   23030:	b002      	add	sp, #8
   23032:	4718      	bx	r3
   23034:	2382      	movs	r3, #130	; 0x82
   23036:	a902      	add	r1, sp, #8
   23038:	009b      	lsls	r3, r3, #2
   2303a:	818b      	strh	r3, [r1, #12]
   2303c:	2300      	movs	r3, #0
   2303e:	9002      	str	r0, [sp, #8]
   23040:	6108      	str	r0, [r1, #16]
   23042:	429c      	cmp	r4, r3
   23044:	d000      	beq.n	23048 <sniprintf+0x34>
   23046:	1e63      	subs	r3, r4, #1
   23048:	608b      	str	r3, [r1, #8]
   2304a:	614b      	str	r3, [r1, #20]
   2304c:	2301      	movs	r3, #1
   2304e:	425b      	negs	r3, r3
   23050:	81cb      	strh	r3, [r1, #14]
   23052:	9a20      	ldr	r2, [sp, #128]	; 0x80
   23054:	ab21      	add	r3, sp, #132	; 0x84
   23056:	0028      	movs	r0, r5
   23058:	9301      	str	r3, [sp, #4]
   2305a:	f000 fcf1 	bl	23a40 <_svfiprintf_r>
   2305e:	1c43      	adds	r3, r0, #1
   23060:	da01      	bge.n	23066 <sniprintf+0x52>
   23062:	238b      	movs	r3, #139	; 0x8b
   23064:	602b      	str	r3, [r5, #0]
   23066:	2c00      	cmp	r4, #0
   23068:	d0df      	beq.n	2302a <sniprintf+0x16>
   2306a:	2300      	movs	r3, #0
   2306c:	9a02      	ldr	r2, [sp, #8]
   2306e:	7013      	strb	r3, [r2, #0]
   23070:	e7db      	b.n	2302a <sniprintf+0x16>
   23072:	46c0      	nop			; (mov r8, r8)
   23074:	20000130 	.word	0x20000130

00023078 <siprintf>:
   23078:	b40e      	push	{r1, r2, r3}
   2307a:	b510      	push	{r4, lr}
   2307c:	b09d      	sub	sp, #116	; 0x74
   2307e:	a902      	add	r1, sp, #8
   23080:	9002      	str	r0, [sp, #8]
   23082:	6108      	str	r0, [r1, #16]
   23084:	480b      	ldr	r0, [pc, #44]	; (230b4 <siprintf+0x3c>)
   23086:	2482      	movs	r4, #130	; 0x82
   23088:	6088      	str	r0, [r1, #8]
   2308a:	6148      	str	r0, [r1, #20]
   2308c:	2001      	movs	r0, #1
   2308e:	4240      	negs	r0, r0
   23090:	ab1f      	add	r3, sp, #124	; 0x7c
   23092:	81c8      	strh	r0, [r1, #14]
   23094:	4808      	ldr	r0, [pc, #32]	; (230b8 <siprintf+0x40>)
   23096:	cb04      	ldmia	r3!, {r2}
   23098:	00a4      	lsls	r4, r4, #2
   2309a:	6800      	ldr	r0, [r0, #0]
   2309c:	9301      	str	r3, [sp, #4]
   2309e:	818c      	strh	r4, [r1, #12]
   230a0:	f000 fcce 	bl	23a40 <_svfiprintf_r>
   230a4:	2300      	movs	r3, #0
   230a6:	9a02      	ldr	r2, [sp, #8]
   230a8:	7013      	strb	r3, [r2, #0]
   230aa:	b01d      	add	sp, #116	; 0x74
   230ac:	bc10      	pop	{r4}
   230ae:	bc08      	pop	{r3}
   230b0:	b003      	add	sp, #12
   230b2:	4718      	bx	r3
   230b4:	7fffffff 	.word	0x7fffffff
   230b8:	20000130 	.word	0x20000130

000230bc <strcasecmp>:
   230bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   230be:	0007      	movs	r7, r0
   230c0:	000e      	movs	r6, r1
   230c2:	783c      	ldrb	r4, [r7, #0]
   230c4:	f000 fbcc 	bl	23860 <__locale_ctype_ptr>
   230c8:	2203      	movs	r2, #3
   230ca:	1900      	adds	r0, r0, r4
   230cc:	7843      	ldrb	r3, [r0, #1]
   230ce:	4013      	ands	r3, r2
   230d0:	2b01      	cmp	r3, #1
   230d2:	d100      	bne.n	230d6 <strcasecmp+0x1a>
   230d4:	3420      	adds	r4, #32
   230d6:	7835      	ldrb	r5, [r6, #0]
   230d8:	f000 fbc2 	bl	23860 <__locale_ctype_ptr>
   230dc:	2203      	movs	r2, #3
   230de:	1940      	adds	r0, r0, r5
   230e0:	7843      	ldrb	r3, [r0, #1]
   230e2:	4013      	ands	r3, r2
   230e4:	2b01      	cmp	r3, #1
   230e6:	d100      	bne.n	230ea <strcasecmp+0x2e>
   230e8:	3520      	adds	r5, #32
   230ea:	1b60      	subs	r0, r4, r5
   230ec:	d103      	bne.n	230f6 <strcasecmp+0x3a>
   230ee:	3701      	adds	r7, #1
   230f0:	3601      	adds	r6, #1
   230f2:	2d00      	cmp	r5, #0
   230f4:	d1e5      	bne.n	230c2 <strcasecmp+0x6>
   230f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000230f8 <strcmp>:
   230f8:	7802      	ldrb	r2, [r0, #0]
   230fa:	780b      	ldrb	r3, [r1, #0]
   230fc:	2a00      	cmp	r2, #0
   230fe:	d003      	beq.n	23108 <strcmp+0x10>
   23100:	3001      	adds	r0, #1
   23102:	3101      	adds	r1, #1
   23104:	429a      	cmp	r2, r3
   23106:	d0f7      	beq.n	230f8 <strcmp>
   23108:	1ad0      	subs	r0, r2, r3
   2310a:	4770      	bx	lr

0002310c <strcpy>:
   2310c:	1c03      	adds	r3, r0, #0
   2310e:	780a      	ldrb	r2, [r1, #0]
   23110:	3101      	adds	r1, #1
   23112:	701a      	strb	r2, [r3, #0]
   23114:	3301      	adds	r3, #1
   23116:	2a00      	cmp	r2, #0
   23118:	d1f9      	bne.n	2310e <strcpy+0x2>
   2311a:	4770      	bx	lr

0002311c <strdup>:
   2311c:	b510      	push	{r4, lr}
   2311e:	4b03      	ldr	r3, [pc, #12]	; (2312c <strdup+0x10>)
   23120:	0001      	movs	r1, r0
   23122:	6818      	ldr	r0, [r3, #0]
   23124:	f000 f804 	bl	23130 <_strdup_r>
   23128:	bd10      	pop	{r4, pc}
   2312a:	46c0      	nop			; (mov r8, r8)
   2312c:	20000130 	.word	0x20000130

00023130 <_strdup_r>:
   23130:	b570      	push	{r4, r5, r6, lr}
   23132:	0005      	movs	r5, r0
   23134:	0008      	movs	r0, r1
   23136:	000e      	movs	r6, r1
   23138:	f000 f80d 	bl	23156 <strlen>
   2313c:	1c44      	adds	r4, r0, #1
   2313e:	0021      	movs	r1, r4
   23140:	0028      	movs	r0, r5
   23142:	f7ff fe8d 	bl	22e60 <_malloc_r>
   23146:	1e05      	subs	r5, r0, #0
   23148:	d003      	beq.n	23152 <_strdup_r+0x22>
   2314a:	0022      	movs	r2, r4
   2314c:	0031      	movs	r1, r6
   2314e:	f7ff fe19 	bl	22d84 <memcpy>
   23152:	0028      	movs	r0, r5
   23154:	bd70      	pop	{r4, r5, r6, pc}

00023156 <strlen>:
   23156:	2300      	movs	r3, #0
   23158:	5cc2      	ldrb	r2, [r0, r3]
   2315a:	3301      	adds	r3, #1
   2315c:	2a00      	cmp	r2, #0
   2315e:	d1fb      	bne.n	23158 <strlen+0x2>
   23160:	1e58      	subs	r0, r3, #1
   23162:	4770      	bx	lr

00023164 <strncmp>:
   23164:	2300      	movs	r3, #0
   23166:	b530      	push	{r4, r5, lr}
   23168:	429a      	cmp	r2, r3
   2316a:	d00a      	beq.n	23182 <strncmp+0x1e>
   2316c:	3a01      	subs	r2, #1
   2316e:	5cc4      	ldrb	r4, [r0, r3]
   23170:	5ccd      	ldrb	r5, [r1, r3]
   23172:	42ac      	cmp	r4, r5
   23174:	d104      	bne.n	23180 <strncmp+0x1c>
   23176:	429a      	cmp	r2, r3
   23178:	d002      	beq.n	23180 <strncmp+0x1c>
   2317a:	3301      	adds	r3, #1
   2317c:	2c00      	cmp	r4, #0
   2317e:	d1f6      	bne.n	2316e <strncmp+0xa>
   23180:	1b63      	subs	r3, r4, r5
   23182:	0018      	movs	r0, r3
   23184:	bd30      	pop	{r4, r5, pc}

00023186 <strncpy>:
   23186:	b570      	push	{r4, r5, r6, lr}
   23188:	0004      	movs	r4, r0
   2318a:	2a00      	cmp	r2, #0
   2318c:	d100      	bne.n	23190 <strncpy+0xa>
   2318e:	bd70      	pop	{r4, r5, r6, pc}
   23190:	780d      	ldrb	r5, [r1, #0]
   23192:	1e56      	subs	r6, r2, #1
   23194:	1c63      	adds	r3, r4, #1
   23196:	7025      	strb	r5, [r4, #0]
   23198:	3101      	adds	r1, #1
   2319a:	2d00      	cmp	r5, #0
   2319c:	d105      	bne.n	231aa <strncpy+0x24>
   2319e:	18a4      	adds	r4, r4, r2
   231a0:	429c      	cmp	r4, r3
   231a2:	d0f4      	beq.n	2318e <strncpy+0x8>
   231a4:	701d      	strb	r5, [r3, #0]
   231a6:	3301      	adds	r3, #1
   231a8:	e7fa      	b.n	231a0 <strncpy+0x1a>
   231aa:	001c      	movs	r4, r3
   231ac:	0032      	movs	r2, r6
   231ae:	e7ec      	b.n	2318a <strncpy+0x4>

000231b0 <strrchr>:
   231b0:	b570      	push	{r4, r5, r6, lr}
   231b2:	000d      	movs	r5, r1
   231b4:	2400      	movs	r4, #0
   231b6:	2900      	cmp	r1, #0
   231b8:	d105      	bne.n	231c6 <strrchr+0x16>
   231ba:	f000 ff19 	bl	23ff0 <strchr>
   231be:	0004      	movs	r4, r0
   231c0:	e006      	b.n	231d0 <strrchr+0x20>
   231c2:	001c      	movs	r4, r3
   231c4:	1c58      	adds	r0, r3, #1
   231c6:	0029      	movs	r1, r5
   231c8:	f000 ff12 	bl	23ff0 <strchr>
   231cc:	1e03      	subs	r3, r0, #0
   231ce:	d1f8      	bne.n	231c2 <strrchr+0x12>
   231d0:	0020      	movs	r0, r4
   231d2:	bd70      	pop	{r4, r5, r6, pc}

000231d4 <strstr>:
   231d4:	b510      	push	{r4, lr}
   231d6:	0002      	movs	r2, r0
   231d8:	7800      	ldrb	r0, [r0, #0]
   231da:	2800      	cmp	r0, #0
   231dc:	d104      	bne.n	231e8 <strstr+0x14>
   231de:	7809      	ldrb	r1, [r1, #0]
   231e0:	2900      	cmp	r1, #0
   231e2:	d00d      	beq.n	23200 <strstr+0x2c>
   231e4:	bd10      	pop	{r4, pc}
   231e6:	3201      	adds	r2, #1
   231e8:	7810      	ldrb	r0, [r2, #0]
   231ea:	2800      	cmp	r0, #0
   231ec:	d0fa      	beq.n	231e4 <strstr+0x10>
   231ee:	2300      	movs	r3, #0
   231f0:	5cc8      	ldrb	r0, [r1, r3]
   231f2:	2800      	cmp	r0, #0
   231f4:	d004      	beq.n	23200 <strstr+0x2c>
   231f6:	5cd4      	ldrb	r4, [r2, r3]
   231f8:	4284      	cmp	r4, r0
   231fa:	d1f4      	bne.n	231e6 <strstr+0x12>
   231fc:	3301      	adds	r3, #1
   231fe:	e7f7      	b.n	231f0 <strstr+0x1c>
   23200:	0010      	movs	r0, r2
   23202:	e7ef      	b.n	231e4 <strstr+0x10>

00023204 <_strtol_l.isra.0>:
   23204:	b5f0      	push	{r4, r5, r6, r7, lr}
   23206:	001f      	movs	r7, r3
   23208:	000e      	movs	r6, r1
   2320a:	b087      	sub	sp, #28
   2320c:	9005      	str	r0, [sp, #20]
   2320e:	9103      	str	r1, [sp, #12]
   23210:	9202      	str	r2, [sp, #8]
   23212:	980c      	ldr	r0, [sp, #48]	; 0x30
   23214:	7834      	ldrb	r4, [r6, #0]
   23216:	f000 fb20 	bl	2385a <__locale_ctype_ptr_l>
   2321a:	2208      	movs	r2, #8
   2321c:	1900      	adds	r0, r0, r4
   2321e:	7843      	ldrb	r3, [r0, #1]
   23220:	1c75      	adds	r5, r6, #1
   23222:	4013      	ands	r3, r2
   23224:	d10c      	bne.n	23240 <_strtol_l.isra.0+0x3c>
   23226:	2c2d      	cmp	r4, #45	; 0x2d
   23228:	d10c      	bne.n	23244 <_strtol_l.isra.0+0x40>
   2322a:	3301      	adds	r3, #1
   2322c:	782c      	ldrb	r4, [r5, #0]
   2322e:	9301      	str	r3, [sp, #4]
   23230:	1cb5      	adds	r5, r6, #2
   23232:	2f00      	cmp	r7, #0
   23234:	d00c      	beq.n	23250 <_strtol_l.isra.0+0x4c>
   23236:	2f10      	cmp	r7, #16
   23238:	d114      	bne.n	23264 <_strtol_l.isra.0+0x60>
   2323a:	2c30      	cmp	r4, #48	; 0x30
   2323c:	d00a      	beq.n	23254 <_strtol_l.isra.0+0x50>
   2323e:	e011      	b.n	23264 <_strtol_l.isra.0+0x60>
   23240:	002e      	movs	r6, r5
   23242:	e7e6      	b.n	23212 <_strtol_l.isra.0+0xe>
   23244:	9301      	str	r3, [sp, #4]
   23246:	2c2b      	cmp	r4, #43	; 0x2b
   23248:	d1f3      	bne.n	23232 <_strtol_l.isra.0+0x2e>
   2324a:	782c      	ldrb	r4, [r5, #0]
   2324c:	1cb5      	adds	r5, r6, #2
   2324e:	e7f0      	b.n	23232 <_strtol_l.isra.0+0x2e>
   23250:	2c30      	cmp	r4, #48	; 0x30
   23252:	d12f      	bne.n	232b4 <_strtol_l.isra.0+0xb0>
   23254:	2220      	movs	r2, #32
   23256:	782b      	ldrb	r3, [r5, #0]
   23258:	4393      	bics	r3, r2
   2325a:	2b58      	cmp	r3, #88	; 0x58
   2325c:	d151      	bne.n	23302 <_strtol_l.isra.0+0xfe>
   2325e:	2710      	movs	r7, #16
   23260:	786c      	ldrb	r4, [r5, #1]
   23262:	3502      	adds	r5, #2
   23264:	9b01      	ldr	r3, [sp, #4]
   23266:	4a29      	ldr	r2, [pc, #164]	; (2330c <_strtol_l.isra.0+0x108>)
   23268:	0039      	movs	r1, r7
   2326a:	189e      	adds	r6, r3, r2
   2326c:	0030      	movs	r0, r6
   2326e:	f7fd f985 	bl	2057c <__aeabi_uidivmod>
   23272:	0030      	movs	r0, r6
   23274:	9104      	str	r1, [sp, #16]
   23276:	0039      	movs	r1, r7
   23278:	f7fd f8fa 	bl	20470 <__udivsi3>
   2327c:	2101      	movs	r1, #1
   2327e:	2300      	movs	r3, #0
   23280:	4249      	negs	r1, r1
   23282:	0002      	movs	r2, r0
   23284:	468c      	mov	ip, r1
   23286:	0018      	movs	r0, r3
   23288:	0021      	movs	r1, r4
   2328a:	3930      	subs	r1, #48	; 0x30
   2328c:	2909      	cmp	r1, #9
   2328e:	d813      	bhi.n	232b8 <_strtol_l.isra.0+0xb4>
   23290:	000c      	movs	r4, r1
   23292:	42a7      	cmp	r7, r4
   23294:	dd1c      	ble.n	232d0 <_strtol_l.isra.0+0xcc>
   23296:	1c59      	adds	r1, r3, #1
   23298:	d009      	beq.n	232ae <_strtol_l.isra.0+0xaa>
   2329a:	4663      	mov	r3, ip
   2329c:	4282      	cmp	r2, r0
   2329e:	d306      	bcc.n	232ae <_strtol_l.isra.0+0xaa>
   232a0:	d102      	bne.n	232a8 <_strtol_l.isra.0+0xa4>
   232a2:	9904      	ldr	r1, [sp, #16]
   232a4:	42a1      	cmp	r1, r4
   232a6:	db02      	blt.n	232ae <_strtol_l.isra.0+0xaa>
   232a8:	2301      	movs	r3, #1
   232aa:	4378      	muls	r0, r7
   232ac:	1820      	adds	r0, r4, r0
   232ae:	782c      	ldrb	r4, [r5, #0]
   232b0:	3501      	adds	r5, #1
   232b2:	e7e9      	b.n	23288 <_strtol_l.isra.0+0x84>
   232b4:	270a      	movs	r7, #10
   232b6:	e7d5      	b.n	23264 <_strtol_l.isra.0+0x60>
   232b8:	0021      	movs	r1, r4
   232ba:	3941      	subs	r1, #65	; 0x41
   232bc:	2919      	cmp	r1, #25
   232be:	d801      	bhi.n	232c4 <_strtol_l.isra.0+0xc0>
   232c0:	3c37      	subs	r4, #55	; 0x37
   232c2:	e7e6      	b.n	23292 <_strtol_l.isra.0+0x8e>
   232c4:	0021      	movs	r1, r4
   232c6:	3961      	subs	r1, #97	; 0x61
   232c8:	2919      	cmp	r1, #25
   232ca:	d801      	bhi.n	232d0 <_strtol_l.isra.0+0xcc>
   232cc:	3c57      	subs	r4, #87	; 0x57
   232ce:	e7e0      	b.n	23292 <_strtol_l.isra.0+0x8e>
   232d0:	1c5a      	adds	r2, r3, #1
   232d2:	d108      	bne.n	232e6 <_strtol_l.isra.0+0xe2>
   232d4:	9a05      	ldr	r2, [sp, #20]
   232d6:	3323      	adds	r3, #35	; 0x23
   232d8:	6013      	str	r3, [r2, #0]
   232da:	9b02      	ldr	r3, [sp, #8]
   232dc:	0030      	movs	r0, r6
   232de:	2b00      	cmp	r3, #0
   232e0:	d10b      	bne.n	232fa <_strtol_l.isra.0+0xf6>
   232e2:	b007      	add	sp, #28
   232e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   232e6:	9a01      	ldr	r2, [sp, #4]
   232e8:	2a00      	cmp	r2, #0
   232ea:	d000      	beq.n	232ee <_strtol_l.isra.0+0xea>
   232ec:	4240      	negs	r0, r0
   232ee:	9a02      	ldr	r2, [sp, #8]
   232f0:	2a00      	cmp	r2, #0
   232f2:	d0f6      	beq.n	232e2 <_strtol_l.isra.0+0xde>
   232f4:	9a03      	ldr	r2, [sp, #12]
   232f6:	2b00      	cmp	r3, #0
   232f8:	d000      	beq.n	232fc <_strtol_l.isra.0+0xf8>
   232fa:	1e6a      	subs	r2, r5, #1
   232fc:	9b02      	ldr	r3, [sp, #8]
   232fe:	601a      	str	r2, [r3, #0]
   23300:	e7ef      	b.n	232e2 <_strtol_l.isra.0+0xde>
   23302:	2430      	movs	r4, #48	; 0x30
   23304:	2f00      	cmp	r7, #0
   23306:	d1ad      	bne.n	23264 <_strtol_l.isra.0+0x60>
   23308:	3708      	adds	r7, #8
   2330a:	e7ab      	b.n	23264 <_strtol_l.isra.0+0x60>
   2330c:	7fffffff 	.word	0x7fffffff

00023310 <strtol>:
   23310:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23312:	0013      	movs	r3, r2
   23314:	4a06      	ldr	r2, [pc, #24]	; (23330 <strtol+0x20>)
   23316:	0005      	movs	r5, r0
   23318:	6810      	ldr	r0, [r2, #0]
   2331a:	6a04      	ldr	r4, [r0, #32]
   2331c:	2c00      	cmp	r4, #0
   2331e:	d100      	bne.n	23322 <strtol+0x12>
   23320:	4c04      	ldr	r4, [pc, #16]	; (23334 <strtol+0x24>)
   23322:	000a      	movs	r2, r1
   23324:	9400      	str	r4, [sp, #0]
   23326:	0029      	movs	r1, r5
   23328:	f7ff ff6c 	bl	23204 <_strtol_l.isra.0>
   2332c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2332e:	46c0      	nop			; (mov r8, r8)
   23330:	20000130 	.word	0x20000130
   23334:	20000194 	.word	0x20000194

00023338 <_vsniprintf_r>:
   23338:	b530      	push	{r4, r5, lr}
   2333a:	0014      	movs	r4, r2
   2333c:	b09b      	sub	sp, #108	; 0x6c
   2333e:	0005      	movs	r5, r0
   23340:	001a      	movs	r2, r3
   23342:	2c00      	cmp	r4, #0
   23344:	da05      	bge.n	23352 <_vsniprintf_r+0x1a>
   23346:	238b      	movs	r3, #139	; 0x8b
   23348:	6003      	str	r3, [r0, #0]
   2334a:	2001      	movs	r0, #1
   2334c:	4240      	negs	r0, r0
   2334e:	b01b      	add	sp, #108	; 0x6c
   23350:	bd30      	pop	{r4, r5, pc}
   23352:	2382      	movs	r3, #130	; 0x82
   23354:	4668      	mov	r0, sp
   23356:	009b      	lsls	r3, r3, #2
   23358:	8183      	strh	r3, [r0, #12]
   2335a:	2300      	movs	r3, #0
   2335c:	9100      	str	r1, [sp, #0]
   2335e:	9104      	str	r1, [sp, #16]
   23360:	429c      	cmp	r4, r3
   23362:	d000      	beq.n	23366 <_vsniprintf_r+0x2e>
   23364:	1e63      	subs	r3, r4, #1
   23366:	9302      	str	r3, [sp, #8]
   23368:	9305      	str	r3, [sp, #20]
   2336a:	2301      	movs	r3, #1
   2336c:	4669      	mov	r1, sp
   2336e:	425b      	negs	r3, r3
   23370:	81cb      	strh	r3, [r1, #14]
   23372:	0028      	movs	r0, r5
   23374:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   23376:	f000 fb63 	bl	23a40 <_svfiprintf_r>
   2337a:	1c43      	adds	r3, r0, #1
   2337c:	da01      	bge.n	23382 <_vsniprintf_r+0x4a>
   2337e:	238b      	movs	r3, #139	; 0x8b
   23380:	602b      	str	r3, [r5, #0]
   23382:	2c00      	cmp	r4, #0
   23384:	d0e3      	beq.n	2334e <_vsniprintf_r+0x16>
   23386:	2300      	movs	r3, #0
   23388:	9a00      	ldr	r2, [sp, #0]
   2338a:	7013      	strb	r3, [r2, #0]
   2338c:	e7df      	b.n	2334e <_vsniprintf_r+0x16>
	...

00023390 <vsniprintf>:
   23390:	b507      	push	{r0, r1, r2, lr}
   23392:	9300      	str	r3, [sp, #0]
   23394:	0013      	movs	r3, r2
   23396:	000a      	movs	r2, r1
   23398:	0001      	movs	r1, r0
   2339a:	4802      	ldr	r0, [pc, #8]	; (233a4 <vsniprintf+0x14>)
   2339c:	6800      	ldr	r0, [r0, #0]
   2339e:	f7ff ffcb 	bl	23338 <_vsniprintf_r>
   233a2:	bd0e      	pop	{r1, r2, r3, pc}
   233a4:	20000130 	.word	0x20000130

000233a8 <__swbuf_r>:
   233a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233aa:	0005      	movs	r5, r0
   233ac:	000e      	movs	r6, r1
   233ae:	0014      	movs	r4, r2
   233b0:	2800      	cmp	r0, #0
   233b2:	d004      	beq.n	233be <__swbuf_r+0x16>
   233b4:	6983      	ldr	r3, [r0, #24]
   233b6:	2b00      	cmp	r3, #0
   233b8:	d101      	bne.n	233be <__swbuf_r+0x16>
   233ba:	f000 f9b9 	bl	23730 <__sinit>
   233be:	4b22      	ldr	r3, [pc, #136]	; (23448 <__swbuf_r+0xa0>)
   233c0:	429c      	cmp	r4, r3
   233c2:	d12d      	bne.n	23420 <__swbuf_r+0x78>
   233c4:	686c      	ldr	r4, [r5, #4]
   233c6:	69a3      	ldr	r3, [r4, #24]
   233c8:	60a3      	str	r3, [r4, #8]
   233ca:	89a3      	ldrh	r3, [r4, #12]
   233cc:	071b      	lsls	r3, r3, #28
   233ce:	d531      	bpl.n	23434 <__swbuf_r+0x8c>
   233d0:	6923      	ldr	r3, [r4, #16]
   233d2:	2b00      	cmp	r3, #0
   233d4:	d02e      	beq.n	23434 <__swbuf_r+0x8c>
   233d6:	6823      	ldr	r3, [r4, #0]
   233d8:	6922      	ldr	r2, [r4, #16]
   233da:	b2f7      	uxtb	r7, r6
   233dc:	1a98      	subs	r0, r3, r2
   233de:	6963      	ldr	r3, [r4, #20]
   233e0:	b2f6      	uxtb	r6, r6
   233e2:	4298      	cmp	r0, r3
   233e4:	db05      	blt.n	233f2 <__swbuf_r+0x4a>
   233e6:	0021      	movs	r1, r4
   233e8:	0028      	movs	r0, r5
   233ea:	f000 f933 	bl	23654 <_fflush_r>
   233ee:	2800      	cmp	r0, #0
   233f0:	d126      	bne.n	23440 <__swbuf_r+0x98>
   233f2:	68a3      	ldr	r3, [r4, #8]
   233f4:	3001      	adds	r0, #1
   233f6:	3b01      	subs	r3, #1
   233f8:	60a3      	str	r3, [r4, #8]
   233fa:	6823      	ldr	r3, [r4, #0]
   233fc:	1c5a      	adds	r2, r3, #1
   233fe:	6022      	str	r2, [r4, #0]
   23400:	701f      	strb	r7, [r3, #0]
   23402:	6963      	ldr	r3, [r4, #20]
   23404:	4298      	cmp	r0, r3
   23406:	d004      	beq.n	23412 <__swbuf_r+0x6a>
   23408:	89a3      	ldrh	r3, [r4, #12]
   2340a:	07db      	lsls	r3, r3, #31
   2340c:	d51a      	bpl.n	23444 <__swbuf_r+0x9c>
   2340e:	2e0a      	cmp	r6, #10
   23410:	d118      	bne.n	23444 <__swbuf_r+0x9c>
   23412:	0021      	movs	r1, r4
   23414:	0028      	movs	r0, r5
   23416:	f000 f91d 	bl	23654 <_fflush_r>
   2341a:	2800      	cmp	r0, #0
   2341c:	d012      	beq.n	23444 <__swbuf_r+0x9c>
   2341e:	e00f      	b.n	23440 <__swbuf_r+0x98>
   23420:	4b0a      	ldr	r3, [pc, #40]	; (2344c <__swbuf_r+0xa4>)
   23422:	429c      	cmp	r4, r3
   23424:	d101      	bne.n	2342a <__swbuf_r+0x82>
   23426:	68ac      	ldr	r4, [r5, #8]
   23428:	e7cd      	b.n	233c6 <__swbuf_r+0x1e>
   2342a:	4b09      	ldr	r3, [pc, #36]	; (23450 <__swbuf_r+0xa8>)
   2342c:	429c      	cmp	r4, r3
   2342e:	d1ca      	bne.n	233c6 <__swbuf_r+0x1e>
   23430:	68ec      	ldr	r4, [r5, #12]
   23432:	e7c8      	b.n	233c6 <__swbuf_r+0x1e>
   23434:	0021      	movs	r1, r4
   23436:	0028      	movs	r0, r5
   23438:	f000 f80c 	bl	23454 <__swsetup_r>
   2343c:	2800      	cmp	r0, #0
   2343e:	d0ca      	beq.n	233d6 <__swbuf_r+0x2e>
   23440:	2601      	movs	r6, #1
   23442:	4276      	negs	r6, r6
   23444:	0030      	movs	r0, r6
   23446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23448:	00028edc 	.word	0x00028edc
   2344c:	00028efc 	.word	0x00028efc
   23450:	00028ebc 	.word	0x00028ebc

00023454 <__swsetup_r>:
   23454:	4b36      	ldr	r3, [pc, #216]	; (23530 <__swsetup_r+0xdc>)
   23456:	b570      	push	{r4, r5, r6, lr}
   23458:	681d      	ldr	r5, [r3, #0]
   2345a:	0006      	movs	r6, r0
   2345c:	000c      	movs	r4, r1
   2345e:	2d00      	cmp	r5, #0
   23460:	d005      	beq.n	2346e <__swsetup_r+0x1a>
   23462:	69ab      	ldr	r3, [r5, #24]
   23464:	2b00      	cmp	r3, #0
   23466:	d102      	bne.n	2346e <__swsetup_r+0x1a>
   23468:	0028      	movs	r0, r5
   2346a:	f000 f961 	bl	23730 <__sinit>
   2346e:	4b31      	ldr	r3, [pc, #196]	; (23534 <__swsetup_r+0xe0>)
   23470:	429c      	cmp	r4, r3
   23472:	d10f      	bne.n	23494 <__swsetup_r+0x40>
   23474:	686c      	ldr	r4, [r5, #4]
   23476:	230c      	movs	r3, #12
   23478:	5ee2      	ldrsh	r2, [r4, r3]
   2347a:	b293      	uxth	r3, r2
   2347c:	0719      	lsls	r1, r3, #28
   2347e:	d42d      	bmi.n	234dc <__swsetup_r+0x88>
   23480:	06d9      	lsls	r1, r3, #27
   23482:	d411      	bmi.n	234a8 <__swsetup_r+0x54>
   23484:	2309      	movs	r3, #9
   23486:	2001      	movs	r0, #1
   23488:	6033      	str	r3, [r6, #0]
   2348a:	3337      	adds	r3, #55	; 0x37
   2348c:	4313      	orrs	r3, r2
   2348e:	81a3      	strh	r3, [r4, #12]
   23490:	4240      	negs	r0, r0
   23492:	bd70      	pop	{r4, r5, r6, pc}
   23494:	4b28      	ldr	r3, [pc, #160]	; (23538 <__swsetup_r+0xe4>)
   23496:	429c      	cmp	r4, r3
   23498:	d101      	bne.n	2349e <__swsetup_r+0x4a>
   2349a:	68ac      	ldr	r4, [r5, #8]
   2349c:	e7eb      	b.n	23476 <__swsetup_r+0x22>
   2349e:	4b27      	ldr	r3, [pc, #156]	; (2353c <__swsetup_r+0xe8>)
   234a0:	429c      	cmp	r4, r3
   234a2:	d1e8      	bne.n	23476 <__swsetup_r+0x22>
   234a4:	68ec      	ldr	r4, [r5, #12]
   234a6:	e7e6      	b.n	23476 <__swsetup_r+0x22>
   234a8:	075b      	lsls	r3, r3, #29
   234aa:	d513      	bpl.n	234d4 <__swsetup_r+0x80>
   234ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
   234ae:	2900      	cmp	r1, #0
   234b0:	d008      	beq.n	234c4 <__swsetup_r+0x70>
   234b2:	0023      	movs	r3, r4
   234b4:	3344      	adds	r3, #68	; 0x44
   234b6:	4299      	cmp	r1, r3
   234b8:	d002      	beq.n	234c0 <__swsetup_r+0x6c>
   234ba:	0030      	movs	r0, r6
   234bc:	f7ff fc86 	bl	22dcc <_free_r>
   234c0:	2300      	movs	r3, #0
   234c2:	6363      	str	r3, [r4, #52]	; 0x34
   234c4:	2224      	movs	r2, #36	; 0x24
   234c6:	89a3      	ldrh	r3, [r4, #12]
   234c8:	4393      	bics	r3, r2
   234ca:	81a3      	strh	r3, [r4, #12]
   234cc:	2300      	movs	r3, #0
   234ce:	6063      	str	r3, [r4, #4]
   234d0:	6923      	ldr	r3, [r4, #16]
   234d2:	6023      	str	r3, [r4, #0]
   234d4:	2308      	movs	r3, #8
   234d6:	89a2      	ldrh	r2, [r4, #12]
   234d8:	4313      	orrs	r3, r2
   234da:	81a3      	strh	r3, [r4, #12]
   234dc:	6923      	ldr	r3, [r4, #16]
   234de:	2b00      	cmp	r3, #0
   234e0:	d10b      	bne.n	234fa <__swsetup_r+0xa6>
   234e2:	21a0      	movs	r1, #160	; 0xa0
   234e4:	2280      	movs	r2, #128	; 0x80
   234e6:	89a3      	ldrh	r3, [r4, #12]
   234e8:	0089      	lsls	r1, r1, #2
   234ea:	0092      	lsls	r2, r2, #2
   234ec:	400b      	ands	r3, r1
   234ee:	4293      	cmp	r3, r2
   234f0:	d003      	beq.n	234fa <__swsetup_r+0xa6>
   234f2:	0021      	movs	r1, r4
   234f4:	0030      	movs	r0, r6
   234f6:	f000 f9e9 	bl	238cc <__smakebuf_r>
   234fa:	2301      	movs	r3, #1
   234fc:	89a2      	ldrh	r2, [r4, #12]
   234fe:	4013      	ands	r3, r2
   23500:	d011      	beq.n	23526 <__swsetup_r+0xd2>
   23502:	2300      	movs	r3, #0
   23504:	60a3      	str	r3, [r4, #8]
   23506:	6963      	ldr	r3, [r4, #20]
   23508:	425b      	negs	r3, r3
   2350a:	61a3      	str	r3, [r4, #24]
   2350c:	2000      	movs	r0, #0
   2350e:	6923      	ldr	r3, [r4, #16]
   23510:	4283      	cmp	r3, r0
   23512:	d1be      	bne.n	23492 <__swsetup_r+0x3e>
   23514:	230c      	movs	r3, #12
   23516:	5ee2      	ldrsh	r2, [r4, r3]
   23518:	0613      	lsls	r3, r2, #24
   2351a:	d5ba      	bpl.n	23492 <__swsetup_r+0x3e>
   2351c:	2340      	movs	r3, #64	; 0x40
   2351e:	4313      	orrs	r3, r2
   23520:	81a3      	strh	r3, [r4, #12]
   23522:	3801      	subs	r0, #1
   23524:	e7b5      	b.n	23492 <__swsetup_r+0x3e>
   23526:	0792      	lsls	r2, r2, #30
   23528:	d400      	bmi.n	2352c <__swsetup_r+0xd8>
   2352a:	6963      	ldr	r3, [r4, #20]
   2352c:	60a3      	str	r3, [r4, #8]
   2352e:	e7ed      	b.n	2350c <__swsetup_r+0xb8>
   23530:	20000130 	.word	0x20000130
   23534:	00028edc 	.word	0x00028edc
   23538:	00028efc 	.word	0x00028efc
   2353c:	00028ebc 	.word	0x00028ebc

00023540 <__sflush_r>:
   23540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23542:	898a      	ldrh	r2, [r1, #12]
   23544:	0005      	movs	r5, r0
   23546:	000c      	movs	r4, r1
   23548:	0713      	lsls	r3, r2, #28
   2354a:	d460      	bmi.n	2360e <__sflush_r+0xce>
   2354c:	684b      	ldr	r3, [r1, #4]
   2354e:	2b00      	cmp	r3, #0
   23550:	dc04      	bgt.n	2355c <__sflush_r+0x1c>
   23552:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   23554:	2b00      	cmp	r3, #0
   23556:	dc01      	bgt.n	2355c <__sflush_r+0x1c>
   23558:	2000      	movs	r0, #0
   2355a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2355c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   2355e:	2f00      	cmp	r7, #0
   23560:	d0fa      	beq.n	23558 <__sflush_r+0x18>
   23562:	2300      	movs	r3, #0
   23564:	682e      	ldr	r6, [r5, #0]
   23566:	602b      	str	r3, [r5, #0]
   23568:	2380      	movs	r3, #128	; 0x80
   2356a:	015b      	lsls	r3, r3, #5
   2356c:	401a      	ands	r2, r3
   2356e:	d034      	beq.n	235da <__sflush_r+0x9a>
   23570:	6d60      	ldr	r0, [r4, #84]	; 0x54
   23572:	89a3      	ldrh	r3, [r4, #12]
   23574:	075b      	lsls	r3, r3, #29
   23576:	d506      	bpl.n	23586 <__sflush_r+0x46>
   23578:	6863      	ldr	r3, [r4, #4]
   2357a:	1ac0      	subs	r0, r0, r3
   2357c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2357e:	2b00      	cmp	r3, #0
   23580:	d001      	beq.n	23586 <__sflush_r+0x46>
   23582:	6c23      	ldr	r3, [r4, #64]	; 0x40
   23584:	1ac0      	subs	r0, r0, r3
   23586:	0002      	movs	r2, r0
   23588:	6a21      	ldr	r1, [r4, #32]
   2358a:	2300      	movs	r3, #0
   2358c:	0028      	movs	r0, r5
   2358e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   23590:	47b8      	blx	r7
   23592:	89a1      	ldrh	r1, [r4, #12]
   23594:	1c43      	adds	r3, r0, #1
   23596:	d106      	bne.n	235a6 <__sflush_r+0x66>
   23598:	682b      	ldr	r3, [r5, #0]
   2359a:	2b1d      	cmp	r3, #29
   2359c:	d831      	bhi.n	23602 <__sflush_r+0xc2>
   2359e:	4a2c      	ldr	r2, [pc, #176]	; (23650 <__sflush_r+0x110>)
   235a0:	40da      	lsrs	r2, r3
   235a2:	07d3      	lsls	r3, r2, #31
   235a4:	d52d      	bpl.n	23602 <__sflush_r+0xc2>
   235a6:	2300      	movs	r3, #0
   235a8:	6063      	str	r3, [r4, #4]
   235aa:	6923      	ldr	r3, [r4, #16]
   235ac:	6023      	str	r3, [r4, #0]
   235ae:	04cb      	lsls	r3, r1, #19
   235b0:	d505      	bpl.n	235be <__sflush_r+0x7e>
   235b2:	1c43      	adds	r3, r0, #1
   235b4:	d102      	bne.n	235bc <__sflush_r+0x7c>
   235b6:	682b      	ldr	r3, [r5, #0]
   235b8:	2b00      	cmp	r3, #0
   235ba:	d100      	bne.n	235be <__sflush_r+0x7e>
   235bc:	6560      	str	r0, [r4, #84]	; 0x54
   235be:	6b61      	ldr	r1, [r4, #52]	; 0x34
   235c0:	602e      	str	r6, [r5, #0]
   235c2:	2900      	cmp	r1, #0
   235c4:	d0c8      	beq.n	23558 <__sflush_r+0x18>
   235c6:	0023      	movs	r3, r4
   235c8:	3344      	adds	r3, #68	; 0x44
   235ca:	4299      	cmp	r1, r3
   235cc:	d002      	beq.n	235d4 <__sflush_r+0x94>
   235ce:	0028      	movs	r0, r5
   235d0:	f7ff fbfc 	bl	22dcc <_free_r>
   235d4:	2000      	movs	r0, #0
   235d6:	6360      	str	r0, [r4, #52]	; 0x34
   235d8:	e7bf      	b.n	2355a <__sflush_r+0x1a>
   235da:	2301      	movs	r3, #1
   235dc:	6a21      	ldr	r1, [r4, #32]
   235de:	0028      	movs	r0, r5
   235e0:	47b8      	blx	r7
   235e2:	1c43      	adds	r3, r0, #1
   235e4:	d1c5      	bne.n	23572 <__sflush_r+0x32>
   235e6:	682b      	ldr	r3, [r5, #0]
   235e8:	2b00      	cmp	r3, #0
   235ea:	d0c2      	beq.n	23572 <__sflush_r+0x32>
   235ec:	2b1d      	cmp	r3, #29
   235ee:	d001      	beq.n	235f4 <__sflush_r+0xb4>
   235f0:	2b16      	cmp	r3, #22
   235f2:	d101      	bne.n	235f8 <__sflush_r+0xb8>
   235f4:	602e      	str	r6, [r5, #0]
   235f6:	e7af      	b.n	23558 <__sflush_r+0x18>
   235f8:	2340      	movs	r3, #64	; 0x40
   235fa:	89a2      	ldrh	r2, [r4, #12]
   235fc:	4313      	orrs	r3, r2
   235fe:	81a3      	strh	r3, [r4, #12]
   23600:	e7ab      	b.n	2355a <__sflush_r+0x1a>
   23602:	2340      	movs	r3, #64	; 0x40
   23604:	430b      	orrs	r3, r1
   23606:	2001      	movs	r0, #1
   23608:	81a3      	strh	r3, [r4, #12]
   2360a:	4240      	negs	r0, r0
   2360c:	e7a5      	b.n	2355a <__sflush_r+0x1a>
   2360e:	690f      	ldr	r7, [r1, #16]
   23610:	2f00      	cmp	r7, #0
   23612:	d0a1      	beq.n	23558 <__sflush_r+0x18>
   23614:	680b      	ldr	r3, [r1, #0]
   23616:	600f      	str	r7, [r1, #0]
   23618:	1bdb      	subs	r3, r3, r7
   2361a:	9301      	str	r3, [sp, #4]
   2361c:	2300      	movs	r3, #0
   2361e:	0792      	lsls	r2, r2, #30
   23620:	d100      	bne.n	23624 <__sflush_r+0xe4>
   23622:	694b      	ldr	r3, [r1, #20]
   23624:	60a3      	str	r3, [r4, #8]
   23626:	9b01      	ldr	r3, [sp, #4]
   23628:	2b00      	cmp	r3, #0
   2362a:	dc00      	bgt.n	2362e <__sflush_r+0xee>
   2362c:	e794      	b.n	23558 <__sflush_r+0x18>
   2362e:	9b01      	ldr	r3, [sp, #4]
   23630:	003a      	movs	r2, r7
   23632:	6a21      	ldr	r1, [r4, #32]
   23634:	0028      	movs	r0, r5
   23636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   23638:	47b0      	blx	r6
   2363a:	2800      	cmp	r0, #0
   2363c:	dc03      	bgt.n	23646 <__sflush_r+0x106>
   2363e:	2340      	movs	r3, #64	; 0x40
   23640:	89a2      	ldrh	r2, [r4, #12]
   23642:	4313      	orrs	r3, r2
   23644:	e7df      	b.n	23606 <__sflush_r+0xc6>
   23646:	9b01      	ldr	r3, [sp, #4]
   23648:	183f      	adds	r7, r7, r0
   2364a:	1a1b      	subs	r3, r3, r0
   2364c:	9301      	str	r3, [sp, #4]
   2364e:	e7ea      	b.n	23626 <__sflush_r+0xe6>
   23650:	20400001 	.word	0x20400001

00023654 <_fflush_r>:
   23654:	690b      	ldr	r3, [r1, #16]
   23656:	b570      	push	{r4, r5, r6, lr}
   23658:	0005      	movs	r5, r0
   2365a:	000c      	movs	r4, r1
   2365c:	2b00      	cmp	r3, #0
   2365e:	d101      	bne.n	23664 <_fflush_r+0x10>
   23660:	2000      	movs	r0, #0
   23662:	bd70      	pop	{r4, r5, r6, pc}
   23664:	2800      	cmp	r0, #0
   23666:	d004      	beq.n	23672 <_fflush_r+0x1e>
   23668:	6983      	ldr	r3, [r0, #24]
   2366a:	2b00      	cmp	r3, #0
   2366c:	d101      	bne.n	23672 <_fflush_r+0x1e>
   2366e:	f000 f85f 	bl	23730 <__sinit>
   23672:	4b0b      	ldr	r3, [pc, #44]	; (236a0 <_fflush_r+0x4c>)
   23674:	429c      	cmp	r4, r3
   23676:	d109      	bne.n	2368c <_fflush_r+0x38>
   23678:	686c      	ldr	r4, [r5, #4]
   2367a:	220c      	movs	r2, #12
   2367c:	5ea3      	ldrsh	r3, [r4, r2]
   2367e:	2b00      	cmp	r3, #0
   23680:	d0ee      	beq.n	23660 <_fflush_r+0xc>
   23682:	0021      	movs	r1, r4
   23684:	0028      	movs	r0, r5
   23686:	f7ff ff5b 	bl	23540 <__sflush_r>
   2368a:	e7ea      	b.n	23662 <_fflush_r+0xe>
   2368c:	4b05      	ldr	r3, [pc, #20]	; (236a4 <_fflush_r+0x50>)
   2368e:	429c      	cmp	r4, r3
   23690:	d101      	bne.n	23696 <_fflush_r+0x42>
   23692:	68ac      	ldr	r4, [r5, #8]
   23694:	e7f1      	b.n	2367a <_fflush_r+0x26>
   23696:	4b04      	ldr	r3, [pc, #16]	; (236a8 <_fflush_r+0x54>)
   23698:	429c      	cmp	r4, r3
   2369a:	d1ee      	bne.n	2367a <_fflush_r+0x26>
   2369c:	68ec      	ldr	r4, [r5, #12]
   2369e:	e7ec      	b.n	2367a <_fflush_r+0x26>
   236a0:	00028edc 	.word	0x00028edc
   236a4:	00028efc 	.word	0x00028efc
   236a8:	00028ebc 	.word	0x00028ebc

000236ac <_cleanup_r>:
   236ac:	b510      	push	{r4, lr}
   236ae:	4902      	ldr	r1, [pc, #8]	; (236b8 <_cleanup_r+0xc>)
   236b0:	f000 f8b2 	bl	23818 <_fwalk_reent>
   236b4:	bd10      	pop	{r4, pc}
   236b6:	46c0      	nop			; (mov r8, r8)
   236b8:	00023655 	.word	0x00023655

000236bc <std.isra.0>:
   236bc:	2300      	movs	r3, #0
   236be:	b510      	push	{r4, lr}
   236c0:	0004      	movs	r4, r0
   236c2:	6003      	str	r3, [r0, #0]
   236c4:	6043      	str	r3, [r0, #4]
   236c6:	6083      	str	r3, [r0, #8]
   236c8:	8181      	strh	r1, [r0, #12]
   236ca:	6643      	str	r3, [r0, #100]	; 0x64
   236cc:	81c2      	strh	r2, [r0, #14]
   236ce:	6103      	str	r3, [r0, #16]
   236d0:	6143      	str	r3, [r0, #20]
   236d2:	6183      	str	r3, [r0, #24]
   236d4:	0019      	movs	r1, r3
   236d6:	2208      	movs	r2, #8
   236d8:	305c      	adds	r0, #92	; 0x5c
   236da:	f7ff fb6e 	bl	22dba <memset>
   236de:	4b05      	ldr	r3, [pc, #20]	; (236f4 <std.isra.0+0x38>)
   236e0:	6224      	str	r4, [r4, #32]
   236e2:	6263      	str	r3, [r4, #36]	; 0x24
   236e4:	4b04      	ldr	r3, [pc, #16]	; (236f8 <std.isra.0+0x3c>)
   236e6:	62a3      	str	r3, [r4, #40]	; 0x28
   236e8:	4b04      	ldr	r3, [pc, #16]	; (236fc <std.isra.0+0x40>)
   236ea:	62e3      	str	r3, [r4, #44]	; 0x2c
   236ec:	4b04      	ldr	r3, [pc, #16]	; (23700 <std.isra.0+0x44>)
   236ee:	6323      	str	r3, [r4, #48]	; 0x30
   236f0:	bd10      	pop	{r4, pc}
   236f2:	46c0      	nop			; (mov r8, r8)
   236f4:	00023f59 	.word	0x00023f59
   236f8:	00023f81 	.word	0x00023f81
   236fc:	00023fb9 	.word	0x00023fb9
   23700:	00023fe5 	.word	0x00023fe5

00023704 <__sfmoreglue>:
   23704:	b570      	push	{r4, r5, r6, lr}
   23706:	2568      	movs	r5, #104	; 0x68
   23708:	1e4a      	subs	r2, r1, #1
   2370a:	4355      	muls	r5, r2
   2370c:	000e      	movs	r6, r1
   2370e:	0029      	movs	r1, r5
   23710:	3174      	adds	r1, #116	; 0x74
   23712:	f7ff fba5 	bl	22e60 <_malloc_r>
   23716:	1e04      	subs	r4, r0, #0
   23718:	d008      	beq.n	2372c <__sfmoreglue+0x28>
   2371a:	2100      	movs	r1, #0
   2371c:	002a      	movs	r2, r5
   2371e:	6001      	str	r1, [r0, #0]
   23720:	6046      	str	r6, [r0, #4]
   23722:	300c      	adds	r0, #12
   23724:	60a0      	str	r0, [r4, #8]
   23726:	3268      	adds	r2, #104	; 0x68
   23728:	f7ff fb47 	bl	22dba <memset>
   2372c:	0020      	movs	r0, r4
   2372e:	bd70      	pop	{r4, r5, r6, pc}

00023730 <__sinit>:
   23730:	6983      	ldr	r3, [r0, #24]
   23732:	b513      	push	{r0, r1, r4, lr}
   23734:	0004      	movs	r4, r0
   23736:	2b00      	cmp	r3, #0
   23738:	d128      	bne.n	2378c <__sinit+0x5c>
   2373a:	6483      	str	r3, [r0, #72]	; 0x48
   2373c:	64c3      	str	r3, [r0, #76]	; 0x4c
   2373e:	6503      	str	r3, [r0, #80]	; 0x50
   23740:	4b13      	ldr	r3, [pc, #76]	; (23790 <__sinit+0x60>)
   23742:	4a14      	ldr	r2, [pc, #80]	; (23794 <__sinit+0x64>)
   23744:	681b      	ldr	r3, [r3, #0]
   23746:	6282      	str	r2, [r0, #40]	; 0x28
   23748:	9301      	str	r3, [sp, #4]
   2374a:	4298      	cmp	r0, r3
   2374c:	d101      	bne.n	23752 <__sinit+0x22>
   2374e:	2301      	movs	r3, #1
   23750:	6183      	str	r3, [r0, #24]
   23752:	0020      	movs	r0, r4
   23754:	f000 f820 	bl	23798 <__sfp>
   23758:	6060      	str	r0, [r4, #4]
   2375a:	0020      	movs	r0, r4
   2375c:	f000 f81c 	bl	23798 <__sfp>
   23760:	60a0      	str	r0, [r4, #8]
   23762:	0020      	movs	r0, r4
   23764:	f000 f818 	bl	23798 <__sfp>
   23768:	2200      	movs	r2, #0
   2376a:	60e0      	str	r0, [r4, #12]
   2376c:	2104      	movs	r1, #4
   2376e:	6860      	ldr	r0, [r4, #4]
   23770:	f7ff ffa4 	bl	236bc <std.isra.0>
   23774:	2201      	movs	r2, #1
   23776:	2109      	movs	r1, #9
   23778:	68a0      	ldr	r0, [r4, #8]
   2377a:	f7ff ff9f 	bl	236bc <std.isra.0>
   2377e:	2202      	movs	r2, #2
   23780:	2112      	movs	r1, #18
   23782:	68e0      	ldr	r0, [r4, #12]
   23784:	f7ff ff9a 	bl	236bc <std.isra.0>
   23788:	2301      	movs	r3, #1
   2378a:	61a3      	str	r3, [r4, #24]
   2378c:	bd13      	pop	{r0, r1, r4, pc}
   2378e:	46c0      	nop			; (mov r8, r8)
   23790:	00028eb8 	.word	0x00028eb8
   23794:	000236ad 	.word	0x000236ad

00023798 <__sfp>:
   23798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2379a:	4b1e      	ldr	r3, [pc, #120]	; (23814 <__sfp+0x7c>)
   2379c:	0007      	movs	r7, r0
   2379e:	681e      	ldr	r6, [r3, #0]
   237a0:	69b3      	ldr	r3, [r6, #24]
   237a2:	2b00      	cmp	r3, #0
   237a4:	d102      	bne.n	237ac <__sfp+0x14>
   237a6:	0030      	movs	r0, r6
   237a8:	f7ff ffc2 	bl	23730 <__sinit>
   237ac:	3648      	adds	r6, #72	; 0x48
   237ae:	68b4      	ldr	r4, [r6, #8]
   237b0:	6873      	ldr	r3, [r6, #4]
   237b2:	3b01      	subs	r3, #1
   237b4:	d504      	bpl.n	237c0 <__sfp+0x28>
   237b6:	6833      	ldr	r3, [r6, #0]
   237b8:	2b00      	cmp	r3, #0
   237ba:	d007      	beq.n	237cc <__sfp+0x34>
   237bc:	6836      	ldr	r6, [r6, #0]
   237be:	e7f6      	b.n	237ae <__sfp+0x16>
   237c0:	220c      	movs	r2, #12
   237c2:	5ea5      	ldrsh	r5, [r4, r2]
   237c4:	2d00      	cmp	r5, #0
   237c6:	d00d      	beq.n	237e4 <__sfp+0x4c>
   237c8:	3468      	adds	r4, #104	; 0x68
   237ca:	e7f2      	b.n	237b2 <__sfp+0x1a>
   237cc:	2104      	movs	r1, #4
   237ce:	0038      	movs	r0, r7
   237d0:	f7ff ff98 	bl	23704 <__sfmoreglue>
   237d4:	6030      	str	r0, [r6, #0]
   237d6:	2800      	cmp	r0, #0
   237d8:	d1f0      	bne.n	237bc <__sfp+0x24>
   237da:	230c      	movs	r3, #12
   237dc:	0004      	movs	r4, r0
   237de:	603b      	str	r3, [r7, #0]
   237e0:	0020      	movs	r0, r4
   237e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   237e4:	2301      	movs	r3, #1
   237e6:	0020      	movs	r0, r4
   237e8:	425b      	negs	r3, r3
   237ea:	81e3      	strh	r3, [r4, #14]
   237ec:	3302      	adds	r3, #2
   237ee:	81a3      	strh	r3, [r4, #12]
   237f0:	6665      	str	r5, [r4, #100]	; 0x64
   237f2:	6025      	str	r5, [r4, #0]
   237f4:	60a5      	str	r5, [r4, #8]
   237f6:	6065      	str	r5, [r4, #4]
   237f8:	6125      	str	r5, [r4, #16]
   237fa:	6165      	str	r5, [r4, #20]
   237fc:	61a5      	str	r5, [r4, #24]
   237fe:	2208      	movs	r2, #8
   23800:	0029      	movs	r1, r5
   23802:	305c      	adds	r0, #92	; 0x5c
   23804:	f7ff fad9 	bl	22dba <memset>
   23808:	6365      	str	r5, [r4, #52]	; 0x34
   2380a:	63a5      	str	r5, [r4, #56]	; 0x38
   2380c:	64a5      	str	r5, [r4, #72]	; 0x48
   2380e:	64e5      	str	r5, [r4, #76]	; 0x4c
   23810:	e7e6      	b.n	237e0 <__sfp+0x48>
   23812:	46c0      	nop			; (mov r8, r8)
   23814:	00028eb8 	.word	0x00028eb8

00023818 <_fwalk_reent>:
   23818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2381a:	0004      	movs	r4, r0
   2381c:	0007      	movs	r7, r0
   2381e:	2600      	movs	r6, #0
   23820:	9101      	str	r1, [sp, #4]
   23822:	3448      	adds	r4, #72	; 0x48
   23824:	2c00      	cmp	r4, #0
   23826:	d101      	bne.n	2382c <_fwalk_reent+0x14>
   23828:	0030      	movs	r0, r6
   2382a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2382c:	6863      	ldr	r3, [r4, #4]
   2382e:	68a5      	ldr	r5, [r4, #8]
   23830:	9300      	str	r3, [sp, #0]
   23832:	9b00      	ldr	r3, [sp, #0]
   23834:	3b01      	subs	r3, #1
   23836:	9300      	str	r3, [sp, #0]
   23838:	d501      	bpl.n	2383e <_fwalk_reent+0x26>
   2383a:	6824      	ldr	r4, [r4, #0]
   2383c:	e7f2      	b.n	23824 <_fwalk_reent+0xc>
   2383e:	89ab      	ldrh	r3, [r5, #12]
   23840:	2b01      	cmp	r3, #1
   23842:	d908      	bls.n	23856 <_fwalk_reent+0x3e>
   23844:	220e      	movs	r2, #14
   23846:	5eab      	ldrsh	r3, [r5, r2]
   23848:	3301      	adds	r3, #1
   2384a:	d004      	beq.n	23856 <_fwalk_reent+0x3e>
   2384c:	0029      	movs	r1, r5
   2384e:	0038      	movs	r0, r7
   23850:	9b01      	ldr	r3, [sp, #4]
   23852:	4798      	blx	r3
   23854:	4306      	orrs	r6, r0
   23856:	3568      	adds	r5, #104	; 0x68
   23858:	e7eb      	b.n	23832 <_fwalk_reent+0x1a>

0002385a <__locale_ctype_ptr_l>:
   2385a:	30ec      	adds	r0, #236	; 0xec
   2385c:	6800      	ldr	r0, [r0, #0]
   2385e:	4770      	bx	lr

00023860 <__locale_ctype_ptr>:
   23860:	4b04      	ldr	r3, [pc, #16]	; (23874 <__locale_ctype_ptr+0x14>)
   23862:	681b      	ldr	r3, [r3, #0]
   23864:	6a1b      	ldr	r3, [r3, #32]
   23866:	2b00      	cmp	r3, #0
   23868:	d100      	bne.n	2386c <__locale_ctype_ptr+0xc>
   2386a:	4b03      	ldr	r3, [pc, #12]	; (23878 <__locale_ctype_ptr+0x18>)
   2386c:	33ec      	adds	r3, #236	; 0xec
   2386e:	6818      	ldr	r0, [r3, #0]
   23870:	4770      	bx	lr
   23872:	46c0      	nop			; (mov r8, r8)
   23874:	20000130 	.word	0x20000130
   23878:	20000194 	.word	0x20000194

0002387c <__swhatbuf_r>:
   2387c:	b570      	push	{r4, r5, r6, lr}
   2387e:	000e      	movs	r6, r1
   23880:	001d      	movs	r5, r3
   23882:	230e      	movs	r3, #14
   23884:	5ec9      	ldrsh	r1, [r1, r3]
   23886:	b090      	sub	sp, #64	; 0x40
   23888:	0014      	movs	r4, r2
   2388a:	2900      	cmp	r1, #0
   2388c:	da07      	bge.n	2389e <__swhatbuf_r+0x22>
   2388e:	2300      	movs	r3, #0
   23890:	602b      	str	r3, [r5, #0]
   23892:	89b3      	ldrh	r3, [r6, #12]
   23894:	061b      	lsls	r3, r3, #24
   23896:	d411      	bmi.n	238bc <__swhatbuf_r+0x40>
   23898:	2380      	movs	r3, #128	; 0x80
   2389a:	00db      	lsls	r3, r3, #3
   2389c:	e00f      	b.n	238be <__swhatbuf_r+0x42>
   2389e:	aa01      	add	r2, sp, #4
   238a0:	f000 fbe6 	bl	24070 <_fstat_r>
   238a4:	2800      	cmp	r0, #0
   238a6:	dbf2      	blt.n	2388e <__swhatbuf_r+0x12>
   238a8:	22f0      	movs	r2, #240	; 0xf0
   238aa:	9b02      	ldr	r3, [sp, #8]
   238ac:	0212      	lsls	r2, r2, #8
   238ae:	4013      	ands	r3, r2
   238b0:	4a05      	ldr	r2, [pc, #20]	; (238c8 <__swhatbuf_r+0x4c>)
   238b2:	189b      	adds	r3, r3, r2
   238b4:	425a      	negs	r2, r3
   238b6:	4153      	adcs	r3, r2
   238b8:	602b      	str	r3, [r5, #0]
   238ba:	e7ed      	b.n	23898 <__swhatbuf_r+0x1c>
   238bc:	2340      	movs	r3, #64	; 0x40
   238be:	2000      	movs	r0, #0
   238c0:	6023      	str	r3, [r4, #0]
   238c2:	b010      	add	sp, #64	; 0x40
   238c4:	bd70      	pop	{r4, r5, r6, pc}
   238c6:	46c0      	nop			; (mov r8, r8)
   238c8:	ffffe000 	.word	0xffffe000

000238cc <__smakebuf_r>:
   238cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   238ce:	2602      	movs	r6, #2
   238d0:	898b      	ldrh	r3, [r1, #12]
   238d2:	0005      	movs	r5, r0
   238d4:	000c      	movs	r4, r1
   238d6:	4233      	tst	r3, r6
   238d8:	d006      	beq.n	238e8 <__smakebuf_r+0x1c>
   238da:	0023      	movs	r3, r4
   238dc:	3347      	adds	r3, #71	; 0x47
   238de:	6023      	str	r3, [r4, #0]
   238e0:	6123      	str	r3, [r4, #16]
   238e2:	2301      	movs	r3, #1
   238e4:	6163      	str	r3, [r4, #20]
   238e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   238e8:	ab01      	add	r3, sp, #4
   238ea:	466a      	mov	r2, sp
   238ec:	f7ff ffc6 	bl	2387c <__swhatbuf_r>
   238f0:	9900      	ldr	r1, [sp, #0]
   238f2:	0007      	movs	r7, r0
   238f4:	0028      	movs	r0, r5
   238f6:	f7ff fab3 	bl	22e60 <_malloc_r>
   238fa:	2800      	cmp	r0, #0
   238fc:	d108      	bne.n	23910 <__smakebuf_r+0x44>
   238fe:	220c      	movs	r2, #12
   23900:	5ea3      	ldrsh	r3, [r4, r2]
   23902:	059a      	lsls	r2, r3, #22
   23904:	d4ef      	bmi.n	238e6 <__smakebuf_r+0x1a>
   23906:	2203      	movs	r2, #3
   23908:	4393      	bics	r3, r2
   2390a:	431e      	orrs	r6, r3
   2390c:	81a6      	strh	r6, [r4, #12]
   2390e:	e7e4      	b.n	238da <__smakebuf_r+0xe>
   23910:	4b0f      	ldr	r3, [pc, #60]	; (23950 <__smakebuf_r+0x84>)
   23912:	62ab      	str	r3, [r5, #40]	; 0x28
   23914:	2380      	movs	r3, #128	; 0x80
   23916:	89a2      	ldrh	r2, [r4, #12]
   23918:	6020      	str	r0, [r4, #0]
   2391a:	4313      	orrs	r3, r2
   2391c:	81a3      	strh	r3, [r4, #12]
   2391e:	9b00      	ldr	r3, [sp, #0]
   23920:	6120      	str	r0, [r4, #16]
   23922:	6163      	str	r3, [r4, #20]
   23924:	9b01      	ldr	r3, [sp, #4]
   23926:	2b00      	cmp	r3, #0
   23928:	d00d      	beq.n	23946 <__smakebuf_r+0x7a>
   2392a:	230e      	movs	r3, #14
   2392c:	5ee1      	ldrsh	r1, [r4, r3]
   2392e:	0028      	movs	r0, r5
   23930:	f000 fbb0 	bl	24094 <_isatty_r>
   23934:	2800      	cmp	r0, #0
   23936:	d006      	beq.n	23946 <__smakebuf_r+0x7a>
   23938:	2203      	movs	r2, #3
   2393a:	89a3      	ldrh	r3, [r4, #12]
   2393c:	4393      	bics	r3, r2
   2393e:	001a      	movs	r2, r3
   23940:	2301      	movs	r3, #1
   23942:	4313      	orrs	r3, r2
   23944:	81a3      	strh	r3, [r4, #12]
   23946:	89a0      	ldrh	r0, [r4, #12]
   23948:	4338      	orrs	r0, r7
   2394a:	81a0      	strh	r0, [r4, #12]
   2394c:	e7cb      	b.n	238e6 <__smakebuf_r+0x1a>
   2394e:	46c0      	nop			; (mov r8, r8)
   23950:	000236ad 	.word	0x000236ad

00023954 <__ascii_mbtowc>:
   23954:	b082      	sub	sp, #8
   23956:	2900      	cmp	r1, #0
   23958:	d100      	bne.n	2395c <__ascii_mbtowc+0x8>
   2395a:	a901      	add	r1, sp, #4
   2395c:	1e10      	subs	r0, r2, #0
   2395e:	d006      	beq.n	2396e <__ascii_mbtowc+0x1a>
   23960:	2b00      	cmp	r3, #0
   23962:	d006      	beq.n	23972 <__ascii_mbtowc+0x1e>
   23964:	7813      	ldrb	r3, [r2, #0]
   23966:	600b      	str	r3, [r1, #0]
   23968:	7810      	ldrb	r0, [r2, #0]
   2396a:	1e43      	subs	r3, r0, #1
   2396c:	4198      	sbcs	r0, r3
   2396e:	b002      	add	sp, #8
   23970:	4770      	bx	lr
   23972:	2002      	movs	r0, #2
   23974:	4240      	negs	r0, r0
   23976:	e7fa      	b.n	2396e <__ascii_mbtowc+0x1a>

00023978 <__malloc_lock>:
   23978:	4770      	bx	lr

0002397a <__malloc_unlock>:
   2397a:	4770      	bx	lr

0002397c <__ssputs_r>:
   2397c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2397e:	688e      	ldr	r6, [r1, #8]
   23980:	b085      	sub	sp, #20
   23982:	0007      	movs	r7, r0
   23984:	000c      	movs	r4, r1
   23986:	9203      	str	r2, [sp, #12]
   23988:	9301      	str	r3, [sp, #4]
   2398a:	429e      	cmp	r6, r3
   2398c:	d839      	bhi.n	23a02 <__ssputs_r+0x86>
   2398e:	2390      	movs	r3, #144	; 0x90
   23990:	898a      	ldrh	r2, [r1, #12]
   23992:	00db      	lsls	r3, r3, #3
   23994:	421a      	tst	r2, r3
   23996:	d034      	beq.n	23a02 <__ssputs_r+0x86>
   23998:	2503      	movs	r5, #3
   2399a:	6909      	ldr	r1, [r1, #16]
   2399c:	6823      	ldr	r3, [r4, #0]
   2399e:	1a5b      	subs	r3, r3, r1
   239a0:	9302      	str	r3, [sp, #8]
   239a2:	6963      	ldr	r3, [r4, #20]
   239a4:	9802      	ldr	r0, [sp, #8]
   239a6:	435d      	muls	r5, r3
   239a8:	0feb      	lsrs	r3, r5, #31
   239aa:	195d      	adds	r5, r3, r5
   239ac:	9b01      	ldr	r3, [sp, #4]
   239ae:	106d      	asrs	r5, r5, #1
   239b0:	3301      	adds	r3, #1
   239b2:	181b      	adds	r3, r3, r0
   239b4:	42ab      	cmp	r3, r5
   239b6:	d900      	bls.n	239ba <__ssputs_r+0x3e>
   239b8:	001d      	movs	r5, r3
   239ba:	0553      	lsls	r3, r2, #21
   239bc:	d532      	bpl.n	23a24 <__ssputs_r+0xa8>
   239be:	0029      	movs	r1, r5
   239c0:	0038      	movs	r0, r7
   239c2:	f7ff fa4d 	bl	22e60 <_malloc_r>
   239c6:	1e06      	subs	r6, r0, #0
   239c8:	d109      	bne.n	239de <__ssputs_r+0x62>
   239ca:	230c      	movs	r3, #12
   239cc:	603b      	str	r3, [r7, #0]
   239ce:	2340      	movs	r3, #64	; 0x40
   239d0:	2001      	movs	r0, #1
   239d2:	89a2      	ldrh	r2, [r4, #12]
   239d4:	4240      	negs	r0, r0
   239d6:	4313      	orrs	r3, r2
   239d8:	81a3      	strh	r3, [r4, #12]
   239da:	b005      	add	sp, #20
   239dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   239de:	9a02      	ldr	r2, [sp, #8]
   239e0:	6921      	ldr	r1, [r4, #16]
   239e2:	f7ff f9cf 	bl	22d84 <memcpy>
   239e6:	89a3      	ldrh	r3, [r4, #12]
   239e8:	4a14      	ldr	r2, [pc, #80]	; (23a3c <__ssputs_r+0xc0>)
   239ea:	401a      	ands	r2, r3
   239ec:	2380      	movs	r3, #128	; 0x80
   239ee:	4313      	orrs	r3, r2
   239f0:	81a3      	strh	r3, [r4, #12]
   239f2:	9b02      	ldr	r3, [sp, #8]
   239f4:	6126      	str	r6, [r4, #16]
   239f6:	18f6      	adds	r6, r6, r3
   239f8:	6026      	str	r6, [r4, #0]
   239fa:	6165      	str	r5, [r4, #20]
   239fc:	9e01      	ldr	r6, [sp, #4]
   239fe:	1aed      	subs	r5, r5, r3
   23a00:	60a5      	str	r5, [r4, #8]
   23a02:	9b01      	ldr	r3, [sp, #4]
   23a04:	42b3      	cmp	r3, r6
   23a06:	d200      	bcs.n	23a0a <__ssputs_r+0x8e>
   23a08:	001e      	movs	r6, r3
   23a0a:	0032      	movs	r2, r6
   23a0c:	9903      	ldr	r1, [sp, #12]
   23a0e:	6820      	ldr	r0, [r4, #0]
   23a10:	f7ff f9c1 	bl	22d96 <memmove>
   23a14:	68a3      	ldr	r3, [r4, #8]
   23a16:	2000      	movs	r0, #0
   23a18:	1b9b      	subs	r3, r3, r6
   23a1a:	60a3      	str	r3, [r4, #8]
   23a1c:	6823      	ldr	r3, [r4, #0]
   23a1e:	199e      	adds	r6, r3, r6
   23a20:	6026      	str	r6, [r4, #0]
   23a22:	e7da      	b.n	239da <__ssputs_r+0x5e>
   23a24:	002a      	movs	r2, r5
   23a26:	0038      	movs	r0, r7
   23a28:	f000 fb65 	bl	240f6 <_realloc_r>
   23a2c:	1e06      	subs	r6, r0, #0
   23a2e:	d1e0      	bne.n	239f2 <__ssputs_r+0x76>
   23a30:	6921      	ldr	r1, [r4, #16]
   23a32:	0038      	movs	r0, r7
   23a34:	f7ff f9ca 	bl	22dcc <_free_r>
   23a38:	e7c7      	b.n	239ca <__ssputs_r+0x4e>
   23a3a:	46c0      	nop			; (mov r8, r8)
   23a3c:	fffffb7f 	.word	0xfffffb7f

00023a40 <_svfiprintf_r>:
   23a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a42:	b09f      	sub	sp, #124	; 0x7c
   23a44:	9002      	str	r0, [sp, #8]
   23a46:	9305      	str	r3, [sp, #20]
   23a48:	898b      	ldrh	r3, [r1, #12]
   23a4a:	000f      	movs	r7, r1
   23a4c:	0016      	movs	r6, r2
   23a4e:	061b      	lsls	r3, r3, #24
   23a50:	d511      	bpl.n	23a76 <_svfiprintf_r+0x36>
   23a52:	690b      	ldr	r3, [r1, #16]
   23a54:	2b00      	cmp	r3, #0
   23a56:	d10e      	bne.n	23a76 <_svfiprintf_r+0x36>
   23a58:	2140      	movs	r1, #64	; 0x40
   23a5a:	f7ff fa01 	bl	22e60 <_malloc_r>
   23a5e:	6038      	str	r0, [r7, #0]
   23a60:	6138      	str	r0, [r7, #16]
   23a62:	2800      	cmp	r0, #0
   23a64:	d105      	bne.n	23a72 <_svfiprintf_r+0x32>
   23a66:	230c      	movs	r3, #12
   23a68:	9a02      	ldr	r2, [sp, #8]
   23a6a:	3801      	subs	r0, #1
   23a6c:	6013      	str	r3, [r2, #0]
   23a6e:	b01f      	add	sp, #124	; 0x7c
   23a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23a72:	2340      	movs	r3, #64	; 0x40
   23a74:	617b      	str	r3, [r7, #20]
   23a76:	2300      	movs	r3, #0
   23a78:	ad06      	add	r5, sp, #24
   23a7a:	616b      	str	r3, [r5, #20]
   23a7c:	3320      	adds	r3, #32
   23a7e:	766b      	strb	r3, [r5, #25]
   23a80:	3310      	adds	r3, #16
   23a82:	76ab      	strb	r3, [r5, #26]
   23a84:	0034      	movs	r4, r6
   23a86:	7823      	ldrb	r3, [r4, #0]
   23a88:	2b00      	cmp	r3, #0
   23a8a:	d147      	bne.n	23b1c <_svfiprintf_r+0xdc>
   23a8c:	1ba3      	subs	r3, r4, r6
   23a8e:	9304      	str	r3, [sp, #16]
   23a90:	d00d      	beq.n	23aae <_svfiprintf_r+0x6e>
   23a92:	1ba3      	subs	r3, r4, r6
   23a94:	0032      	movs	r2, r6
   23a96:	0039      	movs	r1, r7
   23a98:	9802      	ldr	r0, [sp, #8]
   23a9a:	f7ff ff6f 	bl	2397c <__ssputs_r>
   23a9e:	1c43      	adds	r3, r0, #1
   23aa0:	d100      	bne.n	23aa4 <_svfiprintf_r+0x64>
   23aa2:	e0b5      	b.n	23c10 <_svfiprintf_r+0x1d0>
   23aa4:	696a      	ldr	r2, [r5, #20]
   23aa6:	9b04      	ldr	r3, [sp, #16]
   23aa8:	4694      	mov	ip, r2
   23aaa:	4463      	add	r3, ip
   23aac:	616b      	str	r3, [r5, #20]
   23aae:	7823      	ldrb	r3, [r4, #0]
   23ab0:	2b00      	cmp	r3, #0
   23ab2:	d100      	bne.n	23ab6 <_svfiprintf_r+0x76>
   23ab4:	e0ac      	b.n	23c10 <_svfiprintf_r+0x1d0>
   23ab6:	2201      	movs	r2, #1
   23ab8:	2300      	movs	r3, #0
   23aba:	4252      	negs	r2, r2
   23abc:	606a      	str	r2, [r5, #4]
   23abe:	a902      	add	r1, sp, #8
   23ac0:	3254      	adds	r2, #84	; 0x54
   23ac2:	1852      	adds	r2, r2, r1
   23ac4:	3401      	adds	r4, #1
   23ac6:	602b      	str	r3, [r5, #0]
   23ac8:	60eb      	str	r3, [r5, #12]
   23aca:	60ab      	str	r3, [r5, #8]
   23acc:	7013      	strb	r3, [r2, #0]
   23ace:	65ab      	str	r3, [r5, #88]	; 0x58
   23ad0:	4e58      	ldr	r6, [pc, #352]	; (23c34 <_svfiprintf_r+0x1f4>)
   23ad2:	2205      	movs	r2, #5
   23ad4:	7821      	ldrb	r1, [r4, #0]
   23ad6:	0030      	movs	r0, r6
   23ad8:	f000 fb02 	bl	240e0 <memchr>
   23adc:	1c62      	adds	r2, r4, #1
   23ade:	2800      	cmp	r0, #0
   23ae0:	d120      	bne.n	23b24 <_svfiprintf_r+0xe4>
   23ae2:	6829      	ldr	r1, [r5, #0]
   23ae4:	06cb      	lsls	r3, r1, #27
   23ae6:	d504      	bpl.n	23af2 <_svfiprintf_r+0xb2>
   23ae8:	2353      	movs	r3, #83	; 0x53
   23aea:	ae02      	add	r6, sp, #8
   23aec:	3020      	adds	r0, #32
   23aee:	199b      	adds	r3, r3, r6
   23af0:	7018      	strb	r0, [r3, #0]
   23af2:	070b      	lsls	r3, r1, #28
   23af4:	d504      	bpl.n	23b00 <_svfiprintf_r+0xc0>
   23af6:	2353      	movs	r3, #83	; 0x53
   23af8:	202b      	movs	r0, #43	; 0x2b
   23afa:	ae02      	add	r6, sp, #8
   23afc:	199b      	adds	r3, r3, r6
   23afe:	7018      	strb	r0, [r3, #0]
   23b00:	7823      	ldrb	r3, [r4, #0]
   23b02:	2b2a      	cmp	r3, #42	; 0x2a
   23b04:	d016      	beq.n	23b34 <_svfiprintf_r+0xf4>
   23b06:	2000      	movs	r0, #0
   23b08:	210a      	movs	r1, #10
   23b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23b0c:	7822      	ldrb	r2, [r4, #0]
   23b0e:	3a30      	subs	r2, #48	; 0x30
   23b10:	2a09      	cmp	r2, #9
   23b12:	d955      	bls.n	23bc0 <_svfiprintf_r+0x180>
   23b14:	2800      	cmp	r0, #0
   23b16:	d015      	beq.n	23b44 <_svfiprintf_r+0x104>
   23b18:	9309      	str	r3, [sp, #36]	; 0x24
   23b1a:	e013      	b.n	23b44 <_svfiprintf_r+0x104>
   23b1c:	2b25      	cmp	r3, #37	; 0x25
   23b1e:	d0b5      	beq.n	23a8c <_svfiprintf_r+0x4c>
   23b20:	3401      	adds	r4, #1
   23b22:	e7b0      	b.n	23a86 <_svfiprintf_r+0x46>
   23b24:	2301      	movs	r3, #1
   23b26:	1b80      	subs	r0, r0, r6
   23b28:	4083      	lsls	r3, r0
   23b2a:	6829      	ldr	r1, [r5, #0]
   23b2c:	0014      	movs	r4, r2
   23b2e:	430b      	orrs	r3, r1
   23b30:	602b      	str	r3, [r5, #0]
   23b32:	e7cd      	b.n	23ad0 <_svfiprintf_r+0x90>
   23b34:	9b05      	ldr	r3, [sp, #20]
   23b36:	1d18      	adds	r0, r3, #4
   23b38:	681b      	ldr	r3, [r3, #0]
   23b3a:	9005      	str	r0, [sp, #20]
   23b3c:	2b00      	cmp	r3, #0
   23b3e:	db39      	blt.n	23bb4 <_svfiprintf_r+0x174>
   23b40:	9309      	str	r3, [sp, #36]	; 0x24
   23b42:	0014      	movs	r4, r2
   23b44:	7823      	ldrb	r3, [r4, #0]
   23b46:	2b2e      	cmp	r3, #46	; 0x2e
   23b48:	d10b      	bne.n	23b62 <_svfiprintf_r+0x122>
   23b4a:	7863      	ldrb	r3, [r4, #1]
   23b4c:	1c62      	adds	r2, r4, #1
   23b4e:	2b2a      	cmp	r3, #42	; 0x2a
   23b50:	d13e      	bne.n	23bd0 <_svfiprintf_r+0x190>
   23b52:	9b05      	ldr	r3, [sp, #20]
   23b54:	3402      	adds	r4, #2
   23b56:	1d1a      	adds	r2, r3, #4
   23b58:	681b      	ldr	r3, [r3, #0]
   23b5a:	9205      	str	r2, [sp, #20]
   23b5c:	2b00      	cmp	r3, #0
   23b5e:	db34      	blt.n	23bca <_svfiprintf_r+0x18a>
   23b60:	9307      	str	r3, [sp, #28]
   23b62:	4e35      	ldr	r6, [pc, #212]	; (23c38 <_svfiprintf_r+0x1f8>)
   23b64:	7821      	ldrb	r1, [r4, #0]
   23b66:	2203      	movs	r2, #3
   23b68:	0030      	movs	r0, r6
   23b6a:	f000 fab9 	bl	240e0 <memchr>
   23b6e:	2800      	cmp	r0, #0
   23b70:	d006      	beq.n	23b80 <_svfiprintf_r+0x140>
   23b72:	2340      	movs	r3, #64	; 0x40
   23b74:	1b80      	subs	r0, r0, r6
   23b76:	4083      	lsls	r3, r0
   23b78:	682a      	ldr	r2, [r5, #0]
   23b7a:	3401      	adds	r4, #1
   23b7c:	4313      	orrs	r3, r2
   23b7e:	602b      	str	r3, [r5, #0]
   23b80:	7821      	ldrb	r1, [r4, #0]
   23b82:	2206      	movs	r2, #6
   23b84:	482d      	ldr	r0, [pc, #180]	; (23c3c <_svfiprintf_r+0x1fc>)
   23b86:	1c66      	adds	r6, r4, #1
   23b88:	7629      	strb	r1, [r5, #24]
   23b8a:	f000 faa9 	bl	240e0 <memchr>
   23b8e:	2800      	cmp	r0, #0
   23b90:	d046      	beq.n	23c20 <_svfiprintf_r+0x1e0>
   23b92:	4b2b      	ldr	r3, [pc, #172]	; (23c40 <_svfiprintf_r+0x200>)
   23b94:	2b00      	cmp	r3, #0
   23b96:	d12f      	bne.n	23bf8 <_svfiprintf_r+0x1b8>
   23b98:	6829      	ldr	r1, [r5, #0]
   23b9a:	9b05      	ldr	r3, [sp, #20]
   23b9c:	2207      	movs	r2, #7
   23b9e:	05c9      	lsls	r1, r1, #23
   23ba0:	d528      	bpl.n	23bf4 <_svfiprintf_r+0x1b4>
   23ba2:	189b      	adds	r3, r3, r2
   23ba4:	4393      	bics	r3, r2
   23ba6:	3308      	adds	r3, #8
   23ba8:	9305      	str	r3, [sp, #20]
   23baa:	696b      	ldr	r3, [r5, #20]
   23bac:	9a03      	ldr	r2, [sp, #12]
   23bae:	189b      	adds	r3, r3, r2
   23bb0:	616b      	str	r3, [r5, #20]
   23bb2:	e767      	b.n	23a84 <_svfiprintf_r+0x44>
   23bb4:	425b      	negs	r3, r3
   23bb6:	60eb      	str	r3, [r5, #12]
   23bb8:	2302      	movs	r3, #2
   23bba:	430b      	orrs	r3, r1
   23bbc:	602b      	str	r3, [r5, #0]
   23bbe:	e7c0      	b.n	23b42 <_svfiprintf_r+0x102>
   23bc0:	434b      	muls	r3, r1
   23bc2:	3401      	adds	r4, #1
   23bc4:	189b      	adds	r3, r3, r2
   23bc6:	2001      	movs	r0, #1
   23bc8:	e7a0      	b.n	23b0c <_svfiprintf_r+0xcc>
   23bca:	2301      	movs	r3, #1
   23bcc:	425b      	negs	r3, r3
   23bce:	e7c7      	b.n	23b60 <_svfiprintf_r+0x120>
   23bd0:	2300      	movs	r3, #0
   23bd2:	0014      	movs	r4, r2
   23bd4:	200a      	movs	r0, #10
   23bd6:	001a      	movs	r2, r3
   23bd8:	606b      	str	r3, [r5, #4]
   23bda:	7821      	ldrb	r1, [r4, #0]
   23bdc:	3930      	subs	r1, #48	; 0x30
   23bde:	2909      	cmp	r1, #9
   23be0:	d903      	bls.n	23bea <_svfiprintf_r+0x1aa>
   23be2:	2b00      	cmp	r3, #0
   23be4:	d0bd      	beq.n	23b62 <_svfiprintf_r+0x122>
   23be6:	9207      	str	r2, [sp, #28]
   23be8:	e7bb      	b.n	23b62 <_svfiprintf_r+0x122>
   23bea:	4342      	muls	r2, r0
   23bec:	3401      	adds	r4, #1
   23bee:	1852      	adds	r2, r2, r1
   23bf0:	2301      	movs	r3, #1
   23bf2:	e7f2      	b.n	23bda <_svfiprintf_r+0x19a>
   23bf4:	3307      	adds	r3, #7
   23bf6:	e7d5      	b.n	23ba4 <_svfiprintf_r+0x164>
   23bf8:	ab05      	add	r3, sp, #20
   23bfa:	9300      	str	r3, [sp, #0]
   23bfc:	003a      	movs	r2, r7
   23bfe:	4b11      	ldr	r3, [pc, #68]	; (23c44 <_svfiprintf_r+0x204>)
   23c00:	0029      	movs	r1, r5
   23c02:	9802      	ldr	r0, [sp, #8]
   23c04:	e000      	b.n	23c08 <_svfiprintf_r+0x1c8>
   23c06:	bf00      	nop
   23c08:	9003      	str	r0, [sp, #12]
   23c0a:	9b03      	ldr	r3, [sp, #12]
   23c0c:	3301      	adds	r3, #1
   23c0e:	d1cc      	bne.n	23baa <_svfiprintf_r+0x16a>
   23c10:	89bb      	ldrh	r3, [r7, #12]
   23c12:	980b      	ldr	r0, [sp, #44]	; 0x2c
   23c14:	065b      	lsls	r3, r3, #25
   23c16:	d400      	bmi.n	23c1a <_svfiprintf_r+0x1da>
   23c18:	e729      	b.n	23a6e <_svfiprintf_r+0x2e>
   23c1a:	2001      	movs	r0, #1
   23c1c:	4240      	negs	r0, r0
   23c1e:	e726      	b.n	23a6e <_svfiprintf_r+0x2e>
   23c20:	ab05      	add	r3, sp, #20
   23c22:	9300      	str	r3, [sp, #0]
   23c24:	003a      	movs	r2, r7
   23c26:	4b07      	ldr	r3, [pc, #28]	; (23c44 <_svfiprintf_r+0x204>)
   23c28:	0029      	movs	r1, r5
   23c2a:	9802      	ldr	r0, [sp, #8]
   23c2c:	f000 f87a 	bl	23d24 <_printf_i>
   23c30:	e7ea      	b.n	23c08 <_svfiprintf_r+0x1c8>
   23c32:	46c0      	nop			; (mov r8, r8)
   23c34:	00028f26 	.word	0x00028f26
   23c38:	00028f2c 	.word	0x00028f2c
   23c3c:	00028f30 	.word	0x00028f30
   23c40:	00000000 	.word	0x00000000
   23c44:	0002397d 	.word	0x0002397d

00023c48 <_printf_common>:
   23c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23c4a:	0015      	movs	r5, r2
   23c4c:	9301      	str	r3, [sp, #4]
   23c4e:	688a      	ldr	r2, [r1, #8]
   23c50:	690b      	ldr	r3, [r1, #16]
   23c52:	9000      	str	r0, [sp, #0]
   23c54:	000c      	movs	r4, r1
   23c56:	4293      	cmp	r3, r2
   23c58:	da00      	bge.n	23c5c <_printf_common+0x14>
   23c5a:	0013      	movs	r3, r2
   23c5c:	0022      	movs	r2, r4
   23c5e:	602b      	str	r3, [r5, #0]
   23c60:	3243      	adds	r2, #67	; 0x43
   23c62:	7812      	ldrb	r2, [r2, #0]
   23c64:	2a00      	cmp	r2, #0
   23c66:	d001      	beq.n	23c6c <_printf_common+0x24>
   23c68:	3301      	adds	r3, #1
   23c6a:	602b      	str	r3, [r5, #0]
   23c6c:	6823      	ldr	r3, [r4, #0]
   23c6e:	069b      	lsls	r3, r3, #26
   23c70:	d502      	bpl.n	23c78 <_printf_common+0x30>
   23c72:	682b      	ldr	r3, [r5, #0]
   23c74:	3302      	adds	r3, #2
   23c76:	602b      	str	r3, [r5, #0]
   23c78:	2706      	movs	r7, #6
   23c7a:	6823      	ldr	r3, [r4, #0]
   23c7c:	401f      	ands	r7, r3
   23c7e:	d027      	beq.n	23cd0 <_printf_common+0x88>
   23c80:	0023      	movs	r3, r4
   23c82:	3343      	adds	r3, #67	; 0x43
   23c84:	781b      	ldrb	r3, [r3, #0]
   23c86:	1e5a      	subs	r2, r3, #1
   23c88:	4193      	sbcs	r3, r2
   23c8a:	6822      	ldr	r2, [r4, #0]
   23c8c:	0692      	lsls	r2, r2, #26
   23c8e:	d430      	bmi.n	23cf2 <_printf_common+0xaa>
   23c90:	0022      	movs	r2, r4
   23c92:	9901      	ldr	r1, [sp, #4]
   23c94:	3243      	adds	r2, #67	; 0x43
   23c96:	9800      	ldr	r0, [sp, #0]
   23c98:	9e08      	ldr	r6, [sp, #32]
   23c9a:	47b0      	blx	r6
   23c9c:	1c43      	adds	r3, r0, #1
   23c9e:	d025      	beq.n	23cec <_printf_common+0xa4>
   23ca0:	2306      	movs	r3, #6
   23ca2:	6820      	ldr	r0, [r4, #0]
   23ca4:	682a      	ldr	r2, [r5, #0]
   23ca6:	68e1      	ldr	r1, [r4, #12]
   23ca8:	4003      	ands	r3, r0
   23caa:	2500      	movs	r5, #0
   23cac:	2b04      	cmp	r3, #4
   23cae:	d103      	bne.n	23cb8 <_printf_common+0x70>
   23cb0:	1a8d      	subs	r5, r1, r2
   23cb2:	43eb      	mvns	r3, r5
   23cb4:	17db      	asrs	r3, r3, #31
   23cb6:	401d      	ands	r5, r3
   23cb8:	68a3      	ldr	r3, [r4, #8]
   23cba:	6922      	ldr	r2, [r4, #16]
   23cbc:	4293      	cmp	r3, r2
   23cbe:	dd01      	ble.n	23cc4 <_printf_common+0x7c>
   23cc0:	1a9b      	subs	r3, r3, r2
   23cc2:	18ed      	adds	r5, r5, r3
   23cc4:	2700      	movs	r7, #0
   23cc6:	42bd      	cmp	r5, r7
   23cc8:	d120      	bne.n	23d0c <_printf_common+0xc4>
   23cca:	2000      	movs	r0, #0
   23ccc:	e010      	b.n	23cf0 <_printf_common+0xa8>
   23cce:	3701      	adds	r7, #1
   23cd0:	68e3      	ldr	r3, [r4, #12]
   23cd2:	682a      	ldr	r2, [r5, #0]
   23cd4:	1a9b      	subs	r3, r3, r2
   23cd6:	429f      	cmp	r7, r3
   23cd8:	dad2      	bge.n	23c80 <_printf_common+0x38>
   23cda:	0022      	movs	r2, r4
   23cdc:	2301      	movs	r3, #1
   23cde:	3219      	adds	r2, #25
   23ce0:	9901      	ldr	r1, [sp, #4]
   23ce2:	9800      	ldr	r0, [sp, #0]
   23ce4:	9e08      	ldr	r6, [sp, #32]
   23ce6:	47b0      	blx	r6
   23ce8:	1c43      	adds	r3, r0, #1
   23cea:	d1f0      	bne.n	23cce <_printf_common+0x86>
   23cec:	2001      	movs	r0, #1
   23cee:	4240      	negs	r0, r0
   23cf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   23cf2:	2030      	movs	r0, #48	; 0x30
   23cf4:	18e1      	adds	r1, r4, r3
   23cf6:	3143      	adds	r1, #67	; 0x43
   23cf8:	7008      	strb	r0, [r1, #0]
   23cfa:	0021      	movs	r1, r4
   23cfc:	1c5a      	adds	r2, r3, #1
   23cfe:	3145      	adds	r1, #69	; 0x45
   23d00:	7809      	ldrb	r1, [r1, #0]
   23d02:	18a2      	adds	r2, r4, r2
   23d04:	3243      	adds	r2, #67	; 0x43
   23d06:	3302      	adds	r3, #2
   23d08:	7011      	strb	r1, [r2, #0]
   23d0a:	e7c1      	b.n	23c90 <_printf_common+0x48>
   23d0c:	0022      	movs	r2, r4
   23d0e:	2301      	movs	r3, #1
   23d10:	321a      	adds	r2, #26
   23d12:	9901      	ldr	r1, [sp, #4]
   23d14:	9800      	ldr	r0, [sp, #0]
   23d16:	9e08      	ldr	r6, [sp, #32]
   23d18:	47b0      	blx	r6
   23d1a:	1c43      	adds	r3, r0, #1
   23d1c:	d0e6      	beq.n	23cec <_printf_common+0xa4>
   23d1e:	3701      	adds	r7, #1
   23d20:	e7d1      	b.n	23cc6 <_printf_common+0x7e>
	...

00023d24 <_printf_i>:
   23d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   23d26:	b08b      	sub	sp, #44	; 0x2c
   23d28:	9206      	str	r2, [sp, #24]
   23d2a:	000a      	movs	r2, r1
   23d2c:	3243      	adds	r2, #67	; 0x43
   23d2e:	9307      	str	r3, [sp, #28]
   23d30:	9005      	str	r0, [sp, #20]
   23d32:	9204      	str	r2, [sp, #16]
   23d34:	7e0a      	ldrb	r2, [r1, #24]
   23d36:	000c      	movs	r4, r1
   23d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23d3a:	2a6e      	cmp	r2, #110	; 0x6e
   23d3c:	d100      	bne.n	23d40 <_printf_i+0x1c>
   23d3e:	e08f      	b.n	23e60 <_printf_i+0x13c>
   23d40:	d817      	bhi.n	23d72 <_printf_i+0x4e>
   23d42:	2a63      	cmp	r2, #99	; 0x63
   23d44:	d02c      	beq.n	23da0 <_printf_i+0x7c>
   23d46:	d808      	bhi.n	23d5a <_printf_i+0x36>
   23d48:	2a00      	cmp	r2, #0
   23d4a:	d100      	bne.n	23d4e <_printf_i+0x2a>
   23d4c:	e099      	b.n	23e82 <_printf_i+0x15e>
   23d4e:	2a58      	cmp	r2, #88	; 0x58
   23d50:	d054      	beq.n	23dfc <_printf_i+0xd8>
   23d52:	0026      	movs	r6, r4
   23d54:	3642      	adds	r6, #66	; 0x42
   23d56:	7032      	strb	r2, [r6, #0]
   23d58:	e029      	b.n	23dae <_printf_i+0x8a>
   23d5a:	2a64      	cmp	r2, #100	; 0x64
   23d5c:	d001      	beq.n	23d62 <_printf_i+0x3e>
   23d5e:	2a69      	cmp	r2, #105	; 0x69
   23d60:	d1f7      	bne.n	23d52 <_printf_i+0x2e>
   23d62:	6821      	ldr	r1, [r4, #0]
   23d64:	681a      	ldr	r2, [r3, #0]
   23d66:	0608      	lsls	r0, r1, #24
   23d68:	d523      	bpl.n	23db2 <_printf_i+0x8e>
   23d6a:	1d11      	adds	r1, r2, #4
   23d6c:	6019      	str	r1, [r3, #0]
   23d6e:	6815      	ldr	r5, [r2, #0]
   23d70:	e025      	b.n	23dbe <_printf_i+0x9a>
   23d72:	2a73      	cmp	r2, #115	; 0x73
   23d74:	d100      	bne.n	23d78 <_printf_i+0x54>
   23d76:	e088      	b.n	23e8a <_printf_i+0x166>
   23d78:	d808      	bhi.n	23d8c <_printf_i+0x68>
   23d7a:	2a6f      	cmp	r2, #111	; 0x6f
   23d7c:	d029      	beq.n	23dd2 <_printf_i+0xae>
   23d7e:	2a70      	cmp	r2, #112	; 0x70
   23d80:	d1e7      	bne.n	23d52 <_printf_i+0x2e>
   23d82:	2220      	movs	r2, #32
   23d84:	6809      	ldr	r1, [r1, #0]
   23d86:	430a      	orrs	r2, r1
   23d88:	6022      	str	r2, [r4, #0]
   23d8a:	e003      	b.n	23d94 <_printf_i+0x70>
   23d8c:	2a75      	cmp	r2, #117	; 0x75
   23d8e:	d020      	beq.n	23dd2 <_printf_i+0xae>
   23d90:	2a78      	cmp	r2, #120	; 0x78
   23d92:	d1de      	bne.n	23d52 <_printf_i+0x2e>
   23d94:	0022      	movs	r2, r4
   23d96:	2178      	movs	r1, #120	; 0x78
   23d98:	3245      	adds	r2, #69	; 0x45
   23d9a:	7011      	strb	r1, [r2, #0]
   23d9c:	4a6c      	ldr	r2, [pc, #432]	; (23f50 <_printf_i+0x22c>)
   23d9e:	e030      	b.n	23e02 <_printf_i+0xde>
   23da0:	000e      	movs	r6, r1
   23da2:	681a      	ldr	r2, [r3, #0]
   23da4:	3642      	adds	r6, #66	; 0x42
   23da6:	1d11      	adds	r1, r2, #4
   23da8:	6019      	str	r1, [r3, #0]
   23daa:	6813      	ldr	r3, [r2, #0]
   23dac:	7033      	strb	r3, [r6, #0]
   23dae:	2301      	movs	r3, #1
   23db0:	e079      	b.n	23ea6 <_printf_i+0x182>
   23db2:	0649      	lsls	r1, r1, #25
   23db4:	d5d9      	bpl.n	23d6a <_printf_i+0x46>
   23db6:	1d11      	adds	r1, r2, #4
   23db8:	6019      	str	r1, [r3, #0]
   23dba:	2300      	movs	r3, #0
   23dbc:	5ed5      	ldrsh	r5, [r2, r3]
   23dbe:	2d00      	cmp	r5, #0
   23dc0:	da03      	bge.n	23dca <_printf_i+0xa6>
   23dc2:	232d      	movs	r3, #45	; 0x2d
   23dc4:	9a04      	ldr	r2, [sp, #16]
   23dc6:	426d      	negs	r5, r5
   23dc8:	7013      	strb	r3, [r2, #0]
   23dca:	4b62      	ldr	r3, [pc, #392]	; (23f54 <_printf_i+0x230>)
   23dcc:	270a      	movs	r7, #10
   23dce:	9303      	str	r3, [sp, #12]
   23dd0:	e02f      	b.n	23e32 <_printf_i+0x10e>
   23dd2:	6820      	ldr	r0, [r4, #0]
   23dd4:	6819      	ldr	r1, [r3, #0]
   23dd6:	0605      	lsls	r5, r0, #24
   23dd8:	d503      	bpl.n	23de2 <_printf_i+0xbe>
   23dda:	1d08      	adds	r0, r1, #4
   23ddc:	6018      	str	r0, [r3, #0]
   23dde:	680d      	ldr	r5, [r1, #0]
   23de0:	e005      	b.n	23dee <_printf_i+0xca>
   23de2:	0640      	lsls	r0, r0, #25
   23de4:	d5f9      	bpl.n	23dda <_printf_i+0xb6>
   23de6:	680d      	ldr	r5, [r1, #0]
   23de8:	1d08      	adds	r0, r1, #4
   23dea:	6018      	str	r0, [r3, #0]
   23dec:	b2ad      	uxth	r5, r5
   23dee:	4b59      	ldr	r3, [pc, #356]	; (23f54 <_printf_i+0x230>)
   23df0:	2708      	movs	r7, #8
   23df2:	9303      	str	r3, [sp, #12]
   23df4:	2a6f      	cmp	r2, #111	; 0x6f
   23df6:	d018      	beq.n	23e2a <_printf_i+0x106>
   23df8:	270a      	movs	r7, #10
   23dfa:	e016      	b.n	23e2a <_printf_i+0x106>
   23dfc:	3145      	adds	r1, #69	; 0x45
   23dfe:	700a      	strb	r2, [r1, #0]
   23e00:	4a54      	ldr	r2, [pc, #336]	; (23f54 <_printf_i+0x230>)
   23e02:	9203      	str	r2, [sp, #12]
   23e04:	681a      	ldr	r2, [r3, #0]
   23e06:	6821      	ldr	r1, [r4, #0]
   23e08:	1d10      	adds	r0, r2, #4
   23e0a:	6018      	str	r0, [r3, #0]
   23e0c:	6815      	ldr	r5, [r2, #0]
   23e0e:	0608      	lsls	r0, r1, #24
   23e10:	d522      	bpl.n	23e58 <_printf_i+0x134>
   23e12:	07cb      	lsls	r3, r1, #31
   23e14:	d502      	bpl.n	23e1c <_printf_i+0xf8>
   23e16:	2320      	movs	r3, #32
   23e18:	4319      	orrs	r1, r3
   23e1a:	6021      	str	r1, [r4, #0]
   23e1c:	2710      	movs	r7, #16
   23e1e:	2d00      	cmp	r5, #0
   23e20:	d103      	bne.n	23e2a <_printf_i+0x106>
   23e22:	2320      	movs	r3, #32
   23e24:	6822      	ldr	r2, [r4, #0]
   23e26:	439a      	bics	r2, r3
   23e28:	6022      	str	r2, [r4, #0]
   23e2a:	0023      	movs	r3, r4
   23e2c:	2200      	movs	r2, #0
   23e2e:	3343      	adds	r3, #67	; 0x43
   23e30:	701a      	strb	r2, [r3, #0]
   23e32:	6863      	ldr	r3, [r4, #4]
   23e34:	60a3      	str	r3, [r4, #8]
   23e36:	2b00      	cmp	r3, #0
   23e38:	db5c      	blt.n	23ef4 <_printf_i+0x1d0>
   23e3a:	2204      	movs	r2, #4
   23e3c:	6821      	ldr	r1, [r4, #0]
   23e3e:	4391      	bics	r1, r2
   23e40:	6021      	str	r1, [r4, #0]
   23e42:	2d00      	cmp	r5, #0
   23e44:	d158      	bne.n	23ef8 <_printf_i+0x1d4>
   23e46:	9e04      	ldr	r6, [sp, #16]
   23e48:	2b00      	cmp	r3, #0
   23e4a:	d064      	beq.n	23f16 <_printf_i+0x1f2>
   23e4c:	0026      	movs	r6, r4
   23e4e:	9b03      	ldr	r3, [sp, #12]
   23e50:	3642      	adds	r6, #66	; 0x42
   23e52:	781b      	ldrb	r3, [r3, #0]
   23e54:	7033      	strb	r3, [r6, #0]
   23e56:	e05e      	b.n	23f16 <_printf_i+0x1f2>
   23e58:	0648      	lsls	r0, r1, #25
   23e5a:	d5da      	bpl.n	23e12 <_printf_i+0xee>
   23e5c:	b2ad      	uxth	r5, r5
   23e5e:	e7d8      	b.n	23e12 <_printf_i+0xee>
   23e60:	6809      	ldr	r1, [r1, #0]
   23e62:	681a      	ldr	r2, [r3, #0]
   23e64:	0608      	lsls	r0, r1, #24
   23e66:	d505      	bpl.n	23e74 <_printf_i+0x150>
   23e68:	1d11      	adds	r1, r2, #4
   23e6a:	6019      	str	r1, [r3, #0]
   23e6c:	6813      	ldr	r3, [r2, #0]
   23e6e:	6962      	ldr	r2, [r4, #20]
   23e70:	601a      	str	r2, [r3, #0]
   23e72:	e006      	b.n	23e82 <_printf_i+0x15e>
   23e74:	0649      	lsls	r1, r1, #25
   23e76:	d5f7      	bpl.n	23e68 <_printf_i+0x144>
   23e78:	1d11      	adds	r1, r2, #4
   23e7a:	6019      	str	r1, [r3, #0]
   23e7c:	6813      	ldr	r3, [r2, #0]
   23e7e:	8aa2      	ldrh	r2, [r4, #20]
   23e80:	801a      	strh	r2, [r3, #0]
   23e82:	2300      	movs	r3, #0
   23e84:	9e04      	ldr	r6, [sp, #16]
   23e86:	6123      	str	r3, [r4, #16]
   23e88:	e054      	b.n	23f34 <_printf_i+0x210>
   23e8a:	681a      	ldr	r2, [r3, #0]
   23e8c:	1d11      	adds	r1, r2, #4
   23e8e:	6019      	str	r1, [r3, #0]
   23e90:	6816      	ldr	r6, [r2, #0]
   23e92:	2100      	movs	r1, #0
   23e94:	6862      	ldr	r2, [r4, #4]
   23e96:	0030      	movs	r0, r6
   23e98:	f000 f922 	bl	240e0 <memchr>
   23e9c:	2800      	cmp	r0, #0
   23e9e:	d001      	beq.n	23ea4 <_printf_i+0x180>
   23ea0:	1b80      	subs	r0, r0, r6
   23ea2:	6060      	str	r0, [r4, #4]
   23ea4:	6863      	ldr	r3, [r4, #4]
   23ea6:	6123      	str	r3, [r4, #16]
   23ea8:	2300      	movs	r3, #0
   23eaa:	9a04      	ldr	r2, [sp, #16]
   23eac:	7013      	strb	r3, [r2, #0]
   23eae:	e041      	b.n	23f34 <_printf_i+0x210>
   23eb0:	6923      	ldr	r3, [r4, #16]
   23eb2:	0032      	movs	r2, r6
   23eb4:	9906      	ldr	r1, [sp, #24]
   23eb6:	9805      	ldr	r0, [sp, #20]
   23eb8:	9d07      	ldr	r5, [sp, #28]
   23eba:	47a8      	blx	r5
   23ebc:	1c43      	adds	r3, r0, #1
   23ebe:	d043      	beq.n	23f48 <_printf_i+0x224>
   23ec0:	6823      	ldr	r3, [r4, #0]
   23ec2:	2500      	movs	r5, #0
   23ec4:	079b      	lsls	r3, r3, #30
   23ec6:	d40f      	bmi.n	23ee8 <_printf_i+0x1c4>
   23ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23eca:	68e0      	ldr	r0, [r4, #12]
   23ecc:	4298      	cmp	r0, r3
   23ece:	da3d      	bge.n	23f4c <_printf_i+0x228>
   23ed0:	0018      	movs	r0, r3
   23ed2:	e03b      	b.n	23f4c <_printf_i+0x228>
   23ed4:	0022      	movs	r2, r4
   23ed6:	2301      	movs	r3, #1
   23ed8:	3219      	adds	r2, #25
   23eda:	9906      	ldr	r1, [sp, #24]
   23edc:	9805      	ldr	r0, [sp, #20]
   23ede:	9e07      	ldr	r6, [sp, #28]
   23ee0:	47b0      	blx	r6
   23ee2:	1c43      	adds	r3, r0, #1
   23ee4:	d030      	beq.n	23f48 <_printf_i+0x224>
   23ee6:	3501      	adds	r5, #1
   23ee8:	68e3      	ldr	r3, [r4, #12]
   23eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23eec:	1a9b      	subs	r3, r3, r2
   23eee:	429d      	cmp	r5, r3
   23ef0:	dbf0      	blt.n	23ed4 <_printf_i+0x1b0>
   23ef2:	e7e9      	b.n	23ec8 <_printf_i+0x1a4>
   23ef4:	2d00      	cmp	r5, #0
   23ef6:	d0a9      	beq.n	23e4c <_printf_i+0x128>
   23ef8:	9e04      	ldr	r6, [sp, #16]
   23efa:	0028      	movs	r0, r5
   23efc:	0039      	movs	r1, r7
   23efe:	f7fc fb3d 	bl	2057c <__aeabi_uidivmod>
   23f02:	9b03      	ldr	r3, [sp, #12]
   23f04:	3e01      	subs	r6, #1
   23f06:	5c5b      	ldrb	r3, [r3, r1]
   23f08:	0028      	movs	r0, r5
   23f0a:	7033      	strb	r3, [r6, #0]
   23f0c:	0039      	movs	r1, r7
   23f0e:	f7fc faaf 	bl	20470 <__udivsi3>
   23f12:	1e05      	subs	r5, r0, #0
   23f14:	d1f1      	bne.n	23efa <_printf_i+0x1d6>
   23f16:	2f08      	cmp	r7, #8
   23f18:	d109      	bne.n	23f2e <_printf_i+0x20a>
   23f1a:	6823      	ldr	r3, [r4, #0]
   23f1c:	07db      	lsls	r3, r3, #31
   23f1e:	d506      	bpl.n	23f2e <_printf_i+0x20a>
   23f20:	6863      	ldr	r3, [r4, #4]
   23f22:	6922      	ldr	r2, [r4, #16]
   23f24:	4293      	cmp	r3, r2
   23f26:	dc02      	bgt.n	23f2e <_printf_i+0x20a>
   23f28:	2330      	movs	r3, #48	; 0x30
   23f2a:	3e01      	subs	r6, #1
   23f2c:	7033      	strb	r3, [r6, #0]
   23f2e:	9b04      	ldr	r3, [sp, #16]
   23f30:	1b9b      	subs	r3, r3, r6
   23f32:	6123      	str	r3, [r4, #16]
   23f34:	9b07      	ldr	r3, [sp, #28]
   23f36:	aa09      	add	r2, sp, #36	; 0x24
   23f38:	9300      	str	r3, [sp, #0]
   23f3a:	0021      	movs	r1, r4
   23f3c:	9b06      	ldr	r3, [sp, #24]
   23f3e:	9805      	ldr	r0, [sp, #20]
   23f40:	f7ff fe82 	bl	23c48 <_printf_common>
   23f44:	1c43      	adds	r3, r0, #1
   23f46:	d1b3      	bne.n	23eb0 <_printf_i+0x18c>
   23f48:	2001      	movs	r0, #1
   23f4a:	4240      	negs	r0, r0
   23f4c:	b00b      	add	sp, #44	; 0x2c
   23f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23f50:	00028f48 	.word	0x00028f48
   23f54:	00028f37 	.word	0x00028f37

00023f58 <__sread>:
   23f58:	b570      	push	{r4, r5, r6, lr}
   23f5a:	000c      	movs	r4, r1
   23f5c:	250e      	movs	r5, #14
   23f5e:	5f49      	ldrsh	r1, [r1, r5]
   23f60:	f000 f8f0 	bl	24144 <_read_r>
   23f64:	2800      	cmp	r0, #0
   23f66:	db03      	blt.n	23f70 <__sread+0x18>
   23f68:	6d63      	ldr	r3, [r4, #84]	; 0x54
   23f6a:	181b      	adds	r3, r3, r0
   23f6c:	6563      	str	r3, [r4, #84]	; 0x54
   23f6e:	bd70      	pop	{r4, r5, r6, pc}
   23f70:	89a3      	ldrh	r3, [r4, #12]
   23f72:	4a02      	ldr	r2, [pc, #8]	; (23f7c <__sread+0x24>)
   23f74:	4013      	ands	r3, r2
   23f76:	81a3      	strh	r3, [r4, #12]
   23f78:	e7f9      	b.n	23f6e <__sread+0x16>
   23f7a:	46c0      	nop			; (mov r8, r8)
   23f7c:	ffffefff 	.word	0xffffefff

00023f80 <__swrite>:
   23f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f82:	001f      	movs	r7, r3
   23f84:	898b      	ldrh	r3, [r1, #12]
   23f86:	0005      	movs	r5, r0
   23f88:	000c      	movs	r4, r1
   23f8a:	0016      	movs	r6, r2
   23f8c:	05db      	lsls	r3, r3, #23
   23f8e:	d505      	bpl.n	23f9c <__swrite+0x1c>
   23f90:	230e      	movs	r3, #14
   23f92:	5ec9      	ldrsh	r1, [r1, r3]
   23f94:	2200      	movs	r2, #0
   23f96:	2302      	movs	r3, #2
   23f98:	f000 f88e 	bl	240b8 <_lseek_r>
   23f9c:	89a3      	ldrh	r3, [r4, #12]
   23f9e:	4a05      	ldr	r2, [pc, #20]	; (23fb4 <__swrite+0x34>)
   23fa0:	0028      	movs	r0, r5
   23fa2:	4013      	ands	r3, r2
   23fa4:	81a3      	strh	r3, [r4, #12]
   23fa6:	0032      	movs	r2, r6
   23fa8:	230e      	movs	r3, #14
   23faa:	5ee1      	ldrsh	r1, [r4, r3]
   23fac:	003b      	movs	r3, r7
   23fae:	f000 f839 	bl	24024 <_write_r>
   23fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23fb4:	ffffefff 	.word	0xffffefff

00023fb8 <__sseek>:
   23fb8:	b570      	push	{r4, r5, r6, lr}
   23fba:	000c      	movs	r4, r1
   23fbc:	250e      	movs	r5, #14
   23fbe:	5f49      	ldrsh	r1, [r1, r5]
   23fc0:	f000 f87a 	bl	240b8 <_lseek_r>
   23fc4:	89a3      	ldrh	r3, [r4, #12]
   23fc6:	1c42      	adds	r2, r0, #1
   23fc8:	d103      	bne.n	23fd2 <__sseek+0x1a>
   23fca:	4a05      	ldr	r2, [pc, #20]	; (23fe0 <__sseek+0x28>)
   23fcc:	4013      	ands	r3, r2
   23fce:	81a3      	strh	r3, [r4, #12]
   23fd0:	bd70      	pop	{r4, r5, r6, pc}
   23fd2:	2280      	movs	r2, #128	; 0x80
   23fd4:	0152      	lsls	r2, r2, #5
   23fd6:	4313      	orrs	r3, r2
   23fd8:	81a3      	strh	r3, [r4, #12]
   23fda:	6560      	str	r0, [r4, #84]	; 0x54
   23fdc:	e7f8      	b.n	23fd0 <__sseek+0x18>
   23fde:	46c0      	nop			; (mov r8, r8)
   23fe0:	ffffefff 	.word	0xffffefff

00023fe4 <__sclose>:
   23fe4:	b510      	push	{r4, lr}
   23fe6:	230e      	movs	r3, #14
   23fe8:	5ec9      	ldrsh	r1, [r1, r3]
   23fea:	f000 f82f 	bl	2404c <_close_r>
   23fee:	bd10      	pop	{r4, pc}

00023ff0 <strchr>:
   23ff0:	b2c9      	uxtb	r1, r1
   23ff2:	7803      	ldrb	r3, [r0, #0]
   23ff4:	2b00      	cmp	r3, #0
   23ff6:	d004      	beq.n	24002 <strchr+0x12>
   23ff8:	4299      	cmp	r1, r3
   23ffa:	d100      	bne.n	23ffe <strchr+0xe>
   23ffc:	4770      	bx	lr
   23ffe:	3001      	adds	r0, #1
   24000:	e7f7      	b.n	23ff2 <strchr+0x2>
   24002:	424b      	negs	r3, r1
   24004:	4159      	adcs	r1, r3
   24006:	4249      	negs	r1, r1
   24008:	4008      	ands	r0, r1
   2400a:	e7f7      	b.n	23ffc <strchr+0xc>

0002400c <__ascii_wctomb>:
   2400c:	1e0b      	subs	r3, r1, #0
   2400e:	d004      	beq.n	2401a <__ascii_wctomb+0xe>
   24010:	2aff      	cmp	r2, #255	; 0xff
   24012:	d904      	bls.n	2401e <__ascii_wctomb+0x12>
   24014:	238a      	movs	r3, #138	; 0x8a
   24016:	6003      	str	r3, [r0, #0]
   24018:	3b8b      	subs	r3, #139	; 0x8b
   2401a:	0018      	movs	r0, r3
   2401c:	4770      	bx	lr
   2401e:	700a      	strb	r2, [r1, #0]
   24020:	2301      	movs	r3, #1
   24022:	e7fa      	b.n	2401a <__ascii_wctomb+0xe>

00024024 <_write_r>:
   24024:	b570      	push	{r4, r5, r6, lr}
   24026:	0005      	movs	r5, r0
   24028:	0008      	movs	r0, r1
   2402a:	0011      	movs	r1, r2
   2402c:	2200      	movs	r2, #0
   2402e:	4c06      	ldr	r4, [pc, #24]	; (24048 <_write_r+0x24>)
   24030:	6022      	str	r2, [r4, #0]
   24032:	001a      	movs	r2, r3
   24034:	f7f4 fdfa 	bl	18c2c <_write>
   24038:	1c43      	adds	r3, r0, #1
   2403a:	d103      	bne.n	24044 <_write_r+0x20>
   2403c:	6823      	ldr	r3, [r4, #0]
   2403e:	2b00      	cmp	r3, #0
   24040:	d000      	beq.n	24044 <_write_r+0x20>
   24042:	602b      	str	r3, [r5, #0]
   24044:	bd70      	pop	{r4, r5, r6, pc}
   24046:	46c0      	nop			; (mov r8, r8)
   24048:	20005d30 	.word	0x20005d30

0002404c <_close_r>:
   2404c:	2300      	movs	r3, #0
   2404e:	b570      	push	{r4, r5, r6, lr}
   24050:	4c06      	ldr	r4, [pc, #24]	; (2406c <_close_r+0x20>)
   24052:	0005      	movs	r5, r0
   24054:	0008      	movs	r0, r1
   24056:	6023      	str	r3, [r4, #0]
   24058:	f7f4 fe3c 	bl	18cd4 <_close>
   2405c:	1c43      	adds	r3, r0, #1
   2405e:	d103      	bne.n	24068 <_close_r+0x1c>
   24060:	6823      	ldr	r3, [r4, #0]
   24062:	2b00      	cmp	r3, #0
   24064:	d000      	beq.n	24068 <_close_r+0x1c>
   24066:	602b      	str	r3, [r5, #0]
   24068:	bd70      	pop	{r4, r5, r6, pc}
   2406a:	46c0      	nop			; (mov r8, r8)
   2406c:	20005d30 	.word	0x20005d30

00024070 <_fstat_r>:
   24070:	2300      	movs	r3, #0
   24072:	b570      	push	{r4, r5, r6, lr}
   24074:	4c06      	ldr	r4, [pc, #24]	; (24090 <_fstat_r+0x20>)
   24076:	0005      	movs	r5, r0
   24078:	0008      	movs	r0, r1
   2407a:	0011      	movs	r1, r2
   2407c:	6023      	str	r3, [r4, #0]
   2407e:	f7f4 fe33 	bl	18ce8 <_fstat>
   24082:	1c43      	adds	r3, r0, #1
   24084:	d103      	bne.n	2408e <_fstat_r+0x1e>
   24086:	6823      	ldr	r3, [r4, #0]
   24088:	2b00      	cmp	r3, #0
   2408a:	d000      	beq.n	2408e <_fstat_r+0x1e>
   2408c:	602b      	str	r3, [r5, #0]
   2408e:	bd70      	pop	{r4, r5, r6, pc}
   24090:	20005d30 	.word	0x20005d30

00024094 <_isatty_r>:
   24094:	2300      	movs	r3, #0
   24096:	b570      	push	{r4, r5, r6, lr}
   24098:	4c06      	ldr	r4, [pc, #24]	; (240b4 <_isatty_r+0x20>)
   2409a:	0005      	movs	r5, r0
   2409c:	0008      	movs	r0, r1
   2409e:	6023      	str	r3, [r4, #0]
   240a0:	f7f4 fe30 	bl	18d04 <_isatty>
   240a4:	1c43      	adds	r3, r0, #1
   240a6:	d103      	bne.n	240b0 <_isatty_r+0x1c>
   240a8:	6823      	ldr	r3, [r4, #0]
   240aa:	2b00      	cmp	r3, #0
   240ac:	d000      	beq.n	240b0 <_isatty_r+0x1c>
   240ae:	602b      	str	r3, [r5, #0]
   240b0:	bd70      	pop	{r4, r5, r6, pc}
   240b2:	46c0      	nop			; (mov r8, r8)
   240b4:	20005d30 	.word	0x20005d30

000240b8 <_lseek_r>:
   240b8:	b570      	push	{r4, r5, r6, lr}
   240ba:	0005      	movs	r5, r0
   240bc:	0008      	movs	r0, r1
   240be:	0011      	movs	r1, r2
   240c0:	2200      	movs	r2, #0
   240c2:	4c06      	ldr	r4, [pc, #24]	; (240dc <_lseek_r+0x24>)
   240c4:	6022      	str	r2, [r4, #0]
   240c6:	001a      	movs	r2, r3
   240c8:	f7f4 fe25 	bl	18d16 <_lseek>
   240cc:	1c43      	adds	r3, r0, #1
   240ce:	d103      	bne.n	240d8 <_lseek_r+0x20>
   240d0:	6823      	ldr	r3, [r4, #0]
   240d2:	2b00      	cmp	r3, #0
   240d4:	d000      	beq.n	240d8 <_lseek_r+0x20>
   240d6:	602b      	str	r3, [r5, #0]
   240d8:	bd70      	pop	{r4, r5, r6, pc}
   240da:	46c0      	nop			; (mov r8, r8)
   240dc:	20005d30 	.word	0x20005d30

000240e0 <memchr>:
   240e0:	b2c9      	uxtb	r1, r1
   240e2:	1882      	adds	r2, r0, r2
   240e4:	4290      	cmp	r0, r2
   240e6:	d101      	bne.n	240ec <memchr+0xc>
   240e8:	2000      	movs	r0, #0
   240ea:	4770      	bx	lr
   240ec:	7803      	ldrb	r3, [r0, #0]
   240ee:	428b      	cmp	r3, r1
   240f0:	d0fb      	beq.n	240ea <memchr+0xa>
   240f2:	3001      	adds	r0, #1
   240f4:	e7f6      	b.n	240e4 <memchr+0x4>

000240f6 <_realloc_r>:
   240f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   240f8:	0007      	movs	r7, r0
   240fa:	000d      	movs	r5, r1
   240fc:	0016      	movs	r6, r2
   240fe:	2900      	cmp	r1, #0
   24100:	d105      	bne.n	2410e <_realloc_r+0x18>
   24102:	0011      	movs	r1, r2
   24104:	f7fe feac 	bl	22e60 <_malloc_r>
   24108:	0004      	movs	r4, r0
   2410a:	0020      	movs	r0, r4
   2410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2410e:	2a00      	cmp	r2, #0
   24110:	d103      	bne.n	2411a <_realloc_r+0x24>
   24112:	f7fe fe5b 	bl	22dcc <_free_r>
   24116:	0034      	movs	r4, r6
   24118:	e7f7      	b.n	2410a <_realloc_r+0x14>
   2411a:	f000 f827 	bl	2416c <_malloc_usable_size_r>
   2411e:	002c      	movs	r4, r5
   24120:	4286      	cmp	r6, r0
   24122:	d9f2      	bls.n	2410a <_realloc_r+0x14>
   24124:	0031      	movs	r1, r6
   24126:	0038      	movs	r0, r7
   24128:	f7fe fe9a 	bl	22e60 <_malloc_r>
   2412c:	1e04      	subs	r4, r0, #0
   2412e:	d0ec      	beq.n	2410a <_realloc_r+0x14>
   24130:	0029      	movs	r1, r5
   24132:	0032      	movs	r2, r6
   24134:	f7fe fe26 	bl	22d84 <memcpy>
   24138:	0029      	movs	r1, r5
   2413a:	0038      	movs	r0, r7
   2413c:	f7fe fe46 	bl	22dcc <_free_r>
   24140:	e7e3      	b.n	2410a <_realloc_r+0x14>
	...

00024144 <_read_r>:
   24144:	b570      	push	{r4, r5, r6, lr}
   24146:	0005      	movs	r5, r0
   24148:	0008      	movs	r0, r1
   2414a:	0011      	movs	r1, r2
   2414c:	2200      	movs	r2, #0
   2414e:	4c06      	ldr	r4, [pc, #24]	; (24168 <_read_r+0x24>)
   24150:	6022      	str	r2, [r4, #0]
   24152:	001a      	movs	r2, r3
   24154:	f7f4 fd40 	bl	18bd8 <_read>
   24158:	1c43      	adds	r3, r0, #1
   2415a:	d103      	bne.n	24164 <_read_r+0x20>
   2415c:	6823      	ldr	r3, [r4, #0]
   2415e:	2b00      	cmp	r3, #0
   24160:	d000      	beq.n	24164 <_read_r+0x20>
   24162:	602b      	str	r3, [r5, #0]
   24164:	bd70      	pop	{r4, r5, r6, pc}
   24166:	46c0      	nop			; (mov r8, r8)
   24168:	20005d30 	.word	0x20005d30

0002416c <_malloc_usable_size_r>:
   2416c:	1f0b      	subs	r3, r1, #4
   2416e:	681b      	ldr	r3, [r3, #0]
   24170:	1f18      	subs	r0, r3, #4
   24172:	2b00      	cmp	r3, #0
   24174:	da01      	bge.n	2417a <_malloc_usable_size_r+0xe>
   24176:	580b      	ldr	r3, [r1, r0]
   24178:	18c0      	adds	r0, r0, r3
   2417a:	4770      	bx	lr
   2417c:	6e6e6143 	.word	0x6e6e6143
   24180:	6620746f 	.word	0x6620746f
   24184:	20646e69 	.word	0x20646e69
   24188:	21554d49 	.word	0x21554d49
   2418c:	00000a0d 	.word	0x00000a0d
   24190:	20554d49 	.word	0x20554d49
   24194:	6e756f66 	.word	0x6e756f66
   24198:	0a0d2164 	.word	0x0a0d2164
   2419c:	00000000 	.word	0x00000000
   241a0:	74696e49 	.word	0x74696e49
   241a4:	696c6169 	.word	0x696c6169
   241a8:	2064657a 	.word	0x2064657a
   241ac:	21554d49 	.word	0x21554d49
   241b0:	00000a0d 	.word	0x00000a0d
   241b4:	65636341 	.word	0x65636341
   241b8:	6172656c 	.word	0x6172656c
   241bc:	6e6f6974 	.word	0x6e6f6974
   241c0:	676d5b20 	.word	0x676d5b20
   241c4:	64253a5d 	.word	0x64253a5d
   241c8:	20642520 	.word	0x20642520
   241cc:	0a0d6425 	.word	0x0a0d6425
   241d0:	00000000 	.word	0x00000000
   241d4:	646e6573 	.word	0x646e6573
   241d8:	756d6920 	.word	0x756d6920
   241dc:	0d6b6f20 	.word	0x0d6b6f20
   241e0:	0000000a 	.word	0x0000000a
   241e4:	646e6573 	.word	0x646e6573
   241e8:	756d6920 	.word	0x756d6920
   241ec:	69616620 	.word	0x69616620
   241f0:	000a0d6c 	.word	0x000a0d6c

000241f4 <sysfont_glyphs>:
	...
   24218:	00300000 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
   24228:	00300000 00000030 00000000 00000000     ..0.0...........
   24238:	006c0000 006c006c 0000006c 00000000     ..l.l.l.l.......
	...
   2425c:	00480048 004800fc 00480048 004800fc     H.H...H.H.H...H.
   2426c:	00000048 00000000 00000000 00100000     H...............
   2427c:	003c0010 00300040 00040008 00100078     ..<.@.0.....x...
   2428c:	00000010 00000000 00000000 00000000     ................
   2429c:	00a4007c 004800a8 00140010 004a002a     |.....H.....*.J.
   242ac:	00000044 00000000 00000000 00700000     D.............p.
   242bc:	00880088 00700088 008a0088 008c008a     ......p.........
   242cc:	00000070 00000000 00000000 00100000     p...............
   242dc:	00100010 00000000 00000000 00000000     ................
	...
   242f8:	00100008 00200010 00200020 00200020     ...... . . . . .
   24308:	00100020 00080010 00000000 00000000      ...............
   24318:	00100020 00080010 00080008 00080008      ...............
   24328:	00100008 00200010 00000000 00000000     ...... .........
   24338:	00280000 007c0010 00280010 00000000     ..(...|...(.....
	...
   24360:	00100010 00fe0010 00100010 00000010     ................
	...
   24388:	00180000 00300018 00000020 00000000     ......0. .......
	...
   243a4:	00fe0000 00000000 00000000 00000000     ................
	...
   243c8:	00180000 00000018 00000000 00000000     ................
   243d8:	00000000 00080004 00100008 00200010     .............. .
   243e8:	00400020 00000040 00000000 00000000      .@.@...........
   243f8:	00780000 00840084 0094008c 00c400a4     ..x.............
   24408:	00840084 00000078 00000000 00000000     ....x...........
   24418:	00100000 00500030 00100010 00100010     ....0.P.........
   24428:	00100010 0000007c 00000000 00000000     ....|...........
   24438:	00700000 00080088 00100008 00200010     ..p........... .
   24448:	00400020 000000fc 00000000 00000000      .@.............
   24458:	00700000 00080088 00300008 00080008     ..p.......0.....
   24468:	00880008 00000070 00000000 00000000     ....p...........
   24478:	00080000 00280018 00480028 00880088     ......(.(.H.....
   24488:	000800fc 00000008 00000000 00000000     ................
   24498:	007c0000 00800080 00c400b8 00040004     ..|.............
   244a8:	00840004 00000078 00000000 00000000     ....x...........
   244b8:	00380000 00800040 00b00080 008400c8     ..8.@...........
   244c8:	00480084 00000030 00000000 00000000     ..H.0...........
   244d8:	00fc0000 00040004 00080008 00100010     ................
   244e8:	00200020 00000040 00000000 00000000      . .@...........
   244f8:	00780000 00840084 00780084 00840084     ..x.......x.....
   24508:	00840084 00000078 00000000 00000000     ....x...........
   24518:	00780000 00840084 008c0084 00040074     ..x.........t...
   24528:	00100008 000000e0 00000000 00000000     ................
	...
   24540:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
   24560:	00600000 00000060 00600000 00c00060     ..`.`.....`.`...
   24570:	00000080 00000000 00000000 00000000     ................
   24580:	00180004 00800060 00180060 00000004     ....`...`.......
	...
   245a0:	007e0000 00000000 0000007e 00000000     ..~.....~.......
	...
   245c0:	00300040 0002000c 0030000c 00000040     @.0.......0.@...
	...
   245d8:	00700000 00080088 00100008 00200020     ..p......... . .
   245e8:	00200000 00000020 00000000 00000000     .. . ...........
   245f8:	00000000 003c0000 00ba0042 00aa00aa     ......<.B.......
   24608:	00bc00aa 003c0040 00000000 00000000     ....@.<.........
   24618:	00100000 00280010 00280028 007c0044     ......(.(.(.D.|.
   24628:	00820044 00000082 00000000 00000000     D...............
   24638:	00f00000 00880088 00f00088 00880088     ................
   24648:	00880088 000000f0 00000000 00000000     ................
   24658:	00380000 00800044 00800080 00800080     ..8.D...........
   24668:	00440080 00000038 00000000 00000000     ..D.8...........
   24678:	00f00000 00840088 00840084 00840084     ................
   24688:	00880084 000000f0 00000000 00000000     ................
   24698:	007c0000 00400040 00780040 00400040     ..|.@.@.@.x.@.@.
   246a8:	00400040 0000007c 00000000 00000000     @.@.|...........
   246b8:	007c0000 00400040 00400040 00400078     ..|.@.@.@.@.x.@.
   246c8:	00400040 00000040 00000000 00000000     @.@.@...........
   246d8:	00380000 00800044 00800080 0084009c     ..8.D...........
   246e8:	00440084 0000003c 00000000 00000000     ..D.<...........
   246f8:	00840000 00840084 00fc0084 00840084     ................
   24708:	00840084 00000084 00000000 00000000     ................
   24718:	007c0000 00100010 00100010 00100010     ..|.............
   24728:	00100010 0000007c 00000000 00000000     ....|...........
   24738:	00f80000 00080008 00080008 00080008     ................
   24748:	00100008 000000e0 00000000 00000000     ................
   24758:	00840000 00880084 00a00090 008800d0     ................
   24768:	00840088 00000084 00000000 00000000     ................
   24778:	00800000 00800080 00800080 00800080     ................
   24788:	00800080 000000fc 00000000 00000000     ................
   24798:	00840000 00cc0084 00b400cc 008400b4     ................
   247a8:	00840084 00000084 00000000 00000000     ................
   247b8:	00840000 00c400c4 00a400a4 00940094     ................
   247c8:	008c008c 00000084 00000000 00000000     ................
   247d8:	00300000 00840048 00840084 00840084     ..0.H...........
   247e8:	00480084 00000030 00000000 00000000     ..H.0...........
   247f8:	00f00000 00840088 00840084 00f00088     ................
   24808:	00800080 00000080 00000000 00000000     ................
   24818:	00300000 00840048 00840084 00840084     ..0.H...........
   24828:	00480084 00200030 0000001c 00000000     ..H.0. .........
   24838:	00f00000 00840088 00880084 009000f0     ................
   24848:	00840088 00000084 00000000 00000000     ................
   24858:	00780000 00800084 00300040 00040008     ..x.....@.0.....
   24868:	00840004 00000078 00000000 00000000     ....x...........
   24878:	00fe0000 00100010 00100010 00100010     ................
   24888:	00100010 00000010 00000000 00000000     ................
   24898:	00840000 00840084 00840084 00840084     ................
   248a8:	00840084 00000078 00000000 00000000     ....x...........
   248b8:	00820000 00440082 00440044 00280044     ......D.D.D.D.(.
   248c8:	00280028 00000010 00000000 00000000     (.(.............
   248d8:	00840000 00840084 00b40084 00b400b4     ................
   248e8:	00480078 00000048 00000000 00000000     x.H.H...........
   248f8:	00820000 00440044 00100028 00280010     ....D.D.(.....(.
   24908:	00440044 00000082 00000000 00000000     D.D.............
   24918:	00820000 00440044 00280028 00100028     ....D.D.(.(.(...
   24928:	00100010 00000010 00000000 00000000     ................
   24938:	00fc0000 00080004 00100008 00200010     .............. .
   24948:	00400040 000000fe 00000000 00000000     @.@.............
   24958:	008000e0 00800080 00800080 00800080     ................
   24968:	00800080 00e00080 00000000 00000000     ................
   24978:	00400000 00200040 00100020 00080010     ..@.@. . .......
   24988:	00040008 00000004 00000000 00000000     ................
   24998:	002000e0 00200020 00200020 00200020     .. . . . . . . .
   249a8:	00200020 00e00020 00000000 00000000      . . ...........
   249b8:	00100000 00440028 00000000 00000000     ....(.D.........
	...
   249ec:	0000007c 00000000 00000000 00200000     |............. .
   249fc:	00080010 00000000 00000000 00000000     ................
	...
   24a20:	00040078 007c0004 008c0084 00000076     x.....|.....v...
	...
   24a38:	00800080 00800080 00c400b8 00840084     ................
   24a48:	00880084 000000f0 00000000 00000000     ................
	...
   24a60:	0080007c 00800080 00800080 0000007c     |...........|...
	...
   24a78:	00020002 00020002 0042003e 00820082     ........>.B.....
   24a88:	00420082 0000003e 00000000 00000000     ..B.>...........
	...
   24aa0:	0082007c 00fe0082 00800080 0000007e     |...........~...
	...
   24ab8:	001c0000 00200020 002000fc 00200020     .... . ... . . .
   24ac8:	00200020 000000fc 00000000 00000000      . .............
	...
   24ae0:	0084007c 00840084 008c0084 00040074     |...........t...
   24af0:	00380044 00000000 00800080 00800080     D.8.............
   24b00:	00c400b8 00840084 00840084 00000084     ................
	...
   24b18:	00100000 00000000 00100070 00100010     ........p.......
   24b28:	00100010 0000007c 00000000 00000000     ....|...........
   24b38:	00080000 00000000 00080078 00080008     ........x.......
   24b48:	00080008 00080008 00e00010 00000000     ................
   24b58:	00800080 00800080 00900088 00e000a0     ................
   24b68:	00880090 00000084 00000000 00000000     ................
   24b78:	00f00000 00100010 00100010 00100010     ................
   24b88:	00100010 000000fe 00000000 00000000     ................
	...
   24ba0:	00d400ac 00940094 00940094 00000094     ................
	...
   24bc0:	00c400b8 00840084 00840084 00000084     ................
	...
   24be0:	00840078 00840084 00840084 00000078     x...........x...
	...
   24c00:	00c400b8 00840084 00840084 008000f8     ................
   24c10:	00800080 00000000 00000000 00000000     ................
   24c20:	0084007c 00840084 00840084 0004007c     |...........|...
   24c30:	00040004 00000000 00000000 00000000     ................
   24c40:	003000cc 00200020 00200020 000000f8     ..0. . . . .....
	...
   24c60:	0080007c 00780080 00040004 000000f8     |.....x.........
	...
   24c7c:	00200000 002000fc 00200020 00200020     .. ... . . . . .
   24c8c:	0000001c 00000000 00000000 00000000     ................
   24c9c:	00000000 00880088 00880088 00880088     ................
   24cac:	00000074 00000000 00000000 00000000     t...............
   24cbc:	00000000 00440082 00280044 00100028     ......D.D.(.(...
   24ccc:	00000010 00000000 00000000 00000000     ................
   24cdc:	00000000 00840084 00b400b4 00480048     ............H.H.
   24cec:	00000048 00000000 00000000 00000000     H...............
   24cfc:	00000000 00280044 00100028 00440028     ....D.(.(...(.D.
   24d0c:	00000044 00000000 00000000 00000000     D...............
   24d1c:	00000000 00440082 00280044 00280028     ......D.D.(.(.(.
   24d2c:	00100010 00200020 00000000 00000000     .... . .........
   24d3c:	00000000 000400fc 00100008 00400020     ............ .@.
   24d4c:	000000fc 00000000 00000000 00100008     ................
   24d5c:	00080010 00100008 00080010 00100008     ................
   24d6c:	00080010 00000000 00000000 00100010     ................
   24d7c:	00100010 00000010 00100000 00100010     ................
   24d8c:	00100010 00000000 00000000 00100020     ............ ...
   24d9c:	00200010 00100020 00200010 00100020     .. . ..... . ...
   24dac:	00200010 00000000                       .. .....

00024db4 <pcWelcomeMessage>:
   24db4:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   24dc4:	20657079 706c6548 206f7420 77656976     ype Help to view
   24dd4:	6c206120 20747369 7220666f 73696765      a list of regis
   24de4:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   24df4:	0000000a 00756d69 3a756d69 74655220     ....imu.imu: Ret
   24e04:	736e7275 76206120 65756c61 6f726620     urns a value fro
   24e14:	6874206d 4d492065 000a0d55 00007766     m the IMU...fw..
   24e24:	203a7766 6e776f44 64616f6c 66206120     fw: Download a f
   24e34:	20656c69 20646e61 66726570 206d726f     ile and perform 
   24e44:	46206e61 70752057 65746164 00000a0d     an FW update....
   24e54:	65736572 00000074 65736572 52203a74     reset...reset: R
   24e64:	74657365 68742073 65642065 65636976     esets the device
   24e74:	00000a0d 0064656c 2064656c 79656b5b     ....led.led [key
   24e84:	5d6d756e 5b5d525b 425b5d47 53203a5d     num][R][G][B]: S
   24e94:	20737465 20656874 65766967 454c206e     ets the given LE
   24ea4:	6f742044 65687420 76696720 52206e65     D to the given R
   24eb4:	422c472c 6c617620 2e736575 00000a0d     ,G,B values.....
   24ec4:	62746567 6f747475 0000006e 62746567     getbutton...getb
   24ed4:	6f747475 50203a6e 65636f72 73657373     utton: Processes
   24ee4:	646e6120 69727020 2073746e 20656874      and prints the 
   24ef4:	4f464946 74756220 206e6f74 66667562     FIFO button buff
   24f04:	66207265 206d6f72 20656874 73656573     er from the sees
   24f14:	0d2e7761 0000000a 64746567 61747369     aw......getdista
   24f24:	0065636e 64746567 61747369 3a65636e     nce.getdistance:
   24f34:	74655220 736e7275 65687420 73696420      Returns the dis
   24f44:	636e6174 72662065 74206d6f 55206568     tance from the U
   24f54:	30312d53 65532030 726f736e 000a0d2e     S-100 Sensor....
   24f64:	656d6167 00000000 656d6167 6553203a     game....game: Se
   24f74:	2073646e 6d6d7564 61672079 6420656d     nds dummy game d
   24f84:	0d617461 0000000a 00633269 3a633269     ata.....i2c.i2c:
   24f94:	61635320 4920736e 62204332 0a0d7375      Scans I2C bus..
   24fa4:	00000000 00736c63 3a736c63 656c4320     ....cls.cls: Cle
   24fb4:	20737261 20656874 6d726574 6c616e69     ars the terminal
   24fc4:	72637320 0d6e6565 0000000a 6c756f43      screen.....Coul
   24fd4:	6f6e2064 6c612074 61636f6c 73206574     d not allocate s
   24fe4:	70616d65 65726f68 00000a0d 00000a0d     emaphore........
   24ff4:	0000616f 325b6325 003e0d4b 00082008     oa..%c[2K.>.. ..
   25004:	325b6325 0000004a 64757453 73746e65     %c[2J...Students
   25014:	206f7420 6c6c6966 74756f20 00000021      to fill out!...
   25024:	31202030 20322020 20203320 35202034     0  1  2  3  4  5
   25034:	20362020 20203720 39202038 20612020       6  7  8  9  a 
   25044:	20206220 64202063 20652020 0a0d6620      b  c  d  e  f..
   25054:	00000000 78323025 0000203a 78323025     ....%02x: ..%02x
   25064:	00000020                                 ...

00025068 <xImuGetCommand>:
   25068:	00024df8 00024dfc 00002529 00000000     .M...M..)%......

00025078 <xOTAUCommand>:
   25078:	00024e20 00024e24 00002589 00000000      N..$N...%......

00025088 <xResetCommand>:
   25088:	00024e54 00024e5c 000025a9 00000000     TN..\N...%......

00025098 <xNeotrellisTurnLEDCommand>:
   25098:	00024e78 00024e7c 000025c9 00000004     xN..|N...%......

000250a8 <xNeotrellisProcessButtonCommand>:
   250a8:	00024ec4 00024ed0 000025f5 00000000     .N...N...%......

000250b8 <xDistanceSensorGetDistance>:
   250b8:	00024f1c 00024f28 0000260b 00000000     .O..(O...&......

000250c8 <xSendDummyGameData>:
   250c8:	00024f64 00024f6c 00002621 00000000     dO..lO..!&......

000250d8 <xI2cScan>:
   250d8:	00024f8c 00024f90 00002639 00000000     .O...O..9&......

000250e8 <xClearScreen>:
   250e8:	00024fa8 00024fac 00002541 00000000     .O...O..A%......
   250f8:	54204955 206b7361 72617453 21646574     UI Task Started!
   25108:	00000000 64616f4c 2e676e69 0000002e     ....Loading.....
   25118:	20636967 74746f62 4d20656c 00000061     gic bottle Ma...
   25128:	616e6966 6e695f6c 25203d74 000a0d64     final_int= %d...
   25138:	61746f54 33253a6c 00000064 72617473     Total:%3d...star
   25148:	000a0d74 0d646e65 0000000a 6d726f6e     t...end.....norm
   25158:	0a0d6c61 00000000 646e6573 616f6c20     al......send loa
   25168:	6b6f2064 00000a0d 646e6573 616f6c20     d ok....send loa
   25178:	61662064 0a0d6c69 00000000              d fail......

00025184 <main_mqtt_broker>:
   25184:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   25194:	0000006d 64333025 00000000 72617473     m...%03d....star
   251a4:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   251b4:	726f7473 20656761 20746f6e 64616572     storage not read
   251c4:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   251d4:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   251e4:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   251f4:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   25204:	203a6461 75716572 20747365 73207369     ad: request is s
   25214:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   25224:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   25234:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   25244:	726c6120 79646165 000a0d2e 72617473      already....star
   25254:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   25264:	20676e69 50545448 71657220 74736575     ing HTTP request
   25274:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   25284:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   25294:	7e2f7564 61676465 492f6372 702e546f     du/~edgarc/IoT.p
   252a4:	00006664 726f7473 69665f65 705f656c     df..store_file_p
   252b4:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   252c4:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   252d4:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   252e4:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   252f4:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   25304:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   25314:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   25324:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   25334:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   25344:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   25354:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   25364:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   25374:	656b6361 66203a74 20656c69 74697277     acket: file writ
   25384:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   25394:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   253a4:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   253b4:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   253c4:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   253d4:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   253e4:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   253f4:	64616f6c 73206465 65636375 75667373     loaded successfu
   25404:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   25414:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   25424:	63205054 6e65696c 6f732074 74656b63     TP client socket
   25434:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   25444:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   25454:	6b636162 6572203a 73657571 6f632074     back: request co
   25464:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   25474:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   25484:	6572203a 76696563 72206465 6f707365     : received respo
   25494:	2065736e 64207525 20617461 657a6973     nse %u data size
   254a4:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   254b4:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   254c4:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   254d4:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   254e4:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   254f4:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   25504:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   25514:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   25524:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   25534:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   25544:	5443454e 0a0d4445 00000000 36363636     NECTED......6666
   25554:	36363636 00000000 00007051 69666977     6666....Qp..wifi
   25564:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   25574:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   25584:	00000000 6f727245 6f632072 63656e6e     ....Error connec
   25594:	676e6974 206f7420 5454514d 6f724220     ting to MQTT Bro
   255a4:	2172656b 00000a0d 74696e69 6f74735f     ker!....init_sto
   255b4:	65676172 6c70203a 65736165 756c7020     rage: please plu
   255c4:	6e612067 2f445320 20434d4d 64726163     g an SD/MMC card
   255d4:	206e6920 746f6c73 0d2e2e2e 0000000a      in slot........
   255e4:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   255f4:	72614320 6e692064 6c617473 6166206c      Card install fa
   25604:	64656c69 000a0d2e 74696e69 6f74735f     iled....init_sto
   25614:	65676172 7274203a 6e752079 67756c70     rage: try unplug
   25624:	646e6120 2d657220 67756c70 65687420      and re-plug the
   25634:	72616320 0a0d2e64 00000000 74696e69      card.......init
   25644:	6f74735f 65676172 6f6d203a 69746e75     _storage: mounti
   25654:	5320676e 61632044 2e2e6472 000a0d2e     ng SD card......
   25664:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   25674:	72616320 6f6d2064 20746e75 6c696166      card mount fail
   25684:	20216465 73657228 29642520 00000a0d     ed! (res %d)....
   25694:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   256a4:	72616320 6f6d2064 20746e75 0d2e4b4f      card mount OK..
   256b4:	0000000a 666e6f63 72756769 74685f65     ....configure_ht
   256c4:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   256d4:	65696c63 6920746e 6974696e 7a696c61     client initializ
   256e4:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   256f4:	25207365 0a0d2964 00000000 25200a0d     es %d)........ %
   25704:	00732a2e 5f455345 5f363135 4947414d     .*s.ESE_516_MAGI
   25714:	4f425f43 454c5454 5345525f 4f545445     C_BOTTLE_RESETTO
   25724:	004c4154 65736572 00000074 5f455345     TAL.reset...ESE_
   25734:	5f363135 4947414d 4f425f43 454c5454     516_MAGIC_BOTTLE
   25744:	4c41435f 00000049 696c6163 00000000     _CALI...cali....
   25754:	4d490a0d 6f742055 20636970 65636572     ..IMU topic rece
   25764:	64657669 000a0d21 69440a0d 6e617473     ived!.....Distan
   25774:	74206563 6369706f 63657220 65766965     ce topic receive
   25784:	0a0d2164 00000000 203e3e20 00000000     d!...... >> ....
   25794:	732a2e25 00000000 5f455345 5f363135     %.*s....ESE_516_
   257a4:	4947414d 4f425f43 454c5454 44454c5f     MAGIC_BOTTLE_LED
   257b4:	00000000 736c6166 00000065 65757274     ....false...true
   257c4:	00000000 6f430a0d 63656e6e 676e6974     ......Connecting
   257d4:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   257e4:	6967614d 36313563 00000000 676e6570     Magic516....peng
   257f4:	006e6971 5454514d 72452020 20726f72     qin.MQTT  Error 
   25804:	4f4e202d 6f432054 63656e6e 20646574     - NOT Connected 
   25814:	62206f74 656b6f72 000a0d72 5454514d     to broker...MQTT
   25824:	6e6f4320 7463656e 74206465 7262206f      Connected to br
   25834:	72656b6f 00000a0d 6e6e6f43 20746365     oker....Connect 
   25844:	6c696166 206f7420 76726573 25287265     fail to server(%
   25854:	20212973 72746572 74692079 74756120     s)! retry it aut
   25864:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   25874:	5454514d 6e6f4320 7463656e 0a0d6465     MQTT Connected..
   25884:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   25894:	6c636564 20656e69 72756f79 63636120     decline your acc
   258a4:	21737365 72726520 6320726f 2065646f     ess! error code 
   258b4:	0a0d6425 00000000 5454514d 73696420     %d......MQTT dis
   258c4:	6e6e6f63 65746365 000a0d64 5454514d     connected...MQTT
   258d4:	696e6920 6c616974 74617a69 206e6f69      initialization 
   258e4:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   258f4:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   25904:	5454514d 67657220 65747369 61632072     MQTT register ca
   25914:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   25924:	726f7272 646f6320 73692065 64252820     rror code is (%d
   25934:	000a0d29 2264227b 74227b3a 22706d65     )...{"d":{"temp"
   25944:	7d64253a 0000007d 4941465b 72205d4c     :%d}}...[FAIL] r
   25954:	25207365 000a0d64 67616c46 78742e41     es %d...FlagA.tx
   25964:	64612074 21646564 00000a0d 6c463a30     t added!....0:Fl
   25974:	2e416761 00747874 6e6e6f43 65746365     agA.txt.Connecte
   25984:	6f742064 54514d20 72422054 72656b6f     d to MQTT Broker
   25994:	000a0d21 6d69227b 3a227875 202c6425     !...{"imux":%d, 
   259a4:	756d6922 203a2279 202c6425 756d6922     "imuy": %d, "imu
   259b4:	203a227a 202c6425 5f736922 61657473     z": %d, "is_stea
   259c4:	3a227964 7d642520 00000000 5f455345     dy": %d}....ESE_
   259d4:	5f363135 4947414d 4f425f43 454c5454     516_MAGIC_BOTTLE
   259e4:	554d495f 00000000 6577227b 74686769     _IMU....{"weight
   259f4:	64253a22 6964222c 3a226666 222c6425     ":%d,"diff":%d,"
   25a04:	61746f74 253a226c 00007d64 5f455345     total":%d}..ESE_
   25a14:	5f363135 4947414d 4f425f43 454c5454     516_MAGIC_BOTTLE
   25a24:	4945575f 00544847 4f525245 6e492052     _WEIGHT.ERROR In
   25a34:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   25a44:	61746144 65757120 21736575 00000a0d     Data queues!....
   25a54:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   25a64:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   25a74:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   25a84:	6c6c6163 72726520 2021726f 73657228     call error! (res
   25a94:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   25aa4:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   25ab4:	20504120 2e2e7325 000a0d2e 545f3150      AP %s......P1_T
   25ac4:	45504d45 55544152 455f4552 31354553     EMPERATURE_ESE51
   25ad4:	30545f36 00000000 5454514d 6e657320     6_T0....MQTT sen
   25ae4:	73252064 00000a0d 00003fcc 00003fd8     d %s.....?...?..
   25af4:	00003fea 00004040 00004060 706c6568     .?..@@..`@..help
   25b04:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   25b14:	20737473 206c6c61 20656874 69676572     sts all the regi
   25b24:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   25b34:	000a0d0a 6f636e49 63657272 6f632074     ....Incorrect co
   25b44:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   25b54:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   25b64:	6f742022 65697620 20612077 7473696c     " to view a list
   25b74:	20666f20 69617661 6c62616c 6f632065      of available co
   25b84:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   25b94:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   25ba4:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   25bb4:	6f742027 65697620 20612077 7473696c     ' to view a list
   25bc4:	20666f20 69617661 6c62616c 6f632065      of available co
   25bd4:	6e616d6d 0d2e7364 000a0d0a              mmands......

00025be0 <xHelpCommand>:
   25be0:	00025b00 00025b08 00005ae1 00000000     .[...[...Z......
   25bf0:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   25c00:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   25c10:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   25c20:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   25c30:	78656e55 74636570 61206465 6d756772     Unexpected argum
   25c40:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   25c50:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   25c60:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   25c70:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   25c80:	2073656c 6e69202d 61657263 54206573     les - increase T
   25c90:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   25ca0:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   25cb0:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   25cc0:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   25cd0:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   25ce0:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   25cf0:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   25d00:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   25d10:	6e616820 73656c64 69202d20 6572636e      handles - incre
   25d20:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   25d30:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   25d40:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   25d50:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   25d60:	6e616820 73656c64 69202d20 6572636e      handles - incre
   25d70:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   25d80:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   25d90:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   25da0:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   25db0:	73656c64 69202d20 6572636e 20657361     dles - increase 
   25dc0:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   25dd0:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   25de0:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   25df0:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   25e00:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   25e10:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   25e20:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   25e30:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   25e40:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   25e50:	202d2073 72636e69 65736165 43525420     s - increase TRC
   25e60:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   25e70:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   25e80:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   25e90:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   25ea0:	646e6168 2073656c 6e69202d 61657263     handles - increa
   25eb0:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   25ec0:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   25ed0:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   25ee0:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   25ef0:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   25f00:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   25f10:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   25f20:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   25f30:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   25f40:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   25f50:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   25f60:	63746365 7373616c 00000021 00006206     ectclass!....b..
   25f70:	000061fe 00006202 000061f6 000061fa     .a...b...a...a..
   25f80:	0000620a 0000620e 00006212 00006216     .b...b...b...b..
   25f90:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   25fa0:	64726f63 6e207265 6920746f 6974696e     corder not initi
   25fb0:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   25fc0:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   25fd0:	00216461 61747328 70757472 00000029     ad!.(startup)...
   25fe0:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   25ff0:	64726f63 6e207265 6920746f 6974696e     corder not initi
   26000:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   26010:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   26020:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   26030:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   26040:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   26050:	61762064 2065756c 20726f66 646e6168     d value for hand
   26060:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   26070:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   26080:	7265706f 73656974 616e203a 3d20656d     operties: name =
   26090:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   260a0:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   260b0:	64726f63 62207265 21797375 65655320     corder busy! See
   260c0:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   260d0:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   260e0:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   260f0:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   26100:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   26110:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   26120:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   26130:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   26140:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   26150:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   26160:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   26170:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   26180:	6f636572 72656472 73756220 53202179     recorder busy! S
   26190:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   261a0:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   261b0:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   261c0:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   261d0:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   261e0:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   261f0:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   26200:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   26210:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   26220:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   26230:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   26240:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   26250:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   26260:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   26270:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   26280:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   26290:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   262a0:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   262b0:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   262c0:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   262d0:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   262e0:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   262f0:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   26300:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   26310:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   26320:	72657473 69727453 203a676e 6562616c     sterString: labe
   26330:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   26340:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26350:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   26360:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   26370:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   26380:	72656472 73756220 202d2079 68676968     rder busy - high
   26390:	69727020 7469726f 53492079 73752052      priority ISR us
   263a0:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   263b0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   263c0:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   263d0:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   263e0:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   263f0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26400:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   26410:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   26420:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   26430:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   26440:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   26450:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   26460:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   26470:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26480:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   26490:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   264a0:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   264b0:	00000072 6f636552 72656472 73756220     r...Recorder bus
   264c0:	202d2079 68676968 69727020 7469726f     y - high priorit
   264d0:	53492079 73752052 20676e69 63737973     y ISR using sysc
   264e0:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   264f0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26500:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   26510:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   26520:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   26530:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26540:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   26550:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   26560:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   26570:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   26580:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26590:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   265a0:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   265b0:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   265c0:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   265d0:	72656472 73756220 202d2079 68676968     rder busy - high
   265e0:	69727020 7469726f 53492079 73752052      priority ISR us
   265f0:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   26600:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   26610:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   26620:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   26630:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   26640:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   26650:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   26660:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   26670:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   26680:	76206469 65756c61 726f6620 74766520     id value for evt
   26690:	65646f63 00000000 6f636552 72656472     code....Recorder
   266a0:	73756220 202d2079 68676968 69727020      busy - high pri
   266b0:	7469726f 53492079 73752052 20676e69     ority ISR using 
   266c0:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   266d0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   266e0:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   266f0:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   26700:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   26710:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   26720:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   26730:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   26740:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   26750:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   26760:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   26770:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26780:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   26790:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   267a0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   267b0:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   267c0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   267d0:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   267e0:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   267f0:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   26800:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   26810:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   26820:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   26830:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   26840:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   26850:	6c617620 66206575 6820726f 6c646e61      value for handl
   26860:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   26870:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   26880:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   26890:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   268a0:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   268b0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   268c0:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   268d0:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   268e0:	76206469 65756c61 726f6620 00646920     id value for id.
   268f0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   26900:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   26910:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   26920:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   26930:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   26940:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26950:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   26960:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   26970:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   26980:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26990:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   269a0:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   269b0:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   269c0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   269d0:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   269e0:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   269f0:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   26a00:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26a10:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   26a20:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   26a30:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   26a40:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   26a50:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   26a60:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   26a70:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   26a80:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   26a90:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   26aa0:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   26ab0:	76206469 65756c61 726f6620 6e616820     id value for han
   26ac0:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   26ad0:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   26ae0:	69206f74 7865646e 74756f20 65646973     to index outside
   26af0:	65766520 6220746e 65666675 00002172      event buffer!..
   26b00:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   26b10:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   26b20:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   26b30:	6a626f20 63746365 7373616c 00000000      objectclass....
   26b40:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   26b50:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   26b60:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   26b70:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   26b80:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   26b90:	2070756b 68746977 766e6920 64696c61     kup with invalid
   26ba0:	6a626f20 20746365 646e6168 6f20656c      object handle o
   26bb0:	626f2072 7463656a 616c6320 00217373     r object class!.
   26bc0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   26bd0:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   26be0:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   26bf0:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   26c00:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   26c10:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   26c20:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   26c30:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   26c40:	626f2072 7463656a 73616c63 00000073     r objectclass...
   26c50:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   26c60:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   26c70:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   26c80:	756c6176 6f662065 61682072 656c646e     value for handle
   26c90:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   26ca0:	20656572 65726f6d 6e616820 73656c64     ree more handles
   26cb0:	61687420 6c61206e 61636f6c 21646574      than allocated!
   26cc0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   26cd0:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   26ce0:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   26cf0:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   26d00:	656a626f 63207463 7373616c 206e6920     object class in 
   26d10:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   26d20:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   26d30:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   26d40:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   26d50:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   26d60:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   26d70:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   26d80:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   26d90:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   26da0:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   26db0:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   26dc0:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   26dd0:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   26de0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   26df0:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   26e00:	696c6176 61762064 2065756c 20726f66     valid value for 
   26e10:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   26e20:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   26e30:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   26e40:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   26e50:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   26e60:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   26e70:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   26e80:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   26e90:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   26ea0:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   26eb0:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   26ec0:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   26ed0:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   26ee0:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   26ef0:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   26f00:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   26f10:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   26f20:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   26f30:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   26f40:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   26f50:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   26f60:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   26f70:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   26f80:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   26f90:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   26fa0:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   26fb0:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   26fc0:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   26fd0:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   26fe0:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   26ff0:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   27000:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   27010:	00000000 20726d54 00637653 0000b2a8     ....Tmr Svc.....
   27020:	0000b2a8 0000b2a8 0000b336 0000b300     ........6.......
   27030:	0000b32a 0000b2a8 0000b2a8 0000b336     *...........6...
   27040:	0000b300                                ....

00027044 <sd_mmc_trans_units>:
   27044:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00027060 <sd_trans_multipliers>:
   27060:	00000000 0000000a 0000000c 0000000d     ................
   27070:	0000000f 00000014 00000019 0000001e     ................
   27080:	00000023 00000028 0000002d 00000032     #...(...-...2...
   27090:	00000037 0000003c 00000046 00000050     7...<...F...P...

000270a0 <mmc_trans_multipliers>:
   270a0:	00000000 0000000a 0000000c 0000000d     ................
   270b0:	0000000f 00000014 0000001a 0000001e     ................
   270c0:	00000023 00000028 0000002d 00000034     #...(...-...4...
   270d0:	00000037 0000003c 00000046 00000050     7...<...F...P...
   270e0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   270f0:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   27100:	6320746c 000a646d 0000000d              lt cmd......

0002710c <__FUNCTION__.17099>:
   2710c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   2711c:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   2712c:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   2713c:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   2714c:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   2715c:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   2716c:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   2717c:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   2718c:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   2719c:	66696828 64612029 73657264 75622073     (hif) address bu
   271ac:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   271bc:	70757272 20646574 6b636170 53207465     rrupted packet S
   271cc:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   271dc:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   271ec:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   271fc:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   2720c:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   2721c:	63207465 626c6c61 206b6361 6e207369     et callback is n
   2722c:	7220746f 73696765 65726574 00000a64     ot registered...
   2723c:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   2724c:	20746f6e 69676572 72657473 000a6465     not registered..
   2725c:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   2726c:	6e207369 7220746f 73696765 65726574     is not registere
   2727c:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   2728c:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   2729c:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   272ac:	696c6176 72672064 2070756f 000a4449     valid group ID..
   272bc:	66696828 6f682029 61207473 64207070     (hif) host app d
   272cc:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   272dc:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   272ec:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   272fc:	66696828 61462029 2065736c 65746e69     (hif) False inte
   2730c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   2731c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   2732c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   2733c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   2734c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   2735c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   2736c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   2737c:	696c6176 72612064 656d7567 000a746e     valid argument..
   2738c:	20505041 75716552 65747365 69532064     APP Requested Si
   2739c:	6920657a 616c2073 72656772 61687420     ze is larger tha
   273ac:	6874206e 65722065 65766963 75622064     n the recived bu
   273bc:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   273cc:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   273dc:	65747365 64412064 73657264 65622073     ested Address be
   273ec:	646e6f79 65687420 63657220 64657669     yond the recived
   273fc:	66756220 20726566 72646461 20737365      buffer address 
   2740c:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   2741c:	6425203f 0000000a 0000f4ac 0000f47c     ? %d........|...
   2742c:	0000f474 0000f48c 0000f484 0000f4a4     t...............
   2743c:	0000f494 0000f49c                       ........

00027444 <__FUNCTION__.17967>:
   27444:	5f666968 646e6573 00000000              hif_send....

00027450 <__FUNCTION__.17977>:
   27450:	5f666968 00727369                       hif_isr.

00027458 <__FUNCTION__.17986>:
   27458:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00027468 <__FUNCTION__.17998>:
   27468:	5f666968 65636572 00657669              hif_receive.

00027474 <__FUNCTION__.18014>:
   27474:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   27484:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   27494:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   274a4:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   274b4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   274c4:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   274d4:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   274e4:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   274f4:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   27504:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   27514:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   27524:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   27534:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   27544:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   27554:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   27564:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   27574:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   27584:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   27594:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   275a4:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   275b4:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   275c4:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   275d4:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   275e4:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   275f4:	73747365 72657020 61637320 6c73206e     ests per scan sl
   27604:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   27614:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   27624:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   27634:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   27644:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   27654:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   27664:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   27674:	6e694d20 69726420 20726576 20726576      Min driver ver 
   27684:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   27694:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   276a4:	0000000a 353a3132 32343a30 00000000     ....21:50:42....
   276b4:	2079614d 32203420 00333230 76697244     May  4 2023.Driv
   276c4:	62207265 746c6975 20746120 25097325     er built at %s.%
   276d4:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   276e4:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   276f4:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   27704:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   27714:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   27724:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   27734:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   27744:	2079656b 65646e69 64252078 0000000a     key index %d....
   27754:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   27764:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   27774:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   27784:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   27794:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   277a4:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   277b4:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   277c4:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   277d4:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   277e4:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   277f4:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   27804:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   27814:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   27824:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   27834:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   27844:	66754220 0a726566 00000000               Buffer.....

00027850 <__FUNCTION__.17949>:
   27850:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0002785c <__FUNCTION__.17978>:
   2785c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0002786c <__FUNCTION__.18009>:
   2786c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   2787c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   2788c:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   2789c:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   278ac:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   278bc:	2070756b 20656874 70696863 0000000a     kup the chip....
   278cc:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   278dc:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   278ec:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   278fc:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0002790c <__FUNCTION__.17806>:
   2790c:	70696863 6b61775f 00000065              chip_wake...

00027918 <__FUNCTION__.17855>:
   27918:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   27928:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   27938:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   27948:	6e69206c 62207469 000a7375 0000000d     l init bus......
   27958:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   27968:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   27978:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   27988:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   27998:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   279a8:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   279b8:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   279c8:	69642068 6c626173 61662065 000a6c69     h disable fail..
   279d8:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   279e8:	696e6920 75622074 00000a73               init bus...

000279f4 <__FUNCTION__.17853>:
   279f4:	645f6d6e 695f7672 0074696e              nm_drv_init.

00027a00 <__FUNCTION__.17860>:
   27a00:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00027a10 <crc7_syndrome_table>:
   27a10:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   27a20:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   27a30:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   27a40:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   27a50:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   27a60:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   27a70:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   27a80:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   27a90:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   27aa0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   27ab0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   27ac0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   27ad0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   27ae0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   27af0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   27b00:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   27b10:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   27b20:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   27b30:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   27b40:	73756220 72726520 2e2e726f 00000a2e      bus error......
   27b50:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   27b60:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   27b70:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   27b80:	656c6961 61642064 72206174 6f707365     ailed data respo
   27b90:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   27ba0:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   27bb0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   27bc0:	72206573 2c646165 73756220 72726520     se read, bus err
   27bd0:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   27be0:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   27bf0:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   27c00:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   27c10:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   27c20:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   27c30:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   27c40:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   27c50:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   27c60:	70736572 65736e6f 61747320 28206574     response state (
   27c70:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   27c80:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   27c90:	20646165 70736572 65736e6f 30252820     ead response (%0
   27ca0:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   27cb0:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   27cc0:	6877206e 72206e65 69646165 6420676e     n when reading d
   27cd0:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   27ce0:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   27cf0:	6877206e 72206e65 69646165 6320676e     n when reading c
   27d00:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   27d10:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   27d20:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   27d30:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   27d40:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   27d50:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   27d60:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   27d70:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   27d80:	656c6961 61642064 72206174 6f707365     ailed data respo
   27d90:	2065736e 64616572 7562202c 72652073     nse read, bus er
   27da0:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   27db0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   27dc0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   27dd0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   27de0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   27df0:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   27e00:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   27e10:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   27e20:	61642064 62206174 6b636f6c 69727720     d data block wri
   27e30:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   27e40:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   27e50:	656c6961 61642064 62206174 6b636f6c     ailed data block
   27e60:	63726320 69727720 202c6574 20737562      crc write, bus 
   27e70:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   27e80:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   27e90:	77202c64 65746972 67657220 30252820     d, write reg (%0
   27ea0:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   27eb0:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   27ec0:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   27ed0:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   27ee0:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   27ef0:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   27f00:	656c6961 6c622064 206b636f 61746164     ailed block data
   27f10:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   27f20:	6e612074 65722064 20797274 25206425     t and retry %d %
   27f30:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   27f40:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   27f50:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   27f60:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   27f70:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   27f80:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   27f90:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   27fa0:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   27fb0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   27fc0:	6e726574 72206c61 20646165 746f7270     ternal read prot
   27fd0:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   27fe0:	6572202c 69727974 7720676e 20687469     , retyring with 
   27ff0:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   28000:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   28010:	6e726574 72206c61 20646165 746f7270     ternal read prot
   28020:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   28030:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   28040:	6e726574 77206c61 65746972 6f727020     ternal write pro
   28050:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   28060:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   28070:	20646d63 64616572 69686320 64692070     cmd read chip id
   28080:	0a2e2e2e 00000000 000110d4 000110d4     ................
   28090:	00011164 00011028 0001106e 00011090     d...(...n.......
   280a0:	00011116 00011116 000111d0 00010ffc     ................
   280b0:	0001122a 0001122a 0001122a 0001122a     *...*...*...*...
   280c0:	000110b2 00011634 00011634 000116bc     ....4...4.......
   280d0:	00011598 000115da 000115f8 00011672     ............r...
   280e0:	00011672 0001171e 00011570 0001176e     r.......p...n...
   280f0:	0001176e 0001176e 0001176e 00011616     n...n...n.......

00028100 <__FUNCTION__.17128>:
   28100:	5f697073 00646d63                       spi_cmd.

00028108 <__FUNCTION__.17135>:
   28108:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00028118 <__FUNCTION__.17144>:
   28118:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00028124 <__FUNCTION__.17177>:
   28124:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   28134:	00000000                                ....

00028138 <__FUNCTION__.17223>:
   28138:	5f697073 61746164 6972775f 00006574     spi_data_write..

00028148 <__FUNCTION__.17235>:
   28148:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00028158 <__FUNCTION__.17246>:
   28158:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00028168 <__FUNCTION__.17258>:
   28168:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00028178 <__FUNCTION__.17269>:
   28178:	735f6d6e 725f6970 00646165              nm_spi_read.

00028184 <__FUNCTION__.17290>:
   28184:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   28194:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   281a4:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   281b4:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   281c4:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   281d4:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   281e4:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   281f4:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   28204:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   28214:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   28224:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   28234:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   28244:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   28254:	22302074 00000000                       t 0"....

0002825c <lun_desc>:
   2825c:	0000cccd 0000cd25 0000cd71 0000cdbd     ....%...q.......
   2826c:	0000cded 0000ce71 0000cf01 00028244     ....q.......D...
   2827c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   2828c:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   2829c:	00017052 000170cc 000170cc 00017070     Rp...p...p..pp..
   282ac:	0001706a 00017076 00017058 0001707c     jp..vp..Xp..|p..
   282bc:	000170b2 000172b4 00017304 00017304     .p...r...s...s..
   282cc:	00017300 000172a6 000172c6 00017296     .s...r...r...r..
   282dc:	000172d8 000172ea 00017352 00017380     .r...r..Rs...s..
   282ec:	00017380 0001737c 0001734c 00017358     .s..|s..Ls..Xs..
   282fc:	00017346 0001735e 00017364              Fs..^s..ds..

00028308 <tcc_modules>:
   28308:	42002000 42002400 42002800              . .B.$.B.(.B

00028314 <_tcc_gclk_ids>:
   28314:	001b1a1a                                ....

00028318 <_tcc_apbcmasks>:
   28318:	00000100 00000200 00000400              ............

00028324 <_tcc_maxs>:
   28324:	00ffffff 00ffffff 0000ffff              ............

00028330 <_tcc_cc_nums>:
   28330:	00020204                                ....

00028334 <_tcc_ow_nums>:
   28334:	00020408                                ....

00028338 <_tcc_intflag>:
   28338:	00000001 00000002 00000004 00000008     ................
   28348:	00001000 00002000 00004000 00008000     ..... ...@......
   28358:	00010000 00020000 00040000 00080000     ................

00028368 <LfnOfs>:
   28368:	07050301 12100e09 1c181614 0000001e     ................
   28378:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   28388:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   28398:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   283a8:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   283b8:	20205441 00202020                       AT     .

000283c0 <excvt.4558>:
   283c0:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   283d0:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   283e0:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   283f0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   28400:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   28410:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   28420:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   28430:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00028440 <Tbl>:
   28440:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   28450:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   28460:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   28470:	00d600ff 00f800dc 00d800a3 019200d7     ................
   28480:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   28490:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   284a0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   284b0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   284c0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   284d0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   284e0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   284f0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   28500:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   28510:	00da00de 00d900db 00dd00fd 00b400af     ................
   28520:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   28530:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00028540 <tbl_lower.4308>:
   28540:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   28550:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   28560:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   28570:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   28580:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   28590:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   285a0:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   285b0:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   285c0:	01050103 01090107 010d010b 0111010f     ................
   285d0:	01150113 01190117 011d011b 0121011f     ..............!.
   285e0:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   285f0:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   28600:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   28610:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   28620:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   28630:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   28640:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   28650:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   28660:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   28670:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   28680:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   28690:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   286a0:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   286b0:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   286c0:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   286d0:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   286e0:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   286f0:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   28700:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   28710:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00028720 <tbl_upper.4309>:
   28720:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   28730:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   28740:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   28750:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   28760:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   28770:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   28780:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   28790:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   287a0:	01040102 01080106 010c010a 0110010e     ................
   287b0:	01140112 01180116 011c011a 0120011e     .............. .
   287c0:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   287d0:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   287e0:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   287f0:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   28800:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   28810:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   28820:	03940393 03960395 03980397 039a0399     ................
   28830:	039c039b 039e039d 03a0039f 03a303a1     ................
   28840:	03a503a4 03a703a6 03a903a8 041003aa     ................
   28850:	04120411 04140413 04160415 04180417     ................
   28860:	041a0419 041c041b 041e041d 0420041f     .............. .
   28870:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   28880:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   28890:	04030402 04050404 04070406 04090408     ................
   288a0:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   288b0:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   288c0:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   288d0:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   288e0:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   288f0:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   28900:	0001c6be 0001c6be 0001c6be 0001c54c     ............L...
   28910:	0001c6be 0001c636 0001c6be 0001c6be     ....6...........
   28920:	0001c6be 0001c6be 0001c6be 0001c6be     ................
   28930:	0001c6be 0001c6b0 4354514d 00000000     ........MQTC....
   28940:	00000004 00000000 00000000 00000000     ................
   28950:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   28990:	4354514d 00000000 00000004 00000000     MQTC............
	...
   289a8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   289e8:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   289f8:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   28a08:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   28a18:	20544547 00000000 54534f50 00000020     GET ....POST ...
   28a28:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   28a38:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   28a48:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   28a58:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   28a68:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   28a78:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   28a88:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   28a98:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   28aa8:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   28ab8:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   28ac8:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   28ad8:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   28ae8:	676e654c 203a6874 00000000 33323130     Length: ....0123
   28af8:	37363534 62613938 66656463 6e617254     456789abcdefTran
   28b08:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   28b18:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   28b28:	50545448 0000002f 00000d31 0001e7b2     HTTP/...1.......
   28b38:	0001e7ac 0001e7a6 0001e7a0 0001e7b8     ................
   28b48:	0001e79a 0001e7b8 0001e794 0001e78e     ................
   28b58:	0001e7b8 0001e788 0001e788 0001e782     ................
   28b68:	0001e77c 0001e776 42002000 42002400     |...v.... .B.$.B
   28b78:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   28b88:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   28b98:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   28ba8:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   28bb8:	6f727245 6e692072 61697469 697a696c     Error initializi
   28bc8:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   28bd8:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   28be8:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   28bf8:	70616548 66656220 2065726f 72617473     Heap before star
   28c08:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
   28c18:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
   28c28:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   28c38:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   28c48:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   28c58:	74666120 73207265 74726174 20676e69      after starting 
   28c68:	3a494c43 0d642520 0000000a 49464957     CLI: %d.....WIFI
   28c78:	5341545f 0000004b 3a525245 46495720     _TASK...ERR: WIF
   28c88:	61742049 63206b73 646c756f 746f6e20     I task could not
   28c98:	20656220 74696e69 696c6169 2164657a      be initialized!
   28ca8:	00000a0d 70616548 74666120 73207265     ....Heap after s
   28cb8:	74726174 20676e69 49464957 6425203a     tarting WIFI: %d
   28cc8:	00000a0d 54204955 006b7361 3a525245     ....UI Task.ERR:
   28cd8:	20495520 6b736174 756f6320 6e20646c      UI task could n
   28ce8:	6220746f 6e692065 61697469 657a696c     ot be initialize
   28cf8:	0a0d2164 00000000 70616548 74666120     d!......Heap aft
   28d08:	73207265 74726174 20676e69 54204955     er starting UI T
   28d18:	3a6b7361 0d642520 0000000a 6f727245     ask: %d.....Erro
   28d28:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
   28d38:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
   28d48:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
   28d58:	61747320 6f206b63 66726576 20776f6c      stack overflow 
   28d68:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
   28d78:	00020c60 00020c30 00020c42 00020b84     `...0...B.......
   28d88:	00020c42 00020c26 00020c42 00020b84     B...&...B.......
   28d98:	00020c30 00020c30 00020c26 00020b84     0...0...&.......
   28da8:	00020b8c 00020b8c 00020b8c 00020c48     ............H...
   28db8:	00020c30 00020c30 00020c04 00020ce8     0...0...........
   28dc8:	00020c04 00020c26 00020c04 00020ce8     ....&...........
   28dd8:	00020c30 00020c30 00020c26 00020ce8     0...0...&.......
   28de8:	00020b8c 00020b8c 00020b8c 00020cf2     ................
   28df8:	00020e90 00020de0 00020de0 00020dde     ................
   28e08:	00020e82 00020e82 00020e78 00020dde     ........x.......
   28e18:	00020e82 00020e78 00020e82 00020dde     ....x...........
   28e28:	00020e88 00020e88 00020e88 00020f18     ................
   28e38:	00021bd4 00021bb6 00021b70 00021a8e     ........p.......
   28e48:	00021b70 00021ba8 00021b70 00021a8e     p.......p.......
   28e58:	00021bb6 00021bb6 00021ba8 00021a8e     ................
   28e68:	00021a86 00021a86 00021a86 00021dec     ................
   28e78:	00022234 000220f4 000220f4 000220f0     4"... ... ... ..
   28e88:	0002220c 0002220c 000221fe 000220f0     ."..."...!... ..
   28e98:	0002220c 000221fe 0002220c 000220f0     ."...!..."... ..
   28ea8:	00022214 00022214 00022214 00022418     ."..."..."...$..

00028eb8 <_global_impure_ptr>:
   28eb8:	20000134                                4.. 

00028ebc <__sf_fake_stderr>:
	...

00028edc <__sf_fake_stdin>:
	...

00028efc <__sf_fake_stdout>:
	...
   28f1c:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   28f2c:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   28f3c:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   28f4c:	37363534 62613938 66656463 20200000              456789abcdef.

00028f59 <_ctype_>:
   28f59:	20202000 20202020 28282020 20282828     .         ((((( 
   28f69:	20202020 20202020 20202020 20202020                     
   28f79:	10108820 10101010 10101010 10101010      ...............
   28f89:	04040410 04040404 10040404 10101010     ................
   28f99:	41411010 41414141 01010101 01010101     ..AAAAAA........
   28fa9:	01010101 01010101 01010101 10101010     ................
   28fb9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   28fc9:	02020202 02020202 02020202 10101010     ................
   28fd9:	00000020 00000000 00000000 00000000      ...............
	...

0002905c <_init>:
   2905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2905e:	46c0      	nop			; (mov r8, r8)
   29060:	bcf8      	pop	{r3, r4, r5, r6, r7}
   29062:	bc08      	pop	{r3}
   29064:	469e      	mov	lr, r3
   29066:	4770      	bx	lr

00029068 <__init_array_start>:
   29068:	000000dd 	.word	0x000000dd

0002906c <_fini>:
   2906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2906e:	46c0      	nop			; (mov r8, r8)
   29070:	bcf8      	pop	{r3, r4, r5, r6, r7}
   29072:	bc08      	pop	{r3}
   29074:	469e      	mov	lr, r3
   29076:	4770      	bx	lr

00029078 <__fini_array_start>:
   29078:	000000b5 	.word	0x000000b5
