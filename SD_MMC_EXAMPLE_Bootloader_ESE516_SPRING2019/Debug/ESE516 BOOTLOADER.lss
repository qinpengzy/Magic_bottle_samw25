
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cd64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000cd64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c00  20000094  0000cdf8  00020094  2**2
                  ALLOC
  3 .stack        00002004  20000c94  0000d9f8  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d837  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006279  00000000  00000000  0006d94c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005b77  00000000  00000000  00073bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010b8  00000000  00000000  0007973c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e88  00000000  00000000  0007a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000218fb  00000000  00000000  0007b67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019b60  00000000  00000000  0009cf77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093d6c  00000000  00000000  000b6ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003f00  00000000  00000000  0014a844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 2c 00 20 01 6f 00 00 f9 6f 00 00 f9 6f 00 00     .,. .o...o...o..
	...
      2c:	f9 6f 00 00 00 00 00 00 00 00 00 00 f9 6f 00 00     .o...........o..
      3c:	e5 01 00 00 f9 6f 00 00 f9 6f 00 00 f9 6f 00 00     .....o...o...o..
      4c:	f9 6f 00 00 f9 6f 00 00 f9 6f 00 00 f9 6f 00 00     .o...o...o...o..
      5c:	f9 6f 00 00 f9 6f 00 00 8d 41 00 00 a5 41 00 00     .o...o...A...A..
      6c:	bd 41 00 00 d5 41 00 00 ed 41 00 00 05 42 00 00     .A...A...A...B..
      7c:	f9 6f 00 00 f9 6f 00 00 f9 6f 00 00 f9 6f 00 00     .o...o...o...o..
      8c:	f9 6f 00 00 f9 6f 00 00 00 00 00 00 00 00 00 00     .o...o..........
      9c:	f9 6f 00 00 f9 6f 00 00 f9 6f 00 00 f9 6f 00 00     .o...o...o...o..
      ac:	f9 6f 00 00 00 00 00 00                             .o......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	0000cd64 	.word	0x0000cd64

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
     108:	0000cd64 	.word	0x0000cd64
     10c:	0000cd64 	.word	0x0000cd64
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00006ab5 	.word	0x00006ab5
     190:	20000000 	.word	0x20000000
     194:	0000aef9 	.word	0x0000aef9
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000b0 	.word	0x200000b0

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000b0 	.word	0x200000b0

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <system_board_init+0x44>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <system_board_init+0x48>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <system_board_init+0x4c>)
     31c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     324:	1d3b      	adds	r3, r7, #4
     326:	2201      	movs	r2, #1
     328:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     32a:	1d3b      	adds	r3, r7, #4
     32c:	0019      	movs	r1, r3
     32e:	2037      	movs	r0, #55	; 0x37
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <system_board_init+0x48>)
     332:	4798      	blx	r3
}
     334:	46c0      	nop			; (mov r8, r8)
     336:	46bd      	mov	sp, r7
     338:	b002      	add	sp, #8
     33a:	bd80      	pop	{r7, pc}
     33c:	00000281 	.word	0x00000281
     340:	000035bd 	.word	0x000035bd
     344:	000002a5 	.word	0x000002a5

00000348 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     348:	b580      	push	{r7, lr}
     34a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     34c:	4b04      	ldr	r3, [pc, #16]	; (360 <system_interrupt_enable_global+0x18>)
     34e:	2201      	movs	r2, #1
     350:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     352:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     356:	b662      	cpsie	i
}
     358:	46c0      	nop			; (mov r8, r8)
     35a:	46bd      	mov	sp, r7
     35c:	bd80      	pop	{r7, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	20000009 	.word	0x20000009

00000364 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     364:	b580      	push	{r7, lr}
     366:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     368:	b672      	cpsid	i
     36a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     36e:	4b03      	ldr	r3, [pc, #12]	; (37c <system_interrupt_disable_global+0x18>)
     370:	2200      	movs	r2, #0
     372:	701a      	strb	r2, [r3, #0]
}
     374:	46c0      	nop			; (mov r8, r8)
     376:	46bd      	mov	sp, r7
     378:	bd80      	pop	{r7, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	20000009 	.word	0x20000009

00000380 <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     380:	b580      	push	{r7, lr}
     382:	b084      	sub	sp, #16
     384:	af00      	add	r7, sp, #0
     386:	60f8      	str	r0, [r7, #12]
     388:	60b9      	str	r1, [r7, #8]
     38a:	607a      	str	r2, [r7, #4]
	if (addr & 0x00000003) {
     38c:	68fb      	ldr	r3, [r7, #12]
     38e:	2203      	movs	r2, #3
     390:	4013      	ands	r3, r2
     392:	d001      	beq.n	398 <dsu_crc32_cal+0x18>
		return STATUS_ERR_BAD_ADDRESS;
     394:	2318      	movs	r3, #24
     396:	e040      	b.n	41a <dsu_crc32_cal+0x9a>
	}

	system_interrupt_disable_global();
     398:	4b22      	ldr	r3, [pc, #136]	; (424 <dsu_crc32_cal+0xa4>)
     39a:	4798      	blx	r3
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     39c:	2322      	movs	r3, #34	; 0x22
     39e:	425b      	negs	r3, r3
     3a0:	0019      	movs	r1, r3
     3a2:	2021      	movs	r0, #33	; 0x21
     3a4:	4b20      	ldr	r3, [pc, #128]	; (428 <dsu_crc32_cal+0xa8>)
     3a6:	4798      	blx	r3

	DSU->DATA.reg = *pcrc32;
     3a8:	4a20      	ldr	r2, [pc, #128]	; (42c <dsu_crc32_cal+0xac>)
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	60d3      	str	r3, [r2, #12]
	DSU->ADDR.reg = addr;
     3b0:	4b1e      	ldr	r3, [pc, #120]	; (42c <dsu_crc32_cal+0xac>)
     3b2:	68fa      	ldr	r2, [r7, #12]
     3b4:	605a      	str	r2, [r3, #4]
	DSU->LENGTH.reg = len;
     3b6:	4b1d      	ldr	r3, [pc, #116]	; (42c <dsu_crc32_cal+0xac>)
     3b8:	68ba      	ldr	r2, [r7, #8]
     3ba:	609a      	str	r2, [r3, #8]

	DSU->CTRL.bit.CRC = 1;
     3bc:	4a1b      	ldr	r2, [pc, #108]	; (42c <dsu_crc32_cal+0xac>)
     3be:	7813      	ldrb	r3, [r2, #0]
     3c0:	2104      	movs	r1, #4
     3c2:	430b      	orrs	r3, r1
     3c4:	7013      	strb	r3, [r2, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	4b18      	ldr	r3, [pc, #96]	; (42c <dsu_crc32_cal+0xac>)
     3ca:	785b      	ldrb	r3, [r3, #1]
     3cc:	b2db      	uxtb	r3, r3
     3ce:	001a      	movs	r2, r3
     3d0:	2301      	movs	r3, #1
     3d2:	4013      	ands	r3, r2
     3d4:	2b01      	cmp	r3, #1
     3d6:	d1f7      	bne.n	3c8 <dsu_crc32_cal+0x48>
	}

	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     3d8:	4b14      	ldr	r3, [pc, #80]	; (42c <dsu_crc32_cal+0xac>)
     3da:	785b      	ldrb	r3, [r3, #1]
     3dc:	b2db      	uxtb	r3, r3
     3de:	001a      	movs	r2, r3
     3e0:	2304      	movs	r3, #4
     3e2:	4013      	ands	r3, r2
     3e4:	d009      	beq.n	3fa <dsu_crc32_cal+0x7a>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     3e6:	2322      	movs	r3, #34	; 0x22
     3e8:	425b      	negs	r3, r3
     3ea:	0019      	movs	r1, r3
     3ec:	2021      	movs	r0, #33	; 0x21
     3ee:	4b10      	ldr	r3, [pc, #64]	; (430 <dsu_crc32_cal+0xb0>)
     3f0:	4798      	blx	r3
		system_interrupt_enable_global();
     3f2:	4b10      	ldr	r3, [pc, #64]	; (434 <dsu_crc32_cal+0xb4>)
     3f4:	4798      	blx	r3
		return STATUS_ERR_IO;
     3f6:	2310      	movs	r3, #16
     3f8:	e00f      	b.n	41a <dsu_crc32_cal+0x9a>
	}

	*pcrc32 = DSU->DATA.reg;
     3fa:	4b0c      	ldr	r3, [pc, #48]	; (42c <dsu_crc32_cal+0xac>)
     3fc:	68da      	ldr	r2, [r3, #12]
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	601a      	str	r2, [r3, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     402:	4b0a      	ldr	r3, [pc, #40]	; (42c <dsu_crc32_cal+0xac>)
     404:	2201      	movs	r2, #1
     406:	705a      	strb	r2, [r3, #1]

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     408:	2322      	movs	r3, #34	; 0x22
     40a:	425b      	negs	r3, r3
     40c:	0019      	movs	r1, r3
     40e:	2021      	movs	r0, #33	; 0x21
     410:	4b07      	ldr	r3, [pc, #28]	; (430 <dsu_crc32_cal+0xb0>)
     412:	4798      	blx	r3
	system_interrupt_enable_global();
     414:	4b07      	ldr	r3, [pc, #28]	; (434 <dsu_crc32_cal+0xb4>)
     416:	4798      	blx	r3
	return STATUS_OK;
     418:	2300      	movs	r3, #0
     41a:	0018      	movs	r0, r3
     41c:	46bd      	mov	sp, r7
     41e:	b004      	add	sp, #16
     420:	bd80      	pop	{r7, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	00000365 	.word	0x00000365
     428:	00000a51 	.word	0x00000a51
     42c:	41002000 	.word	0x41002000
     430:	000009b9 	.word	0x000009b9
     434:	00000349 	.word	0x00000349

00000438 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <nvm_is_ready+0x24>)
     440:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     442:	687b      	ldr	r3, [r7, #4]
     444:	7d1b      	ldrb	r3, [r3, #20]
     446:	b2db      	uxtb	r3, r3
     448:	001a      	movs	r2, r3
     44a:	2301      	movs	r3, #1
     44c:	4013      	ands	r3, r2
     44e:	1e5a      	subs	r2, r3, #1
     450:	4193      	sbcs	r3, r2
     452:	b2db      	uxtb	r3, r3
}
     454:	0018      	movs	r0, r3
     456:	46bd      	mov	sp, r7
     458:	b002      	add	sp, #8
     45a:	bd80      	pop	{r7, pc}
     45c:	41004000 	.word	0x41004000

00000460 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	0002      	movs	r2, r0
     468:	6039      	str	r1, [r7, #0]
     46a:	1dfb      	adds	r3, r7, #7
     46c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     46e:	1dfb      	adds	r3, r7, #7
     470:	781b      	ldrb	r3, [r3, #0]
     472:	2b01      	cmp	r3, #1
     474:	d00a      	beq.n	48c <system_apb_clock_set_mask+0x2c>
     476:	2b02      	cmp	r3, #2
     478:	d00f      	beq.n	49a <system_apb_clock_set_mask+0x3a>
     47a:	2b00      	cmp	r3, #0
     47c:	d114      	bne.n	4a8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     47e:	4b0e      	ldr	r3, [pc, #56]	; (4b8 <system_apb_clock_set_mask+0x58>)
     480:	4a0d      	ldr	r2, [pc, #52]	; (4b8 <system_apb_clock_set_mask+0x58>)
     482:	6991      	ldr	r1, [r2, #24]
     484:	683a      	ldr	r2, [r7, #0]
     486:	430a      	orrs	r2, r1
     488:	619a      	str	r2, [r3, #24]
			break;
     48a:	e00f      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     48c:	4b0a      	ldr	r3, [pc, #40]	; (4b8 <system_apb_clock_set_mask+0x58>)
     48e:	4a0a      	ldr	r2, [pc, #40]	; (4b8 <system_apb_clock_set_mask+0x58>)
     490:	69d1      	ldr	r1, [r2, #28]
     492:	683a      	ldr	r2, [r7, #0]
     494:	430a      	orrs	r2, r1
     496:	61da      	str	r2, [r3, #28]
			break;
     498:	e008      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     49a:	4b07      	ldr	r3, [pc, #28]	; (4b8 <system_apb_clock_set_mask+0x58>)
     49c:	4a06      	ldr	r2, [pc, #24]	; (4b8 <system_apb_clock_set_mask+0x58>)
     49e:	6a11      	ldr	r1, [r2, #32]
     4a0:	683a      	ldr	r2, [r7, #0]
     4a2:	430a      	orrs	r2, r1
     4a4:	621a      	str	r2, [r3, #32]
			break;
     4a6:	e001      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     4a8:	2317      	movs	r3, #23
     4aa:	e000      	b.n	4ae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     4ac:	2300      	movs	r3, #0
}
     4ae:	0018      	movs	r0, r3
     4b0:	46bd      	mov	sp, r7
     4b2:	b002      	add	sp, #8
     4b4:	bd80      	pop	{r7, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	40000400 	.word	0x40000400

000004bc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b084      	sub	sp, #16
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4c4:	4b2f      	ldr	r3, [pc, #188]	; (584 <nvm_set_config+0xc8>)
     4c6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     4c8:	2104      	movs	r1, #4
     4ca:	2001      	movs	r0, #1
     4cc:	4b2e      	ldr	r3, [pc, #184]	; (588 <nvm_set_config+0xcc>)
     4ce:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     4d0:	68fb      	ldr	r3, [r7, #12]
     4d2:	2220      	movs	r2, #32
     4d4:	32ff      	adds	r2, #255	; 0xff
     4d6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4d8:	4b2c      	ldr	r3, [pc, #176]	; (58c <nvm_set_config+0xd0>)
     4da:	4798      	blx	r3
     4dc:	0003      	movs	r3, r0
     4de:	001a      	movs	r2, r3
     4e0:	2301      	movs	r3, #1
     4e2:	4053      	eors	r3, r2
     4e4:	b2db      	uxtb	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	d001      	beq.n	4ee <nvm_set_config+0x32>
		return STATUS_BUSY;
     4ea:	2305      	movs	r3, #5
     4ec:	e045      	b.n	57a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4ee:	687b      	ldr	r3, [r7, #4]
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	021b      	lsls	r3, r3, #8
     4f4:	001a      	movs	r2, r3
     4f6:	23c0      	movs	r3, #192	; 0xc0
     4f8:	009b      	lsls	r3, r3, #2
     4fa:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	785b      	ldrb	r3, [r3, #1]
     500:	01db      	lsls	r3, r3, #7
     502:	0019      	movs	r1, r3
     504:	23ff      	movs	r3, #255	; 0xff
     506:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     508:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	789b      	ldrb	r3, [r3, #2]
     50e:	005b      	lsls	r3, r3, #1
     510:	0019      	movs	r1, r3
     512:	231e      	movs	r3, #30
     514:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     516:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     518:	687b      	ldr	r3, [r7, #4]
     51a:	78db      	ldrb	r3, [r3, #3]
     51c:	049b      	lsls	r3, r3, #18
     51e:	0019      	movs	r1, r3
     520:	2380      	movs	r3, #128	; 0x80
     522:	02db      	lsls	r3, r3, #11
     524:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     526:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     528:	687b      	ldr	r3, [r7, #4]
     52a:	791b      	ldrb	r3, [r3, #4]
     52c:	041b      	lsls	r3, r3, #16
     52e:	0019      	movs	r1, r3
     530:	23c0      	movs	r3, #192	; 0xc0
     532:	029b      	lsls	r3, r3, #10
     534:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     536:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     538:	68fb      	ldr	r3, [r7, #12]
     53a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     53c:	68fb      	ldr	r3, [r7, #12]
     53e:	689b      	ldr	r3, [r3, #8]
     540:	035b      	lsls	r3, r3, #13
     542:	0f5b      	lsrs	r3, r3, #29
     544:	b2db      	uxtb	r3, r3
     546:	001a      	movs	r2, r3
     548:	2308      	movs	r3, #8
     54a:	4093      	lsls	r3, r2
     54c:	b29a      	uxth	r2, r3
     54e:	4b10      	ldr	r3, [pc, #64]	; (590 <nvm_set_config+0xd4>)
     550:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     552:	68fb      	ldr	r3, [r7, #12]
     554:	689b      	ldr	r3, [r3, #8]
     556:	b29a      	uxth	r2, r3
     558:	4b0d      	ldr	r3, [pc, #52]	; (590 <nvm_set_config+0xd4>)
     55a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     55c:	687b      	ldr	r3, [r7, #4]
     55e:	785a      	ldrb	r2, [r3, #1]
     560:	4b0b      	ldr	r3, [pc, #44]	; (590 <nvm_set_config+0xd4>)
     562:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     564:	68fb      	ldr	r3, [r7, #12]
     566:	8b1b      	ldrh	r3, [r3, #24]
     568:	b29b      	uxth	r3, r3
     56a:	001a      	movs	r2, r3
     56c:	2380      	movs	r3, #128	; 0x80
     56e:	005b      	lsls	r3, r3, #1
     570:	4013      	ands	r3, r2
     572:	d001      	beq.n	578 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     574:	2310      	movs	r3, #16
     576:	e000      	b.n	57a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     578:	2300      	movs	r3, #0
}
     57a:	0018      	movs	r0, r3
     57c:	46bd      	mov	sp, r7
     57e:	b004      	add	sp, #16
     580:	bd80      	pop	{r7, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	41004000 	.word	0x41004000
     588:	00000461 	.word	0x00000461
     58c:	00000439 	.word	0x00000439
     590:	200000b4 	.word	0x200000b4

00000594 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     594:	b580      	push	{r7, lr}
     596:	b086      	sub	sp, #24
     598:	af00      	add	r7, sp, #0
     59a:	60b9      	str	r1, [r7, #8]
     59c:	607a      	str	r2, [r7, #4]
     59e:	230f      	movs	r3, #15
     5a0:	18fb      	adds	r3, r7, r3
     5a2:	1c02      	adds	r2, r0, #0
     5a4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     5a6:	4b3a      	ldr	r3, [pc, #232]	; (690 <nvm_execute_command+0xfc>)
     5a8:	881b      	ldrh	r3, [r3, #0]
     5aa:	001a      	movs	r2, r3
     5ac:	4b38      	ldr	r3, [pc, #224]	; (690 <nvm_execute_command+0xfc>)
     5ae:	885b      	ldrh	r3, [r3, #2]
     5b0:	435a      	muls	r2, r3
     5b2:	68bb      	ldr	r3, [r7, #8]
     5b4:	429a      	cmp	r2, r3
     5b6:	d209      	bcs.n	5cc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     5b8:	68bb      	ldr	r3, [r7, #8]
     5ba:	4a36      	ldr	r2, [pc, #216]	; (694 <nvm_execute_command+0x100>)
     5bc:	4293      	cmp	r3, r2
     5be:	d903      	bls.n	5c8 <nvm_execute_command+0x34>
     5c0:	68bb      	ldr	r3, [r7, #8]
     5c2:	4a35      	ldr	r2, [pc, #212]	; (698 <nvm_execute_command+0x104>)
     5c4:	4293      	cmp	r3, r2
     5c6:	d901      	bls.n	5cc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     5c8:	2318      	movs	r3, #24
     5ca:	e05c      	b.n	686 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     5cc:	4b33      	ldr	r3, [pc, #204]	; (69c <nvm_execute_command+0x108>)
     5ce:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     5d0:	697b      	ldr	r3, [r7, #20]
     5d2:	685b      	ldr	r3, [r3, #4]
     5d4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     5d6:	693b      	ldr	r3, [r7, #16]
     5d8:	2280      	movs	r2, #128	; 0x80
     5da:	02d2      	lsls	r2, r2, #11
     5dc:	431a      	orrs	r2, r3
     5de:	697b      	ldr	r3, [r7, #20]
     5e0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     5e2:	697b      	ldr	r3, [r7, #20]
     5e4:	2220      	movs	r2, #32
     5e6:	32ff      	adds	r2, #255	; 0xff
     5e8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     5ea:	4b2d      	ldr	r3, [pc, #180]	; (6a0 <nvm_execute_command+0x10c>)
     5ec:	4798      	blx	r3
     5ee:	0003      	movs	r3, r0
     5f0:	001a      	movs	r2, r3
     5f2:	2301      	movs	r3, #1
     5f4:	4053      	eors	r3, r2
     5f6:	b2db      	uxtb	r3, r3
     5f8:	2b00      	cmp	r3, #0
     5fa:	d004      	beq.n	606 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     5fc:	697b      	ldr	r3, [r7, #20]
     5fe:	693a      	ldr	r2, [r7, #16]
     600:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
     602:	2305      	movs	r3, #5
     604:	e03f      	b.n	686 <nvm_execute_command+0xf2>
	}

	switch (command) {
     606:	230f      	movs	r3, #15
     608:	18fb      	adds	r3, r7, r3
     60a:	781b      	ldrb	r3, [r3, #0]
     60c:	2b45      	cmp	r3, #69	; 0x45
     60e:	d81d      	bhi.n	64c <nvm_execute_command+0xb8>
     610:	009a      	lsls	r2, r3, #2
     612:	4b24      	ldr	r3, [pc, #144]	; (6a4 <nvm_execute_command+0x110>)
     614:	18d3      	adds	r3, r2, r3
     616:	681b      	ldr	r3, [r3, #0]
     618:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     61a:	697b      	ldr	r3, [r7, #20]
     61c:	8b1b      	ldrh	r3, [r3, #24]
     61e:	b29b      	uxth	r3, r3
     620:	001a      	movs	r2, r3
     622:	2380      	movs	r3, #128	; 0x80
     624:	005b      	lsls	r3, r3, #1
     626:	4013      	ands	r3, r2
     628:	d004      	beq.n	634 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     62a:	697b      	ldr	r3, [r7, #20]
     62c:	693a      	ldr	r2, [r7, #16]
     62e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
     630:	2310      	movs	r3, #16
     632:	e028      	b.n	686 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     634:	68bb      	ldr	r3, [r7, #8]
     636:	089b      	lsrs	r3, r3, #2
     638:	005a      	lsls	r2, r3, #1
     63a:	697b      	ldr	r3, [r7, #20]
     63c:	61da      	str	r2, [r3, #28]
			break;
     63e:	e00b      	b.n	658 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     640:	68bb      	ldr	r3, [r7, #8]
     642:	089b      	lsrs	r3, r3, #2
     644:	005a      	lsls	r2, r3, #1
     646:	697b      	ldr	r3, [r7, #20]
     648:	61da      	str	r2, [r3, #28]
			break;
     64a:	e005      	b.n	658 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     64c:	697b      	ldr	r3, [r7, #20]
     64e:	693a      	ldr	r2, [r7, #16]
     650:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     652:	2317      	movs	r3, #23
     654:	e017      	b.n	686 <nvm_execute_command+0xf2>
			break;
     656:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     658:	230f      	movs	r3, #15
     65a:	18fb      	adds	r3, r7, r3
     65c:	781b      	ldrb	r3, [r3, #0]
     65e:	b29b      	uxth	r3, r3
     660:	4a11      	ldr	r2, [pc, #68]	; (6a8 <nvm_execute_command+0x114>)
     662:	4313      	orrs	r3, r2
     664:	b29a      	uxth	r2, r3
     666:	697b      	ldr	r3, [r7, #20]
     668:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	4b0c      	ldr	r3, [pc, #48]	; (6a0 <nvm_execute_command+0x10c>)
     66e:	4798      	blx	r3
     670:	0003      	movs	r3, r0
     672:	001a      	movs	r2, r3
     674:	2301      	movs	r3, #1
     676:	4053      	eors	r3, r2
     678:	b2db      	uxtb	r3, r3
     67a:	2b00      	cmp	r3, #0
     67c:	d1f6      	bne.n	66c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     67e:	697b      	ldr	r3, [r7, #20]
     680:	693a      	ldr	r2, [r7, #16]
     682:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     684:	2300      	movs	r3, #0
}
     686:	0018      	movs	r0, r3
     688:	46bd      	mov	sp, r7
     68a:	b006      	add	sp, #24
     68c:	bd80      	pop	{r7, pc}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	200000b4 	.word	0x200000b4
     694:	00803fff 	.word	0x00803fff
     698:	00806000 	.word	0x00806000
     69c:	41004000 	.word	0x41004000
     6a0:	00000439 	.word	0x00000439
     6a4:	0000c148 	.word	0x0000c148
     6a8:	ffffa500 	.word	0xffffa500

000006ac <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     6ac:	b580      	push	{r7, lr}
     6ae:	b088      	sub	sp, #32
     6b0:	af00      	add	r7, sp, #0
     6b2:	60f8      	str	r0, [r7, #12]
     6b4:	60b9      	str	r1, [r7, #8]
     6b6:	1dbb      	adds	r3, r7, #6
     6b8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     6ba:	4b4a      	ldr	r3, [pc, #296]	; (7e4 <nvm_write_buffer+0x138>)
     6bc:	881b      	ldrh	r3, [r3, #0]
     6be:	001a      	movs	r2, r3
     6c0:	4b48      	ldr	r3, [pc, #288]	; (7e4 <nvm_write_buffer+0x138>)
     6c2:	885b      	ldrh	r3, [r3, #2]
     6c4:	435a      	muls	r2, r3
	if (destination_address >
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	429a      	cmp	r2, r3
     6ca:	d201      	bcs.n	6d0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     6cc:	2318      	movs	r3, #24
     6ce:	e084      	b.n	7da <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     6d0:	4b44      	ldr	r3, [pc, #272]	; (7e4 <nvm_write_buffer+0x138>)
     6d2:	881b      	ldrh	r3, [r3, #0]
     6d4:	3b01      	subs	r3, #1
     6d6:	001a      	movs	r2, r3
     6d8:	68fb      	ldr	r3, [r7, #12]
     6da:	4013      	ands	r3, r2
     6dc:	d001      	beq.n	6e2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     6de:	2318      	movs	r3, #24
     6e0:	e07b      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     6e2:	4b40      	ldr	r3, [pc, #256]	; (7e4 <nvm_write_buffer+0x138>)
     6e4:	881b      	ldrh	r3, [r3, #0]
     6e6:	1dba      	adds	r2, r7, #6
     6e8:	8812      	ldrh	r2, [r2, #0]
     6ea:	429a      	cmp	r2, r3
     6ec:	d901      	bls.n	6f2 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     6ee:	2317      	movs	r3, #23
     6f0:	e073      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     6f2:	4b3d      	ldr	r3, [pc, #244]	; (7e8 <nvm_write_buffer+0x13c>)
     6f4:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     6f6:	4b3d      	ldr	r3, [pc, #244]	; (7ec <nvm_write_buffer+0x140>)
     6f8:	4798      	blx	r3
     6fa:	0003      	movs	r3, r0
     6fc:	001a      	movs	r2, r3
     6fe:	2301      	movs	r3, #1
     700:	4053      	eors	r3, r2
     702:	b2db      	uxtb	r3, r3
     704:	2b00      	cmp	r3, #0
     706:	d001      	beq.n	70c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     708:	2305      	movs	r3, #5
     70a:	e066      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     70c:	697b      	ldr	r3, [r7, #20]
     70e:	4a38      	ldr	r2, [pc, #224]	; (7f0 <nvm_write_buffer+0x144>)
     710:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     712:	46c0      	nop			; (mov r8, r8)
     714:	4b35      	ldr	r3, [pc, #212]	; (7ec <nvm_write_buffer+0x140>)
     716:	4798      	blx	r3
     718:	0003      	movs	r3, r0
     71a:	001a      	movs	r2, r3
     71c:	2301      	movs	r3, #1
     71e:	4053      	eors	r3, r2
     720:	b2db      	uxtb	r3, r3
     722:	2b00      	cmp	r3, #0
     724:	d1f6      	bne.n	714 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     726:	697b      	ldr	r3, [r7, #20]
     728:	2220      	movs	r2, #32
     72a:	32ff      	adds	r2, #255	; 0xff
     72c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     72e:	68fb      	ldr	r3, [r7, #12]
     730:	085b      	lsrs	r3, r3, #1
     732:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     734:	231a      	movs	r3, #26
     736:	18fb      	adds	r3, r7, r3
     738:	2200      	movs	r2, #0
     73a:	801a      	strh	r2, [r3, #0]
     73c:	e032      	b.n	7a4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     73e:	231a      	movs	r3, #26
     740:	18fb      	adds	r3, r7, r3
     742:	881b      	ldrh	r3, [r3, #0]
     744:	68ba      	ldr	r2, [r7, #8]
     746:	18d3      	adds	r3, r2, r3
     748:	781a      	ldrb	r2, [r3, #0]
     74a:	2318      	movs	r3, #24
     74c:	18fb      	adds	r3, r7, r3
     74e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     750:	231a      	movs	r3, #26
     752:	18fb      	adds	r3, r7, r3
     754:	881a      	ldrh	r2, [r3, #0]
     756:	1dbb      	adds	r3, r7, #6
     758:	881b      	ldrh	r3, [r3, #0]
     75a:	3b01      	subs	r3, #1
     75c:	429a      	cmp	r2, r3
     75e:	da11      	bge.n	784 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
     760:	231a      	movs	r3, #26
     762:	18fb      	adds	r3, r7, r3
     764:	881b      	ldrh	r3, [r3, #0]
     766:	3301      	adds	r3, #1
     768:	68ba      	ldr	r2, [r7, #8]
     76a:	18d3      	adds	r3, r2, r3
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	021b      	lsls	r3, r3, #8
     770:	b21a      	sxth	r2, r3
     772:	2318      	movs	r3, #24
     774:	18fb      	adds	r3, r7, r3
     776:	2100      	movs	r1, #0
     778:	5e5b      	ldrsh	r3, [r3, r1]
     77a:	4313      	orrs	r3, r2
     77c:	b21a      	sxth	r2, r3
     77e:	2318      	movs	r3, #24
     780:	18fb      	adds	r3, r7, r3
     782:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     784:	69fb      	ldr	r3, [r7, #28]
     786:	1c5a      	adds	r2, r3, #1
     788:	61fa      	str	r2, [r7, #28]
     78a:	005b      	lsls	r3, r3, #1
     78c:	001a      	movs	r2, r3
     78e:	2318      	movs	r3, #24
     790:	18fb      	adds	r3, r7, r3
     792:	881b      	ldrh	r3, [r3, #0]
     794:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     796:	231a      	movs	r3, #26
     798:	18fb      	adds	r3, r7, r3
     79a:	221a      	movs	r2, #26
     79c:	18ba      	adds	r2, r7, r2
     79e:	8812      	ldrh	r2, [r2, #0]
     7a0:	3202      	adds	r2, #2
     7a2:	801a      	strh	r2, [r3, #0]
     7a4:	231a      	movs	r3, #26
     7a6:	18fa      	adds	r2, r7, r3
     7a8:	1dbb      	adds	r3, r7, #6
     7aa:	8812      	ldrh	r2, [r2, #0]
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	429a      	cmp	r2, r3
     7b0:	d3c5      	bcc.n	73e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     7b2:	4b0c      	ldr	r3, [pc, #48]	; (7e4 <nvm_write_buffer+0x138>)
     7b4:	791b      	ldrb	r3, [r3, #4]
     7b6:	2201      	movs	r2, #1
     7b8:	4053      	eors	r3, r2
     7ba:	b2db      	uxtb	r3, r3
     7bc:	2b00      	cmp	r3, #0
     7be:	d00b      	beq.n	7d8 <nvm_write_buffer+0x12c>
     7c0:	1dbb      	adds	r3, r7, #6
     7c2:	881b      	ldrh	r3, [r3, #0]
     7c4:	2b3f      	cmp	r3, #63	; 0x3f
     7c6:	d807      	bhi.n	7d8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     7c8:	68fb      	ldr	r3, [r7, #12]
     7ca:	2200      	movs	r2, #0
     7cc:	0019      	movs	r1, r3
     7ce:	2004      	movs	r0, #4
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <nvm_write_buffer+0x148>)
     7d2:	4798      	blx	r3
     7d4:	0003      	movs	r3, r0
     7d6:	e000      	b.n	7da <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     7d8:	2300      	movs	r3, #0
}
     7da:	0018      	movs	r0, r3
     7dc:	46bd      	mov	sp, r7
     7de:	b008      	add	sp, #32
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	200000b4 	.word	0x200000b4
     7e8:	41004000 	.word	0x41004000
     7ec:	00000439 	.word	0x00000439
     7f0:	ffffa544 	.word	0xffffa544
     7f4:	00000595 	.word	0x00000595

000007f8 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     800:	4b23      	ldr	r3, [pc, #140]	; (890 <nvm_erase_row+0x98>)
     802:	881b      	ldrh	r3, [r3, #0]
     804:	001a      	movs	r2, r3
     806:	4b22      	ldr	r3, [pc, #136]	; (890 <nvm_erase_row+0x98>)
     808:	885b      	ldrh	r3, [r3, #2]
     80a:	435a      	muls	r2, r3
	if (row_address >
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	429a      	cmp	r2, r3
     810:	d201      	bcs.n	816 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     812:	2318      	movs	r3, #24
     814:	e037      	b.n	886 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     816:	4b1e      	ldr	r3, [pc, #120]	; (890 <nvm_erase_row+0x98>)
     818:	881b      	ldrh	r3, [r3, #0]
     81a:	009b      	lsls	r3, r3, #2
     81c:	3b01      	subs	r3, #1
     81e:	001a      	movs	r2, r3
     820:	687b      	ldr	r3, [r7, #4]
     822:	4013      	ands	r3, r2
     824:	d001      	beq.n	82a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     826:	2318      	movs	r3, #24
     828:	e02d      	b.n	886 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     82a:	4b1a      	ldr	r3, [pc, #104]	; (894 <nvm_erase_row+0x9c>)
     82c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     82e:	4b1a      	ldr	r3, [pc, #104]	; (898 <nvm_erase_row+0xa0>)
     830:	4798      	blx	r3
     832:	0003      	movs	r3, r0
     834:	001a      	movs	r2, r3
     836:	2301      	movs	r3, #1
     838:	4053      	eors	r3, r2
     83a:	b2db      	uxtb	r3, r3
     83c:	2b00      	cmp	r3, #0
     83e:	d001      	beq.n	844 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     840:	2305      	movs	r3, #5
     842:	e020      	b.n	886 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     844:	68fb      	ldr	r3, [r7, #12]
     846:	2220      	movs	r2, #32
     848:	32ff      	adds	r2, #255	; 0xff
     84a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	089b      	lsrs	r3, r3, #2
     850:	005a      	lsls	r2, r3, #1
     852:	68fb      	ldr	r3, [r7, #12]
     854:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     856:	68fb      	ldr	r3, [r7, #12]
     858:	4a10      	ldr	r2, [pc, #64]	; (89c <nvm_erase_row+0xa4>)
     85a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     85c:	46c0      	nop			; (mov r8, r8)
     85e:	4b0e      	ldr	r3, [pc, #56]	; (898 <nvm_erase_row+0xa0>)
     860:	4798      	blx	r3
     862:	0003      	movs	r3, r0
     864:	001a      	movs	r2, r3
     866:	2301      	movs	r3, #1
     868:	4053      	eors	r3, r2
     86a:	b2db      	uxtb	r3, r3
     86c:	2b00      	cmp	r3, #0
     86e:	d1f6      	bne.n	85e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     870:	68fb      	ldr	r3, [r7, #12]
     872:	8b1b      	ldrh	r3, [r3, #24]
     874:	b29b      	uxth	r3, r3
     876:	b2db      	uxtb	r3, r3
     878:	001a      	movs	r2, r3
     87a:	231c      	movs	r3, #28
     87c:	4013      	ands	r3, r2
     87e:	d001      	beq.n	884 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
     880:	2304      	movs	r3, #4
     882:	e000      	b.n	886 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
     884:	2300      	movs	r3, #0
}
     886:	0018      	movs	r0, r3
     888:	46bd      	mov	sp, r7
     88a:	b004      	add	sp, #16
     88c:	bd80      	pop	{r7, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	200000b4 	.word	0x200000b4
     894:	41004000 	.word	0x41004000
     898:	00000439 	.word	0x00000439
     89c:	ffffa502 	.word	0xffffa502

000008a0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
     8a0:	b580      	push	{r7, lr}
     8a2:	b086      	sub	sp, #24
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     8a8:	4b2a      	ldr	r3, [pc, #168]	; (954 <nvm_get_parameters+0xb4>)
     8aa:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     8ac:	697b      	ldr	r3, [r7, #20]
     8ae:	2220      	movs	r2, #32
     8b0:	32ff      	adds	r2, #255	; 0xff
     8b2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     8b4:	697b      	ldr	r3, [r7, #20]
     8b6:	689b      	ldr	r3, [r3, #8]
     8b8:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     8ba:	693b      	ldr	r3, [r7, #16]
     8bc:	0c1b      	lsrs	r3, r3, #16
     8be:	2207      	movs	r2, #7
     8c0:	4013      	ands	r3, r2
     8c2:	2208      	movs	r2, #8
     8c4:	409a      	lsls	r2, r3
     8c6:	0013      	movs	r3, r2
	parameters->page_size =
     8c8:	b2da      	uxtb	r2, r3
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     8ce:	693b      	ldr	r3, [r7, #16]
     8d0:	b29a      	uxth	r2, r3
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     8d6:	4b20      	ldr	r3, [pc, #128]	; (958 <nvm_get_parameters+0xb8>)
     8d8:	881b      	ldrh	r3, [r3, #0]
     8da:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
     8dc:	091b      	lsrs	r3, r3, #4
     8de:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
     8e0:	230e      	movs	r3, #14
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	2107      	movs	r1, #7
     8e6:	400a      	ands	r2, r1
     8e8:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     8ea:	230e      	movs	r3, #14
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	881b      	ldrh	r3, [r3, #0]
     8f0:	2b07      	cmp	r3, #7
     8f2:	d103      	bne.n	8fc <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	2200      	movs	r2, #0
     8f8:	605a      	str	r2, [r3, #4]
     8fa:	e00a      	b.n	912 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     8fc:	230e      	movs	r3, #14
     8fe:	18fb      	adds	r3, r7, r3
     900:	881b      	ldrh	r3, [r3, #0]
     902:	2206      	movs	r2, #6
     904:	1ad3      	subs	r3, r2, r3
     906:	2204      	movs	r2, #4
     908:	409a      	lsls	r2, r3
     90a:	0013      	movs	r3, r2
     90c:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
     90e:	687b      	ldr	r3, [r7, #4]
     910:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     912:	4b11      	ldr	r3, [pc, #68]	; (958 <nvm_get_parameters+0xb8>)
     914:	881b      	ldrh	r3, [r3, #0]
     916:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
     918:	230c      	movs	r3, #12
     91a:	18fb      	adds	r3, r7, r3
     91c:	2107      	movs	r1, #7
     91e:	400a      	ands	r2, r1
     920:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     922:	230c      	movs	r3, #12
     924:	18fb      	adds	r3, r7, r3
     926:	881b      	ldrh	r3, [r3, #0]
     928:	2b07      	cmp	r3, #7
     92a:	d103      	bne.n	934 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	2200      	movs	r2, #0
     930:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
     932:	e00a      	b.n	94a <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     934:	230c      	movs	r3, #12
     936:	18fb      	adds	r3, r7, r3
     938:	881b      	ldrh	r3, [r3, #0]
     93a:	2207      	movs	r2, #7
     93c:	1ad3      	subs	r3, r2, r3
     93e:	2204      	movs	r2, #4
     940:	409a      	lsls	r2, r3
     942:	0013      	movs	r3, r2
     944:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
     946:	687b      	ldr	r3, [r7, #4]
     948:	609a      	str	r2, [r3, #8]
}
     94a:	46c0      	nop			; (mov r8, r8)
     94c:	46bd      	mov	sp, r7
     94e:	b006      	add	sp, #24
     950:	bd80      	pop	{r7, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	41004000 	.word	0x41004000
     958:	00804000 	.word	0x00804000

0000095c <system_apb_clock_set_mask>:
{
     95c:	b580      	push	{r7, lr}
     95e:	b082      	sub	sp, #8
     960:	af00      	add	r7, sp, #0
     962:	0002      	movs	r2, r0
     964:	6039      	str	r1, [r7, #0]
     966:	1dfb      	adds	r3, r7, #7
     968:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     96a:	1dfb      	adds	r3, r7, #7
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	2b01      	cmp	r3, #1
     970:	d00a      	beq.n	988 <system_apb_clock_set_mask+0x2c>
     972:	2b02      	cmp	r3, #2
     974:	d00f      	beq.n	996 <system_apb_clock_set_mask+0x3a>
     976:	2b00      	cmp	r3, #0
     978:	d114      	bne.n	9a4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     97a:	4b0e      	ldr	r3, [pc, #56]	; (9b4 <system_apb_clock_set_mask+0x58>)
     97c:	4a0d      	ldr	r2, [pc, #52]	; (9b4 <system_apb_clock_set_mask+0x58>)
     97e:	6991      	ldr	r1, [r2, #24]
     980:	683a      	ldr	r2, [r7, #0]
     982:	430a      	orrs	r2, r1
     984:	619a      	str	r2, [r3, #24]
			break;
     986:	e00f      	b.n	9a8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     988:	4b0a      	ldr	r3, [pc, #40]	; (9b4 <system_apb_clock_set_mask+0x58>)
     98a:	4a0a      	ldr	r2, [pc, #40]	; (9b4 <system_apb_clock_set_mask+0x58>)
     98c:	69d1      	ldr	r1, [r2, #28]
     98e:	683a      	ldr	r2, [r7, #0]
     990:	430a      	orrs	r2, r1
     992:	61da      	str	r2, [r3, #28]
			break;
     994:	e008      	b.n	9a8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     996:	4b07      	ldr	r3, [pc, #28]	; (9b4 <system_apb_clock_set_mask+0x58>)
     998:	4a06      	ldr	r2, [pc, #24]	; (9b4 <system_apb_clock_set_mask+0x58>)
     99a:	6a11      	ldr	r1, [r2, #32]
     99c:	683a      	ldr	r2, [r7, #0]
     99e:	430a      	orrs	r2, r1
     9a0:	621a      	str	r2, [r3, #32]
			break;
     9a2:	e001      	b.n	9a8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     9a4:	2317      	movs	r3, #23
     9a6:	e000      	b.n	9aa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     9a8:	2300      	movs	r3, #0
}
     9aa:	0018      	movs	r0, r3
     9ac:	46bd      	mov	sp, r7
     9ae:	b002      	add	sp, #8
     9b0:	bd80      	pop	{r7, pc}
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	40000400 	.word	0x40000400

000009b8 <system_peripheral_lock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_lock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     9b8:	b580      	push	{r7, lr}
     9ba:	b084      	sub	sp, #16
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
     9c0:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	b2da      	uxtb	r2, r3
     9c6:	230f      	movs	r3, #15
     9c8:	18fb      	adds	r3, r7, r3
     9ca:	211f      	movs	r1, #31
     9cc:	400a      	ands	r2, r1
     9ce:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	095a      	lsrs	r2, r3, #5
     9d4:	230e      	movs	r3, #14
     9d6:	18fb      	adds	r3, r7, r3
     9d8:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	43da      	mvns	r2, r3
     9de:	683b      	ldr	r3, [r7, #0]
     9e0:	429a      	cmp	r2, r3
     9e2:	d001      	beq.n	9e8 <system_peripheral_lock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     9e4:	2317      	movs	r3, #23
     9e6:	e02d      	b.n	a44 <system_peripheral_lock+0x8c>
	}

	switch (register_pos) {
     9e8:	230e      	movs	r3, #14
     9ea:	18fb      	adds	r3, r7, r3
     9ec:	781b      	ldrb	r3, [r3, #0]
     9ee:	2b01      	cmp	r3, #1
     9f0:	d00d      	beq.n	a0e <system_peripheral_lock+0x56>
     9f2:	2b02      	cmp	r3, #2
     9f4:	d015      	beq.n	a22 <system_peripheral_lock+0x6a>
     9f6:	2b00      	cmp	r3, #0
     9f8:	d121      	bne.n	a3e <system_peripheral_lock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPSET.reg = (1 << register_bit_pos);
     9fa:	2380      	movs	r3, #128	; 0x80
     9fc:	05db      	lsls	r3, r3, #23
     9fe:	220f      	movs	r2, #15
     a00:	18ba      	adds	r2, r7, r2
     a02:	7812      	ldrb	r2, [r2, #0]
     a04:	2101      	movs	r1, #1
     a06:	4091      	lsls	r1, r2
     a08:	000a      	movs	r2, r1
     a0a:	605a      	str	r2, [r3, #4]
			break;
     a0c:	e019      	b.n	a42 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPSET.reg = (1 << register_bit_pos);
     a0e:	2382      	movs	r3, #130	; 0x82
     a10:	05db      	lsls	r3, r3, #23
     a12:	220f      	movs	r2, #15
     a14:	18ba      	adds	r2, r7, r2
     a16:	7812      	ldrb	r2, [r2, #0]
     a18:	2101      	movs	r1, #1
     a1a:	4091      	lsls	r1, r2
     a1c:	000a      	movs	r2, r1
     a1e:	605a      	str	r2, [r3, #4]
			break;
     a20:	e00f      	b.n	a42 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     a22:	2101      	movs	r1, #1
     a24:	2002      	movs	r0, #2
     a26:	4b09      	ldr	r3, [pc, #36]	; (a4c <system_peripheral_lock+0x94>)
     a28:	4798      	blx	r3
			PAC2->WPSET.reg = (1 << register_bit_pos);
     a2a:	2384      	movs	r3, #132	; 0x84
     a2c:	05db      	lsls	r3, r3, #23
     a2e:	220f      	movs	r2, #15
     a30:	18ba      	adds	r2, r7, r2
     a32:	7812      	ldrb	r2, [r2, #0]
     a34:	2101      	movs	r1, #1
     a36:	4091      	lsls	r1, r2
     a38:	000a      	movs	r2, r1
     a3a:	605a      	str	r2, [r3, #4]
			break;
     a3c:	e001      	b.n	a42 <system_peripheral_lock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     a3e:	2317      	movs	r3, #23
     a40:	e000      	b.n	a44 <system_peripheral_lock+0x8c>
	}

	return STATUS_OK;
     a42:	2300      	movs	r3, #0
}
     a44:	0018      	movs	r0, r3
     a46:	46bd      	mov	sp, r7
     a48:	b004      	add	sp, #16
     a4a:	bd80      	pop	{r7, pc}
     a4c:	0000095d 	.word	0x0000095d

00000a50 <system_peripheral_unlock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_unlock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     a50:	b580      	push	{r7, lr}
     a52:	b084      	sub	sp, #16
     a54:	af00      	add	r7, sp, #0
     a56:	6078      	str	r0, [r7, #4]
     a58:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	b2da      	uxtb	r2, r3
     a5e:	230f      	movs	r3, #15
     a60:	18fb      	adds	r3, r7, r3
     a62:	211f      	movs	r1, #31
     a64:	400a      	ands	r2, r1
     a66:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	095a      	lsrs	r2, r3, #5
     a6c:	230e      	movs	r3, #14
     a6e:	18fb      	adds	r3, r7, r3
     a70:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	43da      	mvns	r2, r3
     a76:	683b      	ldr	r3, [r7, #0]
     a78:	429a      	cmp	r2, r3
     a7a:	d001      	beq.n	a80 <system_peripheral_unlock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a7c:	2317      	movs	r3, #23
     a7e:	e02d      	b.n	adc <system_peripheral_unlock+0x8c>
	}

	switch (register_pos) {
     a80:	230e      	movs	r3, #14
     a82:	18fb      	adds	r3, r7, r3
     a84:	781b      	ldrb	r3, [r3, #0]
     a86:	2b01      	cmp	r3, #1
     a88:	d00d      	beq.n	aa6 <system_peripheral_unlock+0x56>
     a8a:	2b02      	cmp	r3, #2
     a8c:	d015      	beq.n	aba <system_peripheral_unlock+0x6a>
     a8e:	2b00      	cmp	r3, #0
     a90:	d121      	bne.n	ad6 <system_peripheral_unlock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPCLR.reg = (1 << register_bit_pos);
     a92:	2380      	movs	r3, #128	; 0x80
     a94:	05db      	lsls	r3, r3, #23
     a96:	220f      	movs	r2, #15
     a98:	18ba      	adds	r2, r7, r2
     a9a:	7812      	ldrb	r2, [r2, #0]
     a9c:	2101      	movs	r1, #1
     a9e:	4091      	lsls	r1, r2
     aa0:	000a      	movs	r2, r1
     aa2:	601a      	str	r2, [r3, #0]
			break;
     aa4:	e019      	b.n	ada <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPCLR.reg = (1 << register_bit_pos);
     aa6:	2382      	movs	r3, #130	; 0x82
     aa8:	05db      	lsls	r3, r3, #23
     aaa:	220f      	movs	r2, #15
     aac:	18ba      	adds	r2, r7, r2
     aae:	7812      	ldrb	r2, [r2, #0]
     ab0:	2101      	movs	r1, #1
     ab2:	4091      	lsls	r1, r2
     ab4:	000a      	movs	r2, r1
     ab6:	601a      	str	r2, [r3, #0]
			break;
     ab8:	e00f      	b.n	ada <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     aba:	2101      	movs	r1, #1
     abc:	2002      	movs	r0, #2
     abe:	4b09      	ldr	r3, [pc, #36]	; (ae4 <system_peripheral_unlock+0x94>)
     ac0:	4798      	blx	r3
			PAC2->WPCLR.reg = (1 << register_bit_pos);
     ac2:	2384      	movs	r3, #132	; 0x84
     ac4:	05db      	lsls	r3, r3, #23
     ac6:	220f      	movs	r2, #15
     ac8:	18ba      	adds	r2, r7, r2
     aca:	7812      	ldrb	r2, [r2, #0]
     acc:	2101      	movs	r1, #1
     ace:	4091      	lsls	r1, r2
     ad0:	000a      	movs	r2, r1
     ad2:	601a      	str	r2, [r3, #0]
			break;
     ad4:	e001      	b.n	ada <system_peripheral_unlock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ad6:	2317      	movs	r3, #23
     ad8:	e000      	b.n	adc <system_peripheral_unlock+0x8c>
	}

	return STATUS_OK;
     ada:	2300      	movs	r3, #0
}
     adc:	0018      	movs	r0, r3
     ade:	46bd      	mov	sp, r7
     ae0:	b004      	add	sp, #16
     ae2:	bd80      	pop	{r7, pc}
     ae4:	0000095d 	.word	0x0000095d

00000ae8 <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     ae8:	b590      	push	{r4, r7, lr}
     aea:	b083      	sub	sp, #12
     aec:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     aee:	4b16      	ldr	r3, [pc, #88]	; (b48 <SdCard_Initiate+0x60>)
     af0:	4798      	blx	r3
     af2:	0003      	movs	r3, r0
     af4:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     af6:	1dfc      	adds	r4, r7, #7
     af8:	2000      	movs	r0, #0
     afa:	4b14      	ldr	r3, [pc, #80]	; (b4c <SdCard_Initiate+0x64>)
     afc:	4798      	blx	r3
     afe:	0003      	movs	r3, r0
     b00:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     b02:	1dfb      	adds	r3, r7, #7
     b04:	781b      	ldrb	r3, [r3, #0]
     b06:	2b01      	cmp	r3, #1
     b08:	d106      	bne.n	b18 <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	2000      	movs	r0, #0
     b0e:	4b10      	ldr	r3, [pc, #64]	; (b50 <SdCard_Initiate+0x68>)
     b10:	4798      	blx	r3
     b12:	0003      	movs	r3, r0
     b14:	2b02      	cmp	r3, #2
     b16:	d1f9      	bne.n	b0c <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     b18:	4b0b      	ldr	r3, [pc, #44]	; (b48 <SdCard_Initiate+0x60>)
     b1a:	4798      	blx	r3
     b1c:	0002      	movs	r2, r0
     b1e:	683b      	ldr	r3, [r7, #0]
     b20:	1ad2      	subs	r2, r2, r3
     b22:	23fa      	movs	r3, #250	; 0xfa
     b24:	005b      	lsls	r3, r3, #1
     b26:	429a      	cmp	r2, r3
     b28:	d903      	bls.n	b32 <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     b2a:	1dfb      	adds	r3, r7, #7
     b2c:	2201      	movs	r2, #1
     b2e:	701a      	strb	r2, [r3, #0]
		break;
     b30:	e003      	b.n	b3a <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     b32:	1dfb      	adds	r3, r7, #7
     b34:	781b      	ldrb	r3, [r3, #0]
     b36:	2b00      	cmp	r3, #0
     b38:	d1dd      	bne.n	af6 <SdCard_Initiate+0xe>

return status;
     b3a:	1dfb      	adds	r3, r7, #7
     b3c:	781b      	ldrb	r3, [r3, #0]
}
     b3e:	0018      	movs	r0, r3
     b40:	46bd      	mov	sp, r7
     b42:	b003      	add	sp, #12
     b44:	bd90      	pop	{r4, r7, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	000001d1 	.word	0x000001d1
     b4c:	000023f1 	.word	0x000023f1
     b50:	00001f65 	.word	0x00001f65

00000b54 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     b54:	b580      	push	{r7, lr}
     b56:	b082      	sub	sp, #8
     b58:	af00      	add	r7, sp, #0
     b5a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	7c1b      	ldrb	r3, [r3, #16]
     b60:	2b00      	cmp	r3, #0
     b62:	d00b      	beq.n	b7c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     b64:	687b      	ldr	r3, [r7, #4]
     b66:	689b      	ldr	r3, [r3, #8]
     b68:	1c5a      	adds	r2, r3, #1
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	68d9      	ldr	r1, [r3, #12]
     b6e:	4b10      	ldr	r3, [pc, #64]	; (bb0 <advance_pointer+0x5c>)
     b70:	0010      	movs	r0, r2
     b72:	4798      	blx	r3
     b74:	000b      	movs	r3, r1
     b76:	001a      	movs	r2, r3
     b78:	687b      	ldr	r3, [r7, #4]
     b7a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     b7c:	687b      	ldr	r3, [r7, #4]
     b7e:	685b      	ldr	r3, [r3, #4]
     b80:	1c5a      	adds	r2, r3, #1
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	68d9      	ldr	r1, [r3, #12]
     b86:	4b0a      	ldr	r3, [pc, #40]	; (bb0 <advance_pointer+0x5c>)
     b88:	0010      	movs	r0, r2
     b8a:	4798      	blx	r3
     b8c:	000b      	movs	r3, r1
     b8e:	001a      	movs	r2, r3
     b90:	687b      	ldr	r3, [r7, #4]
     b92:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	685a      	ldr	r2, [r3, #4]
     b98:	687b      	ldr	r3, [r7, #4]
     b9a:	689b      	ldr	r3, [r3, #8]
     b9c:	1ad3      	subs	r3, r2, r3
     b9e:	425a      	negs	r2, r3
     ba0:	4153      	adcs	r3, r2
     ba2:	b2da      	uxtb	r2, r3
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	741a      	strb	r2, [r3, #16]
 }
     ba8:	46c0      	nop			; (mov r8, r8)
     baa:	46bd      	mov	sp, r7
     bac:	b002      	add	sp, #8
     bae:	bd80      	pop	{r7, pc}
     bb0:	0000b005 	.word	0x0000b005

00000bb4 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     bb4:	b580      	push	{r7, lr}
     bb6:	b082      	sub	sp, #8
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     bbc:	687b      	ldr	r3, [r7, #4]
     bbe:	2200      	movs	r2, #0
     bc0:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	689b      	ldr	r3, [r3, #8]
     bc6:	1c5a      	adds	r2, r3, #1
     bc8:	687b      	ldr	r3, [r7, #4]
     bca:	68d9      	ldr	r1, [r3, #12]
     bcc:	4b05      	ldr	r3, [pc, #20]	; (be4 <retreat_pointer+0x30>)
     bce:	0010      	movs	r0, r2
     bd0:	4798      	blx	r3
     bd2:	000b      	movs	r3, r1
     bd4:	001a      	movs	r2, r3
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	609a      	str	r2, [r3, #8]
 }
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	46bd      	mov	sp, r7
     bde:	b002      	add	sp, #8
     be0:	bd80      	pop	{r7, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	0000b005 	.word	0x0000b005

00000be8 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     be8:	b580      	push	{r7, lr}
     bea:	b084      	sub	sp, #16
     bec:	af00      	add	r7, sp, #0
     bee:	6078      	str	r0, [r7, #4]
     bf0:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     bf2:	2014      	movs	r0, #20
     bf4:	4b09      	ldr	r3, [pc, #36]	; (c1c <circular_buf_init+0x34>)
     bf6:	4798      	blx	r3
     bf8:	0003      	movs	r3, r0
     bfa:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     bfc:	68fb      	ldr	r3, [r7, #12]
     bfe:	687a      	ldr	r2, [r7, #4]
     c00:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     c02:	68fb      	ldr	r3, [r7, #12]
     c04:	683a      	ldr	r2, [r7, #0]
     c06:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     c08:	68fb      	ldr	r3, [r7, #12]
     c0a:	0018      	movs	r0, r3
     c0c:	4b04      	ldr	r3, [pc, #16]	; (c20 <circular_buf_init+0x38>)
     c0e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     c10:	68fb      	ldr	r3, [r7, #12]
 }
     c12:	0018      	movs	r0, r3
     c14:	46bd      	mov	sp, r7
     c16:	b004      	add	sp, #16
     c18:	bd80      	pop	{r7, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	0000b281 	.word	0x0000b281
     c20:	00000c25 	.word	0x00000c25

00000c24 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     c24:	b580      	push	{r7, lr}
     c26:	b082      	sub	sp, #8
     c28:	af00      	add	r7, sp, #0
     c2a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	2200      	movs	r2, #0
     c30:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	2200      	movs	r2, #0
     c36:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     c38:	687b      	ldr	r3, [r7, #4]
     c3a:	2200      	movs	r2, #0
     c3c:	741a      	strb	r2, [r3, #16]
 }
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	46bd      	mov	sp, r7
     c42:	b002      	add	sp, #8
     c44:	bd80      	pop	{r7, pc}
	...

00000c48 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     c48:	b580      	push	{r7, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	af00      	add	r7, sp, #0
     c4e:	6078      	str	r0, [r7, #4]
     c50:	000a      	movs	r2, r1
     c52:	1cfb      	adds	r3, r7, #3
     c54:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	681a      	ldr	r2, [r3, #0]
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	685b      	ldr	r3, [r3, #4]
     c5e:	18d3      	adds	r3, r2, r3
     c60:	1cfa      	adds	r2, r7, #3
     c62:	7812      	ldrb	r2, [r2, #0]
     c64:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	0018      	movs	r0, r3
     c6a:	4b03      	ldr	r3, [pc, #12]	; (c78 <circular_buf_put+0x30>)
     c6c:	4798      	blx	r3
 }
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	46bd      	mov	sp, r7
     c72:	b002      	add	sp, #8
     c74:	bd80      	pop	{r7, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	00000b55 	.word	0x00000b55

00000c7c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     c7c:	b580      	push	{r7, lr}
     c7e:	b084      	sub	sp, #16
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
     c84:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     c86:	2301      	movs	r3, #1
     c88:	425b      	negs	r3, r3
     c8a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	0018      	movs	r0, r3
     c90:	4b0d      	ldr	r3, [pc, #52]	; (cc8 <circular_buf_get+0x4c>)
     c92:	4798      	blx	r3
     c94:	0003      	movs	r3, r0
     c96:	001a      	movs	r2, r3
     c98:	2301      	movs	r3, #1
     c9a:	4053      	eors	r3, r2
     c9c:	b2db      	uxtb	r3, r3
     c9e:	2b00      	cmp	r3, #0
     ca0:	d00d      	beq.n	cbe <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     ca2:	687b      	ldr	r3, [r7, #4]
     ca4:	681a      	ldr	r2, [r3, #0]
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	689b      	ldr	r3, [r3, #8]
     caa:	18d3      	adds	r3, r2, r3
     cac:	781a      	ldrb	r2, [r3, #0]
     cae:	683b      	ldr	r3, [r7, #0]
     cb0:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	0018      	movs	r0, r3
     cb6:	4b05      	ldr	r3, [pc, #20]	; (ccc <circular_buf_get+0x50>)
     cb8:	4798      	blx	r3

		 r = 0;
     cba:	2300      	movs	r3, #0
     cbc:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     cbe:	68fb      	ldr	r3, [r7, #12]
 }
     cc0:	0018      	movs	r0, r3
     cc2:	46bd      	mov	sp, r7
     cc4:	b004      	add	sp, #16
     cc6:	bd80      	pop	{r7, pc}
     cc8:	00000cd1 	.word	0x00000cd1
     ccc:	00000bb5 	.word	0x00000bb5

00000cd0 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     cd0:	b580      	push	{r7, lr}
     cd2:	b082      	sub	sp, #8
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	7c1b      	ldrb	r3, [r3, #16]
     cdc:	2201      	movs	r2, #1
     cde:	4053      	eors	r3, r2
     ce0:	b2db      	uxtb	r3, r3
     ce2:	2b00      	cmp	r3, #0
     ce4:	d007      	beq.n	cf6 <circular_buf_empty+0x26>
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	685a      	ldr	r2, [r3, #4]
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	689b      	ldr	r3, [r3, #8]
     cee:	429a      	cmp	r2, r3
     cf0:	d101      	bne.n	cf6 <circular_buf_empty+0x26>
     cf2:	2301      	movs	r3, #1
     cf4:	e000      	b.n	cf8 <circular_buf_empty+0x28>
     cf6:	2300      	movs	r3, #0
     cf8:	1c1a      	adds	r2, r3, #0
     cfa:	2301      	movs	r3, #1
     cfc:	4013      	ands	r3, r2
     cfe:	b2db      	uxtb	r3, r3
 }
     d00:	0018      	movs	r0, r3
     d02:	46bd      	mov	sp, r7
     d04:	b002      	add	sp, #8
     d06:	bd80      	pop	{r7, pc}

00000d08 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	0002      	movs	r2, r0
     d10:	1dfb      	adds	r3, r7, #7
     d12:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d14:	4b06      	ldr	r3, [pc, #24]	; (d30 <system_interrupt_enable+0x28>)
     d16:	1dfa      	adds	r2, r7, #7
     d18:	7812      	ldrb	r2, [r2, #0]
     d1a:	0011      	movs	r1, r2
     d1c:	221f      	movs	r2, #31
     d1e:	400a      	ands	r2, r1
     d20:	2101      	movs	r1, #1
     d22:	4091      	lsls	r1, r2
     d24:	000a      	movs	r2, r1
     d26:	601a      	str	r2, [r3, #0]
}
     d28:	46c0      	nop			; (mov r8, r8)
     d2a:	46bd      	mov	sp, r7
     d2c:	b002      	add	sp, #8
     d2e:	bd80      	pop	{r7, pc}
     d30:	e000e100 	.word	0xe000e100

00000d34 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     d34:	b580      	push	{r7, lr}
     d36:	b082      	sub	sp, #8
     d38:	af00      	add	r7, sp, #0
     d3a:	0002      	movs	r2, r0
     d3c:	1dfb      	adds	r3, r7, #7
     d3e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d40:	4a07      	ldr	r2, [pc, #28]	; (d60 <system_interrupt_disable+0x2c>)
     d42:	1dfb      	adds	r3, r7, #7
     d44:	781b      	ldrb	r3, [r3, #0]
     d46:	0019      	movs	r1, r3
     d48:	231f      	movs	r3, #31
     d4a:	400b      	ands	r3, r1
     d4c:	2101      	movs	r1, #1
     d4e:	4099      	lsls	r1, r3
     d50:	000b      	movs	r3, r1
     d52:	0019      	movs	r1, r3
     d54:	2380      	movs	r3, #128	; 0x80
     d56:	50d1      	str	r1, [r2, r3]
}
     d58:	46c0      	nop			; (mov r8, r8)
     d5a:	46bd      	mov	sp, r7
     d5c:	b002      	add	sp, #8
     d5e:	bd80      	pop	{r7, pc}
     d60:	e000e100 	.word	0xe000e100

00000d64 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     d64:	b580      	push	{r7, lr}
     d66:	b084      	sub	sp, #16
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d6c:	687b      	ldr	r3, [r7, #4]
     d6e:	681b      	ldr	r3, [r3, #0]
     d70:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	69db      	ldr	r3, [r3, #28]
     d76:	1e5a      	subs	r2, r3, #1
     d78:	4193      	sbcs	r3, r2
     d7a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     d7c:	0018      	movs	r0, r3
     d7e:	46bd      	mov	sp, r7
     d80:	b004      	add	sp, #16
     d82:	bd80      	pop	{r7, pc}

00000d84 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     d84:	b580      	push	{r7, lr}
     d86:	b082      	sub	sp, #8
     d88:	af00      	add	r7, sp, #0
     d8a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d8c:	46c0      	nop			; (mov r8, r8)
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	0018      	movs	r0, r3
     d92:	4b04      	ldr	r3, [pc, #16]	; (da4 <_usart_wait_for_sync+0x20>)
     d94:	4798      	blx	r3
     d96:	1e03      	subs	r3, r0, #0
     d98:	d1f9      	bne.n	d8e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	46bd      	mov	sp, r7
     d9e:	b002      	add	sp, #8
     da0:	bd80      	pop	{r7, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	00000d65 	.word	0x00000d65

00000da8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     da8:	b580      	push	{r7, lr}
     daa:	b082      	sub	sp, #8
     dac:	af00      	add	r7, sp, #0
     dae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	2280      	movs	r2, #128	; 0x80
     db4:	05d2      	lsls	r2, r2, #23
     db6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	2200      	movs	r2, #0
     dbc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     dbe:	687b      	ldr	r3, [r7, #4]
     dc0:	22ff      	movs	r2, #255	; 0xff
     dc2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	2200      	movs	r2, #0
     dc8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	2200      	movs	r2, #0
     dce:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	2296      	movs	r2, #150	; 0x96
     dd4:	0192      	lsls	r2, r2, #6
     dd6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	2224      	movs	r2, #36	; 0x24
     ddc:	2101      	movs	r1, #1
     dde:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2225      	movs	r2, #37	; 0x25
     de4:	2101      	movs	r1, #1
     de6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	2226      	movs	r2, #38	; 0x26
     dec:	2100      	movs	r1, #0
     dee:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     df0:	687b      	ldr	r3, [r7, #4]
     df2:	2227      	movs	r2, #39	; 0x27
     df4:	2100      	movs	r1, #0
     df6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	2200      	movs	r2, #0
     dfc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	2288      	movs	r2, #136	; 0x88
     e02:	0352      	lsls	r2, r2, #13
     e04:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	222c      	movs	r2, #44	; 0x2c
     e0a:	2100      	movs	r1, #0
     e0c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	222d      	movs	r2, #45	; 0x2d
     e12:	2100      	movs	r1, #0
     e14:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	2200      	movs	r2, #0
     e1a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	2200      	movs	r2, #0
     e20:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	2200      	movs	r2, #0
     e26:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	2200      	movs	r2, #0
     e2c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	2200      	movs	r2, #0
     e32:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	2200      	movs	r2, #0
     e38:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	2200      	movs	r2, #0
     e3e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	2200      	movs	r2, #0
     e44:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	2200      	movs	r2, #0
     e4a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     e4c:	687b      	ldr	r3, [r7, #4]
     e4e:	2200      	movs	r2, #0
     e50:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	2213      	movs	r2, #19
     e56:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     e58:	687b      	ldr	r3, [r7, #4]
     e5a:	2200      	movs	r2, #0
     e5c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	46bd      	mov	sp, r7
     e62:	b002      	add	sp, #8
     e64:	bd80      	pop	{r7, pc}
	...

00000e68 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     e68:	b580      	push	{r7, lr}
     e6a:	b084      	sub	sp, #16
     e6c:	af00      	add	r7, sp, #0
     e6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e70:	687b      	ldr	r3, [r7, #4]
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	0018      	movs	r0, r3
     e7c:	4b09      	ldr	r3, [pc, #36]	; (ea4 <usart_enable+0x3c>)
     e7e:	4798      	blx	r3
     e80:	0003      	movs	r3, r0
     e82:	0018      	movs	r0, r3
     e84:	4b08      	ldr	r3, [pc, #32]	; (ea8 <usart_enable+0x40>)
     e86:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	0018      	movs	r0, r3
     e8c:	4b07      	ldr	r3, [pc, #28]	; (eac <usart_enable+0x44>)
     e8e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	2202      	movs	r2, #2
     e96:	431a      	orrs	r2, r3
     e98:	68fb      	ldr	r3, [r7, #12]
     e9a:	601a      	str	r2, [r3, #0]
}
     e9c:	46c0      	nop			; (mov r8, r8)
     e9e:	46bd      	mov	sp, r7
     ea0:	b004      	add	sp, #16
     ea2:	bd80      	pop	{r7, pc}
     ea4:	00004149 	.word	0x00004149
     ea8:	00000d09 	.word	0x00000d09
     eac:	00000d85 	.word	0x00000d85

00000eb0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     eb0:	b580      	push	{r7, lr}
     eb2:	b084      	sub	sp, #16
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     eb8:	687b      	ldr	r3, [r7, #4]
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	681b      	ldr	r3, [r3, #0]
     ec2:	0018      	movs	r0, r3
     ec4:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <usart_disable+0x40>)
     ec6:	4798      	blx	r3
     ec8:	0003      	movs	r3, r0
     eca:	0018      	movs	r0, r3
     ecc:	4b09      	ldr	r3, [pc, #36]	; (ef4 <usart_disable+0x44>)
     ece:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ed0:	687b      	ldr	r3, [r7, #4]
     ed2:	0018      	movs	r0, r3
     ed4:	4b08      	ldr	r3, [pc, #32]	; (ef8 <usart_disable+0x48>)
     ed6:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     ed8:	68fb      	ldr	r3, [r7, #12]
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	2202      	movs	r2, #2
     ede:	4393      	bics	r3, r2
     ee0:	001a      	movs	r2, r3
     ee2:	68fb      	ldr	r3, [r7, #12]
     ee4:	601a      	str	r2, [r3, #0]
}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	46bd      	mov	sp, r7
     eea:	b004      	add	sp, #16
     eec:	bd80      	pop	{r7, pc}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	00004149 	.word	0x00004149
     ef4:	00000d35 	.word	0x00000d35
     ef8:	00000d85 	.word	0x00000d85

00000efc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     efc:	b580      	push	{r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	af00      	add	r7, sp, #0
     f02:	6078      	str	r0, [r7, #4]
     f04:	000a      	movs	r2, r1
     f06:	1cfb      	adds	r3, r7, #3
     f08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	2231      	movs	r2, #49	; 0x31
     f0e:	5c9b      	ldrb	r3, [r3, r2]
     f10:	b25a      	sxtb	r2, r3
     f12:	1cfb      	adds	r3, r7, #3
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	2101      	movs	r1, #1
     f18:	4099      	lsls	r1, r3
     f1a:	000b      	movs	r3, r1
     f1c:	b25b      	sxtb	r3, r3
     f1e:	4313      	orrs	r3, r2
     f20:	b25b      	sxtb	r3, r3
     f22:	b2d9      	uxtb	r1, r3
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	2231      	movs	r2, #49	; 0x31
     f28:	5499      	strb	r1, [r3, r2]

}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	46bd      	mov	sp, r7
     f2e:	b002      	add	sp, #8
     f30:	bd80      	pop	{r7, pc}
	...

00000f34 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     f34:	b580      	push	{r7, lr}
     f36:	b082      	sub	sp, #8
     f38:	af00      	add	r7, sp, #0
     f3a:	6078      	str	r0, [r7, #4]
     f3c:	000a      	movs	r2, r1
     f3e:	1cfb      	adds	r3, r7, #3
     f40:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	1cfb      	adds	r3, r7, #3
     f46:	781b      	ldrb	r3, [r3, #0]
     f48:	b29a      	uxth	r2, r3
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	0011      	movs	r1, r2
     f4e:	0018      	movs	r0, r3
     f50:	4b04      	ldr	r3, [pc, #16]	; (f64 <usart_serial_putchar+0x30>)
     f52:	4798      	blx	r3
     f54:	1e03      	subs	r3, r0, #0
     f56:	d1f5      	bne.n	f44 <usart_serial_putchar+0x10>

	return STATUS_OK;
     f58:	2300      	movs	r3, #0
}
     f5a:	0018      	movs	r0, r3
     f5c:	46bd      	mov	sp, r7
     f5e:	b002      	add	sp, #8
     f60:	bd80      	pop	{r7, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	00005861 	.word	0x00005861

00000f68 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     f68:	b580      	push	{r7, lr}
     f6a:	b084      	sub	sp, #16
     f6c:	af00      	add	r7, sp, #0
     f6e:	6078      	str	r0, [r7, #4]
     f70:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     f72:	230e      	movs	r3, #14
     f74:	18fb      	adds	r3, r7, r3
     f76:	2200      	movs	r2, #0
     f78:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	230e      	movs	r3, #14
     f7e:	18fa      	adds	r2, r7, r3
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	0011      	movs	r1, r2
     f84:	0018      	movs	r0, r3
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <usart_serial_getchar+0x3c>)
     f88:	4798      	blx	r3
     f8a:	1e03      	subs	r3, r0, #0
     f8c:	d1f6      	bne.n	f7c <usart_serial_getchar+0x14>

	*c = temp;
     f8e:	230e      	movs	r3, #14
     f90:	18fb      	adds	r3, r7, r3
     f92:	881b      	ldrh	r3, [r3, #0]
     f94:	b2da      	uxtb	r2, r3
     f96:	683b      	ldr	r3, [r7, #0]
     f98:	701a      	strb	r2, [r3, #0]
}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	46bd      	mov	sp, r7
     f9e:	b004      	add	sp, #16
     fa0:	bd80      	pop	{r7, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	000058c5 	.word	0x000058c5

00000fa8 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     fa8:	b580      	push	{r7, lr}
     faa:	b084      	sub	sp, #16
     fac:	af00      	add	r7, sp, #0
     fae:	60f8      	str	r0, [r7, #12]
     fb0:	60b9      	str	r1, [r7, #8]
     fb2:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     fb4:	4b0d      	ldr	r3, [pc, #52]	; (fec <stdio_serial_init+0x44>)
     fb6:	68fa      	ldr	r2, [r7, #12]
     fb8:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     fba:	4b0d      	ldr	r3, [pc, #52]	; (ff0 <stdio_serial_init+0x48>)
     fbc:	4a0d      	ldr	r2, [pc, #52]	; (ff4 <stdio_serial_init+0x4c>)
     fbe:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     fc0:	4b0d      	ldr	r3, [pc, #52]	; (ff8 <stdio_serial_init+0x50>)
     fc2:	4a0e      	ldr	r2, [pc, #56]	; (ffc <stdio_serial_init+0x54>)
     fc4:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     fc6:	4b0e      	ldr	r3, [pc, #56]	; (1000 <stdio_serial_init+0x58>)
     fc8:	681b      	ldr	r3, [r3, #0]
     fca:	689b      	ldr	r3, [r3, #8]
     fcc:	2100      	movs	r1, #0
     fce:	0018      	movs	r0, r3
     fd0:	4b0c      	ldr	r3, [pc, #48]	; (1004 <stdio_serial_init+0x5c>)
     fd2:	4798      	blx	r3
	setbuf(stdin, NULL);
     fd4:	4b0a      	ldr	r3, [pc, #40]	; (1000 <stdio_serial_init+0x58>)
     fd6:	681b      	ldr	r3, [r3, #0]
     fd8:	685b      	ldr	r3, [r3, #4]
     fda:	2100      	movs	r1, #0
     fdc:	0018      	movs	r0, r3
     fde:	4b09      	ldr	r3, [pc, #36]	; (1004 <stdio_serial_init+0x5c>)
     fe0:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	46bd      	mov	sp, r7
     fe6:	b004      	add	sp, #16
     fe8:	bd80      	pop	{r7, pc}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	200009f8 	.word	0x200009f8
     ff0:	200009f4 	.word	0x200009f4
     ff4:	00000f35 	.word	0x00000f35
     ff8:	200009f0 	.word	0x200009f0
     ffc:	00000f69 	.word	0x00000f69
    1000:	20000030 	.word	0x20000030
    1004:	0000b42d 	.word	0x0000b42d

00001008 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole()
{
    1008:	b580      	push	{r7, lr}
    100a:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    100c:	2380      	movs	r3, #128	; 0x80
    100e:	00da      	lsls	r2, r3, #3
    1010:	4b0f      	ldr	r3, [pc, #60]	; (1050 <InitializeSerialConsole+0x48>)
    1012:	0011      	movs	r1, r2
    1014:	0018      	movs	r0, r3
    1016:	4b0f      	ldr	r3, [pc, #60]	; (1054 <InitializeSerialConsole+0x4c>)
    1018:	4798      	blx	r3
    101a:	0002      	movs	r2, r0
    101c:	4b0e      	ldr	r3, [pc, #56]	; (1058 <InitializeSerialConsole+0x50>)
    101e:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
    1020:	2380      	movs	r3, #128	; 0x80
    1022:	00da      	lsls	r2, r3, #3
    1024:	4b0d      	ldr	r3, [pc, #52]	; (105c <InitializeSerialConsole+0x54>)
    1026:	0011      	movs	r1, r2
    1028:	0018      	movs	r0, r3
    102a:	4b0a      	ldr	r3, [pc, #40]	; (1054 <InitializeSerialConsole+0x4c>)
    102c:	4798      	blx	r3
    102e:	0002      	movs	r2, r0
    1030:	4b0b      	ldr	r3, [pc, #44]	; (1060 <InitializeSerialConsole+0x58>)
    1032:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
    1034:	4b0b      	ldr	r3, [pc, #44]	; (1064 <InitializeSerialConsole+0x5c>)
    1036:	4798      	blx	r3
	configure_usart_callbacks();
    1038:	4b0b      	ldr	r3, [pc, #44]	; (1068 <InitializeSerialConsole+0x60>)
    103a:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    103c:	490b      	ldr	r1, [pc, #44]	; (106c <InitializeSerialConsole+0x64>)
    103e:	4b0c      	ldr	r3, [pc, #48]	; (1070 <InitializeSerialConsole+0x68>)
    1040:	2201      	movs	r2, #1
    1042:	0018      	movs	r0, r3
    1044:	4b0b      	ldr	r3, [pc, #44]	; (1074 <InitializeSerialConsole+0x6c>)
    1046:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
    1048:	46c0      	nop			; (mov r8, r8)
    104a:	46bd      	mov	sp, r7
    104c:	bd80      	pop	{r7, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	200005c8 	.word	0x200005c8
    1054:	00000be9 	.word	0x00000be9
    1058:	200001c0 	.word	0x200001c0
    105c:	200001c8 	.word	0x200001c8
    1060:	200009cc 	.word	0x200009cc
    1064:	0000113d 	.word	0x0000113d
    1068:	000011c5 	.word	0x000011c5
    106c:	200001c4 	.word	0x200001c4
    1070:	2000018c 	.word	0x2000018c
    1074:	00005b81 	.word	0x00005b81

00001078 <DeinitializeSerialConsole>:


void DeinitializeSerialConsole()
{
    1078:	b580      	push	{r7, lr}
    107a:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);
    107c:	4b03      	ldr	r3, [pc, #12]	; (108c <DeinitializeSerialConsole+0x14>)
    107e:	0018      	movs	r0, r3
    1080:	4b03      	ldr	r3, [pc, #12]	; (1090 <DeinitializeSerialConsole+0x18>)
    1082:	4798      	blx	r3
}
    1084:	46c0      	nop			; (mov r8, r8)
    1086:	46bd      	mov	sp, r7
    1088:	bd80      	pop	{r7, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	2000018c 	.word	0x2000018c
    1090:	00000eb1 	.word	0x00000eb1

00001094 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
    1094:	b580      	push	{r7, lr}
    1096:	b084      	sub	sp, #16
    1098:	af00      	add	r7, sp, #0
    109a:	6078      	str	r0, [r7, #4]
	if(string != NULL)
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	2b00      	cmp	r3, #0
    10a0:	d02a      	beq.n	10f8 <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
    10a2:	2300      	movs	r3, #0
    10a4:	60fb      	str	r3, [r7, #12]
    10a6:	e00b      	b.n	10c0 <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
    10a8:	4b15      	ldr	r3, [pc, #84]	; (1100 <SerialConsoleWriteString+0x6c>)
    10aa:	6818      	ldr	r0, [r3, #0]
    10ac:	687a      	ldr	r2, [r7, #4]
    10ae:	68fb      	ldr	r3, [r7, #12]
    10b0:	18d3      	adds	r3, r2, r3
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	0019      	movs	r1, r3
    10b6:	4b13      	ldr	r3, [pc, #76]	; (1104 <SerialConsoleWriteString+0x70>)
    10b8:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
    10ba:	68fb      	ldr	r3, [r7, #12]
    10bc:	3301      	adds	r3, #1
    10be:	60fb      	str	r3, [r7, #12]
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	0018      	movs	r0, r3
    10c4:	4b10      	ldr	r3, [pc, #64]	; (1108 <SerialConsoleWriteString+0x74>)
    10c6:	4798      	blx	r3
    10c8:	0002      	movs	r2, r0
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	429a      	cmp	r2, r3
    10ce:	d8eb      	bhi.n	10a8 <SerialConsoleWriteString+0x14>
		}
		
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    10d0:	4b0e      	ldr	r3, [pc, #56]	; (110c <SerialConsoleWriteString+0x78>)
    10d2:	2101      	movs	r1, #1
    10d4:	0018      	movs	r0, r3
    10d6:	4b0e      	ldr	r3, [pc, #56]	; (1110 <SerialConsoleWriteString+0x7c>)
    10d8:	4798      	blx	r3
    10da:	1e03      	subs	r3, r0, #0
    10dc:	d10c      	bne.n	10f8 <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    10de:	4b08      	ldr	r3, [pc, #32]	; (1100 <SerialConsoleWriteString+0x6c>)
    10e0:	681b      	ldr	r3, [r3, #0]
    10e2:	4a0c      	ldr	r2, [pc, #48]	; (1114 <SerialConsoleWriteString+0x80>)
    10e4:	0011      	movs	r1, r2
    10e6:	0018      	movs	r0, r3
    10e8:	4b0b      	ldr	r3, [pc, #44]	; (1118 <SerialConsoleWriteString+0x84>)
    10ea:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    10ec:	4909      	ldr	r1, [pc, #36]	; (1114 <SerialConsoleWriteString+0x80>)
    10ee:	4b07      	ldr	r3, [pc, #28]	; (110c <SerialConsoleWriteString+0x78>)
    10f0:	2201      	movs	r2, #1
    10f2:	0018      	movs	r0, r3
    10f4:	4b09      	ldr	r3, [pc, #36]	; (111c <SerialConsoleWriteString+0x88>)
    10f6:	4798      	blx	r3
		}
	}
}
    10f8:	46c0      	nop			; (mov r8, r8)
    10fa:	46bd      	mov	sp, r7
    10fc:	b004      	add	sp, #16
    10fe:	bd80      	pop	{r7, pc}
    1100:	200009cc 	.word	0x200009cc
    1104:	00000c49 	.word	0x00000c49
    1108:	0000b5fd 	.word	0x0000b5fd
    110c:	2000018c 	.word	0x2000018c
    1110:	00005bc9 	.word	0x00005bc9
    1114:	200009c8 	.word	0x200009c8
    1118:	00000c7d 	.word	0x00000c7d
    111c:	00005b39 	.word	0x00005b39

00001120 <LogMessage>:
* @fn			LogMessage (Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    1120:	b40e      	push	{r1, r2, r3}
    1122:	b580      	push	{r7, lr}
    1124:	b083      	sub	sp, #12
    1126:	af00      	add	r7, sp, #0
    1128:	0002      	movs	r2, r0
    112a:	1dfb      	adds	r3, r7, #7
    112c:	701a      	strb	r2, [r3, #0]


};
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	46bd      	mov	sp, r7
    1132:	b003      	add	sp, #12
    1134:	bc80      	pop	{r7}
    1136:	bc08      	pop	{r3}
    1138:	b003      	add	sp, #12
    113a:	4718      	bx	r3

0000113c <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
    113c:	b580      	push	{r7, lr}
    113e:	b090      	sub	sp, #64	; 0x40
    1140:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    1142:	003b      	movs	r3, r7
    1144:	0018      	movs	r0, r3
    1146:	4b17      	ldr	r3, [pc, #92]	; (11a4 <configure_usart+0x68>)
    1148:	4798      	blx	r3

	config_usart.baudrate    = 115200;
    114a:	003b      	movs	r3, r7
    114c:	22e1      	movs	r2, #225	; 0xe1
    114e:	0252      	lsls	r2, r2, #9
    1150:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1152:	003b      	movs	r3, r7
    1154:	22c4      	movs	r2, #196	; 0xc4
    1156:	0392      	lsls	r2, r2, #14
    1158:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    115a:	003b      	movs	r3, r7
    115c:	2201      	movs	r2, #1
    115e:	4252      	negs	r2, r2
    1160:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1162:	003b      	movs	r3, r7
    1164:	2201      	movs	r2, #1
    1166:	4252      	negs	r2, r2
    1168:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    116a:	003b      	movs	r3, r7
    116c:	4a0e      	ldr	r2, [pc, #56]	; (11a8 <configure_usart+0x6c>)
    116e:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1170:	003b      	movs	r3, r7
    1172:	4a0e      	ldr	r2, [pc, #56]	; (11ac <configure_usart+0x70>)
    1174:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	003a      	movs	r2, r7
    117a:	490d      	ldr	r1, [pc, #52]	; (11b0 <configure_usart+0x74>)
    117c:	4b0d      	ldr	r3, [pc, #52]	; (11b4 <configure_usart+0x78>)
    117e:	0018      	movs	r0, r3
    1180:	4b0d      	ldr	r3, [pc, #52]	; (11b8 <configure_usart+0x7c>)
    1182:	4798      	blx	r3
    1184:	1e03      	subs	r3, r0, #0
    1186:	d1f7      	bne.n	1178 <configure_usart+0x3c>
					  EDBG_CDC_MODULE, 
					  &config_usart) != STATUS_OK) 
	{

	}
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    1188:	003a      	movs	r2, r7
    118a:	4909      	ldr	r1, [pc, #36]	; (11b0 <configure_usart+0x74>)
    118c:	4b09      	ldr	r3, [pc, #36]	; (11b4 <configure_usart+0x78>)
    118e:	0018      	movs	r0, r3
    1190:	4b0a      	ldr	r3, [pc, #40]	; (11bc <configure_usart+0x80>)
    1192:	4798      	blx	r3
	usart_enable(&usart_instance);
    1194:	4b07      	ldr	r3, [pc, #28]	; (11b4 <configure_usart+0x78>)
    1196:	0018      	movs	r0, r3
    1198:	4b09      	ldr	r3, [pc, #36]	; (11c0 <configure_usart+0x84>)
    119a:	4798      	blx	r3
}
    119c:	46c0      	nop			; (mov r8, r8)
    119e:	46bd      	mov	sp, r7
    11a0:	b010      	add	sp, #64	; 0x40
    11a2:	bd80      	pop	{r7, pc}
    11a4:	00000da9 	.word	0x00000da9
    11a8:	002a0003 	.word	0x002a0003
    11ac:	002b0003 	.word	0x002b0003
    11b0:	42001800 	.word	0x42001800
    11b4:	2000018c 	.word	0x2000018c
    11b8:	000055ed 	.word	0x000055ed
    11bc:	00000fa9 	.word	0x00000fa9
    11c0:	00000e69 	.word	0x00000e69

000011c4 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
    11c8:	490c      	ldr	r1, [pc, #48]	; (11fc <configure_usart_callbacks+0x38>)
    11ca:	4b0d      	ldr	r3, [pc, #52]	; (1200 <configure_usart_callbacks+0x3c>)
    11cc:	2200      	movs	r2, #0
    11ce:	0018      	movs	r0, r3
    11d0:	4b0c      	ldr	r3, [pc, #48]	; (1204 <configure_usart_callbacks+0x40>)
    11d2:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    11d4:	490c      	ldr	r1, [pc, #48]	; (1208 <configure_usart_callbacks+0x44>)
    11d6:	4b0a      	ldr	r3, [pc, #40]	; (1200 <configure_usart_callbacks+0x3c>)
    11d8:	2201      	movs	r2, #1
    11da:	0018      	movs	r0, r3
    11dc:	4b09      	ldr	r3, [pc, #36]	; (1204 <configure_usart_callbacks+0x40>)
    11de:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    11e0:	4b07      	ldr	r3, [pc, #28]	; (1200 <configure_usart_callbacks+0x3c>)
    11e2:	2100      	movs	r1, #0
    11e4:	0018      	movs	r0, r3
    11e6:	4b09      	ldr	r3, [pc, #36]	; (120c <configure_usart_callbacks+0x48>)
    11e8:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    11ea:	4b05      	ldr	r3, [pc, #20]	; (1200 <configure_usart_callbacks+0x3c>)
    11ec:	2101      	movs	r1, #1
    11ee:	0018      	movs	r0, r3
    11f0:	4b06      	ldr	r3, [pc, #24]	; (120c <configure_usart_callbacks+0x48>)
    11f2:	4798      	blx	r3
}
    11f4:	46c0      	nop			; (mov r8, r8)
    11f6:	46bd      	mov	sp, r7
    11f8:	bd80      	pop	{r7, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	00001281 	.word	0x00001281
    1200:	2000018c 	.word	0x2000018c
    1204:	00005af1 	.word	0x00005af1
    1208:	00001211 	.word	0x00001211
    120c:	00000efd 	.word	0x00000efd

00001210 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
    1210:	b580      	push	{r7, lr}
    1212:	b084      	sub	sp, #16
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
	//Order Echo
	SerialConsoleWriteString(&latestRx);
    1218:	4b13      	ldr	r3, [pc, #76]	; (1268 <usart_read_callback+0x58>)
    121a:	0018      	movs	r0, r3
    121c:	4b13      	ldr	r3, [pc, #76]	; (126c <usart_read_callback+0x5c>)
    121e:	4798      	blx	r3
	if(latestRx == 0x08)
    1220:	4b11      	ldr	r3, [pc, #68]	; (1268 <usart_read_callback+0x58>)
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	2b08      	cmp	r3, #8
    1226:	d10c      	bne.n	1242 <usart_read_callback+0x32>
	{
	char a[3];
	a[0] = 0x20;
    1228:	230c      	movs	r3, #12
    122a:	18fb      	adds	r3, r7, r3
    122c:	2220      	movs	r2, #32
    122e:	701a      	strb	r2, [r3, #0]
	a[1]= 0x08;
    1230:	230c      	movs	r3, #12
    1232:	18fb      	adds	r3, r7, r3
    1234:	2208      	movs	r2, #8
    1236:	705a      	strb	r2, [r3, #1]
	SerialConsoleWriteString(&a);
    1238:	230c      	movs	r3, #12
    123a:	18fb      	adds	r3, r7, r3
    123c:	0018      	movs	r0, r3
    123e:	4b0b      	ldr	r3, [pc, #44]	; (126c <usart_read_callback+0x5c>)
    1240:	4798      	blx	r3
	}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    1242:	4b0b      	ldr	r3, [pc, #44]	; (1270 <usart_read_callback+0x60>)
    1244:	681a      	ldr	r2, [r3, #0]
    1246:	4b08      	ldr	r3, [pc, #32]	; (1268 <usart_read_callback+0x58>)
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	0019      	movs	r1, r3
    124c:	0010      	movs	r0, r2
    124e:	4b09      	ldr	r3, [pc, #36]	; (1274 <usart_read_callback+0x64>)
    1250:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    1252:	4905      	ldr	r1, [pc, #20]	; (1268 <usart_read_callback+0x58>)
    1254:	4b08      	ldr	r3, [pc, #32]	; (1278 <usart_read_callback+0x68>)
    1256:	2201      	movs	r2, #1
    1258:	0018      	movs	r0, r3
    125a:	4b08      	ldr	r3, [pc, #32]	; (127c <usart_read_callback+0x6c>)
    125c:	4798      	blx	r3
}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	46bd      	mov	sp, r7
    1262:	b004      	add	sp, #16
    1264:	bd80      	pop	{r7, pc}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	200001c4 	.word	0x200001c4
    126c:	00001095 	.word	0x00001095
    1270:	200001c0 	.word	0x200001c0
    1274:	00000c49 	.word	0x00000c49
    1278:	2000018c 	.word	0x2000018c
    127c:	00005b81 	.word	0x00005b81

00001280 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    1280:	b580      	push	{r7, lr}
    1282:	b082      	sub	sp, #8
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    1288:	4b09      	ldr	r3, [pc, #36]	; (12b0 <usart_write_callback+0x30>)
    128a:	681b      	ldr	r3, [r3, #0]
    128c:	4a09      	ldr	r2, [pc, #36]	; (12b4 <usart_write_callback+0x34>)
    128e:	0011      	movs	r1, r2
    1290:	0018      	movs	r0, r3
    1292:	4b09      	ldr	r3, [pc, #36]	; (12b8 <usart_write_callback+0x38>)
    1294:	4798      	blx	r3
    1296:	0003      	movs	r3, r0
    1298:	3301      	adds	r3, #1
    129a:	d005      	beq.n	12a8 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    129c:	4905      	ldr	r1, [pc, #20]	; (12b4 <usart_write_callback+0x34>)
    129e:	4b07      	ldr	r3, [pc, #28]	; (12bc <usart_write_callback+0x3c>)
    12a0:	2201      	movs	r2, #1
    12a2:	0018      	movs	r0, r3
    12a4:	4b06      	ldr	r3, [pc, #24]	; (12c0 <usart_write_callback+0x40>)
    12a6:	4798      	blx	r3
	}
	
}
    12a8:	46c0      	nop			; (mov r8, r8)
    12aa:	46bd      	mov	sp, r7
    12ac:	b002      	add	sp, #8
    12ae:	bd80      	pop	{r7, pc}
    12b0:	200009cc 	.word	0x200009cc
    12b4:	200009c8 	.word	0x200009c8
    12b8:	00000c7d 	.word	0x00000c7d
    12bc:	2000018c 	.word	0x2000018c
    12c0:	00005b39 	.word	0x00005b39

000012c4 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    12c4:	b590      	push	{r4, r7, lr}
    12c6:	b087      	sub	sp, #28
    12c8:	af00      	add	r7, sp, #0
    12ca:	60f8      	str	r0, [r7, #12]
    12cc:	000c      	movs	r4, r1
    12ce:	0010      	movs	r0, r2
    12d0:	0019      	movs	r1, r3
    12d2:	230a      	movs	r3, #10
    12d4:	18fb      	adds	r3, r7, r3
    12d6:	1c22      	adds	r2, r4, #0
    12d8:	801a      	strh	r2, [r3, #0]
    12da:	2308      	movs	r3, #8
    12dc:	18fb      	adds	r3, r7, r3
    12de:	1c02      	adds	r2, r0, #0
    12e0:	801a      	strh	r2, [r3, #0]
    12e2:	1dfb      	adds	r3, r7, #7
    12e4:	1c0a      	adds	r2, r1, #0
    12e6:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    12e8:	230a      	movs	r3, #10
    12ea:	18fb      	adds	r3, r7, r3
    12ec:	881a      	ldrh	r2, [r3, #0]
    12ee:	2308      	movs	r3, #8
    12f0:	18fb      	adds	r3, r7, r3
    12f2:	881b      	ldrh	r3, [r3, #0]
    12f4:	1ad3      	subs	r3, r2, r3
    12f6:	3307      	adds	r3, #7
    12f8:	2b00      	cmp	r3, #0
    12fa:	da00      	bge.n	12fe <SDMMC_UNSTUFF_BITS+0x3a>
    12fc:	3307      	adds	r3, #7
    12fe:	10db      	asrs	r3, r3, #3
    1300:	3b01      	subs	r3, #1
    1302:	68fa      	ldr	r2, [r7, #12]
    1304:	18d3      	adds	r3, r2, r3
    1306:	781b      	ldrb	r3, [r3, #0]
    1308:	0019      	movs	r1, r3
    130a:	2308      	movs	r3, #8
    130c:	18fb      	adds	r3, r7, r3
    130e:	881b      	ldrh	r3, [r3, #0]
    1310:	2207      	movs	r2, #7
    1312:	4013      	ands	r3, r2
    1314:	4119      	asrs	r1, r3
    1316:	000b      	movs	r3, r1
    1318:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    131a:	2308      	movs	r3, #8
    131c:	18fb      	adds	r3, r7, r3
    131e:	881b      	ldrh	r3, [r3, #0]
    1320:	2207      	movs	r2, #7
    1322:	401a      	ands	r2, r3
    1324:	1dfb      	adds	r3, r7, #7
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	18d3      	adds	r3, r2, r3
    132a:	2b08      	cmp	r3, #8
    132c:	dd1c      	ble.n	1368 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    132e:	230a      	movs	r3, #10
    1330:	18fb      	adds	r3, r7, r3
    1332:	881a      	ldrh	r2, [r3, #0]
    1334:	2308      	movs	r3, #8
    1336:	18fb      	adds	r3, r7, r3
    1338:	881b      	ldrh	r3, [r3, #0]
    133a:	1ad3      	subs	r3, r2, r3
    133c:	3307      	adds	r3, #7
    133e:	2b00      	cmp	r3, #0
    1340:	da00      	bge.n	1344 <SDMMC_UNSTUFF_BITS+0x80>
    1342:	3307      	adds	r3, #7
    1344:	10db      	asrs	r3, r3, #3
    1346:	3b02      	subs	r3, #2
    1348:	68fa      	ldr	r2, [r7, #12]
    134a:	18d3      	adds	r3, r2, r3
    134c:	781b      	ldrb	r3, [r3, #0]
    134e:	0019      	movs	r1, r3
    1350:	2308      	movs	r3, #8
    1352:	18fb      	adds	r3, r7, r3
    1354:	881b      	ldrh	r3, [r3, #0]
    1356:	2207      	movs	r2, #7
    1358:	4013      	ands	r3, r2
    135a:	2208      	movs	r2, #8
    135c:	1ad3      	subs	r3, r2, r3
    135e:	4099      	lsls	r1, r3
    1360:	000b      	movs	r3, r1
    1362:	697a      	ldr	r2, [r7, #20]
    1364:	4313      	orrs	r3, r2
    1366:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    1368:	2308      	movs	r3, #8
    136a:	18fb      	adds	r3, r7, r3
    136c:	881b      	ldrh	r3, [r3, #0]
    136e:	2207      	movs	r2, #7
    1370:	401a      	ands	r2, r3
    1372:	1dfb      	adds	r3, r7, #7
    1374:	781b      	ldrb	r3, [r3, #0]
    1376:	18d3      	adds	r3, r2, r3
    1378:	2b10      	cmp	r3, #16
    137a:	dd1c      	ble.n	13b6 <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    137c:	230a      	movs	r3, #10
    137e:	18fb      	adds	r3, r7, r3
    1380:	881a      	ldrh	r2, [r3, #0]
    1382:	2308      	movs	r3, #8
    1384:	18fb      	adds	r3, r7, r3
    1386:	881b      	ldrh	r3, [r3, #0]
    1388:	1ad3      	subs	r3, r2, r3
    138a:	3307      	adds	r3, #7
    138c:	2b00      	cmp	r3, #0
    138e:	da00      	bge.n	1392 <SDMMC_UNSTUFF_BITS+0xce>
    1390:	3307      	adds	r3, #7
    1392:	10db      	asrs	r3, r3, #3
    1394:	3b03      	subs	r3, #3
    1396:	68fa      	ldr	r2, [r7, #12]
    1398:	18d3      	adds	r3, r2, r3
    139a:	781b      	ldrb	r3, [r3, #0]
    139c:	0019      	movs	r1, r3
    139e:	2308      	movs	r3, #8
    13a0:	18fb      	adds	r3, r7, r3
    13a2:	881b      	ldrh	r3, [r3, #0]
    13a4:	2207      	movs	r2, #7
    13a6:	4013      	ands	r3, r2
    13a8:	2210      	movs	r2, #16
    13aa:	1ad3      	subs	r3, r2, r3
    13ac:	4099      	lsls	r1, r3
    13ae:	000b      	movs	r3, r1
    13b0:	697a      	ldr	r2, [r7, #20]
    13b2:	4313      	orrs	r3, r2
    13b4:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    13b6:	2308      	movs	r3, #8
    13b8:	18fb      	adds	r3, r7, r3
    13ba:	881b      	ldrh	r3, [r3, #0]
    13bc:	2207      	movs	r2, #7
    13be:	401a      	ands	r2, r3
    13c0:	1dfb      	adds	r3, r7, #7
    13c2:	781b      	ldrb	r3, [r3, #0]
    13c4:	18d3      	adds	r3, r2, r3
    13c6:	2b10      	cmp	r3, #16
    13c8:	dd1c      	ble.n	1404 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    13ca:	230a      	movs	r3, #10
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	881a      	ldrh	r2, [r3, #0]
    13d0:	2308      	movs	r3, #8
    13d2:	18fb      	adds	r3, r7, r3
    13d4:	881b      	ldrh	r3, [r3, #0]
    13d6:	1ad3      	subs	r3, r2, r3
    13d8:	3307      	adds	r3, #7
    13da:	2b00      	cmp	r3, #0
    13dc:	da00      	bge.n	13e0 <SDMMC_UNSTUFF_BITS+0x11c>
    13de:	3307      	adds	r3, #7
    13e0:	10db      	asrs	r3, r3, #3
    13e2:	3b03      	subs	r3, #3
    13e4:	68fa      	ldr	r2, [r7, #12]
    13e6:	18d3      	adds	r3, r2, r3
    13e8:	781b      	ldrb	r3, [r3, #0]
    13ea:	0019      	movs	r1, r3
    13ec:	2308      	movs	r3, #8
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	881b      	ldrh	r3, [r3, #0]
    13f2:	2207      	movs	r2, #7
    13f4:	4013      	ands	r3, r2
    13f6:	2210      	movs	r2, #16
    13f8:	1ad3      	subs	r3, r2, r3
    13fa:	4099      	lsls	r1, r3
    13fc:	000b      	movs	r3, r1
    13fe:	697a      	ldr	r2, [r7, #20]
    1400:	4313      	orrs	r3, r2
    1402:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    1404:	1dfb      	adds	r3, r7, #7
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	2201      	movs	r2, #1
    140a:	409a      	lsls	r2, r3
    140c:	0013      	movs	r3, r2
    140e:	1e5a      	subs	r2, r3, #1
    1410:	697b      	ldr	r3, [r7, #20]
    1412:	4013      	ands	r3, r2
    1414:	617b      	str	r3, [r7, #20]
	return value;
    1416:	697b      	ldr	r3, [r7, #20]
}
    1418:	0018      	movs	r0, r3
    141a:	46bd      	mov	sp, r7
    141c:	b007      	add	sp, #28
    141e:	bd90      	pop	{r4, r7, pc}

00001420 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    1420:	b580      	push	{r7, lr}
    1422:	b082      	sub	sp, #8
    1424:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    1426:	4b23      	ldr	r3, [pc, #140]	; (14b4 <mmc_spi_op_cond+0x94>)
    1428:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    142a:	4b23      	ldr	r3, [pc, #140]	; (14b8 <mmc_spi_op_cond+0x98>)
    142c:	2100      	movs	r1, #0
    142e:	0018      	movs	r0, r3
    1430:	4b22      	ldr	r3, [pc, #136]	; (14bc <mmc_spi_op_cond+0x9c>)
    1432:	4798      	blx	r3
    1434:	0003      	movs	r3, r0
    1436:	001a      	movs	r2, r3
    1438:	2301      	movs	r3, #1
    143a:	4053      	eors	r3, r2
    143c:	b2db      	uxtb	r3, r3
    143e:	2b00      	cmp	r3, #0
    1440:	d001      	beq.n	1446 <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    1442:	2300      	movs	r3, #0
    1444:	e031      	b.n	14aa <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    1446:	4b1e      	ldr	r3, [pc, #120]	; (14c0 <mmc_spi_op_cond+0xa0>)
    1448:	4798      	blx	r3
    144a:	0003      	movs	r3, r0
    144c:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    144e:	683b      	ldr	r3, [r7, #0]
    1450:	2201      	movs	r2, #1
    1452:	4013      	ands	r3, r2
    1454:	d006      	beq.n	1464 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    1456:	687b      	ldr	r3, [r7, #4]
    1458:	1e5a      	subs	r2, r3, #1
    145a:	607a      	str	r2, [r7, #4]
    145c:	2b00      	cmp	r3, #0
    145e:	d1e4      	bne.n	142a <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    1460:	2300      	movs	r3, #0
    1462:	e022      	b.n	14aa <mmc_spi_op_cond+0x8a>
			break;
    1464:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    1466:	4b17      	ldr	r3, [pc, #92]	; (14c4 <mmc_spi_op_cond+0xa4>)
    1468:	2100      	movs	r1, #0
    146a:	0018      	movs	r0, r3
    146c:	4b13      	ldr	r3, [pc, #76]	; (14bc <mmc_spi_op_cond+0x9c>)
    146e:	4798      	blx	r3
    1470:	0003      	movs	r3, r0
    1472:	001a      	movs	r2, r3
    1474:	2301      	movs	r3, #1
    1476:	4053      	eors	r3, r2
    1478:	b2db      	uxtb	r3, r3
    147a:	2b00      	cmp	r3, #0
    147c:	d001      	beq.n	1482 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    147e:	2300      	movs	r3, #0
    1480:	e013      	b.n	14aa <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    1482:	4b0f      	ldr	r3, [pc, #60]	; (14c0 <mmc_spi_op_cond+0xa0>)
    1484:	4798      	blx	r3
    1486:	0002      	movs	r2, r0
    1488:	23c0      	movs	r3, #192	; 0xc0
    148a:	05db      	lsls	r3, r3, #23
    148c:	401a      	ands	r2, r3
    148e:	2380      	movs	r3, #128	; 0x80
    1490:	05db      	lsls	r3, r3, #23
    1492:	429a      	cmp	r2, r3
    1494:	d108      	bne.n	14a8 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    1496:	4b0c      	ldr	r3, [pc, #48]	; (14c8 <mmc_spi_op_cond+0xa8>)
    1498:	681a      	ldr	r2, [r3, #0]
    149a:	4b0b      	ldr	r3, [pc, #44]	; (14c8 <mmc_spi_op_cond+0xa8>)
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	7adb      	ldrb	r3, [r3, #11]
    14a0:	2108      	movs	r1, #8
    14a2:	430b      	orrs	r3, r1
    14a4:	b2db      	uxtb	r3, r3
    14a6:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    14a8:	2301      	movs	r3, #1
}
    14aa:	0018      	movs	r0, r3
    14ac:	46bd      	mov	sp, r7
    14ae:	b002      	add	sp, #8
    14b0:	bd80      	pop	{r7, pc}
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	00001bee 	.word	0x00001bee
    14b8:	00001101 	.word	0x00001101
    14bc:	00002eb9 	.word	0x00002eb9
    14c0:	000030f9 	.word	0x000030f9
    14c4:	0000053a 	.word	0x0000053a
    14c8:	200000e0 	.word	0x200000e0

000014cc <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    14cc:	b580      	push	{r7, lr}
    14ce:	b086      	sub	sp, #24
    14d0:	af00      	add	r7, sp, #0
    14d2:	0002      	movs	r2, r0
    14d4:	1dfb      	adds	r3, r7, #7
    14d6:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    14d8:	4b2e      	ldr	r3, [pc, #184]	; (1594 <sd_spi_op_cond+0xc8>)
    14da:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    14dc:	4b2e      	ldr	r3, [pc, #184]	; (1598 <sd_spi_op_cond+0xcc>)
    14de:	2100      	movs	r1, #0
    14e0:	0018      	movs	r0, r3
    14e2:	4b2e      	ldr	r3, [pc, #184]	; (159c <sd_spi_op_cond+0xd0>)
    14e4:	4798      	blx	r3
    14e6:	0003      	movs	r3, r0
    14e8:	001a      	movs	r2, r3
    14ea:	2301      	movs	r3, #1
    14ec:	4053      	eors	r3, r2
    14ee:	b2db      	uxtb	r3, r3
    14f0:	2b00      	cmp	r3, #0
    14f2:	d001      	beq.n	14f8 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    14f4:	2300      	movs	r3, #0
    14f6:	e048      	b.n	158a <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    14f8:	2300      	movs	r3, #0
    14fa:	617b      	str	r3, [r7, #20]
		if (v2) {
    14fc:	1dfb      	adds	r3, r7, #7
    14fe:	781b      	ldrb	r3, [r3, #0]
    1500:	2b00      	cmp	r3, #0
    1502:	d004      	beq.n	150e <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    1504:	697b      	ldr	r3, [r7, #20]
    1506:	2280      	movs	r2, #128	; 0x80
    1508:	05d2      	lsls	r2, r2, #23
    150a:	4313      	orrs	r3, r2
    150c:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    150e:	697b      	ldr	r3, [r7, #20]
    1510:	4a23      	ldr	r2, [pc, #140]	; (15a0 <sd_spi_op_cond+0xd4>)
    1512:	0019      	movs	r1, r3
    1514:	0010      	movs	r0, r2
    1516:	4b21      	ldr	r3, [pc, #132]	; (159c <sd_spi_op_cond+0xd0>)
    1518:	4798      	blx	r3
    151a:	0003      	movs	r3, r0
    151c:	001a      	movs	r2, r3
    151e:	2301      	movs	r3, #1
    1520:	4053      	eors	r3, r2
    1522:	b2db      	uxtb	r3, r3
    1524:	2b00      	cmp	r3, #0
    1526:	d001      	beq.n	152c <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    1528:	2300      	movs	r3, #0
    152a:	e02e      	b.n	158a <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    152c:	4b1d      	ldr	r3, [pc, #116]	; (15a4 <sd_spi_op_cond+0xd8>)
    152e:	4798      	blx	r3
    1530:	0003      	movs	r3, r0
    1532:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    1534:	68fb      	ldr	r3, [r7, #12]
    1536:	2201      	movs	r2, #1
    1538:	4013      	ands	r3, r2
    153a:	d006      	beq.n	154a <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    153c:	693b      	ldr	r3, [r7, #16]
    153e:	1e5a      	subs	r2, r3, #1
    1540:	613a      	str	r2, [r7, #16]
    1542:	2b00      	cmp	r3, #0
    1544:	d1ca      	bne.n	14dc <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    1546:	2300      	movs	r3, #0
    1548:	e01f      	b.n	158a <sd_spi_op_cond+0xbe>
			break;
    154a:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    154c:	4b16      	ldr	r3, [pc, #88]	; (15a8 <sd_spi_op_cond+0xdc>)
    154e:	2100      	movs	r1, #0
    1550:	0018      	movs	r0, r3
    1552:	4b12      	ldr	r3, [pc, #72]	; (159c <sd_spi_op_cond+0xd0>)
    1554:	4798      	blx	r3
    1556:	0003      	movs	r3, r0
    1558:	001a      	movs	r2, r3
    155a:	2301      	movs	r3, #1
    155c:	4053      	eors	r3, r2
    155e:	b2db      	uxtb	r3, r3
    1560:	2b00      	cmp	r3, #0
    1562:	d001      	beq.n	1568 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1564:	2300      	movs	r3, #0
    1566:	e010      	b.n	158a <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    1568:	4b0e      	ldr	r3, [pc, #56]	; (15a4 <sd_spi_op_cond+0xd8>)
    156a:	4798      	blx	r3
    156c:	0002      	movs	r2, r0
    156e:	2380      	movs	r3, #128	; 0x80
    1570:	05db      	lsls	r3, r3, #23
    1572:	4013      	ands	r3, r2
    1574:	d008      	beq.n	1588 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    1576:	4b0d      	ldr	r3, [pc, #52]	; (15ac <sd_spi_op_cond+0xe0>)
    1578:	681a      	ldr	r2, [r3, #0]
    157a:	4b0c      	ldr	r3, [pc, #48]	; (15ac <sd_spi_op_cond+0xe0>)
    157c:	681b      	ldr	r3, [r3, #0]
    157e:	7adb      	ldrb	r3, [r3, #11]
    1580:	2108      	movs	r1, #8
    1582:	430b      	orrs	r3, r1
    1584:	b2db      	uxtb	r3, r3
    1586:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    1588:	2301      	movs	r3, #1
}
    158a:	0018      	movs	r0, r3
    158c:	46bd      	mov	sp, r7
    158e:	b006      	add	sp, #24
    1590:	bd80      	pop	{r7, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	00001bee 	.word	0x00001bee
    1598:	00001137 	.word	0x00001137
    159c:	00002eb9 	.word	0x00002eb9
    15a0:	00001129 	.word	0x00001129
    15a4:	000030f9 	.word	0x000030f9
    15a8:	0000053a 	.word	0x0000053a
    15ac:	200000e0 	.word	0x200000e0

000015b0 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    15b0:	b580      	push	{r7, lr}
    15b2:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    15b4:	2301      	movs	r3, #1
}
    15b6:	0018      	movs	r0, r3
    15b8:	46bd      	mov	sp, r7
    15ba:	bd80      	pop	{r7, pc}

000015bc <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    15bc:	b580      	push	{r7, lr}
    15be:	b084      	sub	sp, #16
    15c0:	af00      	add	r7, sp, #0
    15c2:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	2200      	movs	r2, #0
    15c8:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    15ca:	23d5      	movs	r3, #213	; 0xd5
    15cc:	005b      	lsls	r3, r3, #1
    15ce:	4a14      	ldr	r2, [pc, #80]	; (1620 <sd_cmd8+0x64>)
    15d0:	0019      	movs	r1, r3
    15d2:	0010      	movs	r0, r2
    15d4:	4b13      	ldr	r3, [pc, #76]	; (1624 <sd_cmd8+0x68>)
    15d6:	4798      	blx	r3
    15d8:	0003      	movs	r3, r0
    15da:	001a      	movs	r2, r3
    15dc:	2301      	movs	r3, #1
    15de:	4053      	eors	r3, r2
    15e0:	b2db      	uxtb	r3, r3
    15e2:	2b00      	cmp	r3, #0
    15e4:	d001      	beq.n	15ea <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    15e6:	2301      	movs	r3, #1
    15e8:	e015      	b.n	1616 <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    15ea:	4b0f      	ldr	r3, [pc, #60]	; (1628 <sd_cmd8+0x6c>)
    15ec:	4798      	blx	r3
    15ee:	0003      	movs	r3, r0
    15f0:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    15f2:	68fb      	ldr	r3, [r7, #12]
    15f4:	3301      	adds	r3, #1
    15f6:	d101      	bne.n	15fc <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    15f8:	2301      	movs	r3, #1
    15fa:	e00c      	b.n	1616 <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    15fc:	68fb      	ldr	r3, [r7, #12]
    15fe:	051b      	lsls	r3, r3, #20
    1600:	0d1a      	lsrs	r2, r3, #20
    1602:	23d5      	movs	r3, #213	; 0xd5
    1604:	005b      	lsls	r3, r3, #1
    1606:	429a      	cmp	r2, r3
    1608:	d001      	beq.n	160e <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    160a:	2300      	movs	r3, #0
    160c:	e003      	b.n	1616 <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    160e:	687b      	ldr	r3, [r7, #4]
    1610:	2201      	movs	r2, #1
    1612:	701a      	strb	r2, [r3, #0]
	return true;
    1614:	2301      	movs	r3, #1
}
    1616:	0018      	movs	r0, r3
    1618:	46bd      	mov	sp, r7
    161a:	b004      	add	sp, #16
    161c:	bd80      	pop	{r7, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	00005508 	.word	0x00005508
    1624:	00002eb9 	.word	0x00002eb9
    1628:	000030f9 	.word	0x000030f9

0000162c <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    162c:	b590      	push	{r4, r7, lr}
    162e:	b089      	sub	sp, #36	; 0x24
    1630:	af02      	add	r7, sp, #8
    1632:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    1634:	2380      	movs	r3, #128	; 0x80
    1636:	009a      	lsls	r2, r3, #2
    1638:	4841      	ldr	r0, [pc, #260]	; (1740 <mmc_cmd8+0x114>)
    163a:	2300      	movs	r3, #0
    163c:	9300      	str	r3, [sp, #0]
    163e:	2301      	movs	r3, #1
    1640:	2100      	movs	r1, #0
    1642:	4c40      	ldr	r4, [pc, #256]	; (1744 <mmc_cmd8+0x118>)
    1644:	47a0      	blx	r4
    1646:	0003      	movs	r3, r0
    1648:	001a      	movs	r2, r3
    164a:	2301      	movs	r3, #1
    164c:	4053      	eors	r3, r2
    164e:	b2db      	uxtb	r3, r3
    1650:	2b00      	cmp	r3, #0
    1652:	d001      	beq.n	1658 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    1654:	2300      	movs	r3, #0
    1656:	e06e      	b.n	1736 <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    1658:	2316      	movs	r3, #22
    165a:	18fb      	adds	r3, r7, r3
    165c:	2200      	movs	r2, #0
    165e:	801a      	strh	r2, [r3, #0]
    1660:	e014      	b.n	168c <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    1662:	2310      	movs	r3, #16
    1664:	18fb      	adds	r3, r7, r3
    1666:	0018      	movs	r0, r3
    1668:	4b37      	ldr	r3, [pc, #220]	; (1748 <mmc_cmd8+0x11c>)
    166a:	4798      	blx	r3
    166c:	0003      	movs	r3, r0
    166e:	001a      	movs	r2, r3
    1670:	2301      	movs	r3, #1
    1672:	4053      	eors	r3, r2
    1674:	b2db      	uxtb	r3, r3
    1676:	2b00      	cmp	r3, #0
    1678:	d001      	beq.n	167e <mmc_cmd8+0x52>
			return false;
    167a:	2300      	movs	r3, #0
    167c:	e05b      	b.n	1736 <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    167e:	2316      	movs	r3, #22
    1680:	18fb      	adds	r3, r7, r3
    1682:	881a      	ldrh	r2, [r3, #0]
    1684:	2316      	movs	r3, #22
    1686:	18fb      	adds	r3, r7, r3
    1688:	3201      	adds	r2, #1
    168a:	801a      	strh	r2, [r3, #0]
    168c:	2316      	movs	r3, #22
    168e:	18fb      	adds	r3, r7, r3
    1690:	881b      	ldrh	r3, [r3, #0]
    1692:	2b31      	cmp	r3, #49	; 0x31
    1694:	d9e5      	bls.n	1662 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    1696:	693b      	ldr	r3, [r7, #16]
    1698:	b2db      	uxtb	r3, r3
    169a:	2202      	movs	r2, #2
    169c:	4013      	ands	r3, r2
    169e:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    16a4:	4b29      	ldr	r3, [pc, #164]	; (174c <mmc_cmd8+0x120>)
    16a6:	681b      	ldr	r3, [r3, #0]
    16a8:	330e      	adds	r3, #14
    16aa:	0018      	movs	r0, r3
    16ac:	230c      	movs	r3, #12
    16ae:	223e      	movs	r2, #62	; 0x3e
    16b0:	2180      	movs	r1, #128	; 0x80
    16b2:	4c27      	ldr	r4, [pc, #156]	; (1750 <mmc_cmd8+0x124>)
    16b4:	47a0      	blx	r4
    16b6:	0002      	movs	r2, r0
    16b8:	4b26      	ldr	r3, [pc, #152]	; (1754 <mmc_cmd8+0x128>)
    16ba:	429a      	cmp	r2, r3
    16bc:	d135      	bne.n	172a <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    16be:	e014      	b.n	16ea <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    16c0:	230c      	movs	r3, #12
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	0018      	movs	r0, r3
    16c6:	4b20      	ldr	r3, [pc, #128]	; (1748 <mmc_cmd8+0x11c>)
    16c8:	4798      	blx	r3
    16ca:	0003      	movs	r3, r0
    16cc:	001a      	movs	r2, r3
    16ce:	2301      	movs	r3, #1
    16d0:	4053      	eors	r3, r2
    16d2:	b2db      	uxtb	r3, r3
    16d4:	2b00      	cmp	r3, #0
    16d6:	d001      	beq.n	16dc <mmc_cmd8+0xb0>
				return false;
    16d8:	2300      	movs	r3, #0
    16da:	e02c      	b.n	1736 <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    16dc:	2316      	movs	r3, #22
    16de:	18fb      	adds	r3, r7, r3
    16e0:	881a      	ldrh	r2, [r3, #0]
    16e2:	2316      	movs	r3, #22
    16e4:	18fb      	adds	r3, r7, r3
    16e6:	3201      	adds	r2, #1
    16e8:	801a      	strh	r2, [r3, #0]
    16ea:	2316      	movs	r3, #22
    16ec:	18fb      	adds	r3, r7, r3
    16ee:	881b      	ldrh	r3, [r3, #0]
    16f0:	2b35      	cmp	r3, #53	; 0x35
    16f2:	d9e5      	bls.n	16c0 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    16f4:	4b15      	ldr	r3, [pc, #84]	; (174c <mmc_cmd8+0x120>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	68fa      	ldr	r2, [r7, #12]
    16fa:	0852      	lsrs	r2, r2, #1
    16fc:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    16fe:	e014      	b.n	172a <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    1700:	230c      	movs	r3, #12
    1702:	18fb      	adds	r3, r7, r3
    1704:	0018      	movs	r0, r3
    1706:	4b10      	ldr	r3, [pc, #64]	; (1748 <mmc_cmd8+0x11c>)
    1708:	4798      	blx	r3
    170a:	0003      	movs	r3, r0
    170c:	001a      	movs	r2, r3
    170e:	2301      	movs	r3, #1
    1710:	4053      	eors	r3, r2
    1712:	b2db      	uxtb	r3, r3
    1714:	2b00      	cmp	r3, #0
    1716:	d001      	beq.n	171c <mmc_cmd8+0xf0>
			return false;
    1718:	2300      	movs	r3, #0
    171a:	e00c      	b.n	1736 <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    171c:	2316      	movs	r3, #22
    171e:	18fb      	adds	r3, r7, r3
    1720:	881a      	ldrh	r2, [r3, #0]
    1722:	2316      	movs	r3, #22
    1724:	18fb      	adds	r3, r7, r3
    1726:	3201      	adds	r2, #1
    1728:	801a      	strh	r2, [r3, #0]
    172a:	2316      	movs	r3, #22
    172c:	18fb      	adds	r3, r7, r3
    172e:	881b      	ldrh	r3, [r3, #0]
    1730:	2b7f      	cmp	r3, #127	; 0x7f
    1732:	d9e5      	bls.n	1700 <mmc_cmd8+0xd4>
		}
	}
	return true;
    1734:	2301      	movs	r3, #1
}
    1736:	0018      	movs	r0, r3
    1738:	46bd      	mov	sp, r7
    173a:	b007      	add	sp, #28
    173c:	bd90      	pop	{r4, r7, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	00081108 	.word	0x00081108
    1744:	00002ee1 	.word	0x00002ee1
    1748:	0000310d 	.word	0x0000310d
    174c:	200000e0 	.word	0x200000e0
    1750:	000012c5 	.word	0x000012c5
    1754:	00000fff 	.word	0x00000fff

00001758 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    1758:	b590      	push	{r4, r7, lr}
    175a:	b083      	sub	sp, #12
    175c:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    175e:	4b15      	ldr	r3, [pc, #84]	; (17b4 <sd_mmc_cmd9_spi+0x5c>)
    1760:	681b      	ldr	r3, [r3, #0]
    1762:	891b      	ldrh	r3, [r3, #8]
    1764:	0419      	lsls	r1, r3, #16
    1766:	4814      	ldr	r0, [pc, #80]	; (17b8 <sd_mmc_cmd9_spi+0x60>)
    1768:	2301      	movs	r3, #1
    176a:	9300      	str	r3, [sp, #0]
    176c:	2301      	movs	r3, #1
    176e:	2210      	movs	r2, #16
    1770:	4c12      	ldr	r4, [pc, #72]	; (17bc <sd_mmc_cmd9_spi+0x64>)
    1772:	47a0      	blx	r4
    1774:	0003      	movs	r3, r0
    1776:	001a      	movs	r2, r3
    1778:	2301      	movs	r3, #1
    177a:	4053      	eors	r3, r2
    177c:	b2db      	uxtb	r3, r3
    177e:	2b00      	cmp	r3, #0
    1780:	d001      	beq.n	1786 <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    1782:	2300      	movs	r3, #0
    1784:	e012      	b.n	17ac <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    1786:	4b0b      	ldr	r3, [pc, #44]	; (17b4 <sd_mmc_cmd9_spi+0x5c>)
    1788:	681b      	ldr	r3, [r3, #0]
    178a:	330e      	adds	r3, #14
    178c:	2101      	movs	r1, #1
    178e:	0018      	movs	r0, r3
    1790:	4b0b      	ldr	r3, [pc, #44]	; (17c0 <sd_mmc_cmd9_spi+0x68>)
    1792:	4798      	blx	r3
    1794:	0003      	movs	r3, r0
    1796:	001a      	movs	r2, r3
    1798:	2301      	movs	r3, #1
    179a:	4053      	eors	r3, r2
    179c:	b2db      	uxtb	r3, r3
    179e:	2b00      	cmp	r3, #0
    17a0:	d001      	beq.n	17a6 <sd_mmc_cmd9_spi+0x4e>
		return false;
    17a2:	2300      	movs	r3, #0
    17a4:	e002      	b.n	17ac <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    17a6:	4b07      	ldr	r3, [pc, #28]	; (17c4 <sd_mmc_cmd9_spi+0x6c>)
    17a8:	4798      	blx	r3
    17aa:	0003      	movs	r3, r0
}
    17ac:	0018      	movs	r0, r3
    17ae:	46bd      	mov	sp, r7
    17b0:	b001      	add	sp, #4
    17b2:	bd90      	pop	{r4, r7, pc}
    17b4:	200000e0 	.word	0x200000e0
    17b8:	00081109 	.word	0x00081109
    17bc:	00002ee1 	.word	0x00002ee1
    17c0:	000031b1 	.word	0x000031b1
    17c4:	00003255 	.word	0x00003255

000017c8 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    17c8:	b5b0      	push	{r4, r5, r7, lr}
    17ca:	b084      	sub	sp, #16
    17cc:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    17ce:	4b45      	ldr	r3, [pc, #276]	; (18e4 <mmc_decode_csd+0x11c>)
    17d0:	681b      	ldr	r3, [r3, #0]
    17d2:	330e      	adds	r3, #14
    17d4:	0018      	movs	r0, r3
    17d6:	2304      	movs	r3, #4
    17d8:	227a      	movs	r2, #122	; 0x7a
    17da:	2180      	movs	r1, #128	; 0x80
    17dc:	4c42      	ldr	r4, [pc, #264]	; (18e8 <mmc_decode_csd+0x120>)
    17de:	47a0      	blx	r4
    17e0:	0003      	movs	r3, r0
    17e2:	2b02      	cmp	r3, #2
    17e4:	d011      	beq.n	180a <mmc_decode_csd+0x42>
    17e6:	d802      	bhi.n	17ee <mmc_decode_csd+0x26>
    17e8:	2b01      	cmp	r3, #1
    17ea:	d009      	beq.n	1800 <mmc_decode_csd+0x38>
    17ec:	e003      	b.n	17f6 <mmc_decode_csd+0x2e>
    17ee:	2b03      	cmp	r3, #3
    17f0:	d010      	beq.n	1814 <mmc_decode_csd+0x4c>
    17f2:	2b04      	cmp	r3, #4
    17f4:	d013      	beq.n	181e <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    17f6:	4b3b      	ldr	r3, [pc, #236]	; (18e4 <mmc_decode_csd+0x11c>)
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	2212      	movs	r2, #18
    17fc:	731a      	strb	r2, [r3, #12]
		break;
    17fe:	e013      	b.n	1828 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    1800:	4b38      	ldr	r3, [pc, #224]	; (18e4 <mmc_decode_csd+0x11c>)
    1802:	681b      	ldr	r3, [r3, #0]
    1804:	2214      	movs	r2, #20
    1806:	731a      	strb	r2, [r3, #12]
		break;
    1808:	e00e      	b.n	1828 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    180a:	4b36      	ldr	r3, [pc, #216]	; (18e4 <mmc_decode_csd+0x11c>)
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	2222      	movs	r2, #34	; 0x22
    1810:	731a      	strb	r2, [r3, #12]
		break;
    1812:	e009      	b.n	1828 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    1814:	4b33      	ldr	r3, [pc, #204]	; (18e4 <mmc_decode_csd+0x11c>)
    1816:	681b      	ldr	r3, [r3, #0]
    1818:	2230      	movs	r2, #48	; 0x30
    181a:	731a      	strb	r2, [r3, #12]
		break;
    181c:	e004      	b.n	1828 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    181e:	4b31      	ldr	r3, [pc, #196]	; (18e4 <mmc_decode_csd+0x11c>)
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	2240      	movs	r2, #64	; 0x40
    1824:	731a      	strb	r2, [r3, #12]
		break;
    1826:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    1828:	4b2e      	ldr	r3, [pc, #184]	; (18e4 <mmc_decode_csd+0x11c>)
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	330e      	adds	r3, #14
    182e:	0018      	movs	r0, r3
    1830:	2308      	movs	r3, #8
    1832:	2260      	movs	r2, #96	; 0x60
    1834:	2180      	movs	r1, #128	; 0x80
    1836:	4c2c      	ldr	r4, [pc, #176]	; (18e8 <mmc_decode_csd+0x120>)
    1838:	47a0      	blx	r4
    183a:	0003      	movs	r3, r0
    183c:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	2207      	movs	r2, #7
    1842:	401a      	ands	r2, r3
    1844:	4b29      	ldr	r3, [pc, #164]	; (18ec <mmc_decode_csd+0x124>)
    1846:	0092      	lsls	r2, r2, #2
    1848:	58d3      	ldr	r3, [r2, r3]
    184a:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    184c:	68fb      	ldr	r3, [r7, #12]
    184e:	08db      	lsrs	r3, r3, #3
    1850:	220f      	movs	r2, #15
    1852:	401a      	ands	r2, r3
    1854:	4b26      	ldr	r3, [pc, #152]	; (18f0 <mmc_decode_csd+0x128>)
    1856:	0092      	lsls	r2, r2, #2
    1858:	58d3      	ldr	r3, [r2, r3]
    185a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    185c:	4b21      	ldr	r3, [pc, #132]	; (18e4 <mmc_decode_csd+0x11c>)
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	68ba      	ldr	r2, [r7, #8]
    1862:	6879      	ldr	r1, [r7, #4]
    1864:	434a      	muls	r2, r1
    1866:	21fa      	movs	r1, #250	; 0xfa
    1868:	0089      	lsls	r1, r1, #2
    186a:	434a      	muls	r2, r1
    186c:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    186e:	4b1d      	ldr	r3, [pc, #116]	; (18e4 <mmc_decode_csd+0x11c>)
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	330e      	adds	r3, #14
    1874:	0018      	movs	r0, r3
    1876:	230c      	movs	r3, #12
    1878:	223e      	movs	r2, #62	; 0x3e
    187a:	2180      	movs	r1, #128	; 0x80
    187c:	4c1a      	ldr	r4, [pc, #104]	; (18e8 <mmc_decode_csd+0x120>)
    187e:	47a0      	blx	r4
    1880:	0002      	movs	r2, r0
    1882:	4b1c      	ldr	r3, [pc, #112]	; (18f4 <mmc_decode_csd+0x12c>)
    1884:	429a      	cmp	r2, r3
    1886:	d028      	beq.n	18da <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1888:	4b16      	ldr	r3, [pc, #88]	; (18e4 <mmc_decode_csd+0x11c>)
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	330e      	adds	r3, #14
    188e:	0018      	movs	r0, r3
    1890:	230c      	movs	r3, #12
    1892:	223e      	movs	r2, #62	; 0x3e
    1894:	2180      	movs	r1, #128	; 0x80
    1896:	4c14      	ldr	r4, [pc, #80]	; (18e8 <mmc_decode_csd+0x120>)
    1898:	47a0      	blx	r4
    189a:	0003      	movs	r3, r0
    189c:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    189e:	4b11      	ldr	r3, [pc, #68]	; (18e4 <mmc_decode_csd+0x11c>)
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	330e      	adds	r3, #14
    18a4:	0018      	movs	r0, r3
    18a6:	2303      	movs	r3, #3
    18a8:	222f      	movs	r2, #47	; 0x2f
    18aa:	2180      	movs	r1, #128	; 0x80
    18ac:	4d0e      	ldr	r5, [pc, #56]	; (18e8 <mmc_decode_csd+0x120>)
    18ae:	47a8      	blx	r5
    18b0:	0003      	movs	r3, r0
    18b2:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    18b4:	409c      	lsls	r4, r3
    18b6:	0023      	movs	r3, r4
    18b8:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    18ba:	4b0a      	ldr	r3, [pc, #40]	; (18e4 <mmc_decode_csd+0x11c>)
    18bc:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    18be:	4b09      	ldr	r3, [pc, #36]	; (18e4 <mmc_decode_csd+0x11c>)
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	330e      	adds	r3, #14
    18c4:	0018      	movs	r0, r3
    18c6:	2304      	movs	r3, #4
    18c8:	2250      	movs	r2, #80	; 0x50
    18ca:	2180      	movs	r1, #128	; 0x80
    18cc:	4d06      	ldr	r5, [pc, #24]	; (18e8 <mmc_decode_csd+0x120>)
    18ce:	47a8      	blx	r5
    18d0:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    18d2:	683b      	ldr	r3, [r7, #0]
    18d4:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    18d6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    18d8:	6063      	str	r3, [r4, #4]
	}
}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	46bd      	mov	sp, r7
    18de:	b004      	add	sp, #16
    18e0:	bdb0      	pop	{r4, r5, r7, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	200000e0 	.word	0x200000e0
    18e8:	000012c5 	.word	0x000012c5
    18ec:	0000c260 	.word	0x0000c260
    18f0:	0000c2bc 	.word	0x0000c2bc
    18f4:	00000fff 	.word	0x00000fff

000018f8 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    18f8:	b5b0      	push	{r4, r5, r7, lr}
    18fa:	b084      	sub	sp, #16
    18fc:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    18fe:	4b35      	ldr	r3, [pc, #212]	; (19d4 <sd_decode_csd+0xdc>)
    1900:	681b      	ldr	r3, [r3, #0]
    1902:	330e      	adds	r3, #14
    1904:	0018      	movs	r0, r3
    1906:	2308      	movs	r3, #8
    1908:	2260      	movs	r2, #96	; 0x60
    190a:	2180      	movs	r1, #128	; 0x80
    190c:	4c32      	ldr	r4, [pc, #200]	; (19d8 <sd_decode_csd+0xe0>)
    190e:	47a0      	blx	r4
    1910:	0003      	movs	r3, r0
    1912:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    1914:	68fb      	ldr	r3, [r7, #12]
    1916:	2207      	movs	r2, #7
    1918:	401a      	ands	r2, r3
    191a:	4b30      	ldr	r3, [pc, #192]	; (19dc <sd_decode_csd+0xe4>)
    191c:	0092      	lsls	r2, r2, #2
    191e:	58d3      	ldr	r3, [r2, r3]
    1920:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    1922:	68fb      	ldr	r3, [r7, #12]
    1924:	08db      	lsrs	r3, r3, #3
    1926:	220f      	movs	r2, #15
    1928:	401a      	ands	r2, r3
    192a:	4b2d      	ldr	r3, [pc, #180]	; (19e0 <sd_decode_csd+0xe8>)
    192c:	0092      	lsls	r2, r2, #2
    192e:	58d3      	ldr	r3, [r2, r3]
    1930:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    1932:	4b28      	ldr	r3, [pc, #160]	; (19d4 <sd_decode_csd+0xdc>)
    1934:	681b      	ldr	r3, [r3, #0]
    1936:	68ba      	ldr	r2, [r7, #8]
    1938:	6879      	ldr	r1, [r7, #4]
    193a:	434a      	muls	r2, r1
    193c:	21fa      	movs	r1, #250	; 0xfa
    193e:	0089      	lsls	r1, r1, #2
    1940:	434a      	muls	r2, r1
    1942:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    1944:	4b23      	ldr	r3, [pc, #140]	; (19d4 <sd_decode_csd+0xdc>)
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	330e      	adds	r3, #14
    194a:	0018      	movs	r0, r3
    194c:	2302      	movs	r3, #2
    194e:	227e      	movs	r2, #126	; 0x7e
    1950:	2180      	movs	r1, #128	; 0x80
    1952:	4c21      	ldr	r4, [pc, #132]	; (19d8 <sd_decode_csd+0xe0>)
    1954:	47a0      	blx	r4
    1956:	1e03      	subs	r3, r0, #0
    1958:	d00f      	beq.n	197a <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    195a:	4b1e      	ldr	r3, [pc, #120]	; (19d4 <sd_decode_csd+0xdc>)
    195c:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    195e:	4b1d      	ldr	r3, [pc, #116]	; (19d4 <sd_decode_csd+0xdc>)
    1960:	681b      	ldr	r3, [r3, #0]
    1962:	330e      	adds	r3, #14
    1964:	0018      	movs	r0, r3
    1966:	2316      	movs	r3, #22
    1968:	2230      	movs	r2, #48	; 0x30
    196a:	2180      	movs	r1, #128	; 0x80
    196c:	4d1a      	ldr	r5, [pc, #104]	; (19d8 <sd_decode_csd+0xe0>)
    196e:	47a8      	blx	r5
    1970:	0003      	movs	r3, r0
				* 512;
    1972:	3301      	adds	r3, #1
    1974:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    1976:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    1978:	e028      	b.n	19cc <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    197a:	4b16      	ldr	r3, [pc, #88]	; (19d4 <sd_decode_csd+0xdc>)
    197c:	681b      	ldr	r3, [r3, #0]
    197e:	330e      	adds	r3, #14
    1980:	0018      	movs	r0, r3
    1982:	230c      	movs	r3, #12
    1984:	223e      	movs	r2, #62	; 0x3e
    1986:	2180      	movs	r1, #128	; 0x80
    1988:	4c13      	ldr	r4, [pc, #76]	; (19d8 <sd_decode_csd+0xe0>)
    198a:	47a0      	blx	r4
    198c:	0003      	movs	r3, r0
    198e:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1990:	4b10      	ldr	r3, [pc, #64]	; (19d4 <sd_decode_csd+0xdc>)
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	330e      	adds	r3, #14
    1996:	0018      	movs	r0, r3
    1998:	2303      	movs	r3, #3
    199a:	222f      	movs	r2, #47	; 0x2f
    199c:	2180      	movs	r1, #128	; 0x80
    199e:	4d0e      	ldr	r5, [pc, #56]	; (19d8 <sd_decode_csd+0xe0>)
    19a0:	47a8      	blx	r5
    19a2:	0003      	movs	r3, r0
    19a4:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    19a6:	409c      	lsls	r4, r3
    19a8:	0023      	movs	r3, r4
    19aa:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    19ac:	4b09      	ldr	r3, [pc, #36]	; (19d4 <sd_decode_csd+0xdc>)
    19ae:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    19b0:	4b08      	ldr	r3, [pc, #32]	; (19d4 <sd_decode_csd+0xdc>)
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	330e      	adds	r3, #14
    19b6:	0018      	movs	r0, r3
    19b8:	2304      	movs	r3, #4
    19ba:	2250      	movs	r2, #80	; 0x50
    19bc:	2180      	movs	r1, #128	; 0x80
    19be:	4d06      	ldr	r5, [pc, #24]	; (19d8 <sd_decode_csd+0xe0>)
    19c0:	47a8      	blx	r5
    19c2:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    19c4:	683b      	ldr	r3, [r7, #0]
    19c6:	4093      	lsls	r3, r2
				/ 1024;
    19c8:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    19ca:	6063      	str	r3, [r4, #4]
}
    19cc:	46c0      	nop			; (mov r8, r8)
    19ce:	46bd      	mov	sp, r7
    19d0:	b004      	add	sp, #16
    19d2:	bdb0      	pop	{r4, r5, r7, pc}
    19d4:	200000e0 	.word	0x200000e0
    19d8:	000012c5 	.word	0x000012c5
    19dc:	0000c260 	.word	0x0000c260
    19e0:	0000c27c 	.word	0x0000c27c

000019e4 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    19e4:	b580      	push	{r7, lr}
    19e6:	b082      	sub	sp, #8
    19e8:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    19ea:	4b11      	ldr	r3, [pc, #68]	; (1a30 <sd_mmc_cmd13+0x4c>)
    19ec:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    19ee:	4b11      	ldr	r3, [pc, #68]	; (1a34 <sd_mmc_cmd13+0x50>)
    19f0:	2100      	movs	r1, #0
    19f2:	0018      	movs	r0, r3
    19f4:	4b10      	ldr	r3, [pc, #64]	; (1a38 <sd_mmc_cmd13+0x54>)
    19f6:	4798      	blx	r3
    19f8:	0003      	movs	r3, r0
    19fa:	001a      	movs	r2, r3
    19fc:	2301      	movs	r3, #1
    19fe:	4053      	eors	r3, r2
    1a00:	b2db      	uxtb	r3, r3
    1a02:	2b00      	cmp	r3, #0
    1a04:	d001      	beq.n	1a0a <sd_mmc_cmd13+0x26>
				return false;
    1a06:	2300      	movs	r3, #0
    1a08:	e00e      	b.n	1a28 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    1a0a:	4b0c      	ldr	r3, [pc, #48]	; (1a3c <sd_mmc_cmd13+0x58>)
    1a0c:	4798      	blx	r3
    1a0e:	0002      	movs	r2, r0
    1a10:	23ff      	movs	r3, #255	; 0xff
    1a12:	4013      	ands	r3, r2
    1a14:	d006      	beq.n	1a24 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    1a16:	687b      	ldr	r3, [r7, #4]
    1a18:	1e5a      	subs	r2, r3, #1
    1a1a:	607a      	str	r2, [r7, #4]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d1e6      	bne.n	19ee <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    1a20:	2300      	movs	r3, #0
    1a22:	e001      	b.n	1a28 <sd_mmc_cmd13+0x44>
				break;
    1a24:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    1a26:	2301      	movs	r3, #1
}
    1a28:	0018      	movs	r0, r3
    1a2a:	46bd      	mov	sp, r7
    1a2c:	b002      	add	sp, #8
    1a2e:	bd80      	pop	{r7, pc}
    1a30:	00030d40 	.word	0x00030d40
    1a34:	00001b0d 	.word	0x00001b0d
    1a38:	00002eb9 	.word	0x00002eb9
    1a3c:	000030f9 	.word	0x000030f9

00001a40 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    1a40:	b590      	push	{r4, r7, lr}
    1a42:	b085      	sub	sp, #20
    1a44:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    1a46:	4b38      	ldr	r3, [pc, #224]	; (1b28 <sd_acmd51+0xe8>)
    1a48:	681b      	ldr	r3, [r3, #0]
    1a4a:	891b      	ldrh	r3, [r3, #8]
    1a4c:	041b      	lsls	r3, r3, #16
    1a4e:	4a37      	ldr	r2, [pc, #220]	; (1b2c <sd_acmd51+0xec>)
    1a50:	0019      	movs	r1, r3
    1a52:	0010      	movs	r0, r2
    1a54:	4b36      	ldr	r3, [pc, #216]	; (1b30 <sd_acmd51+0xf0>)
    1a56:	4798      	blx	r3
    1a58:	0003      	movs	r3, r0
    1a5a:	001a      	movs	r2, r3
    1a5c:	2301      	movs	r3, #1
    1a5e:	4053      	eors	r3, r2
    1a60:	b2db      	uxtb	r3, r3
    1a62:	2b00      	cmp	r3, #0
    1a64:	d001      	beq.n	1a6a <sd_acmd51+0x2a>
		return false;
    1a66:	2300      	movs	r3, #0
    1a68:	e059      	b.n	1b1e <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    1a6a:	4832      	ldr	r0, [pc, #200]	; (1b34 <sd_acmd51+0xf4>)
    1a6c:	2301      	movs	r3, #1
    1a6e:	9300      	str	r3, [sp, #0]
    1a70:	2301      	movs	r3, #1
    1a72:	2208      	movs	r2, #8
    1a74:	2100      	movs	r1, #0
    1a76:	4c30      	ldr	r4, [pc, #192]	; (1b38 <sd_acmd51+0xf8>)
    1a78:	47a0      	blx	r4
    1a7a:	0003      	movs	r3, r0
    1a7c:	001a      	movs	r2, r3
    1a7e:	2301      	movs	r3, #1
    1a80:	4053      	eors	r3, r2
    1a82:	b2db      	uxtb	r3, r3
    1a84:	2b00      	cmp	r3, #0
    1a86:	d001      	beq.n	1a8c <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    1a88:	2300      	movs	r3, #0
    1a8a:	e048      	b.n	1b1e <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1a8c:	003b      	movs	r3, r7
    1a8e:	2101      	movs	r1, #1
    1a90:	0018      	movs	r0, r3
    1a92:	4b2a      	ldr	r3, [pc, #168]	; (1b3c <sd_acmd51+0xfc>)
    1a94:	4798      	blx	r3
    1a96:	0003      	movs	r3, r0
    1a98:	001a      	movs	r2, r3
    1a9a:	2301      	movs	r3, #1
    1a9c:	4053      	eors	r3, r2
    1a9e:	b2db      	uxtb	r3, r3
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d001      	beq.n	1aa8 <sd_acmd51+0x68>
		return false;
    1aa4:	2300      	movs	r3, #0
    1aa6:	e03a      	b.n	1b1e <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    1aa8:	4b25      	ldr	r3, [pc, #148]	; (1b40 <sd_acmd51+0x100>)
    1aaa:	4798      	blx	r3
    1aac:	0003      	movs	r3, r0
    1aae:	001a      	movs	r2, r3
    1ab0:	2301      	movs	r3, #1
    1ab2:	4053      	eors	r3, r2
    1ab4:	b2db      	uxtb	r3, r3
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d001      	beq.n	1abe <sd_acmd51+0x7e>
		return false;
    1aba:	2300      	movs	r3, #0
    1abc:	e02f      	b.n	1b1e <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    1abe:	0038      	movs	r0, r7
    1ac0:	2304      	movs	r3, #4
    1ac2:	2238      	movs	r2, #56	; 0x38
    1ac4:	2140      	movs	r1, #64	; 0x40
    1ac6:	4c1f      	ldr	r4, [pc, #124]	; (1b44 <sd_acmd51+0x104>)
    1ac8:	47a0      	blx	r4
    1aca:	0003      	movs	r3, r0
    1acc:	2b01      	cmp	r3, #1
    1ace:	d008      	beq.n	1ae2 <sd_acmd51+0xa2>
    1ad0:	d302      	bcc.n	1ad8 <sd_acmd51+0x98>
    1ad2:	2b02      	cmp	r3, #2
    1ad4:	d00a      	beq.n	1aec <sd_acmd51+0xac>
    1ad6:	e01c      	b.n	1b12 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1ad8:	4b13      	ldr	r3, [pc, #76]	; (1b28 <sd_acmd51+0xe8>)
    1ada:	681b      	ldr	r3, [r3, #0]
    1adc:	2210      	movs	r2, #16
    1ade:	731a      	strb	r2, [r3, #12]
		break;
    1ae0:	e01c      	b.n	1b1c <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    1ae2:	4b11      	ldr	r3, [pc, #68]	; (1b28 <sd_acmd51+0xe8>)
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	221a      	movs	r2, #26
    1ae8:	731a      	strb	r2, [r3, #12]
		break;
    1aea:	e017      	b.n	1b1c <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    1aec:	0038      	movs	r0, r7
    1aee:	2301      	movs	r3, #1
    1af0:	222f      	movs	r2, #47	; 0x2f
    1af2:	2140      	movs	r1, #64	; 0x40
    1af4:	4c13      	ldr	r4, [pc, #76]	; (1b44 <sd_acmd51+0x104>)
    1af6:	47a0      	blx	r4
    1af8:	0003      	movs	r3, r0
    1afa:	2b01      	cmp	r3, #1
    1afc:	d104      	bne.n	1b08 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    1afe:	4b0a      	ldr	r3, [pc, #40]	; (1b28 <sd_acmd51+0xe8>)
    1b00:	681b      	ldr	r3, [r3, #0]
    1b02:	2230      	movs	r2, #48	; 0x30
    1b04:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    1b06:	e009      	b.n	1b1c <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    1b08:	4b07      	ldr	r3, [pc, #28]	; (1b28 <sd_acmd51+0xe8>)
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	2220      	movs	r2, #32
    1b0e:	731a      	strb	r2, [r3, #12]
		break;
    1b10:	e004      	b.n	1b1c <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1b12:	4b05      	ldr	r3, [pc, #20]	; (1b28 <sd_acmd51+0xe8>)
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	2210      	movs	r2, #16
    1b18:	731a      	strb	r2, [r3, #12]
		break;
    1b1a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    1b1c:	2301      	movs	r3, #1
}
    1b1e:	0018      	movs	r0, r3
    1b20:	46bd      	mov	sp, r7
    1b22:	b003      	add	sp, #12
    1b24:	bd90      	pop	{r4, r7, pc}
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	200000e0 	.word	0x200000e0
    1b2c:	00001137 	.word	0x00001137
    1b30:	00002eb9 	.word	0x00002eb9
    1b34:	00081133 	.word	0x00081133
    1b38:	00002ee1 	.word	0x00002ee1
    1b3c:	000031b1 	.word	0x000031b1
    1b40:	00003255 	.word	0x00003255
    1b44:	000012c5 	.word	0x000012c5

00001b48 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    1b48:	b580      	push	{r7, lr}
    1b4a:	b082      	sub	sp, #8
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	0002      	movs	r2, r0
    1b50:	1dfb      	adds	r3, r7, #7
    1b52:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    1b54:	1dfb      	adds	r3, r7, #7
    1b56:	781b      	ldrb	r3, [r3, #0]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d001      	beq.n	1b60 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    1b5c:	2304      	movs	r3, #4
    1b5e:	e047      	b.n	1bf0 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    1b60:	1dfb      	adds	r3, r7, #7
    1b62:	781b      	ldrb	r3, [r3, #0]
    1b64:	4a24      	ldr	r2, [pc, #144]	; (1bf8 <sd_mmc_select_slot+0xb0>)
    1b66:	015b      	lsls	r3, r3, #5
    1b68:	18d3      	adds	r3, r2, r3
    1b6a:	330a      	adds	r3, #10
    1b6c:	781b      	ldrb	r3, [r3, #0]
    1b6e:	2b04      	cmp	r3, #4
    1b70:	d008      	beq.n	1b84 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    1b72:	1dfb      	adds	r3, r7, #7
    1b74:	781b      	ldrb	r3, [r3, #0]
    1b76:	4a20      	ldr	r2, [pc, #128]	; (1bf8 <sd_mmc_select_slot+0xb0>)
    1b78:	015b      	lsls	r3, r3, #5
    1b7a:	18d3      	adds	r3, r2, r3
    1b7c:	330a      	adds	r3, #10
    1b7e:	781b      	ldrb	r3, [r3, #0]
    1b80:	2b03      	cmp	r3, #3
    1b82:	d11d      	bne.n	1bc0 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    1b84:	1dfb      	adds	r3, r7, #7
    1b86:	781b      	ldrb	r3, [r3, #0]
    1b88:	4a1b      	ldr	r2, [pc, #108]	; (1bf8 <sd_mmc_select_slot+0xb0>)
    1b8a:	015b      	lsls	r3, r3, #5
    1b8c:	18d3      	adds	r3, r2, r3
    1b8e:	330a      	adds	r3, #10
    1b90:	2202      	movs	r2, #2
    1b92:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1b94:	1dfb      	adds	r3, r7, #7
    1b96:	781a      	ldrb	r2, [r3, #0]
    1b98:	4b17      	ldr	r3, [pc, #92]	; (1bf8 <sd_mmc_select_slot+0xb0>)
    1b9a:	0152      	lsls	r2, r2, #5
    1b9c:	4917      	ldr	r1, [pc, #92]	; (1bfc <sd_mmc_select_slot+0xb4>)
    1b9e:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1ba0:	1dfb      	adds	r3, r7, #7
    1ba2:	781b      	ldrb	r3, [r3, #0]
    1ba4:	4a14      	ldr	r2, [pc, #80]	; (1bf8 <sd_mmc_select_slot+0xb0>)
    1ba6:	015b      	lsls	r3, r3, #5
    1ba8:	18d3      	adds	r3, r2, r3
    1baa:	330d      	adds	r3, #13
    1bac:	2201      	movs	r2, #1
    1bae:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1bb0:	1dfb      	adds	r3, r7, #7
    1bb2:	781b      	ldrb	r3, [r3, #0]
    1bb4:	4a10      	ldr	r2, [pc, #64]	; (1bf8 <sd_mmc_select_slot+0xb0>)
    1bb6:	015b      	lsls	r3, r3, #5
    1bb8:	18d3      	adds	r3, r2, r3
    1bba:	331e      	adds	r3, #30
    1bbc:	2200      	movs	r2, #0
    1bbe:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1bc0:	4b0f      	ldr	r3, [pc, #60]	; (1c00 <sd_mmc_select_slot+0xb8>)
    1bc2:	1dfa      	adds	r2, r7, #7
    1bc4:	7812      	ldrb	r2, [r2, #0]
    1bc6:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1bc8:	1dfb      	adds	r3, r7, #7
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	015a      	lsls	r2, r3, #5
    1bce:	4b0a      	ldr	r3, [pc, #40]	; (1bf8 <sd_mmc_select_slot+0xb0>)
    1bd0:	18d2      	adds	r2, r2, r3
    1bd2:	4b0c      	ldr	r3, [pc, #48]	; (1c04 <sd_mmc_select_slot+0xbc>)
    1bd4:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    1bd6:	4b0c      	ldr	r3, [pc, #48]	; (1c08 <sd_mmc_select_slot+0xc0>)
    1bd8:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1bda:	1dfb      	adds	r3, r7, #7
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	4a06      	ldr	r2, [pc, #24]	; (1bf8 <sd_mmc_select_slot+0xb0>)
    1be0:	015b      	lsls	r3, r3, #5
    1be2:	18d3      	adds	r3, r2, r3
    1be4:	330a      	adds	r3, #10
    1be6:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    1be8:	3b02      	subs	r3, #2
    1bea:	425a      	negs	r2, r3
    1bec:	4153      	adcs	r3, r2
    1bee:	b2db      	uxtb	r3, r3
}
    1bf0:	0018      	movs	r0, r3
    1bf2:	46bd      	mov	sp, r7
    1bf4:	b002      	add	sp, #8
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	200000bc 	.word	0x200000bc
    1bfc:	00061a80 	.word	0x00061a80
    1c00:	200000dc 	.word	0x200000dc
    1c04:	200000e0 	.word	0x200000e0
    1c08:	00001c0d 	.word	0x00001c0d

00001c0c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1c0c:	b5b0      	push	{r4, r5, r7, lr}
    1c0e:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1c10:	4b09      	ldr	r3, [pc, #36]	; (1c38 <sd_mmc_configure_slot+0x2c>)
    1c12:	7818      	ldrb	r0, [r3, #0]
    1c14:	4b09      	ldr	r3, [pc, #36]	; (1c3c <sd_mmc_configure_slot+0x30>)
    1c16:	681b      	ldr	r3, [r3, #0]
    1c18:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1c1a:	4b08      	ldr	r3, [pc, #32]	; (1c3c <sd_mmc_configure_slot+0x30>)
    1c1c:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1c1e:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1c20:	4b06      	ldr	r3, [pc, #24]	; (1c3c <sd_mmc_configure_slot+0x30>)
    1c22:	681b      	ldr	r3, [r3, #0]
    1c24:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1c26:	1e5c      	subs	r4, r3, #1
    1c28:	41a3      	sbcs	r3, r4
    1c2a:	b2db      	uxtb	r3, r3
    1c2c:	4c04      	ldr	r4, [pc, #16]	; (1c40 <sd_mmc_configure_slot+0x34>)
    1c2e:	47a0      	blx	r4
}
    1c30:	46c0      	nop			; (mov r8, r8)
    1c32:	46bd      	mov	sp, r7
    1c34:	bdb0      	pop	{r4, r5, r7, pc}
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	200000dc 	.word	0x200000dc
    1c3c:	200000e0 	.word	0x200000e0
    1c40:	00002da1 	.word	0x00002da1

00001c44 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1c48:	4b05      	ldr	r3, [pc, #20]	; (1c60 <sd_mmc_deselect_slot+0x1c>)
    1c4a:	781b      	ldrb	r3, [r3, #0]
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d104      	bne.n	1c5a <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    1c50:	4b03      	ldr	r3, [pc, #12]	; (1c60 <sd_mmc_deselect_slot+0x1c>)
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	0018      	movs	r0, r3
    1c56:	4b03      	ldr	r3, [pc, #12]	; (1c64 <sd_mmc_deselect_slot+0x20>)
    1c58:	4798      	blx	r3
	}
}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	46bd      	mov	sp, r7
    1c5e:	bd80      	pop	{r7, pc}
    1c60:	200000dc 	.word	0x200000dc
    1c64:	00002e29 	.word	0x00002e29

00001c68 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    1c68:	b580      	push	{r7, lr}
    1c6a:	b082      	sub	sp, #8
    1c6c:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    1c6e:	1dfb      	adds	r3, r7, #7
    1c70:	2200      	movs	r2, #0
    1c72:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    1c74:	4b59      	ldr	r3, [pc, #356]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1c76:	681b      	ldr	r3, [r3, #0]
    1c78:	2201      	movs	r2, #1
    1c7a:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    1c7c:	4b57      	ldr	r3, [pc, #348]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	2200      	movs	r2, #0
    1c82:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    1c84:	4b55      	ldr	r3, [pc, #340]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	2200      	movs	r2, #0
    1c8a:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1c8c:	4b54      	ldr	r3, [pc, #336]	; (1de0 <sd_mmc_spi_card_init+0x178>)
    1c8e:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1c90:	2388      	movs	r3, #136	; 0x88
    1c92:	015b      	lsls	r3, r3, #5
    1c94:	2100      	movs	r1, #0
    1c96:	0018      	movs	r0, r3
    1c98:	4b52      	ldr	r3, [pc, #328]	; (1de4 <sd_mmc_spi_card_init+0x17c>)
    1c9a:	4798      	blx	r3
    1c9c:	0003      	movs	r3, r0
    1c9e:	001a      	movs	r2, r3
    1ca0:	2301      	movs	r3, #1
    1ca2:	4053      	eors	r3, r2
    1ca4:	b2db      	uxtb	r3, r3
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d001      	beq.n	1cae <sd_mmc_spi_card_init+0x46>
		return false;
    1caa:	2300      	movs	r3, #0
    1cac:	e092      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1cae:	1dfb      	adds	r3, r7, #7
    1cb0:	0018      	movs	r0, r3
    1cb2:	4b4d      	ldr	r3, [pc, #308]	; (1de8 <sd_mmc_spi_card_init+0x180>)
    1cb4:	4798      	blx	r3
    1cb6:	0003      	movs	r3, r0
    1cb8:	001a      	movs	r2, r3
    1cba:	2301      	movs	r3, #1
    1cbc:	4053      	eors	r3, r2
    1cbe:	b2db      	uxtb	r3, r3
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d001      	beq.n	1cc8 <sd_mmc_spi_card_init+0x60>
		return false;
    1cc4:	2300      	movs	r3, #0
    1cc6:	e085      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1cc8:	4b48      	ldr	r3, [pc, #288]	; (1dec <sd_mmc_spi_card_init+0x184>)
    1cca:	4798      	blx	r3
    1ccc:	0003      	movs	r3, r0
    1cce:	001a      	movs	r2, r3
    1cd0:	2301      	movs	r3, #1
    1cd2:	4053      	eors	r3, r2
    1cd4:	b2db      	uxtb	r3, r3
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d001      	beq.n	1cde <sd_mmc_spi_card_init+0x76>
		return false;
    1cda:	2300      	movs	r3, #0
    1cdc:	e07a      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1cde:	4b3f      	ldr	r3, [pc, #252]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	7adb      	ldrb	r3, [r3, #11]
    1ce4:	001a      	movs	r2, r3
    1ce6:	2301      	movs	r3, #1
    1ce8:	4013      	ands	r3, r2
    1cea:	d021      	beq.n	1d30 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1cec:	1dfb      	adds	r3, r7, #7
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	0018      	movs	r0, r3
    1cf2:	4b3f      	ldr	r3, [pc, #252]	; (1df0 <sd_mmc_spi_card_init+0x188>)
    1cf4:	4798      	blx	r3
    1cf6:	0003      	movs	r3, r0
    1cf8:	001a      	movs	r2, r3
    1cfa:	2301      	movs	r3, #1
    1cfc:	4053      	eors	r3, r2
    1cfe:	b2db      	uxtb	r3, r3
    1d00:	2b00      	cmp	r3, #0
    1d02:	d007      	beq.n	1d14 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1d04:	4b35      	ldr	r3, [pc, #212]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1d06:	681b      	ldr	r3, [r3, #0]
    1d08:	2202      	movs	r2, #2
    1d0a:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1d0c:	4b39      	ldr	r3, [pc, #228]	; (1df4 <sd_mmc_spi_card_init+0x18c>)
    1d0e:	4798      	blx	r3
    1d10:	0003      	movs	r3, r0
    1d12:	e05f      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1d14:	4b38      	ldr	r3, [pc, #224]	; (1df8 <sd_mmc_spi_card_init+0x190>)
    1d16:	2100      	movs	r1, #0
    1d18:	0018      	movs	r0, r3
    1d1a:	4b32      	ldr	r3, [pc, #200]	; (1de4 <sd_mmc_spi_card_init+0x17c>)
    1d1c:	4798      	blx	r3
    1d1e:	0003      	movs	r3, r0
    1d20:	001a      	movs	r2, r3
    1d22:	2301      	movs	r3, #1
    1d24:	4053      	eors	r3, r2
    1d26:	b2db      	uxtb	r3, r3
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d001      	beq.n	1d30 <sd_mmc_spi_card_init+0xc8>
			return false;
    1d2c:	2300      	movs	r3, #0
    1d2e:	e051      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1d30:	4b2a      	ldr	r3, [pc, #168]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1d32:	681b      	ldr	r3, [r3, #0]
    1d34:	7adb      	ldrb	r3, [r3, #11]
    1d36:	001a      	movs	r2, r3
    1d38:	2301      	movs	r3, #1
    1d3a:	4013      	ands	r3, r2
    1d3c:	d017      	beq.n	1d6e <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    1d3e:	4b2f      	ldr	r3, [pc, #188]	; (1dfc <sd_mmc_spi_card_init+0x194>)
    1d40:	4798      	blx	r3
    1d42:	0003      	movs	r3, r0
    1d44:	001a      	movs	r2, r3
    1d46:	2301      	movs	r3, #1
    1d48:	4053      	eors	r3, r2
    1d4a:	b2db      	uxtb	r3, r3
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d001      	beq.n	1d54 <sd_mmc_spi_card_init+0xec>
			return false;
    1d50:	2300      	movs	r3, #0
    1d52:	e03f      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    1d54:	4b2a      	ldr	r3, [pc, #168]	; (1e00 <sd_mmc_spi_card_init+0x198>)
    1d56:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    1d58:	4b2a      	ldr	r3, [pc, #168]	; (1e04 <sd_mmc_spi_card_init+0x19c>)
    1d5a:	4798      	blx	r3
    1d5c:	0003      	movs	r3, r0
    1d5e:	001a      	movs	r2, r3
    1d60:	2301      	movs	r3, #1
    1d62:	4053      	eors	r3, r2
    1d64:	b2db      	uxtb	r3, r3
    1d66:	2b00      	cmp	r3, #0
    1d68:	d001      	beq.n	1d6e <sd_mmc_spi_card_init+0x106>
			return false;
    1d6a:	2300      	movs	r3, #0
    1d6c:	e032      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1d6e:	4b1b      	ldr	r3, [pc, #108]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1d70:	681b      	ldr	r3, [r3, #0]
    1d72:	7adb      	ldrb	r3, [r3, #11]
    1d74:	001a      	movs	r2, r3
    1d76:	2301      	movs	r3, #1
    1d78:	4013      	ands	r3, r2
    1d7a:	d016      	beq.n	1daa <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1d7c:	4b17      	ldr	r3, [pc, #92]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	7adb      	ldrb	r3, [r3, #11]
    1d82:	001a      	movs	r2, r3
    1d84:	2308      	movs	r3, #8
    1d86:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1d88:	d10f      	bne.n	1daa <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1d8a:	2380      	movs	r3, #128	; 0x80
    1d8c:	009b      	lsls	r3, r3, #2
    1d8e:	4a1e      	ldr	r2, [pc, #120]	; (1e08 <sd_mmc_spi_card_init+0x1a0>)
    1d90:	0019      	movs	r1, r3
    1d92:	0010      	movs	r0, r2
    1d94:	4b13      	ldr	r3, [pc, #76]	; (1de4 <sd_mmc_spi_card_init+0x17c>)
    1d96:	4798      	blx	r3
    1d98:	0003      	movs	r3, r0
    1d9a:	001a      	movs	r2, r3
    1d9c:	2301      	movs	r3, #1
    1d9e:	4053      	eors	r3, r2
    1da0:	b2db      	uxtb	r3, r3
    1da2:	2b00      	cmp	r3, #0
    1da4:	d001      	beq.n	1daa <sd_mmc_spi_card_init+0x142>
			return false;
    1da6:	2300      	movs	r3, #0
    1da8:	e014      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1daa:	4b0c      	ldr	r3, [pc, #48]	; (1ddc <sd_mmc_spi_card_init+0x174>)
    1dac:	681b      	ldr	r3, [r3, #0]
    1dae:	7adb      	ldrb	r3, [r3, #11]
    1db0:	001a      	movs	r2, r3
    1db2:	2301      	movs	r3, #1
    1db4:	4013      	ands	r3, r2
    1db6:	d00a      	beq.n	1dce <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1db8:	4b14      	ldr	r3, [pc, #80]	; (1e0c <sd_mmc_spi_card_init+0x1a4>)
    1dba:	4798      	blx	r3
    1dbc:	0003      	movs	r3, r0
    1dbe:	001a      	movs	r2, r3
    1dc0:	2301      	movs	r3, #1
    1dc2:	4053      	eors	r3, r2
    1dc4:	b2db      	uxtb	r3, r3
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d001      	beq.n	1dce <sd_mmc_spi_card_init+0x166>
			return false;
    1dca:	2300      	movs	r3, #0
    1dcc:	e002      	b.n	1dd4 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1dce:	4b10      	ldr	r3, [pc, #64]	; (1e10 <sd_mmc_spi_card_init+0x1a8>)
    1dd0:	4798      	blx	r3
	return true;
    1dd2:	2301      	movs	r3, #1
}
    1dd4:	0018      	movs	r0, r3
    1dd6:	46bd      	mov	sp, r7
    1dd8:	b002      	add	sp, #8
    1dda:	bd80      	pop	{r7, pc}
    1ddc:	200000e0 	.word	0x200000e0
    1de0:	00002e6d 	.word	0x00002e6d
    1de4:	00002eb9 	.word	0x00002eb9
    1de8:	000015bd 	.word	0x000015bd
    1dec:	000015b1 	.word	0x000015b1
    1df0:	000014cd 	.word	0x000014cd
    1df4:	00001e15 	.word	0x00001e15
    1df8:	0000113b 	.word	0x0000113b
    1dfc:	00001759 	.word	0x00001759
    1e00:	000018f9 	.word	0x000018f9
    1e04:	00001a41 	.word	0x00001a41
    1e08:	00001110 	.word	0x00001110
    1e0c:	000019e5 	.word	0x000019e5
    1e10:	00001c0d 	.word	0x00001c0d

00001e14 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b082      	sub	sp, #8
    1e18:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1e1a:	2388      	movs	r3, #136	; 0x88
    1e1c:	015b      	lsls	r3, r3, #5
    1e1e:	2100      	movs	r1, #0
    1e20:	0018      	movs	r0, r3
    1e22:	4b32      	ldr	r3, [pc, #200]	; (1eec <sd_mmc_spi_install_mmc+0xd8>)
    1e24:	4798      	blx	r3
    1e26:	0003      	movs	r3, r0
    1e28:	001a      	movs	r2, r3
    1e2a:	2301      	movs	r3, #1
    1e2c:	4053      	eors	r3, r2
    1e2e:	b2db      	uxtb	r3, r3
    1e30:	2b00      	cmp	r3, #0
    1e32:	d001      	beq.n	1e38 <sd_mmc_spi_install_mmc+0x24>
		return false;
    1e34:	2300      	movs	r3, #0
    1e36:	e055      	b.n	1ee4 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1e38:	4b2d      	ldr	r3, [pc, #180]	; (1ef0 <sd_mmc_spi_install_mmc+0xdc>)
    1e3a:	4798      	blx	r3
    1e3c:	0003      	movs	r3, r0
    1e3e:	001a      	movs	r2, r3
    1e40:	2301      	movs	r3, #1
    1e42:	4053      	eors	r3, r2
    1e44:	b2db      	uxtb	r3, r3
    1e46:	2b00      	cmp	r3, #0
    1e48:	d001      	beq.n	1e4e <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1e4a:	2300      	movs	r3, #0
    1e4c:	e04a      	b.n	1ee4 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1e4e:	4b29      	ldr	r3, [pc, #164]	; (1ef4 <sd_mmc_spi_install_mmc+0xe0>)
    1e50:	2100      	movs	r1, #0
    1e52:	0018      	movs	r0, r3
    1e54:	4b25      	ldr	r3, [pc, #148]	; (1eec <sd_mmc_spi_install_mmc+0xd8>)
    1e56:	4798      	blx	r3
    1e58:	0003      	movs	r3, r0
    1e5a:	001a      	movs	r2, r3
    1e5c:	2301      	movs	r3, #1
    1e5e:	4053      	eors	r3, r2
    1e60:	b2db      	uxtb	r3, r3
    1e62:	2b00      	cmp	r3, #0
    1e64:	d001      	beq.n	1e6a <sd_mmc_spi_install_mmc+0x56>
		return false;
    1e66:	2300      	movs	r3, #0
    1e68:	e03c      	b.n	1ee4 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1e6a:	4b23      	ldr	r3, [pc, #140]	; (1ef8 <sd_mmc_spi_install_mmc+0xe4>)
    1e6c:	4798      	blx	r3
    1e6e:	0003      	movs	r3, r0
    1e70:	001a      	movs	r2, r3
    1e72:	2301      	movs	r3, #1
    1e74:	4053      	eors	r3, r2
    1e76:	b2db      	uxtb	r3, r3
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d001      	beq.n	1e80 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1e7c:	2300      	movs	r3, #0
    1e7e:	e031      	b.n	1ee4 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    1e80:	4b1e      	ldr	r3, [pc, #120]	; (1efc <sd_mmc_spi_install_mmc+0xe8>)
    1e82:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1e84:	4b1e      	ldr	r3, [pc, #120]	; (1f00 <sd_mmc_spi_install_mmc+0xec>)
    1e86:	681b      	ldr	r3, [r3, #0]
    1e88:	7b1b      	ldrb	r3, [r3, #12]
    1e8a:	2b3f      	cmp	r3, #63	; 0x3f
    1e8c:	d90c      	bls.n	1ea8 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1e8e:	1dfb      	adds	r3, r7, #7
    1e90:	0018      	movs	r0, r3
    1e92:	4b1c      	ldr	r3, [pc, #112]	; (1f04 <sd_mmc_spi_install_mmc+0xf0>)
    1e94:	4798      	blx	r3
    1e96:	0003      	movs	r3, r0
    1e98:	001a      	movs	r2, r3
    1e9a:	2301      	movs	r3, #1
    1e9c:	4053      	eors	r3, r2
    1e9e:	b2db      	uxtb	r3, r3
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d001      	beq.n	1ea8 <sd_mmc_spi_install_mmc+0x94>
			return false;
    1ea4:	2300      	movs	r3, #0
    1ea6:	e01d      	b.n	1ee4 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1ea8:	2380      	movs	r3, #128	; 0x80
    1eaa:	009b      	lsls	r3, r3, #2
    1eac:	4a16      	ldr	r2, [pc, #88]	; (1f08 <sd_mmc_spi_install_mmc+0xf4>)
    1eae:	0019      	movs	r1, r3
    1eb0:	0010      	movs	r0, r2
    1eb2:	4b0e      	ldr	r3, [pc, #56]	; (1eec <sd_mmc_spi_install_mmc+0xd8>)
    1eb4:	4798      	blx	r3
    1eb6:	0003      	movs	r3, r0
    1eb8:	001a      	movs	r2, r3
    1eba:	2301      	movs	r3, #1
    1ebc:	4053      	eors	r3, r2
    1ebe:	b2db      	uxtb	r3, r3
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d001      	beq.n	1ec8 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1ec4:	2300      	movs	r3, #0
    1ec6:	e00d      	b.n	1ee4 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1ec8:	4b10      	ldr	r3, [pc, #64]	; (1f0c <sd_mmc_spi_install_mmc+0xf8>)
    1eca:	4798      	blx	r3
    1ecc:	0003      	movs	r3, r0
    1ece:	001a      	movs	r2, r3
    1ed0:	2301      	movs	r3, #1
    1ed2:	4053      	eors	r3, r2
    1ed4:	b2db      	uxtb	r3, r3
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d001      	beq.n	1ede <sd_mmc_spi_install_mmc+0xca>
		return false;
    1eda:	2300      	movs	r3, #0
    1edc:	e002      	b.n	1ee4 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1ede:	4b0c      	ldr	r3, [pc, #48]	; (1f10 <sd_mmc_spi_install_mmc+0xfc>)
    1ee0:	4798      	blx	r3
	return true;
    1ee2:	2301      	movs	r3, #1
}
    1ee4:	0018      	movs	r0, r3
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b002      	add	sp, #8
    1eea:	bd80      	pop	{r7, pc}
    1eec:	00002eb9 	.word	0x00002eb9
    1ef0:	00001421 	.word	0x00001421
    1ef4:	0000113b 	.word	0x0000113b
    1ef8:	00001759 	.word	0x00001759
    1efc:	000017c9 	.word	0x000017c9
    1f00:	200000e0 	.word	0x200000e0
    1f04:	0000162d 	.word	0x0000162d
    1f08:	00001110 	.word	0x00001110
    1f0c:	000019e5 	.word	0x000019e5
    1f10:	00001c0d 	.word	0x00001c0d

00001f14 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	b082      	sub	sp, #8
    1f18:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1f1a:	1dfb      	adds	r3, r7, #7
    1f1c:	2200      	movs	r2, #0
    1f1e:	701a      	strb	r2, [r3, #0]
    1f20:	e00c      	b.n	1f3c <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1f22:	1dfb      	adds	r3, r7, #7
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	4a0c      	ldr	r2, [pc, #48]	; (1f58 <sd_mmc_init+0x44>)
    1f28:	015b      	lsls	r3, r3, #5
    1f2a:	18d3      	adds	r3, r2, r3
    1f2c:	330a      	adds	r3, #10
    1f2e:	2204      	movs	r2, #4
    1f30:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1f32:	1dfb      	adds	r3, r7, #7
    1f34:	781a      	ldrb	r2, [r3, #0]
    1f36:	1dfb      	adds	r3, r7, #7
    1f38:	3201      	adds	r2, #1
    1f3a:	701a      	strb	r2, [r3, #0]
    1f3c:	1dfb      	adds	r3, r7, #7
    1f3e:	781b      	ldrb	r3, [r3, #0]
    1f40:	2b00      	cmp	r3, #0
    1f42:	d0ee      	beq.n	1f22 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1f44:	4b05      	ldr	r3, [pc, #20]	; (1f5c <sd_mmc_init+0x48>)
    1f46:	22ff      	movs	r2, #255	; 0xff
    1f48:	701a      	strb	r2, [r3, #0]
	driver_init();
    1f4a:	4b05      	ldr	r3, [pc, #20]	; (1f60 <sd_mmc_init+0x4c>)
    1f4c:	4798      	blx	r3
}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	46bd      	mov	sp, r7
    1f52:	b002      	add	sp, #8
    1f54:	bd80      	pop	{r7, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	200000bc 	.word	0x200000bc
    1f5c:	200000dc 	.word	0x200000dc
    1f60:	00002cd9 	.word	0x00002cd9

00001f64 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1f64:	b590      	push	{r4, r7, lr}
    1f66:	b085      	sub	sp, #20
    1f68:	af00      	add	r7, sp, #0
    1f6a:	0002      	movs	r2, r0
    1f6c:	1dfb      	adds	r3, r7, #7
    1f6e:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1f70:	230f      	movs	r3, #15
    1f72:	18fc      	adds	r4, r7, r3
    1f74:	1dfb      	adds	r3, r7, #7
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	0018      	movs	r0, r3
    1f7a:	4b13      	ldr	r3, [pc, #76]	; (1fc8 <sd_mmc_check+0x64>)
    1f7c:	4798      	blx	r3
    1f7e:	0003      	movs	r3, r0
    1f80:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    1f82:	230f      	movs	r3, #15
    1f84:	18fb      	adds	r3, r7, r3
    1f86:	781b      	ldrb	r3, [r3, #0]
    1f88:	2b01      	cmp	r3, #1
    1f8a:	d005      	beq.n	1f98 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1f8c:	4b0f      	ldr	r3, [pc, #60]	; (1fcc <sd_mmc_check+0x68>)
    1f8e:	4798      	blx	r3
		return sd_mmc_err;
    1f90:	230f      	movs	r3, #15
    1f92:	18fb      	adds	r3, r7, r3
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	e012      	b.n	1fbe <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1f98:	4b0d      	ldr	r3, [pc, #52]	; (1fd0 <sd_mmc_check+0x6c>)
    1f9a:	4798      	blx	r3
    1f9c:	1e03      	subs	r3, r0, #0
    1f9e:	d007      	beq.n	1fb0 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1fa0:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <sd_mmc_check+0x70>)
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	2200      	movs	r2, #0
    1fa6:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1fa8:	4b08      	ldr	r3, [pc, #32]	; (1fcc <sd_mmc_check+0x68>)
    1faa:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1fac:	2301      	movs	r3, #1
    1fae:	e006      	b.n	1fbe <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1fb0:	4b08      	ldr	r3, [pc, #32]	; (1fd4 <sd_mmc_check+0x70>)
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	2203      	movs	r2, #3
    1fb6:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1fb8:	4b04      	ldr	r3, [pc, #16]	; (1fcc <sd_mmc_check+0x68>)
    1fba:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1fbc:	2303      	movs	r3, #3
}
    1fbe:	0018      	movs	r0, r3
    1fc0:	46bd      	mov	sp, r7
    1fc2:	b005      	add	sp, #20
    1fc4:	bd90      	pop	{r4, r7, pc}
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	00001b49 	.word	0x00001b49
    1fcc:	00001c45 	.word	0x00001c45
    1fd0:	00001c69 	.word	0x00001c69
    1fd4:	200000e0 	.word	0x200000e0

00001fd8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1fd8:	b580      	push	{r7, lr}
    1fda:	b082      	sub	sp, #8
    1fdc:	af00      	add	r7, sp, #0
    1fde:	0002      	movs	r2, r0
    1fe0:	1dfb      	adds	r3, r7, #7
    1fe2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1fe4:	1dfb      	adds	r3, r7, #7
    1fe6:	781b      	ldrb	r3, [r3, #0]
    1fe8:	0018      	movs	r0, r3
    1fea:	4b07      	ldr	r3, [pc, #28]	; (2008 <STACK_SIZE+0x8>)
    1fec:	4798      	blx	r3
    1fee:	1e03      	subs	r3, r0, #0
    1ff0:	d001      	beq.n	1ff6 <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1ff2:	2300      	movs	r3, #0
    1ff4:	e004      	b.n	2000 <STACK_SIZE>
	}
	sd_mmc_deselect_slot();
    1ff6:	4b05      	ldr	r3, [pc, #20]	; (200c <STACK_SIZE+0xc>)
    1ff8:	4798      	blx	r3
	return sd_mmc_card->type;
    1ffa:	4b05      	ldr	r3, [pc, #20]	; (2010 <STACK_SIZE+0x10>)
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	7adb      	ldrb	r3, [r3, #11]
}
    2000:	0018      	movs	r0, r3
    2002:	46bd      	mov	sp, r7
    2004:	b002      	add	sp, #8
    2006:	bd80      	pop	{r7, pc}
    2008:	00001b49 	.word	0x00001b49
    200c:	00001c45 	.word	0x00001c45
    2010:	200000e0 	.word	0x200000e0

00002014 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    2014:	b580      	push	{r7, lr}
    2016:	b082      	sub	sp, #8
    2018:	af00      	add	r7, sp, #0
    201a:	0002      	movs	r2, r0
    201c:	1dfb      	adds	r3, r7, #7
    201e:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    2020:	1dfb      	adds	r3, r7, #7
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	0018      	movs	r0, r3
    2026:	4b07      	ldr	r3, [pc, #28]	; (2044 <sd_mmc_get_capacity+0x30>)
    2028:	4798      	blx	r3
    202a:	1e03      	subs	r3, r0, #0
    202c:	d001      	beq.n	2032 <sd_mmc_get_capacity+0x1e>
		return 0;
    202e:	2300      	movs	r3, #0
    2030:	e004      	b.n	203c <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    2032:	4b05      	ldr	r3, [pc, #20]	; (2048 <sd_mmc_get_capacity+0x34>)
    2034:	4798      	blx	r3
	return sd_mmc_card->capacity;
    2036:	4b05      	ldr	r3, [pc, #20]	; (204c <sd_mmc_get_capacity+0x38>)
    2038:	681b      	ldr	r3, [r3, #0]
    203a:	685b      	ldr	r3, [r3, #4]
}
    203c:	0018      	movs	r0, r3
    203e:	46bd      	mov	sp, r7
    2040:	b002      	add	sp, #8
    2042:	bd80      	pop	{r7, pc}
    2044:	00001b49 	.word	0x00001b49
    2048:	00001c45 	.word	0x00001c45
    204c:	200000e0 	.word	0x200000e0

00002050 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    2050:	b580      	push	{r7, lr}
    2052:	b082      	sub	sp, #8
    2054:	af00      	add	r7, sp, #0
    2056:	0002      	movs	r2, r0
    2058:	1dfb      	adds	r3, r7, #7
    205a:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    205c:	2300      	movs	r3, #0
}
    205e:	0018      	movs	r0, r3
    2060:	46bd      	mov	sp, r7
    2062:	b002      	add	sp, #8
    2064:	bd80      	pop	{r7, pc}
	...

00002068 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    2068:	b590      	push	{r4, r7, lr}
    206a:	b089      	sub	sp, #36	; 0x24
    206c:	af02      	add	r7, sp, #8
    206e:	6039      	str	r1, [r7, #0]
    2070:	0011      	movs	r1, r2
    2072:	1dfb      	adds	r3, r7, #7
    2074:	1c02      	adds	r2, r0, #0
    2076:	701a      	strb	r2, [r3, #0]
    2078:	1d3b      	adds	r3, r7, #4
    207a:	1c0a      	adds	r2, r1, #0
    207c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    207e:	230f      	movs	r3, #15
    2080:	18fc      	adds	r4, r7, r3
    2082:	1dfb      	adds	r3, r7, #7
    2084:	781b      	ldrb	r3, [r3, #0]
    2086:	0018      	movs	r0, r3
    2088:	4b29      	ldr	r3, [pc, #164]	; (2130 <sd_mmc_init_read_blocks+0xc8>)
    208a:	4798      	blx	r3
    208c:	0003      	movs	r3, r0
    208e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    2090:	230f      	movs	r3, #15
    2092:	18fb      	adds	r3, r7, r3
    2094:	781b      	ldrb	r3, [r3, #0]
    2096:	2b00      	cmp	r3, #0
    2098:	d003      	beq.n	20a2 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    209a:	230f      	movs	r3, #15
    209c:	18fb      	adds	r3, r7, r3
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	e041      	b.n	2126 <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    20a2:	4b24      	ldr	r3, [pc, #144]	; (2134 <sd_mmc_init_read_blocks+0xcc>)
    20a4:	4798      	blx	r3
    20a6:	0003      	movs	r3, r0
    20a8:	001a      	movs	r2, r3
    20aa:	2301      	movs	r3, #1
    20ac:	4053      	eors	r3, r2
    20ae:	b2db      	uxtb	r3, r3
    20b0:	2b00      	cmp	r3, #0
    20b2:	d003      	beq.n	20bc <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    20b4:	4b20      	ldr	r3, [pc, #128]	; (2138 <sd_mmc_init_read_blocks+0xd0>)
    20b6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    20b8:	2305      	movs	r3, #5
    20ba:	e034      	b.n	2126 <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    20bc:	1d3b      	adds	r3, r7, #4
    20be:	881b      	ldrh	r3, [r3, #0]
    20c0:	2b01      	cmp	r3, #1
    20c2:	d902      	bls.n	20ca <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    20c4:	4b1d      	ldr	r3, [pc, #116]	; (213c <sd_mmc_init_read_blocks+0xd4>)
    20c6:	617b      	str	r3, [r7, #20]
    20c8:	e001      	b.n	20ce <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    20ca:	4b1d      	ldr	r3, [pc, #116]	; (2140 <sd_mmc_init_read_blocks+0xd8>)
    20cc:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    20ce:	4b1d      	ldr	r3, [pc, #116]	; (2144 <sd_mmc_init_read_blocks+0xdc>)
    20d0:	681b      	ldr	r3, [r3, #0]
    20d2:	7adb      	ldrb	r3, [r3, #11]
    20d4:	001a      	movs	r2, r3
    20d6:	2308      	movs	r3, #8
    20d8:	4013      	ands	r3, r2
    20da:	d002      	beq.n	20e2 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    20dc:	683b      	ldr	r3, [r7, #0]
    20de:	613b      	str	r3, [r7, #16]
    20e0:	e002      	b.n	20e8 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    20e2:	683b      	ldr	r3, [r7, #0]
    20e4:	025b      	lsls	r3, r3, #9
    20e6:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    20e8:	1d3b      	adds	r3, r7, #4
    20ea:	881c      	ldrh	r4, [r3, #0]
    20ec:	2380      	movs	r3, #128	; 0x80
    20ee:	009a      	lsls	r2, r3, #2
    20f0:	6939      	ldr	r1, [r7, #16]
    20f2:	6978      	ldr	r0, [r7, #20]
    20f4:	2301      	movs	r3, #1
    20f6:	9300      	str	r3, [sp, #0]
    20f8:	0023      	movs	r3, r4
    20fa:	4c13      	ldr	r4, [pc, #76]	; (2148 <sd_mmc_init_read_blocks+0xe0>)
    20fc:	47a0      	blx	r4
    20fe:	0003      	movs	r3, r0
    2100:	001a      	movs	r2, r3
    2102:	2301      	movs	r3, #1
    2104:	4053      	eors	r3, r2
    2106:	b2db      	uxtb	r3, r3
    2108:	2b00      	cmp	r3, #0
    210a:	d003      	beq.n	2114 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    210c:	4b0a      	ldr	r3, [pc, #40]	; (2138 <sd_mmc_init_read_blocks+0xd0>)
    210e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    2110:	2305      	movs	r3, #5
    2112:	e008      	b.n	2126 <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    2114:	4b0d      	ldr	r3, [pc, #52]	; (214c <sd_mmc_init_read_blocks+0xe4>)
    2116:	1d3a      	adds	r2, r7, #4
    2118:	8812      	ldrh	r2, [r2, #0]
    211a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    211c:	4b0c      	ldr	r3, [pc, #48]	; (2150 <sd_mmc_init_read_blocks+0xe8>)
    211e:	1d3a      	adds	r2, r7, #4
    2120:	8812      	ldrh	r2, [r2, #0]
    2122:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2124:	2300      	movs	r3, #0
}
    2126:	0018      	movs	r0, r3
    2128:	46bd      	mov	sp, r7
    212a:	b007      	add	sp, #28
    212c:	bd90      	pop	{r4, r7, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	00001b49 	.word	0x00001b49
    2134:	000019e5 	.word	0x000019e5
    2138:	00001c45 	.word	0x00001c45
    213c:	00101112 	.word	0x00101112
    2140:	00081111 	.word	0x00081111
    2144:	200000e0 	.word	0x200000e0
    2148:	00002ee1 	.word	0x00002ee1
    214c:	200000e6 	.word	0x200000e6
    2150:	200000e4 	.word	0x200000e4

00002154 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    2154:	b580      	push	{r7, lr}
    2156:	b082      	sub	sp, #8
    2158:	af00      	add	r7, sp, #0
    215a:	6078      	str	r0, [r7, #4]
    215c:	000a      	movs	r2, r1
    215e:	1cbb      	adds	r3, r7, #2
    2160:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    2162:	1cbb      	adds	r3, r7, #2
    2164:	881a      	ldrh	r2, [r3, #0]
    2166:	687b      	ldr	r3, [r7, #4]
    2168:	0011      	movs	r1, r2
    216a:	0018      	movs	r0, r3
    216c:	4b0d      	ldr	r3, [pc, #52]	; (21a4 <sd_mmc_start_read_blocks+0x50>)
    216e:	4798      	blx	r3
    2170:	0003      	movs	r3, r0
    2172:	001a      	movs	r2, r3
    2174:	2301      	movs	r3, #1
    2176:	4053      	eors	r3, r2
    2178:	b2db      	uxtb	r3, r3
    217a:	2b00      	cmp	r3, #0
    217c:	d004      	beq.n	2188 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    217e:	4b0a      	ldr	r3, [pc, #40]	; (21a8 <sd_mmc_start_read_blocks+0x54>)
    2180:	2200      	movs	r2, #0
    2182:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    2184:	2305      	movs	r3, #5
    2186:	e008      	b.n	219a <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    2188:	4b07      	ldr	r3, [pc, #28]	; (21a8 <sd_mmc_start_read_blocks+0x54>)
    218a:	881a      	ldrh	r2, [r3, #0]
    218c:	1cbb      	adds	r3, r7, #2
    218e:	881b      	ldrh	r3, [r3, #0]
    2190:	1ad3      	subs	r3, r2, r3
    2192:	b29a      	uxth	r2, r3
    2194:	4b04      	ldr	r3, [pc, #16]	; (21a8 <sd_mmc_start_read_blocks+0x54>)
    2196:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2198:	2300      	movs	r3, #0
}
    219a:	0018      	movs	r0, r3
    219c:	46bd      	mov	sp, r7
    219e:	b002      	add	sp, #8
    21a0:	bd80      	pop	{r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	000031b1 	.word	0x000031b1
    21a8:	200000e6 	.word	0x200000e6

000021ac <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    21ac:	b580      	push	{r7, lr}
    21ae:	b082      	sub	sp, #8
    21b0:	af00      	add	r7, sp, #0
    21b2:	0002      	movs	r2, r0
    21b4:	1dfb      	adds	r3, r7, #7
    21b6:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    21b8:	4b1c      	ldr	r3, [pc, #112]	; (222c <sd_mmc_wait_end_of_read_blocks+0x80>)
    21ba:	4798      	blx	r3
    21bc:	0003      	movs	r3, r0
    21be:	001a      	movs	r2, r3
    21c0:	2301      	movs	r3, #1
    21c2:	4053      	eors	r3, r2
    21c4:	b2db      	uxtb	r3, r3
    21c6:	2b00      	cmp	r3, #0
    21c8:	d001      	beq.n	21ce <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    21ca:	2305      	movs	r3, #5
    21cc:	e029      	b.n	2222 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    21ce:	1dfb      	adds	r3, r7, #7
    21d0:	781b      	ldrb	r3, [r3, #0]
    21d2:	2b00      	cmp	r3, #0
    21d4:	d003      	beq.n	21de <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    21d6:	4b16      	ldr	r3, [pc, #88]	; (2230 <sd_mmc_wait_end_of_read_blocks+0x84>)
    21d8:	2200      	movs	r2, #0
    21da:	801a      	strh	r2, [r3, #0]
    21dc:	e005      	b.n	21ea <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    21de:	4b14      	ldr	r3, [pc, #80]	; (2230 <sd_mmc_wait_end_of_read_blocks+0x84>)
    21e0:	881b      	ldrh	r3, [r3, #0]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d001      	beq.n	21ea <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    21e6:	2300      	movs	r3, #0
    21e8:	e01b      	b.n	2222 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    21ea:	4b12      	ldr	r3, [pc, #72]	; (2234 <sd_mmc_wait_end_of_read_blocks+0x88>)
    21ec:	881b      	ldrh	r3, [r3, #0]
    21ee:	2b01      	cmp	r3, #1
    21f0:	d103      	bne.n	21fa <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    21f2:	4b11      	ldr	r3, [pc, #68]	; (2238 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    21f4:	4798      	blx	r3
		return SD_MMC_OK;
    21f6:	2300      	movs	r3, #0
    21f8:	e013      	b.n	2222 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    21fa:	4b10      	ldr	r3, [pc, #64]	; (223c <sd_mmc_wait_end_of_read_blocks+0x90>)
    21fc:	2100      	movs	r1, #0
    21fe:	0018      	movs	r0, r3
    2200:	4b0f      	ldr	r3, [pc, #60]	; (2240 <sd_mmc_wait_end_of_read_blocks+0x94>)
    2202:	4798      	blx	r3
    2204:	0003      	movs	r3, r0
    2206:	001a      	movs	r2, r3
    2208:	2301      	movs	r3, #1
    220a:	4053      	eors	r3, r2
    220c:	b2db      	uxtb	r3, r3
    220e:	2b00      	cmp	r3, #0
    2210:	d004      	beq.n	221c <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    2212:	4b0a      	ldr	r3, [pc, #40]	; (223c <sd_mmc_wait_end_of_read_blocks+0x90>)
    2214:	2100      	movs	r1, #0
    2216:	0018      	movs	r0, r3
    2218:	4b09      	ldr	r3, [pc, #36]	; (2240 <sd_mmc_wait_end_of_read_blocks+0x94>)
    221a:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    221c:	4b06      	ldr	r3, [pc, #24]	; (2238 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    221e:	4798      	blx	r3
	return SD_MMC_OK;
    2220:	2300      	movs	r3, #0
}
    2222:	0018      	movs	r0, r3
    2224:	46bd      	mov	sp, r7
    2226:	b002      	add	sp, #8
    2228:	bd80      	pop	{r7, pc}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	00003255 	.word	0x00003255
    2230:	200000e6 	.word	0x200000e6
    2234:	200000e4 	.word	0x200000e4
    2238:	00001c45 	.word	0x00001c45
    223c:	0000310c 	.word	0x0000310c
    2240:	00002eb9 	.word	0x00002eb9

00002244 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    2244:	b590      	push	{r4, r7, lr}
    2246:	b089      	sub	sp, #36	; 0x24
    2248:	af02      	add	r7, sp, #8
    224a:	6039      	str	r1, [r7, #0]
    224c:	0011      	movs	r1, r2
    224e:	1dfb      	adds	r3, r7, #7
    2250:	1c02      	adds	r2, r0, #0
    2252:	701a      	strb	r2, [r3, #0]
    2254:	1d3b      	adds	r3, r7, #4
    2256:	1c0a      	adds	r2, r1, #0
    2258:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    225a:	230f      	movs	r3, #15
    225c:	18fc      	adds	r4, r7, r3
    225e:	1dfb      	adds	r3, r7, #7
    2260:	781b      	ldrb	r3, [r3, #0]
    2262:	0018      	movs	r0, r3
    2264:	4b28      	ldr	r3, [pc, #160]	; (2308 <sd_mmc_init_write_blocks+0xc4>)
    2266:	4798      	blx	r3
    2268:	0003      	movs	r3, r0
    226a:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    226c:	230f      	movs	r3, #15
    226e:	18fb      	adds	r3, r7, r3
    2270:	781b      	ldrb	r3, [r3, #0]
    2272:	2b00      	cmp	r3, #0
    2274:	d003      	beq.n	227e <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    2276:	230f      	movs	r3, #15
    2278:	18fb      	adds	r3, r7, r3
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	e03f      	b.n	22fe <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    227e:	1dfb      	adds	r3, r7, #7
    2280:	781b      	ldrb	r3, [r3, #0]
    2282:	0018      	movs	r0, r3
    2284:	4b21      	ldr	r3, [pc, #132]	; (230c <sd_mmc_init_write_blocks+0xc8>)
    2286:	4798      	blx	r3
    2288:	1e03      	subs	r3, r0, #0
    228a:	d003      	beq.n	2294 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    228c:	4b20      	ldr	r3, [pc, #128]	; (2310 <sd_mmc_init_write_blocks+0xcc>)
    228e:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    2290:	2307      	movs	r3, #7
    2292:	e034      	b.n	22fe <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    2294:	1d3b      	adds	r3, r7, #4
    2296:	881b      	ldrh	r3, [r3, #0]
    2298:	2b01      	cmp	r3, #1
    229a:	d902      	bls.n	22a2 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    229c:	4b1d      	ldr	r3, [pc, #116]	; (2314 <sd_mmc_init_write_blocks+0xd0>)
    229e:	617b      	str	r3, [r7, #20]
    22a0:	e001      	b.n	22a6 <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    22a2:	4b1d      	ldr	r3, [pc, #116]	; (2318 <sd_mmc_init_write_blocks+0xd4>)
    22a4:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    22a6:	4b1d      	ldr	r3, [pc, #116]	; (231c <sd_mmc_init_write_blocks+0xd8>)
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	7adb      	ldrb	r3, [r3, #11]
    22ac:	001a      	movs	r2, r3
    22ae:	2308      	movs	r3, #8
    22b0:	4013      	ands	r3, r2
    22b2:	d002      	beq.n	22ba <sd_mmc_init_write_blocks+0x76>
		arg = start;
    22b4:	683b      	ldr	r3, [r7, #0]
    22b6:	613b      	str	r3, [r7, #16]
    22b8:	e002      	b.n	22c0 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    22ba:	683b      	ldr	r3, [r7, #0]
    22bc:	025b      	lsls	r3, r3, #9
    22be:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    22c0:	1d3b      	adds	r3, r7, #4
    22c2:	881c      	ldrh	r4, [r3, #0]
    22c4:	2380      	movs	r3, #128	; 0x80
    22c6:	009a      	lsls	r2, r3, #2
    22c8:	6939      	ldr	r1, [r7, #16]
    22ca:	6978      	ldr	r0, [r7, #20]
    22cc:	2301      	movs	r3, #1
    22ce:	9300      	str	r3, [sp, #0]
    22d0:	0023      	movs	r3, r4
    22d2:	4c13      	ldr	r4, [pc, #76]	; (2320 <sd_mmc_init_write_blocks+0xdc>)
    22d4:	47a0      	blx	r4
    22d6:	0003      	movs	r3, r0
    22d8:	001a      	movs	r2, r3
    22da:	2301      	movs	r3, #1
    22dc:	4053      	eors	r3, r2
    22de:	b2db      	uxtb	r3, r3
    22e0:	2b00      	cmp	r3, #0
    22e2:	d003      	beq.n	22ec <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    22e4:	4b0a      	ldr	r3, [pc, #40]	; (2310 <sd_mmc_init_write_blocks+0xcc>)
    22e6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    22e8:	2305      	movs	r3, #5
    22ea:	e008      	b.n	22fe <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    22ec:	4b0d      	ldr	r3, [pc, #52]	; (2324 <sd_mmc_init_write_blocks+0xe0>)
    22ee:	1d3a      	adds	r2, r7, #4
    22f0:	8812      	ldrh	r2, [r2, #0]
    22f2:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    22f4:	4b0c      	ldr	r3, [pc, #48]	; (2328 <sd_mmc_init_write_blocks+0xe4>)
    22f6:	1d3a      	adds	r2, r7, #4
    22f8:	8812      	ldrh	r2, [r2, #0]
    22fa:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    22fc:	2300      	movs	r3, #0
}
    22fe:	0018      	movs	r0, r3
    2300:	46bd      	mov	sp, r7
    2302:	b007      	add	sp, #28
    2304:	bd90      	pop	{r4, r7, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	00001b49 	.word	0x00001b49
    230c:	00002051 	.word	0x00002051
    2310:	00001c45 	.word	0x00001c45
    2314:	00109119 	.word	0x00109119
    2318:	00089118 	.word	0x00089118
    231c:	200000e0 	.word	0x200000e0
    2320:	00002ee1 	.word	0x00002ee1
    2324:	200000e6 	.word	0x200000e6
    2328:	200000e4 	.word	0x200000e4

0000232c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    232c:	b580      	push	{r7, lr}
    232e:	b082      	sub	sp, #8
    2330:	af00      	add	r7, sp, #0
    2332:	6078      	str	r0, [r7, #4]
    2334:	000a      	movs	r2, r1
    2336:	1cbb      	adds	r3, r7, #2
    2338:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    233a:	1cbb      	adds	r3, r7, #2
    233c:	881a      	ldrh	r2, [r3, #0]
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	0011      	movs	r1, r2
    2342:	0018      	movs	r0, r3
    2344:	4b0d      	ldr	r3, [pc, #52]	; (237c <sd_mmc_start_write_blocks+0x50>)
    2346:	4798      	blx	r3
    2348:	0003      	movs	r3, r0
    234a:	001a      	movs	r2, r3
    234c:	2301      	movs	r3, #1
    234e:	4053      	eors	r3, r2
    2350:	b2db      	uxtb	r3, r3
    2352:	2b00      	cmp	r3, #0
    2354:	d004      	beq.n	2360 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    2356:	4b0a      	ldr	r3, [pc, #40]	; (2380 <sd_mmc_start_write_blocks+0x54>)
    2358:	2200      	movs	r2, #0
    235a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    235c:	2305      	movs	r3, #5
    235e:	e008      	b.n	2372 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    2360:	4b07      	ldr	r3, [pc, #28]	; (2380 <sd_mmc_start_write_blocks+0x54>)
    2362:	881a      	ldrh	r2, [r3, #0]
    2364:	1cbb      	adds	r3, r7, #2
    2366:	881b      	ldrh	r3, [r3, #0]
    2368:	1ad3      	subs	r3, r2, r3
    236a:	b29a      	uxth	r2, r3
    236c:	4b04      	ldr	r3, [pc, #16]	; (2380 <sd_mmc_start_write_blocks+0x54>)
    236e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2370:	2300      	movs	r3, #0
}
    2372:	0018      	movs	r0, r3
    2374:	46bd      	mov	sp, r7
    2376:	b002      	add	sp, #8
    2378:	bd80      	pop	{r7, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	00003261 	.word	0x00003261
    2380:	200000e6 	.word	0x200000e6

00002384 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    2384:	b580      	push	{r7, lr}
    2386:	b082      	sub	sp, #8
    2388:	af00      	add	r7, sp, #0
    238a:	0002      	movs	r2, r0
    238c:	1dfb      	adds	r3, r7, #7
    238e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    2390:	4b13      	ldr	r3, [pc, #76]	; (23e0 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    2392:	4798      	blx	r3
    2394:	0003      	movs	r3, r0
    2396:	001a      	movs	r2, r3
    2398:	2301      	movs	r3, #1
    239a:	4053      	eors	r3, r2
    239c:	b2db      	uxtb	r3, r3
    239e:	2b00      	cmp	r3, #0
    23a0:	d001      	beq.n	23a6 <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    23a2:	2305      	movs	r3, #5
    23a4:	e018      	b.n	23d8 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    23a6:	1dfb      	adds	r3, r7, #7
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	2b00      	cmp	r3, #0
    23ac:	d003      	beq.n	23b6 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    23ae:	4b0d      	ldr	r3, [pc, #52]	; (23e4 <sd_mmc_wait_end_of_write_blocks+0x60>)
    23b0:	2200      	movs	r2, #0
    23b2:	801a      	strh	r2, [r3, #0]
    23b4:	e005      	b.n	23c2 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    23b6:	4b0b      	ldr	r3, [pc, #44]	; (23e4 <sd_mmc_wait_end_of_write_blocks+0x60>)
    23b8:	881b      	ldrh	r3, [r3, #0]
    23ba:	2b00      	cmp	r3, #0
    23bc:	d001      	beq.n	23c2 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    23be:	2300      	movs	r3, #0
    23c0:	e00a      	b.n	23d8 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    23c2:	4b09      	ldr	r3, [pc, #36]	; (23e8 <sd_mmc_wait_end_of_write_blocks+0x64>)
    23c4:	881b      	ldrh	r3, [r3, #0]
    23c6:	2b01      	cmp	r3, #1
    23c8:	d103      	bne.n	23d2 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    23ca:	4b08      	ldr	r3, [pc, #32]	; (23ec <sd_mmc_wait_end_of_write_blocks+0x68>)
    23cc:	4798      	blx	r3
		return SD_MMC_OK;
    23ce:	2300      	movs	r3, #0
    23d0:	e002      	b.n	23d8 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    23d2:	4b06      	ldr	r3, [pc, #24]	; (23ec <sd_mmc_wait_end_of_write_blocks+0x68>)
    23d4:	4798      	blx	r3
	return SD_MMC_OK;
    23d6:	2300      	movs	r3, #0
}
    23d8:	0018      	movs	r0, r3
    23da:	46bd      	mov	sp, r7
    23dc:	b002      	add	sp, #8
    23de:	bd80      	pop	{r7, pc}
    23e0:	00003321 	.word	0x00003321
    23e4:	200000e6 	.word	0x200000e6
    23e8:	200000e4 	.word	0x200000e4
    23ec:	00001c45 	.word	0x00001c45

000023f0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    23f0:	b580      	push	{r7, lr}
    23f2:	b082      	sub	sp, #8
    23f4:	af00      	add	r7, sp, #0
    23f6:	0002      	movs	r2, r0
    23f8:	1dfb      	adds	r3, r7, #7
    23fa:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    23fc:	1dfb      	adds	r3, r7, #7
    23fe:	781b      	ldrb	r3, [r3, #0]
    2400:	0018      	movs	r0, r3
    2402:	4b16      	ldr	r3, [pc, #88]	; (245c <sd_mmc_test_unit_ready+0x6c>)
    2404:	4798      	blx	r3
    2406:	0003      	movs	r3, r0
    2408:	2b01      	cmp	r3, #1
    240a:	d019      	beq.n	2440 <sd_mmc_test_unit_ready+0x50>
    240c:	2b02      	cmp	r3, #2
    240e:	d019      	beq.n	2444 <sd_mmc_test_unit_ready+0x54>
    2410:	2b00      	cmp	r3, #0
    2412:	d11e      	bne.n	2452 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    2414:	1dfb      	adds	r3, r7, #7
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	4a11      	ldr	r2, [pc, #68]	; (2460 <sd_mmc_test_unit_ready+0x70>)
    241a:	5cd3      	ldrb	r3, [r2, r3]
    241c:	2b00      	cmp	r3, #0
    241e:	d001      	beq.n	2424 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    2420:	2302      	movs	r3, #2
    2422:	e017      	b.n	2454 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    2424:	1dfb      	adds	r3, r7, #7
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	0018      	movs	r0, r3
    242a:	4b0e      	ldr	r3, [pc, #56]	; (2464 <sd_mmc_test_unit_ready+0x74>)
    242c:	4798      	blx	r3
    242e:	0003      	movs	r3, r0
    2430:	001a      	movs	r2, r3
    2432:	2303      	movs	r3, #3
    2434:	4013      	ands	r3, r2
    2436:	d001      	beq.n	243c <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    2438:	2300      	movs	r3, #0
    243a:	e00b      	b.n	2454 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    243c:	2302      	movs	r3, #2
    243e:	e009      	b.n	2454 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    2440:	2303      	movs	r3, #3
    2442:	e007      	b.n	2454 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    2444:	1dfb      	adds	r3, r7, #7
    2446:	781b      	ldrb	r3, [r3, #0]
    2448:	4a05      	ldr	r2, [pc, #20]	; (2460 <sd_mmc_test_unit_ready+0x70>)
    244a:	2100      	movs	r1, #0
    244c:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    244e:	2302      	movs	r3, #2
    2450:	e000      	b.n	2454 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    2452:	2301      	movs	r3, #1
	}
}
    2454:	0018      	movs	r0, r3
    2456:	46bd      	mov	sp, r7
    2458:	b002      	add	sp, #8
    245a:	bd80      	pop	{r7, pc}
    245c:	00001f65 	.word	0x00001f65
    2460:	200000e8 	.word	0x200000e8
    2464:	00001fd9 	.word	0x00001fd9

00002468 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    2468:	b580      	push	{r7, lr}
    246a:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    246c:	2000      	movs	r0, #0
    246e:	4b03      	ldr	r3, [pc, #12]	; (247c <sd_mmc_test_unit_ready_0+0x14>)
    2470:	4798      	blx	r3
    2472:	0003      	movs	r3, r0
}
    2474:	0018      	movs	r0, r3
    2476:	46bd      	mov	sp, r7
    2478:	bd80      	pop	{r7, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	000023f1 	.word	0x000023f1

00002480 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    2480:	b580      	push	{r7, lr}
    2482:	b082      	sub	sp, #8
    2484:	af00      	add	r7, sp, #0
    2486:	0002      	movs	r2, r0
    2488:	6039      	str	r1, [r7, #0]
    248a:	1dfb      	adds	r3, r7, #7
    248c:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    248e:	1dfb      	adds	r3, r7, #7
    2490:	781b      	ldrb	r3, [r3, #0]
    2492:	0018      	movs	r0, r3
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <sd_mmc_read_capacity+0x38>)
    2496:	4798      	blx	r3
    2498:	0003      	movs	r3, r0
    249a:	005b      	lsls	r3, r3, #1
    249c:	1e5a      	subs	r2, r3, #1
    249e:	683b      	ldr	r3, [r7, #0]
    24a0:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    24a2:	1dfb      	adds	r3, r7, #7
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	0018      	movs	r0, r3
    24a8:	4b04      	ldr	r3, [pc, #16]	; (24bc <sd_mmc_read_capacity+0x3c>)
    24aa:	4798      	blx	r3
    24ac:	0003      	movs	r3, r0
}
    24ae:	0018      	movs	r0, r3
    24b0:	46bd      	mov	sp, r7
    24b2:	b002      	add	sp, #8
    24b4:	bd80      	pop	{r7, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	00002015 	.word	0x00002015
    24bc:	000023f1 	.word	0x000023f1

000024c0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    24c0:	b580      	push	{r7, lr}
    24c2:	b082      	sub	sp, #8
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	0019      	movs	r1, r3
    24cc:	2000      	movs	r0, #0
    24ce:	4b03      	ldr	r3, [pc, #12]	; (24dc <sd_mmc_read_capacity_0+0x1c>)
    24d0:	4798      	blx	r3
    24d2:	0003      	movs	r3, r0
}
    24d4:	0018      	movs	r0, r3
    24d6:	46bd      	mov	sp, r7
    24d8:	b002      	add	sp, #8
    24da:	bd80      	pop	{r7, pc}
    24dc:	00002481 	.word	0x00002481

000024e0 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    24e0:	b580      	push	{r7, lr}
    24e2:	b082      	sub	sp, #8
    24e4:	af00      	add	r7, sp, #0
    24e6:	0002      	movs	r2, r0
    24e8:	1dfb      	adds	r3, r7, #7
    24ea:	701a      	strb	r2, [r3, #0]
    24ec:	1dbb      	adds	r3, r7, #6
    24ee:	1c0a      	adds	r2, r1, #0
    24f0:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    24f2:	1dfb      	adds	r3, r7, #7
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	4a04      	ldr	r2, [pc, #16]	; (2508 <sd_mmc_unload+0x28>)
    24f8:	1db9      	adds	r1, r7, #6
    24fa:	7809      	ldrb	r1, [r1, #0]
    24fc:	54d1      	strb	r1, [r2, r3]
	return true;
    24fe:	2301      	movs	r3, #1
}
    2500:	0018      	movs	r0, r3
    2502:	46bd      	mov	sp, r7
    2504:	b002      	add	sp, #8
    2506:	bd80      	pop	{r7, pc}
    2508:	200000e8 	.word	0x200000e8

0000250c <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    250c:	b580      	push	{r7, lr}
    250e:	b082      	sub	sp, #8
    2510:	af00      	add	r7, sp, #0
    2512:	0002      	movs	r2, r0
    2514:	1dfb      	adds	r3, r7, #7
    2516:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    2518:	1dfb      	adds	r3, r7, #7
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	0019      	movs	r1, r3
    251e:	2000      	movs	r0, #0
    2520:	4b03      	ldr	r3, [pc, #12]	; (2530 <sd_mmc_unload_0+0x24>)
    2522:	4798      	blx	r3
    2524:	0003      	movs	r3, r0
}
    2526:	0018      	movs	r0, r3
    2528:	46bd      	mov	sp, r7
    252a:	b002      	add	sp, #8
    252c:	bd80      	pop	{r7, pc}
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	000024e1 	.word	0x000024e1

00002534 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    2534:	b580      	push	{r7, lr}
    2536:	b082      	sub	sp, #8
    2538:	af00      	add	r7, sp, #0
    253a:	0002      	movs	r2, r0
    253c:	1dfb      	adds	r3, r7, #7
    253e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    2540:	1dfb      	adds	r3, r7, #7
    2542:	781b      	ldrb	r3, [r3, #0]
    2544:	0018      	movs	r0, r3
    2546:	4b03      	ldr	r3, [pc, #12]	; (2554 <sd_mmc_wr_protect+0x20>)
    2548:	4798      	blx	r3
    254a:	0003      	movs	r3, r0
}
    254c:	0018      	movs	r0, r3
    254e:	46bd      	mov	sp, r7
    2550:	b002      	add	sp, #8
    2552:	bd80      	pop	{r7, pc}
    2554:	00002051 	.word	0x00002051

00002558 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    2558:	b580      	push	{r7, lr}
    255a:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    255c:	2000      	movs	r0, #0
    255e:	4b03      	ldr	r3, [pc, #12]	; (256c <sd_mmc_wr_protect_0+0x14>)
    2560:	4798      	blx	r3
    2562:	0003      	movs	r3, r0
}
    2564:	0018      	movs	r0, r3
    2566:	46bd      	mov	sp, r7
    2568:	bd80      	pop	{r7, pc}
    256a:	46c0      	nop			; (mov r8, r8)
    256c:	00002535 	.word	0x00002535

00002570 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
    2576:	0002      	movs	r2, r0
    2578:	1dfb      	adds	r3, r7, #7
    257a:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    257c:	2301      	movs	r3, #1
}
    257e:	0018      	movs	r0, r3
    2580:	46bd      	mov	sp, r7
    2582:	b002      	add	sp, #8
    2584:	bd80      	pop	{r7, pc}
	...

00002588 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    2588:	b580      	push	{r7, lr}
    258a:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    258c:	2000      	movs	r0, #0
    258e:	4b03      	ldr	r3, [pc, #12]	; (259c <sd_mmc_removal_0+0x14>)
    2590:	4798      	blx	r3
    2592:	0003      	movs	r3, r0
}
    2594:	0018      	movs	r0, r3
    2596:	46bd      	mov	sp, r7
    2598:	bd80      	pop	{r7, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	00002571 	.word	0x00002571

000025a0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b084      	sub	sp, #16
    25a4:	af00      	add	r7, sp, #0
    25a6:	60b9      	str	r1, [r7, #8]
    25a8:	607a      	str	r2, [r7, #4]
    25aa:	230f      	movs	r3, #15
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	1c02      	adds	r2, r0, #0
    25b0:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    25b2:	68b9      	ldr	r1, [r7, #8]
    25b4:	230f      	movs	r3, #15
    25b6:	18fb      	adds	r3, r7, r3
    25b8:	781b      	ldrb	r3, [r3, #0]
    25ba:	2201      	movs	r2, #1
    25bc:	0018      	movs	r0, r3
    25be:	4b10      	ldr	r3, [pc, #64]	; (2600 <sd_mmc_mem_2_ram+0x60>)
    25c0:	4798      	blx	r3
    25c2:	1e03      	subs	r3, r0, #0
    25c4:	d005      	beq.n	25d2 <sd_mmc_mem_2_ram+0x32>
    25c6:	2b02      	cmp	r3, #2
    25c8:	d101      	bne.n	25ce <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    25ca:	2302      	movs	r3, #2
    25cc:	e013      	b.n	25f6 <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    25ce:	2301      	movs	r3, #1
    25d0:	e011      	b.n	25f6 <sd_mmc_mem_2_ram+0x56>
		break;
    25d2:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	2101      	movs	r1, #1
    25d8:	0018      	movs	r0, r3
    25da:	4b0a      	ldr	r3, [pc, #40]	; (2604 <sd_mmc_mem_2_ram+0x64>)
    25dc:	4798      	blx	r3
    25de:	1e03      	subs	r3, r0, #0
    25e0:	d001      	beq.n	25e6 <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    25e2:	2301      	movs	r3, #1
    25e4:	e007      	b.n	25f6 <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    25e6:	2000      	movs	r0, #0
    25e8:	4b07      	ldr	r3, [pc, #28]	; (2608 <sd_mmc_mem_2_ram+0x68>)
    25ea:	4798      	blx	r3
    25ec:	1e03      	subs	r3, r0, #0
    25ee:	d001      	beq.n	25f4 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    25f0:	2301      	movs	r3, #1
    25f2:	e000      	b.n	25f6 <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    25f4:	2300      	movs	r3, #0
}
    25f6:	0018      	movs	r0, r3
    25f8:	46bd      	mov	sp, r7
    25fa:	b004      	add	sp, #16
    25fc:	bd80      	pop	{r7, pc}
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	00002069 	.word	0x00002069
    2604:	00002155 	.word	0x00002155
    2608:	000021ad 	.word	0x000021ad

0000260c <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    260c:	b580      	push	{r7, lr}
    260e:	b082      	sub	sp, #8
    2610:	af00      	add	r7, sp, #0
    2612:	6078      	str	r0, [r7, #4]
    2614:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    2616:	683a      	ldr	r2, [r7, #0]
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	0019      	movs	r1, r3
    261c:	2000      	movs	r0, #0
    261e:	4b03      	ldr	r3, [pc, #12]	; (262c <sd_mmc_mem_2_ram_0+0x20>)
    2620:	4798      	blx	r3
    2622:	0003      	movs	r3, r0
}
    2624:	0018      	movs	r0, r3
    2626:	46bd      	mov	sp, r7
    2628:	b002      	add	sp, #8
    262a:	bd80      	pop	{r7, pc}
    262c:	000025a1 	.word	0x000025a1

00002630 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    2630:	b580      	push	{r7, lr}
    2632:	b084      	sub	sp, #16
    2634:	af00      	add	r7, sp, #0
    2636:	60b9      	str	r1, [r7, #8]
    2638:	607a      	str	r2, [r7, #4]
    263a:	230f      	movs	r3, #15
    263c:	18fb      	adds	r3, r7, r3
    263e:	1c02      	adds	r2, r0, #0
    2640:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    2642:	68b9      	ldr	r1, [r7, #8]
    2644:	230f      	movs	r3, #15
    2646:	18fb      	adds	r3, r7, r3
    2648:	781b      	ldrb	r3, [r3, #0]
    264a:	2201      	movs	r2, #1
    264c:	0018      	movs	r0, r3
    264e:	4b10      	ldr	r3, [pc, #64]	; (2690 <sd_mmc_ram_2_mem+0x60>)
    2650:	4798      	blx	r3
    2652:	1e03      	subs	r3, r0, #0
    2654:	d005      	beq.n	2662 <sd_mmc_ram_2_mem+0x32>
    2656:	2b02      	cmp	r3, #2
    2658:	d101      	bne.n	265e <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    265a:	2302      	movs	r3, #2
    265c:	e013      	b.n	2686 <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    265e:	2301      	movs	r3, #1
    2660:	e011      	b.n	2686 <sd_mmc_ram_2_mem+0x56>
		break;
    2662:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	2101      	movs	r1, #1
    2668:	0018      	movs	r0, r3
    266a:	4b0a      	ldr	r3, [pc, #40]	; (2694 <sd_mmc_ram_2_mem+0x64>)
    266c:	4798      	blx	r3
    266e:	1e03      	subs	r3, r0, #0
    2670:	d001      	beq.n	2676 <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    2672:	2301      	movs	r3, #1
    2674:	e007      	b.n	2686 <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    2676:	2000      	movs	r0, #0
    2678:	4b07      	ldr	r3, [pc, #28]	; (2698 <sd_mmc_ram_2_mem+0x68>)
    267a:	4798      	blx	r3
    267c:	1e03      	subs	r3, r0, #0
    267e:	d001      	beq.n	2684 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    2680:	2301      	movs	r3, #1
    2682:	e000      	b.n	2686 <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    2684:	2300      	movs	r3, #0
}
    2686:	0018      	movs	r0, r3
    2688:	46bd      	mov	sp, r7
    268a:	b004      	add	sp, #16
    268c:	bd80      	pop	{r7, pc}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	00002245 	.word	0x00002245
    2694:	0000232d 	.word	0x0000232d
    2698:	00002385 	.word	0x00002385

0000269c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    269c:	b580      	push	{r7, lr}
    269e:	b082      	sub	sp, #8
    26a0:	af00      	add	r7, sp, #0
    26a2:	6078      	str	r0, [r7, #4]
    26a4:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    26a6:	683a      	ldr	r2, [r7, #0]
    26a8:	687b      	ldr	r3, [r7, #4]
    26aa:	0019      	movs	r1, r3
    26ac:	2000      	movs	r0, #0
    26ae:	4b03      	ldr	r3, [pc, #12]	; (26bc <sd_mmc_ram_2_mem_0+0x20>)
    26b0:	4798      	blx	r3
    26b2:	0003      	movs	r3, r0
}
    26b4:	0018      	movs	r0, r3
    26b6:	46bd      	mov	sp, r7
    26b8:	b002      	add	sp, #8
    26ba:	bd80      	pop	{r7, pc}
    26bc:	00002631 	.word	0x00002631

000026c0 <system_pinmux_get_group_from_gpio_pin>:
{
    26c0:	b580      	push	{r7, lr}
    26c2:	b084      	sub	sp, #16
    26c4:	af00      	add	r7, sp, #0
    26c6:	0002      	movs	r2, r0
    26c8:	1dfb      	adds	r3, r7, #7
    26ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    26cc:	230f      	movs	r3, #15
    26ce:	18fb      	adds	r3, r7, r3
    26d0:	1dfa      	adds	r2, r7, #7
    26d2:	7812      	ldrb	r2, [r2, #0]
    26d4:	09d2      	lsrs	r2, r2, #7
    26d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    26d8:	230e      	movs	r3, #14
    26da:	18fb      	adds	r3, r7, r3
    26dc:	1dfa      	adds	r2, r7, #7
    26de:	7812      	ldrb	r2, [r2, #0]
    26e0:	0952      	lsrs	r2, r2, #5
    26e2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    26e4:	4b0d      	ldr	r3, [pc, #52]	; (271c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    26e6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    26e8:	230f      	movs	r3, #15
    26ea:	18fb      	adds	r3, r7, r3
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d10f      	bne.n	2712 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    26f2:	230f      	movs	r3, #15
    26f4:	18fb      	adds	r3, r7, r3
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	009b      	lsls	r3, r3, #2
    26fa:	2210      	movs	r2, #16
    26fc:	4694      	mov	ip, r2
    26fe:	44bc      	add	ip, r7
    2700:	4463      	add	r3, ip
    2702:	3b08      	subs	r3, #8
    2704:	681a      	ldr	r2, [r3, #0]
    2706:	230e      	movs	r3, #14
    2708:	18fb      	adds	r3, r7, r3
    270a:	781b      	ldrb	r3, [r3, #0]
    270c:	01db      	lsls	r3, r3, #7
    270e:	18d3      	adds	r3, r2, r3
    2710:	e000      	b.n	2714 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2712:	2300      	movs	r3, #0
}
    2714:	0018      	movs	r0, r3
    2716:	46bd      	mov	sp, r7
    2718:	b004      	add	sp, #16
    271a:	bd80      	pop	{r7, pc}
    271c:	41004400 	.word	0x41004400

00002720 <port_get_group_from_gpio_pin>:
{
    2720:	b580      	push	{r7, lr}
    2722:	b082      	sub	sp, #8
    2724:	af00      	add	r7, sp, #0
    2726:	0002      	movs	r2, r0
    2728:	1dfb      	adds	r3, r7, #7
    272a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    272c:	1dfb      	adds	r3, r7, #7
    272e:	781b      	ldrb	r3, [r3, #0]
    2730:	0018      	movs	r0, r3
    2732:	4b03      	ldr	r3, [pc, #12]	; (2740 <port_get_group_from_gpio_pin+0x20>)
    2734:	4798      	blx	r3
    2736:	0003      	movs	r3, r0
}
    2738:	0018      	movs	r0, r3
    273a:	46bd      	mov	sp, r7
    273c:	b002      	add	sp, #8
    273e:	bd80      	pop	{r7, pc}
    2740:	000026c1 	.word	0x000026c1

00002744 <port_get_config_defaults>:
{
    2744:	b580      	push	{r7, lr}
    2746:	b082      	sub	sp, #8
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    274c:	687b      	ldr	r3, [r7, #4]
    274e:	2200      	movs	r2, #0
    2750:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	2201      	movs	r2, #1
    2756:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	2200      	movs	r2, #0
    275c:	709a      	strb	r2, [r3, #2]
}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	46bd      	mov	sp, r7
    2762:	b002      	add	sp, #8
    2764:	bd80      	pop	{r7, pc}
	...

00002768 <port_pin_set_output_level>:
{
    2768:	b580      	push	{r7, lr}
    276a:	b084      	sub	sp, #16
    276c:	af00      	add	r7, sp, #0
    276e:	0002      	movs	r2, r0
    2770:	1dfb      	adds	r3, r7, #7
    2772:	701a      	strb	r2, [r3, #0]
    2774:	1dbb      	adds	r3, r7, #6
    2776:	1c0a      	adds	r2, r1, #0
    2778:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    277a:	1dfb      	adds	r3, r7, #7
    277c:	781b      	ldrb	r3, [r3, #0]
    277e:	0018      	movs	r0, r3
    2780:	4b0d      	ldr	r3, [pc, #52]	; (27b8 <port_pin_set_output_level+0x50>)
    2782:	4798      	blx	r3
    2784:	0003      	movs	r3, r0
    2786:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2788:	1dfb      	adds	r3, r7, #7
    278a:	781b      	ldrb	r3, [r3, #0]
    278c:	221f      	movs	r2, #31
    278e:	4013      	ands	r3, r2
    2790:	2201      	movs	r2, #1
    2792:	409a      	lsls	r2, r3
    2794:	0013      	movs	r3, r2
    2796:	60bb      	str	r3, [r7, #8]
	if (level) {
    2798:	1dbb      	adds	r3, r7, #6
    279a:	781b      	ldrb	r3, [r3, #0]
    279c:	2b00      	cmp	r3, #0
    279e:	d003      	beq.n	27a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    27a0:	68fb      	ldr	r3, [r7, #12]
    27a2:	68ba      	ldr	r2, [r7, #8]
    27a4:	619a      	str	r2, [r3, #24]
}
    27a6:	e002      	b.n	27ae <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    27a8:	68fb      	ldr	r3, [r7, #12]
    27aa:	68ba      	ldr	r2, [r7, #8]
    27ac:	615a      	str	r2, [r3, #20]
}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	46bd      	mov	sp, r7
    27b2:	b004      	add	sp, #16
    27b4:	bd80      	pop	{r7, pc}
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	00002721 	.word	0x00002721

000027bc <system_interrupt_enable>:
{
    27bc:	b580      	push	{r7, lr}
    27be:	b082      	sub	sp, #8
    27c0:	af00      	add	r7, sp, #0
    27c2:	0002      	movs	r2, r0
    27c4:	1dfb      	adds	r3, r7, #7
    27c6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    27c8:	4b06      	ldr	r3, [pc, #24]	; (27e4 <system_interrupt_enable+0x28>)
    27ca:	1dfa      	adds	r2, r7, #7
    27cc:	7812      	ldrb	r2, [r2, #0]
    27ce:	0011      	movs	r1, r2
    27d0:	221f      	movs	r2, #31
    27d2:	400a      	ands	r2, r1
    27d4:	2101      	movs	r1, #1
    27d6:	4091      	lsls	r1, r2
    27d8:	000a      	movs	r2, r1
    27da:	601a      	str	r2, [r3, #0]
}
    27dc:	46c0      	nop			; (mov r8, r8)
    27de:	46bd      	mov	sp, r7
    27e0:	b002      	add	sp, #8
    27e2:	bd80      	pop	{r7, pc}
    27e4:	e000e100 	.word	0xe000e100

000027e8 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    27e8:	b580      	push	{r7, lr}
    27ea:	b084      	sub	sp, #16
    27ec:	af00      	add	r7, sp, #0
    27ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    27f0:	687b      	ldr	r3, [r7, #4]
    27f2:	681b      	ldr	r3, [r3, #0]
    27f4:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    27f6:	68fb      	ldr	r3, [r7, #12]
    27f8:	69db      	ldr	r3, [r3, #28]
    27fa:	1e5a      	subs	r2, r3, #1
    27fc:	4193      	sbcs	r3, r2
    27fe:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2800:	0018      	movs	r0, r3
    2802:	46bd      	mov	sp, r7
    2804:	b004      	add	sp, #16
    2806:	bd80      	pop	{r7, pc}

00002808 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2808:	b580      	push	{r7, lr}
    280a:	b082      	sub	sp, #8
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	2201      	movs	r2, #1
    2814:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	2200      	movs	r2, #0
    281a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    281c:	687b      	ldr	r3, [r7, #4]
    281e:	2200      	movs	r2, #0
    2820:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	22c0      	movs	r2, #192	; 0xc0
    2826:	0392      	lsls	r2, r2, #14
    2828:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	2200      	movs	r2, #0
    282e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	2200      	movs	r2, #0
    2834:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	2201      	movs	r2, #1
    283a:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	2201      	movs	r2, #1
    2840:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	2200      	movs	r2, #0
    2846:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	2224      	movs	r2, #36	; 0x24
    284c:	2100      	movs	r1, #0
    284e:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	3318      	adds	r3, #24
    2854:	220c      	movs	r2, #12
    2856:	2100      	movs	r1, #0
    2858:	0018      	movs	r0, r3
    285a:	4b0a      	ldr	r3, [pc, #40]	; (2884 <spi_get_config_defaults+0x7c>)
    285c:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	4a09      	ldr	r2, [pc, #36]	; (2888 <spi_get_config_defaults+0x80>)
    2862:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2864:	687b      	ldr	r3, [r7, #4]
    2866:	2200      	movs	r2, #0
    2868:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	2200      	movs	r2, #0
    286e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	2200      	movs	r2, #0
    2874:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	2200      	movs	r2, #0
    287a:	635a      	str	r2, [r3, #52]	; 0x34

};
    287c:	46c0      	nop			; (mov r8, r8)
    287e:	46bd      	mov	sp, r7
    2880:	b002      	add	sp, #8
    2882:	bd80      	pop	{r7, pc}
    2884:	0000b2a7 	.word	0x0000b2a7
    2888:	000186a0 	.word	0x000186a0

0000288c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    288c:	b580      	push	{r7, lr}
    288e:	b082      	sub	sp, #8
    2890:	af00      	add	r7, sp, #0
    2892:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	220a      	movs	r2, #10
    2898:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    289a:	687b      	ldr	r3, [r7, #4]
    289c:	2200      	movs	r2, #0
    289e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	2200      	movs	r2, #0
    28a4:	709a      	strb	r2, [r3, #2]
}
    28a6:	46c0      	nop			; (mov r8, r8)
    28a8:	46bd      	mov	sp, r7
    28aa:	b002      	add	sp, #8
    28ac:	bd80      	pop	{r7, pc}
	...

000028b0 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    28b0:	b580      	push	{r7, lr}
    28b2:	b084      	sub	sp, #16
    28b4:	af00      	add	r7, sp, #0
    28b6:	6078      	str	r0, [r7, #4]
    28b8:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    28ba:	683b      	ldr	r3, [r7, #0]
    28bc:	781a      	ldrb	r2, [r3, #0]
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    28c2:	683b      	ldr	r3, [r7, #0]
    28c4:	785a      	ldrb	r2, [r3, #1]
    28c6:	687b      	ldr	r3, [r7, #4]
    28c8:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    28ca:	683b      	ldr	r3, [r7, #0]
    28cc:	789a      	ldrb	r2, [r3, #2]
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    28d2:	230c      	movs	r3, #12
    28d4:	18fb      	adds	r3, r7, r3
    28d6:	0018      	movs	r0, r3
    28d8:	4b0b      	ldr	r3, [pc, #44]	; (2908 <spi_attach_slave+0x58>)
    28da:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    28dc:	230c      	movs	r3, #12
    28de:	18fb      	adds	r3, r7, r3
    28e0:	2201      	movs	r2, #1
    28e2:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	220c      	movs	r2, #12
    28ea:	18ba      	adds	r2, r7, r2
    28ec:	0011      	movs	r1, r2
    28ee:	0018      	movs	r0, r3
    28f0:	4b06      	ldr	r3, [pc, #24]	; (290c <spi_attach_slave+0x5c>)
    28f2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	781b      	ldrb	r3, [r3, #0]
    28f8:	2101      	movs	r1, #1
    28fa:	0018      	movs	r0, r3
    28fc:	4b04      	ldr	r3, [pc, #16]	; (2910 <spi_attach_slave+0x60>)
    28fe:	4798      	blx	r3
}
    2900:	46c0      	nop			; (mov r8, r8)
    2902:	46bd      	mov	sp, r7
    2904:	b004      	add	sp, #16
    2906:	bd80      	pop	{r7, pc}
    2908:	00002745 	.word	0x00002745
    290c:	000035bd 	.word	0x000035bd
    2910:	00002769 	.word	0x00002769

00002914 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2914:	b580      	push	{r7, lr}
    2916:	b084      	sub	sp, #16
    2918:	af00      	add	r7, sp, #0
    291a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	0018      	movs	r0, r3
    2928:	4b0b      	ldr	r3, [pc, #44]	; (2958 <spi_enable+0x44>)
    292a:	4798      	blx	r3
    292c:	0003      	movs	r3, r0
    292e:	0018      	movs	r0, r3
    2930:	4b0a      	ldr	r3, [pc, #40]	; (295c <spi_enable+0x48>)
    2932:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2934:	46c0      	nop			; (mov r8, r8)
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	0018      	movs	r0, r3
    293a:	4b09      	ldr	r3, [pc, #36]	; (2960 <spi_enable+0x4c>)
    293c:	4798      	blx	r3
    293e:	1e03      	subs	r3, r0, #0
    2940:	d1f9      	bne.n	2936 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2942:	68fb      	ldr	r3, [r7, #12]
    2944:	681b      	ldr	r3, [r3, #0]
    2946:	2202      	movs	r2, #2
    2948:	431a      	orrs	r2, r3
    294a:	68fb      	ldr	r3, [r7, #12]
    294c:	601a      	str	r2, [r3, #0]
}
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	46bd      	mov	sp, r7
    2952:	b004      	add	sp, #16
    2954:	bd80      	pop	{r7, pc}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	00004149 	.word	0x00004149
    295c:	000027bd 	.word	0x000027bd
    2960:	000027e9 	.word	0x000027e9

00002964 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    2964:	b580      	push	{r7, lr}
    2966:	b084      	sub	sp, #16
    2968:	af00      	add	r7, sp, #0
    296a:	6078      	str	r0, [r7, #4]
    296c:	000a      	movs	r2, r1
    296e:	1cfb      	adds	r3, r7, #3
    2970:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    2972:	230f      	movs	r3, #15
    2974:	18fb      	adds	r3, r7, r3
    2976:	2200      	movs	r2, #0
    2978:	701a      	strb	r2, [r3, #0]
	while (size--) {
    297a:	e038      	b.n	29ee <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	1c5a      	adds	r2, r3, #1
    2980:	607a      	str	r2, [r7, #4]
    2982:	220e      	movs	r2, #14
    2984:	18ba      	adds	r2, r7, r2
    2986:	781b      	ldrb	r3, [r3, #0]
    2988:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    298a:	230d      	movs	r3, #13
    298c:	18fb      	adds	r3, r7, r3
    298e:	2200      	movs	r2, #0
    2990:	701a      	strb	r2, [r3, #0]
    2992:	e027      	b.n	29e4 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    2994:	230f      	movs	r3, #15
    2996:	18fa      	adds	r2, r7, r3
    2998:	230f      	movs	r3, #15
    299a:	18fb      	adds	r3, r7, r3
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	18db      	adds	r3, r3, r3
    29a0:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    29a2:	230e      	movs	r3, #14
    29a4:	18fa      	adds	r2, r7, r3
    29a6:	230f      	movs	r3, #15
    29a8:	18fb      	adds	r3, r7, r3
    29aa:	7812      	ldrb	r2, [r2, #0]
    29ac:	781b      	ldrb	r3, [r3, #0]
    29ae:	4053      	eors	r3, r2
    29b0:	b2db      	uxtb	r3, r3
    29b2:	b25b      	sxtb	r3, r3
    29b4:	2b00      	cmp	r3, #0
    29b6:	da07      	bge.n	29c8 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    29b8:	230f      	movs	r3, #15
    29ba:	18fb      	adds	r3, r7, r3
    29bc:	220f      	movs	r2, #15
    29be:	18ba      	adds	r2, r7, r2
    29c0:	7812      	ldrb	r2, [r2, #0]
    29c2:	2109      	movs	r1, #9
    29c4:	404a      	eors	r2, r1
    29c6:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    29c8:	230e      	movs	r3, #14
    29ca:	18fa      	adds	r2, r7, r3
    29cc:	230e      	movs	r3, #14
    29ce:	18fb      	adds	r3, r7, r3
    29d0:	781b      	ldrb	r3, [r3, #0]
    29d2:	18db      	adds	r3, r3, r3
    29d4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    29d6:	230d      	movs	r3, #13
    29d8:	18fb      	adds	r3, r7, r3
    29da:	781a      	ldrb	r2, [r3, #0]
    29dc:	230d      	movs	r3, #13
    29de:	18fb      	adds	r3, r7, r3
    29e0:	3201      	adds	r2, #1
    29e2:	701a      	strb	r2, [r3, #0]
    29e4:	230d      	movs	r3, #13
    29e6:	18fb      	adds	r3, r7, r3
    29e8:	781b      	ldrb	r3, [r3, #0]
    29ea:	2b07      	cmp	r3, #7
    29ec:	d9d2      	bls.n	2994 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    29ee:	1cfb      	adds	r3, r7, #3
    29f0:	781b      	ldrb	r3, [r3, #0]
    29f2:	1cfa      	adds	r2, r7, #3
    29f4:	1e59      	subs	r1, r3, #1
    29f6:	7011      	strb	r1, [r2, #0]
    29f8:	2b00      	cmp	r3, #0
    29fa:	d1bf      	bne.n	297c <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    29fc:	230f      	movs	r3, #15
    29fe:	18fb      	adds	r3, r7, r3
    2a00:	781b      	ldrb	r3, [r3, #0]
    2a02:	005b      	lsls	r3, r3, #1
    2a04:	b25b      	sxtb	r3, r3
    2a06:	2201      	movs	r2, #1
    2a08:	4313      	orrs	r3, r2
    2a0a:	b25a      	sxtb	r2, r3
    2a0c:	230f      	movs	r3, #15
    2a0e:	18fb      	adds	r3, r7, r3
    2a10:	701a      	strb	r2, [r3, #0]
	return crc;
    2a12:	230f      	movs	r3, #15
    2a14:	18fb      	adds	r3, r7, r3
    2a16:	781b      	ldrb	r3, [r3, #0]
}
    2a18:	0018      	movs	r0, r3
    2a1a:	46bd      	mov	sp, r7
    2a1c:	b004      	add	sp, #16
    2a1e:	bd80      	pop	{r7, pc}

00002a20 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    2a20:	b590      	push	{r4, r7, lr}
    2a22:	b083      	sub	sp, #12
    2a24:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    2a26:	1c7b      	adds	r3, r7, #1
    2a28:	22ff      	movs	r2, #255	; 0xff
    2a2a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    2a2c:	1cbb      	adds	r3, r7, #2
    2a2e:	22ff      	movs	r2, #255	; 0xff
    2a30:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2a32:	1cbb      	adds	r3, r7, #2
    2a34:	881b      	ldrh	r3, [r3, #0]
    2a36:	1c79      	adds	r1, r7, #1
    2a38:	4811      	ldr	r0, [pc, #68]	; (2a80 <sd_mmc_spi_wait_busy+0x60>)
    2a3a:	2201      	movs	r2, #1
    2a3c:	4c11      	ldr	r4, [pc, #68]	; (2a84 <sd_mmc_spi_wait_busy+0x64>)
    2a3e:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    2a40:	4b11      	ldr	r3, [pc, #68]	; (2a88 <sd_mmc_spi_wait_busy+0x68>)
    2a42:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2a44:	1cbb      	adds	r3, r7, #2
    2a46:	881b      	ldrh	r3, [r3, #0]
    2a48:	1c79      	adds	r1, r7, #1
    2a4a:	480d      	ldr	r0, [pc, #52]	; (2a80 <sd_mmc_spi_wait_busy+0x60>)
    2a4c:	2201      	movs	r2, #1
    2a4e:	4c0d      	ldr	r4, [pc, #52]	; (2a84 <sd_mmc_spi_wait_busy+0x64>)
    2a50:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2a52:	1cbb      	adds	r3, r7, #2
    2a54:	881b      	ldrh	r3, [r3, #0]
    2a56:	1c79      	adds	r1, r7, #1
    2a58:	4809      	ldr	r0, [pc, #36]	; (2a80 <sd_mmc_spi_wait_busy+0x60>)
    2a5a:	2201      	movs	r2, #1
    2a5c:	4c09      	ldr	r4, [pc, #36]	; (2a84 <sd_mmc_spi_wait_busy+0x64>)
    2a5e:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	1e5a      	subs	r2, r3, #1
    2a64:	607a      	str	r2, [r7, #4]
    2a66:	2b00      	cmp	r3, #0
    2a68:	d101      	bne.n	2a6e <sd_mmc_spi_wait_busy+0x4e>
			return false;
    2a6a:	2300      	movs	r3, #0
    2a6c:	e004      	b.n	2a78 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    2a6e:	1c7b      	adds	r3, r7, #1
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	2bff      	cmp	r3, #255	; 0xff
    2a74:	d1ed      	bne.n	2a52 <sd_mmc_spi_wait_busy+0x32>
	return true;
    2a76:	2301      	movs	r3, #1
}
    2a78:	0018      	movs	r0, r3
    2a7a:	46bd      	mov	sp, r7
    2a7c:	b003      	add	sp, #12
    2a7e:	bd90      	pop	{r4, r7, pc}
    2a80:	200000ec 	.word	0x200000ec
    2a84:	00004ac9 	.word	0x00004ac9
    2a88:	00030d40 	.word	0x00030d40

00002a8c <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2a8c:	b590      	push	{r4, r7, lr}
    2a8e:	b083      	sub	sp, #12
    2a90:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    2a92:	1cbb      	adds	r3, r7, #2
    2a94:	22ff      	movs	r2, #255	; 0xff
    2a96:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    2a98:	1c7b      	adds	r3, r7, #1
    2a9a:	2200      	movs	r2, #0
    2a9c:	701a      	strb	r2, [r3, #0]
	i = 500000;
    2a9e:	4b18      	ldr	r3, [pc, #96]	; (2b00 <sd_mmc_spi_start_read_block+0x74>)
    2aa0:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    2aa2:	687b      	ldr	r3, [r7, #4]
    2aa4:	1e5a      	subs	r2, r3, #1
    2aa6:	607a      	str	r2, [r7, #4]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d104      	bne.n	2ab6 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2aac:	4b15      	ldr	r3, [pc, #84]	; (2b04 <sd_mmc_spi_start_read_block+0x78>)
    2aae:	2204      	movs	r2, #4
    2ab0:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    2ab2:	2300      	movs	r3, #0
    2ab4:	e020      	b.n	2af8 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    2ab6:	1cbb      	adds	r3, r7, #2
    2ab8:	881b      	ldrh	r3, [r3, #0]
    2aba:	1c79      	adds	r1, r7, #1
    2abc:	4812      	ldr	r0, [pc, #72]	; (2b08 <sd_mmc_spi_start_read_block+0x7c>)
    2abe:	2201      	movs	r2, #1
    2ac0:	4c12      	ldr	r4, [pc, #72]	; (2b0c <sd_mmc_spi_start_read_block+0x80>)
    2ac2:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    2ac4:	1c7b      	adds	r3, r7, #1
    2ac6:	781b      	ldrb	r3, [r3, #0]
    2ac8:	001a      	movs	r2, r3
    2aca:	23f0      	movs	r3, #240	; 0xf0
    2acc:	4013      	ands	r3, r2
    2ace:	d10e      	bne.n	2aee <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    2ad0:	1c7b      	adds	r3, r7, #1
    2ad2:	781b      	ldrb	r3, [r3, #0]
    2ad4:	001a      	movs	r2, r3
    2ad6:	2307      	movs	r3, #7
    2ad8:	4013      	ands	r3, r2
    2ada:	d003      	beq.n	2ae4 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2adc:	4b09      	ldr	r3, [pc, #36]	; (2b04 <sd_mmc_spi_start_read_block+0x78>)
    2ade:	2207      	movs	r2, #7
    2ae0:	701a      	strb	r2, [r3, #0]
    2ae2:	e002      	b.n	2aea <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    2ae4:	4b07      	ldr	r3, [pc, #28]	; (2b04 <sd_mmc_spi_start_read_block+0x78>)
    2ae6:	220b      	movs	r2, #11
    2ae8:	701a      	strb	r2, [r3, #0]
			}
			return false;
    2aea:	2300      	movs	r3, #0
    2aec:	e004      	b.n	2af8 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    2aee:	1c7b      	adds	r3, r7, #1
    2af0:	781b      	ldrb	r3, [r3, #0]
    2af2:	2bfe      	cmp	r3, #254	; 0xfe
    2af4:	d1d5      	bne.n	2aa2 <sd_mmc_spi_start_read_block+0x16>

	return true;
    2af6:	2301      	movs	r3, #1
}
    2af8:	0018      	movs	r0, r3
    2afa:	46bd      	mov	sp, r7
    2afc:	b003      	add	sp, #12
    2afe:	bd90      	pop	{r4, r7, pc}
    2b00:	0007a120 	.word	0x0007a120
    2b04:	2000012f 	.word	0x2000012f
    2b08:	200000ec 	.word	0x200000ec
    2b0c:	00004ac9 	.word	0x00004ac9

00002b10 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    2b10:	b590      	push	{r4, r7, lr}
    2b12:	b083      	sub	sp, #12
    2b14:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    2b16:	1dbb      	adds	r3, r7, #6
    2b18:	22ff      	movs	r2, #255	; 0xff
    2b1a:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    2b1c:	1dbb      	adds	r3, r7, #6
    2b1e:	881b      	ldrh	r3, [r3, #0]
    2b20:	1d39      	adds	r1, r7, #4
    2b22:	4804      	ldr	r0, [pc, #16]	; (2b34 <sd_mmc_spi_stop_read_block+0x24>)
    2b24:	2202      	movs	r2, #2
    2b26:	4c04      	ldr	r4, [pc, #16]	; (2b38 <sd_mmc_spi_stop_read_block+0x28>)
    2b28:	47a0      	blx	r4
			dummy);
}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	46bd      	mov	sp, r7
    2b2e:	b003      	add	sp, #12
    2b30:	bd90      	pop	{r4, r7, pc}
    2b32:	46c0      	nop			; (mov r8, r8)
    2b34:	200000ec 	.word	0x200000ec
    2b38:	00004ac9 	.word	0x00004ac9

00002b3c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    2b3c:	b580      	push	{r7, lr}
    2b3e:	b082      	sub	sp, #8
    2b40:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    2b42:	1dfb      	adds	r3, r7, #7
    2b44:	22ff      	movs	r2, #255	; 0xff
    2b46:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    2b48:	1df9      	adds	r1, r7, #7
    2b4a:	4b0d      	ldr	r3, [pc, #52]	; (2b80 <sd_mmc_spi_start_write_block+0x44>)
    2b4c:	2201      	movs	r2, #1
    2b4e:	0018      	movs	r0, r3
    2b50:	4b0c      	ldr	r3, [pc, #48]	; (2b84 <sd_mmc_spi_start_write_block+0x48>)
    2b52:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    2b54:	4b0c      	ldr	r3, [pc, #48]	; (2b88 <sd_mmc_spi_start_write_block+0x4c>)
    2b56:	881b      	ldrh	r3, [r3, #0]
    2b58:	2b01      	cmp	r3, #1
    2b5a:	d103      	bne.n	2b64 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    2b5c:	1dbb      	adds	r3, r7, #6
    2b5e:	22fe      	movs	r2, #254	; 0xfe
    2b60:	701a      	strb	r2, [r3, #0]
    2b62:	e002      	b.n	2b6a <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    2b64:	1dbb      	adds	r3, r7, #6
    2b66:	22fc      	movs	r2, #252	; 0xfc
    2b68:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    2b6a:	1db9      	adds	r1, r7, #6
    2b6c:	4b04      	ldr	r3, [pc, #16]	; (2b80 <sd_mmc_spi_start_write_block+0x44>)
    2b6e:	2201      	movs	r2, #1
    2b70:	0018      	movs	r0, r3
    2b72:	4b04      	ldr	r3, [pc, #16]	; (2b84 <sd_mmc_spi_start_write_block+0x48>)
    2b74:	4798      	blx	r3
}
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	46bd      	mov	sp, r7
    2b7a:	b002      	add	sp, #8
    2b7c:	bd80      	pop	{r7, pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	200000ec 	.word	0x200000ec
    2b84:	00004ced 	.word	0x00004ced
    2b88:	2000013a 	.word	0x2000013a

00002b8c <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2b8c:	b590      	push	{r4, r7, lr}
    2b8e:	b083      	sub	sp, #12
    2b90:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    2b92:	1dbb      	adds	r3, r7, #6
    2b94:	22ff      	movs	r2, #255	; 0xff
    2b96:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2b98:	1cbb      	adds	r3, r7, #2
    2b9a:	2201      	movs	r2, #1
    2b9c:	4252      	negs	r2, r2
    2b9e:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2ba0:	1cb9      	adds	r1, r7, #2
    2ba2:	4b1b      	ldr	r3, [pc, #108]	; (2c10 <sd_mmc_spi_stop_write_block+0x84>)
    2ba4:	2202      	movs	r2, #2
    2ba6:	0018      	movs	r0, r3
    2ba8:	4b1a      	ldr	r3, [pc, #104]	; (2c14 <sd_mmc_spi_stop_write_block+0x88>)
    2baa:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2bac:	1dbb      	adds	r3, r7, #6
    2bae:	881b      	ldrh	r3, [r3, #0]
    2bb0:	1d79      	adds	r1, r7, #5
    2bb2:	4817      	ldr	r0, [pc, #92]	; (2c10 <sd_mmc_spi_stop_write_block+0x84>)
    2bb4:	2201      	movs	r2, #1
    2bb6:	4c18      	ldr	r4, [pc, #96]	; (2c18 <sd_mmc_spi_stop_write_block+0x8c>)
    2bb8:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2bba:	1d7b      	adds	r3, r7, #5
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	001a      	movs	r2, r3
    2bc0:	2310      	movs	r3, #16
    2bc2:	4013      	ands	r3, r2
    2bc4:	d105      	bne.n	2bd2 <sd_mmc_spi_stop_write_block+0x46>
    2bc6:	1d7b      	adds	r3, r7, #5
    2bc8:	781b      	ldrb	r3, [r3, #0]
    2bca:	001a      	movs	r2, r3
    2bcc:	2301      	movs	r3, #1
    2bce:	4013      	ands	r3, r2
    2bd0:	d104      	bne.n	2bdc <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2bd2:	4b12      	ldr	r3, [pc, #72]	; (2c1c <sd_mmc_spi_stop_write_block+0x90>)
    2bd4:	2201      	movs	r2, #1
    2bd6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2bd8:	2300      	movs	r3, #0
    2bda:	e014      	b.n	2c06 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2bdc:	1d7b      	adds	r3, r7, #5
    2bde:	781b      	ldrb	r3, [r3, #0]
    2be0:	001a      	movs	r2, r3
    2be2:	231e      	movs	r3, #30
    2be4:	4013      	ands	r3, r2
    2be6:	2b04      	cmp	r3, #4
    2be8:	d00b      	beq.n	2c02 <sd_mmc_spi_stop_write_block+0x76>
    2bea:	2b0a      	cmp	r3, #10
    2bec:	d104      	bne.n	2bf8 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    2bee:	4b0b      	ldr	r3, [pc, #44]	; (2c1c <sd_mmc_spi_stop_write_block+0x90>)
    2bf0:	2208      	movs	r2, #8
    2bf2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2bf4:	2300      	movs	r3, #0
    2bf6:	e006      	b.n	2c06 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    2bf8:	4b08      	ldr	r3, [pc, #32]	; (2c1c <sd_mmc_spi_stop_write_block+0x90>)
    2bfa:	220a      	movs	r2, #10
    2bfc:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2bfe:	2300      	movs	r3, #0
    2c00:	e001      	b.n	2c06 <sd_mmc_spi_stop_write_block+0x7a>
		break;
    2c02:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    2c04:	2301      	movs	r3, #1
}
    2c06:	0018      	movs	r0, r3
    2c08:	46bd      	mov	sp, r7
    2c0a:	b003      	add	sp, #12
    2c0c:	bd90      	pop	{r4, r7, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	200000ec 	.word	0x200000ec
    2c14:	00004ced 	.word	0x00004ced
    2c18:	00004ac9 	.word	0x00004ac9
    2c1c:	2000012f 	.word	0x2000012f

00002c20 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    2c20:	b590      	push	{r4, r7, lr}
    2c22:	b083      	sub	sp, #12
    2c24:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    2c26:	4b1d      	ldr	r3, [pc, #116]	; (2c9c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2c28:	881b      	ldrh	r3, [r3, #0]
    2c2a:	2b01      	cmp	r3, #1
    2c2c:	d101      	bne.n	2c32 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    2c2e:	2301      	movs	r3, #1
    2c30:	e030      	b.n	2c94 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    2c32:	4b1a      	ldr	r3, [pc, #104]	; (2c9c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2c34:	881b      	ldrh	r3, [r3, #0]
    2c36:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    2c38:	4b19      	ldr	r3, [pc, #100]	; (2ca0 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    2c3a:	681a      	ldr	r2, [r3, #0]
    2c3c:	4b19      	ldr	r3, [pc, #100]	; (2ca4 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    2c3e:	881b      	ldrh	r3, [r3, #0]
    2c40:	0019      	movs	r1, r3
    2c42:	4b19      	ldr	r3, [pc, #100]	; (2ca8 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    2c44:	0010      	movs	r0, r2
    2c46:	4798      	blx	r3
    2c48:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    2c4a:	429c      	cmp	r4, r3
    2c4c:	d901      	bls.n	2c52 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    2c4e:	2301      	movs	r3, #1
    2c50:	e020      	b.n	2c94 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    2c52:	1dfb      	adds	r3, r7, #7
    2c54:	22ff      	movs	r2, #255	; 0xff
    2c56:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2c58:	1df9      	adds	r1, r7, #7
    2c5a:	4b14      	ldr	r3, [pc, #80]	; (2cac <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2c5c:	2201      	movs	r2, #1
    2c5e:	0018      	movs	r0, r3
    2c60:	4b13      	ldr	r3, [pc, #76]	; (2cb0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2c62:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    2c64:	1dfb      	adds	r3, r7, #7
    2c66:	22fd      	movs	r2, #253	; 0xfd
    2c68:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2c6a:	1df9      	adds	r1, r7, #7
    2c6c:	4b0f      	ldr	r3, [pc, #60]	; (2cac <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2c6e:	2201      	movs	r2, #1
    2c70:	0018      	movs	r0, r3
    2c72:	4b0f      	ldr	r3, [pc, #60]	; (2cb0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2c74:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    2c76:	4b0f      	ldr	r3, [pc, #60]	; (2cb4 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    2c78:	4798      	blx	r3
    2c7a:	0003      	movs	r3, r0
    2c7c:	001a      	movs	r2, r3
    2c7e:	2301      	movs	r3, #1
    2c80:	4053      	eors	r3, r2
    2c82:	b2db      	uxtb	r3, r3
    2c84:	2b00      	cmp	r3, #0
    2c86:	d004      	beq.n	2c92 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2c88:	4b0b      	ldr	r3, [pc, #44]	; (2cb8 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2c8a:	2205      	movs	r2, #5
    2c8c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2c8e:	2300      	movs	r3, #0
    2c90:	e000      	b.n	2c94 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    2c92:	2301      	movs	r3, #1
}
    2c94:	0018      	movs	r0, r3
    2c96:	46bd      	mov	sp, r7
    2c98:	b003      	add	sp, #12
    2c9a:	bd90      	pop	{r4, r7, pc}
    2c9c:	2000013a 	.word	0x2000013a
    2ca0:	20000134 	.word	0x20000134
    2ca4:	20000138 	.word	0x20000138
    2ca8:	0000aef9 	.word	0x0000aef9
    2cac:	200000ec 	.word	0x200000ec
    2cb0:	00004ced 	.word	0x00004ced
    2cb4:	00002a21 	.word	0x00002a21
    2cb8:	2000012f 	.word	0x2000012f

00002cbc <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2cbc:	b580      	push	{r7, lr}
    2cbe:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <sd_mmc_deinit+0x14>)
    2cc2:	0018      	movs	r0, r3
    2cc4:	4b03      	ldr	r3, [pc, #12]	; (2cd4 <sd_mmc_deinit+0x18>)
    2cc6:	4798      	blx	r3
}
    2cc8:	46c0      	nop			; (mov r8, r8)
    2cca:	46bd      	mov	sp, r7
    2ccc:	bd80      	pop	{r7, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	200000ec 	.word	0x200000ec
    2cd4:	00004621 	.word	0x00004621

00002cd8 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2cd8:	b580      	push	{r7, lr}
    2cda:	b090      	sub	sp, #64	; 0x40
    2cdc:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2cde:	4b1f      	ldr	r3, [pc, #124]	; (2d5c <sd_mmc_spi_init+0x84>)
    2ce0:	2200      	movs	r2, #0
    2ce2:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2ce4:	233c      	movs	r3, #60	; 0x3c
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	0018      	movs	r0, r3
    2cea:	4b1d      	ldr	r3, [pc, #116]	; (2d60 <sd_mmc_spi_init+0x88>)
    2cec:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2cee:	1d3b      	adds	r3, r7, #4
    2cf0:	0018      	movs	r0, r3
    2cf2:	4b1c      	ldr	r3, [pc, #112]	; (2d64 <sd_mmc_spi_init+0x8c>)
    2cf4:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    2cf6:	1d3b      	adds	r3, r7, #4
    2cf8:	2280      	movs	r2, #128	; 0x80
    2cfa:	0252      	lsls	r2, r2, #9
    2cfc:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2cfe:	1d3b      	adds	r3, r7, #4
    2d00:	4a19      	ldr	r2, [pc, #100]	; (2d68 <sd_mmc_spi_init+0x90>)
    2d02:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    2d04:	1d3b      	adds	r3, r7, #4
    2d06:	4a19      	ldr	r2, [pc, #100]	; (2d6c <sd_mmc_spi_init+0x94>)
    2d08:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2d0a:	1d3b      	adds	r3, r7, #4
    2d0c:	4a18      	ldr	r2, [pc, #96]	; (2d70 <sd_mmc_spi_init+0x98>)
    2d0e:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2d10:	1d3b      	adds	r3, r7, #4
    2d12:	4a18      	ldr	r2, [pc, #96]	; (2d74 <sd_mmc_spi_init+0x9c>)
    2d14:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    2d16:	1d3b      	adds	r3, r7, #4
    2d18:	2224      	movs	r2, #36	; 0x24
    2d1a:	2100      	movs	r1, #0
    2d1c:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2d1e:	1d3b      	adds	r3, r7, #4
    2d20:	4a15      	ldr	r2, [pc, #84]	; (2d78 <sd_mmc_spi_init+0xa0>)
    2d22:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    2d24:	1d3a      	adds	r2, r7, #4
    2d26:	4915      	ldr	r1, [pc, #84]	; (2d7c <sd_mmc_spi_init+0xa4>)
    2d28:	4b15      	ldr	r3, [pc, #84]	; (2d80 <sd_mmc_spi_init+0xa8>)
    2d2a:	0018      	movs	r0, r3
    2d2c:	4b15      	ldr	r3, [pc, #84]	; (2d84 <sd_mmc_spi_init+0xac>)
    2d2e:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    2d30:	4b13      	ldr	r3, [pc, #76]	; (2d80 <sd_mmc_spi_init+0xa8>)
    2d32:	0018      	movs	r0, r3
    2d34:	4b14      	ldr	r3, [pc, #80]	; (2d88 <sd_mmc_spi_init+0xb0>)
    2d36:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    2d38:	4b14      	ldr	r3, [pc, #80]	; (2d8c <sd_mmc_spi_init+0xb4>)
    2d3a:	0018      	movs	r0, r3
    2d3c:	4b14      	ldr	r3, [pc, #80]	; (2d90 <sd_mmc_spi_init+0xb8>)
    2d3e:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    2d40:	4b14      	ldr	r3, [pc, #80]	; (2d94 <sd_mmc_spi_init+0xbc>)
    2d42:	781a      	ldrb	r2, [r3, #0]
    2d44:	4b11      	ldr	r3, [pc, #68]	; (2d8c <sd_mmc_spi_init+0xb4>)
    2d46:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    2d48:	4a10      	ldr	r2, [pc, #64]	; (2d8c <sd_mmc_spi_init+0xb4>)
    2d4a:	4b13      	ldr	r3, [pc, #76]	; (2d98 <sd_mmc_spi_init+0xc0>)
    2d4c:	0011      	movs	r1, r2
    2d4e:	0018      	movs	r0, r3
    2d50:	4b12      	ldr	r3, [pc, #72]	; (2d9c <sd_mmc_spi_init+0xc4>)
    2d52:	4798      	blx	r3
}
    2d54:	46c0      	nop			; (mov r8, r8)
    2d56:	46bd      	mov	sp, r7
    2d58:	b010      	add	sp, #64	; 0x40
    2d5a:	bd80      	pop	{r7, pc}
    2d5c:	2000012f 	.word	0x2000012f
    2d60:	00002745 	.word	0x00002745
    2d64:	00002809 	.word	0x00002809
    2d68:	00100002 	.word	0x00100002
    2d6c:	00110002 	.word	0x00110002
    2d70:	00120002 	.word	0x00120002
    2d74:	00130002 	.word	0x00130002
    2d78:	00061a80 	.word	0x00061a80
    2d7c:	42000c00 	.word	0x42000c00
    2d80:	200000ec 	.word	0x200000ec
    2d84:	00004939 	.word	0x00004939
    2d88:	00002915 	.word	0x00002915
    2d8c:	2000012c 	.word	0x2000012c
    2d90:	0000288d 	.word	0x0000288d
    2d94:	20000008 	.word	0x20000008
    2d98:	20000128 	.word	0x20000128
    2d9c:	000028b1 	.word	0x000028b1

00002da0 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2da0:	b590      	push	{r4, r7, lr}
    2da2:	b083      	sub	sp, #12
    2da4:	af00      	add	r7, sp, #0
    2da6:	0004      	movs	r4, r0
    2da8:	6039      	str	r1, [r7, #0]
    2daa:	0010      	movs	r0, r2
    2dac:	0019      	movs	r1, r3
    2dae:	1dfb      	adds	r3, r7, #7
    2db0:	1c22      	adds	r2, r4, #0
    2db2:	701a      	strb	r2, [r3, #0]
    2db4:	1dbb      	adds	r3, r7, #6
    2db6:	1c02      	adds	r2, r0, #0
    2db8:	701a      	strb	r2, [r3, #0]
    2dba:	1d7b      	adds	r3, r7, #5
    2dbc:	1c0a      	adds	r2, r1, #0
    2dbe:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2dc0:	4b13      	ldr	r3, [pc, #76]	; (2e10 <sd_mmc_spi_select_device+0x70>)
    2dc2:	2200      	movs	r2, #0
    2dc4:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2dc6:	683b      	ldr	r3, [r7, #0]
    2dc8:	4a12      	ldr	r2, [pc, #72]	; (2e14 <sd_mmc_spi_select_device+0x74>)
    2dca:	4293      	cmp	r3, r2
    2dcc:	d907      	bls.n	2dde <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2dce:	4b11      	ldr	r3, [pc, #68]	; (2e14 <sd_mmc_spi_select_device+0x74>)
    2dd0:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2dd2:	e004      	b.n	2dde <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2dd4:	683b      	ldr	r3, [r7, #0]
    2dd6:	08db      	lsrs	r3, r3, #3
    2dd8:	683a      	ldr	r2, [r7, #0]
    2dda:	1ad3      	subs	r3, r2, r3
    2ddc:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2dde:	683a      	ldr	r2, [r7, #0]
    2de0:	4b0d      	ldr	r3, [pc, #52]	; (2e18 <sd_mmc_spi_select_device+0x78>)
    2de2:	0011      	movs	r1, r2
    2de4:	0018      	movs	r0, r3
    2de6:	4b0d      	ldr	r3, [pc, #52]	; (2e1c <sd_mmc_spi_select_device+0x7c>)
    2de8:	4798      	blx	r3
    2dea:	0003      	movs	r3, r0
    2dec:	2b17      	cmp	r3, #23
    2dee:	d0f1      	beq.n	2dd4 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2df0:	1dfb      	adds	r3, r7, #7
    2df2:	781a      	ldrb	r2, [r3, #0]
    2df4:	0013      	movs	r3, r2
    2df6:	005b      	lsls	r3, r3, #1
    2df8:	189b      	adds	r3, r3, r2
    2dfa:	4a09      	ldr	r2, [pc, #36]	; (2e20 <sd_mmc_spi_select_device+0x80>)
    2dfc:	1899      	adds	r1, r3, r2
    2dfe:	4b06      	ldr	r3, [pc, #24]	; (2e18 <sd_mmc_spi_select_device+0x78>)
    2e00:	2201      	movs	r2, #1
    2e02:	0018      	movs	r0, r3
    2e04:	4b07      	ldr	r3, [pc, #28]	; (2e24 <sd_mmc_spi_select_device+0x84>)
    2e06:	4798      	blx	r3
}
    2e08:	46c0      	nop			; (mov r8, r8)
    2e0a:	46bd      	mov	sp, r7
    2e0c:	b003      	add	sp, #12
    2e0e:	bd90      	pop	{r4, r7, pc}
    2e10:	2000012f 	.word	0x2000012f
    2e14:	00989680 	.word	0x00989680
    2e18:	200000ec 	.word	0x200000ec
    2e1c:	00004661 	.word	0x00004661
    2e20:	20000128 	.word	0x20000128
    2e24:	00004bfd 	.word	0x00004bfd

00002e28 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2e28:	b580      	push	{r7, lr}
    2e2a:	b082      	sub	sp, #8
    2e2c:	af00      	add	r7, sp, #0
    2e2e:	0002      	movs	r2, r0
    2e30:	1dfb      	adds	r3, r7, #7
    2e32:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2e34:	4b09      	ldr	r3, [pc, #36]	; (2e5c <sd_mmc_spi_deselect_device+0x34>)
    2e36:	2200      	movs	r2, #0
    2e38:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2e3a:	1dfb      	adds	r3, r7, #7
    2e3c:	781a      	ldrb	r2, [r3, #0]
    2e3e:	0013      	movs	r3, r2
    2e40:	005b      	lsls	r3, r3, #1
    2e42:	189b      	adds	r3, r3, r2
    2e44:	4a06      	ldr	r2, [pc, #24]	; (2e60 <sd_mmc_spi_deselect_device+0x38>)
    2e46:	1899      	adds	r1, r3, r2
    2e48:	4b06      	ldr	r3, [pc, #24]	; (2e64 <sd_mmc_spi_deselect_device+0x3c>)
    2e4a:	2200      	movs	r2, #0
    2e4c:	0018      	movs	r0, r3
    2e4e:	4b06      	ldr	r3, [pc, #24]	; (2e68 <sd_mmc_spi_deselect_device+0x40>)
    2e50:	4798      	blx	r3
}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	46bd      	mov	sp, r7
    2e56:	b002      	add	sp, #8
    2e58:	bd80      	pop	{r7, pc}
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	2000012f 	.word	0x2000012f
    2e60:	20000128 	.word	0x20000128
    2e64:	200000ec 	.word	0x200000ec
    2e68:	00004bfd 	.word	0x00004bfd

00002e6c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2e6c:	b580      	push	{r7, lr}
    2e6e:	b082      	sub	sp, #8
    2e70:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    2e72:	1dbb      	adds	r3, r7, #6
    2e74:	22ff      	movs	r2, #255	; 0xff
    2e76:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2e78:	4b0c      	ldr	r3, [pc, #48]	; (2eac <sd_mmc_spi_send_clock+0x40>)
    2e7a:	2200      	movs	r2, #0
    2e7c:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    2e7e:	1dfb      	adds	r3, r7, #7
    2e80:	2200      	movs	r2, #0
    2e82:	701a      	strb	r2, [r3, #0]
    2e84:	e00a      	b.n	2e9c <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2e86:	1db9      	adds	r1, r7, #6
    2e88:	4b09      	ldr	r3, [pc, #36]	; (2eb0 <sd_mmc_spi_send_clock+0x44>)
    2e8a:	2201      	movs	r2, #1
    2e8c:	0018      	movs	r0, r3
    2e8e:	4b09      	ldr	r3, [pc, #36]	; (2eb4 <sd_mmc_spi_send_clock+0x48>)
    2e90:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    2e92:	1dfb      	adds	r3, r7, #7
    2e94:	781a      	ldrb	r2, [r3, #0]
    2e96:	1dfb      	adds	r3, r7, #7
    2e98:	3201      	adds	r2, #1
    2e9a:	701a      	strb	r2, [r3, #0]
    2e9c:	1dfb      	adds	r3, r7, #7
    2e9e:	781b      	ldrb	r3, [r3, #0]
    2ea0:	2b09      	cmp	r3, #9
    2ea2:	d9f0      	bls.n	2e86 <sd_mmc_spi_send_clock+0x1a>
	}
}
    2ea4:	46c0      	nop			; (mov r8, r8)
    2ea6:	46bd      	mov	sp, r7
    2ea8:	b002      	add	sp, #8
    2eaa:	bd80      	pop	{r7, pc}
    2eac:	2000012f 	.word	0x2000012f
    2eb0:	200000ec 	.word	0x200000ec
    2eb4:	00004ced 	.word	0x00004ced

00002eb8 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2eb8:	b590      	push	{r4, r7, lr}
    2eba:	b085      	sub	sp, #20
    2ebc:	af02      	add	r7, sp, #8
    2ebe:	6078      	str	r0, [r7, #4]
    2ec0:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    2ec2:	6839      	ldr	r1, [r7, #0]
    2ec4:	6878      	ldr	r0, [r7, #4]
    2ec6:	2300      	movs	r3, #0
    2ec8:	9300      	str	r3, [sp, #0]
    2eca:	2300      	movs	r3, #0
    2ecc:	2200      	movs	r2, #0
    2ece:	4c03      	ldr	r4, [pc, #12]	; (2edc <sd_mmc_spi_send_cmd+0x24>)
    2ed0:	47a0      	blx	r4
    2ed2:	0003      	movs	r3, r0
}
    2ed4:	0018      	movs	r0, r3
    2ed6:	46bd      	mov	sp, r7
    2ed8:	b003      	add	sp, #12
    2eda:	bd90      	pop	{r4, r7, pc}
    2edc:	00002ee1 	.word	0x00002ee1

00002ee0 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2ee0:	b590      	push	{r4, r7, lr}
    2ee2:	b089      	sub	sp, #36	; 0x24
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	60f8      	str	r0, [r7, #12]
    2ee8:	60b9      	str	r1, [r7, #8]
    2eea:	0019      	movs	r1, r3
    2eec:	1dbb      	adds	r3, r7, #6
    2eee:	801a      	strh	r2, [r3, #0]
    2ef0:	1d3b      	adds	r3, r7, #4
    2ef2:	1c0a      	adds	r2, r1, #0
    2ef4:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2ef6:	231b      	movs	r3, #27
    2ef8:	18fb      	adds	r3, r7, r3
    2efa:	22ff      	movs	r2, #255	; 0xff
    2efc:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2efe:	231c      	movs	r3, #28
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	22ff      	movs	r2, #255	; 0xff
    2f04:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2f06:	4b72      	ldr	r3, [pc, #456]	; (30d0 <sd_mmc_spi_adtc_start+0x1f0>)
    2f08:	2200      	movs	r2, #0
    2f0a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2f0c:	68fb      	ldr	r3, [r7, #12]
    2f0e:	b2db      	uxtb	r3, r3
    2f10:	223f      	movs	r2, #63	; 0x3f
    2f12:	4013      	ands	r3, r2
    2f14:	b2db      	uxtb	r3, r3
    2f16:	2240      	movs	r2, #64	; 0x40
    2f18:	4313      	orrs	r3, r2
    2f1a:	b2da      	uxtb	r2, r3
    2f1c:	2314      	movs	r3, #20
    2f1e:	18fb      	adds	r3, r7, r3
    2f20:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    2f22:	68bb      	ldr	r3, [r7, #8]
    2f24:	0e1b      	lsrs	r3, r3, #24
    2f26:	b2da      	uxtb	r2, r3
    2f28:	2314      	movs	r3, #20
    2f2a:	18fb      	adds	r3, r7, r3
    2f2c:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    2f2e:	68bb      	ldr	r3, [r7, #8]
    2f30:	0c1b      	lsrs	r3, r3, #16
    2f32:	b2da      	uxtb	r2, r3
    2f34:	2314      	movs	r3, #20
    2f36:	18fb      	adds	r3, r7, r3
    2f38:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2f3a:	68bb      	ldr	r3, [r7, #8]
    2f3c:	0a1b      	lsrs	r3, r3, #8
    2f3e:	b2da      	uxtb	r2, r3
    2f40:	2314      	movs	r3, #20
    2f42:	18fb      	adds	r3, r7, r3
    2f44:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2f46:	68bb      	ldr	r3, [r7, #8]
    2f48:	b2da      	uxtb	r2, r3
    2f4a:	2314      	movs	r3, #20
    2f4c:	18fb      	adds	r3, r7, r3
    2f4e:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    2f50:	2314      	movs	r3, #20
    2f52:	18fb      	adds	r3, r7, r3
    2f54:	2105      	movs	r1, #5
    2f56:	0018      	movs	r0, r3
    2f58:	4b5e      	ldr	r3, [pc, #376]	; (30d4 <sd_mmc_spi_adtc_start+0x1f4>)
    2f5a:	4798      	blx	r3
    2f5c:	0003      	movs	r3, r0
    2f5e:	001a      	movs	r2, r3
    2f60:	2314      	movs	r3, #20
    2f62:	18fb      	adds	r3, r7, r3
    2f64:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2f66:	231b      	movs	r3, #27
    2f68:	18f9      	adds	r1, r7, r3
    2f6a:	4b5b      	ldr	r3, [pc, #364]	; (30d8 <sd_mmc_spi_adtc_start+0x1f8>)
    2f6c:	2201      	movs	r2, #1
    2f6e:	0018      	movs	r0, r3
    2f70:	4b5a      	ldr	r3, [pc, #360]	; (30dc <sd_mmc_spi_adtc_start+0x1fc>)
    2f72:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2f74:	2314      	movs	r3, #20
    2f76:	18f9      	adds	r1, r7, r3
    2f78:	4b57      	ldr	r3, [pc, #348]	; (30d8 <sd_mmc_spi_adtc_start+0x1f8>)
    2f7a:	2206      	movs	r2, #6
    2f7c:	0018      	movs	r0, r3
    2f7e:	4b57      	ldr	r3, [pc, #348]	; (30dc <sd_mmc_spi_adtc_start+0x1fc>)
    2f80:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    2f82:	2313      	movs	r3, #19
    2f84:	18fb      	adds	r3, r7, r3
    2f86:	22ff      	movs	r2, #255	; 0xff
    2f88:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2f8a:	231c      	movs	r3, #28
    2f8c:	18fb      	adds	r3, r7, r3
    2f8e:	881b      	ldrh	r3, [r3, #0]
    2f90:	2213      	movs	r2, #19
    2f92:	18b9      	adds	r1, r7, r2
    2f94:	4850      	ldr	r0, [pc, #320]	; (30d8 <sd_mmc_spi_adtc_start+0x1f8>)
    2f96:	2201      	movs	r2, #1
    2f98:	4c51      	ldr	r4, [pc, #324]	; (30e0 <sd_mmc_spi_adtc_start+0x200>)
    2f9a:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2f9c:	231f      	movs	r3, #31
    2f9e:	18fb      	adds	r3, r7, r3
    2fa0:	2207      	movs	r2, #7
    2fa2:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2fa4:	231c      	movs	r3, #28
    2fa6:	18fb      	adds	r3, r7, r3
    2fa8:	881b      	ldrh	r3, [r3, #0]
    2faa:	2213      	movs	r2, #19
    2fac:	18b9      	adds	r1, r7, r2
    2fae:	484a      	ldr	r0, [pc, #296]	; (30d8 <sd_mmc_spi_adtc_start+0x1f8>)
    2fb0:	2201      	movs	r2, #1
    2fb2:	4c4b      	ldr	r4, [pc, #300]	; (30e0 <sd_mmc_spi_adtc_start+0x200>)
    2fb4:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2fb6:	2313      	movs	r3, #19
    2fb8:	18fb      	adds	r3, r7, r3
    2fba:	781b      	ldrb	r3, [r3, #0]
    2fbc:	b25b      	sxtb	r3, r3
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	da10      	bge.n	2fe4 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2fc2:	231f      	movs	r3, #31
    2fc4:	18fb      	adds	r3, r7, r3
    2fc6:	221f      	movs	r2, #31
    2fc8:	18ba      	adds	r2, r7, r2
    2fca:	7812      	ldrb	r2, [r2, #0]
    2fcc:	3a01      	subs	r2, #1
    2fce:	701a      	strb	r2, [r3, #0]
    2fd0:	231f      	movs	r3, #31
    2fd2:	18fb      	adds	r3, r7, r3
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d1e4      	bne.n	2fa4 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2fda:	4b3d      	ldr	r3, [pc, #244]	; (30d0 <sd_mmc_spi_adtc_start+0x1f0>)
    2fdc:	2202      	movs	r2, #2
    2fde:	701a      	strb	r2, [r3, #0]
			return false;
    2fe0:	2300      	movs	r3, #0
    2fe2:	e070      	b.n	30c6 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2fe4:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2fe6:	2313      	movs	r3, #19
    2fe8:	18fb      	adds	r3, r7, r3
    2fea:	781b      	ldrb	r3, [r3, #0]
    2fec:	001a      	movs	r2, r3
    2fee:	4b3d      	ldr	r3, [pc, #244]	; (30e4 <sd_mmc_spi_adtc_start+0x204>)
    2ff0:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2ff2:	2313      	movs	r3, #19
    2ff4:	18fb      	adds	r3, r7, r3
    2ff6:	781b      	ldrb	r3, [r3, #0]
    2ff8:	001a      	movs	r2, r3
    2ffa:	2308      	movs	r3, #8
    2ffc:	4013      	ands	r3, r2
    2ffe:	d004      	beq.n	300a <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    3000:	4b33      	ldr	r3, [pc, #204]	; (30d0 <sd_mmc_spi_adtc_start+0x1f0>)
    3002:	2206      	movs	r2, #6
    3004:	701a      	strb	r2, [r3, #0]
		return false;
    3006:	2300      	movs	r3, #0
    3008:	e05d      	b.n	30c6 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    300a:	2313      	movs	r3, #19
    300c:	18fb      	adds	r3, r7, r3
    300e:	781b      	ldrb	r3, [r3, #0]
    3010:	001a      	movs	r2, r3
    3012:	2304      	movs	r3, #4
    3014:	4013      	ands	r3, r2
    3016:	d004      	beq.n	3022 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    3018:	4b2d      	ldr	r3, [pc, #180]	; (30d0 <sd_mmc_spi_adtc_start+0x1f0>)
    301a:	2209      	movs	r2, #9
    301c:	701a      	strb	r2, [r3, #0]
		return false;
    301e:	2300      	movs	r3, #0
    3020:	e051      	b.n	30c6 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    3022:	2313      	movs	r3, #19
    3024:	18fb      	adds	r3, r7, r3
    3026:	781b      	ldrb	r3, [r3, #0]
    3028:	001a      	movs	r2, r3
    302a:	2301      	movs	r3, #1
    302c:	439a      	bics	r2, r3
    302e:	1e13      	subs	r3, r2, #0
    3030:	d004      	beq.n	303c <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    3032:	4b27      	ldr	r3, [pc, #156]	; (30d0 <sd_mmc_spi_adtc_start+0x1f0>)
    3034:	2201      	movs	r2, #1
    3036:	701a      	strb	r2, [r3, #0]
		return false;
    3038:	2300      	movs	r3, #0
    303a:	e044      	b.n	30c6 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    303c:	68fa      	ldr	r2, [r7, #12]
    303e:	2380      	movs	r3, #128	; 0x80
    3040:	019b      	lsls	r3, r3, #6
    3042:	4013      	ands	r3, r2
    3044:	d00d      	beq.n	3062 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    3046:	4b28      	ldr	r3, [pc, #160]	; (30e8 <sd_mmc_spi_adtc_start+0x208>)
    3048:	4798      	blx	r3
    304a:	0003      	movs	r3, r0
    304c:	001a      	movs	r2, r3
    304e:	2301      	movs	r3, #1
    3050:	4053      	eors	r3, r2
    3052:	b2db      	uxtb	r3, r3
    3054:	2b00      	cmp	r3, #0
    3056:	d004      	beq.n	3062 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    3058:	4b1d      	ldr	r3, [pc, #116]	; (30d0 <sd_mmc_spi_adtc_start+0x1f0>)
    305a:	2203      	movs	r2, #3
    305c:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    305e:	2300      	movs	r3, #0
    3060:	e031      	b.n	30c6 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    3062:	68fa      	ldr	r2, [r7, #12]
    3064:	2380      	movs	r3, #128	; 0x80
    3066:	009b      	lsls	r3, r3, #2
    3068:	4013      	ands	r3, r2
    306a:	d00e      	beq.n	308a <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    306c:	4b1d      	ldr	r3, [pc, #116]	; (30e4 <sd_mmc_spi_adtc_start+0x204>)
    306e:	2200      	movs	r2, #0
    3070:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    3072:	231c      	movs	r3, #28
    3074:	18fb      	adds	r3, r7, r3
    3076:	881b      	ldrh	r3, [r3, #0]
    3078:	491a      	ldr	r1, [pc, #104]	; (30e4 <sd_mmc_spi_adtc_start+0x204>)
    307a:	4817      	ldr	r0, [pc, #92]	; (30d8 <sd_mmc_spi_adtc_start+0x1f8>)
    307c:	2201      	movs	r2, #1
    307e:	4c18      	ldr	r4, [pc, #96]	; (30e0 <sd_mmc_spi_adtc_start+0x200>)
    3080:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    3082:	4b18      	ldr	r3, [pc, #96]	; (30e4 <sd_mmc_spi_adtc_start+0x204>)
    3084:	681a      	ldr	r2, [r3, #0]
    3086:	4b17      	ldr	r3, [pc, #92]	; (30e4 <sd_mmc_spi_adtc_start+0x204>)
    3088:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    308a:	68fa      	ldr	r2, [r7, #12]
    308c:	2380      	movs	r3, #128	; 0x80
    308e:	00db      	lsls	r3, r3, #3
    3090:	4013      	ands	r3, r2
    3092:	d00c      	beq.n	30ae <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    3094:	231c      	movs	r3, #28
    3096:	18fb      	adds	r3, r7, r3
    3098:	881b      	ldrh	r3, [r3, #0]
    309a:	4912      	ldr	r1, [pc, #72]	; (30e4 <sd_mmc_spi_adtc_start+0x204>)
    309c:	480e      	ldr	r0, [pc, #56]	; (30d8 <sd_mmc_spi_adtc_start+0x1f8>)
    309e:	2204      	movs	r2, #4
    30a0:	4c0f      	ldr	r4, [pc, #60]	; (30e0 <sd_mmc_spi_adtc_start+0x200>)
    30a2:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    30a4:	4b0f      	ldr	r3, [pc, #60]	; (30e4 <sd_mmc_spi_adtc_start+0x204>)
    30a6:	681b      	ldr	r3, [r3, #0]
    30a8:	ba1a      	rev	r2, r3
    30aa:	4b0e      	ldr	r3, [pc, #56]	; (30e4 <sd_mmc_spi_adtc_start+0x204>)
    30ac:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    30ae:	4b0f      	ldr	r3, [pc, #60]	; (30ec <sd_mmc_spi_adtc_start+0x20c>)
    30b0:	1dba      	adds	r2, r7, #6
    30b2:	8812      	ldrh	r2, [r2, #0]
    30b4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    30b6:	4b0e      	ldr	r3, [pc, #56]	; (30f0 <sd_mmc_spi_adtc_start+0x210>)
    30b8:	1d3a      	adds	r2, r7, #4
    30ba:	8812      	ldrh	r2, [r2, #0]
    30bc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    30be:	4b0d      	ldr	r3, [pc, #52]	; (30f4 <sd_mmc_spi_adtc_start+0x214>)
    30c0:	2200      	movs	r2, #0
    30c2:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    30c4:	2301      	movs	r3, #1
}
    30c6:	0018      	movs	r0, r3
    30c8:	46bd      	mov	sp, r7
    30ca:	b009      	add	sp, #36	; 0x24
    30cc:	bd90      	pop	{r4, r7, pc}
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	2000012f 	.word	0x2000012f
    30d4:	00002965 	.word	0x00002965
    30d8:	200000ec 	.word	0x200000ec
    30dc:	00004ced 	.word	0x00004ced
    30e0:	00004ac9 	.word	0x00004ac9
    30e4:	20000130 	.word	0x20000130
    30e8:	00002a21 	.word	0x00002a21
    30ec:	20000138 	.word	0x20000138
    30f0:	2000013a 	.word	0x2000013a
    30f4:	20000134 	.word	0x20000134

000030f8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    30f8:	b580      	push	{r7, lr}
    30fa:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    30fc:	4b02      	ldr	r3, [pc, #8]	; (3108 <sd_mmc_spi_get_response+0x10>)
    30fe:	681b      	ldr	r3, [r3, #0]
}
    3100:	0018      	movs	r0, r3
    3102:	46bd      	mov	sp, r7
    3104:	bd80      	pop	{r7, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	20000130 	.word	0x20000130

0000310c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    310c:	b590      	push	{r4, r7, lr}
    310e:	b085      	sub	sp, #20
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    3114:	230e      	movs	r3, #14
    3116:	18fb      	adds	r3, r7, r3
    3118:	22ff      	movs	r2, #255	; 0xff
    311a:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    311c:	4b1c      	ldr	r3, [pc, #112]	; (3190 <sd_mmc_spi_read_word+0x84>)
    311e:	2200      	movs	r2, #0
    3120:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3122:	4b1c      	ldr	r3, [pc, #112]	; (3194 <sd_mmc_spi_read_word+0x88>)
    3124:	681a      	ldr	r2, [r3, #0]
    3126:	4b1c      	ldr	r3, [pc, #112]	; (3198 <sd_mmc_spi_read_word+0x8c>)
    3128:	881b      	ldrh	r3, [r3, #0]
    312a:	0019      	movs	r1, r3
    312c:	4b1b      	ldr	r3, [pc, #108]	; (319c <sd_mmc_spi_read_word+0x90>)
    312e:	0010      	movs	r0, r2
    3130:	4798      	blx	r3
    3132:	1e0b      	subs	r3, r1, #0
    3134:	d10a      	bne.n	314c <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    3136:	4b1a      	ldr	r3, [pc, #104]	; (31a0 <sd_mmc_spi_read_word+0x94>)
    3138:	4798      	blx	r3
    313a:	0003      	movs	r3, r0
    313c:	001a      	movs	r2, r3
    313e:	2301      	movs	r3, #1
    3140:	4053      	eors	r3, r2
    3142:	b2db      	uxtb	r3, r3
    3144:	2b00      	cmp	r3, #0
    3146:	d001      	beq.n	314c <sd_mmc_spi_read_word+0x40>
			return false;
    3148:	2300      	movs	r3, #0
    314a:	e01d      	b.n	3188 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    314c:	230e      	movs	r3, #14
    314e:	18fb      	adds	r3, r7, r3
    3150:	881b      	ldrh	r3, [r3, #0]
    3152:	1d39      	adds	r1, r7, #4
    3154:	4813      	ldr	r0, [pc, #76]	; (31a4 <sd_mmc_spi_read_word+0x98>)
    3156:	2204      	movs	r2, #4
    3158:	4c13      	ldr	r4, [pc, #76]	; (31a8 <sd_mmc_spi_read_word+0x9c>)
    315a:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	687a      	ldr	r2, [r7, #4]
    3160:	6812      	ldr	r2, [r2, #0]
    3162:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    3164:	4b0b      	ldr	r3, [pc, #44]	; (3194 <sd_mmc_spi_read_word+0x88>)
    3166:	681b      	ldr	r3, [r3, #0]
    3168:	1d1a      	adds	r2, r3, #4
    316a:	4b0a      	ldr	r3, [pc, #40]	; (3194 <sd_mmc_spi_read_word+0x88>)
    316c:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    316e:	4b09      	ldr	r3, [pc, #36]	; (3194 <sd_mmc_spi_read_word+0x88>)
    3170:	681a      	ldr	r2, [r3, #0]
    3172:	4b09      	ldr	r3, [pc, #36]	; (3198 <sd_mmc_spi_read_word+0x8c>)
    3174:	881b      	ldrh	r3, [r3, #0]
    3176:	0019      	movs	r1, r3
    3178:	4b08      	ldr	r3, [pc, #32]	; (319c <sd_mmc_spi_read_word+0x90>)
    317a:	0010      	movs	r0, r2
    317c:	4798      	blx	r3
    317e:	1e0b      	subs	r3, r1, #0
    3180:	d101      	bne.n	3186 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    3182:	4b0a      	ldr	r3, [pc, #40]	; (31ac <sd_mmc_spi_read_word+0xa0>)
    3184:	4798      	blx	r3
	}
	return true;
    3186:	2301      	movs	r3, #1
}
    3188:	0018      	movs	r0, r3
    318a:	46bd      	mov	sp, r7
    318c:	b005      	add	sp, #20
    318e:	bd90      	pop	{r4, r7, pc}
    3190:	2000012f 	.word	0x2000012f
    3194:	20000134 	.word	0x20000134
    3198:	20000138 	.word	0x20000138
    319c:	0000b005 	.word	0x0000b005
    31a0:	00002a8d 	.word	0x00002a8d
    31a4:	200000ec 	.word	0x200000ec
    31a8:	00004ac9 	.word	0x00004ac9
    31ac:	00002b11 	.word	0x00002b11

000031b0 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    31b0:	b590      	push	{r4, r7, lr}
    31b2:	b085      	sub	sp, #20
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
    31b8:	000a      	movs	r2, r1
    31ba:	1cbb      	adds	r3, r7, #2
    31bc:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    31be:	230a      	movs	r3, #10
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	22ff      	movs	r2, #255	; 0xff
    31c4:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    31c6:	4b1c      	ldr	r3, [pc, #112]	; (3238 <sd_mmc_spi_start_read_blocks+0x88>)
    31c8:	2200      	movs	r2, #0
    31ca:	701a      	strb	r2, [r3, #0]
	pos = 0;
    31cc:	2300      	movs	r3, #0
    31ce:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    31d0:	e025      	b.n	321e <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    31d2:	4b1a      	ldr	r3, [pc, #104]	; (323c <sd_mmc_spi_start_read_blocks+0x8c>)
    31d4:	4798      	blx	r3
    31d6:	0003      	movs	r3, r0
    31d8:	001a      	movs	r2, r3
    31da:	2301      	movs	r3, #1
    31dc:	4053      	eors	r3, r2
    31de:	b2db      	uxtb	r3, r3
    31e0:	2b00      	cmp	r3, #0
    31e2:	d001      	beq.n	31e8 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    31e4:	2300      	movs	r3, #0
    31e6:	e022      	b.n	322e <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    31e8:	687a      	ldr	r2, [r7, #4]
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	18d1      	adds	r1, r2, r3
    31ee:	4b14      	ldr	r3, [pc, #80]	; (3240 <sd_mmc_spi_start_read_blocks+0x90>)
    31f0:	881a      	ldrh	r2, [r3, #0]
    31f2:	230a      	movs	r3, #10
    31f4:	18fb      	adds	r3, r7, r3
    31f6:	881b      	ldrh	r3, [r3, #0]
    31f8:	4812      	ldr	r0, [pc, #72]	; (3244 <sd_mmc_spi_start_read_blocks+0x94>)
    31fa:	4c13      	ldr	r4, [pc, #76]	; (3248 <sd_mmc_spi_start_read_blocks+0x98>)
    31fc:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    31fe:	4b10      	ldr	r3, [pc, #64]	; (3240 <sd_mmc_spi_start_read_blocks+0x90>)
    3200:	881b      	ldrh	r3, [r3, #0]
    3202:	001a      	movs	r2, r3
    3204:	68fb      	ldr	r3, [r7, #12]
    3206:	189b      	adds	r3, r3, r2
    3208:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    320a:	4b0d      	ldr	r3, [pc, #52]	; (3240 <sd_mmc_spi_start_read_blocks+0x90>)
    320c:	881b      	ldrh	r3, [r3, #0]
    320e:	001a      	movs	r2, r3
    3210:	4b0e      	ldr	r3, [pc, #56]	; (324c <sd_mmc_spi_start_read_blocks+0x9c>)
    3212:	681b      	ldr	r3, [r3, #0]
    3214:	18d2      	adds	r2, r2, r3
    3216:	4b0d      	ldr	r3, [pc, #52]	; (324c <sd_mmc_spi_start_read_blocks+0x9c>)
    3218:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    321a:	4b0d      	ldr	r3, [pc, #52]	; (3250 <sd_mmc_spi_start_read_blocks+0xa0>)
    321c:	4798      	blx	r3
	while (nb_block--) {
    321e:	1cbb      	adds	r3, r7, #2
    3220:	881b      	ldrh	r3, [r3, #0]
    3222:	1cba      	adds	r2, r7, #2
    3224:	1e59      	subs	r1, r3, #1
    3226:	8011      	strh	r1, [r2, #0]
    3228:	2b00      	cmp	r3, #0
    322a:	d1d2      	bne.n	31d2 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    322c:	2301      	movs	r3, #1
}
    322e:	0018      	movs	r0, r3
    3230:	46bd      	mov	sp, r7
    3232:	b005      	add	sp, #20
    3234:	bd90      	pop	{r4, r7, pc}
    3236:	46c0      	nop			; (mov r8, r8)
    3238:	2000012f 	.word	0x2000012f
    323c:	00002a8d 	.word	0x00002a8d
    3240:	20000138 	.word	0x20000138
    3244:	200000ec 	.word	0x200000ec
    3248:	00004ac9 	.word	0x00004ac9
    324c:	20000134 	.word	0x20000134
    3250:	00002b11 	.word	0x00002b11

00003254 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    3254:	b580      	push	{r7, lr}
    3256:	af00      	add	r7, sp, #0
	return true;
    3258:	2301      	movs	r3, #1
}
    325a:	0018      	movs	r0, r3
    325c:	46bd      	mov	sp, r7
    325e:	bd80      	pop	{r7, pc}

00003260 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    3260:	b580      	push	{r7, lr}
    3262:	b084      	sub	sp, #16
    3264:	af00      	add	r7, sp, #0
    3266:	6078      	str	r0, [r7, #4]
    3268:	000a      	movs	r2, r1
    326a:	1cbb      	adds	r3, r7, #2
    326c:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    326e:	4b24      	ldr	r3, [pc, #144]	; (3300 <sd_mmc_spi_start_write_blocks+0xa0>)
    3270:	2200      	movs	r2, #0
    3272:	701a      	strb	r2, [r3, #0]
	pos = 0;
    3274:	2300      	movs	r3, #0
    3276:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    3278:	e035      	b.n	32e6 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    327a:	4b22      	ldr	r3, [pc, #136]	; (3304 <sd_mmc_spi_start_write_blocks+0xa4>)
    327c:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    327e:	687a      	ldr	r2, [r7, #4]
    3280:	68fb      	ldr	r3, [r7, #12]
    3282:	18d1      	adds	r1, r2, r3
    3284:	4b20      	ldr	r3, [pc, #128]	; (3308 <sd_mmc_spi_start_write_blocks+0xa8>)
    3286:	881a      	ldrh	r2, [r3, #0]
    3288:	4b20      	ldr	r3, [pc, #128]	; (330c <sd_mmc_spi_start_write_blocks+0xac>)
    328a:	0018      	movs	r0, r3
    328c:	4b20      	ldr	r3, [pc, #128]	; (3310 <sd_mmc_spi_start_write_blocks+0xb0>)
    328e:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    3290:	4b1d      	ldr	r3, [pc, #116]	; (3308 <sd_mmc_spi_start_write_blocks+0xa8>)
    3292:	881b      	ldrh	r3, [r3, #0]
    3294:	001a      	movs	r2, r3
    3296:	68fb      	ldr	r3, [r7, #12]
    3298:	189b      	adds	r3, r3, r2
    329a:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    329c:	4b1a      	ldr	r3, [pc, #104]	; (3308 <sd_mmc_spi_start_write_blocks+0xa8>)
    329e:	881b      	ldrh	r3, [r3, #0]
    32a0:	001a      	movs	r2, r3
    32a2:	4b1c      	ldr	r3, [pc, #112]	; (3314 <sd_mmc_spi_start_write_blocks+0xb4>)
    32a4:	681b      	ldr	r3, [r3, #0]
    32a6:	18d2      	adds	r2, r2, r3
    32a8:	4b1a      	ldr	r3, [pc, #104]	; (3314 <sd_mmc_spi_start_write_blocks+0xb4>)
    32aa:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    32ac:	4b1a      	ldr	r3, [pc, #104]	; (3318 <sd_mmc_spi_start_write_blocks+0xb8>)
    32ae:	4798      	blx	r3
    32b0:	0003      	movs	r3, r0
    32b2:	001a      	movs	r2, r3
    32b4:	2301      	movs	r3, #1
    32b6:	4053      	eors	r3, r2
    32b8:	b2db      	uxtb	r3, r3
    32ba:	2b00      	cmp	r3, #0
    32bc:	d001      	beq.n	32c2 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    32be:	2300      	movs	r3, #0
    32c0:	e019      	b.n	32f6 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    32c2:	1cbb      	adds	r3, r7, #2
    32c4:	881b      	ldrh	r3, [r3, #0]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d00d      	beq.n	32e6 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    32ca:	4b14      	ldr	r3, [pc, #80]	; (331c <sd_mmc_spi_start_write_blocks+0xbc>)
    32cc:	4798      	blx	r3
    32ce:	0003      	movs	r3, r0
    32d0:	001a      	movs	r2, r3
    32d2:	2301      	movs	r3, #1
    32d4:	4053      	eors	r3, r2
    32d6:	b2db      	uxtb	r3, r3
    32d8:	2b00      	cmp	r3, #0
    32da:	d004      	beq.n	32e6 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    32dc:	4b08      	ldr	r3, [pc, #32]	; (3300 <sd_mmc_spi_start_write_blocks+0xa0>)
    32de:	2205      	movs	r2, #5
    32e0:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    32e2:	2300      	movs	r3, #0
    32e4:	e007      	b.n	32f6 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    32e6:	1cbb      	adds	r3, r7, #2
    32e8:	881b      	ldrh	r3, [r3, #0]
    32ea:	1cba      	adds	r2, r7, #2
    32ec:	1e59      	subs	r1, r3, #1
    32ee:	8011      	strh	r1, [r2, #0]
    32f0:	2b00      	cmp	r3, #0
    32f2:	d1c2      	bne.n	327a <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    32f4:	2301      	movs	r3, #1
}
    32f6:	0018      	movs	r0, r3
    32f8:	46bd      	mov	sp, r7
    32fa:	b004      	add	sp, #16
    32fc:	bd80      	pop	{r7, pc}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	2000012f 	.word	0x2000012f
    3304:	00002b3d 	.word	0x00002b3d
    3308:	20000138 	.word	0x20000138
    330c:	200000ec 	.word	0x200000ec
    3310:	00004ced 	.word	0x00004ced
    3314:	20000134 	.word	0x20000134
    3318:	00002b8d 	.word	0x00002b8d
    331c:	00002a21 	.word	0x00002a21

00003320 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    3320:	b580      	push	{r7, lr}
    3322:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    3324:	4b09      	ldr	r3, [pc, #36]	; (334c <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    3326:	4798      	blx	r3
    3328:	0003      	movs	r3, r0
    332a:	001a      	movs	r2, r3
    332c:	2301      	movs	r3, #1
    332e:	4053      	eors	r3, r2
    3330:	b2db      	uxtb	r3, r3
    3332:	2b00      	cmp	r3, #0
    3334:	d004      	beq.n	3340 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    3336:	4b06      	ldr	r3, [pc, #24]	; (3350 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    3338:	2205      	movs	r2, #5
    333a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    333c:	2300      	movs	r3, #0
    333e:	e002      	b.n	3346 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    3340:	4b04      	ldr	r3, [pc, #16]	; (3354 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    3342:	4798      	blx	r3
    3344:	0003      	movs	r3, r0
}
    3346:	0018      	movs	r0, r3
    3348:	46bd      	mov	sp, r7
    334a:	bd80      	pop	{r7, pc}
    334c:	00002a21 	.word	0x00002a21
    3350:	2000012f 	.word	0x2000012f
    3354:	00002c21 	.word	0x00002c21

00003358 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    3358:	b580      	push	{r7, lr}
    335a:	b084      	sub	sp, #16
    335c:	af00      	add	r7, sp, #0
    335e:	0002      	movs	r2, r0
    3360:	1dfb      	adds	r3, r7, #7
    3362:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    3364:	1dfb      	adds	r3, r7, #7
    3366:	781b      	ldrb	r3, [r3, #0]
    3368:	2b00      	cmp	r3, #0
    336a:	d108      	bne.n	337e <mem_test_unit_ready+0x26>
    336c:	1dfb      	adds	r3, r7, #7
    336e:	781a      	ldrb	r2, [r3, #0]
    3370:	4b08      	ldr	r3, [pc, #32]	; (3394 <mem_test_unit_ready+0x3c>)
    3372:	0152      	lsls	r2, r2, #5
    3374:	58d3      	ldr	r3, [r2, r3]
    3376:	4798      	blx	r3
    3378:	0003      	movs	r3, r0
    337a:	001a      	movs	r2, r3
    337c:	e000      	b.n	3380 <mem_test_unit_ready+0x28>
    337e:	2201      	movs	r2, #1
  status =
    3380:	230f      	movs	r3, #15
    3382:	18fb      	adds	r3, r7, r3
    3384:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    3386:	230f      	movs	r3, #15
    3388:	18fb      	adds	r3, r7, r3
    338a:	781b      	ldrb	r3, [r3, #0]
}
    338c:	0018      	movs	r0, r3
    338e:	46bd      	mov	sp, r7
    3390:	b004      	add	sp, #16
    3392:	bd80      	pop	{r7, pc}
    3394:	0000c314 	.word	0x0000c314

00003398 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    3398:	b580      	push	{r7, lr}
    339a:	b084      	sub	sp, #16
    339c:	af00      	add	r7, sp, #0
    339e:	0002      	movs	r2, r0
    33a0:	6039      	str	r1, [r7, #0]
    33a2:	1dfb      	adds	r3, r7, #7
    33a4:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    33a6:	1dfb      	adds	r3, r7, #7
    33a8:	781b      	ldrb	r3, [r3, #0]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d10c      	bne.n	33c8 <mem_read_capacity+0x30>
    33ae:	1dfb      	adds	r3, r7, #7
    33b0:	781b      	ldrb	r3, [r3, #0]
    33b2:	4a0b      	ldr	r2, [pc, #44]	; (33e0 <mem_read_capacity+0x48>)
    33b4:	015b      	lsls	r3, r3, #5
    33b6:	18d3      	adds	r3, r2, r3
    33b8:	3304      	adds	r3, #4
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	683a      	ldr	r2, [r7, #0]
    33be:	0010      	movs	r0, r2
    33c0:	4798      	blx	r3
    33c2:	0003      	movs	r3, r0
    33c4:	001a      	movs	r2, r3
    33c6:	e000      	b.n	33ca <mem_read_capacity+0x32>
    33c8:	2201      	movs	r2, #1
  status =
    33ca:	230f      	movs	r3, #15
    33cc:	18fb      	adds	r3, r7, r3
    33ce:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    33d0:	230f      	movs	r3, #15
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	781b      	ldrb	r3, [r3, #0]
}
    33d6:	0018      	movs	r0, r3
    33d8:	46bd      	mov	sp, r7
    33da:	b004      	add	sp, #16
    33dc:	bd80      	pop	{r7, pc}
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	0000c314 	.word	0x0000c314

000033e4 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	b084      	sub	sp, #16
    33e8:	af00      	add	r7, sp, #0
    33ea:	0002      	movs	r2, r0
    33ec:	1dfb      	adds	r3, r7, #7
    33ee:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    33f0:	1dfb      	adds	r3, r7, #7
    33f2:	781b      	ldrb	r3, [r3, #0]
    33f4:	425a      	negs	r2, r3
    33f6:	4153      	adcs	r3, r2
    33f8:	b2da      	uxtb	r2, r3
  sector_size =
    33fa:	230f      	movs	r3, #15
    33fc:	18fb      	adds	r3, r7, r3
    33fe:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    3400:	230f      	movs	r3, #15
    3402:	18fb      	adds	r3, r7, r3
    3404:	781b      	ldrb	r3, [r3, #0]
}
    3406:	0018      	movs	r0, r3
    3408:	46bd      	mov	sp, r7
    340a:	b004      	add	sp, #16
    340c:	bd80      	pop	{r7, pc}
	...

00003410 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    3410:	b580      	push	{r7, lr}
    3412:	b084      	sub	sp, #16
    3414:	af00      	add	r7, sp, #0
    3416:	0002      	movs	r2, r0
    3418:	1dfb      	adds	r3, r7, #7
    341a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    341c:	1dfb      	adds	r3, r7, #7
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	2b00      	cmp	r3, #0
    3422:	d109      	bne.n	3438 <mem_wr_protect+0x28>
    3424:	1dfb      	adds	r3, r7, #7
    3426:	781b      	ldrb	r3, [r3, #0]
    3428:	4a0a      	ldr	r2, [pc, #40]	; (3454 <mem_wr_protect+0x44>)
    342a:	015b      	lsls	r3, r3, #5
    342c:	18d3      	adds	r3, r2, r3
    342e:	330c      	adds	r3, #12
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	4798      	blx	r3
    3434:	1e03      	subs	r3, r0, #0
    3436:	d001      	beq.n	343c <mem_wr_protect+0x2c>
    3438:	2201      	movs	r2, #1
    343a:	e000      	b.n	343e <mem_wr_protect+0x2e>
    343c:	2200      	movs	r2, #0
  wr_protect =
    343e:	230f      	movs	r3, #15
    3440:	18fb      	adds	r3, r7, r3
    3442:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    3444:	230f      	movs	r3, #15
    3446:	18fb      	adds	r3, r7, r3
    3448:	781b      	ldrb	r3, [r3, #0]
}
    344a:	0018      	movs	r0, r3
    344c:	46bd      	mov	sp, r7
    344e:	b004      	add	sp, #16
    3450:	bd80      	pop	{r7, pc}
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	0000c314 	.word	0x0000c314

00003458 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    3458:	b580      	push	{r7, lr}
    345a:	b086      	sub	sp, #24
    345c:	af00      	add	r7, sp, #0
    345e:	60b9      	str	r1, [r7, #8]
    3460:	607a      	str	r2, [r7, #4]
    3462:	230f      	movs	r3, #15
    3464:	18fb      	adds	r3, r7, r3
    3466:	1c02      	adds	r2, r0, #0
    3468:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    346a:	230f      	movs	r3, #15
    346c:	18fb      	adds	r3, r7, r3
    346e:	781b      	ldrb	r3, [r3, #0]
    3470:	2b00      	cmp	r3, #0
    3472:	d10e      	bne.n	3492 <memory_2_ram+0x3a>
    3474:	230f      	movs	r3, #15
    3476:	18fb      	adds	r3, r7, r3
    3478:	781b      	ldrb	r3, [r3, #0]
    347a:	4a0b      	ldr	r2, [pc, #44]	; (34a8 <memory_2_ram+0x50>)
    347c:	015b      	lsls	r3, r3, #5
    347e:	18d3      	adds	r3, r2, r3
    3480:	3314      	adds	r3, #20
    3482:	681b      	ldr	r3, [r3, #0]
    3484:	6879      	ldr	r1, [r7, #4]
    3486:	68ba      	ldr	r2, [r7, #8]
    3488:	0010      	movs	r0, r2
    348a:	4798      	blx	r3
    348c:	0003      	movs	r3, r0
    348e:	001a      	movs	r2, r3
    3490:	e000      	b.n	3494 <memory_2_ram+0x3c>
    3492:	2201      	movs	r2, #1
  status =
    3494:	2317      	movs	r3, #23
    3496:	18fb      	adds	r3, r7, r3
    3498:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    349a:	2317      	movs	r3, #23
    349c:	18fb      	adds	r3, r7, r3
    349e:	781b      	ldrb	r3, [r3, #0]
}
    34a0:	0018      	movs	r0, r3
    34a2:	46bd      	mov	sp, r7
    34a4:	b006      	add	sp, #24
    34a6:	bd80      	pop	{r7, pc}
    34a8:	0000c314 	.word	0x0000c314

000034ac <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    34ac:	b580      	push	{r7, lr}
    34ae:	b086      	sub	sp, #24
    34b0:	af00      	add	r7, sp, #0
    34b2:	60b9      	str	r1, [r7, #8]
    34b4:	607a      	str	r2, [r7, #4]
    34b6:	230f      	movs	r3, #15
    34b8:	18fb      	adds	r3, r7, r3
    34ba:	1c02      	adds	r2, r0, #0
    34bc:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    34be:	230f      	movs	r3, #15
    34c0:	18fb      	adds	r3, r7, r3
    34c2:	781b      	ldrb	r3, [r3, #0]
    34c4:	2b00      	cmp	r3, #0
    34c6:	d10e      	bne.n	34e6 <ram_2_memory+0x3a>
    34c8:	230f      	movs	r3, #15
    34ca:	18fb      	adds	r3, r7, r3
    34cc:	781b      	ldrb	r3, [r3, #0]
    34ce:	4a0b      	ldr	r2, [pc, #44]	; (34fc <ram_2_memory+0x50>)
    34d0:	015b      	lsls	r3, r3, #5
    34d2:	18d3      	adds	r3, r2, r3
    34d4:	3318      	adds	r3, #24
    34d6:	681b      	ldr	r3, [r3, #0]
    34d8:	6879      	ldr	r1, [r7, #4]
    34da:	68ba      	ldr	r2, [r7, #8]
    34dc:	0010      	movs	r0, r2
    34de:	4798      	blx	r3
    34e0:	0003      	movs	r3, r0
    34e2:	001a      	movs	r2, r3
    34e4:	e000      	b.n	34e8 <ram_2_memory+0x3c>
    34e6:	2201      	movs	r2, #1
  status =
    34e8:	2317      	movs	r3, #23
    34ea:	18fb      	adds	r3, r7, r3
    34ec:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    34ee:	2317      	movs	r3, #23
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	781b      	ldrb	r3, [r3, #0]
}
    34f4:	0018      	movs	r0, r3
    34f6:	46bd      	mov	sp, r7
    34f8:	b006      	add	sp, #24
    34fa:	bd80      	pop	{r7, pc}
    34fc:	0000c314 	.word	0x0000c314

00003500 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3500:	b580      	push	{r7, lr}
    3502:	b082      	sub	sp, #8
    3504:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3506:	4b10      	ldr	r3, [pc, #64]	; (3548 <cpu_irq_enter_critical+0x48>)
    3508:	681b      	ldr	r3, [r3, #0]
    350a:	2b00      	cmp	r3, #0
    350c:	d112      	bne.n	3534 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    350e:	f3ef 8310 	mrs	r3, PRIMASK
    3512:	607b      	str	r3, [r7, #4]
  return(result);
    3514:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3516:	2b00      	cmp	r3, #0
    3518:	d109      	bne.n	352e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    351a:	b672      	cpsid	i
    351c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3520:	4b0a      	ldr	r3, [pc, #40]	; (354c <cpu_irq_enter_critical+0x4c>)
    3522:	2200      	movs	r2, #0
    3524:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3526:	4b0a      	ldr	r3, [pc, #40]	; (3550 <cpu_irq_enter_critical+0x50>)
    3528:	2201      	movs	r2, #1
    352a:	701a      	strb	r2, [r3, #0]
    352c:	e002      	b.n	3534 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    352e:	4b08      	ldr	r3, [pc, #32]	; (3550 <cpu_irq_enter_critical+0x50>)
    3530:	2200      	movs	r2, #0
    3532:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3534:	4b04      	ldr	r3, [pc, #16]	; (3548 <cpu_irq_enter_critical+0x48>)
    3536:	681b      	ldr	r3, [r3, #0]
    3538:	1c5a      	adds	r2, r3, #1
    353a:	4b03      	ldr	r3, [pc, #12]	; (3548 <cpu_irq_enter_critical+0x48>)
    353c:	601a      	str	r2, [r3, #0]
}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	46bd      	mov	sp, r7
    3542:	b002      	add	sp, #8
    3544:	bd80      	pop	{r7, pc}
    3546:	46c0      	nop			; (mov r8, r8)
    3548:	2000013c 	.word	0x2000013c
    354c:	20000009 	.word	0x20000009
    3550:	20000140 	.word	0x20000140

00003554 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3554:	b580      	push	{r7, lr}
    3556:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3558:	4b0b      	ldr	r3, [pc, #44]	; (3588 <cpu_irq_leave_critical+0x34>)
    355a:	681b      	ldr	r3, [r3, #0]
    355c:	1e5a      	subs	r2, r3, #1
    355e:	4b0a      	ldr	r3, [pc, #40]	; (3588 <cpu_irq_leave_critical+0x34>)
    3560:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3562:	4b09      	ldr	r3, [pc, #36]	; (3588 <cpu_irq_leave_critical+0x34>)
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	2b00      	cmp	r3, #0
    3568:	d10a      	bne.n	3580 <cpu_irq_leave_critical+0x2c>
    356a:	4b08      	ldr	r3, [pc, #32]	; (358c <cpu_irq_leave_critical+0x38>)
    356c:	781b      	ldrb	r3, [r3, #0]
    356e:	b2db      	uxtb	r3, r3
    3570:	2b00      	cmp	r3, #0
    3572:	d005      	beq.n	3580 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3574:	4b06      	ldr	r3, [pc, #24]	; (3590 <cpu_irq_leave_critical+0x3c>)
    3576:	2201      	movs	r2, #1
    3578:	701a      	strb	r2, [r3, #0]
    357a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    357e:	b662      	cpsie	i
	}
}
    3580:	46c0      	nop			; (mov r8, r8)
    3582:	46bd      	mov	sp, r7
    3584:	bd80      	pop	{r7, pc}
    3586:	46c0      	nop			; (mov r8, r8)
    3588:	2000013c 	.word	0x2000013c
    358c:	20000140 	.word	0x20000140
    3590:	20000009 	.word	0x20000009

00003594 <system_pinmux_get_config_defaults>:
{
    3594:	b580      	push	{r7, lr}
    3596:	b082      	sub	sp, #8
    3598:	af00      	add	r7, sp, #0
    359a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    359c:	687b      	ldr	r3, [r7, #4]
    359e:	2280      	movs	r2, #128	; 0x80
    35a0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    35a2:	687b      	ldr	r3, [r7, #4]
    35a4:	2200      	movs	r2, #0
    35a6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	2201      	movs	r2, #1
    35ac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	2200      	movs	r2, #0
    35b2:	70da      	strb	r2, [r3, #3]
}
    35b4:	46c0      	nop			; (mov r8, r8)
    35b6:	46bd      	mov	sp, r7
    35b8:	b002      	add	sp, #8
    35ba:	bd80      	pop	{r7, pc}

000035bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    35bc:	b580      	push	{r7, lr}
    35be:	b084      	sub	sp, #16
    35c0:	af00      	add	r7, sp, #0
    35c2:	0002      	movs	r2, r0
    35c4:	6039      	str	r1, [r7, #0]
    35c6:	1dfb      	adds	r3, r7, #7
    35c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    35ca:	230c      	movs	r3, #12
    35cc:	18fb      	adds	r3, r7, r3
    35ce:	0018      	movs	r0, r3
    35d0:	4b10      	ldr	r3, [pc, #64]	; (3614 <port_pin_set_config+0x58>)
    35d2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    35d4:	230c      	movs	r3, #12
    35d6:	18fb      	adds	r3, r7, r3
    35d8:	2280      	movs	r2, #128	; 0x80
    35da:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    35dc:	683b      	ldr	r3, [r7, #0]
    35de:	781a      	ldrb	r2, [r3, #0]
    35e0:	230c      	movs	r3, #12
    35e2:	18fb      	adds	r3, r7, r3
    35e4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    35e6:	683b      	ldr	r3, [r7, #0]
    35e8:	785a      	ldrb	r2, [r3, #1]
    35ea:	230c      	movs	r3, #12
    35ec:	18fb      	adds	r3, r7, r3
    35ee:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    35f0:	683b      	ldr	r3, [r7, #0]
    35f2:	789a      	ldrb	r2, [r3, #2]
    35f4:	230c      	movs	r3, #12
    35f6:	18fb      	adds	r3, r7, r3
    35f8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    35fa:	230c      	movs	r3, #12
    35fc:	18fa      	adds	r2, r7, r3
    35fe:	1dfb      	adds	r3, r7, #7
    3600:	781b      	ldrb	r3, [r3, #0]
    3602:	0011      	movs	r1, r2
    3604:	0018      	movs	r0, r3
    3606:	4b04      	ldr	r3, [pc, #16]	; (3618 <port_pin_set_config+0x5c>)
    3608:	4798      	blx	r3
}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	46bd      	mov	sp, r7
    360e:	b004      	add	sp, #16
    3610:	bd80      	pop	{r7, pc}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	00003595 	.word	0x00003595
    3618:	00006e79 	.word	0x00006e79

0000361c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    361c:	b580      	push	{r7, lr}
    361e:	b082      	sub	sp, #8
    3620:	af00      	add	r7, sp, #0
    3622:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	2200      	movs	r2, #0
    3628:	701a      	strb	r2, [r3, #0]
}
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	46bd      	mov	sp, r7
    362e:	b002      	add	sp, #8
    3630:	bd80      	pop	{r7, pc}
	...

00003634 <system_apb_clock_set_mask>:
{
    3634:	b580      	push	{r7, lr}
    3636:	b082      	sub	sp, #8
    3638:	af00      	add	r7, sp, #0
    363a:	0002      	movs	r2, r0
    363c:	6039      	str	r1, [r7, #0]
    363e:	1dfb      	adds	r3, r7, #7
    3640:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3642:	1dfb      	adds	r3, r7, #7
    3644:	781b      	ldrb	r3, [r3, #0]
    3646:	2b01      	cmp	r3, #1
    3648:	d00a      	beq.n	3660 <system_apb_clock_set_mask+0x2c>
    364a:	2b02      	cmp	r3, #2
    364c:	d00f      	beq.n	366e <system_apb_clock_set_mask+0x3a>
    364e:	2b00      	cmp	r3, #0
    3650:	d114      	bne.n	367c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3652:	4b0e      	ldr	r3, [pc, #56]	; (368c <system_apb_clock_set_mask+0x58>)
    3654:	4a0d      	ldr	r2, [pc, #52]	; (368c <system_apb_clock_set_mask+0x58>)
    3656:	6991      	ldr	r1, [r2, #24]
    3658:	683a      	ldr	r2, [r7, #0]
    365a:	430a      	orrs	r2, r1
    365c:	619a      	str	r2, [r3, #24]
			break;
    365e:	e00f      	b.n	3680 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3660:	4b0a      	ldr	r3, [pc, #40]	; (368c <system_apb_clock_set_mask+0x58>)
    3662:	4a0a      	ldr	r2, [pc, #40]	; (368c <system_apb_clock_set_mask+0x58>)
    3664:	69d1      	ldr	r1, [r2, #28]
    3666:	683a      	ldr	r2, [r7, #0]
    3668:	430a      	orrs	r2, r1
    366a:	61da      	str	r2, [r3, #28]
			break;
    366c:	e008      	b.n	3680 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    366e:	4b07      	ldr	r3, [pc, #28]	; (368c <system_apb_clock_set_mask+0x58>)
    3670:	4a06      	ldr	r2, [pc, #24]	; (368c <system_apb_clock_set_mask+0x58>)
    3672:	6a11      	ldr	r1, [r2, #32]
    3674:	683a      	ldr	r2, [r7, #0]
    3676:	430a      	orrs	r2, r1
    3678:	621a      	str	r2, [r3, #32]
			break;
    367a:	e001      	b.n	3680 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    367c:	2317      	movs	r3, #23
    367e:	e000      	b.n	3682 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3680:	2300      	movs	r3, #0
}
    3682:	0018      	movs	r0, r3
    3684:	46bd      	mov	sp, r7
    3686:	b002      	add	sp, #8
    3688:	bd80      	pop	{r7, pc}
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	40000400 	.word	0x40000400

00003690 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    3690:	b580      	push	{r7, lr}
    3692:	b084      	sub	sp, #16
    3694:	af00      	add	r7, sp, #0
    3696:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3698:	687b      	ldr	r3, [r7, #4]
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    369e:	68fb      	ldr	r3, [r7, #12]
    36a0:	7a9b      	ldrb	r3, [r3, #10]
    36a2:	b2db      	uxtb	r3, r3
    36a4:	b25b      	sxtb	r3, r3
    36a6:	2b00      	cmp	r3, #0
    36a8:	da01      	bge.n	36ae <rtc_calendar_is_syncing+0x1e>
                return true;
    36aa:	2301      	movs	r3, #1
    36ac:	e000      	b.n	36b0 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    36ae:	2300      	movs	r3, #0
}
    36b0:	0018      	movs	r0, r3
    36b2:	46bd      	mov	sp, r7
    36b4:	b004      	add	sp, #16
    36b6:	bd80      	pop	{r7, pc}

000036b8 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    36b8:	b580      	push	{r7, lr}
    36ba:	b084      	sub	sp, #16
    36bc:	af00      	add	r7, sp, #0
    36be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	681b      	ldr	r3, [r3, #0]
    36c4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	0018      	movs	r0, r3
    36cc:	4b07      	ldr	r3, [pc, #28]	; (36ec <rtc_calendar_enable+0x34>)
    36ce:	4798      	blx	r3
    36d0:	1e03      	subs	r3, r0, #0
    36d2:	d1f9      	bne.n	36c8 <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    36d4:	68fb      	ldr	r3, [r7, #12]
    36d6:	881b      	ldrh	r3, [r3, #0]
    36d8:	b29b      	uxth	r3, r3
    36da:	2202      	movs	r2, #2
    36dc:	4313      	orrs	r3, r2
    36de:	b29a      	uxth	r2, r3
    36e0:	68fb      	ldr	r3, [r7, #12]
    36e2:	801a      	strh	r2, [r3, #0]
}
    36e4:	46c0      	nop			; (mov r8, r8)
    36e6:	46bd      	mov	sp, r7
    36e8:	b004      	add	sp, #16
    36ea:	bd80      	pop	{r7, pc}
    36ec:	00003691 	.word	0x00003691

000036f0 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    36f0:	b580      	push	{r7, lr}
    36f2:	b084      	sub	sp, #16
    36f4:	af00      	add	r7, sp, #0
    36f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    36f8:	687b      	ldr	r3, [r7, #4]
    36fa:	681b      	ldr	r3, [r3, #0]
    36fc:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    36fe:	46c0      	nop			; (mov r8, r8)
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	0018      	movs	r0, r3
    3704:	4b0a      	ldr	r3, [pc, #40]	; (3730 <rtc_calendar_disable+0x40>)
    3706:	4798      	blx	r3
    3708:	1e03      	subs	r3, r0, #0
    370a:	d1f9      	bne.n	3700 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	22c1      	movs	r2, #193	; 0xc1
    3710:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    3712:	68fb      	ldr	r3, [r7, #12]
    3714:	22c1      	movs	r2, #193	; 0xc1
    3716:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	881b      	ldrh	r3, [r3, #0]
    371c:	b29b      	uxth	r3, r3
    371e:	2202      	movs	r2, #2
    3720:	4393      	bics	r3, r2
    3722:	b29a      	uxth	r2, r3
    3724:	68fb      	ldr	r3, [r7, #12]
    3726:	801a      	strh	r2, [r3, #0]
}
    3728:	46c0      	nop			; (mov r8, r8)
    372a:	46bd      	mov	sp, r7
    372c:	b004      	add	sp, #16
    372e:	bd80      	pop	{r7, pc}
    3730:	00003691 	.word	0x00003691

00003734 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    3734:	b580      	push	{r7, lr}
    3736:	b084      	sub	sp, #16
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	681b      	ldr	r3, [r3, #0]
    3740:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	0018      	movs	r0, r3
    3746:	4b0a      	ldr	r3, [pc, #40]	; (3770 <rtc_calendar_reset+0x3c>)
    3748:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    374a:	46c0      	nop			; (mov r8, r8)
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	0018      	movs	r0, r3
    3750:	4b08      	ldr	r3, [pc, #32]	; (3774 <rtc_calendar_reset+0x40>)
    3752:	4798      	blx	r3
    3754:	1e03      	subs	r3, r0, #0
    3756:	d1f9      	bne.n	374c <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    3758:	68fb      	ldr	r3, [r7, #12]
    375a:	881b      	ldrh	r3, [r3, #0]
    375c:	b29b      	uxth	r3, r3
    375e:	2201      	movs	r2, #1
    3760:	4313      	orrs	r3, r2
    3762:	b29a      	uxth	r2, r3
    3764:	68fb      	ldr	r3, [r7, #12]
    3766:	801a      	strh	r2, [r3, #0]
}
    3768:	46c0      	nop			; (mov r8, r8)
    376a:	46bd      	mov	sp, r7
    376c:	b004      	add	sp, #16
    376e:	bd80      	pop	{r7, pc}
    3770:	000036f1 	.word	0x000036f1
    3774:	00003691 	.word	0x00003691

00003778 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    3778:	b580      	push	{r7, lr}
    377a:	b084      	sub	sp, #16
    377c:	af00      	add	r7, sp, #0
    377e:	6078      	str	r0, [r7, #4]
    3780:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    3782:	683b      	ldr	r3, [r7, #0]
    3784:	88db      	ldrh	r3, [r3, #6]
    3786:	001a      	movs	r2, r3
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	88db      	ldrh	r3, [r3, #6]
    378c:	1ad3      	subs	r3, r2, r3
    378e:	069b      	lsls	r3, r3, #26
    3790:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    3792:	683b      	ldr	r3, [r7, #0]
    3794:	795b      	ldrb	r3, [r3, #5]
    3796:	059b      	lsls	r3, r3, #22
    3798:	001a      	movs	r2, r3
    379a:	68fb      	ldr	r3, [r7, #12]
    379c:	4313      	orrs	r3, r2
    379e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    37a0:	683b      	ldr	r3, [r7, #0]
    37a2:	791b      	ldrb	r3, [r3, #4]
    37a4:	045b      	lsls	r3, r3, #17
    37a6:	001a      	movs	r2, r3
    37a8:	68fb      	ldr	r3, [r7, #12]
    37aa:	4313      	orrs	r3, r2
    37ac:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    37ae:	683b      	ldr	r3, [r7, #0]
    37b0:	789b      	ldrb	r3, [r3, #2]
    37b2:	031b      	lsls	r3, r3, #12
    37b4:	001a      	movs	r2, r3
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	4313      	orrs	r3, r2
    37ba:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    37bc:	687b      	ldr	r3, [r7, #4]
    37be:	791b      	ldrb	r3, [r3, #4]
    37c0:	2201      	movs	r2, #1
    37c2:	4053      	eors	r3, r2
    37c4:	b2db      	uxtb	r3, r3
    37c6:	2b00      	cmp	r3, #0
    37c8:	d008      	beq.n	37dc <rtc_calendar_time_to_register_value+0x64>
    37ca:	683b      	ldr	r3, [r7, #0]
    37cc:	78db      	ldrb	r3, [r3, #3]
    37ce:	2b00      	cmp	r3, #0
    37d0:	d004      	beq.n	37dc <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    37d2:	68fb      	ldr	r3, [r7, #12]
    37d4:	2280      	movs	r2, #128	; 0x80
    37d6:	0252      	lsls	r2, r2, #9
    37d8:	4313      	orrs	r3, r2
    37da:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    37dc:	683b      	ldr	r3, [r7, #0]
    37de:	785b      	ldrb	r3, [r3, #1]
    37e0:	019b      	lsls	r3, r3, #6
    37e2:	001a      	movs	r2, r3
    37e4:	68fb      	ldr	r3, [r7, #12]
    37e6:	4313      	orrs	r3, r2
    37e8:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    37ea:	683b      	ldr	r3, [r7, #0]
    37ec:	781b      	ldrb	r3, [r3, #0]
    37ee:	001a      	movs	r2, r3
    37f0:	68fb      	ldr	r3, [r7, #12]
    37f2:	4313      	orrs	r3, r2
    37f4:	60fb      	str	r3, [r7, #12]

	return register_value;
    37f6:	68fb      	ldr	r3, [r7, #12]
}
    37f8:	0018      	movs	r0, r3
    37fa:	46bd      	mov	sp, r7
    37fc:	b004      	add	sp, #16
    37fe:	bd80      	pop	{r7, pc}

00003800 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    3800:	b580      	push	{r7, lr}
    3802:	b084      	sub	sp, #16
    3804:	af00      	add	r7, sp, #0
    3806:	60f8      	str	r0, [r7, #12]
    3808:	60b9      	str	r1, [r7, #8]
    380a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    380c:	68bb      	ldr	r3, [r7, #8]
    380e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    3810:	b29a      	uxth	r2, r3
    3812:	68fb      	ldr	r3, [r7, #12]
    3814:	88db      	ldrh	r3, [r3, #6]
    3816:	18d3      	adds	r3, r2, r3
    3818:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    381e:	68bb      	ldr	r3, [r7, #8]
    3820:	0d9b      	lsrs	r3, r3, #22
    3822:	b2db      	uxtb	r3, r3
    3824:	220f      	movs	r2, #15
    3826:	4013      	ands	r3, r2
    3828:	b2da      	uxtb	r2, r3
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    382e:	68bb      	ldr	r3, [r7, #8]
    3830:	0c5b      	lsrs	r3, r3, #17
    3832:	b2db      	uxtb	r3, r3
    3834:	221f      	movs	r2, #31
    3836:	4013      	ands	r3, r2
    3838:	b2da      	uxtb	r2, r3
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    383e:	68fb      	ldr	r3, [r7, #12]
    3840:	791b      	ldrb	r3, [r3, #4]
    3842:	2b00      	cmp	r3, #0
    3844:	d008      	beq.n	3858 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    3846:	68bb      	ldr	r3, [r7, #8]
    3848:	0b1b      	lsrs	r3, r3, #12
    384a:	b2db      	uxtb	r3, r3
    384c:	221f      	movs	r2, #31
    384e:	4013      	ands	r3, r2
    3850:	b2da      	uxtb	r2, r3
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	709a      	strb	r2, [r3, #2]
    3856:	e010      	b.n	387a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    3858:	68bb      	ldr	r3, [r7, #8]
    385a:	0b1b      	lsrs	r3, r3, #12
    385c:	b2db      	uxtb	r3, r3
    385e:	220f      	movs	r2, #15
    3860:	4013      	ands	r3, r2
    3862:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    3868:	68ba      	ldr	r2, [r7, #8]
    386a:	2380      	movs	r3, #128	; 0x80
    386c:	025b      	lsls	r3, r3, #9
    386e:	4013      	ands	r3, r2
    3870:	1e5a      	subs	r2, r3, #1
    3872:	4193      	sbcs	r3, r2
    3874:	b2da      	uxtb	r2, r3
    3876:	687b      	ldr	r3, [r7, #4]
    3878:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    387a:	68bb      	ldr	r3, [r7, #8]
    387c:	099b      	lsrs	r3, r3, #6
    387e:	b2db      	uxtb	r3, r3
    3880:	223f      	movs	r2, #63	; 0x3f
    3882:	4013      	ands	r3, r2
    3884:	b2da      	uxtb	r2, r3
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    388a:	68bb      	ldr	r3, [r7, #8]
    388c:	b2db      	uxtb	r3, r3
    388e:	223f      	movs	r2, #63	; 0x3f
    3890:	4013      	ands	r3, r2
    3892:	b2da      	uxtb	r2, r3
    3894:	687b      	ldr	r3, [r7, #4]
    3896:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    3898:	46c0      	nop			; (mov r8, r8)
    389a:	46bd      	mov	sp, r7
    389c:	b004      	add	sp, #16
    389e:	bd80      	pop	{r7, pc}

000038a0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    38a0:	b580      	push	{r7, lr}
    38a2:	b084      	sub	sp, #16
    38a4:	af00      	add	r7, sp, #0
    38a6:	6078      	str	r0, [r7, #4]
    38a8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	681b      	ldr	r3, [r3, #0]
    38ae:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    38b0:	683b      	ldr	r3, [r7, #0]
    38b2:	881a      	ldrh	r2, [r3, #0]
    38b4:	230e      	movs	r3, #14
    38b6:	18fb      	adds	r3, r7, r3
    38b8:	2108      	movs	r1, #8
    38ba:	430a      	orrs	r2, r1
    38bc:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    38be:	683b      	ldr	r3, [r7, #0]
    38c0:	791b      	ldrb	r3, [r3, #4]
    38c2:	2201      	movs	r2, #1
    38c4:	4053      	eors	r3, r2
    38c6:	b2db      	uxtb	r3, r3
    38c8:	2b00      	cmp	r3, #0
    38ca:	d007      	beq.n	38dc <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    38cc:	230e      	movs	r3, #14
    38ce:	18fb      	adds	r3, r7, r3
    38d0:	220e      	movs	r2, #14
    38d2:	18ba      	adds	r2, r7, r2
    38d4:	8812      	ldrh	r2, [r2, #0]
    38d6:	2140      	movs	r1, #64	; 0x40
    38d8:	430a      	orrs	r2, r1
    38da:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    38dc:	683b      	ldr	r3, [r7, #0]
    38de:	789b      	ldrb	r3, [r3, #2]
    38e0:	2b00      	cmp	r3, #0
    38e2:	d007      	beq.n	38f4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    38e4:	230e      	movs	r3, #14
    38e6:	18fb      	adds	r3, r7, r3
    38e8:	220e      	movs	r2, #14
    38ea:	18ba      	adds	r2, r7, r2
    38ec:	8812      	ldrh	r2, [r2, #0]
    38ee:	2180      	movs	r1, #128	; 0x80
    38f0:	430a      	orrs	r2, r1
    38f2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    38f4:	68bb      	ldr	r3, [r7, #8]
    38f6:	220e      	movs	r2, #14
    38f8:	18ba      	adds	r2, r7, r2
    38fa:	8812      	ldrh	r2, [r2, #0]
    38fc:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    38fe:	683b      	ldr	r3, [r7, #0]
    3900:	78db      	ldrb	r3, [r3, #3]
    3902:	2b00      	cmp	r3, #0
    3904:	d008      	beq.n	3918 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    3906:	68bb      	ldr	r3, [r7, #8]
    3908:	885b      	ldrh	r3, [r3, #2]
    390a:	b29b      	uxth	r3, r3
    390c:	2280      	movs	r2, #128	; 0x80
    390e:	01d2      	lsls	r2, r2, #7
    3910:	4313      	orrs	r3, r2
    3912:	b29a      	uxth	r2, r3
    3914:	68bb      	ldr	r3, [r7, #8]
    3916:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3918:	230d      	movs	r3, #13
    391a:	18fb      	adds	r3, r7, r3
    391c:	2200      	movs	r2, #0
    391e:	701a      	strb	r2, [r3, #0]
    3920:	e017      	b.n	3952 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    3922:	230d      	movs	r3, #13
    3924:	18fb      	adds	r3, r7, r3
    3926:	781a      	ldrb	r2, [r3, #0]
    3928:	0013      	movs	r3, r2
    392a:	009b      	lsls	r3, r3, #2
    392c:	189b      	adds	r3, r3, r2
    392e:	005b      	lsls	r3, r3, #1
    3930:	3308      	adds	r3, #8
    3932:	683a      	ldr	r2, [r7, #0]
    3934:	18d1      	adds	r1, r2, r3
    3936:	230d      	movs	r3, #13
    3938:	18fb      	adds	r3, r7, r3
    393a:	781a      	ldrb	r2, [r3, #0]
    393c:	687b      	ldr	r3, [r7, #4]
    393e:	0018      	movs	r0, r3
    3940:	4b08      	ldr	r3, [pc, #32]	; (3964 <_rtc_calendar_set_config+0xc4>)
    3942:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3944:	230d      	movs	r3, #13
    3946:	18fb      	adds	r3, r7, r3
    3948:	781a      	ldrb	r2, [r3, #0]
    394a:	230d      	movs	r3, #13
    394c:	18fb      	adds	r3, r7, r3
    394e:	3201      	adds	r2, #1
    3950:	701a      	strb	r2, [r3, #0]
    3952:	230d      	movs	r3, #13
    3954:	18fb      	adds	r3, r7, r3
    3956:	781b      	ldrb	r3, [r3, #0]
    3958:	2b00      	cmp	r3, #0
    395a:	d0e2      	beq.n	3922 <_rtc_calendar_set_config+0x82>
	}
}
    395c:	46c0      	nop			; (mov r8, r8)
    395e:	46bd      	mov	sp, r7
    3960:	b004      	add	sp, #16
    3962:	bd80      	pop	{r7, pc}
    3964:	00003a89 	.word	0x00003a89

00003968 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    3968:	b580      	push	{r7, lr}
    396a:	b086      	sub	sp, #24
    396c:	af00      	add	r7, sp, #0
    396e:	60f8      	str	r0, [r7, #12]
    3970:	60b9      	str	r1, [r7, #8]
    3972:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3974:	68fb      	ldr	r3, [r7, #12]
    3976:	68ba      	ldr	r2, [r7, #8]
    3978:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    397a:	2120      	movs	r1, #32
    397c:	2000      	movs	r0, #0
    397e:	4b18      	ldr	r3, [pc, #96]	; (39e0 <rtc_calendar_init+0x78>)
    3980:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3982:	2314      	movs	r3, #20
    3984:	18fb      	adds	r3, r7, r3
    3986:	0018      	movs	r0, r3
    3988:	4b16      	ldr	r3, [pc, #88]	; (39e4 <rtc_calendar_init+0x7c>)
    398a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    398c:	2314      	movs	r3, #20
    398e:	18fb      	adds	r3, r7, r3
    3990:	2202      	movs	r2, #2
    3992:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3994:	2314      	movs	r3, #20
    3996:	18fb      	adds	r3, r7, r3
    3998:	0019      	movs	r1, r3
    399a:	2004      	movs	r0, #4
    399c:	4b12      	ldr	r3, [pc, #72]	; (39e8 <rtc_calendar_init+0x80>)
    399e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    39a0:	2004      	movs	r0, #4
    39a2:	4b12      	ldr	r3, [pc, #72]	; (39ec <rtc_calendar_init+0x84>)
    39a4:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    39a6:	68fb      	ldr	r3, [r7, #12]
    39a8:	0018      	movs	r0, r3
    39aa:	4b11      	ldr	r3, [pc, #68]	; (39f0 <rtc_calendar_init+0x88>)
    39ac:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	791a      	ldrb	r2, [r3, #4]
    39b2:	68fb      	ldr	r3, [r7, #12]
    39b4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    39b6:	687b      	ldr	r3, [r7, #4]
    39b8:	78da      	ldrb	r2, [r3, #3]
    39ba:	68fb      	ldr	r3, [r7, #12]
    39bc:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	88da      	ldrh	r2, [r3, #6]
    39c2:	68fb      	ldr	r3, [r7, #12]
    39c4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    39c6:	4b0b      	ldr	r3, [pc, #44]	; (39f4 <rtc_calendar_init+0x8c>)
    39c8:	68fa      	ldr	r2, [r7, #12]
    39ca:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    39cc:	687a      	ldr	r2, [r7, #4]
    39ce:	68fb      	ldr	r3, [r7, #12]
    39d0:	0011      	movs	r1, r2
    39d2:	0018      	movs	r0, r3
    39d4:	4b08      	ldr	r3, [pc, #32]	; (39f8 <rtc_calendar_init+0x90>)
    39d6:	4798      	blx	r3
}
    39d8:	46c0      	nop			; (mov r8, r8)
    39da:	46bd      	mov	sp, r7
    39dc:	b006      	add	sp, #24
    39de:	bd80      	pop	{r7, pc}
    39e0:	00003635 	.word	0x00003635
    39e4:	0000361d 	.word	0x0000361d
    39e8:	00006b8d 	.word	0x00006b8d
    39ec:	00006bd1 	.word	0x00006bd1
    39f0:	00003735 	.word	0x00003735
    39f4:	200009d0 	.word	0x200009d0
    39f8:	000038a1 	.word	0x000038a1

000039fc <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    39fc:	b580      	push	{r7, lr}
    39fe:	b084      	sub	sp, #16
    3a00:	af00      	add	r7, sp, #0
    3a02:	6078      	str	r0, [r7, #4]
    3a04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	681b      	ldr	r3, [r3, #0]
    3a0a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	795b      	ldrb	r3, [r3, #5]
    3a10:	2201      	movs	r2, #1
    3a12:	4053      	eors	r3, r2
    3a14:	b2db      	uxtb	r3, r3
    3a16:	2b00      	cmp	r3, #0
    3a18:	d00a      	beq.n	3a30 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    3a1a:	68fb      	ldr	r3, [r7, #12]
    3a1c:	4a16      	ldr	r2, [pc, #88]	; (3a78 <rtc_calendar_get_time+0x7c>)
    3a1e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    3a20:	46c0      	nop			; (mov r8, r8)
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	0018      	movs	r0, r3
    3a26:	4b15      	ldr	r3, [pc, #84]	; (3a7c <rtc_calendar_get_time+0x80>)
    3a28:	4798      	blx	r3
    3a2a:	1e03      	subs	r3, r0, #0
    3a2c:	d1f9      	bne.n	3a22 <rtc_calendar_get_time+0x26>
    3a2e:	e016      	b.n	3a5e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    3a30:	68fb      	ldr	r3, [r7, #12]
    3a32:	885b      	ldrh	r3, [r3, #2]
    3a34:	b29b      	uxth	r3, r3
    3a36:	001a      	movs	r2, r3
    3a38:	2380      	movs	r3, #128	; 0x80
    3a3a:	01db      	lsls	r3, r3, #7
    3a3c:	4013      	ands	r3, r2
    3a3e:	d10e      	bne.n	3a5e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	885b      	ldrh	r3, [r3, #2]
    3a44:	b29b      	uxth	r3, r3
    3a46:	4a0e      	ldr	r2, [pc, #56]	; (3a80 <rtc_calendar_get_time+0x84>)
    3a48:	4313      	orrs	r3, r2
    3a4a:	b29a      	uxth	r2, r3
    3a4c:	68fb      	ldr	r3, [r7, #12]
    3a4e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    3a50:	46c0      	nop			; (mov r8, r8)
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	0018      	movs	r0, r3
    3a56:	4b09      	ldr	r3, [pc, #36]	; (3a7c <rtc_calendar_get_time+0x80>)
    3a58:	4798      	blx	r3
    3a5a:	1e03      	subs	r3, r0, #0
    3a5c:	d1f9      	bne.n	3a52 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	691b      	ldr	r3, [r3, #16]
    3a62:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    3a64:	683a      	ldr	r2, [r7, #0]
    3a66:	68b9      	ldr	r1, [r7, #8]
    3a68:	687b      	ldr	r3, [r7, #4]
    3a6a:	0018      	movs	r0, r3
    3a6c:	4b05      	ldr	r3, [pc, #20]	; (3a84 <rtc_calendar_get_time+0x88>)
    3a6e:	4798      	blx	r3
}
    3a70:	46c0      	nop			; (mov r8, r8)
    3a72:	46bd      	mov	sp, r7
    3a74:	b004      	add	sp, #16
    3a76:	bd80      	pop	{r7, pc}
    3a78:	ffff8000 	.word	0xffff8000
    3a7c:	00003691 	.word	0x00003691
    3a80:	ffffc000 	.word	0xffffc000
    3a84:	00003801 	.word	0x00003801

00003a88 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    3a88:	b580      	push	{r7, lr}
    3a8a:	b086      	sub	sp, #24
    3a8c:	af00      	add	r7, sp, #0
    3a8e:	60f8      	str	r0, [r7, #12]
    3a90:	60b9      	str	r1, [r7, #8]
    3a92:	1dfb      	adds	r3, r7, #7
    3a94:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3a96:	68fb      	ldr	r3, [r7, #12]
    3a98:	681b      	ldr	r3, [r3, #0]
    3a9a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3a9c:	1dfb      	adds	r3, r7, #7
    3a9e:	781b      	ldrb	r3, [r3, #0]
    3aa0:	2b01      	cmp	r3, #1
    3aa2:	d901      	bls.n	3aa8 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    3aa4:	2317      	movs	r3, #23
    3aa6:	e021      	b.n	3aec <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    3aa8:	68ba      	ldr	r2, [r7, #8]
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	0011      	movs	r1, r2
    3aae:	0018      	movs	r0, r3
    3ab0:	4b10      	ldr	r3, [pc, #64]	; (3af4 <rtc_calendar_set_alarm+0x6c>)
    3ab2:	4798      	blx	r3
    3ab4:	0003      	movs	r3, r0
    3ab6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    3ab8:	46c0      	nop			; (mov r8, r8)
    3aba:	68fb      	ldr	r3, [r7, #12]
    3abc:	0018      	movs	r0, r3
    3abe:	4b0e      	ldr	r3, [pc, #56]	; (3af8 <rtc_calendar_set_alarm+0x70>)
    3ac0:	4798      	blx	r3
    3ac2:	1e03      	subs	r3, r0, #0
    3ac4:	d1f9      	bne.n	3aba <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    3ac6:	1dfb      	adds	r3, r7, #7
    3ac8:	781a      	ldrb	r2, [r3, #0]
    3aca:	697b      	ldr	r3, [r7, #20]
    3acc:	3203      	adds	r2, #3
    3ace:	00d2      	lsls	r2, r2, #3
    3ad0:	6939      	ldr	r1, [r7, #16]
    3ad2:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    3ad4:	1dfb      	adds	r3, r7, #7
    3ad6:	781b      	ldrb	r3, [r3, #0]
    3ad8:	68ba      	ldr	r2, [r7, #8]
    3ada:	7a11      	ldrb	r1, [r2, #8]
    3adc:	697a      	ldr	r2, [r7, #20]
    3ade:	3303      	adds	r3, #3
    3ae0:	00db      	lsls	r3, r3, #3
    3ae2:	18d3      	adds	r3, r2, r3
    3ae4:	3304      	adds	r3, #4
    3ae6:	1c0a      	adds	r2, r1, #0
    3ae8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3aea:	2300      	movs	r3, #0
}
    3aec:	0018      	movs	r0, r3
    3aee:	46bd      	mov	sp, r7
    3af0:	b006      	add	sp, #24
    3af2:	bd80      	pop	{r7, pc}
    3af4:	00003779 	.word	0x00003779
    3af8:	00003691 	.word	0x00003691

00003afc <system_gclk_chan_get_config_defaults>:
{
    3afc:	b580      	push	{r7, lr}
    3afe:	b082      	sub	sp, #8
    3b00:	af00      	add	r7, sp, #0
    3b02:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	2200      	movs	r2, #0
    3b08:	701a      	strb	r2, [r3, #0]
}
    3b0a:	46c0      	nop			; (mov r8, r8)
    3b0c:	46bd      	mov	sp, r7
    3b0e:	b002      	add	sp, #8
    3b10:	bd80      	pop	{r7, pc}

00003b12 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3b12:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b14:	b08d      	sub	sp, #52	; 0x34
    3b16:	af00      	add	r7, sp, #0
    3b18:	60b8      	str	r0, [r7, #8]
    3b1a:	60f9      	str	r1, [r7, #12]
    3b1c:	603a      	str	r2, [r7, #0]
    3b1e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3b20:	2300      	movs	r3, #0
    3b22:	2400      	movs	r4, #0
    3b24:	623b      	str	r3, [r7, #32]
    3b26:	627c      	str	r4, [r7, #36]	; 0x24
    3b28:	2300      	movs	r3, #0
    3b2a:	2400      	movs	r4, #0
    3b2c:	61bb      	str	r3, [r7, #24]
    3b2e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    3b30:	233f      	movs	r3, #63	; 0x3f
    3b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    3b34:	e053      	b.n	3bde <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    3b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b38:	3b20      	subs	r3, #32
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	db04      	blt.n	3b48 <long_division+0x36>
    3b3e:	2201      	movs	r2, #1
    3b40:	409a      	lsls	r2, r3
    3b42:	0013      	movs	r3, r2
    3b44:	617b      	str	r3, [r7, #20]
    3b46:	e00b      	b.n	3b60 <long_division+0x4e>
    3b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b4a:	2220      	movs	r2, #32
    3b4c:	1ad3      	subs	r3, r2, r3
    3b4e:	2201      	movs	r2, #1
    3b50:	40da      	lsrs	r2, r3
    3b52:	0013      	movs	r3, r2
    3b54:	2100      	movs	r1, #0
    3b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b58:	4091      	lsls	r1, r2
    3b5a:	000a      	movs	r2, r1
    3b5c:	4313      	orrs	r3, r2
    3b5e:	617b      	str	r3, [r7, #20]
    3b60:	2201      	movs	r2, #1
    3b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b64:	409a      	lsls	r2, r3
    3b66:	0013      	movs	r3, r2
    3b68:	613b      	str	r3, [r7, #16]

		r = r << 1;
    3b6a:	69bb      	ldr	r3, [r7, #24]
    3b6c:	69fc      	ldr	r4, [r7, #28]
    3b6e:	18db      	adds	r3, r3, r3
    3b70:	4164      	adcs	r4, r4
    3b72:	61bb      	str	r3, [r7, #24]
    3b74:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    3b76:	68bb      	ldr	r3, [r7, #8]
    3b78:	693a      	ldr	r2, [r7, #16]
    3b7a:	401a      	ands	r2, r3
    3b7c:	0015      	movs	r5, r2
    3b7e:	68fb      	ldr	r3, [r7, #12]
    3b80:	697a      	ldr	r2, [r7, #20]
    3b82:	401a      	ands	r2, r3
    3b84:	0016      	movs	r6, r2
    3b86:	002b      	movs	r3, r5
    3b88:	4333      	orrs	r3, r6
    3b8a:	d007      	beq.n	3b9c <long_division+0x8a>
			r |= 0x01;
    3b8c:	69bb      	ldr	r3, [r7, #24]
    3b8e:	2201      	movs	r2, #1
    3b90:	4313      	orrs	r3, r2
    3b92:	61bb      	str	r3, [r7, #24]
    3b94:	69fb      	ldr	r3, [r7, #28]
    3b96:	2200      	movs	r2, #0
    3b98:	4313      	orrs	r3, r2
    3b9a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3b9c:	687a      	ldr	r2, [r7, #4]
    3b9e:	69fb      	ldr	r3, [r7, #28]
    3ba0:	429a      	cmp	r2, r3
    3ba2:	d819      	bhi.n	3bd8 <long_division+0xc6>
    3ba4:	687a      	ldr	r2, [r7, #4]
    3ba6:	69fb      	ldr	r3, [r7, #28]
    3ba8:	429a      	cmp	r2, r3
    3baa:	d103      	bne.n	3bb4 <long_division+0xa2>
    3bac:	683a      	ldr	r2, [r7, #0]
    3bae:	69bb      	ldr	r3, [r7, #24]
    3bb0:	429a      	cmp	r2, r3
    3bb2:	d811      	bhi.n	3bd8 <long_division+0xc6>
			r = r - d;
    3bb4:	69b9      	ldr	r1, [r7, #24]
    3bb6:	69fa      	ldr	r2, [r7, #28]
    3bb8:	683b      	ldr	r3, [r7, #0]
    3bba:	687c      	ldr	r4, [r7, #4]
    3bbc:	1ac9      	subs	r1, r1, r3
    3bbe:	41a2      	sbcs	r2, r4
    3bc0:	000b      	movs	r3, r1
    3bc2:	0014      	movs	r4, r2
    3bc4:	61bb      	str	r3, [r7, #24]
    3bc6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3bc8:	6a3a      	ldr	r2, [r7, #32]
    3bca:	693b      	ldr	r3, [r7, #16]
    3bcc:	4313      	orrs	r3, r2
    3bce:	623b      	str	r3, [r7, #32]
    3bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3bd2:	697b      	ldr	r3, [r7, #20]
    3bd4:	4313      	orrs	r3, r2
    3bd6:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3bda:	3b01      	subs	r3, #1
    3bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    3bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3be0:	2b00      	cmp	r3, #0
    3be2:	daa8      	bge.n	3b36 <long_division+0x24>
		}
	}

	return q;
    3be4:	6a3b      	ldr	r3, [r7, #32]
    3be6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3be8:	0018      	movs	r0, r3
    3bea:	0021      	movs	r1, r4
    3bec:	46bd      	mov	sp, r7
    3bee:	b00d      	add	sp, #52	; 0x34
    3bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003bf2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3bf2:	b580      	push	{r7, lr}
    3bf4:	b086      	sub	sp, #24
    3bf6:	af00      	add	r7, sp, #0
    3bf8:	60f8      	str	r0, [r7, #12]
    3bfa:	60b9      	str	r1, [r7, #8]
    3bfc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3bfe:	2316      	movs	r3, #22
    3c00:	18fb      	adds	r3, r7, r3
    3c02:	2200      	movs	r2, #0
    3c04:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3c06:	68bb      	ldr	r3, [r7, #8]
    3c08:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3c0a:	68bb      	ldr	r3, [r7, #8]
    3c0c:	085a      	lsrs	r2, r3, #1
    3c0e:	68fb      	ldr	r3, [r7, #12]
    3c10:	429a      	cmp	r2, r3
    3c12:	d201      	bcs.n	3c18 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c14:	2340      	movs	r3, #64	; 0x40
    3c16:	e026      	b.n	3c66 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3c18:	68bb      	ldr	r3, [r7, #8]
    3c1a:	085b      	lsrs	r3, r3, #1
    3c1c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3c1e:	e00a      	b.n	3c36 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3c20:	693a      	ldr	r2, [r7, #16]
    3c22:	68fb      	ldr	r3, [r7, #12]
    3c24:	1ad3      	subs	r3, r2, r3
    3c26:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3c28:	2316      	movs	r3, #22
    3c2a:	18fb      	adds	r3, r7, r3
    3c2c:	881a      	ldrh	r2, [r3, #0]
    3c2e:	2316      	movs	r3, #22
    3c30:	18fb      	adds	r3, r7, r3
    3c32:	3201      	adds	r2, #1
    3c34:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    3c36:	693a      	ldr	r2, [r7, #16]
    3c38:	68fb      	ldr	r3, [r7, #12]
    3c3a:	429a      	cmp	r2, r3
    3c3c:	d2f0      	bcs.n	3c20 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    3c3e:	2316      	movs	r3, #22
    3c40:	18fb      	adds	r3, r7, r3
    3c42:	2216      	movs	r2, #22
    3c44:	18ba      	adds	r2, r7, r2
    3c46:	8812      	ldrh	r2, [r2, #0]
    3c48:	3a01      	subs	r2, #1
    3c4a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3c4c:	2316      	movs	r3, #22
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	881b      	ldrh	r3, [r3, #0]
    3c52:	2bff      	cmp	r3, #255	; 0xff
    3c54:	d901      	bls.n	3c5a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c56:	2340      	movs	r3, #64	; 0x40
    3c58:	e005      	b.n	3c66 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3c5a:	687b      	ldr	r3, [r7, #4]
    3c5c:	2216      	movs	r2, #22
    3c5e:	18ba      	adds	r2, r7, r2
    3c60:	8812      	ldrh	r2, [r2, #0]
    3c62:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3c64:	2300      	movs	r3, #0
	}
}
    3c66:	0018      	movs	r0, r3
    3c68:	46bd      	mov	sp, r7
    3c6a:	b006      	add	sp, #24
    3c6c:	bd80      	pop	{r7, pc}
	...

00003c70 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c72:	b0a1      	sub	sp, #132	; 0x84
    3c74:	af00      	add	r7, sp, #0
    3c76:	64f8      	str	r0, [r7, #76]	; 0x4c
    3c78:	64b9      	str	r1, [r7, #72]	; 0x48
    3c7a:	647a      	str	r2, [r7, #68]	; 0x44
    3c7c:	2243      	movs	r2, #67	; 0x43
    3c7e:	18ba      	adds	r2, r7, r2
    3c80:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    3c82:	2300      	movs	r3, #0
    3c84:	2400      	movs	r4, #0
    3c86:	673b      	str	r3, [r7, #112]	; 0x70
    3c88:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3c8a:	2300      	movs	r3, #0
    3c8c:	2400      	movs	r4, #0
    3c8e:	66bb      	str	r3, [r7, #104]	; 0x68
    3c90:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    3c92:	2300      	movs	r3, #0
    3c94:	2400      	movs	r4, #0
    3c96:	67bb      	str	r3, [r7, #120]	; 0x78
    3c98:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3c9a:	2300      	movs	r3, #0
    3c9c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3c9e:	2358      	movs	r3, #88	; 0x58
    3ca0:	2240      	movs	r2, #64	; 0x40
    3ca2:	4694      	mov	ip, r2
    3ca4:	44bc      	add	ip, r7
    3ca6:	4463      	add	r3, ip
    3ca8:	781a      	ldrb	r2, [r3, #0]
    3caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3cac:	435a      	muls	r2, r3
    3cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3cb0:	429a      	cmp	r2, r3
    3cb2:	d901      	bls.n	3cb8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3cb4:	2340      	movs	r3, #64	; 0x40
    3cb6:	e0b3      	b.n	3e20 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3cb8:	2343      	movs	r3, #67	; 0x43
    3cba:	18fb      	adds	r3, r7, r3
    3cbc:	781b      	ldrb	r3, [r3, #0]
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d13d      	bne.n	3d3e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3cc2:	2358      	movs	r3, #88	; 0x58
    3cc4:	2240      	movs	r2, #64	; 0x40
    3cc6:	4694      	mov	ip, r2
    3cc8:	44bc      	add	ip, r7
    3cca:	4463      	add	r3, ip
    3ccc:	781b      	ldrb	r3, [r3, #0]
    3cce:	b2db      	uxtb	r3, r3
    3cd0:	613b      	str	r3, [r7, #16]
    3cd2:	2300      	movs	r3, #0
    3cd4:	617b      	str	r3, [r7, #20]
    3cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3cd8:	60bb      	str	r3, [r7, #8]
    3cda:	2300      	movs	r3, #0
    3cdc:	60fb      	str	r3, [r7, #12]
    3cde:	4c52      	ldr	r4, [pc, #328]	; (3e28 <_sercom_get_async_baud_val+0x1b8>)
    3ce0:	68ba      	ldr	r2, [r7, #8]
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	6938      	ldr	r0, [r7, #16]
    3ce6:	6979      	ldr	r1, [r7, #20]
    3ce8:	47a0      	blx	r4
    3cea:	0003      	movs	r3, r0
    3cec:	000c      	movs	r4, r1
    3cee:	001b      	movs	r3, r3
    3cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
    3cf2:	2300      	movs	r3, #0
    3cf4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3cf8:	603b      	str	r3, [r7, #0]
    3cfa:	2300      	movs	r3, #0
    3cfc:	607b      	str	r3, [r7, #4]
    3cfe:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3d00:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3d02:	683a      	ldr	r2, [r7, #0]
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	4c49      	ldr	r4, [pc, #292]	; (3e2c <_sercom_get_async_baud_val+0x1bc>)
    3d08:	47a0      	blx	r4
    3d0a:	0003      	movs	r3, r0
    3d0c:	000c      	movs	r4, r1
    3d0e:	673b      	str	r3, [r7, #112]	; 0x70
    3d10:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3d12:	2100      	movs	r1, #0
    3d14:	2201      	movs	r2, #1
    3d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3d18:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3d1a:	1ac9      	subs	r1, r1, r3
    3d1c:	41a2      	sbcs	r2, r4
    3d1e:	000b      	movs	r3, r1
    3d20:	0014      	movs	r4, r2
    3d22:	66bb      	str	r3, [r7, #104]	; 0x68
    3d24:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d28:	0c1b      	lsrs	r3, r3, #16
    3d2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3d2c:	0416      	lsls	r6, r2, #16
    3d2e:	431e      	orrs	r6, r3
    3d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d32:	041d      	lsls	r5, r3, #16
    3d34:	0033      	movs	r3, r6
    3d36:	67bb      	str	r3, [r7, #120]	; 0x78
    3d38:	2300      	movs	r3, #0
    3d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    3d3c:	e06a      	b.n	3e14 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3d3e:	2343      	movs	r3, #67	; 0x43
    3d40:	18fb      	adds	r3, r7, r3
    3d42:	781b      	ldrb	r3, [r3, #0]
    3d44:	2b01      	cmp	r3, #1
    3d46:	d165      	bne.n	3e14 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d4a:	633b      	str	r3, [r7, #48]	; 0x30
    3d4c:	2300      	movs	r3, #0
    3d4e:	637b      	str	r3, [r7, #52]	; 0x34
    3d50:	2358      	movs	r3, #88	; 0x58
    3d52:	2240      	movs	r2, #64	; 0x40
    3d54:	4694      	mov	ip, r2
    3d56:	44bc      	add	ip, r7
    3d58:	4463      	add	r3, ip
    3d5a:	781b      	ldrb	r3, [r3, #0]
    3d5c:	b2db      	uxtb	r3, r3
    3d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    3d60:	2300      	movs	r3, #0
    3d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    3d64:	4c30      	ldr	r4, [pc, #192]	; (3e28 <_sercom_get_async_baud_val+0x1b8>)
    3d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3d6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3d6e:	47a0      	blx	r4
    3d70:	0003      	movs	r3, r0
    3d72:	000c      	movs	r4, r1
    3d74:	65bb      	str	r3, [r7, #88]	; 0x58
    3d76:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3d7a:	623b      	str	r3, [r7, #32]
    3d7c:	2300      	movs	r3, #0
    3d7e:	627b      	str	r3, [r7, #36]	; 0x24
    3d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d82:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3d84:	001a      	movs	r2, r3
    3d86:	0023      	movs	r3, r4
    3d88:	6a38      	ldr	r0, [r7, #32]
    3d8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3d8c:	4c27      	ldr	r4, [pc, #156]	; (3e2c <_sercom_get_async_baud_val+0x1bc>)
    3d8e:	47a0      	blx	r4
    3d90:	0003      	movs	r3, r0
    3d92:	000c      	movs	r4, r1
    3d94:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3d96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3d98:	2380      	movs	r3, #128	; 0x80
    3d9a:	019b      	lsls	r3, r3, #6
    3d9c:	429a      	cmp	r2, r3
    3d9e:	d901      	bls.n	3da4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3da0:	2340      	movs	r3, #64	; 0x40
    3da2:	e03d      	b.n	3e20 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3da6:	61bb      	str	r3, [r7, #24]
    3da8:	2300      	movs	r3, #0
    3daa:	61fb      	str	r3, [r7, #28]
    3dac:	69b9      	ldr	r1, [r7, #24]
    3dae:	69fa      	ldr	r2, [r7, #28]
    3db0:	000b      	movs	r3, r1
    3db2:	0f5b      	lsrs	r3, r3, #29
    3db4:	0010      	movs	r0, r2
    3db6:	00c0      	lsls	r0, r0, #3
    3db8:	63f8      	str	r0, [r7, #60]	; 0x3c
    3dba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3dbc:	4318      	orrs	r0, r3
    3dbe:	63f8      	str	r0, [r7, #60]	; 0x3c
    3dc0:	000b      	movs	r3, r1
    3dc2:	00db      	lsls	r3, r3, #3
    3dc4:	63bb      	str	r3, [r7, #56]	; 0x38
    3dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3dc8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3dca:	001a      	movs	r2, r3
    3dcc:	0023      	movs	r3, r4
    3dce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3dd2:	4c16      	ldr	r4, [pc, #88]	; (3e2c <_sercom_get_async_baud_val+0x1bc>)
    3dd4:	47a0      	blx	r4
    3dd6:	0003      	movs	r3, r0
    3dd8:	000c      	movs	r4, r1
    3dda:	65bb      	str	r3, [r7, #88]	; 0x58
    3ddc:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3de0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3de2:	b2d9      	uxtb	r1, r3
    3de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3de6:	b2db      	uxtb	r3, r3
    3de8:	00db      	lsls	r3, r3, #3
    3dea:	b2da      	uxtb	r2, r3
    3dec:	2317      	movs	r3, #23
    3dee:	2040      	movs	r0, #64	; 0x40
    3df0:	4684      	mov	ip, r0
    3df2:	44bc      	add	ip, r7
    3df4:	4463      	add	r3, ip
    3df6:	1a8a      	subs	r2, r1, r2
    3df8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3dfa:	2317      	movs	r3, #23
    3dfc:	2240      	movs	r2, #64	; 0x40
    3dfe:	4694      	mov	ip, r2
    3e00:	44bc      	add	ip, r7
    3e02:	4463      	add	r3, ip
    3e04:	781b      	ldrb	r3, [r3, #0]
    3e06:	035b      	lsls	r3, r3, #13
    3e08:	001a      	movs	r2, r3
    3e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3e0c:	4313      	orrs	r3, r2
    3e0e:	67bb      	str	r3, [r7, #120]	; 0x78
    3e10:	2300      	movs	r3, #0
    3e12:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3e16:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3e18:	b29a      	uxth	r2, r3
    3e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3e1c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3e1e:	2300      	movs	r3, #0
}
    3e20:	0018      	movs	r0, r3
    3e22:	46bd      	mov	sp, r7
    3e24:	b021      	add	sp, #132	; 0x84
    3e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e28:	0000b1e5 	.word	0x0000b1e5
    3e2c:	00003b13 	.word	0x00003b13

00003e30 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3e30:	b580      	push	{r7, lr}
    3e32:	b084      	sub	sp, #16
    3e34:	af00      	add	r7, sp, #0
    3e36:	0002      	movs	r2, r0
    3e38:	1dfb      	adds	r3, r7, #7
    3e3a:	701a      	strb	r2, [r3, #0]
    3e3c:	1dbb      	adds	r3, r7, #6
    3e3e:	1c0a      	adds	r2, r1, #0
    3e40:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3e42:	4b1a      	ldr	r3, [pc, #104]	; (3eac <sercom_set_gclk_generator+0x7c>)
    3e44:	781b      	ldrb	r3, [r3, #0]
    3e46:	2201      	movs	r2, #1
    3e48:	4053      	eors	r3, r2
    3e4a:	b2db      	uxtb	r3, r3
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d103      	bne.n	3e58 <sercom_set_gclk_generator+0x28>
    3e50:	1dbb      	adds	r3, r7, #6
    3e52:	781b      	ldrb	r3, [r3, #0]
    3e54:	2b00      	cmp	r3, #0
    3e56:	d01b      	beq.n	3e90 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3e58:	230c      	movs	r3, #12
    3e5a:	18fb      	adds	r3, r7, r3
    3e5c:	0018      	movs	r0, r3
    3e5e:	4b14      	ldr	r3, [pc, #80]	; (3eb0 <sercom_set_gclk_generator+0x80>)
    3e60:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3e62:	230c      	movs	r3, #12
    3e64:	18fb      	adds	r3, r7, r3
    3e66:	1dfa      	adds	r2, r7, #7
    3e68:	7812      	ldrb	r2, [r2, #0]
    3e6a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3e6c:	230c      	movs	r3, #12
    3e6e:	18fb      	adds	r3, r7, r3
    3e70:	0019      	movs	r1, r3
    3e72:	2013      	movs	r0, #19
    3e74:	4b0f      	ldr	r3, [pc, #60]	; (3eb4 <sercom_set_gclk_generator+0x84>)
    3e76:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3e78:	2013      	movs	r0, #19
    3e7a:	4b0f      	ldr	r3, [pc, #60]	; (3eb8 <sercom_set_gclk_generator+0x88>)
    3e7c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3e7e:	4b0b      	ldr	r3, [pc, #44]	; (3eac <sercom_set_gclk_generator+0x7c>)
    3e80:	1dfa      	adds	r2, r7, #7
    3e82:	7812      	ldrb	r2, [r2, #0]
    3e84:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3e86:	4b09      	ldr	r3, [pc, #36]	; (3eac <sercom_set_gclk_generator+0x7c>)
    3e88:	2201      	movs	r2, #1
    3e8a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3e8c:	2300      	movs	r3, #0
    3e8e:	e008      	b.n	3ea2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3e90:	4b06      	ldr	r3, [pc, #24]	; (3eac <sercom_set_gclk_generator+0x7c>)
    3e92:	785b      	ldrb	r3, [r3, #1]
    3e94:	1dfa      	adds	r2, r7, #7
    3e96:	7812      	ldrb	r2, [r2, #0]
    3e98:	429a      	cmp	r2, r3
    3e9a:	d101      	bne.n	3ea0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3e9c:	2300      	movs	r3, #0
    3e9e:	e000      	b.n	3ea2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3ea0:	231d      	movs	r3, #29
}
    3ea2:	0018      	movs	r0, r3
    3ea4:	46bd      	mov	sp, r7
    3ea6:	b004      	add	sp, #16
    3ea8:	bd80      	pop	{r7, pc}
    3eaa:	46c0      	nop			; (mov r8, r8)
    3eac:	20000144 	.word	0x20000144
    3eb0:	00003afd 	.word	0x00003afd
    3eb4:	00006b8d 	.word	0x00006b8d
    3eb8:	00006bd1 	.word	0x00006bd1

00003ebc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b082      	sub	sp, #8
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	6078      	str	r0, [r7, #4]
    3ec4:	000a      	movs	r2, r1
    3ec6:	1cfb      	adds	r3, r7, #3
    3ec8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3eca:	687b      	ldr	r3, [r7, #4]
    3ecc:	4a4d      	ldr	r2, [pc, #308]	; (4004 <_sercom_get_default_pad+0x148>)
    3ece:	4293      	cmp	r3, r2
    3ed0:	d03f      	beq.n	3f52 <_sercom_get_default_pad+0x96>
    3ed2:	4a4c      	ldr	r2, [pc, #304]	; (4004 <_sercom_get_default_pad+0x148>)
    3ed4:	4293      	cmp	r3, r2
    3ed6:	d806      	bhi.n	3ee6 <_sercom_get_default_pad+0x2a>
    3ed8:	4a4b      	ldr	r2, [pc, #300]	; (4008 <_sercom_get_default_pad+0x14c>)
    3eda:	4293      	cmp	r3, r2
    3edc:	d00f      	beq.n	3efe <_sercom_get_default_pad+0x42>
    3ede:	4a4b      	ldr	r2, [pc, #300]	; (400c <_sercom_get_default_pad+0x150>)
    3ee0:	4293      	cmp	r3, r2
    3ee2:	d021      	beq.n	3f28 <_sercom_get_default_pad+0x6c>
    3ee4:	e089      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3ee6:	4a4a      	ldr	r2, [pc, #296]	; (4010 <_sercom_get_default_pad+0x154>)
    3ee8:	4293      	cmp	r3, r2
    3eea:	d100      	bne.n	3eee <_sercom_get_default_pad+0x32>
    3eec:	e05b      	b.n	3fa6 <_sercom_get_default_pad+0xea>
    3eee:	4a49      	ldr	r2, [pc, #292]	; (4014 <_sercom_get_default_pad+0x158>)
    3ef0:	4293      	cmp	r3, r2
    3ef2:	d100      	bne.n	3ef6 <_sercom_get_default_pad+0x3a>
    3ef4:	e06c      	b.n	3fd0 <_sercom_get_default_pad+0x114>
    3ef6:	4a48      	ldr	r2, [pc, #288]	; (4018 <_sercom_get_default_pad+0x15c>)
    3ef8:	4293      	cmp	r3, r2
    3efa:	d03f      	beq.n	3f7c <_sercom_get_default_pad+0xc0>
    3efc:	e07d      	b.n	3ffa <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3efe:	1cfb      	adds	r3, r7, #3
    3f00:	781b      	ldrb	r3, [r3, #0]
    3f02:	2b01      	cmp	r3, #1
    3f04:	d00a      	beq.n	3f1c <_sercom_get_default_pad+0x60>
    3f06:	dc02      	bgt.n	3f0e <_sercom_get_default_pad+0x52>
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d005      	beq.n	3f18 <_sercom_get_default_pad+0x5c>
    3f0c:	e075      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3f0e:	2b02      	cmp	r3, #2
    3f10:	d006      	beq.n	3f20 <_sercom_get_default_pad+0x64>
    3f12:	2b03      	cmp	r3, #3
    3f14:	d006      	beq.n	3f24 <_sercom_get_default_pad+0x68>
    3f16:	e070      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3f18:	4b40      	ldr	r3, [pc, #256]	; (401c <_sercom_get_default_pad+0x160>)
    3f1a:	e06f      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f1c:	4b40      	ldr	r3, [pc, #256]	; (4020 <_sercom_get_default_pad+0x164>)
    3f1e:	e06d      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f20:	4b40      	ldr	r3, [pc, #256]	; (4024 <_sercom_get_default_pad+0x168>)
    3f22:	e06b      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f24:	4b40      	ldr	r3, [pc, #256]	; (4028 <_sercom_get_default_pad+0x16c>)
    3f26:	e069      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f28:	1cfb      	adds	r3, r7, #3
    3f2a:	781b      	ldrb	r3, [r3, #0]
    3f2c:	2b01      	cmp	r3, #1
    3f2e:	d00a      	beq.n	3f46 <_sercom_get_default_pad+0x8a>
    3f30:	dc02      	bgt.n	3f38 <_sercom_get_default_pad+0x7c>
    3f32:	2b00      	cmp	r3, #0
    3f34:	d005      	beq.n	3f42 <_sercom_get_default_pad+0x86>
    3f36:	e060      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3f38:	2b02      	cmp	r3, #2
    3f3a:	d006      	beq.n	3f4a <_sercom_get_default_pad+0x8e>
    3f3c:	2b03      	cmp	r3, #3
    3f3e:	d006      	beq.n	3f4e <_sercom_get_default_pad+0x92>
    3f40:	e05b      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3f42:	2303      	movs	r3, #3
    3f44:	e05a      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f46:	4b39      	ldr	r3, [pc, #228]	; (402c <_sercom_get_default_pad+0x170>)
    3f48:	e058      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f4a:	4b39      	ldr	r3, [pc, #228]	; (4030 <_sercom_get_default_pad+0x174>)
    3f4c:	e056      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f4e:	4b39      	ldr	r3, [pc, #228]	; (4034 <_sercom_get_default_pad+0x178>)
    3f50:	e054      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f52:	1cfb      	adds	r3, r7, #3
    3f54:	781b      	ldrb	r3, [r3, #0]
    3f56:	2b01      	cmp	r3, #1
    3f58:	d00a      	beq.n	3f70 <_sercom_get_default_pad+0xb4>
    3f5a:	dc02      	bgt.n	3f62 <_sercom_get_default_pad+0xa6>
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d005      	beq.n	3f6c <_sercom_get_default_pad+0xb0>
    3f60:	e04b      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3f62:	2b02      	cmp	r3, #2
    3f64:	d006      	beq.n	3f74 <_sercom_get_default_pad+0xb8>
    3f66:	2b03      	cmp	r3, #3
    3f68:	d006      	beq.n	3f78 <_sercom_get_default_pad+0xbc>
    3f6a:	e046      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3f6c:	4b32      	ldr	r3, [pc, #200]	; (4038 <_sercom_get_default_pad+0x17c>)
    3f6e:	e045      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f70:	4b32      	ldr	r3, [pc, #200]	; (403c <_sercom_get_default_pad+0x180>)
    3f72:	e043      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f74:	4b32      	ldr	r3, [pc, #200]	; (4040 <_sercom_get_default_pad+0x184>)
    3f76:	e041      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f78:	4b32      	ldr	r3, [pc, #200]	; (4044 <_sercom_get_default_pad+0x188>)
    3f7a:	e03f      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f7c:	1cfb      	adds	r3, r7, #3
    3f7e:	781b      	ldrb	r3, [r3, #0]
    3f80:	2b01      	cmp	r3, #1
    3f82:	d00a      	beq.n	3f9a <_sercom_get_default_pad+0xde>
    3f84:	dc02      	bgt.n	3f8c <_sercom_get_default_pad+0xd0>
    3f86:	2b00      	cmp	r3, #0
    3f88:	d005      	beq.n	3f96 <_sercom_get_default_pad+0xda>
    3f8a:	e036      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3f8c:	2b02      	cmp	r3, #2
    3f8e:	d006      	beq.n	3f9e <_sercom_get_default_pad+0xe2>
    3f90:	2b03      	cmp	r3, #3
    3f92:	d006      	beq.n	3fa2 <_sercom_get_default_pad+0xe6>
    3f94:	e031      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3f96:	4b2c      	ldr	r3, [pc, #176]	; (4048 <_sercom_get_default_pad+0x18c>)
    3f98:	e030      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f9a:	4b2c      	ldr	r3, [pc, #176]	; (404c <_sercom_get_default_pad+0x190>)
    3f9c:	e02e      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3f9e:	4b2c      	ldr	r3, [pc, #176]	; (4050 <_sercom_get_default_pad+0x194>)
    3fa0:	e02c      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3fa2:	4b2c      	ldr	r3, [pc, #176]	; (4054 <_sercom_get_default_pad+0x198>)
    3fa4:	e02a      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3fa6:	1cfb      	adds	r3, r7, #3
    3fa8:	781b      	ldrb	r3, [r3, #0]
    3faa:	2b01      	cmp	r3, #1
    3fac:	d00a      	beq.n	3fc4 <_sercom_get_default_pad+0x108>
    3fae:	dc02      	bgt.n	3fb6 <_sercom_get_default_pad+0xfa>
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d005      	beq.n	3fc0 <_sercom_get_default_pad+0x104>
    3fb4:	e021      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3fb6:	2b02      	cmp	r3, #2
    3fb8:	d006      	beq.n	3fc8 <_sercom_get_default_pad+0x10c>
    3fba:	2b03      	cmp	r3, #3
    3fbc:	d006      	beq.n	3fcc <_sercom_get_default_pad+0x110>
    3fbe:	e01c      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3fc0:	4b25      	ldr	r3, [pc, #148]	; (4058 <_sercom_get_default_pad+0x19c>)
    3fc2:	e01b      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3fc4:	4b25      	ldr	r3, [pc, #148]	; (405c <_sercom_get_default_pad+0x1a0>)
    3fc6:	e019      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3fc8:	4b25      	ldr	r3, [pc, #148]	; (4060 <_sercom_get_default_pad+0x1a4>)
    3fca:	e017      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3fcc:	4b25      	ldr	r3, [pc, #148]	; (4064 <_sercom_get_default_pad+0x1a8>)
    3fce:	e015      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3fd0:	1cfb      	adds	r3, r7, #3
    3fd2:	781b      	ldrb	r3, [r3, #0]
    3fd4:	2b01      	cmp	r3, #1
    3fd6:	d00a      	beq.n	3fee <_sercom_get_default_pad+0x132>
    3fd8:	dc02      	bgt.n	3fe0 <_sercom_get_default_pad+0x124>
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d005      	beq.n	3fea <_sercom_get_default_pad+0x12e>
    3fde:	e00c      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3fe0:	2b02      	cmp	r3, #2
    3fe2:	d006      	beq.n	3ff2 <_sercom_get_default_pad+0x136>
    3fe4:	2b03      	cmp	r3, #3
    3fe6:	d006      	beq.n	3ff6 <_sercom_get_default_pad+0x13a>
    3fe8:	e007      	b.n	3ffa <_sercom_get_default_pad+0x13e>
    3fea:	4b1f      	ldr	r3, [pc, #124]	; (4068 <_sercom_get_default_pad+0x1ac>)
    3fec:	e006      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3fee:	4b1f      	ldr	r3, [pc, #124]	; (406c <_sercom_get_default_pad+0x1b0>)
    3ff0:	e004      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3ff2:	4b1f      	ldr	r3, [pc, #124]	; (4070 <_sercom_get_default_pad+0x1b4>)
    3ff4:	e002      	b.n	3ffc <_sercom_get_default_pad+0x140>
    3ff6:	4b1f      	ldr	r3, [pc, #124]	; (4074 <_sercom_get_default_pad+0x1b8>)
    3ff8:	e000      	b.n	3ffc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3ffa:	2300      	movs	r3, #0
}
    3ffc:	0018      	movs	r0, r3
    3ffe:	46bd      	mov	sp, r7
    4000:	b002      	add	sp, #8
    4002:	bd80      	pop	{r7, pc}
    4004:	42001000 	.word	0x42001000
    4008:	42000800 	.word	0x42000800
    400c:	42000c00 	.word	0x42000c00
    4010:	42001800 	.word	0x42001800
    4014:	42001c00 	.word	0x42001c00
    4018:	42001400 	.word	0x42001400
    401c:	00040003 	.word	0x00040003
    4020:	00050003 	.word	0x00050003
    4024:	00060003 	.word	0x00060003
    4028:	00070003 	.word	0x00070003
    402c:	00010003 	.word	0x00010003
    4030:	001e0003 	.word	0x001e0003
    4034:	001f0003 	.word	0x001f0003
    4038:	00080003 	.word	0x00080003
    403c:	00090003 	.word	0x00090003
    4040:	000a0003 	.word	0x000a0003
    4044:	000b0003 	.word	0x000b0003
    4048:	00100003 	.word	0x00100003
    404c:	00110003 	.word	0x00110003
    4050:	00120003 	.word	0x00120003
    4054:	00130003 	.word	0x00130003
    4058:	000c0003 	.word	0x000c0003
    405c:	000d0003 	.word	0x000d0003
    4060:	000e0003 	.word	0x000e0003
    4064:	000f0003 	.word	0x000f0003
    4068:	00160003 	.word	0x00160003
    406c:	00170003 	.word	0x00170003
    4070:	00180003 	.word	0x00180003
    4074:	00190003 	.word	0x00190003

00004078 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4078:	b590      	push	{r4, r7, lr}
    407a:	b08b      	sub	sp, #44	; 0x2c
    407c:	af00      	add	r7, sp, #0
    407e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4080:	230c      	movs	r3, #12
    4082:	18fb      	adds	r3, r7, r3
    4084:	4a0f      	ldr	r2, [pc, #60]	; (40c4 <_sercom_get_sercom_inst_index+0x4c>)
    4086:	ca13      	ldmia	r2!, {r0, r1, r4}
    4088:	c313      	stmia	r3!, {r0, r1, r4}
    408a:	ca13      	ldmia	r2!, {r0, r1, r4}
    408c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    408e:	2300      	movs	r3, #0
    4090:	627b      	str	r3, [r7, #36]	; 0x24
    4092:	e00e      	b.n	40b2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4094:	230c      	movs	r3, #12
    4096:	18fb      	adds	r3, r7, r3
    4098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    409a:	0092      	lsls	r2, r2, #2
    409c:	58d3      	ldr	r3, [r2, r3]
    409e:	001a      	movs	r2, r3
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	429a      	cmp	r2, r3
    40a4:	d102      	bne.n	40ac <_sercom_get_sercom_inst_index+0x34>
			return i;
    40a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40a8:	b2db      	uxtb	r3, r3
    40aa:	e006      	b.n	40ba <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    40ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40ae:	3301      	adds	r3, #1
    40b0:	627b      	str	r3, [r7, #36]	; 0x24
    40b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40b4:	2b05      	cmp	r3, #5
    40b6:	d9ed      	bls.n	4094 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    40b8:	2300      	movs	r3, #0
}
    40ba:	0018      	movs	r0, r3
    40bc:	46bd      	mov	sp, r7
    40be:	b00b      	add	sp, #44	; 0x2c
    40c0:	bd90      	pop	{r4, r7, pc}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	0000c334 	.word	0x0000c334

000040c8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    40c8:	b580      	push	{r7, lr}
    40ca:	b082      	sub	sp, #8
    40cc:	af00      	add	r7, sp, #0
    40ce:	0002      	movs	r2, r0
    40d0:	1dfb      	adds	r3, r7, #7
    40d2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    40d4:	46c0      	nop			; (mov r8, r8)
    40d6:	46bd      	mov	sp, r7
    40d8:	b002      	add	sp, #8
    40da:	bd80      	pop	{r7, pc}

000040dc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    40dc:	b580      	push	{r7, lr}
    40de:	b084      	sub	sp, #16
    40e0:	af00      	add	r7, sp, #0
    40e2:	0002      	movs	r2, r0
    40e4:	6039      	str	r1, [r7, #0]
    40e6:	1dfb      	adds	r3, r7, #7
    40e8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    40ea:	4b13      	ldr	r3, [pc, #76]	; (4138 <_sercom_set_handler+0x5c>)
    40ec:	781b      	ldrb	r3, [r3, #0]
    40ee:	2201      	movs	r2, #1
    40f0:	4053      	eors	r3, r2
    40f2:	b2db      	uxtb	r3, r3
    40f4:	2b00      	cmp	r3, #0
    40f6:	d015      	beq.n	4124 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    40f8:	2300      	movs	r3, #0
    40fa:	60fb      	str	r3, [r7, #12]
    40fc:	e00c      	b.n	4118 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    40fe:	4b0f      	ldr	r3, [pc, #60]	; (413c <_sercom_set_handler+0x60>)
    4100:	68fa      	ldr	r2, [r7, #12]
    4102:	0092      	lsls	r2, r2, #2
    4104:	490e      	ldr	r1, [pc, #56]	; (4140 <_sercom_set_handler+0x64>)
    4106:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4108:	4b0e      	ldr	r3, [pc, #56]	; (4144 <_sercom_set_handler+0x68>)
    410a:	68fa      	ldr	r2, [r7, #12]
    410c:	0092      	lsls	r2, r2, #2
    410e:	2100      	movs	r1, #0
    4110:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4112:	68fb      	ldr	r3, [r7, #12]
    4114:	3301      	adds	r3, #1
    4116:	60fb      	str	r3, [r7, #12]
    4118:	68fb      	ldr	r3, [r7, #12]
    411a:	2b05      	cmp	r3, #5
    411c:	d9ef      	bls.n	40fe <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    411e:	4b06      	ldr	r3, [pc, #24]	; (4138 <_sercom_set_handler+0x5c>)
    4120:	2201      	movs	r2, #1
    4122:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4124:	1dfb      	adds	r3, r7, #7
    4126:	781a      	ldrb	r2, [r3, #0]
    4128:	4b04      	ldr	r3, [pc, #16]	; (413c <_sercom_set_handler+0x60>)
    412a:	0092      	lsls	r2, r2, #2
    412c:	6839      	ldr	r1, [r7, #0]
    412e:	50d1      	str	r1, [r2, r3]
}
    4130:	46c0      	nop			; (mov r8, r8)
    4132:	46bd      	mov	sp, r7
    4134:	b004      	add	sp, #16
    4136:	bd80      	pop	{r7, pc}
    4138:	20000146 	.word	0x20000146
    413c:	20000148 	.word	0x20000148
    4140:	000040c9 	.word	0x000040c9
    4144:	200009d4 	.word	0x200009d4

00004148 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4148:	b590      	push	{r4, r7, lr}
    414a:	b085      	sub	sp, #20
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4150:	2308      	movs	r3, #8
    4152:	18fb      	adds	r3, r7, r3
    4154:	4a0b      	ldr	r2, [pc, #44]	; (4184 <_sercom_get_interrupt_vector+0x3c>)
    4156:	6811      	ldr	r1, [r2, #0]
    4158:	6019      	str	r1, [r3, #0]
    415a:	8892      	ldrh	r2, [r2, #4]
    415c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    415e:	230f      	movs	r3, #15
    4160:	18fc      	adds	r4, r7, r3
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	0018      	movs	r0, r3
    4166:	4b08      	ldr	r3, [pc, #32]	; (4188 <_sercom_get_interrupt_vector+0x40>)
    4168:	4798      	blx	r3
    416a:	0003      	movs	r3, r0
    416c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    416e:	230f      	movs	r3, #15
    4170:	18fb      	adds	r3, r7, r3
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	2208      	movs	r2, #8
    4176:	18ba      	adds	r2, r7, r2
    4178:	5cd3      	ldrb	r3, [r2, r3]
    417a:	b25b      	sxtb	r3, r3
}
    417c:	0018      	movs	r0, r3
    417e:	46bd      	mov	sp, r7
    4180:	b005      	add	sp, #20
    4182:	bd90      	pop	{r4, r7, pc}
    4184:	0000c34c 	.word	0x0000c34c
    4188:	00004079 	.word	0x00004079

0000418c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    418c:	b580      	push	{r7, lr}
    418e:	af00      	add	r7, sp, #0
    4190:	4b03      	ldr	r3, [pc, #12]	; (41a0 <SERCOM0_Handler+0x14>)
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	2000      	movs	r0, #0
    4196:	4798      	blx	r3
    4198:	46c0      	nop			; (mov r8, r8)
    419a:	46bd      	mov	sp, r7
    419c:	bd80      	pop	{r7, pc}
    419e:	46c0      	nop			; (mov r8, r8)
    41a0:	20000148 	.word	0x20000148

000041a4 <SERCOM1_Handler>:
    41a4:	b580      	push	{r7, lr}
    41a6:	af00      	add	r7, sp, #0
    41a8:	4b03      	ldr	r3, [pc, #12]	; (41b8 <SERCOM1_Handler+0x14>)
    41aa:	685b      	ldr	r3, [r3, #4]
    41ac:	2001      	movs	r0, #1
    41ae:	4798      	blx	r3
    41b0:	46c0      	nop			; (mov r8, r8)
    41b2:	46bd      	mov	sp, r7
    41b4:	bd80      	pop	{r7, pc}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	20000148 	.word	0x20000148

000041bc <SERCOM2_Handler>:
    41bc:	b580      	push	{r7, lr}
    41be:	af00      	add	r7, sp, #0
    41c0:	4b03      	ldr	r3, [pc, #12]	; (41d0 <SERCOM2_Handler+0x14>)
    41c2:	689b      	ldr	r3, [r3, #8]
    41c4:	2002      	movs	r0, #2
    41c6:	4798      	blx	r3
    41c8:	46c0      	nop			; (mov r8, r8)
    41ca:	46bd      	mov	sp, r7
    41cc:	bd80      	pop	{r7, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	20000148 	.word	0x20000148

000041d4 <SERCOM3_Handler>:
    41d4:	b580      	push	{r7, lr}
    41d6:	af00      	add	r7, sp, #0
    41d8:	4b03      	ldr	r3, [pc, #12]	; (41e8 <SERCOM3_Handler+0x14>)
    41da:	68db      	ldr	r3, [r3, #12]
    41dc:	2003      	movs	r0, #3
    41de:	4798      	blx	r3
    41e0:	46c0      	nop			; (mov r8, r8)
    41e2:	46bd      	mov	sp, r7
    41e4:	bd80      	pop	{r7, pc}
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	20000148 	.word	0x20000148

000041ec <SERCOM4_Handler>:
    41ec:	b580      	push	{r7, lr}
    41ee:	af00      	add	r7, sp, #0
    41f0:	4b03      	ldr	r3, [pc, #12]	; (4200 <SERCOM4_Handler+0x14>)
    41f2:	691b      	ldr	r3, [r3, #16]
    41f4:	2004      	movs	r0, #4
    41f6:	4798      	blx	r3
    41f8:	46c0      	nop			; (mov r8, r8)
    41fa:	46bd      	mov	sp, r7
    41fc:	bd80      	pop	{r7, pc}
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	20000148 	.word	0x20000148

00004204 <SERCOM5_Handler>:
    4204:	b580      	push	{r7, lr}
    4206:	af00      	add	r7, sp, #0
    4208:	4b03      	ldr	r3, [pc, #12]	; (4218 <SERCOM5_Handler+0x14>)
    420a:	695b      	ldr	r3, [r3, #20]
    420c:	2005      	movs	r0, #5
    420e:	4798      	blx	r3
    4210:	46c0      	nop			; (mov r8, r8)
    4212:	46bd      	mov	sp, r7
    4214:	bd80      	pop	{r7, pc}
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	20000148 	.word	0x20000148

0000421c <system_pinmux_get_config_defaults>:
{
    421c:	b580      	push	{r7, lr}
    421e:	b082      	sub	sp, #8
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	2280      	movs	r2, #128	; 0x80
    4228:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	2200      	movs	r2, #0
    422e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	2201      	movs	r2, #1
    4234:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	2200      	movs	r2, #0
    423a:	70da      	strb	r2, [r3, #3]
}
    423c:	46c0      	nop			; (mov r8, r8)
    423e:	46bd      	mov	sp, r7
    4240:	b002      	add	sp, #8
    4242:	bd80      	pop	{r7, pc}

00004244 <system_pinmux_get_group_from_gpio_pin>:
{
    4244:	b580      	push	{r7, lr}
    4246:	b084      	sub	sp, #16
    4248:	af00      	add	r7, sp, #0
    424a:	0002      	movs	r2, r0
    424c:	1dfb      	adds	r3, r7, #7
    424e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4250:	230f      	movs	r3, #15
    4252:	18fb      	adds	r3, r7, r3
    4254:	1dfa      	adds	r2, r7, #7
    4256:	7812      	ldrb	r2, [r2, #0]
    4258:	09d2      	lsrs	r2, r2, #7
    425a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    425c:	230e      	movs	r3, #14
    425e:	18fb      	adds	r3, r7, r3
    4260:	1dfa      	adds	r2, r7, #7
    4262:	7812      	ldrb	r2, [r2, #0]
    4264:	0952      	lsrs	r2, r2, #5
    4266:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4268:	4b0d      	ldr	r3, [pc, #52]	; (42a0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    426a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    426c:	230f      	movs	r3, #15
    426e:	18fb      	adds	r3, r7, r3
    4270:	781b      	ldrb	r3, [r3, #0]
    4272:	2b00      	cmp	r3, #0
    4274:	d10f      	bne.n	4296 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4276:	230f      	movs	r3, #15
    4278:	18fb      	adds	r3, r7, r3
    427a:	781b      	ldrb	r3, [r3, #0]
    427c:	009b      	lsls	r3, r3, #2
    427e:	2210      	movs	r2, #16
    4280:	4694      	mov	ip, r2
    4282:	44bc      	add	ip, r7
    4284:	4463      	add	r3, ip
    4286:	3b08      	subs	r3, #8
    4288:	681a      	ldr	r2, [r3, #0]
    428a:	230e      	movs	r3, #14
    428c:	18fb      	adds	r3, r7, r3
    428e:	781b      	ldrb	r3, [r3, #0]
    4290:	01db      	lsls	r3, r3, #7
    4292:	18d3      	adds	r3, r2, r3
    4294:	e000      	b.n	4298 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4296:	2300      	movs	r3, #0
}
    4298:	0018      	movs	r0, r3
    429a:	46bd      	mov	sp, r7
    429c:	b004      	add	sp, #16
    429e:	bd80      	pop	{r7, pc}
    42a0:	41004400 	.word	0x41004400

000042a4 <port_get_group_from_gpio_pin>:
{
    42a4:	b580      	push	{r7, lr}
    42a6:	b082      	sub	sp, #8
    42a8:	af00      	add	r7, sp, #0
    42aa:	0002      	movs	r2, r0
    42ac:	1dfb      	adds	r3, r7, #7
    42ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    42b0:	1dfb      	adds	r3, r7, #7
    42b2:	781b      	ldrb	r3, [r3, #0]
    42b4:	0018      	movs	r0, r3
    42b6:	4b03      	ldr	r3, [pc, #12]	; (42c4 <port_get_group_from_gpio_pin+0x20>)
    42b8:	4798      	blx	r3
    42ba:	0003      	movs	r3, r0
}
    42bc:	0018      	movs	r0, r3
    42be:	46bd      	mov	sp, r7
    42c0:	b002      	add	sp, #8
    42c2:	bd80      	pop	{r7, pc}
    42c4:	00004245 	.word	0x00004245

000042c8 <port_pin_set_output_level>:
{
    42c8:	b580      	push	{r7, lr}
    42ca:	b084      	sub	sp, #16
    42cc:	af00      	add	r7, sp, #0
    42ce:	0002      	movs	r2, r0
    42d0:	1dfb      	adds	r3, r7, #7
    42d2:	701a      	strb	r2, [r3, #0]
    42d4:	1dbb      	adds	r3, r7, #6
    42d6:	1c0a      	adds	r2, r1, #0
    42d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    42da:	1dfb      	adds	r3, r7, #7
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	0018      	movs	r0, r3
    42e0:	4b0d      	ldr	r3, [pc, #52]	; (4318 <port_pin_set_output_level+0x50>)
    42e2:	4798      	blx	r3
    42e4:	0003      	movs	r3, r0
    42e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    42e8:	1dfb      	adds	r3, r7, #7
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	221f      	movs	r2, #31
    42ee:	4013      	ands	r3, r2
    42f0:	2201      	movs	r2, #1
    42f2:	409a      	lsls	r2, r3
    42f4:	0013      	movs	r3, r2
    42f6:	60bb      	str	r3, [r7, #8]
	if (level) {
    42f8:	1dbb      	adds	r3, r7, #6
    42fa:	781b      	ldrb	r3, [r3, #0]
    42fc:	2b00      	cmp	r3, #0
    42fe:	d003      	beq.n	4308 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	68ba      	ldr	r2, [r7, #8]
    4304:	619a      	str	r2, [r3, #24]
}
    4306:	e002      	b.n	430e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    4308:	68fb      	ldr	r3, [r7, #12]
    430a:	68ba      	ldr	r2, [r7, #8]
    430c:	615a      	str	r2, [r3, #20]
}
    430e:	46c0      	nop			; (mov r8, r8)
    4310:	46bd      	mov	sp, r7
    4312:	b004      	add	sp, #16
    4314:	bd80      	pop	{r7, pc}
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	000042a5 	.word	0x000042a5

0000431c <system_gclk_chan_get_config_defaults>:
{
    431c:	b580      	push	{r7, lr}
    431e:	b082      	sub	sp, #8
    4320:	af00      	add	r7, sp, #0
    4322:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	2200      	movs	r2, #0
    4328:	701a      	strb	r2, [r3, #0]
}
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	46bd      	mov	sp, r7
    432e:	b002      	add	sp, #8
    4330:	bd80      	pop	{r7, pc}
	...

00004334 <system_apb_clock_set_mask>:
{
    4334:	b580      	push	{r7, lr}
    4336:	b082      	sub	sp, #8
    4338:	af00      	add	r7, sp, #0
    433a:	0002      	movs	r2, r0
    433c:	6039      	str	r1, [r7, #0]
    433e:	1dfb      	adds	r3, r7, #7
    4340:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4342:	1dfb      	adds	r3, r7, #7
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	2b01      	cmp	r3, #1
    4348:	d00a      	beq.n	4360 <system_apb_clock_set_mask+0x2c>
    434a:	2b02      	cmp	r3, #2
    434c:	d00f      	beq.n	436e <system_apb_clock_set_mask+0x3a>
    434e:	2b00      	cmp	r3, #0
    4350:	d114      	bne.n	437c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4352:	4b0e      	ldr	r3, [pc, #56]	; (438c <system_apb_clock_set_mask+0x58>)
    4354:	4a0d      	ldr	r2, [pc, #52]	; (438c <system_apb_clock_set_mask+0x58>)
    4356:	6991      	ldr	r1, [r2, #24]
    4358:	683a      	ldr	r2, [r7, #0]
    435a:	430a      	orrs	r2, r1
    435c:	619a      	str	r2, [r3, #24]
			break;
    435e:	e00f      	b.n	4380 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4360:	4b0a      	ldr	r3, [pc, #40]	; (438c <system_apb_clock_set_mask+0x58>)
    4362:	4a0a      	ldr	r2, [pc, #40]	; (438c <system_apb_clock_set_mask+0x58>)
    4364:	69d1      	ldr	r1, [r2, #28]
    4366:	683a      	ldr	r2, [r7, #0]
    4368:	430a      	orrs	r2, r1
    436a:	61da      	str	r2, [r3, #28]
			break;
    436c:	e008      	b.n	4380 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    436e:	4b07      	ldr	r3, [pc, #28]	; (438c <system_apb_clock_set_mask+0x58>)
    4370:	4a06      	ldr	r2, [pc, #24]	; (438c <system_apb_clock_set_mask+0x58>)
    4372:	6a11      	ldr	r1, [r2, #32]
    4374:	683a      	ldr	r2, [r7, #0]
    4376:	430a      	orrs	r2, r1
    4378:	621a      	str	r2, [r3, #32]
			break;
    437a:	e001      	b.n	4380 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    437c:	2317      	movs	r3, #23
    437e:	e000      	b.n	4382 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4380:	2300      	movs	r3, #0
}
    4382:	0018      	movs	r0, r3
    4384:	46bd      	mov	sp, r7
    4386:	b002      	add	sp, #8
    4388:	bd80      	pop	{r7, pc}
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	40000400 	.word	0x40000400

00004390 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4390:	b580      	push	{r7, lr}
    4392:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4394:	4b05      	ldr	r3, [pc, #20]	; (43ac <system_is_debugger_present+0x1c>)
    4396:	789b      	ldrb	r3, [r3, #2]
    4398:	b2db      	uxtb	r3, r3
    439a:	001a      	movs	r2, r3
    439c:	2302      	movs	r3, #2
    439e:	4013      	ands	r3, r2
    43a0:	1e5a      	subs	r2, r3, #1
    43a2:	4193      	sbcs	r3, r2
    43a4:	b2db      	uxtb	r3, r3
}
    43a6:	0018      	movs	r0, r3
    43a8:	46bd      	mov	sp, r7
    43aa:	bd80      	pop	{r7, pc}
    43ac:	41002000 	.word	0x41002000

000043b0 <system_interrupt_enable>:
{
    43b0:	b580      	push	{r7, lr}
    43b2:	b082      	sub	sp, #8
    43b4:	af00      	add	r7, sp, #0
    43b6:	0002      	movs	r2, r0
    43b8:	1dfb      	adds	r3, r7, #7
    43ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    43bc:	4b06      	ldr	r3, [pc, #24]	; (43d8 <system_interrupt_enable+0x28>)
    43be:	1dfa      	adds	r2, r7, #7
    43c0:	7812      	ldrb	r2, [r2, #0]
    43c2:	0011      	movs	r1, r2
    43c4:	221f      	movs	r2, #31
    43c6:	400a      	ands	r2, r1
    43c8:	2101      	movs	r1, #1
    43ca:	4091      	lsls	r1, r2
    43cc:	000a      	movs	r2, r1
    43ce:	601a      	str	r2, [r3, #0]
}
    43d0:	46c0      	nop			; (mov r8, r8)
    43d2:	46bd      	mov	sp, r7
    43d4:	b002      	add	sp, #8
    43d6:	bd80      	pop	{r7, pc}
    43d8:	e000e100 	.word	0xe000e100

000043dc <system_interrupt_disable>:
{
    43dc:	b580      	push	{r7, lr}
    43de:	b082      	sub	sp, #8
    43e0:	af00      	add	r7, sp, #0
    43e2:	0002      	movs	r2, r0
    43e4:	1dfb      	adds	r3, r7, #7
    43e6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    43e8:	4a07      	ldr	r2, [pc, #28]	; (4408 <system_interrupt_disable+0x2c>)
    43ea:	1dfb      	adds	r3, r7, #7
    43ec:	781b      	ldrb	r3, [r3, #0]
    43ee:	0019      	movs	r1, r3
    43f0:	231f      	movs	r3, #31
    43f2:	400b      	ands	r3, r1
    43f4:	2101      	movs	r1, #1
    43f6:	4099      	lsls	r1, r3
    43f8:	000b      	movs	r3, r1
    43fa:	0019      	movs	r1, r3
    43fc:	2380      	movs	r3, #128	; 0x80
    43fe:	50d1      	str	r1, [r2, r3]
}
    4400:	46c0      	nop			; (mov r8, r8)
    4402:	46bd      	mov	sp, r7
    4404:	b002      	add	sp, #8
    4406:	bd80      	pop	{r7, pc}
    4408:	e000e100 	.word	0xe000e100

0000440c <spi_is_syncing>:
{
    440c:	b580      	push	{r7, lr}
    440e:	b084      	sub	sp, #16
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    441a:	68fb      	ldr	r3, [r7, #12]
    441c:	69db      	ldr	r3, [r3, #28]
    441e:	1e5a      	subs	r2, r3, #1
    4420:	4193      	sbcs	r3, r2
    4422:	b2db      	uxtb	r3, r3
}
    4424:	0018      	movs	r0, r3
    4426:	46bd      	mov	sp, r7
    4428:	b004      	add	sp, #16
    442a:	bd80      	pop	{r7, pc}

0000442c <spi_enable>:
{
    442c:	b580      	push	{r7, lr}
    442e:	b084      	sub	sp, #16
    4430:	af00      	add	r7, sp, #0
    4432:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	681b      	ldr	r3, [r3, #0]
    4438:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	0018      	movs	r0, r3
    4440:	4b0b      	ldr	r3, [pc, #44]	; (4470 <spi_enable+0x44>)
    4442:	4798      	blx	r3
    4444:	0003      	movs	r3, r0
    4446:	0018      	movs	r0, r3
    4448:	4b0a      	ldr	r3, [pc, #40]	; (4474 <spi_enable+0x48>)
    444a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    444c:	46c0      	nop			; (mov r8, r8)
    444e:	687b      	ldr	r3, [r7, #4]
    4450:	0018      	movs	r0, r3
    4452:	4b09      	ldr	r3, [pc, #36]	; (4478 <spi_enable+0x4c>)
    4454:	4798      	blx	r3
    4456:	1e03      	subs	r3, r0, #0
    4458:	d1f9      	bne.n	444e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    445a:	68fb      	ldr	r3, [r7, #12]
    445c:	681b      	ldr	r3, [r3, #0]
    445e:	2202      	movs	r2, #2
    4460:	431a      	orrs	r2, r3
    4462:	68fb      	ldr	r3, [r7, #12]
    4464:	601a      	str	r2, [r3, #0]
}
    4466:	46c0      	nop			; (mov r8, r8)
    4468:	46bd      	mov	sp, r7
    446a:	b004      	add	sp, #16
    446c:	bd80      	pop	{r7, pc}
    446e:	46c0      	nop			; (mov r8, r8)
    4470:	00004149 	.word	0x00004149
    4474:	000043b1 	.word	0x000043b1
    4478:	0000440d 	.word	0x0000440d

0000447c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    447c:	b580      	push	{r7, lr}
    447e:	b084      	sub	sp, #16
    4480:	af00      	add	r7, sp, #0
    4482:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	681b      	ldr	r3, [r3, #0]
    4488:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	681b      	ldr	r3, [r3, #0]
    448e:	0018      	movs	r0, r3
    4490:	4b0e      	ldr	r3, [pc, #56]	; (44cc <spi_disable+0x50>)
    4492:	4798      	blx	r3
    4494:	0003      	movs	r3, r0
    4496:	0018      	movs	r0, r3
    4498:	4b0d      	ldr	r3, [pc, #52]	; (44d0 <spi_disable+0x54>)
    449a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    449c:	46c0      	nop			; (mov r8, r8)
    449e:	687b      	ldr	r3, [r7, #4]
    44a0:	0018      	movs	r0, r3
    44a2:	4b0c      	ldr	r3, [pc, #48]	; (44d4 <spi_disable+0x58>)
    44a4:	4798      	blx	r3
    44a6:	1e03      	subs	r3, r0, #0
    44a8:	d1f9      	bne.n	449e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	228f      	movs	r2, #143	; 0x8f
    44ae:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    44b0:	68fb      	ldr	r3, [r7, #12]
    44b2:	228f      	movs	r2, #143	; 0x8f
    44b4:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    44b6:	68fb      	ldr	r3, [r7, #12]
    44b8:	681b      	ldr	r3, [r3, #0]
    44ba:	2202      	movs	r2, #2
    44bc:	4393      	bics	r3, r2
    44be:	001a      	movs	r2, r3
    44c0:	68fb      	ldr	r3, [r7, #12]
    44c2:	601a      	str	r2, [r3, #0]
}
    44c4:	46c0      	nop			; (mov r8, r8)
    44c6:	46bd      	mov	sp, r7
    44c8:	b004      	add	sp, #16
    44ca:	bd80      	pop	{r7, pc}
    44cc:	00004149 	.word	0x00004149
    44d0:	000043dd 	.word	0x000043dd
    44d4:	0000440d 	.word	0x0000440d

000044d8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    44d8:	b580      	push	{r7, lr}
    44da:	b084      	sub	sp, #16
    44dc:	af00      	add	r7, sp, #0
    44de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44e0:	687b      	ldr	r3, [r7, #4]
    44e2:	681b      	ldr	r3, [r3, #0]
    44e4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	7e1b      	ldrb	r3, [r3, #24]
    44ea:	b2db      	uxtb	r3, r3
    44ec:	001a      	movs	r2, r3
    44ee:	2302      	movs	r3, #2
    44f0:	4013      	ands	r3, r2
    44f2:	1e5a      	subs	r2, r3, #1
    44f4:	4193      	sbcs	r3, r2
    44f6:	b2db      	uxtb	r3, r3
}
    44f8:	0018      	movs	r0, r3
    44fa:	46bd      	mov	sp, r7
    44fc:	b004      	add	sp, #16
    44fe:	bd80      	pop	{r7, pc}

00004500 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    4500:	b580      	push	{r7, lr}
    4502:	b084      	sub	sp, #16
    4504:	af00      	add	r7, sp, #0
    4506:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	681b      	ldr	r3, [r3, #0]
    450c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    450e:	68fb      	ldr	r3, [r7, #12]
    4510:	7e1b      	ldrb	r3, [r3, #24]
    4512:	b2db      	uxtb	r3, r3
    4514:	001a      	movs	r2, r3
    4516:	2301      	movs	r3, #1
    4518:	4013      	ands	r3, r2
    451a:	1e5a      	subs	r2, r3, #1
    451c:	4193      	sbcs	r3, r2
    451e:	b2db      	uxtb	r3, r3
}
    4520:	0018      	movs	r0, r3
    4522:	46bd      	mov	sp, r7
    4524:	b004      	add	sp, #16
    4526:	bd80      	pop	{r7, pc}

00004528 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    4528:	b580      	push	{r7, lr}
    452a:	b084      	sub	sp, #16
    452c:	af00      	add	r7, sp, #0
    452e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4530:	687b      	ldr	r3, [r7, #4]
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	7e1b      	ldrb	r3, [r3, #24]
    453a:	b2db      	uxtb	r3, r3
    453c:	001a      	movs	r2, r3
    453e:	2304      	movs	r3, #4
    4540:	4013      	ands	r3, r2
    4542:	1e5a      	subs	r2, r3, #1
    4544:	4193      	sbcs	r3, r2
    4546:	b2db      	uxtb	r3, r3
}
    4548:	0018      	movs	r0, r3
    454a:	46bd      	mov	sp, r7
    454c:	b004      	add	sp, #16
    454e:	bd80      	pop	{r7, pc}

00004550 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4550:	b580      	push	{r7, lr}
    4552:	b084      	sub	sp, #16
    4554:	af00      	add	r7, sp, #0
    4556:	6078      	str	r0, [r7, #4]
    4558:	000a      	movs	r2, r1
    455a:	1cbb      	adds	r3, r7, #2
    455c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    455e:	687b      	ldr	r3, [r7, #4]
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4564:	687b      	ldr	r3, [r7, #4]
    4566:	0018      	movs	r0, r3
    4568:	4b0a      	ldr	r3, [pc, #40]	; (4594 <spi_write+0x44>)
    456a:	4798      	blx	r3
    456c:	0003      	movs	r3, r0
    456e:	001a      	movs	r2, r3
    4570:	2301      	movs	r3, #1
    4572:	4053      	eors	r3, r2
    4574:	b2db      	uxtb	r3, r3
    4576:	2b00      	cmp	r3, #0
    4578:	d001      	beq.n	457e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    457a:	2305      	movs	r3, #5
    457c:	e006      	b.n	458c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    457e:	1cbb      	adds	r3, r7, #2
    4580:	881b      	ldrh	r3, [r3, #0]
    4582:	05db      	lsls	r3, r3, #23
    4584:	0dda      	lsrs	r2, r3, #23
    4586:	68fb      	ldr	r3, [r7, #12]
    4588:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    458a:	2300      	movs	r3, #0
}
    458c:	0018      	movs	r0, r3
    458e:	46bd      	mov	sp, r7
    4590:	b004      	add	sp, #16
    4592:	bd80      	pop	{r7, pc}
    4594:	00004501 	.word	0x00004501

00004598 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    4598:	b580      	push	{r7, lr}
    459a:	b084      	sub	sp, #16
    459c:	af00      	add	r7, sp, #0
    459e:	6078      	str	r0, [r7, #4]
    45a0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	681b      	ldr	r3, [r3, #0]
    45a6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    45a8:	687b      	ldr	r3, [r7, #4]
    45aa:	0018      	movs	r0, r3
    45ac:	4b1b      	ldr	r3, [pc, #108]	; (461c <spi_read+0x84>)
    45ae:	4798      	blx	r3
    45b0:	0003      	movs	r3, r0
    45b2:	001a      	movs	r2, r3
    45b4:	2301      	movs	r3, #1
    45b6:	4053      	eors	r3, r2
    45b8:	b2db      	uxtb	r3, r3
    45ba:	2b00      	cmp	r3, #0
    45bc:	d001      	beq.n	45c2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    45be:	2310      	movs	r3, #16
    45c0:	e027      	b.n	4612 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    45c2:	230f      	movs	r3, #15
    45c4:	18fb      	adds	r3, r7, r3
    45c6:	2200      	movs	r2, #0
    45c8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    45ca:	68bb      	ldr	r3, [r7, #8]
    45cc:	8b5b      	ldrh	r3, [r3, #26]
    45ce:	b29b      	uxth	r3, r3
    45d0:	001a      	movs	r2, r3
    45d2:	2304      	movs	r3, #4
    45d4:	4013      	ands	r3, r2
    45d6:	d006      	beq.n	45e6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    45d8:	230f      	movs	r3, #15
    45da:	18fb      	adds	r3, r7, r3
    45dc:	221e      	movs	r2, #30
    45de:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    45e0:	68bb      	ldr	r3, [r7, #8]
    45e2:	2204      	movs	r2, #4
    45e4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    45e6:	687b      	ldr	r3, [r7, #4]
    45e8:	799b      	ldrb	r3, [r3, #6]
    45ea:	2b01      	cmp	r3, #1
    45ec:	d108      	bne.n	4600 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    45ee:	68bb      	ldr	r3, [r7, #8]
    45f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45f2:	b29b      	uxth	r3, r3
    45f4:	05db      	lsls	r3, r3, #23
    45f6:	0ddb      	lsrs	r3, r3, #23
    45f8:	b29a      	uxth	r2, r3
    45fa:	683b      	ldr	r3, [r7, #0]
    45fc:	801a      	strh	r2, [r3, #0]
    45fe:	e005      	b.n	460c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4600:	68bb      	ldr	r3, [r7, #8]
    4602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4604:	b2db      	uxtb	r3, r3
    4606:	b29a      	uxth	r2, r3
    4608:	683b      	ldr	r3, [r7, #0]
    460a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    460c:	230f      	movs	r3, #15
    460e:	18fb      	adds	r3, r7, r3
    4610:	781b      	ldrb	r3, [r3, #0]
}
    4612:	0018      	movs	r0, r3
    4614:	46bd      	mov	sp, r7
    4616:	b004      	add	sp, #16
    4618:	bd80      	pop	{r7, pc}
    461a:	46c0      	nop			; (mov r8, r8)
    461c:	00004529 	.word	0x00004529

00004620 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    4620:	b580      	push	{r7, lr}
    4622:	b084      	sub	sp, #16
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	681b      	ldr	r3, [r3, #0]
    462c:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	0018      	movs	r0, r3
    4632:	4b09      	ldr	r3, [pc, #36]	; (4658 <spi_reset+0x38>)
    4634:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    4636:	46c0      	nop			; (mov r8, r8)
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	0018      	movs	r0, r3
    463c:	4b07      	ldr	r3, [pc, #28]	; (465c <spi_reset+0x3c>)
    463e:	4798      	blx	r3
    4640:	1e03      	subs	r3, r0, #0
    4642:	d1f9      	bne.n	4638 <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    4644:	68fb      	ldr	r3, [r7, #12]
    4646:	681b      	ldr	r3, [r3, #0]
    4648:	2201      	movs	r2, #1
    464a:	431a      	orrs	r2, r3
    464c:	68fb      	ldr	r3, [r7, #12]
    464e:	601a      	str	r2, [r3, #0]
}
    4650:	46c0      	nop			; (mov r8, r8)
    4652:	46bd      	mov	sp, r7
    4654:	b004      	add	sp, #16
    4656:	bd80      	pop	{r7, pc}
    4658:	0000447d 	.word	0x0000447d
    465c:	0000440d 	.word	0x0000440d

00004660 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4660:	b590      	push	{r4, r7, lr}
    4662:	b089      	sub	sp, #36	; 0x24
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
    4668:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    466a:	230c      	movs	r3, #12
    466c:	18fb      	adds	r3, r7, r3
    466e:	2200      	movs	r2, #0
    4670:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4672:	687b      	ldr	r3, [r7, #4]
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	0018      	movs	r0, r3
    467c:	4b24      	ldr	r3, [pc, #144]	; (4710 <spi_set_baudrate+0xb0>)
    467e:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    4680:	46c0      	nop			; (mov r8, r8)
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	0018      	movs	r0, r3
    4686:	4b23      	ldr	r3, [pc, #140]	; (4714 <spi_set_baudrate+0xb4>)
    4688:	4798      	blx	r3
    468a:	1e03      	subs	r3, r0, #0
    468c:	d1f9      	bne.n	4682 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	681b      	ldr	r3, [r3, #0]
    4692:	0018      	movs	r0, r3
    4694:	4b20      	ldr	r3, [pc, #128]	; (4718 <spi_set_baudrate+0xb8>)
    4696:	4798      	blx	r3
    4698:	0003      	movs	r3, r0
    469a:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    469c:	69bb      	ldr	r3, [r7, #24]
    469e:	3314      	adds	r3, #20
    46a0:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    46a2:	697b      	ldr	r3, [r7, #20]
    46a4:	b2db      	uxtb	r3, r3
    46a6:	0018      	movs	r0, r3
    46a8:	4b1c      	ldr	r3, [pc, #112]	; (471c <spi_set_baudrate+0xbc>)
    46aa:	4798      	blx	r3
    46ac:	0003      	movs	r3, r0
    46ae:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    46b0:	230f      	movs	r3, #15
    46b2:	18fc      	adds	r4, r7, r3
    46b4:	230c      	movs	r3, #12
    46b6:	18fa      	adds	r2, r7, r3
    46b8:	6939      	ldr	r1, [r7, #16]
    46ba:	683b      	ldr	r3, [r7, #0]
    46bc:	0018      	movs	r0, r3
    46be:	4b18      	ldr	r3, [pc, #96]	; (4720 <spi_set_baudrate+0xc0>)
    46c0:	4798      	blx	r3
    46c2:	0003      	movs	r3, r0
    46c4:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    46c6:	230f      	movs	r3, #15
    46c8:	18fb      	adds	r3, r7, r3
    46ca:	781b      	ldrb	r3, [r3, #0]
    46cc:	2b00      	cmp	r3, #0
    46ce:	d001      	beq.n	46d4 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    46d0:	2317      	movs	r3, #23
    46d2:	e018      	b.n	4706 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    46d4:	230c      	movs	r3, #12
    46d6:	18fb      	adds	r3, r7, r3
    46d8:	881b      	ldrh	r3, [r3, #0]
    46da:	b2da      	uxtb	r2, r3
    46dc:	69fb      	ldr	r3, [r7, #28]
    46de:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    46e0:	46c0      	nop			; (mov r8, r8)
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	0018      	movs	r0, r3
    46e6:	4b0b      	ldr	r3, [pc, #44]	; (4714 <spi_set_baudrate+0xb4>)
    46e8:	4798      	blx	r3
    46ea:	1e03      	subs	r3, r0, #0
    46ec:	d1f9      	bne.n	46e2 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	0018      	movs	r0, r3
    46f2:	4b0c      	ldr	r3, [pc, #48]	; (4724 <spi_set_baudrate+0xc4>)
    46f4:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    46f6:	46c0      	nop			; (mov r8, r8)
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	0018      	movs	r0, r3
    46fc:	4b05      	ldr	r3, [pc, #20]	; (4714 <spi_set_baudrate+0xb4>)
    46fe:	4798      	blx	r3
    4700:	1e03      	subs	r3, r0, #0
    4702:	d1f9      	bne.n	46f8 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    4704:	2300      	movs	r3, #0
}
    4706:	0018      	movs	r0, r3
    4708:	46bd      	mov	sp, r7
    470a:	b009      	add	sp, #36	; 0x24
    470c:	bd90      	pop	{r4, r7, pc}
    470e:	46c0      	nop			; (mov r8, r8)
    4710:	0000447d 	.word	0x0000447d
    4714:	0000440d 	.word	0x0000440d
    4718:	00004079 	.word	0x00004079
    471c:	00006cb1 	.word	0x00006cb1
    4720:	00003bf3 	.word	0x00003bf3
    4724:	0000442d 	.word	0x0000442d

00004728 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4728:	b590      	push	{r4, r7, lr}
    472a:	b093      	sub	sp, #76	; 0x4c
    472c:	af00      	add	r7, sp, #0
    472e:	6078      	str	r0, [r7, #4]
    4730:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4732:	687b      	ldr	r3, [r7, #4]
    4734:	681b      	ldr	r3, [r3, #0]
    4736:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	681b      	ldr	r3, [r3, #0]
    473c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    473e:	231c      	movs	r3, #28
    4740:	18fb      	adds	r3, r7, r3
    4742:	0018      	movs	r0, r3
    4744:	4b75      	ldr	r3, [pc, #468]	; (491c <_spi_set_config+0x1f4>)
    4746:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4748:	231c      	movs	r3, #28
    474a:	18fb      	adds	r3, r7, r3
    474c:	2200      	movs	r2, #0
    474e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4750:	683b      	ldr	r3, [r7, #0]
    4752:	781b      	ldrb	r3, [r3, #0]
    4754:	2b00      	cmp	r3, #0
    4756:	d103      	bne.n	4760 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4758:	231c      	movs	r3, #28
    475a:	18fb      	adds	r3, r7, r3
    475c:	2200      	movs	r2, #0
    475e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4760:	683b      	ldr	r3, [r7, #0]
    4762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    4764:	230c      	movs	r3, #12
    4766:	18fb      	adds	r3, r7, r3
    4768:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    476a:	683b      	ldr	r3, [r7, #0]
    476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    476e:	230c      	movs	r3, #12
    4770:	18fb      	adds	r3, r7, r3
    4772:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4774:	683b      	ldr	r3, [r7, #0]
    4776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    4778:	230c      	movs	r3, #12
    477a:	18fb      	adds	r3, r7, r3
    477c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    477e:	683b      	ldr	r3, [r7, #0]
    4780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4782:	230c      	movs	r3, #12
    4784:	18fb      	adds	r3, r7, r3
    4786:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4788:	2347      	movs	r3, #71	; 0x47
    478a:	18fb      	adds	r3, r7, r3
    478c:	2200      	movs	r2, #0
    478e:	701a      	strb	r2, [r3, #0]
    4790:	e02c      	b.n	47ec <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4792:	2347      	movs	r3, #71	; 0x47
    4794:	18fb      	adds	r3, r7, r3
    4796:	781a      	ldrb	r2, [r3, #0]
    4798:	230c      	movs	r3, #12
    479a:	18fb      	adds	r3, r7, r3
    479c:	0092      	lsls	r2, r2, #2
    479e:	58d3      	ldr	r3, [r2, r3]
    47a0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    47a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    47a4:	2b00      	cmp	r3, #0
    47a6:	d109      	bne.n	47bc <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    47a8:	2347      	movs	r3, #71	; 0x47
    47aa:	18fb      	adds	r3, r7, r3
    47ac:	781a      	ldrb	r2, [r3, #0]
    47ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    47b0:	0011      	movs	r1, r2
    47b2:	0018      	movs	r0, r3
    47b4:	4b5a      	ldr	r3, [pc, #360]	; (4920 <_spi_set_config+0x1f8>)
    47b6:	4798      	blx	r3
    47b8:	0003      	movs	r3, r0
    47ba:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    47bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    47be:	3301      	adds	r3, #1
    47c0:	d00d      	beq.n	47de <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    47c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    47c4:	b2da      	uxtb	r2, r3
    47c6:	231c      	movs	r3, #28
    47c8:	18fb      	adds	r3, r7, r3
    47ca:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    47cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    47ce:	0c1b      	lsrs	r3, r3, #16
    47d0:	b2db      	uxtb	r3, r3
    47d2:	221c      	movs	r2, #28
    47d4:	18ba      	adds	r2, r7, r2
    47d6:	0011      	movs	r1, r2
    47d8:	0018      	movs	r0, r3
    47da:	4b52      	ldr	r3, [pc, #328]	; (4924 <_spi_set_config+0x1fc>)
    47dc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    47de:	2347      	movs	r3, #71	; 0x47
    47e0:	18fb      	adds	r3, r7, r3
    47e2:	781a      	ldrb	r2, [r3, #0]
    47e4:	2347      	movs	r3, #71	; 0x47
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	3201      	adds	r2, #1
    47ea:	701a      	strb	r2, [r3, #0]
    47ec:	2347      	movs	r3, #71	; 0x47
    47ee:	18fb      	adds	r3, r7, r3
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	2b03      	cmp	r3, #3
    47f4:	d9cd      	bls.n	4792 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    47f6:	683b      	ldr	r3, [r7, #0]
    47f8:	781a      	ldrb	r2, [r3, #0]
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    47fe:	683b      	ldr	r3, [r7, #0]
    4800:	7c1a      	ldrb	r2, [r3, #16]
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    4806:	683b      	ldr	r3, [r7, #0]
    4808:	7c9a      	ldrb	r2, [r3, #18]
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    480e:	683b      	ldr	r3, [r7, #0]
    4810:	7d1a      	ldrb	r2, [r3, #20]
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4816:	230a      	movs	r3, #10
    4818:	18fb      	adds	r3, r7, r3
    481a:	2200      	movs	r2, #0
    481c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    481e:	2300      	movs	r3, #0
    4820:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4822:	2300      	movs	r3, #0
    4824:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    4826:	683b      	ldr	r3, [r7, #0]
    4828:	781b      	ldrb	r3, [r3, #0]
    482a:	2b01      	cmp	r3, #1
    482c:	d129      	bne.n	4882 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	681b      	ldr	r3, [r3, #0]
    4832:	0018      	movs	r0, r3
    4834:	4b3c      	ldr	r3, [pc, #240]	; (4928 <_spi_set_config+0x200>)
    4836:	4798      	blx	r3
    4838:	0003      	movs	r3, r0
    483a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    483e:	3314      	adds	r3, #20
    4840:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4842:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4844:	b2db      	uxtb	r3, r3
    4846:	0018      	movs	r0, r3
    4848:	4b38      	ldr	r3, [pc, #224]	; (492c <_spi_set_config+0x204>)
    484a:	4798      	blx	r3
    484c:	0003      	movs	r3, r0
    484e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4850:	683b      	ldr	r3, [r7, #0]
    4852:	699b      	ldr	r3, [r3, #24]
    4854:	2223      	movs	r2, #35	; 0x23
    4856:	18bc      	adds	r4, r7, r2
    4858:	220a      	movs	r2, #10
    485a:	18ba      	adds	r2, r7, r2
    485c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    485e:	0018      	movs	r0, r3
    4860:	4b33      	ldr	r3, [pc, #204]	; (4930 <_spi_set_config+0x208>)
    4862:	4798      	blx	r3
    4864:	0003      	movs	r3, r0
    4866:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4868:	2323      	movs	r3, #35	; 0x23
    486a:	18fb      	adds	r3, r7, r3
    486c:	781b      	ldrb	r3, [r3, #0]
    486e:	2b00      	cmp	r3, #0
    4870:	d001      	beq.n	4876 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4872:	2317      	movs	r3, #23
    4874:	e04e      	b.n	4914 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    4876:	230a      	movs	r3, #10
    4878:	18fb      	adds	r3, r7, r3
    487a:	881b      	ldrh	r3, [r3, #0]
    487c:	b2da      	uxtb	r2, r3
    487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4880:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4882:	683b      	ldr	r3, [r7, #0]
    4884:	685b      	ldr	r3, [r3, #4]
    4886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4888:	4313      	orrs	r3, r2
    488a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    488c:	683b      	ldr	r3, [r7, #0]
    488e:	689b      	ldr	r3, [r3, #8]
    4890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4892:	4313      	orrs	r3, r2
    4894:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4896:	683b      	ldr	r3, [r7, #0]
    4898:	68db      	ldr	r3, [r3, #12]
    489a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    489c:	4313      	orrs	r3, r2
    489e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    48a0:	683b      	ldr	r3, [r7, #0]
    48a2:	7c1b      	ldrb	r3, [r3, #16]
    48a4:	001a      	movs	r2, r3
    48a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    48a8:	4313      	orrs	r3, r2
    48aa:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    48ac:	683b      	ldr	r3, [r7, #0]
    48ae:	7c5b      	ldrb	r3, [r3, #17]
    48b0:	2b00      	cmp	r3, #0
    48b2:	d103      	bne.n	48bc <_spi_set_config+0x194>
    48b4:	4b1f      	ldr	r3, [pc, #124]	; (4934 <_spi_set_config+0x20c>)
    48b6:	4798      	blx	r3
    48b8:	1e03      	subs	r3, r0, #0
    48ba:	d003      	beq.n	48c4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    48bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    48be:	2280      	movs	r2, #128	; 0x80
    48c0:	4313      	orrs	r3, r2
    48c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    48c4:	683b      	ldr	r3, [r7, #0]
    48c6:	7c9b      	ldrb	r3, [r3, #18]
    48c8:	2b00      	cmp	r3, #0
    48ca:	d004      	beq.n	48d6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    48cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    48ce:	2280      	movs	r2, #128	; 0x80
    48d0:	0292      	lsls	r2, r2, #10
    48d2:	4313      	orrs	r3, r2
    48d4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    48d6:	683b      	ldr	r3, [r7, #0]
    48d8:	7cdb      	ldrb	r3, [r3, #19]
    48da:	2b00      	cmp	r3, #0
    48dc:	d004      	beq.n	48e8 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    48de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    48e0:	2280      	movs	r2, #128	; 0x80
    48e2:	0092      	lsls	r2, r2, #2
    48e4:	4313      	orrs	r3, r2
    48e6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    48e8:	683b      	ldr	r3, [r7, #0]
    48ea:	7d1b      	ldrb	r3, [r3, #20]
    48ec:	2b00      	cmp	r3, #0
    48ee:	d004      	beq.n	48fa <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    48f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    48f2:	2280      	movs	r2, #128	; 0x80
    48f4:	0192      	lsls	r2, r2, #6
    48f6:	4313      	orrs	r3, r2
    48f8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    48fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48fc:	681a      	ldr	r2, [r3, #0]
    48fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4900:	431a      	orrs	r2, r3
    4902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4904:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    4906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4908:	685a      	ldr	r2, [r3, #4]
    490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    490c:	431a      	orrs	r2, r3
    490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4910:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4912:	2300      	movs	r3, #0
}
    4914:	0018      	movs	r0, r3
    4916:	46bd      	mov	sp, r7
    4918:	b013      	add	sp, #76	; 0x4c
    491a:	bd90      	pop	{r4, r7, pc}
    491c:	0000421d 	.word	0x0000421d
    4920:	00003ebd 	.word	0x00003ebd
    4924:	00006e79 	.word	0x00006e79
    4928:	00004079 	.word	0x00004079
    492c:	00006cb1 	.word	0x00006cb1
    4930:	00003bf3 	.word	0x00003bf3
    4934:	00004391 	.word	0x00004391

00004938 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4938:	b590      	push	{r4, r7, lr}
    493a:	b08b      	sub	sp, #44	; 0x2c
    493c:	af00      	add	r7, sp, #0
    493e:	60f8      	str	r0, [r7, #12]
    4940:	60b9      	str	r1, [r7, #8]
    4942:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4944:	68fb      	ldr	r3, [r7, #12]
    4946:	68ba      	ldr	r2, [r7, #8]
    4948:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    494a:	68fb      	ldr	r3, [r7, #12]
    494c:	681b      	ldr	r3, [r3, #0]
    494e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4950:	6a3b      	ldr	r3, [r7, #32]
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	2202      	movs	r2, #2
    4956:	4013      	ands	r3, r2
    4958:	d001      	beq.n	495e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    495a:	231c      	movs	r3, #28
    495c:	e09c      	b.n	4a98 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    495e:	6a3b      	ldr	r3, [r7, #32]
    4960:	681b      	ldr	r3, [r3, #0]
    4962:	2201      	movs	r2, #1
    4964:	4013      	ands	r3, r2
    4966:	d001      	beq.n	496c <spi_init+0x34>
		return STATUS_BUSY;
    4968:	2305      	movs	r3, #5
    496a:	e095      	b.n	4a98 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    496c:	68fb      	ldr	r3, [r7, #12]
    496e:	681b      	ldr	r3, [r3, #0]
    4970:	0018      	movs	r0, r3
    4972:	4b4b      	ldr	r3, [pc, #300]	; (4aa0 <spi_init+0x168>)
    4974:	4798      	blx	r3
    4976:	0003      	movs	r3, r0
    4978:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    497a:	69fb      	ldr	r3, [r7, #28]
    497c:	3302      	adds	r3, #2
    497e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4980:	69fb      	ldr	r3, [r7, #28]
    4982:	3314      	adds	r3, #20
    4984:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4986:	2201      	movs	r2, #1
    4988:	69bb      	ldr	r3, [r7, #24]
    498a:	409a      	lsls	r2, r3
    498c:	0013      	movs	r3, r2
    498e:	0019      	movs	r1, r3
    4990:	2002      	movs	r0, #2
    4992:	4b44      	ldr	r3, [pc, #272]	; (4aa4 <spi_init+0x16c>)
    4994:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4996:	2310      	movs	r3, #16
    4998:	18fb      	adds	r3, r7, r3
    499a:	0018      	movs	r0, r3
    499c:	4b42      	ldr	r3, [pc, #264]	; (4aa8 <spi_init+0x170>)
    499e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    49a0:	687b      	ldr	r3, [r7, #4]
    49a2:	2224      	movs	r2, #36	; 0x24
    49a4:	5c9a      	ldrb	r2, [r3, r2]
    49a6:	2310      	movs	r3, #16
    49a8:	18fb      	adds	r3, r7, r3
    49aa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    49ac:	697b      	ldr	r3, [r7, #20]
    49ae:	b2db      	uxtb	r3, r3
    49b0:	2210      	movs	r2, #16
    49b2:	18ba      	adds	r2, r7, r2
    49b4:	0011      	movs	r1, r2
    49b6:	0018      	movs	r0, r3
    49b8:	4b3c      	ldr	r3, [pc, #240]	; (4aac <spi_init+0x174>)
    49ba:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    49bc:	697b      	ldr	r3, [r7, #20]
    49be:	b2db      	uxtb	r3, r3
    49c0:	0018      	movs	r0, r3
    49c2:	4b3b      	ldr	r3, [pc, #236]	; (4ab0 <spi_init+0x178>)
    49c4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    49c6:	687b      	ldr	r3, [r7, #4]
    49c8:	2224      	movs	r2, #36	; 0x24
    49ca:	5c9b      	ldrb	r3, [r3, r2]
    49cc:	2100      	movs	r1, #0
    49ce:	0018      	movs	r0, r3
    49d0:	4b38      	ldr	r3, [pc, #224]	; (4ab4 <spi_init+0x17c>)
    49d2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	781b      	ldrb	r3, [r3, #0]
    49d8:	2b01      	cmp	r3, #1
    49da:	d105      	bne.n	49e8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    49dc:	6a3b      	ldr	r3, [r7, #32]
    49de:	681b      	ldr	r3, [r3, #0]
    49e0:	220c      	movs	r2, #12
    49e2:	431a      	orrs	r2, r3
    49e4:	6a3b      	ldr	r3, [r7, #32]
    49e6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    49e8:	2327      	movs	r3, #39	; 0x27
    49ea:	18fb      	adds	r3, r7, r3
    49ec:	2200      	movs	r2, #0
    49ee:	701a      	strb	r2, [r3, #0]
    49f0:	e010      	b.n	4a14 <spi_init+0xdc>
		module->callback[i]        = NULL;
    49f2:	2327      	movs	r3, #39	; 0x27
    49f4:	18fb      	adds	r3, r7, r3
    49f6:	781b      	ldrb	r3, [r3, #0]
    49f8:	68fa      	ldr	r2, [r7, #12]
    49fa:	3302      	adds	r3, #2
    49fc:	009b      	lsls	r3, r3, #2
    49fe:	18d3      	adds	r3, r2, r3
    4a00:	3304      	adds	r3, #4
    4a02:	2200      	movs	r2, #0
    4a04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4a06:	2327      	movs	r3, #39	; 0x27
    4a08:	18fb      	adds	r3, r7, r3
    4a0a:	781a      	ldrb	r2, [r3, #0]
    4a0c:	2327      	movs	r3, #39	; 0x27
    4a0e:	18fb      	adds	r3, r7, r3
    4a10:	3201      	adds	r2, #1
    4a12:	701a      	strb	r2, [r3, #0]
    4a14:	2327      	movs	r3, #39	; 0x27
    4a16:	18fb      	adds	r3, r7, r3
    4a18:	781b      	ldrb	r3, [r3, #0]
    4a1a:	2b06      	cmp	r3, #6
    4a1c:	d9e9      	bls.n	49f2 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    4a1e:	68fb      	ldr	r3, [r7, #12]
    4a20:	2200      	movs	r2, #0
    4a22:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4a24:	68fb      	ldr	r3, [r7, #12]
    4a26:	2200      	movs	r2, #0
    4a28:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4a2a:	68fb      	ldr	r3, [r7, #12]
    4a2c:	2200      	movs	r2, #0
    4a2e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4a30:	68fb      	ldr	r3, [r7, #12]
    4a32:	2200      	movs	r2, #0
    4a34:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    4a36:	68fb      	ldr	r3, [r7, #12]
    4a38:	2236      	movs	r2, #54	; 0x36
    4a3a:	2100      	movs	r1, #0
    4a3c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    4a3e:	68fb      	ldr	r3, [r7, #12]
    4a40:	2237      	movs	r2, #55	; 0x37
    4a42:	2100      	movs	r1, #0
    4a44:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    4a46:	68fb      	ldr	r3, [r7, #12]
    4a48:	2238      	movs	r2, #56	; 0x38
    4a4a:	2100      	movs	r1, #0
    4a4c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    4a4e:	68fb      	ldr	r3, [r7, #12]
    4a50:	2203      	movs	r2, #3
    4a52:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    4a54:	68fb      	ldr	r3, [r7, #12]
    4a56:	2200      	movs	r2, #0
    4a58:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4a5a:	68fb      	ldr	r3, [r7, #12]
    4a5c:	681b      	ldr	r3, [r3, #0]
    4a5e:	2213      	movs	r2, #19
    4a60:	18bc      	adds	r4, r7, r2
    4a62:	0018      	movs	r0, r3
    4a64:	4b0e      	ldr	r3, [pc, #56]	; (4aa0 <spi_init+0x168>)
    4a66:	4798      	blx	r3
    4a68:	0003      	movs	r3, r0
    4a6a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4a6c:	4a12      	ldr	r2, [pc, #72]	; (4ab8 <spi_init+0x180>)
    4a6e:	2313      	movs	r3, #19
    4a70:	18fb      	adds	r3, r7, r3
    4a72:	781b      	ldrb	r3, [r3, #0]
    4a74:	0011      	movs	r1, r2
    4a76:	0018      	movs	r0, r3
    4a78:	4b10      	ldr	r3, [pc, #64]	; (4abc <spi_init+0x184>)
    4a7a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4a7c:	2313      	movs	r3, #19
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	781a      	ldrb	r2, [r3, #0]
    4a82:	4b0f      	ldr	r3, [pc, #60]	; (4ac0 <spi_init+0x188>)
    4a84:	0092      	lsls	r2, r2, #2
    4a86:	68f9      	ldr	r1, [r7, #12]
    4a88:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    4a8a:	687a      	ldr	r2, [r7, #4]
    4a8c:	68fb      	ldr	r3, [r7, #12]
    4a8e:	0011      	movs	r1, r2
    4a90:	0018      	movs	r0, r3
    4a92:	4b0c      	ldr	r3, [pc, #48]	; (4ac4 <spi_init+0x18c>)
    4a94:	4798      	blx	r3
    4a96:	0003      	movs	r3, r0
}
    4a98:	0018      	movs	r0, r3
    4a9a:	46bd      	mov	sp, r7
    4a9c:	b00b      	add	sp, #44	; 0x2c
    4a9e:	bd90      	pop	{r4, r7, pc}
    4aa0:	00004079 	.word	0x00004079
    4aa4:	00004335 	.word	0x00004335
    4aa8:	0000431d 	.word	0x0000431d
    4aac:	00006b8d 	.word	0x00006b8d
    4ab0:	00006bd1 	.word	0x00006bd1
    4ab4:	00003e31 	.word	0x00003e31
    4ab8:	00004f91 	.word	0x00004f91
    4abc:	000040dd 	.word	0x000040dd
    4ac0:	200009d4 	.word	0x200009d4
    4ac4:	00004729 	.word	0x00004729

00004ac8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4ac8:	b590      	push	{r4, r7, lr}
    4aca:	b087      	sub	sp, #28
    4acc:	af00      	add	r7, sp, #0
    4ace:	60f8      	str	r0, [r7, #12]
    4ad0:	60b9      	str	r1, [r7, #8]
    4ad2:	0019      	movs	r1, r3
    4ad4:	1dbb      	adds	r3, r7, #6
    4ad6:	801a      	strh	r2, [r3, #0]
    4ad8:	1d3b      	adds	r3, r7, #4
    4ada:	1c0a      	adds	r2, r1, #0
    4adc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4ade:	68fb      	ldr	r3, [r7, #12]
    4ae0:	2238      	movs	r2, #56	; 0x38
    4ae2:	5c9b      	ldrb	r3, [r3, r2]
    4ae4:	b2db      	uxtb	r3, r3
    4ae6:	2b05      	cmp	r3, #5
    4ae8:	d101      	bne.n	4aee <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4aea:	2305      	movs	r3, #5
    4aec:	e07a      	b.n	4be4 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    4aee:	1dbb      	adds	r3, r7, #6
    4af0:	881b      	ldrh	r3, [r3, #0]
    4af2:	2b00      	cmp	r3, #0
    4af4:	d101      	bne.n	4afa <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    4af6:	2317      	movs	r3, #23
    4af8:	e074      	b.n	4be4 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    4afa:	68fb      	ldr	r3, [r7, #12]
    4afc:	79db      	ldrb	r3, [r3, #7]
    4afe:	2201      	movs	r2, #1
    4b00:	4053      	eors	r3, r2
    4b02:	b2db      	uxtb	r3, r3
    4b04:	2b00      	cmp	r3, #0
    4b06:	d001      	beq.n	4b0c <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    4b08:	231c      	movs	r3, #28
    4b0a:	e06b      	b.n	4be4 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    4b0c:	2316      	movs	r3, #22
    4b0e:	18fb      	adds	r3, r7, r3
    4b10:	2200      	movs	r2, #0
    4b12:	801a      	strh	r2, [r3, #0]

	while (length--) {
    4b14:	e05e      	b.n	4bd4 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    4b16:	68fb      	ldr	r3, [r7, #12]
    4b18:	795b      	ldrb	r3, [r3, #5]
    4b1a:	2b01      	cmp	r3, #1
    4b1c:	d112      	bne.n	4b44 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	68fb      	ldr	r3, [r7, #12]
    4b22:	0018      	movs	r0, r3
    4b24:	4b31      	ldr	r3, [pc, #196]	; (4bec <spi_read_buffer_wait+0x124>)
    4b26:	4798      	blx	r3
    4b28:	0003      	movs	r3, r0
    4b2a:	001a      	movs	r2, r3
    4b2c:	2301      	movs	r3, #1
    4b2e:	4053      	eors	r3, r2
    4b30:	b2db      	uxtb	r3, r3
    4b32:	2b00      	cmp	r3, #0
    4b34:	d1f4      	bne.n	4b20 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    4b36:	1d3b      	adds	r3, r7, #4
    4b38:	881a      	ldrh	r2, [r3, #0]
    4b3a:	68fb      	ldr	r3, [r7, #12]
    4b3c:	0011      	movs	r1, r2
    4b3e:	0018      	movs	r0, r3
    4b40:	4b2b      	ldr	r3, [pc, #172]	; (4bf0 <spi_read_buffer_wait+0x128>)
    4b42:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4b44:	46c0      	nop			; (mov r8, r8)
    4b46:	68fb      	ldr	r3, [r7, #12]
    4b48:	0018      	movs	r0, r3
    4b4a:	4b2a      	ldr	r3, [pc, #168]	; (4bf4 <spi_read_buffer_wait+0x12c>)
    4b4c:	4798      	blx	r3
    4b4e:	0003      	movs	r3, r0
    4b50:	001a      	movs	r2, r3
    4b52:	2301      	movs	r3, #1
    4b54:	4053      	eors	r3, r2
    4b56:	b2db      	uxtb	r3, r3
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d1f4      	bne.n	4b46 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    4b5c:	2312      	movs	r3, #18
    4b5e:	18fb      	adds	r3, r7, r3
    4b60:	2200      	movs	r2, #0
    4b62:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    4b64:	2315      	movs	r3, #21
    4b66:	18fc      	adds	r4, r7, r3
    4b68:	2312      	movs	r3, #18
    4b6a:	18fa      	adds	r2, r7, r3
    4b6c:	68fb      	ldr	r3, [r7, #12]
    4b6e:	0011      	movs	r1, r2
    4b70:	0018      	movs	r0, r3
    4b72:	4b21      	ldr	r3, [pc, #132]	; (4bf8 <spi_read_buffer_wait+0x130>)
    4b74:	4798      	blx	r3
    4b76:	0003      	movs	r3, r0
    4b78:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4b7a:	2315      	movs	r3, #21
    4b7c:	18fb      	adds	r3, r7, r3
    4b7e:	781b      	ldrb	r3, [r3, #0]
    4b80:	2b00      	cmp	r3, #0
    4b82:	d003      	beq.n	4b8c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    4b84:	2315      	movs	r3, #21
    4b86:	18fb      	adds	r3, r7, r3
    4b88:	781b      	ldrb	r3, [r3, #0]
    4b8a:	e02b      	b.n	4be4 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4b8c:	2316      	movs	r3, #22
    4b8e:	18fb      	adds	r3, r7, r3
    4b90:	881b      	ldrh	r3, [r3, #0]
    4b92:	2216      	movs	r2, #22
    4b94:	18ba      	adds	r2, r7, r2
    4b96:	1c59      	adds	r1, r3, #1
    4b98:	8011      	strh	r1, [r2, #0]
    4b9a:	001a      	movs	r2, r3
    4b9c:	68bb      	ldr	r3, [r7, #8]
    4b9e:	189b      	adds	r3, r3, r2
    4ba0:	2212      	movs	r2, #18
    4ba2:	18ba      	adds	r2, r7, r2
    4ba4:	8812      	ldrh	r2, [r2, #0]
    4ba6:	b2d2      	uxtb	r2, r2
    4ba8:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4baa:	68fb      	ldr	r3, [r7, #12]
    4bac:	799b      	ldrb	r3, [r3, #6]
    4bae:	2b01      	cmp	r3, #1
    4bb0:	d110      	bne.n	4bd4 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    4bb2:	2316      	movs	r3, #22
    4bb4:	18fb      	adds	r3, r7, r3
    4bb6:	881b      	ldrh	r3, [r3, #0]
    4bb8:	2216      	movs	r2, #22
    4bba:	18ba      	adds	r2, r7, r2
    4bbc:	1c59      	adds	r1, r3, #1
    4bbe:	8011      	strh	r1, [r2, #0]
    4bc0:	001a      	movs	r2, r3
    4bc2:	68bb      	ldr	r3, [r7, #8]
    4bc4:	189b      	adds	r3, r3, r2
    4bc6:	2212      	movs	r2, #18
    4bc8:	18ba      	adds	r2, r7, r2
    4bca:	8812      	ldrh	r2, [r2, #0]
    4bcc:	0a12      	lsrs	r2, r2, #8
    4bce:	b292      	uxth	r2, r2
    4bd0:	b2d2      	uxtb	r2, r2
    4bd2:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4bd4:	1dbb      	adds	r3, r7, #6
    4bd6:	881b      	ldrh	r3, [r3, #0]
    4bd8:	1dba      	adds	r2, r7, #6
    4bda:	1e59      	subs	r1, r3, #1
    4bdc:	8011      	strh	r1, [r2, #0]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d199      	bne.n	4b16 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    4be2:	2300      	movs	r3, #0
}
    4be4:	0018      	movs	r0, r3
    4be6:	46bd      	mov	sp, r7
    4be8:	b007      	add	sp, #28
    4bea:	bd90      	pop	{r4, r7, pc}
    4bec:	00004501 	.word	0x00004501
    4bf0:	00004551 	.word	0x00004551
    4bf4:	00004529 	.word	0x00004529
    4bf8:	00004599 	.word	0x00004599

00004bfc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4bfc:	b580      	push	{r7, lr}
    4bfe:	b086      	sub	sp, #24
    4c00:	af00      	add	r7, sp, #0
    4c02:	60f8      	str	r0, [r7, #12]
    4c04:	60b9      	str	r1, [r7, #8]
    4c06:	1dfb      	adds	r3, r7, #7
    4c08:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	795b      	ldrb	r3, [r3, #5]
    4c0e:	2b01      	cmp	r3, #1
    4c10:	d001      	beq.n	4c16 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    4c12:	2315      	movs	r3, #21
    4c14:	e05c      	b.n	4cd0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4c16:	68fb      	ldr	r3, [r7, #12]
    4c18:	7a1b      	ldrb	r3, [r3, #8]
    4c1a:	2201      	movs	r2, #1
    4c1c:	4053      	eors	r3, r2
    4c1e:	b2db      	uxtb	r3, r3
    4c20:	2b00      	cmp	r3, #0
    4c22:	d054      	beq.n	4cce <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    4c24:	1dfb      	adds	r3, r7, #7
    4c26:	781b      	ldrb	r3, [r3, #0]
    4c28:	2b00      	cmp	r3, #0
    4c2a:	d04a      	beq.n	4cc2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    4c2c:	68bb      	ldr	r3, [r7, #8]
    4c2e:	785b      	ldrb	r3, [r3, #1]
    4c30:	2b00      	cmp	r3, #0
    4c32:	d03f      	beq.n	4cb4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4c34:	68fb      	ldr	r3, [r7, #12]
    4c36:	0018      	movs	r0, r3
    4c38:	4b27      	ldr	r3, [pc, #156]	; (4cd8 <spi_select_slave+0xdc>)
    4c3a:	4798      	blx	r3
    4c3c:	0003      	movs	r3, r0
    4c3e:	001a      	movs	r2, r3
    4c40:	2301      	movs	r3, #1
    4c42:	4053      	eors	r3, r2
    4c44:	b2db      	uxtb	r3, r3
    4c46:	2b00      	cmp	r3, #0
    4c48:	d007      	beq.n	4c5a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4c4a:	68bb      	ldr	r3, [r7, #8]
    4c4c:	781b      	ldrb	r3, [r3, #0]
    4c4e:	2101      	movs	r1, #1
    4c50:	0018      	movs	r0, r3
    4c52:	4b22      	ldr	r3, [pc, #136]	; (4cdc <spi_select_slave+0xe0>)
    4c54:	4798      	blx	r3
					return STATUS_BUSY;
    4c56:	2305      	movs	r3, #5
    4c58:	e03a      	b.n	4cd0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4c5a:	68bb      	ldr	r3, [r7, #8]
    4c5c:	781b      	ldrb	r3, [r3, #0]
    4c5e:	2100      	movs	r1, #0
    4c60:	0018      	movs	r0, r3
    4c62:	4b1e      	ldr	r3, [pc, #120]	; (4cdc <spi_select_slave+0xe0>)
    4c64:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4c66:	68bb      	ldr	r3, [r7, #8]
    4c68:	789b      	ldrb	r3, [r3, #2]
    4c6a:	b29a      	uxth	r2, r3
    4c6c:	68fb      	ldr	r3, [r7, #12]
    4c6e:	0011      	movs	r1, r2
    4c70:	0018      	movs	r0, r3
    4c72:	4b1b      	ldr	r3, [pc, #108]	; (4ce0 <spi_select_slave+0xe4>)
    4c74:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4c76:	68fb      	ldr	r3, [r7, #12]
    4c78:	79db      	ldrb	r3, [r3, #7]
    4c7a:	2201      	movs	r2, #1
    4c7c:	4053      	eors	r3, r2
    4c7e:	b2db      	uxtb	r3, r3
    4c80:	2b00      	cmp	r3, #0
    4c82:	d024      	beq.n	4cce <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4c84:	46c0      	nop			; (mov r8, r8)
    4c86:	68fb      	ldr	r3, [r7, #12]
    4c88:	0018      	movs	r0, r3
    4c8a:	4b16      	ldr	r3, [pc, #88]	; (4ce4 <spi_select_slave+0xe8>)
    4c8c:	4798      	blx	r3
    4c8e:	0003      	movs	r3, r0
    4c90:	001a      	movs	r2, r3
    4c92:	2301      	movs	r3, #1
    4c94:	4053      	eors	r3, r2
    4c96:	b2db      	uxtb	r3, r3
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d1f4      	bne.n	4c86 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4c9c:	2316      	movs	r3, #22
    4c9e:	18fb      	adds	r3, r7, r3
    4ca0:	2200      	movs	r2, #0
    4ca2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4ca4:	2316      	movs	r3, #22
    4ca6:	18fa      	adds	r2, r7, r3
    4ca8:	68fb      	ldr	r3, [r7, #12]
    4caa:	0011      	movs	r1, r2
    4cac:	0018      	movs	r0, r3
    4cae:	4b0e      	ldr	r3, [pc, #56]	; (4ce8 <spi_select_slave+0xec>)
    4cb0:	4798      	blx	r3
    4cb2:	e00c      	b.n	4cce <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4cb4:	68bb      	ldr	r3, [r7, #8]
    4cb6:	781b      	ldrb	r3, [r3, #0]
    4cb8:	2100      	movs	r1, #0
    4cba:	0018      	movs	r0, r3
    4cbc:	4b07      	ldr	r3, [pc, #28]	; (4cdc <spi_select_slave+0xe0>)
    4cbe:	4798      	blx	r3
    4cc0:	e005      	b.n	4cce <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4cc2:	68bb      	ldr	r3, [r7, #8]
    4cc4:	781b      	ldrb	r3, [r3, #0]
    4cc6:	2101      	movs	r1, #1
    4cc8:	0018      	movs	r0, r3
    4cca:	4b04      	ldr	r3, [pc, #16]	; (4cdc <spi_select_slave+0xe0>)
    4ccc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4cce:	2300      	movs	r3, #0
}
    4cd0:	0018      	movs	r0, r3
    4cd2:	46bd      	mov	sp, r7
    4cd4:	b006      	add	sp, #24
    4cd6:	bd80      	pop	{r7, pc}
    4cd8:	00004501 	.word	0x00004501
    4cdc:	000042c9 	.word	0x000042c9
    4ce0:	00004551 	.word	0x00004551
    4ce4:	00004529 	.word	0x00004529
    4ce8:	00004599 	.word	0x00004599

00004cec <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4cec:	b580      	push	{r7, lr}
    4cee:	b086      	sub	sp, #24
    4cf0:	af00      	add	r7, sp, #0
    4cf2:	60f8      	str	r0, [r7, #12]
    4cf4:	60b9      	str	r1, [r7, #8]
    4cf6:	1dbb      	adds	r3, r7, #6
    4cf8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4cfa:	68fb      	ldr	r3, [r7, #12]
    4cfc:	2238      	movs	r2, #56	; 0x38
    4cfe:	5c9b      	ldrb	r3, [r3, r2]
    4d00:	b2db      	uxtb	r3, r3
    4d02:	2b05      	cmp	r3, #5
    4d04:	d101      	bne.n	4d0a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4d06:	2305      	movs	r3, #5
    4d08:	e087      	b.n	4e1a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4d0a:	1dbb      	adds	r3, r7, #6
    4d0c:	881b      	ldrh	r3, [r3, #0]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d101      	bne.n	4d16 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    4d12:	2317      	movs	r3, #23
    4d14:	e081      	b.n	4e1a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4d16:	2316      	movs	r3, #22
    4d18:	18fb      	adds	r3, r7, r3
    4d1a:	2200      	movs	r2, #0
    4d1c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4d1e:	2314      	movs	r3, #20
    4d20:	18fb      	adds	r3, r7, r3
    4d22:	1dba      	adds	r2, r7, #6
    4d24:	8812      	ldrh	r2, [r2, #0]
    4d26:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4d28:	e05f      	b.n	4dea <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	68fb      	ldr	r3, [r7, #12]
    4d2e:	0018      	movs	r0, r3
    4d30:	4b3c      	ldr	r3, [pc, #240]	; (4e24 <spi_write_buffer_wait+0x138>)
    4d32:	4798      	blx	r3
    4d34:	0003      	movs	r3, r0
    4d36:	001a      	movs	r2, r3
    4d38:	2301      	movs	r3, #1
    4d3a:	4053      	eors	r3, r2
    4d3c:	b2db      	uxtb	r3, r3
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d1f4      	bne.n	4d2c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4d42:	2316      	movs	r3, #22
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	881b      	ldrh	r3, [r3, #0]
    4d48:	2216      	movs	r2, #22
    4d4a:	18ba      	adds	r2, r7, r2
    4d4c:	1c59      	adds	r1, r3, #1
    4d4e:	8011      	strh	r1, [r2, #0]
    4d50:	001a      	movs	r2, r3
    4d52:	68bb      	ldr	r3, [r7, #8]
    4d54:	189b      	adds	r3, r3, r2
    4d56:	781a      	ldrb	r2, [r3, #0]
    4d58:	2312      	movs	r3, #18
    4d5a:	18fb      	adds	r3, r7, r3
    4d5c:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d5e:	68fb      	ldr	r3, [r7, #12]
    4d60:	799b      	ldrb	r3, [r3, #6]
    4d62:	2b01      	cmp	r3, #1
    4d64:	d115      	bne.n	4d92 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4d66:	2316      	movs	r3, #22
    4d68:	18fb      	adds	r3, r7, r3
    4d6a:	881b      	ldrh	r3, [r3, #0]
    4d6c:	2216      	movs	r2, #22
    4d6e:	18ba      	adds	r2, r7, r2
    4d70:	1c59      	adds	r1, r3, #1
    4d72:	8011      	strh	r1, [r2, #0]
    4d74:	001a      	movs	r2, r3
    4d76:	68bb      	ldr	r3, [r7, #8]
    4d78:	189b      	adds	r3, r3, r2
    4d7a:	781b      	ldrb	r3, [r3, #0]
    4d7c:	021b      	lsls	r3, r3, #8
    4d7e:	b21a      	sxth	r2, r3
    4d80:	2312      	movs	r3, #18
    4d82:	18fb      	adds	r3, r7, r3
    4d84:	2100      	movs	r1, #0
    4d86:	5e5b      	ldrsh	r3, [r3, r1]
    4d88:	4313      	orrs	r3, r2
    4d8a:	b21a      	sxth	r2, r3
    4d8c:	2312      	movs	r3, #18
    4d8e:	18fb      	adds	r3, r7, r3
    4d90:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    4d92:	2312      	movs	r3, #18
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	881a      	ldrh	r2, [r3, #0]
    4d98:	68fb      	ldr	r3, [r7, #12]
    4d9a:	0011      	movs	r1, r2
    4d9c:	0018      	movs	r0, r3
    4d9e:	4b22      	ldr	r3, [pc, #136]	; (4e28 <spi_write_buffer_wait+0x13c>)
    4da0:	4798      	blx	r3

		if (module->receiver_enabled) {
    4da2:	68fb      	ldr	r3, [r7, #12]
    4da4:	79db      	ldrb	r3, [r3, #7]
    4da6:	2214      	movs	r2, #20
    4da8:	18ba      	adds	r2, r7, r2
    4daa:	2114      	movs	r1, #20
    4dac:	1879      	adds	r1, r7, r1
    4dae:	8809      	ldrh	r1, [r1, #0]
    4db0:	8011      	strh	r1, [r2, #0]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d019      	beq.n	4dea <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4db6:	46c0      	nop			; (mov r8, r8)
    4db8:	68fb      	ldr	r3, [r7, #12]
    4dba:	0018      	movs	r0, r3
    4dbc:	4b1b      	ldr	r3, [pc, #108]	; (4e2c <spi_write_buffer_wait+0x140>)
    4dbe:	4798      	blx	r3
    4dc0:	0003      	movs	r3, r0
    4dc2:	001a      	movs	r2, r3
    4dc4:	2301      	movs	r3, #1
    4dc6:	4053      	eors	r3, r2
    4dc8:	b2db      	uxtb	r3, r3
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d1f4      	bne.n	4db8 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4dce:	2310      	movs	r3, #16
    4dd0:	18fa      	adds	r2, r7, r3
    4dd2:	68fb      	ldr	r3, [r7, #12]
    4dd4:	0011      	movs	r1, r2
    4dd6:	0018      	movs	r0, r3
    4dd8:	4b15      	ldr	r3, [pc, #84]	; (4e30 <spi_write_buffer_wait+0x144>)
    4dda:	4798      	blx	r3
			flush_length--;
    4ddc:	2314      	movs	r3, #20
    4dde:	18fb      	adds	r3, r7, r3
    4de0:	881a      	ldrh	r2, [r3, #0]
    4de2:	2314      	movs	r3, #20
    4de4:	18fb      	adds	r3, r7, r3
    4de6:	3a01      	subs	r2, #1
    4de8:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4dea:	1dbb      	adds	r3, r7, #6
    4dec:	881b      	ldrh	r3, [r3, #0]
    4dee:	1dba      	adds	r2, r7, #6
    4df0:	1e59      	subs	r1, r3, #1
    4df2:	8011      	strh	r1, [r2, #0]
    4df4:	2b00      	cmp	r3, #0
    4df6:	d198      	bne.n	4d2a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4df8:	68fb      	ldr	r3, [r7, #12]
    4dfa:	795b      	ldrb	r3, [r3, #5]
    4dfc:	2b01      	cmp	r3, #1
    4dfe:	d10b      	bne.n	4e18 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4e00:	46c0      	nop			; (mov r8, r8)
    4e02:	68fb      	ldr	r3, [r7, #12]
    4e04:	0018      	movs	r0, r3
    4e06:	4b0b      	ldr	r3, [pc, #44]	; (4e34 <spi_write_buffer_wait+0x148>)
    4e08:	4798      	blx	r3
    4e0a:	0003      	movs	r3, r0
    4e0c:	001a      	movs	r2, r3
    4e0e:	2301      	movs	r3, #1
    4e10:	4053      	eors	r3, r2
    4e12:	b2db      	uxtb	r3, r3
    4e14:	2b00      	cmp	r3, #0
    4e16:	d1f4      	bne.n	4e02 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4e18:	2300      	movs	r3, #0
}
    4e1a:	0018      	movs	r0, r3
    4e1c:	46bd      	mov	sp, r7
    4e1e:	b006      	add	sp, #24
    4e20:	bd80      	pop	{r7, pc}
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	00004501 	.word	0x00004501
    4e28:	00004551 	.word	0x00004551
    4e2c:	00004529 	.word	0x00004529
    4e30:	00004599 	.word	0x00004599
    4e34:	000044d9 	.word	0x000044d9

00004e38 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4e38:	b580      	push	{r7, lr}
    4e3a:	b084      	sub	sp, #16
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e4a:	781b      	ldrb	r3, [r3, #0]
    4e4c:	b2da      	uxtb	r2, r3
    4e4e:	230e      	movs	r3, #14
    4e50:	18fb      	adds	r3, r7, r3
    4e52:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e58:	1c5a      	adds	r2, r3, #1
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e5e:	687b      	ldr	r3, [r7, #4]
    4e60:	799b      	ldrb	r3, [r3, #6]
    4e62:	2b01      	cmp	r3, #1
    4e64:	d113      	bne.n	4e8e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e6a:	781b      	ldrb	r3, [r3, #0]
    4e6c:	b2db      	uxtb	r3, r3
    4e6e:	021b      	lsls	r3, r3, #8
    4e70:	b21a      	sxth	r2, r3
    4e72:	230e      	movs	r3, #14
    4e74:	18fb      	adds	r3, r7, r3
    4e76:	2100      	movs	r1, #0
    4e78:	5e5b      	ldrsh	r3, [r3, r1]
    4e7a:	4313      	orrs	r3, r2
    4e7c:	b21a      	sxth	r2, r3
    4e7e:	230e      	movs	r3, #14
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e88:	1c5a      	adds	r2, r3, #1
    4e8a:	687b      	ldr	r3, [r7, #4]
    4e8c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4e8e:	230e      	movs	r3, #14
    4e90:	18fb      	adds	r3, r7, r3
    4e92:	881b      	ldrh	r3, [r3, #0]
    4e94:	05db      	lsls	r3, r3, #23
    4e96:	0dda      	lsrs	r2, r3, #23
    4e98:	68bb      	ldr	r3, [r7, #8]
    4e9a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4ea0:	b29b      	uxth	r3, r3
    4ea2:	3b01      	subs	r3, #1
    4ea4:	b29a      	uxth	r2, r3
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	46bd      	mov	sp, r7
    4eae:	b004      	add	sp, #16
    4eb0:	bd80      	pop	{r7, pc}
	...

00004eb4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b084      	sub	sp, #16
    4eb8:	af00      	add	r7, sp, #0
    4eba:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4ec2:	4b08      	ldr	r3, [pc, #32]	; (4ee4 <_spi_write_dummy+0x30>)
    4ec4:	881b      	ldrh	r3, [r3, #0]
    4ec6:	001a      	movs	r2, r3
    4ec8:	68fb      	ldr	r3, [r7, #12]
    4eca:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4ed0:	b29b      	uxth	r3, r3
    4ed2:	3b01      	subs	r3, #1
    4ed4:	b29a      	uxth	r2, r3
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4eda:	46c0      	nop			; (mov r8, r8)
    4edc:	46bd      	mov	sp, r7
    4ede:	b004      	add	sp, #16
    4ee0:	bd80      	pop	{r7, pc}
    4ee2:	46c0      	nop			; (mov r8, r8)
    4ee4:	200009ec 	.word	0x200009ec

00004ee8 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4ee8:	b580      	push	{r7, lr}
    4eea:	b084      	sub	sp, #16
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	681b      	ldr	r3, [r3, #0]
    4ef4:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4ef6:	230a      	movs	r3, #10
    4ef8:	18fb      	adds	r3, r7, r3
    4efa:	2200      	movs	r2, #0
    4efc:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4efe:	68fb      	ldr	r3, [r7, #12]
    4f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f02:	230a      	movs	r3, #10
    4f04:	18fb      	adds	r3, r7, r3
    4f06:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4f0c:	b29b      	uxth	r3, r3
    4f0e:	3b01      	subs	r3, #1
    4f10:	b29a      	uxth	r2, r3
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	46bd      	mov	sp, r7
    4f1a:	b004      	add	sp, #16
    4f1c:	bd80      	pop	{r7, pc}

00004f1e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4f1e:	b580      	push	{r7, lr}
    4f20:	b084      	sub	sp, #16
    4f22:	af00      	add	r7, sp, #0
    4f24:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4f2c:	68fb      	ldr	r3, [r7, #12]
    4f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f30:	b29a      	uxth	r2, r3
    4f32:	230a      	movs	r3, #10
    4f34:	18fb      	adds	r3, r7, r3
    4f36:	05d2      	lsls	r2, r2, #23
    4f38:	0dd2      	lsrs	r2, r2, #23
    4f3a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f40:	220a      	movs	r2, #10
    4f42:	18ba      	adds	r2, r7, r2
    4f44:	8812      	ldrh	r2, [r2, #0]
    4f46:	b2d2      	uxtb	r2, r2
    4f48:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4f4a:	687b      	ldr	r3, [r7, #4]
    4f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f4e:	1c5a      	adds	r2, r3, #1
    4f50:	687b      	ldr	r3, [r7, #4]
    4f52:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f54:	687b      	ldr	r3, [r7, #4]
    4f56:	799b      	ldrb	r3, [r3, #6]
    4f58:	2b01      	cmp	r3, #1
    4f5a:	d10d      	bne.n	4f78 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f60:	220a      	movs	r2, #10
    4f62:	18ba      	adds	r2, r7, r2
    4f64:	8812      	ldrh	r2, [r2, #0]
    4f66:	0a12      	lsrs	r2, r2, #8
    4f68:	b292      	uxth	r2, r2
    4f6a:	b2d2      	uxtb	r2, r2
    4f6c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4f6e:	687b      	ldr	r3, [r7, #4]
    4f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f72:	1c5a      	adds	r2, r3, #1
    4f74:	687b      	ldr	r3, [r7, #4]
    4f76:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4f78:	687b      	ldr	r3, [r7, #4]
    4f7a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4f7c:	b29b      	uxth	r3, r3
    4f7e:	3b01      	subs	r3, #1
    4f80:	b29a      	uxth	r2, r3
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4f86:	46c0      	nop			; (mov r8, r8)
    4f88:	46bd      	mov	sp, r7
    4f8a:	b004      	add	sp, #16
    4f8c:	bd80      	pop	{r7, pc}
	...

00004f90 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	b086      	sub	sp, #24
    4f94:	af00      	add	r7, sp, #0
    4f96:	0002      	movs	r2, r0
    4f98:	1dfb      	adds	r3, r7, #7
    4f9a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4f9c:	1dfb      	adds	r3, r7, #7
    4f9e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4fa0:	4b96      	ldr	r3, [pc, #600]	; (51fc <_spi_interrupt_handler+0x26c>)
    4fa2:	0092      	lsls	r2, r2, #2
    4fa4:	58d3      	ldr	r3, [r2, r3]
    4fa6:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4fa8:	697b      	ldr	r3, [r7, #20]
    4faa:	681b      	ldr	r3, [r3, #0]
    4fac:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4fae:	697b      	ldr	r3, [r7, #20]
    4fb0:	2237      	movs	r2, #55	; 0x37
    4fb2:	5c9a      	ldrb	r2, [r3, r2]
    4fb4:	697b      	ldr	r3, [r7, #20]
    4fb6:	2136      	movs	r1, #54	; 0x36
    4fb8:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4fba:	230f      	movs	r3, #15
    4fbc:	18fb      	adds	r3, r7, r3
    4fbe:	400a      	ands	r2, r1
    4fc0:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4fc2:	693b      	ldr	r3, [r7, #16]
    4fc4:	7e1b      	ldrb	r3, [r3, #24]
    4fc6:	b2da      	uxtb	r2, r3
    4fc8:	230c      	movs	r3, #12
    4fca:	18fb      	adds	r3, r7, r3
    4fcc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4fce:	693b      	ldr	r3, [r7, #16]
    4fd0:	7d9b      	ldrb	r3, [r3, #22]
    4fd2:	b2db      	uxtb	r3, r3
    4fd4:	b29a      	uxth	r2, r3
    4fd6:	230c      	movs	r3, #12
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	210c      	movs	r1, #12
    4fdc:	1879      	adds	r1, r7, r1
    4fde:	8809      	ldrh	r1, [r1, #0]
    4fe0:	400a      	ands	r2, r1
    4fe2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4fe4:	230c      	movs	r3, #12
    4fe6:	18fb      	adds	r3, r7, r3
    4fe8:	881b      	ldrh	r3, [r3, #0]
    4fea:	2201      	movs	r2, #1
    4fec:	4013      	ands	r3, r2
    4fee:	d038      	beq.n	5062 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4ff0:	697b      	ldr	r3, [r7, #20]
    4ff2:	795b      	ldrb	r3, [r3, #5]
    4ff4:	2b01      	cmp	r3, #1
    4ff6:	d110      	bne.n	501a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4ff8:	697b      	ldr	r3, [r7, #20]
    4ffa:	7a5b      	ldrb	r3, [r3, #9]
    4ffc:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4ffe:	2b00      	cmp	r3, #0
    5000:	d10b      	bne.n	501a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    5002:	697b      	ldr	r3, [r7, #20]
    5004:	0018      	movs	r0, r3
    5006:	4b7e      	ldr	r3, [pc, #504]	; (5200 <_spi_interrupt_handler+0x270>)
    5008:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    500a:	697b      	ldr	r3, [r7, #20]
    500c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    500e:	b29b      	uxth	r3, r3
    5010:	2b00      	cmp	r3, #0
    5012:	d102      	bne.n	501a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5014:	693b      	ldr	r3, [r7, #16]
    5016:	2201      	movs	r2, #1
    5018:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    501a:	697b      	ldr	r3, [r7, #20]
    501c:	795b      	ldrb	r3, [r3, #5]
		if (0
    501e:	2b01      	cmp	r3, #1
    5020:	d11f      	bne.n	5062 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    5022:	697b      	ldr	r3, [r7, #20]
    5024:	7a5b      	ldrb	r3, [r3, #9]
    5026:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    5028:	2b00      	cmp	r3, #0
    502a:	d01a      	beq.n	5062 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    502c:	697b      	ldr	r3, [r7, #20]
    502e:	0018      	movs	r0, r3
    5030:	4b74      	ldr	r3, [pc, #464]	; (5204 <_spi_interrupt_handler+0x274>)
    5032:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    5034:	697b      	ldr	r3, [r7, #20]
    5036:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5038:	b29b      	uxth	r3, r3
    503a:	2b00      	cmp	r3, #0
    503c:	d111      	bne.n	5062 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    503e:	693b      	ldr	r3, [r7, #16]
    5040:	2201      	movs	r2, #1
    5042:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    5044:	697b      	ldr	r3, [r7, #20]
    5046:	7a5b      	ldrb	r3, [r3, #9]
    5048:	b2db      	uxtb	r3, r3
    504a:	2b01      	cmp	r3, #1
    504c:	d109      	bne.n	5062 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    504e:	697b      	ldr	r3, [r7, #20]
    5050:	79db      	ldrb	r3, [r3, #7]
    5052:	2201      	movs	r2, #1
    5054:	4053      	eors	r3, r2
    5056:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    5058:	2b00      	cmp	r3, #0
    505a:	d002      	beq.n	5062 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    505c:	693b      	ldr	r3, [r7, #16]
    505e:	2202      	movs	r2, #2
    5060:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5062:	230c      	movs	r3, #12
    5064:	18fb      	adds	r3, r7, r3
    5066:	881b      	ldrh	r3, [r3, #0]
    5068:	2204      	movs	r2, #4
    506a:	4013      	ands	r3, r2
    506c:	d100      	bne.n	5070 <_spi_interrupt_handler+0xe0>
    506e:	e07e      	b.n	516e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5070:	693b      	ldr	r3, [r7, #16]
    5072:	8b5b      	ldrh	r3, [r3, #26]
    5074:	b29b      	uxth	r3, r3
    5076:	001a      	movs	r2, r3
    5078:	2304      	movs	r3, #4
    507a:	4013      	ands	r3, r2
    507c:	d022      	beq.n	50c4 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    507e:	697b      	ldr	r3, [r7, #20]
    5080:	7a5b      	ldrb	r3, [r3, #9]
    5082:	b2db      	uxtb	r3, r3
    5084:	2b01      	cmp	r3, #1
    5086:	d014      	beq.n	50b2 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5088:	697b      	ldr	r3, [r7, #20]
    508a:	2238      	movs	r2, #56	; 0x38
    508c:	211e      	movs	r1, #30
    508e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5090:	697b      	ldr	r3, [r7, #20]
    5092:	2203      	movs	r2, #3
    5094:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5096:	693b      	ldr	r3, [r7, #16]
    5098:	2205      	movs	r2, #5
    509a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    509c:	230f      	movs	r3, #15
    509e:	18fb      	adds	r3, r7, r3
    50a0:	781b      	ldrb	r3, [r3, #0]
    50a2:	2208      	movs	r2, #8
    50a4:	4013      	ands	r3, r2
    50a6:	d004      	beq.n	50b2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    50a8:	697b      	ldr	r3, [r7, #20]
    50aa:	699b      	ldr	r3, [r3, #24]
    50ac:	697a      	ldr	r2, [r7, #20]
    50ae:	0010      	movs	r0, r2
    50b0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    50b2:	693b      	ldr	r3, [r7, #16]
    50b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    50b6:	230a      	movs	r3, #10
    50b8:	18fb      	adds	r3, r7, r3
    50ba:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    50bc:	693b      	ldr	r3, [r7, #16]
    50be:	2204      	movs	r2, #4
    50c0:	835a      	strh	r2, [r3, #26]
    50c2:	e054      	b.n	516e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    50c4:	697b      	ldr	r3, [r7, #20]
    50c6:	7a5b      	ldrb	r3, [r3, #9]
    50c8:	b2db      	uxtb	r3, r3
    50ca:	2b01      	cmp	r3, #1
    50cc:	d11e      	bne.n	510c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    50ce:	697b      	ldr	r3, [r7, #20]
    50d0:	0018      	movs	r0, r3
    50d2:	4b4d      	ldr	r3, [pc, #308]	; (5208 <_spi_interrupt_handler+0x278>)
    50d4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    50d6:	697b      	ldr	r3, [r7, #20]
    50d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    50da:	b29b      	uxth	r3, r3
    50dc:	2b00      	cmp	r3, #0
    50de:	d146      	bne.n	516e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    50e0:	693b      	ldr	r3, [r7, #16]
    50e2:	2204      	movs	r2, #4
    50e4:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    50e6:	697b      	ldr	r3, [r7, #20]
    50e8:	2238      	movs	r2, #56	; 0x38
    50ea:	2100      	movs	r1, #0
    50ec:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    50ee:	697b      	ldr	r3, [r7, #20]
    50f0:	2203      	movs	r2, #3
    50f2:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    50f4:	230f      	movs	r3, #15
    50f6:	18fb      	adds	r3, r7, r3
    50f8:	781b      	ldrb	r3, [r3, #0]
    50fa:	2201      	movs	r2, #1
    50fc:	4013      	ands	r3, r2
    50fe:	d036      	beq.n	516e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    5100:	697b      	ldr	r3, [r7, #20]
    5102:	68db      	ldr	r3, [r3, #12]
    5104:	697a      	ldr	r2, [r7, #20]
    5106:	0010      	movs	r0, r2
    5108:	4798      	blx	r3
    510a:	e030      	b.n	516e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    510c:	697b      	ldr	r3, [r7, #20]
    510e:	0018      	movs	r0, r3
    5110:	4b3e      	ldr	r3, [pc, #248]	; (520c <_spi_interrupt_handler+0x27c>)
    5112:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    5114:	697b      	ldr	r3, [r7, #20]
    5116:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5118:	b29b      	uxth	r3, r3
    511a:	2b00      	cmp	r3, #0
    511c:	d127      	bne.n	516e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    511e:	697b      	ldr	r3, [r7, #20]
    5120:	2238      	movs	r2, #56	; 0x38
    5122:	2100      	movs	r1, #0
    5124:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5126:	693b      	ldr	r3, [r7, #16]
    5128:	2204      	movs	r2, #4
    512a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    512c:	697b      	ldr	r3, [r7, #20]
    512e:	7a5b      	ldrb	r3, [r3, #9]
    5130:	b2db      	uxtb	r3, r3
    5132:	2b02      	cmp	r3, #2
    5134:	d10b      	bne.n	514e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    5136:	230f      	movs	r3, #15
    5138:	18fb      	adds	r3, r7, r3
    513a:	781b      	ldrb	r3, [r3, #0]
    513c:	2204      	movs	r2, #4
    513e:	4013      	ands	r3, r2
    5140:	d015      	beq.n	516e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5142:	697b      	ldr	r3, [r7, #20]
    5144:	695b      	ldr	r3, [r3, #20]
    5146:	697a      	ldr	r2, [r7, #20]
    5148:	0010      	movs	r0, r2
    514a:	4798      	blx	r3
    514c:	e00f      	b.n	516e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    514e:	697b      	ldr	r3, [r7, #20]
    5150:	7a5b      	ldrb	r3, [r3, #9]
    5152:	b2db      	uxtb	r3, r3
    5154:	2b00      	cmp	r3, #0
    5156:	d10a      	bne.n	516e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    5158:	230f      	movs	r3, #15
    515a:	18fb      	adds	r3, r7, r3
    515c:	781b      	ldrb	r3, [r3, #0]
    515e:	2202      	movs	r2, #2
    5160:	4013      	ands	r3, r2
    5162:	d004      	beq.n	516e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5164:	697b      	ldr	r3, [r7, #20]
    5166:	691b      	ldr	r3, [r3, #16]
    5168:	697a      	ldr	r2, [r7, #20]
    516a:	0010      	movs	r0, r2
    516c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    516e:	230c      	movs	r3, #12
    5170:	18fb      	adds	r3, r7, r3
    5172:	881b      	ldrh	r3, [r3, #0]
    5174:	2202      	movs	r2, #2
    5176:	4013      	ands	r3, r2
    5178:	d024      	beq.n	51c4 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    517a:	697b      	ldr	r3, [r7, #20]
    517c:	795b      	ldrb	r3, [r3, #5]
    517e:	2b01      	cmp	r3, #1
    5180:	d120      	bne.n	51c4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5182:	697b      	ldr	r3, [r7, #20]
    5184:	7a5b      	ldrb	r3, [r3, #9]
    5186:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    5188:	2b01      	cmp	r3, #1
    518a:	d11b      	bne.n	51c4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    518c:	697b      	ldr	r3, [r7, #20]
    518e:	79db      	ldrb	r3, [r3, #7]
    5190:	2201      	movs	r2, #1
    5192:	4053      	eors	r3, r2
    5194:	b2db      	uxtb	r3, r3
    5196:	2b00      	cmp	r3, #0
    5198:	d014      	beq.n	51c4 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    519a:	693b      	ldr	r3, [r7, #16]
    519c:	2202      	movs	r2, #2
    519e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    51a0:	697b      	ldr	r3, [r7, #20]
    51a2:	2203      	movs	r2, #3
    51a4:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    51a6:	697b      	ldr	r3, [r7, #20]
    51a8:	2238      	movs	r2, #56	; 0x38
    51aa:	2100      	movs	r1, #0
    51ac:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    51ae:	230f      	movs	r3, #15
    51b0:	18fb      	adds	r3, r7, r3
    51b2:	781b      	ldrb	r3, [r3, #0]
    51b4:	2201      	movs	r2, #1
    51b6:	4013      	ands	r3, r2
    51b8:	d004      	beq.n	51c4 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    51ba:	697b      	ldr	r3, [r7, #20]
    51bc:	68db      	ldr	r3, [r3, #12]
    51be:	697a      	ldr	r2, [r7, #20]
    51c0:	0010      	movs	r0, r2
    51c2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    51c4:	230c      	movs	r3, #12
    51c6:	18fb      	adds	r3, r7, r3
    51c8:	881b      	ldrh	r3, [r3, #0]
    51ca:	2280      	movs	r2, #128	; 0x80
    51cc:	4013      	ands	r3, r2
    51ce:	d010      	beq.n	51f2 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    51d0:	693b      	ldr	r3, [r7, #16]
    51d2:	2280      	movs	r2, #128	; 0x80
    51d4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    51d6:	693b      	ldr	r3, [r7, #16]
    51d8:	2280      	movs	r2, #128	; 0x80
    51da:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    51dc:	230f      	movs	r3, #15
    51de:	18fb      	adds	r3, r7, r3
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	2240      	movs	r2, #64	; 0x40
    51e4:	4013      	ands	r3, r2
    51e6:	d004      	beq.n	51f2 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    51e8:	697b      	ldr	r3, [r7, #20]
    51ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    51ec:	697a      	ldr	r2, [r7, #20]
    51ee:	0010      	movs	r0, r2
    51f0:	4798      	blx	r3
		}
	}
#  endif
}
    51f2:	46c0      	nop			; (mov r8, r8)
    51f4:	46bd      	mov	sp, r7
    51f6:	b006      	add	sp, #24
    51f8:	bd80      	pop	{r7, pc}
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	200009d4 	.word	0x200009d4
    5200:	00004eb5 	.word	0x00004eb5
    5204:	00004e39 	.word	0x00004e39
    5208:	00004ee9 	.word	0x00004ee9
    520c:	00004f1f 	.word	0x00004f1f

00005210 <system_gclk_chan_get_config_defaults>:
{
    5210:	b580      	push	{r7, lr}
    5212:	b082      	sub	sp, #8
    5214:	af00      	add	r7, sp, #0
    5216:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	2200      	movs	r2, #0
    521c:	701a      	strb	r2, [r3, #0]
}
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	46bd      	mov	sp, r7
    5222:	b002      	add	sp, #8
    5224:	bd80      	pop	{r7, pc}
	...

00005228 <system_apb_clock_set_mask>:
{
    5228:	b580      	push	{r7, lr}
    522a:	b082      	sub	sp, #8
    522c:	af00      	add	r7, sp, #0
    522e:	0002      	movs	r2, r0
    5230:	6039      	str	r1, [r7, #0]
    5232:	1dfb      	adds	r3, r7, #7
    5234:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5236:	1dfb      	adds	r3, r7, #7
    5238:	781b      	ldrb	r3, [r3, #0]
    523a:	2b01      	cmp	r3, #1
    523c:	d00a      	beq.n	5254 <system_apb_clock_set_mask+0x2c>
    523e:	2b02      	cmp	r3, #2
    5240:	d00f      	beq.n	5262 <system_apb_clock_set_mask+0x3a>
    5242:	2b00      	cmp	r3, #0
    5244:	d114      	bne.n	5270 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5246:	4b0e      	ldr	r3, [pc, #56]	; (5280 <system_apb_clock_set_mask+0x58>)
    5248:	4a0d      	ldr	r2, [pc, #52]	; (5280 <system_apb_clock_set_mask+0x58>)
    524a:	6991      	ldr	r1, [r2, #24]
    524c:	683a      	ldr	r2, [r7, #0]
    524e:	430a      	orrs	r2, r1
    5250:	619a      	str	r2, [r3, #24]
			break;
    5252:	e00f      	b.n	5274 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5254:	4b0a      	ldr	r3, [pc, #40]	; (5280 <system_apb_clock_set_mask+0x58>)
    5256:	4a0a      	ldr	r2, [pc, #40]	; (5280 <system_apb_clock_set_mask+0x58>)
    5258:	69d1      	ldr	r1, [r2, #28]
    525a:	683a      	ldr	r2, [r7, #0]
    525c:	430a      	orrs	r2, r1
    525e:	61da      	str	r2, [r3, #28]
			break;
    5260:	e008      	b.n	5274 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5262:	4b07      	ldr	r3, [pc, #28]	; (5280 <system_apb_clock_set_mask+0x58>)
    5264:	4a06      	ldr	r2, [pc, #24]	; (5280 <system_apb_clock_set_mask+0x58>)
    5266:	6a11      	ldr	r1, [r2, #32]
    5268:	683a      	ldr	r2, [r7, #0]
    526a:	430a      	orrs	r2, r1
    526c:	621a      	str	r2, [r3, #32]
			break;
    526e:	e001      	b.n	5274 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5270:	2317      	movs	r3, #23
    5272:	e000      	b.n	5276 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5274:	2300      	movs	r3, #0
}
    5276:	0018      	movs	r0, r3
    5278:	46bd      	mov	sp, r7
    527a:	b002      	add	sp, #8
    527c:	bd80      	pop	{r7, pc}
    527e:	46c0      	nop			; (mov r8, r8)
    5280:	40000400 	.word	0x40000400

00005284 <system_pinmux_get_config_defaults>:
{
    5284:	b580      	push	{r7, lr}
    5286:	b082      	sub	sp, #8
    5288:	af00      	add	r7, sp, #0
    528a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    528c:	687b      	ldr	r3, [r7, #4]
    528e:	2280      	movs	r2, #128	; 0x80
    5290:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5292:	687b      	ldr	r3, [r7, #4]
    5294:	2200      	movs	r2, #0
    5296:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	2201      	movs	r2, #1
    529c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	2200      	movs	r2, #0
    52a2:	70da      	strb	r2, [r3, #3]
}
    52a4:	46c0      	nop			; (mov r8, r8)
    52a6:	46bd      	mov	sp, r7
    52a8:	b002      	add	sp, #8
    52aa:	bd80      	pop	{r7, pc}

000052ac <system_is_debugger_present>:
{
    52ac:	b580      	push	{r7, lr}
    52ae:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    52b0:	4b05      	ldr	r3, [pc, #20]	; (52c8 <system_is_debugger_present+0x1c>)
    52b2:	789b      	ldrb	r3, [r3, #2]
    52b4:	b2db      	uxtb	r3, r3
    52b6:	001a      	movs	r2, r3
    52b8:	2302      	movs	r3, #2
    52ba:	4013      	ands	r3, r2
    52bc:	1e5a      	subs	r2, r3, #1
    52be:	4193      	sbcs	r3, r2
    52c0:	b2db      	uxtb	r3, r3
}
    52c2:	0018      	movs	r0, r3
    52c4:	46bd      	mov	sp, r7
    52c6:	bd80      	pop	{r7, pc}
    52c8:	41002000 	.word	0x41002000

000052cc <usart_is_syncing>:
{
    52cc:	b580      	push	{r7, lr}
    52ce:	b084      	sub	sp, #16
    52d0:	af00      	add	r7, sp, #0
    52d2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    52da:	68fb      	ldr	r3, [r7, #12]
    52dc:	69db      	ldr	r3, [r3, #28]
    52de:	1e5a      	subs	r2, r3, #1
    52e0:	4193      	sbcs	r3, r2
    52e2:	b2db      	uxtb	r3, r3
}
    52e4:	0018      	movs	r0, r3
    52e6:	46bd      	mov	sp, r7
    52e8:	b004      	add	sp, #16
    52ea:	bd80      	pop	{r7, pc}

000052ec <_usart_wait_for_sync>:
{
    52ec:	b580      	push	{r7, lr}
    52ee:	b082      	sub	sp, #8
    52f0:	af00      	add	r7, sp, #0
    52f2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    52f4:	46c0      	nop			; (mov r8, r8)
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	0018      	movs	r0, r3
    52fa:	4b04      	ldr	r3, [pc, #16]	; (530c <_usart_wait_for_sync+0x20>)
    52fc:	4798      	blx	r3
    52fe:	1e03      	subs	r3, r0, #0
    5300:	d1f9      	bne.n	52f6 <_usart_wait_for_sync+0xa>
}
    5302:	46c0      	nop			; (mov r8, r8)
    5304:	46bd      	mov	sp, r7
    5306:	b002      	add	sp, #8
    5308:	bd80      	pop	{r7, pc}
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	000052cd 	.word	0x000052cd

00005310 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5310:	b5b0      	push	{r4, r5, r7, lr}
    5312:	b08c      	sub	sp, #48	; 0x30
    5314:	af02      	add	r7, sp, #8
    5316:	6078      	str	r0, [r7, #4]
    5318:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	681b      	ldr	r3, [r3, #0]
    531e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5320:	687b      	ldr	r3, [r7, #4]
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	0018      	movs	r0, r3
    5326:	4bab      	ldr	r3, [pc, #684]	; (55d4 <_usart_set_config+0x2c4>)
    5328:	4798      	blx	r3
    532a:	0003      	movs	r3, r0
    532c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    532e:	697b      	ldr	r3, [r7, #20]
    5330:	3314      	adds	r3, #20
    5332:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5334:	2300      	movs	r3, #0
    5336:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5338:	2300      	movs	r3, #0
    533a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    533c:	230a      	movs	r3, #10
    533e:	18fb      	adds	r3, r7, r3
    5340:	2200      	movs	r2, #0
    5342:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5344:	231f      	movs	r3, #31
    5346:	18fb      	adds	r3, r7, r3
    5348:	2200      	movs	r2, #0
    534a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    534c:	231e      	movs	r3, #30
    534e:	18fb      	adds	r3, r7, r3
    5350:	2210      	movs	r2, #16
    5352:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5354:	683b      	ldr	r3, [r7, #0]
    5356:	8a1b      	ldrh	r3, [r3, #16]
    5358:	2280      	movs	r2, #128	; 0x80
    535a:	01d2      	lsls	r2, r2, #7
    535c:	4293      	cmp	r3, r2
    535e:	d01c      	beq.n	539a <_usart_set_config+0x8a>
    5360:	2280      	movs	r2, #128	; 0x80
    5362:	01d2      	lsls	r2, r2, #7
    5364:	4293      	cmp	r3, r2
    5366:	dc06      	bgt.n	5376 <_usart_set_config+0x66>
    5368:	2b00      	cmp	r3, #0
    536a:	d00d      	beq.n	5388 <_usart_set_config+0x78>
    536c:	2280      	movs	r2, #128	; 0x80
    536e:	0192      	lsls	r2, r2, #6
    5370:	4293      	cmp	r3, r2
    5372:	d024      	beq.n	53be <_usart_set_config+0xae>
    5374:	e035      	b.n	53e2 <_usart_set_config+0xd2>
    5376:	22c0      	movs	r2, #192	; 0xc0
    5378:	01d2      	lsls	r2, r2, #7
    537a:	4293      	cmp	r3, r2
    537c:	d028      	beq.n	53d0 <_usart_set_config+0xc0>
    537e:	2280      	movs	r2, #128	; 0x80
    5380:	0212      	lsls	r2, r2, #8
    5382:	4293      	cmp	r3, r2
    5384:	d012      	beq.n	53ac <_usart_set_config+0x9c>
    5386:	e02c      	b.n	53e2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5388:	231f      	movs	r3, #31
    538a:	18fb      	adds	r3, r7, r3
    538c:	2200      	movs	r2, #0
    538e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5390:	231e      	movs	r3, #30
    5392:	18fb      	adds	r3, r7, r3
    5394:	2210      	movs	r2, #16
    5396:	701a      	strb	r2, [r3, #0]
			break;
    5398:	e023      	b.n	53e2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    539a:	231f      	movs	r3, #31
    539c:	18fb      	adds	r3, r7, r3
    539e:	2200      	movs	r2, #0
    53a0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    53a2:	231e      	movs	r3, #30
    53a4:	18fb      	adds	r3, r7, r3
    53a6:	2208      	movs	r2, #8
    53a8:	701a      	strb	r2, [r3, #0]
			break;
    53aa:	e01a      	b.n	53e2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    53ac:	231f      	movs	r3, #31
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	2200      	movs	r2, #0
    53b2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    53b4:	231e      	movs	r3, #30
    53b6:	18fb      	adds	r3, r7, r3
    53b8:	2203      	movs	r2, #3
    53ba:	701a      	strb	r2, [r3, #0]
			break;
    53bc:	e011      	b.n	53e2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    53be:	231f      	movs	r3, #31
    53c0:	18fb      	adds	r3, r7, r3
    53c2:	2201      	movs	r2, #1
    53c4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    53c6:	231e      	movs	r3, #30
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	2210      	movs	r2, #16
    53cc:	701a      	strb	r2, [r3, #0]
			break;
    53ce:	e008      	b.n	53e2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    53d0:	231f      	movs	r3, #31
    53d2:	18fb      	adds	r3, r7, r3
    53d4:	2201      	movs	r2, #1
    53d6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    53d8:	231e      	movs	r3, #30
    53da:	18fb      	adds	r3, r7, r3
    53dc:	2208      	movs	r2, #8
    53de:	701a      	strb	r2, [r3, #0]
			break;
    53e0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    53e2:	683b      	ldr	r3, [r7, #0]
    53e4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    53e6:	683b      	ldr	r3, [r7, #0]
    53e8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    53ea:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    53ec:	683b      	ldr	r3, [r7, #0]
    53ee:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    53f0:	4313      	orrs	r3, r2
		config->sample_rate |
    53f2:	683a      	ldr	r2, [r7, #0]
    53f4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    53f6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    53f8:	683a      	ldr	r2, [r7, #0]
    53fa:	7e12      	ldrb	r2, [r2, #24]
    53fc:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    53fe:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5400:	683a      	ldr	r2, [r7, #0]
    5402:	2126      	movs	r1, #38	; 0x26
    5404:	5c52      	ldrb	r2, [r2, r1]
    5406:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    5408:	4313      	orrs	r3, r2
    540a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    540c:	231d      	movs	r3, #29
    540e:	18fb      	adds	r3, r7, r3
    5410:	2200      	movs	r2, #0
    5412:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5414:	683b      	ldr	r3, [r7, #0]
    5416:	685b      	ldr	r3, [r3, #4]
    5418:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    541a:	68fb      	ldr	r3, [r7, #12]
    541c:	2b00      	cmp	r3, #0
    541e:	d01e      	beq.n	545e <_usart_set_config+0x14e>
    5420:	2280      	movs	r2, #128	; 0x80
    5422:	0552      	lsls	r2, r2, #21
    5424:	4293      	cmp	r3, r2
    5426:	d14f      	bne.n	54c8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5428:	683b      	ldr	r3, [r7, #0]
    542a:	2227      	movs	r2, #39	; 0x27
    542c:	5c9b      	ldrb	r3, [r3, r2]
    542e:	2201      	movs	r2, #1
    5430:	4053      	eors	r3, r2
    5432:	b2db      	uxtb	r3, r3
    5434:	2b00      	cmp	r3, #0
    5436:	d046      	beq.n	54c6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5438:	683b      	ldr	r3, [r7, #0]
    543a:	6a1d      	ldr	r5, [r3, #32]
    543c:	693b      	ldr	r3, [r7, #16]
    543e:	b2db      	uxtb	r3, r3
    5440:	0018      	movs	r0, r3
    5442:	4b65      	ldr	r3, [pc, #404]	; (55d8 <_usart_set_config+0x2c8>)
    5444:	4798      	blx	r3
    5446:	0001      	movs	r1, r0
    5448:	231d      	movs	r3, #29
    544a:	18fc      	adds	r4, r7, r3
    544c:	230a      	movs	r3, #10
    544e:	18fb      	adds	r3, r7, r3
    5450:	001a      	movs	r2, r3
    5452:	0028      	movs	r0, r5
    5454:	4b61      	ldr	r3, [pc, #388]	; (55dc <_usart_set_config+0x2cc>)
    5456:	4798      	blx	r3
    5458:	0003      	movs	r3, r0
    545a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    545c:	e033      	b.n	54c6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    545e:	683b      	ldr	r3, [r7, #0]
    5460:	2227      	movs	r2, #39	; 0x27
    5462:	5c9b      	ldrb	r3, [r3, r2]
    5464:	2b00      	cmp	r3, #0
    5466:	d014      	beq.n	5492 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5468:	683b      	ldr	r3, [r7, #0]
    546a:	6a18      	ldr	r0, [r3, #32]
    546c:	683b      	ldr	r3, [r7, #0]
    546e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5470:	231d      	movs	r3, #29
    5472:	18fc      	adds	r4, r7, r3
    5474:	231f      	movs	r3, #31
    5476:	18fb      	adds	r3, r7, r3
    5478:	781d      	ldrb	r5, [r3, #0]
    547a:	230a      	movs	r3, #10
    547c:	18fa      	adds	r2, r7, r3
    547e:	231e      	movs	r3, #30
    5480:	18fb      	adds	r3, r7, r3
    5482:	781b      	ldrb	r3, [r3, #0]
    5484:	9300      	str	r3, [sp, #0]
    5486:	002b      	movs	r3, r5
    5488:	4d55      	ldr	r5, [pc, #340]	; (55e0 <_usart_set_config+0x2d0>)
    548a:	47a8      	blx	r5
    548c:	0003      	movs	r3, r0
    548e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5490:	e01a      	b.n	54c8 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5492:	683b      	ldr	r3, [r7, #0]
    5494:	6a1d      	ldr	r5, [r3, #32]
    5496:	693b      	ldr	r3, [r7, #16]
    5498:	b2db      	uxtb	r3, r3
    549a:	0018      	movs	r0, r3
    549c:	4b4e      	ldr	r3, [pc, #312]	; (55d8 <_usart_set_config+0x2c8>)
    549e:	4798      	blx	r3
				status_code =
    54a0:	231d      	movs	r3, #29
    54a2:	18fc      	adds	r4, r7, r3
    54a4:	231f      	movs	r3, #31
    54a6:	18fb      	adds	r3, r7, r3
    54a8:	7819      	ldrb	r1, [r3, #0]
    54aa:	230a      	movs	r3, #10
    54ac:	18fa      	adds	r2, r7, r3
    54ae:	231e      	movs	r3, #30
    54b0:	18fb      	adds	r3, r7, r3
    54b2:	781b      	ldrb	r3, [r3, #0]
    54b4:	9300      	str	r3, [sp, #0]
    54b6:	000b      	movs	r3, r1
    54b8:	0001      	movs	r1, r0
    54ba:	0028      	movs	r0, r5
    54bc:	4d48      	ldr	r5, [pc, #288]	; (55e0 <_usart_set_config+0x2d0>)
    54be:	47a8      	blx	r5
    54c0:	0003      	movs	r3, r0
    54c2:	7023      	strb	r3, [r4, #0]
			break;
    54c4:	e000      	b.n	54c8 <_usart_set_config+0x1b8>
			break;
    54c6:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    54c8:	231d      	movs	r3, #29
    54ca:	18fb      	adds	r3, r7, r3
    54cc:	781b      	ldrb	r3, [r3, #0]
    54ce:	2b00      	cmp	r3, #0
    54d0:	d003      	beq.n	54da <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    54d2:	231d      	movs	r3, #29
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	781b      	ldrb	r3, [r3, #0]
    54d8:	e077      	b.n	55ca <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    54da:	683b      	ldr	r3, [r7, #0]
    54dc:	7e5b      	ldrb	r3, [r3, #25]
    54de:	2b00      	cmp	r3, #0
    54e0:	d003      	beq.n	54ea <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    54e2:	683b      	ldr	r3, [r7, #0]
    54e4:	7e9a      	ldrb	r2, [r3, #26]
    54e6:	69bb      	ldr	r3, [r7, #24]
    54e8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    54ea:	687b      	ldr	r3, [r7, #4]
    54ec:	0018      	movs	r0, r3
    54ee:	4b3d      	ldr	r3, [pc, #244]	; (55e4 <_usart_set_config+0x2d4>)
    54f0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    54f2:	230a      	movs	r3, #10
    54f4:	18fb      	adds	r3, r7, r3
    54f6:	881a      	ldrh	r2, [r3, #0]
    54f8:	69bb      	ldr	r3, [r7, #24]
    54fa:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    54fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    54fe:	68fb      	ldr	r3, [r7, #12]
    5500:	4313      	orrs	r3, r2
    5502:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5504:	683b      	ldr	r3, [r7, #0]
    5506:	2227      	movs	r2, #39	; 0x27
    5508:	5c9b      	ldrb	r3, [r3, r2]
    550a:	2201      	movs	r2, #1
    550c:	4053      	eors	r3, r2
    550e:	b2db      	uxtb	r3, r3
    5510:	2b00      	cmp	r3, #0
    5512:	d003      	beq.n	551c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5516:	2204      	movs	r2, #4
    5518:	4313      	orrs	r3, r2
    551a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    551c:	683b      	ldr	r3, [r7, #0]
    551e:	7e5b      	ldrb	r3, [r3, #25]
    5520:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5522:	683b      	ldr	r3, [r7, #0]
    5524:	7f1b      	ldrb	r3, [r3, #28]
    5526:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5528:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    552a:	683b      	ldr	r3, [r7, #0]
    552c:	7f5b      	ldrb	r3, [r3, #29]
    552e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5530:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5532:	683b      	ldr	r3, [r7, #0]
    5534:	2124      	movs	r1, #36	; 0x24
    5536:	5c5b      	ldrb	r3, [r3, r1]
    5538:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    553a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    553c:	683b      	ldr	r3, [r7, #0]
    553e:	2125      	movs	r1, #37	; 0x25
    5540:	5c5b      	ldrb	r3, [r3, r1]
    5542:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5544:	4313      	orrs	r3, r2
	ctrlb =  
    5546:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    5548:	683b      	ldr	r3, [r7, #0]
    554a:	7a9b      	ldrb	r3, [r3, #10]
    554c:	001a      	movs	r2, r3
    554e:	6a3b      	ldr	r3, [r7, #32]
    5550:	4313      	orrs	r3, r2
    5552:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    5554:	683b      	ldr	r3, [r7, #0]
    5556:	7adb      	ldrb	r3, [r3, #11]
    5558:	001a      	movs	r2, r3
    555a:	6a3b      	ldr	r3, [r7, #32]
    555c:	4313      	orrs	r3, r2
    555e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5560:	683b      	ldr	r3, [r7, #0]
    5562:	891b      	ldrh	r3, [r3, #8]
    5564:	2bff      	cmp	r3, #255	; 0xff
    5566:	d00b      	beq.n	5580 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    556a:	2280      	movs	r2, #128	; 0x80
    556c:	0452      	lsls	r2, r2, #17
    556e:	4313      	orrs	r3, r2
    5570:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    5572:	683b      	ldr	r3, [r7, #0]
    5574:	891b      	ldrh	r3, [r3, #8]
    5576:	001a      	movs	r2, r3
    5578:	6a3b      	ldr	r3, [r7, #32]
    557a:	4313      	orrs	r3, r2
    557c:	623b      	str	r3, [r7, #32]
    557e:	e008      	b.n	5592 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5580:	683b      	ldr	r3, [r7, #0]
    5582:	7edb      	ldrb	r3, [r3, #27]
    5584:	2b00      	cmp	r3, #0
    5586:	d004      	beq.n	5592 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    558a:	2280      	movs	r2, #128	; 0x80
    558c:	04d2      	lsls	r2, r2, #19
    558e:	4313      	orrs	r3, r2
    5590:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5592:	683b      	ldr	r3, [r7, #0]
    5594:	222c      	movs	r2, #44	; 0x2c
    5596:	5c9b      	ldrb	r3, [r3, r2]
    5598:	2b00      	cmp	r3, #0
    559a:	d103      	bne.n	55a4 <_usart_set_config+0x294>
    559c:	4b12      	ldr	r3, [pc, #72]	; (55e8 <_usart_set_config+0x2d8>)
    559e:	4798      	blx	r3
    55a0:	1e03      	subs	r3, r0, #0
    55a2:	d003      	beq.n	55ac <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    55a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    55a6:	2280      	movs	r2, #128	; 0x80
    55a8:	4313      	orrs	r3, r2
    55aa:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	0018      	movs	r0, r3
    55b0:	4b0c      	ldr	r3, [pc, #48]	; (55e4 <_usart_set_config+0x2d4>)
    55b2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    55b4:	69bb      	ldr	r3, [r7, #24]
    55b6:	6a3a      	ldr	r2, [r7, #32]
    55b8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    55ba:	687b      	ldr	r3, [r7, #4]
    55bc:	0018      	movs	r0, r3
    55be:	4b09      	ldr	r3, [pc, #36]	; (55e4 <_usart_set_config+0x2d4>)
    55c0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    55c2:	69bb      	ldr	r3, [r7, #24]
    55c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    55c6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    55c8:	2300      	movs	r3, #0
}
    55ca:	0018      	movs	r0, r3
    55cc:	46bd      	mov	sp, r7
    55ce:	b00a      	add	sp, #40	; 0x28
    55d0:	bdb0      	pop	{r4, r5, r7, pc}
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	00004079 	.word	0x00004079
    55d8:	00006cb1 	.word	0x00006cb1
    55dc:	00003bf3 	.word	0x00003bf3
    55e0:	00003c71 	.word	0x00003c71
    55e4:	000052ed 	.word	0x000052ed
    55e8:	000052ad 	.word	0x000052ad

000055ec <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    55ec:	b590      	push	{r4, r7, lr}
    55ee:	b093      	sub	sp, #76	; 0x4c
    55f0:	af00      	add	r7, sp, #0
    55f2:	60f8      	str	r0, [r7, #12]
    55f4:	60b9      	str	r1, [r7, #8]
    55f6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    55f8:	233b      	movs	r3, #59	; 0x3b
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	2200      	movs	r2, #0
    55fe:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5600:	68fb      	ldr	r3, [r7, #12]
    5602:	68ba      	ldr	r2, [r7, #8]
    5604:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5606:	68fb      	ldr	r3, [r7, #12]
    5608:	681b      	ldr	r3, [r3, #0]
    560a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    560c:	68fb      	ldr	r3, [r7, #12]
    560e:	681b      	ldr	r3, [r3, #0]
    5610:	0018      	movs	r0, r3
    5612:	4b86      	ldr	r3, [pc, #536]	; (582c <usart_init+0x240>)
    5614:	4798      	blx	r3
    5616:	0003      	movs	r3, r0
    5618:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    561c:	3302      	adds	r3, #2
    561e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5622:	3314      	adds	r3, #20
    5624:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5628:	681b      	ldr	r3, [r3, #0]
    562a:	2201      	movs	r2, #1
    562c:	4013      	ands	r3, r2
    562e:	d001      	beq.n	5634 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5630:	2305      	movs	r3, #5
    5632:	e0f6      	b.n	5822 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5636:	681b      	ldr	r3, [r3, #0]
    5638:	2202      	movs	r2, #2
    563a:	4013      	ands	r3, r2
    563c:	d001      	beq.n	5642 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    563e:	231c      	movs	r3, #28
    5640:	e0ef      	b.n	5822 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5642:	2201      	movs	r2, #1
    5644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5646:	409a      	lsls	r2, r3
    5648:	0013      	movs	r3, r2
    564a:	0019      	movs	r1, r3
    564c:	2002      	movs	r0, #2
    564e:	4b78      	ldr	r3, [pc, #480]	; (5830 <usart_init+0x244>)
    5650:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5652:	2324      	movs	r3, #36	; 0x24
    5654:	18fb      	adds	r3, r7, r3
    5656:	0018      	movs	r0, r3
    5658:	4b76      	ldr	r3, [pc, #472]	; (5834 <usart_init+0x248>)
    565a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    565c:	687b      	ldr	r3, [r7, #4]
    565e:	222d      	movs	r2, #45	; 0x2d
    5660:	5c9a      	ldrb	r2, [r3, r2]
    5662:	2324      	movs	r3, #36	; 0x24
    5664:	18fb      	adds	r3, r7, r3
    5666:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5668:	6abb      	ldr	r3, [r7, #40]	; 0x28
    566a:	b2db      	uxtb	r3, r3
    566c:	2224      	movs	r2, #36	; 0x24
    566e:	18ba      	adds	r2, r7, r2
    5670:	0011      	movs	r1, r2
    5672:	0018      	movs	r0, r3
    5674:	4b70      	ldr	r3, [pc, #448]	; (5838 <usart_init+0x24c>)
    5676:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5678:	6abb      	ldr	r3, [r7, #40]	; 0x28
    567a:	b2db      	uxtb	r3, r3
    567c:	0018      	movs	r0, r3
    567e:	4b6f      	ldr	r3, [pc, #444]	; (583c <usart_init+0x250>)
    5680:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	222d      	movs	r2, #45	; 0x2d
    5686:	5c9b      	ldrb	r3, [r3, r2]
    5688:	2100      	movs	r1, #0
    568a:	0018      	movs	r0, r3
    568c:	4b6c      	ldr	r3, [pc, #432]	; (5840 <usart_init+0x254>)
    568e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5690:	687b      	ldr	r3, [r7, #4]
    5692:	7ada      	ldrb	r2, [r3, #11]
    5694:	68fb      	ldr	r3, [r7, #12]
    5696:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	2224      	movs	r2, #36	; 0x24
    569c:	5c9a      	ldrb	r2, [r3, r2]
    569e:	68fb      	ldr	r3, [r7, #12]
    56a0:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    56a2:	687b      	ldr	r3, [r7, #4]
    56a4:	2225      	movs	r2, #37	; 0x25
    56a6:	5c9a      	ldrb	r2, [r3, r2]
    56a8:	68fb      	ldr	r3, [r7, #12]
    56aa:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	7eda      	ldrb	r2, [r3, #27]
    56b0:	68fb      	ldr	r3, [r7, #12]
    56b2:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    56b4:	687b      	ldr	r3, [r7, #4]
    56b6:	7f1a      	ldrb	r2, [r3, #28]
    56b8:	68fb      	ldr	r3, [r7, #12]
    56ba:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    56bc:	233b      	movs	r3, #59	; 0x3b
    56be:	18fc      	adds	r4, r7, r3
    56c0:	687a      	ldr	r2, [r7, #4]
    56c2:	68fb      	ldr	r3, [r7, #12]
    56c4:	0011      	movs	r1, r2
    56c6:	0018      	movs	r0, r3
    56c8:	4b5e      	ldr	r3, [pc, #376]	; (5844 <usart_init+0x258>)
    56ca:	4798      	blx	r3
    56cc:	0003      	movs	r3, r0
    56ce:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    56d0:	233b      	movs	r3, #59	; 0x3b
    56d2:	18fb      	adds	r3, r7, r3
    56d4:	781b      	ldrb	r3, [r3, #0]
    56d6:	2b00      	cmp	r3, #0
    56d8:	d003      	beq.n	56e2 <usart_init+0xf6>
		return status_code;
    56da:	233b      	movs	r3, #59	; 0x3b
    56dc:	18fb      	adds	r3, r7, r3
    56de:	781b      	ldrb	r3, [r3, #0]
    56e0:	e09f      	b.n	5822 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    56e2:	2320      	movs	r3, #32
    56e4:	18fb      	adds	r3, r7, r3
    56e6:	0018      	movs	r0, r3
    56e8:	4b57      	ldr	r3, [pc, #348]	; (5848 <usart_init+0x25c>)
    56ea:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    56ec:	2320      	movs	r3, #32
    56ee:	18fb      	adds	r3, r7, r3
    56f0:	2200      	movs	r2, #0
    56f2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    56f4:	2320      	movs	r3, #32
    56f6:	18fb      	adds	r3, r7, r3
    56f8:	2200      	movs	r2, #0
    56fa:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    56fc:	687b      	ldr	r3, [r7, #4]
    56fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    5700:	2310      	movs	r3, #16
    5702:	18fb      	adds	r3, r7, r3
    5704:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5706:	687b      	ldr	r3, [r7, #4]
    5708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    570a:	2310      	movs	r3, #16
    570c:	18fb      	adds	r3, r7, r3
    570e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5710:	687b      	ldr	r3, [r7, #4]
    5712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    5714:	2310      	movs	r3, #16
    5716:	18fb      	adds	r3, r7, r3
    5718:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    571a:	687b      	ldr	r3, [r7, #4]
    571c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    571e:	2310      	movs	r3, #16
    5720:	18fb      	adds	r3, r7, r3
    5722:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5724:	2347      	movs	r3, #71	; 0x47
    5726:	18fb      	adds	r3, r7, r3
    5728:	2200      	movs	r2, #0
    572a:	701a      	strb	r2, [r3, #0]
    572c:	e02c      	b.n	5788 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    572e:	2347      	movs	r3, #71	; 0x47
    5730:	18fb      	adds	r3, r7, r3
    5732:	781a      	ldrb	r2, [r3, #0]
    5734:	2310      	movs	r3, #16
    5736:	18fb      	adds	r3, r7, r3
    5738:	0092      	lsls	r2, r2, #2
    573a:	58d3      	ldr	r3, [r2, r3]
    573c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    573e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5740:	2b00      	cmp	r3, #0
    5742:	d109      	bne.n	5758 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5744:	2347      	movs	r3, #71	; 0x47
    5746:	18fb      	adds	r3, r7, r3
    5748:	781a      	ldrb	r2, [r3, #0]
    574a:	68bb      	ldr	r3, [r7, #8]
    574c:	0011      	movs	r1, r2
    574e:	0018      	movs	r0, r3
    5750:	4b3e      	ldr	r3, [pc, #248]	; (584c <usart_init+0x260>)
    5752:	4798      	blx	r3
    5754:	0003      	movs	r3, r0
    5756:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    5758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    575a:	3301      	adds	r3, #1
    575c:	d00d      	beq.n	577a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5760:	b2da      	uxtb	r2, r3
    5762:	2320      	movs	r3, #32
    5764:	18fb      	adds	r3, r7, r3
    5766:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    576a:	0c1b      	lsrs	r3, r3, #16
    576c:	b2db      	uxtb	r3, r3
    576e:	2220      	movs	r2, #32
    5770:	18ba      	adds	r2, r7, r2
    5772:	0011      	movs	r1, r2
    5774:	0018      	movs	r0, r3
    5776:	4b36      	ldr	r3, [pc, #216]	; (5850 <usart_init+0x264>)
    5778:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    577a:	2347      	movs	r3, #71	; 0x47
    577c:	18fb      	adds	r3, r7, r3
    577e:	781a      	ldrb	r2, [r3, #0]
    5780:	2347      	movs	r3, #71	; 0x47
    5782:	18fb      	adds	r3, r7, r3
    5784:	3201      	adds	r2, #1
    5786:	701a      	strb	r2, [r3, #0]
    5788:	2347      	movs	r3, #71	; 0x47
    578a:	18fb      	adds	r3, r7, r3
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	2b03      	cmp	r3, #3
    5790:	d9cd      	bls.n	572e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5792:	2300      	movs	r3, #0
    5794:	63fb      	str	r3, [r7, #60]	; 0x3c
    5796:	e00a      	b.n	57ae <usart_init+0x1c2>
		module->callback[i]            = NULL;
    5798:	68fa      	ldr	r2, [r7, #12]
    579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    579c:	3302      	adds	r3, #2
    579e:	009b      	lsls	r3, r3, #2
    57a0:	18d3      	adds	r3, r2, r3
    57a2:	3304      	adds	r3, #4
    57a4:	2200      	movs	r2, #0
    57a6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    57a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    57aa:	3301      	adds	r3, #1
    57ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    57ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    57b0:	2b05      	cmp	r3, #5
    57b2:	d9f1      	bls.n	5798 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    57b4:	68fb      	ldr	r3, [r7, #12]
    57b6:	2200      	movs	r2, #0
    57b8:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    57ba:	68fb      	ldr	r3, [r7, #12]
    57bc:	2200      	movs	r2, #0
    57be:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    57c0:	68fb      	ldr	r3, [r7, #12]
    57c2:	2200      	movs	r2, #0
    57c4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    57c6:	68fb      	ldr	r3, [r7, #12]
    57c8:	2200      	movs	r2, #0
    57ca:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    57cc:	68fb      	ldr	r3, [r7, #12]
    57ce:	2230      	movs	r2, #48	; 0x30
    57d0:	2100      	movs	r1, #0
    57d2:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    57d4:	68fb      	ldr	r3, [r7, #12]
    57d6:	2231      	movs	r2, #49	; 0x31
    57d8:	2100      	movs	r1, #0
    57da:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    57dc:	68fb      	ldr	r3, [r7, #12]
    57de:	2232      	movs	r2, #50	; 0x32
    57e0:	2100      	movs	r1, #0
    57e2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    57e4:	68fb      	ldr	r3, [r7, #12]
    57e6:	2233      	movs	r2, #51	; 0x33
    57e8:	2100      	movs	r1, #0
    57ea:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    57ec:	68fb      	ldr	r3, [r7, #12]
    57ee:	681b      	ldr	r3, [r3, #0]
    57f0:	2227      	movs	r2, #39	; 0x27
    57f2:	18bc      	adds	r4, r7, r2
    57f4:	0018      	movs	r0, r3
    57f6:	4b0d      	ldr	r3, [pc, #52]	; (582c <usart_init+0x240>)
    57f8:	4798      	blx	r3
    57fa:	0003      	movs	r3, r0
    57fc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    57fe:	4a15      	ldr	r2, [pc, #84]	; (5854 <usart_init+0x268>)
    5800:	2327      	movs	r3, #39	; 0x27
    5802:	18fb      	adds	r3, r7, r3
    5804:	781b      	ldrb	r3, [r3, #0]
    5806:	0011      	movs	r1, r2
    5808:	0018      	movs	r0, r3
    580a:	4b13      	ldr	r3, [pc, #76]	; (5858 <usart_init+0x26c>)
    580c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    580e:	2327      	movs	r3, #39	; 0x27
    5810:	18fb      	adds	r3, r7, r3
    5812:	781a      	ldrb	r2, [r3, #0]
    5814:	4b11      	ldr	r3, [pc, #68]	; (585c <usart_init+0x270>)
    5816:	0092      	lsls	r2, r2, #2
    5818:	68f9      	ldr	r1, [r7, #12]
    581a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    581c:	233b      	movs	r3, #59	; 0x3b
    581e:	18fb      	adds	r3, r7, r3
    5820:	781b      	ldrb	r3, [r3, #0]
}
    5822:	0018      	movs	r0, r3
    5824:	46bd      	mov	sp, r7
    5826:	b013      	add	sp, #76	; 0x4c
    5828:	bd90      	pop	{r4, r7, pc}
    582a:	46c0      	nop			; (mov r8, r8)
    582c:	00004079 	.word	0x00004079
    5830:	00005229 	.word	0x00005229
    5834:	00005211 	.word	0x00005211
    5838:	00006b8d 	.word	0x00006b8d
    583c:	00006bd1 	.word	0x00006bd1
    5840:	00003e31 	.word	0x00003e31
    5844:	00005311 	.word	0x00005311
    5848:	00005285 	.word	0x00005285
    584c:	00003ebd 	.word	0x00003ebd
    5850:	00006e79 	.word	0x00006e79
    5854:	00005c19 	.word	0x00005c19
    5858:	000040dd 	.word	0x000040dd
    585c:	200009d4 	.word	0x200009d4

00005860 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5860:	b580      	push	{r7, lr}
    5862:	b084      	sub	sp, #16
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
    5868:	000a      	movs	r2, r1
    586a:	1cbb      	adds	r3, r7, #2
    586c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    586e:	687b      	ldr	r3, [r7, #4]
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5874:	687b      	ldr	r3, [r7, #4]
    5876:	79db      	ldrb	r3, [r3, #7]
    5878:	2201      	movs	r2, #1
    587a:	4053      	eors	r3, r2
    587c:	b2db      	uxtb	r3, r3
    587e:	2b00      	cmp	r3, #0
    5880:	d001      	beq.n	5886 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5882:	231c      	movs	r3, #28
    5884:	e017      	b.n	58b6 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    5886:	687b      	ldr	r3, [r7, #4]
    5888:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    588a:	b29b      	uxth	r3, r3
    588c:	2b00      	cmp	r3, #0
    588e:	d001      	beq.n	5894 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5890:	2305      	movs	r3, #5
    5892:	e010      	b.n	58b6 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	0018      	movs	r0, r3
    5898:	4b09      	ldr	r3, [pc, #36]	; (58c0 <usart_write_wait+0x60>)
    589a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    589c:	68fb      	ldr	r3, [r7, #12]
    589e:	1cba      	adds	r2, r7, #2
    58a0:	8812      	ldrh	r2, [r2, #0]
    58a2:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    58a4:	46c0      	nop			; (mov r8, r8)
    58a6:	68fb      	ldr	r3, [r7, #12]
    58a8:	7e1b      	ldrb	r3, [r3, #24]
    58aa:	b2db      	uxtb	r3, r3
    58ac:	001a      	movs	r2, r3
    58ae:	2302      	movs	r3, #2
    58b0:	4013      	ands	r3, r2
    58b2:	d0f8      	beq.n	58a6 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    58b4:	2300      	movs	r3, #0
}
    58b6:	0018      	movs	r0, r3
    58b8:	46bd      	mov	sp, r7
    58ba:	b004      	add	sp, #16
    58bc:	bd80      	pop	{r7, pc}
    58be:	46c0      	nop			; (mov r8, r8)
    58c0:	000052ed 	.word	0x000052ed

000058c4 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    58c4:	b580      	push	{r7, lr}
    58c6:	b084      	sub	sp, #16
    58c8:	af00      	add	r7, sp, #0
    58ca:	6078      	str	r0, [r7, #4]
    58cc:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    58ce:	687b      	ldr	r3, [r7, #4]
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	799b      	ldrb	r3, [r3, #6]
    58d8:	2201      	movs	r2, #1
    58da:	4053      	eors	r3, r2
    58dc:	b2db      	uxtb	r3, r3
    58de:	2b00      	cmp	r3, #0
    58e0:	d001      	beq.n	58e6 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    58e2:	231c      	movs	r3, #28
    58e4:	e05e      	b.n	59a4 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    58ea:	b29b      	uxth	r3, r3
    58ec:	2b00      	cmp	r3, #0
    58ee:	d001      	beq.n	58f4 <usart_read_wait+0x30>
		return STATUS_BUSY;
    58f0:	2305      	movs	r3, #5
    58f2:	e057      	b.n	59a4 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    58f4:	68fb      	ldr	r3, [r7, #12]
    58f6:	7e1b      	ldrb	r3, [r3, #24]
    58f8:	b2db      	uxtb	r3, r3
    58fa:	001a      	movs	r2, r3
    58fc:	2304      	movs	r3, #4
    58fe:	4013      	ands	r3, r2
    5900:	d101      	bne.n	5906 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    5902:	2305      	movs	r3, #5
    5904:	e04e      	b.n	59a4 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5906:	687b      	ldr	r3, [r7, #4]
    5908:	0018      	movs	r0, r3
    590a:	4b28      	ldr	r3, [pc, #160]	; (59ac <usart_read_wait+0xe8>)
    590c:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    590e:	68fb      	ldr	r3, [r7, #12]
    5910:	8b5b      	ldrh	r3, [r3, #26]
    5912:	b29b      	uxth	r3, r3
    5914:	b2da      	uxtb	r2, r3
    5916:	230b      	movs	r3, #11
    5918:	18fb      	adds	r3, r7, r3
    591a:	213f      	movs	r1, #63	; 0x3f
    591c:	400a      	ands	r2, r1
    591e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5920:	230b      	movs	r3, #11
    5922:	18fb      	adds	r3, r7, r3
    5924:	781b      	ldrb	r3, [r3, #0]
    5926:	2b00      	cmp	r3, #0
    5928:	d036      	beq.n	5998 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    592a:	230b      	movs	r3, #11
    592c:	18fb      	adds	r3, r7, r3
    592e:	781b      	ldrb	r3, [r3, #0]
    5930:	2202      	movs	r2, #2
    5932:	4013      	ands	r3, r2
    5934:	d004      	beq.n	5940 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5936:	68fb      	ldr	r3, [r7, #12]
    5938:	2202      	movs	r2, #2
    593a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    593c:	231a      	movs	r3, #26
    593e:	e031      	b.n	59a4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5940:	230b      	movs	r3, #11
    5942:	18fb      	adds	r3, r7, r3
    5944:	781b      	ldrb	r3, [r3, #0]
    5946:	2204      	movs	r2, #4
    5948:	4013      	ands	r3, r2
    594a:	d004      	beq.n	5956 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    594c:	68fb      	ldr	r3, [r7, #12]
    594e:	2204      	movs	r2, #4
    5950:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5952:	231e      	movs	r3, #30
    5954:	e026      	b.n	59a4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5956:	230b      	movs	r3, #11
    5958:	18fb      	adds	r3, r7, r3
    595a:	781b      	ldrb	r3, [r3, #0]
    595c:	2201      	movs	r2, #1
    595e:	4013      	ands	r3, r2
    5960:	d004      	beq.n	596c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5962:	68fb      	ldr	r3, [r7, #12]
    5964:	2201      	movs	r2, #1
    5966:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    5968:	2313      	movs	r3, #19
    596a:	e01b      	b.n	59a4 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    596c:	230b      	movs	r3, #11
    596e:	18fb      	adds	r3, r7, r3
    5970:	781b      	ldrb	r3, [r3, #0]
    5972:	2210      	movs	r2, #16
    5974:	4013      	ands	r3, r2
    5976:	d004      	beq.n	5982 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5978:	68fb      	ldr	r3, [r7, #12]
    597a:	2210      	movs	r2, #16
    597c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    597e:	2342      	movs	r3, #66	; 0x42
    5980:	e010      	b.n	59a4 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5982:	230b      	movs	r3, #11
    5984:	18fb      	adds	r3, r7, r3
    5986:	781b      	ldrb	r3, [r3, #0]
    5988:	2220      	movs	r2, #32
    598a:	4013      	ands	r3, r2
    598c:	d004      	beq.n	5998 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    598e:	68fb      	ldr	r3, [r7, #12]
    5990:	2220      	movs	r2, #32
    5992:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5994:	2341      	movs	r3, #65	; 0x41
    5996:	e005      	b.n	59a4 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    5998:	68fb      	ldr	r3, [r7, #12]
    599a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    599c:	b29a      	uxth	r2, r3
    599e:	683b      	ldr	r3, [r7, #0]
    59a0:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    59a2:	2300      	movs	r3, #0
}
    59a4:	0018      	movs	r0, r3
    59a6:	46bd      	mov	sp, r7
    59a8:	b004      	add	sp, #16
    59aa:	bd80      	pop	{r7, pc}
    59ac:	000052ed 	.word	0x000052ed

000059b0 <system_interrupt_enter_critical_section>:
{
    59b0:	b580      	push	{r7, lr}
    59b2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    59b4:	4b02      	ldr	r3, [pc, #8]	; (59c0 <system_interrupt_enter_critical_section+0x10>)
    59b6:	4798      	blx	r3
}
    59b8:	46c0      	nop			; (mov r8, r8)
    59ba:	46bd      	mov	sp, r7
    59bc:	bd80      	pop	{r7, pc}
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	00003501 	.word	0x00003501

000059c4 <system_interrupt_leave_critical_section>:
{
    59c4:	b580      	push	{r7, lr}
    59c6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    59c8:	4b02      	ldr	r3, [pc, #8]	; (59d4 <system_interrupt_leave_critical_section+0x10>)
    59ca:	4798      	blx	r3
}
    59cc:	46c0      	nop			; (mov r8, r8)
    59ce:	46bd      	mov	sp, r7
    59d0:	bd80      	pop	{r7, pc}
    59d2:	46c0      	nop			; (mov r8, r8)
    59d4:	00003555 	.word	0x00003555

000059d8 <usart_is_syncing>:
{
    59d8:	b580      	push	{r7, lr}
    59da:	b084      	sub	sp, #16
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	681b      	ldr	r3, [r3, #0]
    59e4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    59e6:	68fb      	ldr	r3, [r7, #12]
    59e8:	69db      	ldr	r3, [r3, #28]
    59ea:	1e5a      	subs	r2, r3, #1
    59ec:	4193      	sbcs	r3, r2
    59ee:	b2db      	uxtb	r3, r3
}
    59f0:	0018      	movs	r0, r3
    59f2:	46bd      	mov	sp, r7
    59f4:	b004      	add	sp, #16
    59f6:	bd80      	pop	{r7, pc}

000059f8 <_usart_wait_for_sync>:
{
    59f8:	b580      	push	{r7, lr}
    59fa:	b082      	sub	sp, #8
    59fc:	af00      	add	r7, sp, #0
    59fe:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5a00:	46c0      	nop			; (mov r8, r8)
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	0018      	movs	r0, r3
    5a06:	4b04      	ldr	r3, [pc, #16]	; (5a18 <_usart_wait_for_sync+0x20>)
    5a08:	4798      	blx	r3
    5a0a:	1e03      	subs	r3, r0, #0
    5a0c:	d1f9      	bne.n	5a02 <_usart_wait_for_sync+0xa>
}
    5a0e:	46c0      	nop			; (mov r8, r8)
    5a10:	46bd      	mov	sp, r7
    5a12:	b002      	add	sp, #8
    5a14:	bd80      	pop	{r7, pc}
    5a16:	46c0      	nop			; (mov r8, r8)
    5a18:	000059d9 	.word	0x000059d9

00005a1c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5a1c:	b580      	push	{r7, lr}
    5a1e:	b086      	sub	sp, #24
    5a20:	af00      	add	r7, sp, #0
    5a22:	60f8      	str	r0, [r7, #12]
    5a24:	60b9      	str	r1, [r7, #8]
    5a26:	1dbb      	adds	r3, r7, #6
    5a28:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5a2a:	68fb      	ldr	r3, [r7, #12]
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5a30:	4b0f      	ldr	r3, [pc, #60]	; (5a70 <_usart_write_buffer+0x54>)
    5a32:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5a34:	68fb      	ldr	r3, [r7, #12]
    5a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5a38:	b29b      	uxth	r3, r3
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d003      	beq.n	5a46 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5a3e:	4b0d      	ldr	r3, [pc, #52]	; (5a74 <_usart_write_buffer+0x58>)
    5a40:	4798      	blx	r3
		return STATUS_BUSY;
    5a42:	2305      	movs	r3, #5
    5a44:	e010      	b.n	5a68 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    5a46:	68fb      	ldr	r3, [r7, #12]
    5a48:	1dba      	adds	r2, r7, #6
    5a4a:	8812      	ldrh	r2, [r2, #0]
    5a4c:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    5a4e:	4b09      	ldr	r3, [pc, #36]	; (5a74 <_usart_write_buffer+0x58>)
    5a50:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    5a52:	68fb      	ldr	r3, [r7, #12]
    5a54:	68ba      	ldr	r2, [r7, #8]
    5a56:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    5a58:	68fb      	ldr	r3, [r7, #12]
    5a5a:	2233      	movs	r2, #51	; 0x33
    5a5c:	2105      	movs	r1, #5
    5a5e:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    5a60:	697b      	ldr	r3, [r7, #20]
    5a62:	2201      	movs	r2, #1
    5a64:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    5a66:	2300      	movs	r3, #0
}
    5a68:	0018      	movs	r0, r3
    5a6a:	46bd      	mov	sp, r7
    5a6c:	b006      	add	sp, #24
    5a6e:	bd80      	pop	{r7, pc}
    5a70:	000059b1 	.word	0x000059b1
    5a74:	000059c5 	.word	0x000059c5

00005a78 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	b086      	sub	sp, #24
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	60f8      	str	r0, [r7, #12]
    5a80:	60b9      	str	r1, [r7, #8]
    5a82:	1dbb      	adds	r3, r7, #6
    5a84:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5a86:	68fb      	ldr	r3, [r7, #12]
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5a8c:	4b16      	ldr	r3, [pc, #88]	; (5ae8 <_usart_read_buffer+0x70>)
    5a8e:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5a90:	68fb      	ldr	r3, [r7, #12]
    5a92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5a94:	b29b      	uxth	r3, r3
    5a96:	2b00      	cmp	r3, #0
    5a98:	d003      	beq.n	5aa2 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5a9a:	4b14      	ldr	r3, [pc, #80]	; (5aec <_usart_read_buffer+0x74>)
    5a9c:	4798      	blx	r3
		return STATUS_BUSY;
    5a9e:	2305      	movs	r3, #5
    5aa0:	e01e      	b.n	5ae0 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    5aa2:	68fb      	ldr	r3, [r7, #12]
    5aa4:	1dba      	adds	r2, r7, #6
    5aa6:	8812      	ldrh	r2, [r2, #0]
    5aa8:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5aaa:	4b10      	ldr	r3, [pc, #64]	; (5aec <_usart_read_buffer+0x74>)
    5aac:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	68ba      	ldr	r2, [r7, #8]
    5ab2:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5ab4:	68fb      	ldr	r3, [r7, #12]
    5ab6:	2232      	movs	r2, #50	; 0x32
    5ab8:	2105      	movs	r1, #5
    5aba:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5abc:	697b      	ldr	r3, [r7, #20]
    5abe:	2204      	movs	r2, #4
    5ac0:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    5ac2:	68fb      	ldr	r3, [r7, #12]
    5ac4:	7a1b      	ldrb	r3, [r3, #8]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d002      	beq.n	5ad0 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5aca:	697b      	ldr	r3, [r7, #20]
    5acc:	2220      	movs	r2, #32
    5ace:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5ad0:	68fb      	ldr	r3, [r7, #12]
    5ad2:	7a5b      	ldrb	r3, [r3, #9]
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d002      	beq.n	5ade <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5ad8:	697b      	ldr	r3, [r7, #20]
    5ada:	2208      	movs	r2, #8
    5adc:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5ade:	2300      	movs	r3, #0
}
    5ae0:	0018      	movs	r0, r3
    5ae2:	46bd      	mov	sp, r7
    5ae4:	b006      	add	sp, #24
    5ae6:	bd80      	pop	{r7, pc}
    5ae8:	000059b1 	.word	0x000059b1
    5aec:	000059c5 	.word	0x000059c5

00005af0 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    5af0:	b580      	push	{r7, lr}
    5af2:	b084      	sub	sp, #16
    5af4:	af00      	add	r7, sp, #0
    5af6:	60f8      	str	r0, [r7, #12]
    5af8:	60b9      	str	r1, [r7, #8]
    5afa:	1dfb      	adds	r3, r7, #7
    5afc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5afe:	1dfb      	adds	r3, r7, #7
    5b00:	781b      	ldrb	r3, [r3, #0]
    5b02:	68fa      	ldr	r2, [r7, #12]
    5b04:	3302      	adds	r3, #2
    5b06:	009b      	lsls	r3, r3, #2
    5b08:	18d3      	adds	r3, r2, r3
    5b0a:	3304      	adds	r3, #4
    5b0c:	68ba      	ldr	r2, [r7, #8]
    5b0e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5b10:	68fb      	ldr	r3, [r7, #12]
    5b12:	2230      	movs	r2, #48	; 0x30
    5b14:	5c9b      	ldrb	r3, [r3, r2]
    5b16:	b25a      	sxtb	r2, r3
    5b18:	1dfb      	adds	r3, r7, #7
    5b1a:	781b      	ldrb	r3, [r3, #0]
    5b1c:	2101      	movs	r1, #1
    5b1e:	4099      	lsls	r1, r3
    5b20:	000b      	movs	r3, r1
    5b22:	b25b      	sxtb	r3, r3
    5b24:	4313      	orrs	r3, r2
    5b26:	b25b      	sxtb	r3, r3
    5b28:	b2d9      	uxtb	r1, r3
    5b2a:	68fb      	ldr	r3, [r7, #12]
    5b2c:	2230      	movs	r2, #48	; 0x30
    5b2e:	5499      	strb	r1, [r3, r2]
}
    5b30:	46c0      	nop			; (mov r8, r8)
    5b32:	46bd      	mov	sp, r7
    5b34:	b004      	add	sp, #16
    5b36:	bd80      	pop	{r7, pc}

00005b38 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5b38:	b580      	push	{r7, lr}
    5b3a:	b084      	sub	sp, #16
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	60f8      	str	r0, [r7, #12]
    5b40:	60b9      	str	r1, [r7, #8]
    5b42:	1dbb      	adds	r3, r7, #6
    5b44:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5b46:	1dbb      	adds	r3, r7, #6
    5b48:	881b      	ldrh	r3, [r3, #0]
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d101      	bne.n	5b52 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5b4e:	2317      	movs	r3, #23
    5b50:	e010      	b.n	5b74 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5b52:	68fb      	ldr	r3, [r7, #12]
    5b54:	79db      	ldrb	r3, [r3, #7]
    5b56:	2201      	movs	r2, #1
    5b58:	4053      	eors	r3, r2
    5b5a:	b2db      	uxtb	r3, r3
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	d001      	beq.n	5b64 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5b60:	231c      	movs	r3, #28
    5b62:	e007      	b.n	5b74 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5b64:	1dbb      	adds	r3, r7, #6
    5b66:	881a      	ldrh	r2, [r3, #0]
    5b68:	68b9      	ldr	r1, [r7, #8]
    5b6a:	68fb      	ldr	r3, [r7, #12]
    5b6c:	0018      	movs	r0, r3
    5b6e:	4b03      	ldr	r3, [pc, #12]	; (5b7c <usart_write_buffer_job+0x44>)
    5b70:	4798      	blx	r3
    5b72:	0003      	movs	r3, r0
}
    5b74:	0018      	movs	r0, r3
    5b76:	46bd      	mov	sp, r7
    5b78:	b004      	add	sp, #16
    5b7a:	bd80      	pop	{r7, pc}
    5b7c:	00005a1d 	.word	0x00005a1d

00005b80 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5b80:	b580      	push	{r7, lr}
    5b82:	b084      	sub	sp, #16
    5b84:	af00      	add	r7, sp, #0
    5b86:	60f8      	str	r0, [r7, #12]
    5b88:	60b9      	str	r1, [r7, #8]
    5b8a:	1dbb      	adds	r3, r7, #6
    5b8c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5b8e:	1dbb      	adds	r3, r7, #6
    5b90:	881b      	ldrh	r3, [r3, #0]
    5b92:	2b00      	cmp	r3, #0
    5b94:	d101      	bne.n	5b9a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5b96:	2317      	movs	r3, #23
    5b98:	e010      	b.n	5bbc <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5b9a:	68fb      	ldr	r3, [r7, #12]
    5b9c:	799b      	ldrb	r3, [r3, #6]
    5b9e:	2201      	movs	r2, #1
    5ba0:	4053      	eors	r3, r2
    5ba2:	b2db      	uxtb	r3, r3
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d001      	beq.n	5bac <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5ba8:	231c      	movs	r3, #28
    5baa:	e007      	b.n	5bbc <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5bac:	1dbb      	adds	r3, r7, #6
    5bae:	881a      	ldrh	r2, [r3, #0]
    5bb0:	68b9      	ldr	r1, [r7, #8]
    5bb2:	68fb      	ldr	r3, [r7, #12]
    5bb4:	0018      	movs	r0, r3
    5bb6:	4b03      	ldr	r3, [pc, #12]	; (5bc4 <usart_read_buffer_job+0x44>)
    5bb8:	4798      	blx	r3
    5bba:	0003      	movs	r3, r0
}
    5bbc:	0018      	movs	r0, r3
    5bbe:	46bd      	mov	sp, r7
    5bc0:	b004      	add	sp, #16
    5bc2:	bd80      	pop	{r7, pc}
    5bc4:	00005a79 	.word	0x00005a79

00005bc8 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b084      	sub	sp, #16
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
    5bd0:	000a      	movs	r2, r1
    5bd2:	1cfb      	adds	r3, r7, #3
    5bd4:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    5bd6:	1cfb      	adds	r3, r7, #3
    5bd8:	781b      	ldrb	r3, [r3, #0]
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d002      	beq.n	5be4 <usart_get_job_status+0x1c>
    5bde:	2b01      	cmp	r3, #1
    5be0:	d007      	beq.n	5bf2 <usart_get_job_status+0x2a>
    5be2:	e00d      	b.n	5c00 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    5be4:	230f      	movs	r3, #15
    5be6:	18fb      	adds	r3, r7, r3
    5be8:	687a      	ldr	r2, [r7, #4]
    5bea:	2132      	movs	r1, #50	; 0x32
    5bec:	5c52      	ldrb	r2, [r2, r1]
    5bee:	701a      	strb	r2, [r3, #0]
			break;
    5bf0:	e00b      	b.n	5c0a <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    5bf2:	230f      	movs	r3, #15
    5bf4:	18fb      	adds	r3, r7, r3
    5bf6:	687a      	ldr	r2, [r7, #4]
    5bf8:	2133      	movs	r1, #51	; 0x33
    5bfa:	5c52      	ldrb	r2, [r2, r1]
    5bfc:	701a      	strb	r2, [r3, #0]
			break;
    5bfe:	e004      	b.n	5c0a <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5c00:	230f      	movs	r3, #15
    5c02:	18fb      	adds	r3, r7, r3
    5c04:	2217      	movs	r2, #23
    5c06:	701a      	strb	r2, [r3, #0]
			break;
    5c08:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    5c0a:	230f      	movs	r3, #15
    5c0c:	18fb      	adds	r3, r7, r3
    5c0e:	781b      	ldrb	r3, [r3, #0]
}
    5c10:	0018      	movs	r0, r3
    5c12:	46bd      	mov	sp, r7
    5c14:	b004      	add	sp, #16
    5c16:	bd80      	pop	{r7, pc}

00005c18 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5c18:	b580      	push	{r7, lr}
    5c1a:	b088      	sub	sp, #32
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	0002      	movs	r2, r0
    5c20:	1dfb      	adds	r3, r7, #7
    5c22:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5c24:	1dfb      	adds	r3, r7, #7
    5c26:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    5c28:	4ba3      	ldr	r3, [pc, #652]	; (5eb8 <_usart_interrupt_handler+0x2a0>)
    5c2a:	0092      	lsls	r2, r2, #2
    5c2c:	58d3      	ldr	r3, [r2, r3]
    5c2e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5c30:	69bb      	ldr	r3, [r7, #24]
    5c32:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5c34:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5c36:	69bb      	ldr	r3, [r7, #24]
    5c38:	0018      	movs	r0, r3
    5c3a:	4ba0      	ldr	r3, [pc, #640]	; (5ebc <_usart_interrupt_handler+0x2a4>)
    5c3c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5c3e:	697b      	ldr	r3, [r7, #20]
    5c40:	7e1b      	ldrb	r3, [r3, #24]
    5c42:	b2da      	uxtb	r2, r3
    5c44:	2312      	movs	r3, #18
    5c46:	18fb      	adds	r3, r7, r3
    5c48:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5c4a:	697b      	ldr	r3, [r7, #20]
    5c4c:	7d9b      	ldrb	r3, [r3, #22]
    5c4e:	b2db      	uxtb	r3, r3
    5c50:	b29a      	uxth	r2, r3
    5c52:	2312      	movs	r3, #18
    5c54:	18fb      	adds	r3, r7, r3
    5c56:	2112      	movs	r1, #18
    5c58:	1879      	adds	r1, r7, r1
    5c5a:	8809      	ldrh	r1, [r1, #0]
    5c5c:	400a      	ands	r2, r1
    5c5e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5c60:	69bb      	ldr	r3, [r7, #24]
    5c62:	2230      	movs	r2, #48	; 0x30
    5c64:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    5c66:	69ba      	ldr	r2, [r7, #24]
    5c68:	2131      	movs	r1, #49	; 0x31
    5c6a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5c6c:	4013      	ands	r3, r2
    5c6e:	b2da      	uxtb	r2, r3
    5c70:	2310      	movs	r3, #16
    5c72:	18fb      	adds	r3, r7, r3
    5c74:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5c76:	2312      	movs	r3, #18
    5c78:	18fb      	adds	r3, r7, r3
    5c7a:	881b      	ldrh	r3, [r3, #0]
    5c7c:	2201      	movs	r2, #1
    5c7e:	4013      	ands	r3, r2
    5c80:	d044      	beq.n	5d0c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5c82:	69bb      	ldr	r3, [r7, #24]
    5c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5c86:	b29b      	uxth	r3, r3
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d03c      	beq.n	5d06 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5c8c:	69bb      	ldr	r3, [r7, #24]
    5c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c90:	781b      	ldrb	r3, [r3, #0]
    5c92:	b2da      	uxtb	r2, r3
    5c94:	231c      	movs	r3, #28
    5c96:	18fb      	adds	r3, r7, r3
    5c98:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5c9a:	69bb      	ldr	r3, [r7, #24]
    5c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c9e:	1c5a      	adds	r2, r3, #1
    5ca0:	69bb      	ldr	r3, [r7, #24]
    5ca2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5ca4:	69bb      	ldr	r3, [r7, #24]
    5ca6:	795b      	ldrb	r3, [r3, #5]
    5ca8:	2b01      	cmp	r3, #1
    5caa:	d113      	bne.n	5cd4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5cac:	69bb      	ldr	r3, [r7, #24]
    5cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5cb0:	781b      	ldrb	r3, [r3, #0]
    5cb2:	b2db      	uxtb	r3, r3
    5cb4:	021b      	lsls	r3, r3, #8
    5cb6:	b21a      	sxth	r2, r3
    5cb8:	231c      	movs	r3, #28
    5cba:	18fb      	adds	r3, r7, r3
    5cbc:	2100      	movs	r1, #0
    5cbe:	5e5b      	ldrsh	r3, [r3, r1]
    5cc0:	4313      	orrs	r3, r2
    5cc2:	b21a      	sxth	r2, r3
    5cc4:	231c      	movs	r3, #28
    5cc6:	18fb      	adds	r3, r7, r3
    5cc8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5cca:	69bb      	ldr	r3, [r7, #24]
    5ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5cce:	1c5a      	adds	r2, r3, #1
    5cd0:	69bb      	ldr	r3, [r7, #24]
    5cd2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5cd4:	231c      	movs	r3, #28
    5cd6:	18fb      	adds	r3, r7, r3
    5cd8:	881b      	ldrh	r3, [r3, #0]
    5cda:	05db      	lsls	r3, r3, #23
    5cdc:	0ddb      	lsrs	r3, r3, #23
    5cde:	b29a      	uxth	r2, r3
    5ce0:	697b      	ldr	r3, [r7, #20]
    5ce2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5ce4:	69bb      	ldr	r3, [r7, #24]
    5ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5ce8:	b29b      	uxth	r3, r3
    5cea:	3b01      	subs	r3, #1
    5cec:	b29b      	uxth	r3, r3
    5cee:	69ba      	ldr	r2, [r7, #24]
    5cf0:	1c19      	adds	r1, r3, #0
    5cf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d109      	bne.n	5d0c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5cf8:	697b      	ldr	r3, [r7, #20]
    5cfa:	2201      	movs	r2, #1
    5cfc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5cfe:	697b      	ldr	r3, [r7, #20]
    5d00:	2202      	movs	r2, #2
    5d02:	759a      	strb	r2, [r3, #22]
    5d04:	e002      	b.n	5d0c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5d06:	697b      	ldr	r3, [r7, #20]
    5d08:	2201      	movs	r2, #1
    5d0a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5d0c:	2312      	movs	r3, #18
    5d0e:	18fb      	adds	r3, r7, r3
    5d10:	881b      	ldrh	r3, [r3, #0]
    5d12:	2202      	movs	r2, #2
    5d14:	4013      	ands	r3, r2
    5d16:	d011      	beq.n	5d3c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5d18:	697b      	ldr	r3, [r7, #20]
    5d1a:	2202      	movs	r2, #2
    5d1c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5d1e:	69bb      	ldr	r3, [r7, #24]
    5d20:	2233      	movs	r2, #51	; 0x33
    5d22:	2100      	movs	r1, #0
    5d24:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5d26:	2310      	movs	r3, #16
    5d28:	18fb      	adds	r3, r7, r3
    5d2a:	881b      	ldrh	r3, [r3, #0]
    5d2c:	2201      	movs	r2, #1
    5d2e:	4013      	ands	r3, r2
    5d30:	d004      	beq.n	5d3c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5d32:	69bb      	ldr	r3, [r7, #24]
    5d34:	68db      	ldr	r3, [r3, #12]
    5d36:	69ba      	ldr	r2, [r7, #24]
    5d38:	0010      	movs	r0, r2
    5d3a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5d3c:	2312      	movs	r3, #18
    5d3e:	18fb      	adds	r3, r7, r3
    5d40:	881b      	ldrh	r3, [r3, #0]
    5d42:	2204      	movs	r2, #4
    5d44:	4013      	ands	r3, r2
    5d46:	d100      	bne.n	5d4a <_usart_interrupt_handler+0x132>
    5d48:	e0bd      	b.n	5ec6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5d4a:	69bb      	ldr	r3, [r7, #24]
    5d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5d4e:	b29b      	uxth	r3, r3
    5d50:	2b00      	cmp	r3, #0
    5d52:	d100      	bne.n	5d56 <_usart_interrupt_handler+0x13e>
    5d54:	e0b4      	b.n	5ec0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5d56:	697b      	ldr	r3, [r7, #20]
    5d58:	8b5b      	ldrh	r3, [r3, #26]
    5d5a:	b29b      	uxth	r3, r3
    5d5c:	b2da      	uxtb	r2, r3
    5d5e:	231f      	movs	r3, #31
    5d60:	18fb      	adds	r3, r7, r3
    5d62:	213f      	movs	r1, #63	; 0x3f
    5d64:	400a      	ands	r2, r1
    5d66:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5d68:	231f      	movs	r3, #31
    5d6a:	18fb      	adds	r3, r7, r3
    5d6c:	781b      	ldrb	r3, [r3, #0]
    5d6e:	2208      	movs	r2, #8
    5d70:	4013      	ands	r3, r2
    5d72:	d007      	beq.n	5d84 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5d74:	231f      	movs	r3, #31
    5d76:	18fb      	adds	r3, r7, r3
    5d78:	221f      	movs	r2, #31
    5d7a:	18ba      	adds	r2, r7, r2
    5d7c:	7812      	ldrb	r2, [r2, #0]
    5d7e:	2108      	movs	r1, #8
    5d80:	438a      	bics	r2, r1
    5d82:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5d84:	231f      	movs	r3, #31
    5d86:	18fb      	adds	r3, r7, r3
    5d88:	781b      	ldrb	r3, [r3, #0]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d050      	beq.n	5e30 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5d8e:	231f      	movs	r3, #31
    5d90:	18fb      	adds	r3, r7, r3
    5d92:	781b      	ldrb	r3, [r3, #0]
    5d94:	2202      	movs	r2, #2
    5d96:	4013      	ands	r3, r2
    5d98:	d007      	beq.n	5daa <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5d9a:	69bb      	ldr	r3, [r7, #24]
    5d9c:	2232      	movs	r2, #50	; 0x32
    5d9e:	211a      	movs	r1, #26
    5da0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5da2:	697b      	ldr	r3, [r7, #20]
    5da4:	2202      	movs	r2, #2
    5da6:	835a      	strh	r2, [r3, #26]
    5da8:	e036      	b.n	5e18 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5daa:	231f      	movs	r3, #31
    5dac:	18fb      	adds	r3, r7, r3
    5dae:	781b      	ldrb	r3, [r3, #0]
    5db0:	2204      	movs	r2, #4
    5db2:	4013      	ands	r3, r2
    5db4:	d007      	beq.n	5dc6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5db6:	69bb      	ldr	r3, [r7, #24]
    5db8:	2232      	movs	r2, #50	; 0x32
    5dba:	211e      	movs	r1, #30
    5dbc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5dbe:	697b      	ldr	r3, [r7, #20]
    5dc0:	2204      	movs	r2, #4
    5dc2:	835a      	strh	r2, [r3, #26]
    5dc4:	e028      	b.n	5e18 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5dc6:	231f      	movs	r3, #31
    5dc8:	18fb      	adds	r3, r7, r3
    5dca:	781b      	ldrb	r3, [r3, #0]
    5dcc:	2201      	movs	r2, #1
    5dce:	4013      	ands	r3, r2
    5dd0:	d007      	beq.n	5de2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5dd2:	69bb      	ldr	r3, [r7, #24]
    5dd4:	2232      	movs	r2, #50	; 0x32
    5dd6:	2113      	movs	r1, #19
    5dd8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5dda:	697b      	ldr	r3, [r7, #20]
    5ddc:	2201      	movs	r2, #1
    5dde:	835a      	strh	r2, [r3, #26]
    5de0:	e01a      	b.n	5e18 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5de2:	231f      	movs	r3, #31
    5de4:	18fb      	adds	r3, r7, r3
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	2210      	movs	r2, #16
    5dea:	4013      	ands	r3, r2
    5dec:	d007      	beq.n	5dfe <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5dee:	69bb      	ldr	r3, [r7, #24]
    5df0:	2232      	movs	r2, #50	; 0x32
    5df2:	2142      	movs	r1, #66	; 0x42
    5df4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5df6:	697b      	ldr	r3, [r7, #20]
    5df8:	2210      	movs	r2, #16
    5dfa:	835a      	strh	r2, [r3, #26]
    5dfc:	e00c      	b.n	5e18 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5dfe:	231f      	movs	r3, #31
    5e00:	18fb      	adds	r3, r7, r3
    5e02:	781b      	ldrb	r3, [r3, #0]
    5e04:	2220      	movs	r2, #32
    5e06:	4013      	ands	r3, r2
    5e08:	d006      	beq.n	5e18 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5e0a:	69bb      	ldr	r3, [r7, #24]
    5e0c:	2232      	movs	r2, #50	; 0x32
    5e0e:	2141      	movs	r1, #65	; 0x41
    5e10:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5e12:	697b      	ldr	r3, [r7, #20]
    5e14:	2220      	movs	r2, #32
    5e16:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5e18:	2310      	movs	r3, #16
    5e1a:	18fb      	adds	r3, r7, r3
    5e1c:	881b      	ldrh	r3, [r3, #0]
    5e1e:	2204      	movs	r2, #4
    5e20:	4013      	ands	r3, r2
				if (callback_status
    5e22:	d050      	beq.n	5ec6 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5e24:	69bb      	ldr	r3, [r7, #24]
    5e26:	695b      	ldr	r3, [r3, #20]
    5e28:	69ba      	ldr	r2, [r7, #24]
    5e2a:	0010      	movs	r0, r2
    5e2c:	4798      	blx	r3
    5e2e:	e04a      	b.n	5ec6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5e30:	697b      	ldr	r3, [r7, #20]
    5e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5e34:	b29a      	uxth	r2, r3
    5e36:	230e      	movs	r3, #14
    5e38:	18fb      	adds	r3, r7, r3
    5e3a:	05d2      	lsls	r2, r2, #23
    5e3c:	0dd2      	lsrs	r2, r2, #23
    5e3e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5e40:	69bb      	ldr	r3, [r7, #24]
    5e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e44:	220e      	movs	r2, #14
    5e46:	18ba      	adds	r2, r7, r2
    5e48:	8812      	ldrh	r2, [r2, #0]
    5e4a:	b2d2      	uxtb	r2, r2
    5e4c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5e4e:	69bb      	ldr	r3, [r7, #24]
    5e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e52:	1c5a      	adds	r2, r3, #1
    5e54:	69bb      	ldr	r3, [r7, #24]
    5e56:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5e58:	69bb      	ldr	r3, [r7, #24]
    5e5a:	795b      	ldrb	r3, [r3, #5]
    5e5c:	2b01      	cmp	r3, #1
    5e5e:	d10d      	bne.n	5e7c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5e60:	69bb      	ldr	r3, [r7, #24]
    5e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e64:	220e      	movs	r2, #14
    5e66:	18ba      	adds	r2, r7, r2
    5e68:	8812      	ldrh	r2, [r2, #0]
    5e6a:	0a12      	lsrs	r2, r2, #8
    5e6c:	b292      	uxth	r2, r2
    5e6e:	b2d2      	uxtb	r2, r2
    5e70:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5e72:	69bb      	ldr	r3, [r7, #24]
    5e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e76:	1c5a      	adds	r2, r3, #1
    5e78:	69bb      	ldr	r3, [r7, #24]
    5e7a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5e7c:	69bb      	ldr	r3, [r7, #24]
    5e7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5e80:	b29b      	uxth	r3, r3
    5e82:	3b01      	subs	r3, #1
    5e84:	b29b      	uxth	r3, r3
    5e86:	69ba      	ldr	r2, [r7, #24]
    5e88:	1c19      	adds	r1, r3, #0
    5e8a:	8591      	strh	r1, [r2, #44]	; 0x2c
    5e8c:	2b00      	cmp	r3, #0
    5e8e:	d11a      	bne.n	5ec6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5e90:	697b      	ldr	r3, [r7, #20]
    5e92:	2204      	movs	r2, #4
    5e94:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5e96:	69bb      	ldr	r3, [r7, #24]
    5e98:	2232      	movs	r2, #50	; 0x32
    5e9a:	2100      	movs	r1, #0
    5e9c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5e9e:	2310      	movs	r3, #16
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	881b      	ldrh	r3, [r3, #0]
    5ea4:	2202      	movs	r2, #2
    5ea6:	4013      	ands	r3, r2
					if (callback_status
    5ea8:	d00d      	beq.n	5ec6 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5eaa:	69bb      	ldr	r3, [r7, #24]
    5eac:	691b      	ldr	r3, [r3, #16]
    5eae:	69ba      	ldr	r2, [r7, #24]
    5eb0:	0010      	movs	r0, r2
    5eb2:	4798      	blx	r3
    5eb4:	e007      	b.n	5ec6 <_usart_interrupt_handler+0x2ae>
    5eb6:	46c0      	nop			; (mov r8, r8)
    5eb8:	200009d4 	.word	0x200009d4
    5ebc:	000059f9 	.word	0x000059f9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5ec0:	697b      	ldr	r3, [r7, #20]
    5ec2:	2204      	movs	r2, #4
    5ec4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5ec6:	2312      	movs	r3, #18
    5ec8:	18fb      	adds	r3, r7, r3
    5eca:	881b      	ldrh	r3, [r3, #0]
    5ecc:	2210      	movs	r2, #16
    5ece:	4013      	ands	r3, r2
    5ed0:	d010      	beq.n	5ef4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5ed2:	697b      	ldr	r3, [r7, #20]
    5ed4:	2210      	movs	r2, #16
    5ed6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5ed8:	697b      	ldr	r3, [r7, #20]
    5eda:	2210      	movs	r2, #16
    5edc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5ede:	2310      	movs	r3, #16
    5ee0:	18fb      	adds	r3, r7, r3
    5ee2:	881b      	ldrh	r3, [r3, #0]
    5ee4:	2210      	movs	r2, #16
    5ee6:	4013      	ands	r3, r2
    5ee8:	d004      	beq.n	5ef4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5eea:	69bb      	ldr	r3, [r7, #24]
    5eec:	69db      	ldr	r3, [r3, #28]
    5eee:	69ba      	ldr	r2, [r7, #24]
    5ef0:	0010      	movs	r0, r2
    5ef2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5ef4:	2312      	movs	r3, #18
    5ef6:	18fb      	adds	r3, r7, r3
    5ef8:	881b      	ldrh	r3, [r3, #0]
    5efa:	2220      	movs	r2, #32
    5efc:	4013      	ands	r3, r2
    5efe:	d010      	beq.n	5f22 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5f00:	697b      	ldr	r3, [r7, #20]
    5f02:	2220      	movs	r2, #32
    5f04:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5f06:	697b      	ldr	r3, [r7, #20]
    5f08:	2220      	movs	r2, #32
    5f0a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5f0c:	2310      	movs	r3, #16
    5f0e:	18fb      	adds	r3, r7, r3
    5f10:	881b      	ldrh	r3, [r3, #0]
    5f12:	2208      	movs	r2, #8
    5f14:	4013      	ands	r3, r2
    5f16:	d004      	beq.n	5f22 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5f18:	69bb      	ldr	r3, [r7, #24]
    5f1a:	699b      	ldr	r3, [r3, #24]
    5f1c:	69ba      	ldr	r2, [r7, #24]
    5f1e:	0010      	movs	r0, r2
    5f20:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5f22:	2312      	movs	r3, #18
    5f24:	18fb      	adds	r3, r7, r3
    5f26:	881b      	ldrh	r3, [r3, #0]
    5f28:	2208      	movs	r2, #8
    5f2a:	4013      	ands	r3, r2
    5f2c:	d010      	beq.n	5f50 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5f2e:	697b      	ldr	r3, [r7, #20]
    5f30:	2208      	movs	r2, #8
    5f32:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5f34:	697b      	ldr	r3, [r7, #20]
    5f36:	2208      	movs	r2, #8
    5f38:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5f3a:	2310      	movs	r3, #16
    5f3c:	18fb      	adds	r3, r7, r3
    5f3e:	881b      	ldrh	r3, [r3, #0]
    5f40:	2220      	movs	r2, #32
    5f42:	4013      	ands	r3, r2
    5f44:	d004      	beq.n	5f50 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5f46:	69bb      	ldr	r3, [r7, #24]
    5f48:	6a1b      	ldr	r3, [r3, #32]
    5f4a:	69ba      	ldr	r2, [r7, #24]
    5f4c:	0010      	movs	r0, r2
    5f4e:	4798      	blx	r3
		}
	}
#endif
}
    5f50:	46c0      	nop			; (mov r8, r8)
    5f52:	46bd      	mov	sp, r7
    5f54:	b008      	add	sp, #32
    5f56:	bd80      	pop	{r7, pc}

00005f58 <system_gclk_gen_get_config_defaults>:
{
    5f58:	b580      	push	{r7, lr}
    5f5a:	b082      	sub	sp, #8
    5f5c:	af00      	add	r7, sp, #0
    5f5e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5f60:	687b      	ldr	r3, [r7, #4]
    5f62:	2201      	movs	r2, #1
    5f64:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	2200      	movs	r2, #0
    5f6a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	2206      	movs	r2, #6
    5f70:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5f72:	687b      	ldr	r3, [r7, #4]
    5f74:	2200      	movs	r2, #0
    5f76:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5f78:	687b      	ldr	r3, [r7, #4]
    5f7a:	2200      	movs	r2, #0
    5f7c:	725a      	strb	r2, [r3, #9]
}
    5f7e:	46c0      	nop			; (mov r8, r8)
    5f80:	46bd      	mov	sp, r7
    5f82:	b002      	add	sp, #8
    5f84:	bd80      	pop	{r7, pc}

00005f86 <system_gclk_chan_get_config_defaults>:
{
    5f86:	b580      	push	{r7, lr}
    5f88:	b082      	sub	sp, #8
    5f8a:	af00      	add	r7, sp, #0
    5f8c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5f8e:	687b      	ldr	r3, [r7, #4]
    5f90:	2200      	movs	r2, #0
    5f92:	701a      	strb	r2, [r3, #0]
}
    5f94:	46c0      	nop			; (mov r8, r8)
    5f96:	46bd      	mov	sp, r7
    5f98:	b002      	add	sp, #8
    5f9a:	bd80      	pop	{r7, pc}

00005f9c <system_clock_source_xosc32k_get_config_defaults>:
{
    5f9c:	b580      	push	{r7, lr}
    5f9e:	b082      	sub	sp, #8
    5fa0:	af00      	add	r7, sp, #0
    5fa2:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	2200      	movs	r2, #0
    5fa8:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5faa:	687b      	ldr	r3, [r7, #4]
    5fac:	2204      	movs	r2, #4
    5fae:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	2200      	movs	r2, #0
    5fb4:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5fb6:	687b      	ldr	r3, [r7, #4]
    5fb8:	2280      	movs	r2, #128	; 0x80
    5fba:	0212      	lsls	r2, r2, #8
    5fbc:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	2200      	movs	r2, #0
    5fc2:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	2201      	movs	r2, #1
    5fc8:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5fca:	687b      	ldr	r3, [r7, #4]
    5fcc:	2200      	movs	r2, #0
    5fce:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	2201      	movs	r2, #1
    5fd4:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	2200      	movs	r2, #0
    5fda:	739a      	strb	r2, [r3, #14]
}
    5fdc:	46c0      	nop			; (mov r8, r8)
    5fde:	46bd      	mov	sp, r7
    5fe0:	b002      	add	sp, #8
    5fe2:	bd80      	pop	{r7, pc}

00005fe4 <system_clock_source_osc8m_get_config_defaults>:
{
    5fe4:	b580      	push	{r7, lr}
    5fe6:	b082      	sub	sp, #8
    5fe8:	af00      	add	r7, sp, #0
    5fea:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	2203      	movs	r2, #3
    5ff0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	2200      	movs	r2, #0
    5ff6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	2201      	movs	r2, #1
    5ffc:	709a      	strb	r2, [r3, #2]
}
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	46bd      	mov	sp, r7
    6002:	b002      	add	sp, #8
    6004:	bd80      	pop	{r7, pc}

00006006 <system_clock_source_dfll_get_config_defaults>:
{
    6006:	b580      	push	{r7, lr}
    6008:	b082      	sub	sp, #8
    600a:	af00      	add	r7, sp, #0
    600c:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    600e:	687b      	ldr	r3, [r7, #4]
    6010:	2200      	movs	r2, #0
    6012:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	2200      	movs	r2, #0
    6018:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	2200      	movs	r2, #0
    601e:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	2200      	movs	r2, #0
    6024:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6026:	687b      	ldr	r3, [r7, #4]
    6028:	2200      	movs	r2, #0
    602a:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	2201      	movs	r2, #1
    6030:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    6032:	687b      	ldr	r3, [r7, #4]
    6034:	2207      	movs	r2, #7
    6036:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	223f      	movs	r2, #63	; 0x3f
    603c:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    603e:	687b      	ldr	r3, [r7, #4]
    6040:	2201      	movs	r2, #1
    6042:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    6044:	687b      	ldr	r3, [r7, #4]
    6046:	2201      	movs	r2, #1
    6048:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	2206      	movs	r2, #6
    604e:	821a      	strh	r2, [r3, #16]
}
    6050:	46c0      	nop			; (mov r8, r8)
    6052:	46bd      	mov	sp, r7
    6054:	b002      	add	sp, #8
    6056:	bd80      	pop	{r7, pc}

00006058 <system_cpu_clock_set_divider>:
{
    6058:	b580      	push	{r7, lr}
    605a:	b082      	sub	sp, #8
    605c:	af00      	add	r7, sp, #0
    605e:	0002      	movs	r2, r0
    6060:	1dfb      	adds	r3, r7, #7
    6062:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    6064:	4a03      	ldr	r2, [pc, #12]	; (6074 <system_cpu_clock_set_divider+0x1c>)
    6066:	1dfb      	adds	r3, r7, #7
    6068:	781b      	ldrb	r3, [r3, #0]
    606a:	7213      	strb	r3, [r2, #8]
}
    606c:	46c0      	nop			; (mov r8, r8)
    606e:	46bd      	mov	sp, r7
    6070:	b002      	add	sp, #8
    6072:	bd80      	pop	{r7, pc}
    6074:	40000400 	.word	0x40000400

00006078 <system_apb_clock_set_divider>:
{
    6078:	b580      	push	{r7, lr}
    607a:	b082      	sub	sp, #8
    607c:	af00      	add	r7, sp, #0
    607e:	0002      	movs	r2, r0
    6080:	1dfb      	adds	r3, r7, #7
    6082:	701a      	strb	r2, [r3, #0]
    6084:	1dbb      	adds	r3, r7, #6
    6086:	1c0a      	adds	r2, r1, #0
    6088:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    608a:	1dfb      	adds	r3, r7, #7
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	2b01      	cmp	r3, #1
    6090:	d008      	beq.n	60a4 <system_apb_clock_set_divider+0x2c>
    6092:	2b02      	cmp	r3, #2
    6094:	d00b      	beq.n	60ae <system_apb_clock_set_divider+0x36>
    6096:	2b00      	cmp	r3, #0
    6098:	d10e      	bne.n	60b8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    609a:	4a0b      	ldr	r2, [pc, #44]	; (60c8 <system_apb_clock_set_divider+0x50>)
    609c:	1dbb      	adds	r3, r7, #6
    609e:	781b      	ldrb	r3, [r3, #0]
    60a0:	7253      	strb	r3, [r2, #9]
			break;
    60a2:	e00b      	b.n	60bc <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    60a4:	4a08      	ldr	r2, [pc, #32]	; (60c8 <system_apb_clock_set_divider+0x50>)
    60a6:	1dbb      	adds	r3, r7, #6
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	7293      	strb	r3, [r2, #10]
			break;
    60ac:	e006      	b.n	60bc <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    60ae:	4a06      	ldr	r2, [pc, #24]	; (60c8 <system_apb_clock_set_divider+0x50>)
    60b0:	1dbb      	adds	r3, r7, #6
    60b2:	781b      	ldrb	r3, [r3, #0]
    60b4:	72d3      	strb	r3, [r2, #11]
			break;
    60b6:	e001      	b.n	60bc <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    60b8:	2317      	movs	r3, #23
    60ba:	e000      	b.n	60be <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    60bc:	2300      	movs	r3, #0
}
    60be:	0018      	movs	r0, r3
    60c0:	46bd      	mov	sp, r7
    60c2:	b002      	add	sp, #8
    60c4:	bd80      	pop	{r7, pc}
    60c6:	46c0      	nop			; (mov r8, r8)
    60c8:	40000400 	.word	0x40000400

000060cc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    60cc:	b580      	push	{r7, lr}
    60ce:	b082      	sub	sp, #8
    60d0:	af00      	add	r7, sp, #0
    60d2:	0002      	movs	r2, r0
    60d4:	1dfb      	adds	r3, r7, #7
    60d6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    60d8:	4a08      	ldr	r2, [pc, #32]	; (60fc <system_flash_set_waitstates+0x30>)
    60da:	1dfb      	adds	r3, r7, #7
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	210f      	movs	r1, #15
    60e0:	400b      	ands	r3, r1
    60e2:	b2d9      	uxtb	r1, r3
    60e4:	6853      	ldr	r3, [r2, #4]
    60e6:	200f      	movs	r0, #15
    60e8:	4001      	ands	r1, r0
    60ea:	0049      	lsls	r1, r1, #1
    60ec:	201e      	movs	r0, #30
    60ee:	4383      	bics	r3, r0
    60f0:	430b      	orrs	r3, r1
    60f2:	6053      	str	r3, [r2, #4]
}
    60f4:	46c0      	nop			; (mov r8, r8)
    60f6:	46bd      	mov	sp, r7
    60f8:	b002      	add	sp, #8
    60fa:	bd80      	pop	{r7, pc}
    60fc:	41004000 	.word	0x41004000

00006100 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    6100:	b580      	push	{r7, lr}
    6102:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6104:	46c0      	nop			; (mov r8, r8)
    6106:	4b04      	ldr	r3, [pc, #16]	; (6118 <_system_dfll_wait_for_sync+0x18>)
    6108:	68db      	ldr	r3, [r3, #12]
    610a:	2210      	movs	r2, #16
    610c:	4013      	ands	r3, r2
    610e:	d0fa      	beq.n	6106 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    6110:	46c0      	nop			; (mov r8, r8)
    6112:	46bd      	mov	sp, r7
    6114:	bd80      	pop	{r7, pc}
    6116:	46c0      	nop			; (mov r8, r8)
    6118:	40000800 	.word	0x40000800

0000611c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    611c:	b580      	push	{r7, lr}
    611e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6120:	4b0c      	ldr	r3, [pc, #48]	; (6154 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6122:	2202      	movs	r2, #2
    6124:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6126:	4b0c      	ldr	r3, [pc, #48]	; (6158 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6128:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    612a:	4a0a      	ldr	r2, [pc, #40]	; (6154 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    612c:	4b0b      	ldr	r3, [pc, #44]	; (615c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    612e:	689b      	ldr	r3, [r3, #8]
    6130:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6132:	4a08      	ldr	r2, [pc, #32]	; (6154 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6134:	4b09      	ldr	r3, [pc, #36]	; (615c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6136:	685b      	ldr	r3, [r3, #4]
    6138:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    613a:	4b06      	ldr	r3, [pc, #24]	; (6154 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    613c:	2200      	movs	r2, #0
    613e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6140:	4b05      	ldr	r3, [pc, #20]	; (6158 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6142:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6144:	4a03      	ldr	r2, [pc, #12]	; (6154 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6146:	4b05      	ldr	r3, [pc, #20]	; (615c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6148:	681b      	ldr	r3, [r3, #0]
    614a:	b29b      	uxth	r3, r3
    614c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    614e:	46c0      	nop			; (mov r8, r8)
    6150:	46bd      	mov	sp, r7
    6152:	bd80      	pop	{r7, pc}
    6154:	40000800 	.word	0x40000800
    6158:	00006101 	.word	0x00006101
    615c:	20000160 	.word	0x20000160

00006160 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6160:	b580      	push	{r7, lr}
    6162:	b082      	sub	sp, #8
    6164:	af00      	add	r7, sp, #0
    6166:	0002      	movs	r2, r0
    6168:	1dfb      	adds	r3, r7, #7
    616a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    616c:	1dfb      	adds	r3, r7, #7
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	2b08      	cmp	r3, #8
    6172:	d841      	bhi.n	61f8 <system_clock_source_get_hz+0x98>
    6174:	009a      	lsls	r2, r3, #2
    6176:	4b23      	ldr	r3, [pc, #140]	; (6204 <system_clock_source_get_hz+0xa4>)
    6178:	18d3      	adds	r3, r2, r3
    617a:	681b      	ldr	r3, [r3, #0]
    617c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    617e:	4b22      	ldr	r3, [pc, #136]	; (6208 <system_clock_source_get_hz+0xa8>)
    6180:	691b      	ldr	r3, [r3, #16]
    6182:	e03a      	b.n	61fa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6184:	4b21      	ldr	r3, [pc, #132]	; (620c <system_clock_source_get_hz+0xac>)
    6186:	6a1b      	ldr	r3, [r3, #32]
    6188:	059b      	lsls	r3, r3, #22
    618a:	0f9b      	lsrs	r3, r3, #30
    618c:	b2db      	uxtb	r3, r3
    618e:	001a      	movs	r2, r3
    6190:	4b1f      	ldr	r3, [pc, #124]	; (6210 <system_clock_source_get_hz+0xb0>)
    6192:	40d3      	lsrs	r3, r2
    6194:	e031      	b.n	61fa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    6196:	2380      	movs	r3, #128	; 0x80
    6198:	021b      	lsls	r3, r3, #8
    619a:	e02e      	b.n	61fa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    619c:	2380      	movs	r3, #128	; 0x80
    619e:	021b      	lsls	r3, r3, #8
    61a0:	e02b      	b.n	61fa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    61a2:	4b19      	ldr	r3, [pc, #100]	; (6208 <system_clock_source_get_hz+0xa8>)
    61a4:	695b      	ldr	r3, [r3, #20]
    61a6:	e028      	b.n	61fa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    61a8:	4b17      	ldr	r3, [pc, #92]	; (6208 <system_clock_source_get_hz+0xa8>)
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	2202      	movs	r2, #2
    61ae:	4013      	ands	r3, r2
    61b0:	d101      	bne.n	61b6 <system_clock_source_get_hz+0x56>
			return 0;
    61b2:	2300      	movs	r3, #0
    61b4:	e021      	b.n	61fa <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    61b6:	4b17      	ldr	r3, [pc, #92]	; (6214 <system_clock_source_get_hz+0xb4>)
    61b8:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    61ba:	4b13      	ldr	r3, [pc, #76]	; (6208 <system_clock_source_get_hz+0xa8>)
    61bc:	681b      	ldr	r3, [r3, #0]
    61be:	2224      	movs	r2, #36	; 0x24
    61c0:	4013      	ands	r3, r2
    61c2:	2b04      	cmp	r3, #4
    61c4:	d109      	bne.n	61da <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    61c6:	2000      	movs	r0, #0
    61c8:	4b13      	ldr	r3, [pc, #76]	; (6218 <system_clock_source_get_hz+0xb8>)
    61ca:	4798      	blx	r3
    61cc:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    61ce:	4b0e      	ldr	r3, [pc, #56]	; (6208 <system_clock_source_get_hz+0xa8>)
    61d0:	689b      	ldr	r3, [r3, #8]
    61d2:	041b      	lsls	r3, r3, #16
    61d4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    61d6:	4353      	muls	r3, r2
    61d8:	e00f      	b.n	61fa <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    61da:	4b10      	ldr	r3, [pc, #64]	; (621c <system_clock_source_get_hz+0xbc>)
    61dc:	e00d      	b.n	61fa <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    61de:	4a0b      	ldr	r2, [pc, #44]	; (620c <system_clock_source_get_hz+0xac>)
    61e0:	2350      	movs	r3, #80	; 0x50
    61e2:	5cd3      	ldrb	r3, [r2, r3]
    61e4:	b2db      	uxtb	r3, r3
    61e6:	001a      	movs	r2, r3
    61e8:	2304      	movs	r3, #4
    61ea:	4013      	ands	r3, r2
    61ec:	d101      	bne.n	61f2 <system_clock_source_get_hz+0x92>
			return 0;
    61ee:	2300      	movs	r3, #0
    61f0:	e003      	b.n	61fa <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    61f2:	4b05      	ldr	r3, [pc, #20]	; (6208 <system_clock_source_get_hz+0xa8>)
    61f4:	68db      	ldr	r3, [r3, #12]
    61f6:	e000      	b.n	61fa <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    61f8:	2300      	movs	r3, #0
	}
}
    61fa:	0018      	movs	r0, r3
    61fc:	46bd      	mov	sp, r7
    61fe:	b002      	add	sp, #8
    6200:	bd80      	pop	{r7, pc}
    6202:	46c0      	nop			; (mov r8, r8)
    6204:	0000c354 	.word	0x0000c354
    6208:	20000160 	.word	0x20000160
    620c:	40000800 	.word	0x40000800
    6210:	007a1200 	.word	0x007a1200
    6214:	00006101 	.word	0x00006101
    6218:	00006cb1 	.word	0x00006cb1
    621c:	02dc6c00 	.word	0x02dc6c00

00006220 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    6220:	b580      	push	{r7, lr}
    6222:	b084      	sub	sp, #16
    6224:	af00      	add	r7, sp, #0
    6226:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    6228:	4b1a      	ldr	r3, [pc, #104]	; (6294 <system_clock_source_osc8m_set_config+0x74>)
    622a:	6a1b      	ldr	r3, [r3, #32]
    622c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	781b      	ldrb	r3, [r3, #0]
    6232:	1c1a      	adds	r2, r3, #0
    6234:	2303      	movs	r3, #3
    6236:	4013      	ands	r3, r2
    6238:	b2da      	uxtb	r2, r3
    623a:	230d      	movs	r3, #13
    623c:	18fb      	adds	r3, r7, r3
    623e:	2103      	movs	r1, #3
    6240:	400a      	ands	r2, r1
    6242:	0010      	movs	r0, r2
    6244:	781a      	ldrb	r2, [r3, #0]
    6246:	2103      	movs	r1, #3
    6248:	438a      	bics	r2, r1
    624a:	1c11      	adds	r1, r2, #0
    624c:	1c02      	adds	r2, r0, #0
    624e:	430a      	orrs	r2, r1
    6250:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	789a      	ldrb	r2, [r3, #2]
    6256:	230c      	movs	r3, #12
    6258:	18fb      	adds	r3, r7, r3
    625a:	01d0      	lsls	r0, r2, #7
    625c:	781a      	ldrb	r2, [r3, #0]
    625e:	217f      	movs	r1, #127	; 0x7f
    6260:	400a      	ands	r2, r1
    6262:	1c11      	adds	r1, r2, #0
    6264:	1c02      	adds	r2, r0, #0
    6266:	430a      	orrs	r2, r1
    6268:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	785a      	ldrb	r2, [r3, #1]
    626e:	230c      	movs	r3, #12
    6270:	18fb      	adds	r3, r7, r3
    6272:	2101      	movs	r1, #1
    6274:	400a      	ands	r2, r1
    6276:	0190      	lsls	r0, r2, #6
    6278:	781a      	ldrb	r2, [r3, #0]
    627a:	2140      	movs	r1, #64	; 0x40
    627c:	438a      	bics	r2, r1
    627e:	1c11      	adds	r1, r2, #0
    6280:	1c02      	adds	r2, r0, #0
    6282:	430a      	orrs	r2, r1
    6284:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    6286:	4b03      	ldr	r3, [pc, #12]	; (6294 <system_clock_source_osc8m_set_config+0x74>)
    6288:	68fa      	ldr	r2, [r7, #12]
    628a:	621a      	str	r2, [r3, #32]
}
    628c:	46c0      	nop			; (mov r8, r8)
    628e:	46bd      	mov	sp, r7
    6290:	b004      	add	sp, #16
    6292:	bd80      	pop	{r7, pc}
    6294:	40000800 	.word	0x40000800

00006298 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6298:	b580      	push	{r7, lr}
    629a:	b084      	sub	sp, #16
    629c:	af00      	add	r7, sp, #0
    629e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    62a0:	4a43      	ldr	r2, [pc, #268]	; (63b0 <system_clock_source_xosc32k_set_config+0x118>)
    62a2:	230c      	movs	r3, #12
    62a4:	18fb      	adds	r3, r7, r3
    62a6:	8a92      	ldrh	r2, [r2, #20]
    62a8:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    62aa:	687b      	ldr	r3, [r7, #4]
    62ac:	785b      	ldrb	r3, [r3, #1]
    62ae:	1c1a      	adds	r2, r3, #0
    62b0:	2307      	movs	r3, #7
    62b2:	4013      	ands	r3, r2
    62b4:	b2da      	uxtb	r2, r3
    62b6:	230c      	movs	r3, #12
    62b8:	18fb      	adds	r3, r7, r3
    62ba:	2107      	movs	r1, #7
    62bc:	400a      	ands	r2, r1
    62be:	0010      	movs	r0, r2
    62c0:	785a      	ldrb	r2, [r3, #1]
    62c2:	2107      	movs	r1, #7
    62c4:	438a      	bics	r2, r1
    62c6:	1c11      	adds	r1, r2, #0
    62c8:	1c02      	adds	r2, r0, #0
    62ca:	430a      	orrs	r2, r1
    62cc:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	781b      	ldrb	r3, [r3, #0]
    62d2:	2b00      	cmp	r3, #0
    62d4:	d106      	bne.n	62e4 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    62d6:	230c      	movs	r3, #12
    62d8:	18fb      	adds	r3, r7, r3
    62da:	781a      	ldrb	r2, [r3, #0]
    62dc:	2104      	movs	r1, #4
    62de:	430a      	orrs	r2, r1
    62e0:	701a      	strb	r2, [r3, #0]
    62e2:	e005      	b.n	62f0 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    62e4:	230c      	movs	r3, #12
    62e6:	18fb      	adds	r3, r7, r3
    62e8:	781a      	ldrb	r2, [r3, #0]
    62ea:	2104      	movs	r1, #4
    62ec:	438a      	bics	r2, r1
    62ee:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    62f0:	687b      	ldr	r3, [r7, #4]
    62f2:	789a      	ldrb	r2, [r3, #2]
    62f4:	230c      	movs	r3, #12
    62f6:	18fb      	adds	r3, r7, r3
    62f8:	2101      	movs	r1, #1
    62fa:	400a      	ands	r2, r1
    62fc:	0150      	lsls	r0, r2, #5
    62fe:	781a      	ldrb	r2, [r3, #0]
    6300:	2120      	movs	r1, #32
    6302:	438a      	bics	r2, r1
    6304:	1c11      	adds	r1, r2, #0
    6306:	1c02      	adds	r2, r0, #0
    6308:	430a      	orrs	r2, r1
    630a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	78da      	ldrb	r2, [r3, #3]
    6310:	230c      	movs	r3, #12
    6312:	18fb      	adds	r3, r7, r3
    6314:	2101      	movs	r1, #1
    6316:	400a      	ands	r2, r1
    6318:	0110      	lsls	r0, r2, #4
    631a:	781a      	ldrb	r2, [r3, #0]
    631c:	2110      	movs	r1, #16
    631e:	438a      	bics	r2, r1
    6320:	1c11      	adds	r1, r2, #0
    6322:	1c02      	adds	r2, r0, #0
    6324:	430a      	orrs	r2, r1
    6326:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	791a      	ldrb	r2, [r3, #4]
    632c:	230c      	movs	r3, #12
    632e:	18fb      	adds	r3, r7, r3
    6330:	2101      	movs	r1, #1
    6332:	400a      	ands	r2, r1
    6334:	00d0      	lsls	r0, r2, #3
    6336:	781a      	ldrb	r2, [r3, #0]
    6338:	2108      	movs	r1, #8
    633a:	438a      	bics	r2, r1
    633c:	1c11      	adds	r1, r2, #0
    633e:	1c02      	adds	r2, r0, #0
    6340:	430a      	orrs	r2, r1
    6342:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	7b5a      	ldrb	r2, [r3, #13]
    6348:	230c      	movs	r3, #12
    634a:	18fb      	adds	r3, r7, r3
    634c:	01d0      	lsls	r0, r2, #7
    634e:	781a      	ldrb	r2, [r3, #0]
    6350:	217f      	movs	r1, #127	; 0x7f
    6352:	400a      	ands	r2, r1
    6354:	1c11      	adds	r1, r2, #0
    6356:	1c02      	adds	r2, r0, #0
    6358:	430a      	orrs	r2, r1
    635a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	7b1a      	ldrb	r2, [r3, #12]
    6360:	230c      	movs	r3, #12
    6362:	18fb      	adds	r3, r7, r3
    6364:	2101      	movs	r1, #1
    6366:	400a      	ands	r2, r1
    6368:	0190      	lsls	r0, r2, #6
    636a:	781a      	ldrb	r2, [r3, #0]
    636c:	2140      	movs	r1, #64	; 0x40
    636e:	438a      	bics	r2, r1
    6370:	1c11      	adds	r1, r2, #0
    6372:	1c02      	adds	r2, r0, #0
    6374:	430a      	orrs	r2, r1
    6376:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    6378:	687b      	ldr	r3, [r7, #4]
    637a:	7b9a      	ldrb	r2, [r3, #14]
    637c:	230c      	movs	r3, #12
    637e:	18fb      	adds	r3, r7, r3
    6380:	2101      	movs	r1, #1
    6382:	400a      	ands	r2, r1
    6384:	0110      	lsls	r0, r2, #4
    6386:	785a      	ldrb	r2, [r3, #1]
    6388:	2110      	movs	r1, #16
    638a:	438a      	bics	r2, r1
    638c:	1c11      	adds	r1, r2, #0
    638e:	1c02      	adds	r2, r0, #0
    6390:	430a      	orrs	r2, r1
    6392:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6394:	687b      	ldr	r3, [r7, #4]
    6396:	689a      	ldr	r2, [r3, #8]
    6398:	4b06      	ldr	r3, [pc, #24]	; (63b4 <system_clock_source_xosc32k_set_config+0x11c>)
    639a:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    639c:	4a04      	ldr	r2, [pc, #16]	; (63b0 <system_clock_source_xosc32k_set_config+0x118>)
    639e:	230c      	movs	r3, #12
    63a0:	18fb      	adds	r3, r7, r3
    63a2:	881b      	ldrh	r3, [r3, #0]
    63a4:	8293      	strh	r3, [r2, #20]
}
    63a6:	46c0      	nop			; (mov r8, r8)
    63a8:	46bd      	mov	sp, r7
    63aa:	b004      	add	sp, #16
    63ac:	bd80      	pop	{r7, pc}
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	40000800 	.word	0x40000800
    63b4:	20000160 	.word	0x20000160

000063b8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    63b8:	b580      	push	{r7, lr}
    63ba:	b082      	sub	sp, #8
    63bc:	af00      	add	r7, sp, #0
    63be:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	7a1b      	ldrb	r3, [r3, #8]
    63c4:	029b      	lsls	r3, r3, #10
    63c6:	041b      	lsls	r3, r3, #16
    63c8:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    63ca:	687b      	ldr	r3, [r7, #4]
    63cc:	895b      	ldrh	r3, [r3, #10]
    63ce:	059b      	lsls	r3, r3, #22
    63d0:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    63d2:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    63d4:	4b2a      	ldr	r3, [pc, #168]	; (6480 <system_clock_source_dfll_set_config+0xc8>)
    63d6:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    63e0:	4313      	orrs	r3, r2
    63e2:	b2db      	uxtb	r3, r3
    63e4:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    63ea:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    63ec:	687a      	ldr	r2, [r7, #4]
    63ee:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    63f0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	785b      	ldrb	r3, [r3, #1]
    63f6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    63f8:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    63fa:	4b21      	ldr	r3, [pc, #132]	; (6480 <system_clock_source_dfll_set_config+0xc8>)
    63fc:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    63fe:	687b      	ldr	r3, [r7, #4]
    6400:	781b      	ldrb	r3, [r3, #0]
    6402:	2b04      	cmp	r3, #4
    6404:	d116      	bne.n	6434 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	7b1b      	ldrb	r3, [r3, #12]
    640a:	069b      	lsls	r3, r3, #26
    640c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	89db      	ldrh	r3, [r3, #14]
    6412:	041b      	lsls	r3, r3, #16
    6414:	0019      	movs	r1, r3
    6416:	4b1b      	ldr	r3, [pc, #108]	; (6484 <system_clock_source_dfll_set_config+0xcc>)
    6418:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    641a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    641c:	687a      	ldr	r2, [r7, #4]
    641e:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6420:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    6422:	4b17      	ldr	r3, [pc, #92]	; (6480 <system_clock_source_dfll_set_config+0xc8>)
    6424:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    6426:	4b16      	ldr	r3, [pc, #88]	; (6480 <system_clock_source_dfll_set_config+0xc8>)
    6428:	681b      	ldr	r3, [r3, #0]
    642a:	687a      	ldr	r2, [r7, #4]
    642c:	7812      	ldrb	r2, [r2, #0]
    642e:	431a      	orrs	r2, r3
    6430:	4b13      	ldr	r3, [pc, #76]	; (6480 <system_clock_source_dfll_set_config+0xc8>)
    6432:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6434:	687b      	ldr	r3, [r7, #4]
    6436:	781b      	ldrb	r3, [r3, #0]
    6438:	2b20      	cmp	r3, #32
    643a:	d11c      	bne.n	6476 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    643c:	687b      	ldr	r3, [r7, #4]
    643e:	7b1b      	ldrb	r3, [r3, #12]
    6440:	069b      	lsls	r3, r3, #26
    6442:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6444:	687b      	ldr	r3, [r7, #4]
    6446:	89db      	ldrh	r3, [r3, #14]
    6448:	041b      	lsls	r3, r3, #16
    644a:	0019      	movs	r1, r3
    644c:	4b0d      	ldr	r3, [pc, #52]	; (6484 <system_clock_source_dfll_set_config+0xcc>)
    644e:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6450:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6452:	687a      	ldr	r2, [r7, #4]
    6454:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6456:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    6458:	4b09      	ldr	r3, [pc, #36]	; (6480 <system_clock_source_dfll_set_config+0xc8>)
    645a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    645c:	4b08      	ldr	r3, [pc, #32]	; (6480 <system_clock_source_dfll_set_config+0xc8>)
    645e:	681b      	ldr	r3, [r3, #0]
    6460:	687a      	ldr	r2, [r7, #4]
    6462:	7812      	ldrb	r2, [r2, #0]
    6464:	2104      	movs	r1, #4
    6466:	430a      	orrs	r2, r1
    6468:	b2d2      	uxtb	r2, r2
    646a:	4313      	orrs	r3, r2
    646c:	2280      	movs	r2, #128	; 0x80
    646e:	00d2      	lsls	r2, r2, #3
    6470:	431a      	orrs	r2, r3
    6472:	4b03      	ldr	r3, [pc, #12]	; (6480 <system_clock_source_dfll_set_config+0xc8>)
    6474:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    6476:	46c0      	nop			; (mov r8, r8)
    6478:	46bd      	mov	sp, r7
    647a:	b002      	add	sp, #8
    647c:	bd80      	pop	{r7, pc}
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	20000160 	.word	0x20000160
    6484:	03ff0000 	.word	0x03ff0000

00006488 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6488:	b580      	push	{r7, lr}
    648a:	b082      	sub	sp, #8
    648c:	af00      	add	r7, sp, #0
    648e:	0002      	movs	r2, r0
    6490:	1dfb      	adds	r3, r7, #7
    6492:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6494:	1dfb      	adds	r3, r7, #7
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	2b08      	cmp	r3, #8
    649a:	d83b      	bhi.n	6514 <system_clock_source_enable+0x8c>
    649c:	009a      	lsls	r2, r3, #2
    649e:	4b21      	ldr	r3, [pc, #132]	; (6524 <system_clock_source_enable+0x9c>)
    64a0:	18d3      	adds	r3, r2, r3
    64a2:	681b      	ldr	r3, [r3, #0]
    64a4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    64a6:	4b20      	ldr	r3, [pc, #128]	; (6528 <system_clock_source_enable+0xa0>)
    64a8:	4a1f      	ldr	r2, [pc, #124]	; (6528 <system_clock_source_enable+0xa0>)
    64aa:	6a12      	ldr	r2, [r2, #32]
    64ac:	2102      	movs	r1, #2
    64ae:	430a      	orrs	r2, r1
    64b0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    64b2:	2300      	movs	r3, #0
    64b4:	e031      	b.n	651a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    64b6:	4b1c      	ldr	r3, [pc, #112]	; (6528 <system_clock_source_enable+0xa0>)
    64b8:	4a1b      	ldr	r2, [pc, #108]	; (6528 <system_clock_source_enable+0xa0>)
    64ba:	6992      	ldr	r2, [r2, #24]
    64bc:	2102      	movs	r1, #2
    64be:	430a      	orrs	r2, r1
    64c0:	619a      	str	r2, [r3, #24]
		break;
    64c2:	e029      	b.n	6518 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    64c4:	4a18      	ldr	r2, [pc, #96]	; (6528 <system_clock_source_enable+0xa0>)
    64c6:	4b18      	ldr	r3, [pc, #96]	; (6528 <system_clock_source_enable+0xa0>)
    64c8:	8a1b      	ldrh	r3, [r3, #16]
    64ca:	b29b      	uxth	r3, r3
    64cc:	2102      	movs	r1, #2
    64ce:	430b      	orrs	r3, r1
    64d0:	b29b      	uxth	r3, r3
    64d2:	8213      	strh	r3, [r2, #16]
		break;
    64d4:	e020      	b.n	6518 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    64d6:	4a14      	ldr	r2, [pc, #80]	; (6528 <system_clock_source_enable+0xa0>)
    64d8:	4b13      	ldr	r3, [pc, #76]	; (6528 <system_clock_source_enable+0xa0>)
    64da:	8a9b      	ldrh	r3, [r3, #20]
    64dc:	b29b      	uxth	r3, r3
    64de:	2102      	movs	r1, #2
    64e0:	430b      	orrs	r3, r1
    64e2:	b29b      	uxth	r3, r3
    64e4:	8293      	strh	r3, [r2, #20]
		break;
    64e6:	e017      	b.n	6518 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    64e8:	4b10      	ldr	r3, [pc, #64]	; (652c <system_clock_source_enable+0xa4>)
    64ea:	681b      	ldr	r3, [r3, #0]
    64ec:	2202      	movs	r2, #2
    64ee:	431a      	orrs	r2, r3
    64f0:	4b0e      	ldr	r3, [pc, #56]	; (652c <system_clock_source_enable+0xa4>)
    64f2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    64f4:	4b0e      	ldr	r3, [pc, #56]	; (6530 <system_clock_source_enable+0xa8>)
    64f6:	4798      	blx	r3
		break;
    64f8:	e00e      	b.n	6518 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    64fa:	4a0b      	ldr	r2, [pc, #44]	; (6528 <system_clock_source_enable+0xa0>)
    64fc:	490a      	ldr	r1, [pc, #40]	; (6528 <system_clock_source_enable+0xa0>)
    64fe:	2344      	movs	r3, #68	; 0x44
    6500:	5ccb      	ldrb	r3, [r1, r3]
    6502:	b2db      	uxtb	r3, r3
    6504:	2102      	movs	r1, #2
    6506:	430b      	orrs	r3, r1
    6508:	b2d9      	uxtb	r1, r3
    650a:	2344      	movs	r3, #68	; 0x44
    650c:	54d1      	strb	r1, [r2, r3]
		break;
    650e:	e003      	b.n	6518 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6510:	2300      	movs	r3, #0
    6512:	e002      	b.n	651a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6514:	2317      	movs	r3, #23
    6516:	e000      	b.n	651a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    6518:	2300      	movs	r3, #0
}
    651a:	0018      	movs	r0, r3
    651c:	46bd      	mov	sp, r7
    651e:	b002      	add	sp, #8
    6520:	bd80      	pop	{r7, pc}
    6522:	46c0      	nop			; (mov r8, r8)
    6524:	0000c378 	.word	0x0000c378
    6528:	40000800 	.word	0x40000800
    652c:	20000160 	.word	0x20000160
    6530:	0000611d 	.word	0x0000611d

00006534 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6534:	b580      	push	{r7, lr}
    6536:	b084      	sub	sp, #16
    6538:	af00      	add	r7, sp, #0
    653a:	0002      	movs	r2, r0
    653c:	1dfb      	adds	r3, r7, #7
    653e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    6540:	2300      	movs	r3, #0
    6542:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6544:	1dfb      	adds	r3, r7, #7
    6546:	781b      	ldrb	r3, [r3, #0]
    6548:	2b08      	cmp	r3, #8
    654a:	d821      	bhi.n	6590 <system_clock_source_is_ready+0x5c>
    654c:	009a      	lsls	r2, r3, #2
    654e:	4b18      	ldr	r3, [pc, #96]	; (65b0 <system_clock_source_is_ready+0x7c>)
    6550:	18d3      	adds	r3, r2, r3
    6552:	681b      	ldr	r3, [r3, #0]
    6554:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    6556:	2308      	movs	r3, #8
    6558:	60fb      	str	r3, [r7, #12]
		break;
    655a:	e01b      	b.n	6594 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    655c:	2304      	movs	r3, #4
    655e:	60fb      	str	r3, [r7, #12]
		break;
    6560:	e018      	b.n	6594 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    6562:	2301      	movs	r3, #1
    6564:	60fb      	str	r3, [r7, #12]
		break;
    6566:	e015      	b.n	6594 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    6568:	2302      	movs	r3, #2
    656a:	60fb      	str	r3, [r7, #12]
		break;
    656c:	e012      	b.n	6594 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    656e:	23d0      	movs	r3, #208	; 0xd0
    6570:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    6572:	e00f      	b.n	6594 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6574:	4a0f      	ldr	r2, [pc, #60]	; (65b4 <system_clock_source_is_ready+0x80>)
    6576:	2350      	movs	r3, #80	; 0x50
    6578:	5cd3      	ldrb	r3, [r2, r3]
    657a:	b2db      	uxtb	r3, r3
    657c:	001a      	movs	r2, r3
    657e:	2303      	movs	r3, #3
    6580:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    6582:	3b03      	subs	r3, #3
    6584:	425a      	negs	r2, r3
    6586:	4153      	adcs	r3, r2
    6588:	b2db      	uxtb	r3, r3
    658a:	e00c      	b.n	65a6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    658c:	2301      	movs	r3, #1
    658e:	e00a      	b.n	65a6 <system_clock_source_is_ready+0x72>

	default:
		return false;
    6590:	2300      	movs	r3, #0
    6592:	e008      	b.n	65a6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6594:	4b07      	ldr	r3, [pc, #28]	; (65b4 <system_clock_source_is_ready+0x80>)
    6596:	68db      	ldr	r3, [r3, #12]
    6598:	68fa      	ldr	r2, [r7, #12]
    659a:	401a      	ands	r2, r3
    659c:	68fb      	ldr	r3, [r7, #12]
    659e:	1ad3      	subs	r3, r2, r3
    65a0:	425a      	negs	r2, r3
    65a2:	4153      	adcs	r3, r2
    65a4:	b2db      	uxtb	r3, r3
}
    65a6:	0018      	movs	r0, r3
    65a8:	46bd      	mov	sp, r7
    65aa:	b004      	add	sp, #16
    65ac:	bd80      	pop	{r7, pc}
    65ae:	46c0      	nop			; (mov r8, r8)
    65b0:	0000c39c 	.word	0x0000c39c
    65b4:	40000800 	.word	0x40000800

000065b8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    65b8:	b580      	push	{r7, lr}
    65ba:	b082      	sub	sp, #8
    65bc:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    65be:	003b      	movs	r3, r7
    65c0:	2202      	movs	r2, #2
    65c2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    65c4:	2300      	movs	r3, #0
    65c6:	607b      	str	r3, [r7, #4]
    65c8:	e009      	b.n	65de <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	b2db      	uxtb	r3, r3
    65ce:	003a      	movs	r2, r7
    65d0:	0011      	movs	r1, r2
    65d2:	0018      	movs	r0, r3
    65d4:	4b05      	ldr	r3, [pc, #20]	; (65ec <_switch_peripheral_gclk+0x34>)
    65d6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	3301      	adds	r3, #1
    65dc:	607b      	str	r3, [r7, #4]
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	2b24      	cmp	r3, #36	; 0x24
    65e2:	d9f2      	bls.n	65ca <_switch_peripheral_gclk+0x12>
	}
}
    65e4:	46c0      	nop			; (mov r8, r8)
    65e6:	46bd      	mov	sp, r7
    65e8:	b002      	add	sp, #8
    65ea:	bd80      	pop	{r7, pc}
    65ec:	00006b8d 	.word	0x00006b8d

000065f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    65f0:	b580      	push	{r7, lr}
    65f2:	b0aa      	sub	sp, #168	; 0xa8
    65f4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    65f6:	4b85      	ldr	r3, [pc, #532]	; (680c <system_clock_init+0x21c>)
    65f8:	22c2      	movs	r2, #194	; 0xc2
    65fa:	00d2      	lsls	r2, r2, #3
    65fc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    65fe:	2002      	movs	r0, #2
    6600:	4b83      	ldr	r3, [pc, #524]	; (6810 <system_clock_init+0x220>)
    6602:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6604:	4b83      	ldr	r3, [pc, #524]	; (6814 <system_clock_init+0x224>)
    6606:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    6608:	2394      	movs	r3, #148	; 0x94
    660a:	18fb      	adds	r3, r7, r3
    660c:	0018      	movs	r0, r3
    660e:	4b82      	ldr	r3, [pc, #520]	; (6818 <system_clock_init+0x228>)
    6610:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    6612:	2394      	movs	r3, #148	; 0x94
    6614:	18fb      	adds	r3, r7, r3
    6616:	2280      	movs	r2, #128	; 0x80
    6618:	0212      	lsls	r2, r2, #8
    661a:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    661c:	2394      	movs	r3, #148	; 0x94
    661e:	18fb      	adds	r3, r7, r3
    6620:	2200      	movs	r2, #0
    6622:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6624:	2394      	movs	r3, #148	; 0x94
    6626:	18fb      	adds	r3, r7, r3
    6628:	2206      	movs	r2, #6
    662a:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    662c:	2394      	movs	r3, #148	; 0x94
    662e:	18fb      	adds	r3, r7, r3
    6630:	2200      	movs	r2, #0
    6632:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    6634:	2394      	movs	r3, #148	; 0x94
    6636:	18fb      	adds	r3, r7, r3
    6638:	2200      	movs	r2, #0
    663a:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    663c:	2394      	movs	r3, #148	; 0x94
    663e:	18fb      	adds	r3, r7, r3
    6640:	2201      	movs	r2, #1
    6642:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6644:	2394      	movs	r3, #148	; 0x94
    6646:	18fb      	adds	r3, r7, r3
    6648:	2200      	movs	r2, #0
    664a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    664c:	2394      	movs	r3, #148	; 0x94
    664e:	18fb      	adds	r3, r7, r3
    6650:	2201      	movs	r2, #1
    6652:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6654:	2394      	movs	r3, #148	; 0x94
    6656:	18fb      	adds	r3, r7, r3
    6658:	0018      	movs	r0, r3
    665a:	4b70      	ldr	r3, [pc, #448]	; (681c <system_clock_init+0x22c>)
    665c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    665e:	2005      	movs	r0, #5
    6660:	4b6f      	ldr	r3, [pc, #444]	; (6820 <system_clock_init+0x230>)
    6662:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6664:	46c0      	nop			; (mov r8, r8)
    6666:	2005      	movs	r0, #5
    6668:	4b6e      	ldr	r3, [pc, #440]	; (6824 <system_clock_init+0x234>)
    666a:	4798      	blx	r3
    666c:	0003      	movs	r3, r0
    666e:	001a      	movs	r2, r3
    6670:	2301      	movs	r3, #1
    6672:	4053      	eors	r3, r2
    6674:	b2db      	uxtb	r3, r3
    6676:	2b00      	cmp	r3, #0
    6678:	d1f5      	bne.n	6666 <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    667a:	2380      	movs	r3, #128	; 0x80
    667c:	18fb      	adds	r3, r7, r3
    667e:	0018      	movs	r0, r3
    6680:	4b69      	ldr	r3, [pc, #420]	; (6828 <system_clock_init+0x238>)
    6682:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6684:	2380      	movs	r3, #128	; 0x80
    6686:	18fb      	adds	r3, r7, r3
    6688:	2204      	movs	r2, #4
    668a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    668c:	2380      	movs	r3, #128	; 0x80
    668e:	18fb      	adds	r3, r7, r3
    6690:	2200      	movs	r2, #0
    6692:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6694:	4b65      	ldr	r3, [pc, #404]	; (682c <system_clock_init+0x23c>)
    6696:	681b      	ldr	r3, [r3, #0]
    6698:	0e9b      	lsrs	r3, r3, #26
    669a:	22a4      	movs	r2, #164	; 0xa4
    669c:	18ba      	adds	r2, r7, r2
    669e:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    66a0:	23a4      	movs	r3, #164	; 0xa4
    66a2:	18fb      	adds	r3, r7, r3
    66a4:	681b      	ldr	r3, [r3, #0]
    66a6:	2b3f      	cmp	r3, #63	; 0x3f
    66a8:	d103      	bne.n	66b2 <system_clock_init+0xc2>
		coarse = 0x1f;
    66aa:	231f      	movs	r3, #31
    66ac:	22a4      	movs	r2, #164	; 0xa4
    66ae:	18ba      	adds	r2, r7, r2
    66b0:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    66b2:	23a4      	movs	r3, #164	; 0xa4
    66b4:	18fb      	adds	r3, r7, r3
    66b6:	681b      	ldr	r3, [r3, #0]
    66b8:	b2da      	uxtb	r2, r3
    66ba:	2380      	movs	r3, #128	; 0x80
    66bc:	18fb      	adds	r3, r7, r3
    66be:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    66c0:	2380      	movs	r3, #128	; 0x80
    66c2:	18fb      	adds	r3, r7, r3
    66c4:	2200      	movs	r2, #0
    66c6:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    66c8:	2380      	movs	r3, #128	; 0x80
    66ca:	18fb      	adds	r3, r7, r3
    66cc:	2200      	movs	r2, #0
    66ce:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    66d0:	2380      	movs	r3, #128	; 0x80
    66d2:	18fb      	adds	r3, r7, r3
    66d4:	2200      	movs	r2, #0
    66d6:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    66d8:	2380      	movs	r3, #128	; 0x80
    66da:	18fb      	adds	r3, r7, r3
    66dc:	2200      	movs	r2, #0
    66de:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    66e0:	2380      	movs	r3, #128	; 0x80
    66e2:	18fb      	adds	r3, r7, r3
    66e4:	22b7      	movs	r2, #183	; 0xb7
    66e6:	00d2      	lsls	r2, r2, #3
    66e8:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    66ea:	2380      	movs	r3, #128	; 0x80
    66ec:	18fb      	adds	r3, r7, r3
    66ee:	2203      	movs	r2, #3
    66f0:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    66f2:	2380      	movs	r3, #128	; 0x80
    66f4:	18fb      	adds	r3, r7, r3
    66f6:	221f      	movs	r2, #31
    66f8:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    66fa:	2380      	movs	r3, #128	; 0x80
    66fc:	18fb      	adds	r3, r7, r3
    66fe:	0018      	movs	r0, r3
    6700:	4b4b      	ldr	r3, [pc, #300]	; (6830 <system_clock_init+0x240>)
    6702:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6704:	237c      	movs	r3, #124	; 0x7c
    6706:	18fb      	adds	r3, r7, r3
    6708:	0018      	movs	r0, r3
    670a:	4b4a      	ldr	r3, [pc, #296]	; (6834 <system_clock_init+0x244>)
    670c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    670e:	237c      	movs	r3, #124	; 0x7c
    6710:	18fb      	adds	r3, r7, r3
    6712:	2200      	movs	r2, #0
    6714:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    6716:	237c      	movs	r3, #124	; 0x7c
    6718:	18fb      	adds	r3, r7, r3
    671a:	2201      	movs	r2, #1
    671c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    671e:	237c      	movs	r3, #124	; 0x7c
    6720:	18fb      	adds	r3, r7, r3
    6722:	2201      	movs	r2, #1
    6724:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6726:	237c      	movs	r3, #124	; 0x7c
    6728:	18fb      	adds	r3, r7, r3
    672a:	0018      	movs	r0, r3
    672c:	4b42      	ldr	r3, [pc, #264]	; (6838 <system_clock_init+0x248>)
    672e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6730:	2006      	movs	r0, #6
    6732:	4b3b      	ldr	r3, [pc, #236]	; (6820 <system_clock_init+0x230>)
    6734:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6736:	4b41      	ldr	r3, [pc, #260]	; (683c <system_clock_init+0x24c>)
    6738:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    673a:	2364      	movs	r3, #100	; 0x64
    673c:	18fb      	adds	r3, r7, r3
    673e:	0018      	movs	r0, r3
    6740:	4b3f      	ldr	r3, [pc, #252]	; (6840 <system_clock_init+0x250>)
    6742:	4798      	blx	r3
    6744:	2364      	movs	r3, #100	; 0x64
    6746:	18fb      	adds	r3, r7, r3
    6748:	2205      	movs	r2, #5
    674a:	701a      	strb	r2, [r3, #0]
    674c:	2364      	movs	r3, #100	; 0x64
    674e:	18fb      	adds	r3, r7, r3
    6750:	2201      	movs	r2, #1
    6752:	605a      	str	r2, [r3, #4]
    6754:	2364      	movs	r3, #100	; 0x64
    6756:	18fb      	adds	r3, r7, r3
    6758:	2200      	movs	r2, #0
    675a:	721a      	strb	r2, [r3, #8]
    675c:	2364      	movs	r3, #100	; 0x64
    675e:	18fb      	adds	r3, r7, r3
    6760:	2200      	movs	r2, #0
    6762:	725a      	strb	r2, [r3, #9]
    6764:	2364      	movs	r3, #100	; 0x64
    6766:	18fb      	adds	r3, r7, r3
    6768:	0019      	movs	r1, r3
    676a:	2001      	movs	r0, #1
    676c:	4b35      	ldr	r3, [pc, #212]	; (6844 <system_clock_init+0x254>)
    676e:	4798      	blx	r3
    6770:	2001      	movs	r0, #1
    6772:	4b35      	ldr	r3, [pc, #212]	; (6848 <system_clock_init+0x258>)
    6774:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    6776:	230c      	movs	r3, #12
    6778:	18fb      	adds	r3, r7, r3
    677a:	0018      	movs	r0, r3
    677c:	4b33      	ldr	r3, [pc, #204]	; (684c <system_clock_init+0x25c>)
    677e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6780:	230c      	movs	r3, #12
    6782:	18fb      	adds	r3, r7, r3
    6784:	2201      	movs	r2, #1
    6786:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6788:	230c      	movs	r3, #12
    678a:	18fb      	adds	r3, r7, r3
    678c:	0019      	movs	r1, r3
    678e:	2000      	movs	r0, #0
    6790:	4b2f      	ldr	r3, [pc, #188]	; (6850 <system_clock_init+0x260>)
    6792:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6794:	2000      	movs	r0, #0
    6796:	4b2f      	ldr	r3, [pc, #188]	; (6854 <system_clock_init+0x264>)
    6798:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    679a:	2007      	movs	r0, #7
    679c:	4b20      	ldr	r3, [pc, #128]	; (6820 <system_clock_init+0x230>)
    679e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    67a0:	46c0      	nop			; (mov r8, r8)
    67a2:	2007      	movs	r0, #7
    67a4:	4b1f      	ldr	r3, [pc, #124]	; (6824 <system_clock_init+0x234>)
    67a6:	4798      	blx	r3
    67a8:	0003      	movs	r3, r0
    67aa:	001a      	movs	r2, r3
    67ac:	2301      	movs	r3, #1
    67ae:	4053      	eors	r3, r2
    67b0:	b2db      	uxtb	r3, r3
    67b2:	2b00      	cmp	r3, #0
    67b4:	d1f5      	bne.n	67a2 <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    67b6:	2000      	movs	r0, #0
    67b8:	4b27      	ldr	r3, [pc, #156]	; (6858 <system_clock_init+0x268>)
    67ba:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    67bc:	2100      	movs	r1, #0
    67be:	2000      	movs	r0, #0
    67c0:	4b26      	ldr	r3, [pc, #152]	; (685c <system_clock_init+0x26c>)
    67c2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    67c4:	2100      	movs	r1, #0
    67c6:	2001      	movs	r0, #1
    67c8:	4b24      	ldr	r3, [pc, #144]	; (685c <system_clock_init+0x26c>)
    67ca:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    67cc:	2100      	movs	r1, #0
    67ce:	2002      	movs	r0, #2
    67d0:	4b22      	ldr	r3, [pc, #136]	; (685c <system_clock_init+0x26c>)
    67d2:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    67d4:	003b      	movs	r3, r7
    67d6:	0018      	movs	r0, r3
    67d8:	4b19      	ldr	r3, [pc, #100]	; (6840 <system_clock_init+0x250>)
    67da:	4798      	blx	r3
    67dc:	003b      	movs	r3, r7
    67de:	2207      	movs	r2, #7
    67e0:	701a      	strb	r2, [r3, #0]
    67e2:	003b      	movs	r3, r7
    67e4:	2201      	movs	r2, #1
    67e6:	605a      	str	r2, [r3, #4]
    67e8:	003b      	movs	r3, r7
    67ea:	2201      	movs	r2, #1
    67ec:	721a      	strb	r2, [r3, #8]
    67ee:	003b      	movs	r3, r7
    67f0:	2200      	movs	r2, #0
    67f2:	725a      	strb	r2, [r3, #9]
    67f4:	003b      	movs	r3, r7
    67f6:	0019      	movs	r1, r3
    67f8:	2000      	movs	r0, #0
    67fa:	4b12      	ldr	r3, [pc, #72]	; (6844 <system_clock_init+0x254>)
    67fc:	4798      	blx	r3
    67fe:	2000      	movs	r0, #0
    6800:	4b11      	ldr	r3, [pc, #68]	; (6848 <system_clock_init+0x258>)
    6802:	4798      	blx	r3
#endif
}
    6804:	46c0      	nop			; (mov r8, r8)
    6806:	46bd      	mov	sp, r7
    6808:	b02a      	add	sp, #168	; 0xa8
    680a:	bd80      	pop	{r7, pc}
    680c:	40000800 	.word	0x40000800
    6810:	000060cd 	.word	0x000060cd
    6814:	000065b9 	.word	0x000065b9
    6818:	00005f9d 	.word	0x00005f9d
    681c:	00006299 	.word	0x00006299
    6820:	00006489 	.word	0x00006489
    6824:	00006535 	.word	0x00006535
    6828:	00006007 	.word	0x00006007
    682c:	00806024 	.word	0x00806024
    6830:	000063b9 	.word	0x000063b9
    6834:	00005fe5 	.word	0x00005fe5
    6838:	00006221 	.word	0x00006221
    683c:	00006905 	.word	0x00006905
    6840:	00005f59 	.word	0x00005f59
    6844:	00006935 	.word	0x00006935
    6848:	00006a59 	.word	0x00006a59
    684c:	00005f87 	.word	0x00005f87
    6850:	00006b8d 	.word	0x00006b8d
    6854:	00006bd1 	.word	0x00006bd1
    6858:	00006059 	.word	0x00006059
    685c:	00006079 	.word	0x00006079

00006860 <system_apb_clock_set_mask>:
{
    6860:	b580      	push	{r7, lr}
    6862:	b082      	sub	sp, #8
    6864:	af00      	add	r7, sp, #0
    6866:	0002      	movs	r2, r0
    6868:	6039      	str	r1, [r7, #0]
    686a:	1dfb      	adds	r3, r7, #7
    686c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    686e:	1dfb      	adds	r3, r7, #7
    6870:	781b      	ldrb	r3, [r3, #0]
    6872:	2b01      	cmp	r3, #1
    6874:	d00a      	beq.n	688c <system_apb_clock_set_mask+0x2c>
    6876:	2b02      	cmp	r3, #2
    6878:	d00f      	beq.n	689a <system_apb_clock_set_mask+0x3a>
    687a:	2b00      	cmp	r3, #0
    687c:	d114      	bne.n	68a8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    687e:	4b0e      	ldr	r3, [pc, #56]	; (68b8 <system_apb_clock_set_mask+0x58>)
    6880:	4a0d      	ldr	r2, [pc, #52]	; (68b8 <system_apb_clock_set_mask+0x58>)
    6882:	6991      	ldr	r1, [r2, #24]
    6884:	683a      	ldr	r2, [r7, #0]
    6886:	430a      	orrs	r2, r1
    6888:	619a      	str	r2, [r3, #24]
			break;
    688a:	e00f      	b.n	68ac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    688c:	4b0a      	ldr	r3, [pc, #40]	; (68b8 <system_apb_clock_set_mask+0x58>)
    688e:	4a0a      	ldr	r2, [pc, #40]	; (68b8 <system_apb_clock_set_mask+0x58>)
    6890:	69d1      	ldr	r1, [r2, #28]
    6892:	683a      	ldr	r2, [r7, #0]
    6894:	430a      	orrs	r2, r1
    6896:	61da      	str	r2, [r3, #28]
			break;
    6898:	e008      	b.n	68ac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    689a:	4b07      	ldr	r3, [pc, #28]	; (68b8 <system_apb_clock_set_mask+0x58>)
    689c:	4a06      	ldr	r2, [pc, #24]	; (68b8 <system_apb_clock_set_mask+0x58>)
    689e:	6a11      	ldr	r1, [r2, #32]
    68a0:	683a      	ldr	r2, [r7, #0]
    68a2:	430a      	orrs	r2, r1
    68a4:	621a      	str	r2, [r3, #32]
			break;
    68a6:	e001      	b.n	68ac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    68a8:	2317      	movs	r3, #23
    68aa:	e000      	b.n	68ae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    68ac:	2300      	movs	r3, #0
}
    68ae:	0018      	movs	r0, r3
    68b0:	46bd      	mov	sp, r7
    68b2:	b002      	add	sp, #8
    68b4:	bd80      	pop	{r7, pc}
    68b6:	46c0      	nop			; (mov r8, r8)
    68b8:	40000400 	.word	0x40000400

000068bc <system_interrupt_enter_critical_section>:
{
    68bc:	b580      	push	{r7, lr}
    68be:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    68c0:	4b02      	ldr	r3, [pc, #8]	; (68cc <system_interrupt_enter_critical_section+0x10>)
    68c2:	4798      	blx	r3
}
    68c4:	46c0      	nop			; (mov r8, r8)
    68c6:	46bd      	mov	sp, r7
    68c8:	bd80      	pop	{r7, pc}
    68ca:	46c0      	nop			; (mov r8, r8)
    68cc:	00003501 	.word	0x00003501

000068d0 <system_interrupt_leave_critical_section>:
{
    68d0:	b580      	push	{r7, lr}
    68d2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    68d4:	4b02      	ldr	r3, [pc, #8]	; (68e0 <system_interrupt_leave_critical_section+0x10>)
    68d6:	4798      	blx	r3
}
    68d8:	46c0      	nop			; (mov r8, r8)
    68da:	46bd      	mov	sp, r7
    68dc:	bd80      	pop	{r7, pc}
    68de:	46c0      	nop			; (mov r8, r8)
    68e0:	00003555 	.word	0x00003555

000068e4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    68e4:	b580      	push	{r7, lr}
    68e6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    68e8:	4b05      	ldr	r3, [pc, #20]	; (6900 <system_gclk_is_syncing+0x1c>)
    68ea:	785b      	ldrb	r3, [r3, #1]
    68ec:	b2db      	uxtb	r3, r3
    68ee:	b25b      	sxtb	r3, r3
    68f0:	2b00      	cmp	r3, #0
    68f2:	da01      	bge.n	68f8 <system_gclk_is_syncing+0x14>
		return true;
    68f4:	2301      	movs	r3, #1
    68f6:	e000      	b.n	68fa <system_gclk_is_syncing+0x16>
	}

	return false;
    68f8:	2300      	movs	r3, #0
}
    68fa:	0018      	movs	r0, r3
    68fc:	46bd      	mov	sp, r7
    68fe:	bd80      	pop	{r7, pc}
    6900:	40000c00 	.word	0x40000c00

00006904 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6904:	b580      	push	{r7, lr}
    6906:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6908:	2108      	movs	r1, #8
    690a:	2000      	movs	r0, #0
    690c:	4b07      	ldr	r3, [pc, #28]	; (692c <system_gclk_init+0x28>)
    690e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6910:	4b07      	ldr	r3, [pc, #28]	; (6930 <system_gclk_init+0x2c>)
    6912:	2201      	movs	r2, #1
    6914:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6916:	46c0      	nop			; (mov r8, r8)
    6918:	4b05      	ldr	r3, [pc, #20]	; (6930 <system_gclk_init+0x2c>)
    691a:	781b      	ldrb	r3, [r3, #0]
    691c:	b2db      	uxtb	r3, r3
    691e:	001a      	movs	r2, r3
    6920:	2301      	movs	r3, #1
    6922:	4013      	ands	r3, r2
    6924:	d1f8      	bne.n	6918 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    6926:	46c0      	nop			; (mov r8, r8)
    6928:	46bd      	mov	sp, r7
    692a:	bd80      	pop	{r7, pc}
    692c:	00006861 	.word	0x00006861
    6930:	40000c00 	.word	0x40000c00

00006934 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6934:	b580      	push	{r7, lr}
    6936:	b086      	sub	sp, #24
    6938:	af00      	add	r7, sp, #0
    693a:	0002      	movs	r2, r0
    693c:	6039      	str	r1, [r7, #0]
    693e:	1dfb      	adds	r3, r7, #7
    6940:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6942:	1dfb      	adds	r3, r7, #7
    6944:	781b      	ldrb	r3, [r3, #0]
    6946:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6948:	1dfb      	adds	r3, r7, #7
    694a:	781b      	ldrb	r3, [r3, #0]
    694c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    694e:	683b      	ldr	r3, [r7, #0]
    6950:	781b      	ldrb	r3, [r3, #0]
    6952:	021b      	lsls	r3, r3, #8
    6954:	001a      	movs	r2, r3
    6956:	697b      	ldr	r3, [r7, #20]
    6958:	4313      	orrs	r3, r2
    695a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    695c:	683b      	ldr	r3, [r7, #0]
    695e:	785b      	ldrb	r3, [r3, #1]
    6960:	2b00      	cmp	r3, #0
    6962:	d004      	beq.n	696e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6964:	697b      	ldr	r3, [r7, #20]
    6966:	2280      	movs	r2, #128	; 0x80
    6968:	02d2      	lsls	r2, r2, #11
    696a:	4313      	orrs	r3, r2
    696c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    696e:	683b      	ldr	r3, [r7, #0]
    6970:	7a5b      	ldrb	r3, [r3, #9]
    6972:	2b00      	cmp	r3, #0
    6974:	d004      	beq.n	6980 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6976:	697b      	ldr	r3, [r7, #20]
    6978:	2280      	movs	r2, #128	; 0x80
    697a:	0312      	lsls	r2, r2, #12
    697c:	4313      	orrs	r3, r2
    697e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6980:	683b      	ldr	r3, [r7, #0]
    6982:	685b      	ldr	r3, [r3, #4]
    6984:	2b01      	cmp	r3, #1
    6986:	d92c      	bls.n	69e2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6988:	683b      	ldr	r3, [r7, #0]
    698a:	685a      	ldr	r2, [r3, #4]
    698c:	683b      	ldr	r3, [r7, #0]
    698e:	685b      	ldr	r3, [r3, #4]
    6990:	3b01      	subs	r3, #1
    6992:	4013      	ands	r3, r2
    6994:	d11a      	bne.n	69cc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6996:	2300      	movs	r3, #0
    6998:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    699a:	2302      	movs	r3, #2
    699c:	60bb      	str	r3, [r7, #8]
    699e:	e005      	b.n	69ac <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    69a0:	68fb      	ldr	r3, [r7, #12]
    69a2:	3301      	adds	r3, #1
    69a4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    69a6:	68bb      	ldr	r3, [r7, #8]
    69a8:	005b      	lsls	r3, r3, #1
    69aa:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    69ac:	683b      	ldr	r3, [r7, #0]
    69ae:	685a      	ldr	r2, [r3, #4]
    69b0:	68bb      	ldr	r3, [r7, #8]
    69b2:	429a      	cmp	r2, r3
    69b4:	d8f4      	bhi.n	69a0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    69b6:	68fb      	ldr	r3, [r7, #12]
    69b8:	021b      	lsls	r3, r3, #8
    69ba:	693a      	ldr	r2, [r7, #16]
    69bc:	4313      	orrs	r3, r2
    69be:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    69c0:	697b      	ldr	r3, [r7, #20]
    69c2:	2280      	movs	r2, #128	; 0x80
    69c4:	0352      	lsls	r2, r2, #13
    69c6:	4313      	orrs	r3, r2
    69c8:	617b      	str	r3, [r7, #20]
    69ca:	e00a      	b.n	69e2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    69cc:	683b      	ldr	r3, [r7, #0]
    69ce:	685b      	ldr	r3, [r3, #4]
    69d0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    69d2:	693a      	ldr	r2, [r7, #16]
    69d4:	4313      	orrs	r3, r2
    69d6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    69d8:	697b      	ldr	r3, [r7, #20]
    69da:	2280      	movs	r2, #128	; 0x80
    69dc:	0292      	lsls	r2, r2, #10
    69de:	4313      	orrs	r3, r2
    69e0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    69e2:	683b      	ldr	r3, [r7, #0]
    69e4:	7a1b      	ldrb	r3, [r3, #8]
    69e6:	2b00      	cmp	r3, #0
    69e8:	d004      	beq.n	69f4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    69ea:	697b      	ldr	r3, [r7, #20]
    69ec:	2280      	movs	r2, #128	; 0x80
    69ee:	0392      	lsls	r2, r2, #14
    69f0:	4313      	orrs	r3, r2
    69f2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    69f4:	46c0      	nop			; (mov r8, r8)
    69f6:	4b13      	ldr	r3, [pc, #76]	; (6a44 <system_gclk_gen_set_config+0x110>)
    69f8:	4798      	blx	r3
    69fa:	1e03      	subs	r3, r0, #0
    69fc:	d1fb      	bne.n	69f6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    69fe:	4b12      	ldr	r3, [pc, #72]	; (6a48 <system_gclk_gen_set_config+0x114>)
    6a00:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6a02:	4a12      	ldr	r2, [pc, #72]	; (6a4c <system_gclk_gen_set_config+0x118>)
    6a04:	1dfb      	adds	r3, r7, #7
    6a06:	781b      	ldrb	r3, [r3, #0]
    6a08:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6a0a:	46c0      	nop			; (mov r8, r8)
    6a0c:	4b0d      	ldr	r3, [pc, #52]	; (6a44 <system_gclk_gen_set_config+0x110>)
    6a0e:	4798      	blx	r3
    6a10:	1e03      	subs	r3, r0, #0
    6a12:	d1fb      	bne.n	6a0c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6a14:	4b0e      	ldr	r3, [pc, #56]	; (6a50 <system_gclk_gen_set_config+0x11c>)
    6a16:	693a      	ldr	r2, [r7, #16]
    6a18:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6a1a:	46c0      	nop			; (mov r8, r8)
    6a1c:	4b09      	ldr	r3, [pc, #36]	; (6a44 <system_gclk_gen_set_config+0x110>)
    6a1e:	4798      	blx	r3
    6a20:	1e03      	subs	r3, r0, #0
    6a22:	d1fb      	bne.n	6a1c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6a24:	4b0a      	ldr	r3, [pc, #40]	; (6a50 <system_gclk_gen_set_config+0x11c>)
    6a26:	4a0a      	ldr	r2, [pc, #40]	; (6a50 <system_gclk_gen_set_config+0x11c>)
    6a28:	6851      	ldr	r1, [r2, #4]
    6a2a:	2280      	movs	r2, #128	; 0x80
    6a2c:	0252      	lsls	r2, r2, #9
    6a2e:	4011      	ands	r1, r2
    6a30:	697a      	ldr	r2, [r7, #20]
    6a32:	430a      	orrs	r2, r1
    6a34:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6a36:	4b07      	ldr	r3, [pc, #28]	; (6a54 <system_gclk_gen_set_config+0x120>)
    6a38:	4798      	blx	r3
}
    6a3a:	46c0      	nop			; (mov r8, r8)
    6a3c:	46bd      	mov	sp, r7
    6a3e:	b006      	add	sp, #24
    6a40:	bd80      	pop	{r7, pc}
    6a42:	46c0      	nop			; (mov r8, r8)
    6a44:	000068e5 	.word	0x000068e5
    6a48:	000068bd 	.word	0x000068bd
    6a4c:	40000c08 	.word	0x40000c08
    6a50:	40000c00 	.word	0x40000c00
    6a54:	000068d1 	.word	0x000068d1

00006a58 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	b082      	sub	sp, #8
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	0002      	movs	r2, r0
    6a60:	1dfb      	adds	r3, r7, #7
    6a62:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6a64:	46c0      	nop			; (mov r8, r8)
    6a66:	4b0e      	ldr	r3, [pc, #56]	; (6aa0 <system_gclk_gen_enable+0x48>)
    6a68:	4798      	blx	r3
    6a6a:	1e03      	subs	r3, r0, #0
    6a6c:	d1fb      	bne.n	6a66 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6a6e:	4b0d      	ldr	r3, [pc, #52]	; (6aa4 <system_gclk_gen_enable+0x4c>)
    6a70:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6a72:	4a0d      	ldr	r2, [pc, #52]	; (6aa8 <system_gclk_gen_enable+0x50>)
    6a74:	1dfb      	adds	r3, r7, #7
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6a7a:	46c0      	nop			; (mov r8, r8)
    6a7c:	4b08      	ldr	r3, [pc, #32]	; (6aa0 <system_gclk_gen_enable+0x48>)
    6a7e:	4798      	blx	r3
    6a80:	1e03      	subs	r3, r0, #0
    6a82:	d1fb      	bne.n	6a7c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6a84:	4b09      	ldr	r3, [pc, #36]	; (6aac <system_gclk_gen_enable+0x54>)
    6a86:	4a09      	ldr	r2, [pc, #36]	; (6aac <system_gclk_gen_enable+0x54>)
    6a88:	6852      	ldr	r2, [r2, #4]
    6a8a:	2180      	movs	r1, #128	; 0x80
    6a8c:	0249      	lsls	r1, r1, #9
    6a8e:	430a      	orrs	r2, r1
    6a90:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6a92:	4b07      	ldr	r3, [pc, #28]	; (6ab0 <system_gclk_gen_enable+0x58>)
    6a94:	4798      	blx	r3
}
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	46bd      	mov	sp, r7
    6a9a:	b002      	add	sp, #8
    6a9c:	bd80      	pop	{r7, pc}
    6a9e:	46c0      	nop			; (mov r8, r8)
    6aa0:	000068e5 	.word	0x000068e5
    6aa4:	000068bd 	.word	0x000068bd
    6aa8:	40000c04 	.word	0x40000c04
    6aac:	40000c00 	.word	0x40000c00
    6ab0:	000068d1 	.word	0x000068d1

00006ab4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6ab4:	b580      	push	{r7, lr}
    6ab6:	b086      	sub	sp, #24
    6ab8:	af00      	add	r7, sp, #0
    6aba:	0002      	movs	r2, r0
    6abc:	1dfb      	adds	r3, r7, #7
    6abe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6ac0:	46c0      	nop			; (mov r8, r8)
    6ac2:	4b2a      	ldr	r3, [pc, #168]	; (6b6c <system_gclk_gen_get_hz+0xb8>)
    6ac4:	4798      	blx	r3
    6ac6:	1e03      	subs	r3, r0, #0
    6ac8:	d1fb      	bne.n	6ac2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6aca:	4b29      	ldr	r3, [pc, #164]	; (6b70 <system_gclk_gen_get_hz+0xbc>)
    6acc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6ace:	4a29      	ldr	r2, [pc, #164]	; (6b74 <system_gclk_gen_get_hz+0xc0>)
    6ad0:	1dfb      	adds	r3, r7, #7
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6ad6:	46c0      	nop			; (mov r8, r8)
    6ad8:	4b24      	ldr	r3, [pc, #144]	; (6b6c <system_gclk_gen_get_hz+0xb8>)
    6ada:	4798      	blx	r3
    6adc:	1e03      	subs	r3, r0, #0
    6ade:	d1fb      	bne.n	6ad8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6ae0:	4b25      	ldr	r3, [pc, #148]	; (6b78 <system_gclk_gen_get_hz+0xc4>)
    6ae2:	685b      	ldr	r3, [r3, #4]
    6ae4:	04db      	lsls	r3, r3, #19
    6ae6:	0edb      	lsrs	r3, r3, #27
    6ae8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6aea:	0018      	movs	r0, r3
    6aec:	4b23      	ldr	r3, [pc, #140]	; (6b7c <system_gclk_gen_get_hz+0xc8>)
    6aee:	4798      	blx	r3
    6af0:	0003      	movs	r3, r0
    6af2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6af4:	4a1f      	ldr	r2, [pc, #124]	; (6b74 <system_gclk_gen_get_hz+0xc0>)
    6af6:	1dfb      	adds	r3, r7, #7
    6af8:	781b      	ldrb	r3, [r3, #0]
    6afa:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6afc:	4b1e      	ldr	r3, [pc, #120]	; (6b78 <system_gclk_gen_get_hz+0xc4>)
    6afe:	685b      	ldr	r3, [r3, #4]
    6b00:	02db      	lsls	r3, r3, #11
    6b02:	0fdb      	lsrs	r3, r3, #31
    6b04:	b2da      	uxtb	r2, r3
    6b06:	2313      	movs	r3, #19
    6b08:	18fb      	adds	r3, r7, r3
    6b0a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6b0c:	4a1c      	ldr	r2, [pc, #112]	; (6b80 <system_gclk_gen_get_hz+0xcc>)
    6b0e:	1dfb      	adds	r3, r7, #7
    6b10:	781b      	ldrb	r3, [r3, #0]
    6b12:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6b14:	46c0      	nop			; (mov r8, r8)
    6b16:	4b15      	ldr	r3, [pc, #84]	; (6b6c <system_gclk_gen_get_hz+0xb8>)
    6b18:	4798      	blx	r3
    6b1a:	1e03      	subs	r3, r0, #0
    6b1c:	d1fb      	bne.n	6b16 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6b1e:	4b16      	ldr	r3, [pc, #88]	; (6b78 <system_gclk_gen_get_hz+0xc4>)
    6b20:	689b      	ldr	r3, [r3, #8]
    6b22:	021b      	lsls	r3, r3, #8
    6b24:	0c1b      	lsrs	r3, r3, #16
    6b26:	b29b      	uxth	r3, r3
    6b28:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6b2a:	4b16      	ldr	r3, [pc, #88]	; (6b84 <system_gclk_gen_get_hz+0xd0>)
    6b2c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6b2e:	2313      	movs	r3, #19
    6b30:	18fb      	adds	r3, r7, r3
    6b32:	781b      	ldrb	r3, [r3, #0]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d109      	bne.n	6b4c <system_gclk_gen_get_hz+0x98>
    6b38:	68fb      	ldr	r3, [r7, #12]
    6b3a:	2b01      	cmp	r3, #1
    6b3c:	d906      	bls.n	6b4c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    6b3e:	4b12      	ldr	r3, [pc, #72]	; (6b88 <system_gclk_gen_get_hz+0xd4>)
    6b40:	68f9      	ldr	r1, [r7, #12]
    6b42:	6978      	ldr	r0, [r7, #20]
    6b44:	4798      	blx	r3
    6b46:	0003      	movs	r3, r0
    6b48:	617b      	str	r3, [r7, #20]
    6b4a:	e00a      	b.n	6b62 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6b4c:	2313      	movs	r3, #19
    6b4e:	18fb      	adds	r3, r7, r3
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	2b00      	cmp	r3, #0
    6b54:	d005      	beq.n	6b62 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    6b56:	68fb      	ldr	r3, [r7, #12]
    6b58:	3301      	adds	r3, #1
    6b5a:	697a      	ldr	r2, [r7, #20]
    6b5c:	40da      	lsrs	r2, r3
    6b5e:	0013      	movs	r3, r2
    6b60:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6b62:	697b      	ldr	r3, [r7, #20]
}
    6b64:	0018      	movs	r0, r3
    6b66:	46bd      	mov	sp, r7
    6b68:	b006      	add	sp, #24
    6b6a:	bd80      	pop	{r7, pc}
    6b6c:	000068e5 	.word	0x000068e5
    6b70:	000068bd 	.word	0x000068bd
    6b74:	40000c04 	.word	0x40000c04
    6b78:	40000c00 	.word	0x40000c00
    6b7c:	00006161 	.word	0x00006161
    6b80:	40000c08 	.word	0x40000c08
    6b84:	000068d1 	.word	0x000068d1
    6b88:	0000aef9 	.word	0x0000aef9

00006b8c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6b8c:	b580      	push	{r7, lr}
    6b8e:	b084      	sub	sp, #16
    6b90:	af00      	add	r7, sp, #0
    6b92:	0002      	movs	r2, r0
    6b94:	6039      	str	r1, [r7, #0]
    6b96:	1dfb      	adds	r3, r7, #7
    6b98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6b9a:	1dfb      	adds	r3, r7, #7
    6b9c:	781b      	ldrb	r3, [r3, #0]
    6b9e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6ba0:	683b      	ldr	r3, [r7, #0]
    6ba2:	781b      	ldrb	r3, [r3, #0]
    6ba4:	021b      	lsls	r3, r3, #8
    6ba6:	001a      	movs	r2, r3
    6ba8:	68fb      	ldr	r3, [r7, #12]
    6baa:	4313      	orrs	r3, r2
    6bac:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6bae:	1dfb      	adds	r3, r7, #7
    6bb0:	781b      	ldrb	r3, [r3, #0]
    6bb2:	0018      	movs	r0, r3
    6bb4:	4b04      	ldr	r3, [pc, #16]	; (6bc8 <system_gclk_chan_set_config+0x3c>)
    6bb6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6bb8:	4b04      	ldr	r3, [pc, #16]	; (6bcc <system_gclk_chan_set_config+0x40>)
    6bba:	68fa      	ldr	r2, [r7, #12]
    6bbc:	b292      	uxth	r2, r2
    6bbe:	805a      	strh	r2, [r3, #2]
}
    6bc0:	46c0      	nop			; (mov r8, r8)
    6bc2:	46bd      	mov	sp, r7
    6bc4:	b004      	add	sp, #16
    6bc6:	bd80      	pop	{r7, pc}
    6bc8:	00006c19 	.word	0x00006c19
    6bcc:	40000c00 	.word	0x40000c00

00006bd0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6bd0:	b580      	push	{r7, lr}
    6bd2:	b082      	sub	sp, #8
    6bd4:	af00      	add	r7, sp, #0
    6bd6:	0002      	movs	r2, r0
    6bd8:	1dfb      	adds	r3, r7, #7
    6bda:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6bdc:	4b0a      	ldr	r3, [pc, #40]	; (6c08 <system_gclk_chan_enable+0x38>)
    6bde:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6be0:	4a0a      	ldr	r2, [pc, #40]	; (6c0c <system_gclk_chan_enable+0x3c>)
    6be2:	1dfb      	adds	r3, r7, #7
    6be4:	781b      	ldrb	r3, [r3, #0]
    6be6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6be8:	4909      	ldr	r1, [pc, #36]	; (6c10 <system_gclk_chan_enable+0x40>)
    6bea:	4b09      	ldr	r3, [pc, #36]	; (6c10 <system_gclk_chan_enable+0x40>)
    6bec:	885b      	ldrh	r3, [r3, #2]
    6bee:	b29b      	uxth	r3, r3
    6bf0:	2280      	movs	r2, #128	; 0x80
    6bf2:	01d2      	lsls	r2, r2, #7
    6bf4:	4313      	orrs	r3, r2
    6bf6:	b29b      	uxth	r3, r3
    6bf8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6bfa:	4b06      	ldr	r3, [pc, #24]	; (6c14 <system_gclk_chan_enable+0x44>)
    6bfc:	4798      	blx	r3
}
    6bfe:	46c0      	nop			; (mov r8, r8)
    6c00:	46bd      	mov	sp, r7
    6c02:	b002      	add	sp, #8
    6c04:	bd80      	pop	{r7, pc}
    6c06:	46c0      	nop			; (mov r8, r8)
    6c08:	000068bd 	.word	0x000068bd
    6c0c:	40000c02 	.word	0x40000c02
    6c10:	40000c00 	.word	0x40000c00
    6c14:	000068d1 	.word	0x000068d1

00006c18 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6c18:	b580      	push	{r7, lr}
    6c1a:	b084      	sub	sp, #16
    6c1c:	af00      	add	r7, sp, #0
    6c1e:	0002      	movs	r2, r0
    6c20:	1dfb      	adds	r3, r7, #7
    6c22:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6c24:	4b1c      	ldr	r3, [pc, #112]	; (6c98 <system_gclk_chan_disable+0x80>)
    6c26:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6c28:	4a1c      	ldr	r2, [pc, #112]	; (6c9c <system_gclk_chan_disable+0x84>)
    6c2a:	1dfb      	adds	r3, r7, #7
    6c2c:	781b      	ldrb	r3, [r3, #0]
    6c2e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6c30:	4b1b      	ldr	r3, [pc, #108]	; (6ca0 <system_gclk_chan_disable+0x88>)
    6c32:	885b      	ldrh	r3, [r3, #2]
    6c34:	051b      	lsls	r3, r3, #20
    6c36:	0f1b      	lsrs	r3, r3, #28
    6c38:	b2db      	uxtb	r3, r3
    6c3a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6c3c:	4a18      	ldr	r2, [pc, #96]	; (6ca0 <system_gclk_chan_disable+0x88>)
    6c3e:	8853      	ldrh	r3, [r2, #2]
    6c40:	4918      	ldr	r1, [pc, #96]	; (6ca4 <system_gclk_chan_disable+0x8c>)
    6c42:	400b      	ands	r3, r1
    6c44:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6c46:	4a16      	ldr	r2, [pc, #88]	; (6ca0 <system_gclk_chan_disable+0x88>)
    6c48:	4b15      	ldr	r3, [pc, #84]	; (6ca0 <system_gclk_chan_disable+0x88>)
    6c4a:	885b      	ldrh	r3, [r3, #2]
    6c4c:	b29b      	uxth	r3, r3
    6c4e:	4916      	ldr	r1, [pc, #88]	; (6ca8 <system_gclk_chan_disable+0x90>)
    6c50:	400b      	ands	r3, r1
    6c52:	b29b      	uxth	r3, r3
    6c54:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6c56:	46c0      	nop			; (mov r8, r8)
    6c58:	4b11      	ldr	r3, [pc, #68]	; (6ca0 <system_gclk_chan_disable+0x88>)
    6c5a:	885b      	ldrh	r3, [r3, #2]
    6c5c:	b29b      	uxth	r3, r3
    6c5e:	001a      	movs	r2, r3
    6c60:	2380      	movs	r3, #128	; 0x80
    6c62:	01db      	lsls	r3, r3, #7
    6c64:	4013      	ands	r3, r2
    6c66:	d1f7      	bne.n	6c58 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6c68:	4a0d      	ldr	r2, [pc, #52]	; (6ca0 <system_gclk_chan_disable+0x88>)
    6c6a:	68fb      	ldr	r3, [r7, #12]
    6c6c:	b2db      	uxtb	r3, r3
    6c6e:	1c19      	adds	r1, r3, #0
    6c70:	230f      	movs	r3, #15
    6c72:	400b      	ands	r3, r1
    6c74:	b2d9      	uxtb	r1, r3
    6c76:	8853      	ldrh	r3, [r2, #2]
    6c78:	1c08      	adds	r0, r1, #0
    6c7a:	210f      	movs	r1, #15
    6c7c:	4001      	ands	r1, r0
    6c7e:	0208      	lsls	r0, r1, #8
    6c80:	4908      	ldr	r1, [pc, #32]	; (6ca4 <system_gclk_chan_disable+0x8c>)
    6c82:	400b      	ands	r3, r1
    6c84:	1c19      	adds	r1, r3, #0
    6c86:	1c03      	adds	r3, r0, #0
    6c88:	430b      	orrs	r3, r1
    6c8a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6c8c:	4b07      	ldr	r3, [pc, #28]	; (6cac <system_gclk_chan_disable+0x94>)
    6c8e:	4798      	blx	r3
}
    6c90:	46c0      	nop			; (mov r8, r8)
    6c92:	46bd      	mov	sp, r7
    6c94:	b004      	add	sp, #16
    6c96:	bd80      	pop	{r7, pc}
    6c98:	000068bd 	.word	0x000068bd
    6c9c:	40000c02 	.word	0x40000c02
    6ca0:	40000c00 	.word	0x40000c00
    6ca4:	fffff0ff 	.word	0xfffff0ff
    6ca8:	ffffbfff 	.word	0xffffbfff
    6cac:	000068d1 	.word	0x000068d1

00006cb0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6cb0:	b580      	push	{r7, lr}
    6cb2:	b084      	sub	sp, #16
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	0002      	movs	r2, r0
    6cb8:	1dfb      	adds	r3, r7, #7
    6cba:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6cbc:	4b0d      	ldr	r3, [pc, #52]	; (6cf4 <system_gclk_chan_get_hz+0x44>)
    6cbe:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6cc0:	4a0d      	ldr	r2, [pc, #52]	; (6cf8 <system_gclk_chan_get_hz+0x48>)
    6cc2:	1dfb      	adds	r3, r7, #7
    6cc4:	781b      	ldrb	r3, [r3, #0]
    6cc6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6cc8:	4b0c      	ldr	r3, [pc, #48]	; (6cfc <system_gclk_chan_get_hz+0x4c>)
    6cca:	885b      	ldrh	r3, [r3, #2]
    6ccc:	051b      	lsls	r3, r3, #20
    6cce:	0f1b      	lsrs	r3, r3, #28
    6cd0:	b2da      	uxtb	r2, r3
    6cd2:	230f      	movs	r3, #15
    6cd4:	18fb      	adds	r3, r7, r3
    6cd6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6cd8:	4b09      	ldr	r3, [pc, #36]	; (6d00 <system_gclk_chan_get_hz+0x50>)
    6cda:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6cdc:	230f      	movs	r3, #15
    6cde:	18fb      	adds	r3, r7, r3
    6ce0:	781b      	ldrb	r3, [r3, #0]
    6ce2:	0018      	movs	r0, r3
    6ce4:	4b07      	ldr	r3, [pc, #28]	; (6d04 <system_gclk_chan_get_hz+0x54>)
    6ce6:	4798      	blx	r3
    6ce8:	0003      	movs	r3, r0
}
    6cea:	0018      	movs	r0, r3
    6cec:	46bd      	mov	sp, r7
    6cee:	b004      	add	sp, #16
    6cf0:	bd80      	pop	{r7, pc}
    6cf2:	46c0      	nop			; (mov r8, r8)
    6cf4:	000068bd 	.word	0x000068bd
    6cf8:	40000c02 	.word	0x40000c02
    6cfc:	40000c00 	.word	0x40000c00
    6d00:	000068d1 	.word	0x000068d1
    6d04:	00006ab5 	.word	0x00006ab5

00006d08 <system_pinmux_get_group_from_gpio_pin>:
{
    6d08:	b580      	push	{r7, lr}
    6d0a:	b084      	sub	sp, #16
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	0002      	movs	r2, r0
    6d10:	1dfb      	adds	r3, r7, #7
    6d12:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6d14:	230f      	movs	r3, #15
    6d16:	18fb      	adds	r3, r7, r3
    6d18:	1dfa      	adds	r2, r7, #7
    6d1a:	7812      	ldrb	r2, [r2, #0]
    6d1c:	09d2      	lsrs	r2, r2, #7
    6d1e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6d20:	230e      	movs	r3, #14
    6d22:	18fb      	adds	r3, r7, r3
    6d24:	1dfa      	adds	r2, r7, #7
    6d26:	7812      	ldrb	r2, [r2, #0]
    6d28:	0952      	lsrs	r2, r2, #5
    6d2a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6d2c:	4b0d      	ldr	r3, [pc, #52]	; (6d64 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6d2e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6d30:	230f      	movs	r3, #15
    6d32:	18fb      	adds	r3, r7, r3
    6d34:	781b      	ldrb	r3, [r3, #0]
    6d36:	2b00      	cmp	r3, #0
    6d38:	d10f      	bne.n	6d5a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6d3a:	230f      	movs	r3, #15
    6d3c:	18fb      	adds	r3, r7, r3
    6d3e:	781b      	ldrb	r3, [r3, #0]
    6d40:	009b      	lsls	r3, r3, #2
    6d42:	2210      	movs	r2, #16
    6d44:	4694      	mov	ip, r2
    6d46:	44bc      	add	ip, r7
    6d48:	4463      	add	r3, ip
    6d4a:	3b08      	subs	r3, #8
    6d4c:	681a      	ldr	r2, [r3, #0]
    6d4e:	230e      	movs	r3, #14
    6d50:	18fb      	adds	r3, r7, r3
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	01db      	lsls	r3, r3, #7
    6d56:	18d3      	adds	r3, r2, r3
    6d58:	e000      	b.n	6d5c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6d5a:	2300      	movs	r3, #0
}
    6d5c:	0018      	movs	r0, r3
    6d5e:	46bd      	mov	sp, r7
    6d60:	b004      	add	sp, #16
    6d62:	bd80      	pop	{r7, pc}
    6d64:	41004400 	.word	0x41004400

00006d68 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6d68:	b580      	push	{r7, lr}
    6d6a:	b088      	sub	sp, #32
    6d6c:	af00      	add	r7, sp, #0
    6d6e:	60f8      	str	r0, [r7, #12]
    6d70:	60b9      	str	r1, [r7, #8]
    6d72:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6d74:	2300      	movs	r3, #0
    6d76:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	78db      	ldrb	r3, [r3, #3]
    6d7c:	2201      	movs	r2, #1
    6d7e:	4053      	eors	r3, r2
    6d80:	b2db      	uxtb	r3, r3
    6d82:	2b00      	cmp	r3, #0
    6d84:	d035      	beq.n	6df2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6d86:	687b      	ldr	r3, [r7, #4]
    6d88:	781b      	ldrb	r3, [r3, #0]
    6d8a:	2b80      	cmp	r3, #128	; 0x80
    6d8c:	d00b      	beq.n	6da6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6d8e:	69fb      	ldr	r3, [r7, #28]
    6d90:	2280      	movs	r2, #128	; 0x80
    6d92:	0252      	lsls	r2, r2, #9
    6d94:	4313      	orrs	r3, r2
    6d96:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	781b      	ldrb	r3, [r3, #0]
    6d9c:	061b      	lsls	r3, r3, #24
    6d9e:	001a      	movs	r2, r3
    6da0:	69fb      	ldr	r3, [r7, #28]
    6da2:	4313      	orrs	r3, r2
    6da4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6da6:	687b      	ldr	r3, [r7, #4]
    6da8:	785b      	ldrb	r3, [r3, #1]
    6daa:	2b00      	cmp	r3, #0
    6dac:	d003      	beq.n	6db6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6dae:	687b      	ldr	r3, [r7, #4]
    6db0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6db2:	2b02      	cmp	r3, #2
    6db4:	d110      	bne.n	6dd8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6db6:	69fb      	ldr	r3, [r7, #28]
    6db8:	2280      	movs	r2, #128	; 0x80
    6dba:	0292      	lsls	r2, r2, #10
    6dbc:	4313      	orrs	r3, r2
    6dbe:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	789b      	ldrb	r3, [r3, #2]
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d004      	beq.n	6dd2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6dc8:	69fb      	ldr	r3, [r7, #28]
    6dca:	2280      	movs	r2, #128	; 0x80
    6dcc:	02d2      	lsls	r2, r2, #11
    6dce:	4313      	orrs	r3, r2
    6dd0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6dd2:	68fb      	ldr	r3, [r7, #12]
    6dd4:	68ba      	ldr	r2, [r7, #8]
    6dd6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6dd8:	687b      	ldr	r3, [r7, #4]
    6dda:	785b      	ldrb	r3, [r3, #1]
    6ddc:	2b01      	cmp	r3, #1
    6dde:	d003      	beq.n	6de8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6de4:	2b02      	cmp	r3, #2
    6de6:	d107      	bne.n	6df8 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6de8:	69fb      	ldr	r3, [r7, #28]
    6dea:	4a22      	ldr	r2, [pc, #136]	; (6e74 <_system_pinmux_config+0x10c>)
    6dec:	4013      	ands	r3, r2
    6dee:	61fb      	str	r3, [r7, #28]
    6df0:	e002      	b.n	6df8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6df2:	68fb      	ldr	r3, [r7, #12]
    6df4:	68ba      	ldr	r2, [r7, #8]
    6df6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6df8:	68bb      	ldr	r3, [r7, #8]
    6dfa:	041b      	lsls	r3, r3, #16
    6dfc:	0c1b      	lsrs	r3, r3, #16
    6dfe:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6e00:	68bb      	ldr	r3, [r7, #8]
    6e02:	0c1b      	lsrs	r3, r3, #16
    6e04:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6e06:	69ba      	ldr	r2, [r7, #24]
    6e08:	69fb      	ldr	r3, [r7, #28]
    6e0a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6e0c:	22a0      	movs	r2, #160	; 0xa0
    6e0e:	05d2      	lsls	r2, r2, #23
    6e10:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6e12:	68fb      	ldr	r3, [r7, #12]
    6e14:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6e16:	697a      	ldr	r2, [r7, #20]
    6e18:	69fb      	ldr	r3, [r7, #28]
    6e1a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6e1c:	22d0      	movs	r2, #208	; 0xd0
    6e1e:	0612      	lsls	r2, r2, #24
    6e20:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6e22:	68fb      	ldr	r3, [r7, #12]
    6e24:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6e26:	687b      	ldr	r3, [r7, #4]
    6e28:	78db      	ldrb	r3, [r3, #3]
    6e2a:	2201      	movs	r2, #1
    6e2c:	4053      	eors	r3, r2
    6e2e:	b2db      	uxtb	r3, r3
    6e30:	2b00      	cmp	r3, #0
    6e32:	d01a      	beq.n	6e6a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6e34:	69fa      	ldr	r2, [r7, #28]
    6e36:	2380      	movs	r3, #128	; 0x80
    6e38:	02db      	lsls	r3, r3, #11
    6e3a:	4013      	ands	r3, r2
    6e3c:	d00a      	beq.n	6e54 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6e3e:	687b      	ldr	r3, [r7, #4]
    6e40:	789b      	ldrb	r3, [r3, #2]
    6e42:	2b01      	cmp	r3, #1
    6e44:	d103      	bne.n	6e4e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6e46:	68fb      	ldr	r3, [r7, #12]
    6e48:	68ba      	ldr	r2, [r7, #8]
    6e4a:	619a      	str	r2, [r3, #24]
    6e4c:	e002      	b.n	6e54 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6e4e:	68fb      	ldr	r3, [r7, #12]
    6e50:	68ba      	ldr	r2, [r7, #8]
    6e52:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6e54:	687b      	ldr	r3, [r7, #4]
    6e56:	785b      	ldrb	r3, [r3, #1]
    6e58:	2b01      	cmp	r3, #1
    6e5a:	d003      	beq.n	6e64 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6e5c:	687b      	ldr	r3, [r7, #4]
    6e5e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6e60:	2b02      	cmp	r3, #2
    6e62:	d102      	bne.n	6e6a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6e64:	68fb      	ldr	r3, [r7, #12]
    6e66:	68ba      	ldr	r2, [r7, #8]
    6e68:	609a      	str	r2, [r3, #8]
		}
	}
}
    6e6a:	46c0      	nop			; (mov r8, r8)
    6e6c:	46bd      	mov	sp, r7
    6e6e:	b008      	add	sp, #32
    6e70:	bd80      	pop	{r7, pc}
    6e72:	46c0      	nop			; (mov r8, r8)
    6e74:	fffbffff 	.word	0xfffbffff

00006e78 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6e78:	b580      	push	{r7, lr}
    6e7a:	b084      	sub	sp, #16
    6e7c:	af00      	add	r7, sp, #0
    6e7e:	0002      	movs	r2, r0
    6e80:	6039      	str	r1, [r7, #0]
    6e82:	1dfb      	adds	r3, r7, #7
    6e84:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6e86:	1dfb      	adds	r3, r7, #7
    6e88:	781b      	ldrb	r3, [r3, #0]
    6e8a:	0018      	movs	r0, r3
    6e8c:	4b0a      	ldr	r3, [pc, #40]	; (6eb8 <system_pinmux_pin_set_config+0x40>)
    6e8e:	4798      	blx	r3
    6e90:	0003      	movs	r3, r0
    6e92:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6e94:	1dfb      	adds	r3, r7, #7
    6e96:	781b      	ldrb	r3, [r3, #0]
    6e98:	221f      	movs	r2, #31
    6e9a:	4013      	ands	r3, r2
    6e9c:	2201      	movs	r2, #1
    6e9e:	409a      	lsls	r2, r3
    6ea0:	0013      	movs	r3, r2
    6ea2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6ea4:	683a      	ldr	r2, [r7, #0]
    6ea6:	68b9      	ldr	r1, [r7, #8]
    6ea8:	68fb      	ldr	r3, [r7, #12]
    6eaa:	0018      	movs	r0, r3
    6eac:	4b03      	ldr	r3, [pc, #12]	; (6ebc <system_pinmux_pin_set_config+0x44>)
    6eae:	4798      	blx	r3
}
    6eb0:	46c0      	nop			; (mov r8, r8)
    6eb2:	46bd      	mov	sp, r7
    6eb4:	b004      	add	sp, #16
    6eb6:	bd80      	pop	{r7, pc}
    6eb8:	00006d09 	.word	0x00006d09
    6ebc:	00006d69 	.word	0x00006d69

00006ec0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	af00      	add	r7, sp, #0
	return;
    6ec4:	46c0      	nop			; (mov r8, r8)
}
    6ec6:	46bd      	mov	sp, r7
    6ec8:	bd80      	pop	{r7, pc}
	...

00006ecc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6ecc:	b580      	push	{r7, lr}
    6ece:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6ed0:	4b06      	ldr	r3, [pc, #24]	; (6eec <system_init+0x20>)
    6ed2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6ed4:	4b06      	ldr	r3, [pc, #24]	; (6ef0 <system_init+0x24>)
    6ed6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6ed8:	4b06      	ldr	r3, [pc, #24]	; (6ef4 <system_init+0x28>)
    6eda:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6edc:	4b06      	ldr	r3, [pc, #24]	; (6ef8 <system_init+0x2c>)
    6ede:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6ee0:	4b06      	ldr	r3, [pc, #24]	; (6efc <system_init+0x30>)
    6ee2:	4798      	blx	r3
}
    6ee4:	46c0      	nop			; (mov r8, r8)
    6ee6:	46bd      	mov	sp, r7
    6ee8:	bd80      	pop	{r7, pc}
    6eea:	46c0      	nop			; (mov r8, r8)
    6eec:	000065f1 	.word	0x000065f1
    6ef0:	000002f9 	.word	0x000002f9
    6ef4:	00006ec1 	.word	0x00006ec1
    6ef8:	00006ec1 	.word	0x00006ec1
    6efc:	00006ec1 	.word	0x00006ec1

00006f00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6f00:	b580      	push	{r7, lr}
    6f02:	b082      	sub	sp, #8
    6f04:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6f06:	4b2f      	ldr	r3, [pc, #188]	; (6fc4 <Reset_Handler+0xc4>)
    6f08:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6f0a:	4b2f      	ldr	r3, [pc, #188]	; (6fc8 <Reset_Handler+0xc8>)
    6f0c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6f0e:	687a      	ldr	r2, [r7, #4]
    6f10:	683b      	ldr	r3, [r7, #0]
    6f12:	429a      	cmp	r2, r3
    6f14:	d00c      	beq.n	6f30 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6f16:	e007      	b.n	6f28 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6f18:	683b      	ldr	r3, [r7, #0]
    6f1a:	1d1a      	adds	r2, r3, #4
    6f1c:	603a      	str	r2, [r7, #0]
    6f1e:	687a      	ldr	r2, [r7, #4]
    6f20:	1d11      	adds	r1, r2, #4
    6f22:	6079      	str	r1, [r7, #4]
    6f24:	6812      	ldr	r2, [r2, #0]
    6f26:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6f28:	683a      	ldr	r2, [r7, #0]
    6f2a:	4b28      	ldr	r3, [pc, #160]	; (6fcc <Reset_Handler+0xcc>)
    6f2c:	429a      	cmp	r2, r3
    6f2e:	d3f3      	bcc.n	6f18 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6f30:	4b27      	ldr	r3, [pc, #156]	; (6fd0 <Reset_Handler+0xd0>)
    6f32:	603b      	str	r3, [r7, #0]
    6f34:	e004      	b.n	6f40 <Reset_Handler+0x40>
                *pDest++ = 0;
    6f36:	683b      	ldr	r3, [r7, #0]
    6f38:	1d1a      	adds	r2, r3, #4
    6f3a:	603a      	str	r2, [r7, #0]
    6f3c:	2200      	movs	r2, #0
    6f3e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6f40:	683a      	ldr	r2, [r7, #0]
    6f42:	4b24      	ldr	r3, [pc, #144]	; (6fd4 <Reset_Handler+0xd4>)
    6f44:	429a      	cmp	r2, r3
    6f46:	d3f6      	bcc.n	6f36 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6f48:	4b23      	ldr	r3, [pc, #140]	; (6fd8 <Reset_Handler+0xd8>)
    6f4a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6f4c:	4b23      	ldr	r3, [pc, #140]	; (6fdc <Reset_Handler+0xdc>)
    6f4e:	687a      	ldr	r2, [r7, #4]
    6f50:	21ff      	movs	r1, #255	; 0xff
    6f52:	438a      	bics	r2, r1
    6f54:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6f56:	4a22      	ldr	r2, [pc, #136]	; (6fe0 <Reset_Handler+0xe0>)
    6f58:	2390      	movs	r3, #144	; 0x90
    6f5a:	005b      	lsls	r3, r3, #1
    6f5c:	2102      	movs	r1, #2
    6f5e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6f60:	4a20      	ldr	r2, [pc, #128]	; (6fe4 <Reset_Handler+0xe4>)
    6f62:	78d3      	ldrb	r3, [r2, #3]
    6f64:	2103      	movs	r1, #3
    6f66:	438b      	bics	r3, r1
    6f68:	1c19      	adds	r1, r3, #0
    6f6a:	2302      	movs	r3, #2
    6f6c:	430b      	orrs	r3, r1
    6f6e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6f70:	4a1c      	ldr	r2, [pc, #112]	; (6fe4 <Reset_Handler+0xe4>)
    6f72:	78d3      	ldrb	r3, [r2, #3]
    6f74:	210c      	movs	r1, #12
    6f76:	438b      	bics	r3, r1
    6f78:	1c19      	adds	r1, r3, #0
    6f7a:	2308      	movs	r3, #8
    6f7c:	430b      	orrs	r3, r1
    6f7e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6f80:	4a19      	ldr	r2, [pc, #100]	; (6fe8 <Reset_Handler+0xe8>)
    6f82:	7b93      	ldrb	r3, [r2, #14]
    6f84:	2130      	movs	r1, #48	; 0x30
    6f86:	438b      	bics	r3, r1
    6f88:	1c19      	adds	r1, r3, #0
    6f8a:	2320      	movs	r3, #32
    6f8c:	430b      	orrs	r3, r1
    6f8e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6f90:	4a15      	ldr	r2, [pc, #84]	; (6fe8 <Reset_Handler+0xe8>)
    6f92:	7b93      	ldrb	r3, [r2, #14]
    6f94:	210c      	movs	r1, #12
    6f96:	438b      	bics	r3, r1
    6f98:	1c19      	adds	r1, r3, #0
    6f9a:	2308      	movs	r3, #8
    6f9c:	430b      	orrs	r3, r1
    6f9e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6fa0:	4a11      	ldr	r2, [pc, #68]	; (6fe8 <Reset_Handler+0xe8>)
    6fa2:	7b93      	ldrb	r3, [r2, #14]
    6fa4:	2103      	movs	r1, #3
    6fa6:	438b      	bics	r3, r1
    6fa8:	1c19      	adds	r1, r3, #0
    6faa:	2302      	movs	r3, #2
    6fac:	430b      	orrs	r3, r1
    6fae:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6fb0:	4a0e      	ldr	r2, [pc, #56]	; (6fec <Reset_Handler+0xec>)
    6fb2:	6853      	ldr	r3, [r2, #4]
    6fb4:	2180      	movs	r1, #128	; 0x80
    6fb6:	430b      	orrs	r3, r1
    6fb8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6fba:	4b0d      	ldr	r3, [pc, #52]	; (6ff0 <Reset_Handler+0xf0>)
    6fbc:	4798      	blx	r3

        /* Branch to main function */
        main();
    6fbe:	4b0d      	ldr	r3, [pc, #52]	; (6ff4 <Reset_Handler+0xf4>)
    6fc0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6fc2:	e7fe      	b.n	6fc2 <Reset_Handler+0xc2>
    6fc4:	0000cd64 	.word	0x0000cd64
    6fc8:	20000000 	.word	0x20000000
    6fcc:	20000094 	.word	0x20000094
    6fd0:	20000094 	.word	0x20000094
    6fd4:	20000c94 	.word	0x20000c94
    6fd8:	00000000 	.word	0x00000000
    6fdc:	e000ed00 	.word	0xe000ed00
    6fe0:	41007000 	.word	0x41007000
    6fe4:	41005000 	.word	0x41005000
    6fe8:	41004800 	.word	0x41004800
    6fec:	41004000 	.word	0x41004000
    6ff0:	0000b239 	.word	0x0000b239
    6ff4:	0000a7fd 	.word	0x0000a7fd

00006ff8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6ff8:	b580      	push	{r7, lr}
    6ffa:	af00      	add	r7, sp, #0
        while (1) {
    6ffc:	e7fe      	b.n	6ffc <Dummy_Handler+0x4>
	...

00007000 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7000:	b580      	push	{r7, lr}
    7002:	b086      	sub	sp, #24
    7004:	af00      	add	r7, sp, #0
    7006:	60f8      	str	r0, [r7, #12]
    7008:	60b9      	str	r1, [r7, #8]
    700a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    700c:	2300      	movs	r3, #0
    700e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    7010:	68fb      	ldr	r3, [r7, #12]
    7012:	2b00      	cmp	r3, #0
    7014:	d012      	beq.n	703c <_read+0x3c>
		return -1;
    7016:	2301      	movs	r3, #1
    7018:	425b      	negs	r3, r3
    701a:	e013      	b.n	7044 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    701c:	4b0b      	ldr	r3, [pc, #44]	; (704c <_read+0x4c>)
    701e:	681a      	ldr	r2, [r3, #0]
    7020:	4b0b      	ldr	r3, [pc, #44]	; (7050 <_read+0x50>)
    7022:	681b      	ldr	r3, [r3, #0]
    7024:	68b9      	ldr	r1, [r7, #8]
    7026:	0018      	movs	r0, r3
    7028:	4790      	blx	r2
		ptr++;
    702a:	68bb      	ldr	r3, [r7, #8]
    702c:	3301      	adds	r3, #1
    702e:	60bb      	str	r3, [r7, #8]
		nChars++;
    7030:	697b      	ldr	r3, [r7, #20]
    7032:	3301      	adds	r3, #1
    7034:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    7036:	687b      	ldr	r3, [r7, #4]
    7038:	3b01      	subs	r3, #1
    703a:	607b      	str	r3, [r7, #4]
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	2b00      	cmp	r3, #0
    7040:	dcec      	bgt.n	701c <_read+0x1c>
	}
	return nChars;
    7042:	697b      	ldr	r3, [r7, #20]
}
    7044:	0018      	movs	r0, r3
    7046:	46bd      	mov	sp, r7
    7048:	b006      	add	sp, #24
    704a:	bd80      	pop	{r7, pc}
    704c:	200009f0 	.word	0x200009f0
    7050:	200009f8 	.word	0x200009f8

00007054 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7054:	b580      	push	{r7, lr}
    7056:	b086      	sub	sp, #24
    7058:	af00      	add	r7, sp, #0
    705a:	60f8      	str	r0, [r7, #12]
    705c:	60b9      	str	r1, [r7, #8]
    705e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    7060:	2300      	movs	r3, #0
    7062:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    7064:	68fb      	ldr	r3, [r7, #12]
    7066:	2b01      	cmp	r3, #1
    7068:	d01d      	beq.n	70a6 <_write+0x52>
    706a:	68fb      	ldr	r3, [r7, #12]
    706c:	2b02      	cmp	r3, #2
    706e:	d01a      	beq.n	70a6 <_write+0x52>
    7070:	68fb      	ldr	r3, [r7, #12]
    7072:	2b03      	cmp	r3, #3
    7074:	d017      	beq.n	70a6 <_write+0x52>
		return -1;
    7076:	2301      	movs	r3, #1
    7078:	425b      	negs	r3, r3
    707a:	e018      	b.n	70ae <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    707c:	4b0e      	ldr	r3, [pc, #56]	; (70b8 <_write+0x64>)
    707e:	681a      	ldr	r2, [r3, #0]
    7080:	4b0e      	ldr	r3, [pc, #56]	; (70bc <_write+0x68>)
    7082:	6818      	ldr	r0, [r3, #0]
    7084:	68bb      	ldr	r3, [r7, #8]
    7086:	1c59      	adds	r1, r3, #1
    7088:	60b9      	str	r1, [r7, #8]
    708a:	781b      	ldrb	r3, [r3, #0]
    708c:	0019      	movs	r1, r3
    708e:	4790      	blx	r2
    7090:	1e03      	subs	r3, r0, #0
    7092:	da02      	bge.n	709a <_write+0x46>
			return -1;
    7094:	2301      	movs	r3, #1
    7096:	425b      	negs	r3, r3
    7098:	e009      	b.n	70ae <_write+0x5a>
		}
		++nChars;
    709a:	697b      	ldr	r3, [r7, #20]
    709c:	3301      	adds	r3, #1
    709e:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	3b01      	subs	r3, #1
    70a4:	607b      	str	r3, [r7, #4]
    70a6:	687b      	ldr	r3, [r7, #4]
    70a8:	2b00      	cmp	r3, #0
    70aa:	d1e7      	bne.n	707c <_write+0x28>
	}
	return nChars;
    70ac:	697b      	ldr	r3, [r7, #20]
}
    70ae:	0018      	movs	r0, r3
    70b0:	46bd      	mov	sp, r7
    70b2:	b006      	add	sp, #24
    70b4:	bd80      	pop	{r7, pc}
    70b6:	46c0      	nop			; (mov r8, r8)
    70b8:	200009f4 	.word	0x200009f4
    70bc:	200009f8 	.word	0x200009f8

000070c0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    70c0:	b580      	push	{r7, lr}
    70c2:	b084      	sub	sp, #16
    70c4:	af00      	add	r7, sp, #0
    70c6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    70c8:	4b0a      	ldr	r3, [pc, #40]	; (70f4 <_sbrk+0x34>)
    70ca:	681b      	ldr	r3, [r3, #0]
    70cc:	2b00      	cmp	r3, #0
    70ce:	d102      	bne.n	70d6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    70d0:	4b08      	ldr	r3, [pc, #32]	; (70f4 <_sbrk+0x34>)
    70d2:	4a09      	ldr	r2, [pc, #36]	; (70f8 <_sbrk+0x38>)
    70d4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    70d6:	4b07      	ldr	r3, [pc, #28]	; (70f4 <_sbrk+0x34>)
    70d8:	681b      	ldr	r3, [r3, #0]
    70da:	60fb      	str	r3, [r7, #12]

	heap += incr;
    70dc:	4b05      	ldr	r3, [pc, #20]	; (70f4 <_sbrk+0x34>)
    70de:	681a      	ldr	r2, [r3, #0]
    70e0:	687b      	ldr	r3, [r7, #4]
    70e2:	18d2      	adds	r2, r2, r3
    70e4:	4b03      	ldr	r3, [pc, #12]	; (70f4 <_sbrk+0x34>)
    70e6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    70e8:	68fb      	ldr	r3, [r7, #12]
}
    70ea:	0018      	movs	r0, r3
    70ec:	46bd      	mov	sp, r7
    70ee:	b004      	add	sp, #16
    70f0:	bd80      	pop	{r7, pc}
    70f2:	46c0      	nop			; (mov r8, r8)
    70f4:	20000178 	.word	0x20000178
    70f8:	20002c98 	.word	0x20002c98

000070fc <_close>:
{
	return -1;
}

extern int _close(int file)
{
    70fc:	b580      	push	{r7, lr}
    70fe:	b082      	sub	sp, #8
    7100:	af00      	add	r7, sp, #0
    7102:	6078      	str	r0, [r7, #4]
	return -1;
    7104:	2301      	movs	r3, #1
    7106:	425b      	negs	r3, r3
}
    7108:	0018      	movs	r0, r3
    710a:	46bd      	mov	sp, r7
    710c:	b002      	add	sp, #8
    710e:	bd80      	pop	{r7, pc}

00007110 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    7110:	b580      	push	{r7, lr}
    7112:	b082      	sub	sp, #8
    7114:	af00      	add	r7, sp, #0
    7116:	6078      	str	r0, [r7, #4]
    7118:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    711a:	683b      	ldr	r3, [r7, #0]
    711c:	2280      	movs	r2, #128	; 0x80
    711e:	0192      	lsls	r2, r2, #6
    7120:	605a      	str	r2, [r3, #4]

	return 0;
    7122:	2300      	movs	r3, #0
}
    7124:	0018      	movs	r0, r3
    7126:	46bd      	mov	sp, r7
    7128:	b002      	add	sp, #8
    712a:	bd80      	pop	{r7, pc}

0000712c <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    712c:	b580      	push	{r7, lr}
    712e:	b084      	sub	sp, #16
    7130:	af00      	add	r7, sp, #0
    7132:	60f8      	str	r0, [r7, #12]
    7134:	60b9      	str	r1, [r7, #8]
    7136:	607a      	str	r2, [r7, #4]
	return 0;
    7138:	2300      	movs	r3, #0
}
    713a:	0018      	movs	r0, r3
    713c:	46bd      	mov	sp, r7
    713e:	b004      	add	sp, #16
    7140:	bd80      	pop	{r7, pc}

00007142 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    7142:	b580      	push	{r7, lr}
    7144:	b082      	sub	sp, #8
    7146:	af00      	add	r7, sp, #0
    7148:	6078      	str	r0, [r7, #4]
	time->second = 0;
    714a:	687b      	ldr	r3, [r7, #4]
    714c:	2200      	movs	r2, #0
    714e:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	2200      	movs	r2, #0
    7154:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    7156:	687b      	ldr	r3, [r7, #4]
    7158:	2200      	movs	r2, #0
    715a:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	2200      	movs	r2, #0
    7160:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    7162:	687b      	ldr	r3, [r7, #4]
    7164:	2201      	movs	r2, #1
    7166:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    7168:	687b      	ldr	r3, [r7, #4]
    716a:	2201      	movs	r2, #1
    716c:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	22fa      	movs	r2, #250	; 0xfa
    7172:	00d2      	lsls	r2, r2, #3
    7174:	80da      	strh	r2, [r3, #6]
}
    7176:	46c0      	nop			; (mov r8, r8)
    7178:	46bd      	mov	sp, r7
    717a:	b002      	add	sp, #8
    717c:	bd80      	pop	{r7, pc}
	...

00007180 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    7180:	b580      	push	{r7, lr}
    7182:	b086      	sub	sp, #24
    7184:	af00      	add	r7, sp, #0
    7186:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    7188:	230c      	movs	r3, #12
    718a:	18fb      	adds	r3, r7, r3
    718c:	0018      	movs	r0, r3
    718e:	4b23      	ldr	r3, [pc, #140]	; (721c <rtc_calendar_get_config_defaults+0x9c>)
    7190:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    7192:	687b      	ldr	r3, [r7, #4]
    7194:	22a0      	movs	r2, #160	; 0xa0
    7196:	0112      	lsls	r2, r2, #4
    7198:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    719a:	687b      	ldr	r3, [r7, #4]
    719c:	2200      	movs	r2, #0
    719e:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	2200      	movs	r2, #0
    71a4:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	2200      	movs	r2, #0
    71aa:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    71ac:	687b      	ldr	r3, [r7, #4]
    71ae:	22fa      	movs	r2, #250	; 0xfa
    71b0:	00d2      	lsls	r2, r2, #3
    71b2:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    71b4:	2317      	movs	r3, #23
    71b6:	18fb      	adds	r3, r7, r3
    71b8:	2200      	movs	r2, #0
    71ba:	701a      	strb	r2, [r3, #0]
    71bc:	e025      	b.n	720a <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    71be:	2317      	movs	r3, #23
    71c0:	18fb      	adds	r3, r7, r3
    71c2:	781a      	ldrb	r2, [r3, #0]
    71c4:	6879      	ldr	r1, [r7, #4]
    71c6:	2008      	movs	r0, #8
    71c8:	0013      	movs	r3, r2
    71ca:	009b      	lsls	r3, r3, #2
    71cc:	189b      	adds	r3, r3, r2
    71ce:	005b      	lsls	r3, r3, #1
    71d0:	18cb      	adds	r3, r1, r3
    71d2:	181a      	adds	r2, r3, r0
    71d4:	230c      	movs	r3, #12
    71d6:	18fb      	adds	r3, r7, r3
    71d8:	0010      	movs	r0, r2
    71da:	0019      	movs	r1, r3
    71dc:	2308      	movs	r3, #8
    71de:	001a      	movs	r2, r3
    71e0:	4b0f      	ldr	r3, [pc, #60]	; (7220 <rtc_calendar_get_config_defaults+0xa0>)
    71e2:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    71e4:	2317      	movs	r3, #23
    71e6:	18fb      	adds	r3, r7, r3
    71e8:	781a      	ldrb	r2, [r3, #0]
    71ea:	6879      	ldr	r1, [r7, #4]
    71ec:	0013      	movs	r3, r2
    71ee:	009b      	lsls	r3, r3, #2
    71f0:	189b      	adds	r3, r3, r2
    71f2:	005b      	lsls	r3, r3, #1
    71f4:	18cb      	adds	r3, r1, r3
    71f6:	3310      	adds	r3, #16
    71f8:	2206      	movs	r2, #6
    71fa:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    71fc:	2317      	movs	r3, #23
    71fe:	18fb      	adds	r3, r7, r3
    7200:	781a      	ldrb	r2, [r3, #0]
    7202:	2317      	movs	r3, #23
    7204:	18fb      	adds	r3, r7, r3
    7206:	3201      	adds	r2, #1
    7208:	701a      	strb	r2, [r3, #0]
    720a:	2317      	movs	r3, #23
    720c:	18fb      	adds	r3, r7, r3
    720e:	781b      	ldrb	r3, [r3, #0]
    7210:	2b00      	cmp	r3, #0
    7212:	d0d4      	beq.n	71be <rtc_calendar_get_config_defaults+0x3e>
	}
}
    7214:	46c0      	nop			; (mov r8, r8)
    7216:	46bd      	mov	sp, r7
    7218:	b006      	add	sp, #24
    721a:	bd80      	pop	{r7, pc}
    721c:	00007143 	.word	0x00007143
    7220:	0000b295 	.word	0x0000b295

00007224 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    7224:	b580      	push	{r7, lr}
    7226:	b088      	sub	sp, #32
    7228:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    722a:	230c      	movs	r3, #12
    722c:	18fb      	adds	r3, r7, r3
    722e:	0018      	movs	r0, r3
    7230:	4b1a      	ldr	r3, [pc, #104]	; (729c <configure_rtc_calendar+0x78>)
    7232:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    7234:	1d3b      	adds	r3, r7, #4
    7236:	0018      	movs	r0, r3
    7238:	4b19      	ldr	r3, [pc, #100]	; (72a0 <configure_rtc_calendar+0x7c>)
    723a:	4798      	blx	r3
	init_time.year   = 2014;
    723c:	1d3b      	adds	r3, r7, #4
    723e:	4a19      	ldr	r2, [pc, #100]	; (72a4 <configure_rtc_calendar+0x80>)
    7240:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    7242:	1d3b      	adds	r3, r7, #4
    7244:	2201      	movs	r2, #1
    7246:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    7248:	1d3b      	adds	r3, r7, #4
    724a:	2201      	movs	r2, #1
    724c:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    724e:	1d3b      	adds	r3, r7, #4
    7250:	2200      	movs	r2, #0
    7252:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    7254:	1d3b      	adds	r3, r7, #4
    7256:	2200      	movs	r2, #0
    7258:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    725a:	1d3b      	adds	r3, r7, #4
    725c:	2204      	movs	r2, #4
    725e:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    7260:	230c      	movs	r3, #12
    7262:	18fb      	adds	r3, r7, r3
    7264:	2201      	movs	r2, #1
    7266:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    7268:	230c      	movs	r3, #12
    726a:	18fb      	adds	r3, r7, r3
    726c:	1d3a      	adds	r2, r7, #4
    726e:	3308      	adds	r3, #8
    7270:	ca03      	ldmia	r2!, {r0, r1}
    7272:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    7274:	230c      	movs	r3, #12
    7276:	18fb      	adds	r3, r7, r3
    7278:	2206      	movs	r2, #6
    727a:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    727c:	230c      	movs	r3, #12
    727e:	18fa      	adds	r2, r7, r3
    7280:	4909      	ldr	r1, [pc, #36]	; (72a8 <configure_rtc_calendar+0x84>)
    7282:	4b0a      	ldr	r3, [pc, #40]	; (72ac <configure_rtc_calendar+0x88>)
    7284:	0018      	movs	r0, r3
    7286:	4b0a      	ldr	r3, [pc, #40]	; (72b0 <configure_rtc_calendar+0x8c>)
    7288:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    728a:	4b08      	ldr	r3, [pc, #32]	; (72ac <configure_rtc_calendar+0x88>)
    728c:	0018      	movs	r0, r3
    728e:	4b09      	ldr	r3, [pc, #36]	; (72b4 <configure_rtc_calendar+0x90>)
    7290:	4798      	blx	r3
}
    7292:	46c0      	nop			; (mov r8, r8)
    7294:	46bd      	mov	sp, r7
    7296:	b008      	add	sp, #32
    7298:	bd80      	pop	{r7, pc}
    729a:	46c0      	nop			; (mov r8, r8)
    729c:	00007181 	.word	0x00007181
    72a0:	00007143 	.word	0x00007143
    72a4:	000007de 	.word	0x000007de
    72a8:	40001400 	.word	0x40001400
    72ac:	200009fc 	.word	0x200009fc
    72b0:	00003969 	.word	0x00003969
    72b4:	000036b9 	.word	0x000036b9

000072b8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    72b8:	b590      	push	{r4, r7, lr}
    72ba:	b085      	sub	sp, #20
    72bc:	af00      	add	r7, sp, #0
    72be:	0002      	movs	r2, r0
    72c0:	1dfb      	adds	r3, r7, #7
    72c2:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    72c4:	4b1a      	ldr	r3, [pc, #104]	; (7330 <disk_initialize+0x78>)
    72c6:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    72c8:	1dfb      	adds	r3, r7, #7
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	2b01      	cmp	r3, #1
    72ce:	d901      	bls.n	72d4 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    72d0:	2301      	movs	r3, #1
    72d2:	e029      	b.n	7328 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    72d4:	2300      	movs	r3, #0
    72d6:	60fb      	str	r3, [r7, #12]
    72d8:	e010      	b.n	72fc <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    72da:	230b      	movs	r3, #11
    72dc:	18fc      	adds	r4, r7, r3
    72de:	1dfb      	adds	r3, r7, #7
    72e0:	781b      	ldrb	r3, [r3, #0]
    72e2:	0018      	movs	r0, r3
    72e4:	4b13      	ldr	r3, [pc, #76]	; (7334 <disk_initialize+0x7c>)
    72e6:	4798      	blx	r3
    72e8:	0003      	movs	r3, r0
    72ea:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    72ec:	230b      	movs	r3, #11
    72ee:	18fb      	adds	r3, r7, r3
    72f0:	781b      	ldrb	r3, [r3, #0]
    72f2:	2b03      	cmp	r3, #3
    72f4:	d106      	bne.n	7304 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    72f6:	68fb      	ldr	r3, [r7, #12]
    72f8:	3301      	adds	r3, #1
    72fa:	60fb      	str	r3, [r7, #12]
    72fc:	68fb      	ldr	r3, [r7, #12]
    72fe:	2b01      	cmp	r3, #1
    7300:	ddeb      	ble.n	72da <disk_initialize+0x22>
    7302:	e000      	b.n	7306 <disk_initialize+0x4e>
			break;
    7304:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    7306:	230b      	movs	r3, #11
    7308:	18fb      	adds	r3, r7, r3
    730a:	781b      	ldrb	r3, [r3, #0]
    730c:	2b00      	cmp	r3, #0
    730e:	d001      	beq.n	7314 <disk_initialize+0x5c>
		return STA_NOINIT;
    7310:	2301      	movs	r3, #1
    7312:	e009      	b.n	7328 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    7314:	1dfb      	adds	r3, r7, #7
    7316:	781b      	ldrb	r3, [r3, #0]
    7318:	0018      	movs	r0, r3
    731a:	4b07      	ldr	r3, [pc, #28]	; (7338 <disk_initialize+0x80>)
    731c:	4798      	blx	r3
    731e:	1e03      	subs	r3, r0, #0
    7320:	d001      	beq.n	7326 <disk_initialize+0x6e>
		return STA_PROTECT;
    7322:	2304      	movs	r3, #4
    7324:	e000      	b.n	7328 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    7326:	2300      	movs	r3, #0
}
    7328:	0018      	movs	r0, r3
    732a:	46bd      	mov	sp, r7
    732c:	b005      	add	sp, #20
    732e:	bd90      	pop	{r4, r7, pc}
    7330:	00007225 	.word	0x00007225
    7334:	00003359 	.word	0x00003359
    7338:	00003411 	.word	0x00003411

0000733c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    733c:	b580      	push	{r7, lr}
    733e:	b082      	sub	sp, #8
    7340:	af00      	add	r7, sp, #0
    7342:	0002      	movs	r2, r0
    7344:	1dfb      	adds	r3, r7, #7
    7346:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    7348:	1dfb      	adds	r3, r7, #7
    734a:	781b      	ldrb	r3, [r3, #0]
    734c:	0018      	movs	r0, r3
    734e:	4b08      	ldr	r3, [pc, #32]	; (7370 <disk_status+0x34>)
    7350:	4798      	blx	r3
    7352:	1e03      	subs	r3, r0, #0
    7354:	d002      	beq.n	735c <disk_status+0x20>
    7356:	2b02      	cmp	r3, #2
    7358:	d002      	beq.n	7360 <disk_status+0x24>
    735a:	e003      	b.n	7364 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    735c:	2300      	movs	r3, #0
    735e:	e002      	b.n	7366 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    7360:	2303      	movs	r3, #3
    7362:	e000      	b.n	7366 <disk_status+0x2a>
	default:
		return STA_NOINIT;
    7364:	2301      	movs	r3, #1
	}
}
    7366:	0018      	movs	r0, r3
    7368:	46bd      	mov	sp, r7
    736a:	b002      	add	sp, #8
    736c:	bd80      	pop	{r7, pc}
    736e:	46c0      	nop			; (mov r8, r8)
    7370:	00003359 	.word	0x00003359

00007374 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    7374:	b590      	push	{r4, r7, lr}
    7376:	b089      	sub	sp, #36	; 0x24
    7378:	af00      	add	r7, sp, #0
    737a:	60b9      	str	r1, [r7, #8]
    737c:	607a      	str	r2, [r7, #4]
    737e:	0019      	movs	r1, r3
    7380:	230f      	movs	r3, #15
    7382:	18fb      	adds	r3, r7, r3
    7384:	1c02      	adds	r2, r0, #0
    7386:	701a      	strb	r2, [r3, #0]
    7388:	230e      	movs	r3, #14
    738a:	18fb      	adds	r3, r7, r3
    738c:	1c0a      	adds	r2, r1, #0
    738e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7390:	231b      	movs	r3, #27
    7392:	18fc      	adds	r4, r7, r3
    7394:	230f      	movs	r3, #15
    7396:	18fb      	adds	r3, r7, r3
    7398:	781b      	ldrb	r3, [r3, #0]
    739a:	0018      	movs	r0, r3
    739c:	4b28      	ldr	r3, [pc, #160]	; (7440 <disk_read+0xcc>)
    739e:	4798      	blx	r3
    73a0:	0003      	movs	r3, r0
    73a2:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    73a4:	231b      	movs	r3, #27
    73a6:	18fb      	adds	r3, r7, r3
    73a8:	781b      	ldrb	r3, [r3, #0]
    73aa:	2b00      	cmp	r3, #0
    73ac:	d101      	bne.n	73b2 <disk_read+0x3e>
		return RES_ERROR;
    73ae:	2301      	movs	r3, #1
    73b0:	e042      	b.n	7438 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    73b2:	2314      	movs	r3, #20
    73b4:	18fa      	adds	r2, r7, r3
    73b6:	230f      	movs	r3, #15
    73b8:	18fb      	adds	r3, r7, r3
    73ba:	781b      	ldrb	r3, [r3, #0]
    73bc:	0011      	movs	r1, r2
    73be:	0018      	movs	r0, r3
    73c0:	4b20      	ldr	r3, [pc, #128]	; (7444 <disk_read+0xd0>)
    73c2:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    73c4:	230e      	movs	r3, #14
    73c6:	18fb      	adds	r3, r7, r3
    73c8:	781b      	ldrb	r3, [r3, #0]
    73ca:	221b      	movs	r2, #27
    73cc:	18ba      	adds	r2, r7, r2
    73ce:	7812      	ldrb	r2, [r2, #0]
    73d0:	4353      	muls	r3, r2
    73d2:	001a      	movs	r2, r3
    73d4:	687b      	ldr	r3, [r7, #4]
    73d6:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    73d8:	697b      	ldr	r3, [r7, #20]
    73da:	3301      	adds	r3, #1
    73dc:	211b      	movs	r1, #27
    73de:	1879      	adds	r1, r7, r1
    73e0:	7809      	ldrb	r1, [r1, #0]
    73e2:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    73e4:	429a      	cmp	r2, r3
    73e6:	d901      	bls.n	73ec <disk_read+0x78>
		return RES_PARERR;
    73e8:	2304      	movs	r3, #4
    73ea:	e025      	b.n	7438 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    73ec:	2300      	movs	r3, #0
    73ee:	61fb      	str	r3, [r7, #28]
    73f0:	e01b      	b.n	742a <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    73f2:	231b      	movs	r3, #27
    73f4:	18fb      	adds	r3, r7, r3
    73f6:	781b      	ldrb	r3, [r3, #0]
    73f8:	69fa      	ldr	r2, [r7, #28]
    73fa:	435a      	muls	r2, r3
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    7400:	231b      	movs	r3, #27
    7402:	18fb      	adds	r3, r7, r3
    7404:	781b      	ldrb	r3, [r3, #0]
    7406:	69fa      	ldr	r2, [r7, #28]
    7408:	4353      	muls	r3, r2
    740a:	025b      	lsls	r3, r3, #9
    740c:	68ba      	ldr	r2, [r7, #8]
    740e:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    7410:	230f      	movs	r3, #15
    7412:	18fb      	adds	r3, r7, r3
    7414:	781b      	ldrb	r3, [r3, #0]
    7416:	0018      	movs	r0, r3
    7418:	4b0b      	ldr	r3, [pc, #44]	; (7448 <disk_read+0xd4>)
    741a:	4798      	blx	r3
    741c:	1e03      	subs	r3, r0, #0
    741e:	d001      	beq.n	7424 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    7420:	2301      	movs	r3, #1
    7422:	e009      	b.n	7438 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    7424:	69fb      	ldr	r3, [r7, #28]
    7426:	3301      	adds	r3, #1
    7428:	61fb      	str	r3, [r7, #28]
    742a:	230e      	movs	r3, #14
    742c:	18fb      	adds	r3, r7, r3
    742e:	781a      	ldrb	r2, [r3, #0]
    7430:	69fb      	ldr	r3, [r7, #28]
    7432:	429a      	cmp	r2, r3
    7434:	d8dd      	bhi.n	73f2 <disk_read+0x7e>
		}
	}

	return RES_OK;
    7436:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    7438:	0018      	movs	r0, r3
    743a:	46bd      	mov	sp, r7
    743c:	b009      	add	sp, #36	; 0x24
    743e:	bd90      	pop	{r4, r7, pc}
    7440:	000033e5 	.word	0x000033e5
    7444:	00003399 	.word	0x00003399
    7448:	00003459 	.word	0x00003459

0000744c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    744c:	b590      	push	{r4, r7, lr}
    744e:	b089      	sub	sp, #36	; 0x24
    7450:	af00      	add	r7, sp, #0
    7452:	60b9      	str	r1, [r7, #8]
    7454:	607a      	str	r2, [r7, #4]
    7456:	0019      	movs	r1, r3
    7458:	230f      	movs	r3, #15
    745a:	18fb      	adds	r3, r7, r3
    745c:	1c02      	adds	r2, r0, #0
    745e:	701a      	strb	r2, [r3, #0]
    7460:	230e      	movs	r3, #14
    7462:	18fb      	adds	r3, r7, r3
    7464:	1c0a      	adds	r2, r1, #0
    7466:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7468:	231b      	movs	r3, #27
    746a:	18fc      	adds	r4, r7, r3
    746c:	230f      	movs	r3, #15
    746e:	18fb      	adds	r3, r7, r3
    7470:	781b      	ldrb	r3, [r3, #0]
    7472:	0018      	movs	r0, r3
    7474:	4b28      	ldr	r3, [pc, #160]	; (7518 <disk_write+0xcc>)
    7476:	4798      	blx	r3
    7478:	0003      	movs	r3, r0
    747a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    747c:	231b      	movs	r3, #27
    747e:	18fb      	adds	r3, r7, r3
    7480:	781b      	ldrb	r3, [r3, #0]
    7482:	2b00      	cmp	r3, #0
    7484:	d101      	bne.n	748a <disk_write+0x3e>
		return RES_ERROR;
    7486:	2301      	movs	r3, #1
    7488:	e042      	b.n	7510 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    748a:	2314      	movs	r3, #20
    748c:	18fa      	adds	r2, r7, r3
    748e:	230f      	movs	r3, #15
    7490:	18fb      	adds	r3, r7, r3
    7492:	781b      	ldrb	r3, [r3, #0]
    7494:	0011      	movs	r1, r2
    7496:	0018      	movs	r0, r3
    7498:	4b20      	ldr	r3, [pc, #128]	; (751c <disk_write+0xd0>)
    749a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    749c:	230e      	movs	r3, #14
    749e:	18fb      	adds	r3, r7, r3
    74a0:	781b      	ldrb	r3, [r3, #0]
    74a2:	221b      	movs	r2, #27
    74a4:	18ba      	adds	r2, r7, r2
    74a6:	7812      	ldrb	r2, [r2, #0]
    74a8:	4353      	muls	r3, r2
    74aa:	001a      	movs	r2, r3
    74ac:	687b      	ldr	r3, [r7, #4]
    74ae:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    74b0:	697b      	ldr	r3, [r7, #20]
    74b2:	3301      	adds	r3, #1
    74b4:	211b      	movs	r1, #27
    74b6:	1879      	adds	r1, r7, r1
    74b8:	7809      	ldrb	r1, [r1, #0]
    74ba:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    74bc:	429a      	cmp	r2, r3
    74be:	d901      	bls.n	74c4 <disk_write+0x78>
		return RES_PARERR;
    74c0:	2304      	movs	r3, #4
    74c2:	e025      	b.n	7510 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    74c4:	2300      	movs	r3, #0
    74c6:	61fb      	str	r3, [r7, #28]
    74c8:	e01b      	b.n	7502 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    74ca:	231b      	movs	r3, #27
    74cc:	18fb      	adds	r3, r7, r3
    74ce:	781b      	ldrb	r3, [r3, #0]
    74d0:	69fa      	ldr	r2, [r7, #28]
    74d2:	435a      	muls	r2, r3
    74d4:	687b      	ldr	r3, [r7, #4]
    74d6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    74d8:	231b      	movs	r3, #27
    74da:	18fb      	adds	r3, r7, r3
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	69fa      	ldr	r2, [r7, #28]
    74e0:	4353      	muls	r3, r2
    74e2:	025b      	lsls	r3, r3, #9
    74e4:	68ba      	ldr	r2, [r7, #8]
    74e6:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    74e8:	230f      	movs	r3, #15
    74ea:	18fb      	adds	r3, r7, r3
    74ec:	781b      	ldrb	r3, [r3, #0]
    74ee:	0018      	movs	r0, r3
    74f0:	4b0b      	ldr	r3, [pc, #44]	; (7520 <disk_write+0xd4>)
    74f2:	4798      	blx	r3
    74f4:	1e03      	subs	r3, r0, #0
    74f6:	d001      	beq.n	74fc <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    74f8:	2301      	movs	r3, #1
    74fa:	e009      	b.n	7510 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    74fc:	69fb      	ldr	r3, [r7, #28]
    74fe:	3301      	adds	r3, #1
    7500:	61fb      	str	r3, [r7, #28]
    7502:	230e      	movs	r3, #14
    7504:	18fb      	adds	r3, r7, r3
    7506:	781a      	ldrb	r2, [r3, #0]
    7508:	69fb      	ldr	r3, [r7, #28]
    750a:	429a      	cmp	r2, r3
    750c:	d8dd      	bhi.n	74ca <disk_write+0x7e>
		}
	}

	return RES_OK;
    750e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    7510:	0018      	movs	r0, r3
    7512:	46bd      	mov	sp, r7
    7514:	b009      	add	sp, #36	; 0x24
    7516:	bd90      	pop	{r4, r7, pc}
    7518:	000033e5 	.word	0x000033e5
    751c:	00003399 	.word	0x00003399
    7520:	000034ad 	.word	0x000034ad

00007524 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    7524:	b590      	push	{r4, r7, lr}
    7526:	b085      	sub	sp, #20
    7528:	af00      	add	r7, sp, #0
    752a:	603a      	str	r2, [r7, #0]
    752c:	1dfb      	adds	r3, r7, #7
    752e:	1c02      	adds	r2, r0, #0
    7530:	701a      	strb	r2, [r3, #0]
    7532:	1dbb      	adds	r3, r7, #6
    7534:	1c0a      	adds	r2, r1, #0
    7536:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    7538:	230f      	movs	r3, #15
    753a:	18fb      	adds	r3, r7, r3
    753c:	2204      	movs	r2, #4
    753e:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    7540:	1dbb      	adds	r3, r7, #6
    7542:	781b      	ldrb	r3, [r3, #0]
    7544:	2b01      	cmp	r3, #1
    7546:	d00f      	beq.n	7568 <disk_ioctl+0x44>
    7548:	dc02      	bgt.n	7550 <disk_ioctl+0x2c>
    754a:	2b00      	cmp	r3, #0
    754c:	d044      	beq.n	75d8 <disk_ioctl+0xb4>
    754e:	e054      	b.n	75fa <disk_ioctl+0xd6>
    7550:	2b02      	cmp	r3, #2
    7552:	d01a      	beq.n	758a <disk_ioctl+0x66>
    7554:	2b03      	cmp	r3, #3
    7556:	d150      	bne.n	75fa <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    7558:	683b      	ldr	r3, [r7, #0]
    755a:	2201      	movs	r2, #1
    755c:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    755e:	230f      	movs	r3, #15
    7560:	18fb      	adds	r3, r7, r3
    7562:	2200      	movs	r2, #0
    7564:	701a      	strb	r2, [r3, #0]
		break;
    7566:	e04c      	b.n	7602 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    7568:	2308      	movs	r3, #8
    756a:	18fa      	adds	r2, r7, r3
    756c:	1dfb      	adds	r3, r7, #7
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	0011      	movs	r1, r2
    7572:	0018      	movs	r0, r3
    7574:	4b26      	ldr	r3, [pc, #152]	; (7610 <disk_ioctl+0xec>)
    7576:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    7578:	68bb      	ldr	r3, [r7, #8]
    757a:	1c5a      	adds	r2, r3, #1
    757c:	683b      	ldr	r3, [r7, #0]
    757e:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    7580:	230f      	movs	r3, #15
    7582:	18fb      	adds	r3, r7, r3
    7584:	2200      	movs	r2, #0
    7586:	701a      	strb	r2, [r3, #0]
	}
	break;
    7588:	e03b      	b.n	7602 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    758a:	230e      	movs	r3, #14
    758c:	18fc      	adds	r4, r7, r3
    758e:	1dfb      	adds	r3, r7, #7
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	0018      	movs	r0, r3
    7594:	4b1f      	ldr	r3, [pc, #124]	; (7614 <disk_ioctl+0xf0>)
    7596:	4798      	blx	r3
    7598:	0003      	movs	r3, r0
    759a:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    759c:	230e      	movs	r3, #14
    759e:	18fb      	adds	r3, r7, r3
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	2b01      	cmp	r3, #1
    75a4:	d010      	beq.n	75c8 <disk_ioctl+0xa4>
    75a6:	230e      	movs	r3, #14
    75a8:	18fb      	adds	r3, r7, r3
    75aa:	781b      	ldrb	r3, [r3, #0]
    75ac:	2b02      	cmp	r3, #2
    75ae:	d00b      	beq.n	75c8 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    75b0:	230e      	movs	r3, #14
    75b2:	18fb      	adds	r3, r7, r3
    75b4:	781b      	ldrb	r3, [r3, #0]
    75b6:	2b04      	cmp	r3, #4
    75b8:	d006      	beq.n	75c8 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    75ba:	230e      	movs	r3, #14
    75bc:	18fb      	adds	r3, r7, r3
    75be:	781b      	ldrb	r3, [r3, #0]
    75c0:	2b08      	cmp	r3, #8
    75c2:	d001      	beq.n	75c8 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    75c4:	2301      	movs	r3, #1
    75c6:	e01f      	b.n	7608 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    75c8:	683b      	ldr	r3, [r7, #0]
    75ca:	2200      	movs	r2, #0
    75cc:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    75ce:	230f      	movs	r3, #15
    75d0:	18fb      	adds	r3, r7, r3
    75d2:	2200      	movs	r2, #0
    75d4:	701a      	strb	r2, [r3, #0]
	}
	break;
    75d6:	e014      	b.n	7602 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    75d8:	1dfb      	adds	r3, r7, #7
    75da:	781b      	ldrb	r3, [r3, #0]
    75dc:	0018      	movs	r0, r3
    75de:	4b0e      	ldr	r3, [pc, #56]	; (7618 <disk_ioctl+0xf4>)
    75e0:	4798      	blx	r3
    75e2:	1e03      	subs	r3, r0, #0
    75e4:	d104      	bne.n	75f0 <disk_ioctl+0xcc>
			res = RES_OK;
    75e6:	230f      	movs	r3, #15
    75e8:	18fb      	adds	r3, r7, r3
    75ea:	2200      	movs	r2, #0
    75ec:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    75ee:	e008      	b.n	7602 <disk_ioctl+0xde>
			res = RES_NOTRDY;
    75f0:	230f      	movs	r3, #15
    75f2:	18fb      	adds	r3, r7, r3
    75f4:	2203      	movs	r2, #3
    75f6:	701a      	strb	r2, [r3, #0]
		break;
    75f8:	e003      	b.n	7602 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    75fa:	230f      	movs	r3, #15
    75fc:	18fb      	adds	r3, r7, r3
    75fe:	2204      	movs	r2, #4
    7600:	701a      	strb	r2, [r3, #0]
	}

	return res;
    7602:	230f      	movs	r3, #15
    7604:	18fb      	adds	r3, r7, r3
    7606:	781b      	ldrb	r3, [r3, #0]
}
    7608:	0018      	movs	r0, r3
    760a:	46bd      	mov	sp, r7
    760c:	b005      	add	sp, #20
    760e:	bd90      	pop	{r4, r7, pc}
    7610:	00003399 	.word	0x00003399
    7614:	000033e5 	.word	0x000033e5
    7618:	00003359 	.word	0x00003359

0000761c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    761c:	b580      	push	{r7, lr}
    761e:	b084      	sub	sp, #16
    7620:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    7622:	1d3a      	adds	r2, r7, #4
    7624:	4b12      	ldr	r3, [pc, #72]	; (7670 <get_fattime+0x54>)
    7626:	0011      	movs	r1, r2
    7628:	0018      	movs	r0, r3
    762a:	4b12      	ldr	r3, [pc, #72]	; (7674 <get_fattime+0x58>)
    762c:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    762e:	1d3b      	adds	r3, r7, #4
    7630:	88db      	ldrh	r3, [r3, #6]
    7632:	4a11      	ldr	r2, [pc, #68]	; (7678 <get_fattime+0x5c>)
    7634:	4694      	mov	ip, r2
    7636:	4463      	add	r3, ip
    7638:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    763a:	1d3b      	adds	r3, r7, #4
    763c:	795b      	ldrb	r3, [r3, #5]
    763e:	055b      	lsls	r3, r3, #21
    7640:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    7642:	1d3b      	adds	r3, r7, #4
    7644:	791b      	ldrb	r3, [r3, #4]
    7646:	041b      	lsls	r3, r3, #16
    7648:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    764a:	1d3b      	adds	r3, r7, #4
    764c:	789b      	ldrb	r3, [r3, #2]
    764e:	02db      	lsls	r3, r3, #11
    7650:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    7652:	1d3b      	adds	r3, r7, #4
    7654:	785b      	ldrb	r3, [r3, #1]
    7656:	015b      	lsls	r3, r3, #5
    7658:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    765a:	1d3a      	adds	r2, r7, #4
    765c:	7812      	ldrb	r2, [r2, #0]
    765e:	0852      	lsrs	r2, r2, #1
    7660:	b2d2      	uxtb	r2, r2
    7662:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    7664:	60fb      	str	r3, [r7, #12]

	return ul_time;
    7666:	68fb      	ldr	r3, [r7, #12]
}
    7668:	0018      	movs	r0, r3
    766a:	46bd      	mov	sp, r7
    766c:	b004      	add	sp, #16
    766e:	bd80      	pop	{r7, pc}
    7670:	200009fc 	.word	0x200009fc
    7674:	000039fd 	.word	0x000039fd
    7678:	fffff844 	.word	0xfffff844

0000767c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    767c:	b580      	push	{r7, lr}
    767e:	b086      	sub	sp, #24
    7680:	af00      	add	r7, sp, #0
    7682:	60f8      	str	r0, [r7, #12]
    7684:	60b9      	str	r1, [r7, #8]
    7686:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7688:	68fb      	ldr	r3, [r7, #12]
    768a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    768c:	68bb      	ldr	r3, [r7, #8]
    768e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    7690:	e007      	b.n	76a2 <mem_cpy+0x26>
		*d++ = *s++;
    7692:	697b      	ldr	r3, [r7, #20]
    7694:	1c5a      	adds	r2, r3, #1
    7696:	617a      	str	r2, [r7, #20]
    7698:	693a      	ldr	r2, [r7, #16]
    769a:	1c51      	adds	r1, r2, #1
    769c:	6139      	str	r1, [r7, #16]
    769e:	7812      	ldrb	r2, [r2, #0]
    76a0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    76a2:	687b      	ldr	r3, [r7, #4]
    76a4:	1e5a      	subs	r2, r3, #1
    76a6:	607a      	str	r2, [r7, #4]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d1f2      	bne.n	7692 <mem_cpy+0x16>
}
    76ac:	46c0      	nop			; (mov r8, r8)
    76ae:	46bd      	mov	sp, r7
    76b0:	b006      	add	sp, #24
    76b2:	bd80      	pop	{r7, pc}

000076b4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    76b4:	b580      	push	{r7, lr}
    76b6:	b086      	sub	sp, #24
    76b8:	af00      	add	r7, sp, #0
    76ba:	60f8      	str	r0, [r7, #12]
    76bc:	60b9      	str	r1, [r7, #8]
    76be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    76c0:	68fb      	ldr	r3, [r7, #12]
    76c2:	617b      	str	r3, [r7, #20]

	while (cnt--)
    76c4:	e005      	b.n	76d2 <mem_set+0x1e>
		*d++ = (BYTE)val;
    76c6:	697b      	ldr	r3, [r7, #20]
    76c8:	1c5a      	adds	r2, r3, #1
    76ca:	617a      	str	r2, [r7, #20]
    76cc:	68ba      	ldr	r2, [r7, #8]
    76ce:	b2d2      	uxtb	r2, r2
    76d0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    76d2:	687b      	ldr	r3, [r7, #4]
    76d4:	1e5a      	subs	r2, r3, #1
    76d6:	607a      	str	r2, [r7, #4]
    76d8:	2b00      	cmp	r3, #0
    76da:	d1f4      	bne.n	76c6 <mem_set+0x12>
}
    76dc:	46c0      	nop			; (mov r8, r8)
    76de:	46bd      	mov	sp, r7
    76e0:	b006      	add	sp, #24
    76e2:	bd80      	pop	{r7, pc}

000076e4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    76e4:	b580      	push	{r7, lr}
    76e6:	b088      	sub	sp, #32
    76e8:	af00      	add	r7, sp, #0
    76ea:	60f8      	str	r0, [r7, #12]
    76ec:	60b9      	str	r1, [r7, #8]
    76ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    76f0:	68fb      	ldr	r3, [r7, #12]
    76f2:	61fb      	str	r3, [r7, #28]
    76f4:	68bb      	ldr	r3, [r7, #8]
    76f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
    76f8:	2300      	movs	r3, #0
    76fa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    76fc:	46c0      	nop			; (mov r8, r8)
    76fe:	687b      	ldr	r3, [r7, #4]
    7700:	1e5a      	subs	r2, r3, #1
    7702:	607a      	str	r2, [r7, #4]
    7704:	2b00      	cmp	r3, #0
    7706:	d00d      	beq.n	7724 <mem_cmp+0x40>
    7708:	69fb      	ldr	r3, [r7, #28]
    770a:	1c5a      	adds	r2, r3, #1
    770c:	61fa      	str	r2, [r7, #28]
    770e:	781b      	ldrb	r3, [r3, #0]
    7710:	0019      	movs	r1, r3
    7712:	69bb      	ldr	r3, [r7, #24]
    7714:	1c5a      	adds	r2, r3, #1
    7716:	61ba      	str	r2, [r7, #24]
    7718:	781b      	ldrb	r3, [r3, #0]
    771a:	1acb      	subs	r3, r1, r3
    771c:	617b      	str	r3, [r7, #20]
    771e:	697b      	ldr	r3, [r7, #20]
    7720:	2b00      	cmp	r3, #0
    7722:	d0ec      	beq.n	76fe <mem_cmp+0x1a>
	return r;
    7724:	697b      	ldr	r3, [r7, #20]
}
    7726:	0018      	movs	r0, r3
    7728:	46bd      	mov	sp, r7
    772a:	b008      	add	sp, #32
    772c:	bd80      	pop	{r7, pc}

0000772e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    772e:	b580      	push	{r7, lr}
    7730:	b082      	sub	sp, #8
    7732:	af00      	add	r7, sp, #0
    7734:	6078      	str	r0, [r7, #4]
    7736:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    7738:	e002      	b.n	7740 <chk_chr+0x12>
    773a:	687b      	ldr	r3, [r7, #4]
    773c:	3301      	adds	r3, #1
    773e:	607b      	str	r3, [r7, #4]
    7740:	687b      	ldr	r3, [r7, #4]
    7742:	781b      	ldrb	r3, [r3, #0]
    7744:	2b00      	cmp	r3, #0
    7746:	d005      	beq.n	7754 <chk_chr+0x26>
    7748:	687b      	ldr	r3, [r7, #4]
    774a:	781b      	ldrb	r3, [r3, #0]
    774c:	001a      	movs	r2, r3
    774e:	683b      	ldr	r3, [r7, #0]
    7750:	429a      	cmp	r2, r3
    7752:	d1f2      	bne.n	773a <chk_chr+0xc>
	return *str;
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	781b      	ldrb	r3, [r3, #0]
}
    7758:	0018      	movs	r0, r3
    775a:	46bd      	mov	sp, r7
    775c:	b002      	add	sp, #8
    775e:	bd80      	pop	{r7, pc}

00007760 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7760:	b590      	push	{r4, r7, lr}
    7762:	b085      	sub	sp, #20
    7764:	af00      	add	r7, sp, #0
    7766:	6078      	str	r0, [r7, #4]
    7768:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    776a:	687b      	ldr	r3, [r7, #4]
    776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    776e:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    7770:	68fa      	ldr	r2, [r7, #12]
    7772:	683b      	ldr	r3, [r7, #0]
    7774:	429a      	cmp	r2, r3
    7776:	d04e      	beq.n	7816 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    7778:	687b      	ldr	r3, [r7, #4]
    777a:	791b      	ldrb	r3, [r3, #4]
    777c:	2b00      	cmp	r3, #0
    777e:	d037      	beq.n	77f0 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7780:	687b      	ldr	r3, [r7, #4]
    7782:	7858      	ldrb	r0, [r3, #1]
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	3330      	adds	r3, #48	; 0x30
    7788:	0019      	movs	r1, r3
    778a:	68fa      	ldr	r2, [r7, #12]
    778c:	2301      	movs	r3, #1
    778e:	4c24      	ldr	r4, [pc, #144]	; (7820 <move_window+0xc0>)
    7790:	47a0      	blx	r4
    7792:	1e03      	subs	r3, r0, #0
    7794:	d001      	beq.n	779a <move_window+0x3a>
				return FR_DISK_ERR;
    7796:	2301      	movs	r3, #1
    7798:	e03e      	b.n	7818 <move_window+0xb8>
			fs->wflag = 0;
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	2200      	movs	r2, #0
    779e:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    77a0:	687b      	ldr	r3, [r7, #4]
    77a2:	6a1a      	ldr	r2, [r3, #32]
    77a4:	687b      	ldr	r3, [r7, #4]
    77a6:	69db      	ldr	r3, [r3, #28]
    77a8:	18d2      	adds	r2, r2, r3
    77aa:	68fb      	ldr	r3, [r7, #12]
    77ac:	429a      	cmp	r2, r3
    77ae:	d91f      	bls.n	77f0 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    77b0:	230b      	movs	r3, #11
    77b2:	18fb      	adds	r3, r7, r3
    77b4:	687a      	ldr	r2, [r7, #4]
    77b6:	78d2      	ldrb	r2, [r2, #3]
    77b8:	701a      	strb	r2, [r3, #0]
    77ba:	e014      	b.n	77e6 <move_window+0x86>
					wsect += fs->fsize;
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	69db      	ldr	r3, [r3, #28]
    77c0:	68fa      	ldr	r2, [r7, #12]
    77c2:	18d3      	adds	r3, r2, r3
    77c4:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    77c6:	687b      	ldr	r3, [r7, #4]
    77c8:	7858      	ldrb	r0, [r3, #1]
    77ca:	687b      	ldr	r3, [r7, #4]
    77cc:	3330      	adds	r3, #48	; 0x30
    77ce:	0019      	movs	r1, r3
    77d0:	68fa      	ldr	r2, [r7, #12]
    77d2:	2301      	movs	r3, #1
    77d4:	4c12      	ldr	r4, [pc, #72]	; (7820 <move_window+0xc0>)
    77d6:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    77d8:	230b      	movs	r3, #11
    77da:	18fb      	adds	r3, r7, r3
    77dc:	781a      	ldrb	r2, [r3, #0]
    77de:	230b      	movs	r3, #11
    77e0:	18fb      	adds	r3, r7, r3
    77e2:	3a01      	subs	r2, #1
    77e4:	701a      	strb	r2, [r3, #0]
    77e6:	230b      	movs	r3, #11
    77e8:	18fb      	adds	r3, r7, r3
    77ea:	781b      	ldrb	r3, [r3, #0]
    77ec:	2b01      	cmp	r3, #1
    77ee:	d8e5      	bhi.n	77bc <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    77f0:	683b      	ldr	r3, [r7, #0]
    77f2:	2b00      	cmp	r3, #0
    77f4:	d00f      	beq.n	7816 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	7858      	ldrb	r0, [r3, #1]
    77fa:	687b      	ldr	r3, [r7, #4]
    77fc:	3330      	adds	r3, #48	; 0x30
    77fe:	0019      	movs	r1, r3
    7800:	683a      	ldr	r2, [r7, #0]
    7802:	2301      	movs	r3, #1
    7804:	4c07      	ldr	r4, [pc, #28]	; (7824 <move_window+0xc4>)
    7806:	47a0      	blx	r4
    7808:	1e03      	subs	r3, r0, #0
    780a:	d001      	beq.n	7810 <move_window+0xb0>
				return FR_DISK_ERR;
    780c:	2301      	movs	r3, #1
    780e:	e003      	b.n	7818 <move_window+0xb8>
			fs->winsect = sector;
    7810:	687b      	ldr	r3, [r7, #4]
    7812:	683a      	ldr	r2, [r7, #0]
    7814:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    7816:	2300      	movs	r3, #0
}
    7818:	0018      	movs	r0, r3
    781a:	46bd      	mov	sp, r7
    781c:	b005      	add	sp, #20
    781e:	bd90      	pop	{r4, r7, pc}
    7820:	0000744d 	.word	0x0000744d
    7824:	00007375 	.word	0x00007375

00007828 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    7828:	b590      	push	{r4, r7, lr}
    782a:	b085      	sub	sp, #20
    782c:	af00      	add	r7, sp, #0
    782e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    7830:	230f      	movs	r3, #15
    7832:	18fc      	adds	r4, r7, r3
    7834:	687b      	ldr	r3, [r7, #4]
    7836:	2100      	movs	r1, #0
    7838:	0018      	movs	r0, r3
    783a:	4b52      	ldr	r3, [pc, #328]	; (7984 <sync+0x15c>)
    783c:	4798      	blx	r3
    783e:	0003      	movs	r3, r0
    7840:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    7842:	230f      	movs	r3, #15
    7844:	18fb      	adds	r3, r7, r3
    7846:	781b      	ldrb	r3, [r3, #0]
    7848:	2b00      	cmp	r3, #0
    784a:	d000      	beq.n	784e <sync+0x26>
    784c:	e093      	b.n	7976 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    784e:	687b      	ldr	r3, [r7, #4]
    7850:	781b      	ldrb	r3, [r3, #0]
    7852:	2b03      	cmp	r3, #3
    7854:	d000      	beq.n	7858 <sync+0x30>
    7856:	e081      	b.n	795c <sync+0x134>
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	795b      	ldrb	r3, [r3, #5]
    785c:	2b00      	cmp	r3, #0
    785e:	d07d      	beq.n	795c <sync+0x134>
			fs->winsect = 0;
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	2200      	movs	r2, #0
    7864:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	3330      	adds	r3, #48	; 0x30
    786a:	0018      	movs	r0, r3
    786c:	2380      	movs	r3, #128	; 0x80
    786e:	009b      	lsls	r3, r3, #2
    7870:	001a      	movs	r2, r3
    7872:	2100      	movs	r1, #0
    7874:	4b44      	ldr	r3, [pc, #272]	; (7988 <sync+0x160>)
    7876:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	4a44      	ldr	r2, [pc, #272]	; (798c <sync+0x164>)
    787c:	2155      	movs	r1, #85	; 0x55
    787e:	5499      	strb	r1, [r3, r2]
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	4a43      	ldr	r2, [pc, #268]	; (7990 <sync+0x168>)
    7884:	21aa      	movs	r1, #170	; 0xaa
    7886:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	2230      	movs	r2, #48	; 0x30
    788c:	2152      	movs	r1, #82	; 0x52
    788e:	5499      	strb	r1, [r3, r2]
    7890:	687b      	ldr	r3, [r7, #4]
    7892:	2231      	movs	r2, #49	; 0x31
    7894:	2152      	movs	r1, #82	; 0x52
    7896:	5499      	strb	r1, [r3, r2]
    7898:	687b      	ldr	r3, [r7, #4]
    789a:	2232      	movs	r2, #50	; 0x32
    789c:	2161      	movs	r1, #97	; 0x61
    789e:	5499      	strb	r1, [r3, r2]
    78a0:	687b      	ldr	r3, [r7, #4]
    78a2:	2233      	movs	r2, #51	; 0x33
    78a4:	2141      	movs	r1, #65	; 0x41
    78a6:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    78a8:	687a      	ldr	r2, [r7, #4]
    78aa:	2385      	movs	r3, #133	; 0x85
    78ac:	009b      	lsls	r3, r3, #2
    78ae:	2172      	movs	r1, #114	; 0x72
    78b0:	54d1      	strb	r1, [r2, r3]
    78b2:	687b      	ldr	r3, [r7, #4]
    78b4:	4a37      	ldr	r2, [pc, #220]	; (7994 <sync+0x16c>)
    78b6:	2172      	movs	r1, #114	; 0x72
    78b8:	5499      	strb	r1, [r3, r2]
    78ba:	687b      	ldr	r3, [r7, #4]
    78bc:	4a36      	ldr	r2, [pc, #216]	; (7998 <sync+0x170>)
    78be:	2141      	movs	r1, #65	; 0x41
    78c0:	5499      	strb	r1, [r3, r2]
    78c2:	687b      	ldr	r3, [r7, #4]
    78c4:	4a35      	ldr	r2, [pc, #212]	; (799c <sync+0x174>)
    78c6:	2161      	movs	r1, #97	; 0x61
    78c8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    78ca:	687b      	ldr	r3, [r7, #4]
    78cc:	691b      	ldr	r3, [r3, #16]
    78ce:	b2d9      	uxtb	r1, r3
    78d0:	687a      	ldr	r2, [r7, #4]
    78d2:	2386      	movs	r3, #134	; 0x86
    78d4:	009b      	lsls	r3, r3, #2
    78d6:	54d1      	strb	r1, [r2, r3]
    78d8:	687b      	ldr	r3, [r7, #4]
    78da:	691b      	ldr	r3, [r3, #16]
    78dc:	b29b      	uxth	r3, r3
    78de:	0a1b      	lsrs	r3, r3, #8
    78e0:	b29b      	uxth	r3, r3
    78e2:	b2d9      	uxtb	r1, r3
    78e4:	687b      	ldr	r3, [r7, #4]
    78e6:	4a2e      	ldr	r2, [pc, #184]	; (79a0 <sync+0x178>)
    78e8:	5499      	strb	r1, [r3, r2]
    78ea:	687b      	ldr	r3, [r7, #4]
    78ec:	691b      	ldr	r3, [r3, #16]
    78ee:	0c1b      	lsrs	r3, r3, #16
    78f0:	b2d9      	uxtb	r1, r3
    78f2:	687b      	ldr	r3, [r7, #4]
    78f4:	4a2b      	ldr	r2, [pc, #172]	; (79a4 <sync+0x17c>)
    78f6:	5499      	strb	r1, [r3, r2]
    78f8:	687b      	ldr	r3, [r7, #4]
    78fa:	691b      	ldr	r3, [r3, #16]
    78fc:	0e1b      	lsrs	r3, r3, #24
    78fe:	b2d9      	uxtb	r1, r3
    7900:	687b      	ldr	r3, [r7, #4]
    7902:	4a29      	ldr	r2, [pc, #164]	; (79a8 <sync+0x180>)
    7904:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    7906:	687b      	ldr	r3, [r7, #4]
    7908:	68db      	ldr	r3, [r3, #12]
    790a:	b2d9      	uxtb	r1, r3
    790c:	687a      	ldr	r2, [r7, #4]
    790e:	2387      	movs	r3, #135	; 0x87
    7910:	009b      	lsls	r3, r3, #2
    7912:	54d1      	strb	r1, [r2, r3]
    7914:	687b      	ldr	r3, [r7, #4]
    7916:	68db      	ldr	r3, [r3, #12]
    7918:	b29b      	uxth	r3, r3
    791a:	0a1b      	lsrs	r3, r3, #8
    791c:	b29b      	uxth	r3, r3
    791e:	b2d9      	uxtb	r1, r3
    7920:	687b      	ldr	r3, [r7, #4]
    7922:	4a22      	ldr	r2, [pc, #136]	; (79ac <sync+0x184>)
    7924:	5499      	strb	r1, [r3, r2]
    7926:	687b      	ldr	r3, [r7, #4]
    7928:	68db      	ldr	r3, [r3, #12]
    792a:	0c1b      	lsrs	r3, r3, #16
    792c:	b2d9      	uxtb	r1, r3
    792e:	687b      	ldr	r3, [r7, #4]
    7930:	4a1f      	ldr	r2, [pc, #124]	; (79b0 <sync+0x188>)
    7932:	5499      	strb	r1, [r3, r2]
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	68db      	ldr	r3, [r3, #12]
    7938:	0e1b      	lsrs	r3, r3, #24
    793a:	b2d9      	uxtb	r1, r3
    793c:	687b      	ldr	r3, [r7, #4]
    793e:	4a1d      	ldr	r2, [pc, #116]	; (79b4 <sync+0x18c>)
    7940:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    7942:	687b      	ldr	r3, [r7, #4]
    7944:	7858      	ldrb	r0, [r3, #1]
    7946:	687b      	ldr	r3, [r7, #4]
    7948:	3330      	adds	r3, #48	; 0x30
    794a:	0019      	movs	r1, r3
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	695a      	ldr	r2, [r3, #20]
    7950:	2301      	movs	r3, #1
    7952:	4c19      	ldr	r4, [pc, #100]	; (79b8 <sync+0x190>)
    7954:	47a0      	blx	r4
			fs->fsi_flag = 0;
    7956:	687b      	ldr	r3, [r7, #4]
    7958:	2200      	movs	r2, #0
    795a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	785b      	ldrb	r3, [r3, #1]
    7960:	2200      	movs	r2, #0
    7962:	2100      	movs	r1, #0
    7964:	0018      	movs	r0, r3
    7966:	4b15      	ldr	r3, [pc, #84]	; (79bc <sync+0x194>)
    7968:	4798      	blx	r3
    796a:	1e03      	subs	r3, r0, #0
    796c:	d003      	beq.n	7976 <sync+0x14e>
			res = FR_DISK_ERR;
    796e:	230f      	movs	r3, #15
    7970:	18fb      	adds	r3, r7, r3
    7972:	2201      	movs	r2, #1
    7974:	701a      	strb	r2, [r3, #0]
	}

	return res;
    7976:	230f      	movs	r3, #15
    7978:	18fb      	adds	r3, r7, r3
    797a:	781b      	ldrb	r3, [r3, #0]
}
    797c:	0018      	movs	r0, r3
    797e:	46bd      	mov	sp, r7
    7980:	b005      	add	sp, #20
    7982:	bd90      	pop	{r4, r7, pc}
    7984:	00007761 	.word	0x00007761
    7988:	000076b5 	.word	0x000076b5
    798c:	0000022e 	.word	0x0000022e
    7990:	0000022f 	.word	0x0000022f
    7994:	00000215 	.word	0x00000215
    7998:	00000216 	.word	0x00000216
    799c:	00000217 	.word	0x00000217
    79a0:	00000219 	.word	0x00000219
    79a4:	0000021a 	.word	0x0000021a
    79a8:	0000021b 	.word	0x0000021b
    79ac:	0000021d 	.word	0x0000021d
    79b0:	0000021e 	.word	0x0000021e
    79b4:	0000021f 	.word	0x0000021f
    79b8:	0000744d 	.word	0x0000744d
    79bc:	00007525 	.word	0x00007525

000079c0 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    79c0:	b580      	push	{r7, lr}
    79c2:	b082      	sub	sp, #8
    79c4:	af00      	add	r7, sp, #0
    79c6:	6078      	str	r0, [r7, #4]
    79c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
    79ca:	683b      	ldr	r3, [r7, #0]
    79cc:	3b02      	subs	r3, #2
    79ce:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	699b      	ldr	r3, [r3, #24]
    79d4:	1e9a      	subs	r2, r3, #2
    79d6:	683b      	ldr	r3, [r7, #0]
    79d8:	429a      	cmp	r2, r3
    79da:	d801      	bhi.n	79e0 <clust2sect+0x20>
    79dc:	2300      	movs	r3, #0
    79de:	e007      	b.n	79f0 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	789b      	ldrb	r3, [r3, #2]
    79e4:	001a      	movs	r2, r3
    79e6:	683b      	ldr	r3, [r7, #0]
    79e8:	435a      	muls	r2, r3
    79ea:	687b      	ldr	r3, [r7, #4]
    79ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79ee:	18d3      	adds	r3, r2, r3
}
    79f0:	0018      	movs	r0, r3
    79f2:	46bd      	mov	sp, r7
    79f4:	b002      	add	sp, #8
    79f6:	bd80      	pop	{r7, pc}

000079f8 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    79f8:	b580      	push	{r7, lr}
    79fa:	b086      	sub	sp, #24
    79fc:	af00      	add	r7, sp, #0
    79fe:	6078      	str	r0, [r7, #4]
    7a00:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    7a02:	683b      	ldr	r3, [r7, #0]
    7a04:	2b01      	cmp	r3, #1
    7a06:	d904      	bls.n	7a12 <get_fat+0x1a>
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	699a      	ldr	r2, [r3, #24]
    7a0c:	683b      	ldr	r3, [r7, #0]
    7a0e:	429a      	cmp	r2, r3
    7a10:	d801      	bhi.n	7a16 <get_fat+0x1e>
		return 1;
    7a12:	2301      	movs	r3, #1
    7a14:	e09f      	b.n	7b56 <get_fat+0x15e>

	switch (fs->fs_type) {
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	781b      	ldrb	r3, [r3, #0]
    7a1a:	2b02      	cmp	r3, #2
    7a1c:	d048      	beq.n	7ab0 <get_fat+0xb8>
    7a1e:	2b03      	cmp	r3, #3
    7a20:	d067      	beq.n	7af2 <get_fat+0xfa>
    7a22:	2b01      	cmp	r3, #1
    7a24:	d000      	beq.n	7a28 <get_fat+0x30>
    7a26:	e094      	b.n	7b52 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    7a28:	683b      	ldr	r3, [r7, #0]
    7a2a:	617b      	str	r3, [r7, #20]
    7a2c:	697b      	ldr	r3, [r7, #20]
    7a2e:	085b      	lsrs	r3, r3, #1
    7a30:	697a      	ldr	r2, [r7, #20]
    7a32:	18d3      	adds	r3, r2, r3
    7a34:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a36:	687b      	ldr	r3, [r7, #4]
    7a38:	6a1a      	ldr	r2, [r3, #32]
    7a3a:	697b      	ldr	r3, [r7, #20]
    7a3c:	0a5b      	lsrs	r3, r3, #9
    7a3e:	18d2      	adds	r2, r2, r3
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	0011      	movs	r1, r2
    7a44:	0018      	movs	r0, r3
    7a46:	4b46      	ldr	r3, [pc, #280]	; (7b60 <get_fat+0x168>)
    7a48:	4798      	blx	r3
    7a4a:	1e03      	subs	r3, r0, #0
    7a4c:	d000      	beq.n	7a50 <get_fat+0x58>
    7a4e:	e079      	b.n	7b44 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    7a50:	697b      	ldr	r3, [r7, #20]
    7a52:	05db      	lsls	r3, r3, #23
    7a54:	0ddb      	lsrs	r3, r3, #23
    7a56:	687a      	ldr	r2, [r7, #4]
    7a58:	2130      	movs	r1, #48	; 0x30
    7a5a:	18d3      	adds	r3, r2, r3
    7a5c:	185b      	adds	r3, r3, r1
    7a5e:	781b      	ldrb	r3, [r3, #0]
    7a60:	613b      	str	r3, [r7, #16]
    7a62:	697b      	ldr	r3, [r7, #20]
    7a64:	3301      	adds	r3, #1
    7a66:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	6a1a      	ldr	r2, [r3, #32]
    7a6c:	697b      	ldr	r3, [r7, #20]
    7a6e:	0a5b      	lsrs	r3, r3, #9
    7a70:	18d2      	adds	r2, r2, r3
    7a72:	687b      	ldr	r3, [r7, #4]
    7a74:	0011      	movs	r1, r2
    7a76:	0018      	movs	r0, r3
    7a78:	4b39      	ldr	r3, [pc, #228]	; (7b60 <get_fat+0x168>)
    7a7a:	4798      	blx	r3
    7a7c:	1e03      	subs	r3, r0, #0
    7a7e:	d163      	bne.n	7b48 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    7a80:	697b      	ldr	r3, [r7, #20]
    7a82:	05db      	lsls	r3, r3, #23
    7a84:	0ddb      	lsrs	r3, r3, #23
    7a86:	687a      	ldr	r2, [r7, #4]
    7a88:	2130      	movs	r1, #48	; 0x30
    7a8a:	18d3      	adds	r3, r2, r3
    7a8c:	185b      	adds	r3, r3, r1
    7a8e:	781b      	ldrb	r3, [r3, #0]
    7a90:	021b      	lsls	r3, r3, #8
    7a92:	001a      	movs	r2, r3
    7a94:	693b      	ldr	r3, [r7, #16]
    7a96:	4313      	orrs	r3, r2
    7a98:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7a9a:	683b      	ldr	r3, [r7, #0]
    7a9c:	2201      	movs	r2, #1
    7a9e:	4013      	ands	r3, r2
    7aa0:	d002      	beq.n	7aa8 <get_fat+0xb0>
    7aa2:	693b      	ldr	r3, [r7, #16]
    7aa4:	091b      	lsrs	r3, r3, #4
    7aa6:	e056      	b.n	7b56 <get_fat+0x15e>
    7aa8:	693b      	ldr	r3, [r7, #16]
    7aaa:	051b      	lsls	r3, r3, #20
    7aac:	0d1b      	lsrs	r3, r3, #20
    7aae:	e052      	b.n	7b56 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	6a1a      	ldr	r2, [r3, #32]
    7ab4:	683b      	ldr	r3, [r7, #0]
    7ab6:	0a1b      	lsrs	r3, r3, #8
    7ab8:	18d2      	adds	r2, r2, r3
    7aba:	687b      	ldr	r3, [r7, #4]
    7abc:	0011      	movs	r1, r2
    7abe:	0018      	movs	r0, r3
    7ac0:	4b27      	ldr	r3, [pc, #156]	; (7b60 <get_fat+0x168>)
    7ac2:	4798      	blx	r3
    7ac4:	1e03      	subs	r3, r0, #0
    7ac6:	d141      	bne.n	7b4c <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    7ac8:	683b      	ldr	r3, [r7, #0]
    7aca:	005a      	lsls	r2, r3, #1
    7acc:	23ff      	movs	r3, #255	; 0xff
    7ace:	005b      	lsls	r3, r3, #1
    7ad0:	4013      	ands	r3, r2
    7ad2:	3330      	adds	r3, #48	; 0x30
    7ad4:	687a      	ldr	r2, [r7, #4]
    7ad6:	18d3      	adds	r3, r2, r3
    7ad8:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    7ada:	68fb      	ldr	r3, [r7, #12]
    7adc:	3301      	adds	r3, #1
    7ade:	781b      	ldrb	r3, [r3, #0]
    7ae0:	021b      	lsls	r3, r3, #8
    7ae2:	b21a      	sxth	r2, r3
    7ae4:	68fb      	ldr	r3, [r7, #12]
    7ae6:	781b      	ldrb	r3, [r3, #0]
    7ae8:	b21b      	sxth	r3, r3
    7aea:	4313      	orrs	r3, r2
    7aec:	b21b      	sxth	r3, r3
    7aee:	b29b      	uxth	r3, r3
    7af0:	e031      	b.n	7b56 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7af2:	687b      	ldr	r3, [r7, #4]
    7af4:	6a1a      	ldr	r2, [r3, #32]
    7af6:	683b      	ldr	r3, [r7, #0]
    7af8:	09db      	lsrs	r3, r3, #7
    7afa:	18d2      	adds	r2, r2, r3
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	0011      	movs	r1, r2
    7b00:	0018      	movs	r0, r3
    7b02:	4b17      	ldr	r3, [pc, #92]	; (7b60 <get_fat+0x168>)
    7b04:	4798      	blx	r3
    7b06:	1e03      	subs	r3, r0, #0
    7b08:	d122      	bne.n	7b50 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    7b0a:	683b      	ldr	r3, [r7, #0]
    7b0c:	009a      	lsls	r2, r3, #2
    7b0e:	23fe      	movs	r3, #254	; 0xfe
    7b10:	005b      	lsls	r3, r3, #1
    7b12:	4013      	ands	r3, r2
    7b14:	3330      	adds	r3, #48	; 0x30
    7b16:	687a      	ldr	r2, [r7, #4]
    7b18:	18d3      	adds	r3, r2, r3
    7b1a:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    7b1c:	68fb      	ldr	r3, [r7, #12]
    7b1e:	3303      	adds	r3, #3
    7b20:	781b      	ldrb	r3, [r3, #0]
    7b22:	061a      	lsls	r2, r3, #24
    7b24:	68fb      	ldr	r3, [r7, #12]
    7b26:	3302      	adds	r3, #2
    7b28:	781b      	ldrb	r3, [r3, #0]
    7b2a:	041b      	lsls	r3, r3, #16
    7b2c:	4313      	orrs	r3, r2
    7b2e:	68fa      	ldr	r2, [r7, #12]
    7b30:	3201      	adds	r2, #1
    7b32:	7812      	ldrb	r2, [r2, #0]
    7b34:	0212      	lsls	r2, r2, #8
    7b36:	4313      	orrs	r3, r2
    7b38:	68fa      	ldr	r2, [r7, #12]
    7b3a:	7812      	ldrb	r2, [r2, #0]
    7b3c:	4313      	orrs	r3, r2
    7b3e:	011b      	lsls	r3, r3, #4
    7b40:	091b      	lsrs	r3, r3, #4
    7b42:	e008      	b.n	7b56 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7b44:	46c0      	nop			; (mov r8, r8)
    7b46:	e004      	b.n	7b52 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7b48:	46c0      	nop			; (mov r8, r8)
    7b4a:	e002      	b.n	7b52 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7b4c:	46c0      	nop			; (mov r8, r8)
    7b4e:	e000      	b.n	7b52 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7b50:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7b52:	2301      	movs	r3, #1
    7b54:	425b      	negs	r3, r3
}
    7b56:	0018      	movs	r0, r3
    7b58:	46bd      	mov	sp, r7
    7b5a:	b006      	add	sp, #24
    7b5c:	bd80      	pop	{r7, pc}
    7b5e:	46c0      	nop			; (mov r8, r8)
    7b60:	00007761 	.word	0x00007761

00007b64 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7b64:	b590      	push	{r4, r7, lr}
    7b66:	b089      	sub	sp, #36	; 0x24
    7b68:	af00      	add	r7, sp, #0
    7b6a:	60f8      	str	r0, [r7, #12]
    7b6c:	60b9      	str	r1, [r7, #8]
    7b6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7b70:	68bb      	ldr	r3, [r7, #8]
    7b72:	2b01      	cmp	r3, #1
    7b74:	d904      	bls.n	7b80 <put_fat+0x1c>
    7b76:	68fb      	ldr	r3, [r7, #12]
    7b78:	699a      	ldr	r2, [r3, #24]
    7b7a:	68bb      	ldr	r3, [r7, #8]
    7b7c:	429a      	cmp	r2, r3
    7b7e:	d804      	bhi.n	7b8a <put_fat+0x26>
		res = FR_INT_ERR;
    7b80:	231f      	movs	r3, #31
    7b82:	18fb      	adds	r3, r7, r3
    7b84:	2202      	movs	r2, #2
    7b86:	701a      	strb	r2, [r3, #0]
    7b88:	e100      	b.n	7d8c <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    7b8a:	68fb      	ldr	r3, [r7, #12]
    7b8c:	781b      	ldrb	r3, [r3, #0]
    7b8e:	2b02      	cmp	r3, #2
    7b90:	d100      	bne.n	7b94 <put_fat+0x30>
    7b92:	e078      	b.n	7c86 <put_fat+0x122>
    7b94:	2b03      	cmp	r3, #3
    7b96:	d100      	bne.n	7b9a <put_fat+0x36>
    7b98:	e09e      	b.n	7cd8 <put_fat+0x174>
    7b9a:	2b01      	cmp	r3, #1
    7b9c:	d000      	beq.n	7ba0 <put_fat+0x3c>
    7b9e:	e0e6      	b.n	7d6e <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7ba0:	68bb      	ldr	r3, [r7, #8]
    7ba2:	61bb      	str	r3, [r7, #24]
    7ba4:	69bb      	ldr	r3, [r7, #24]
    7ba6:	085b      	lsrs	r3, r3, #1
    7ba8:	69ba      	ldr	r2, [r7, #24]
    7baa:	18d3      	adds	r3, r2, r3
    7bac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7bae:	68fb      	ldr	r3, [r7, #12]
    7bb0:	6a1a      	ldr	r2, [r3, #32]
    7bb2:	69bb      	ldr	r3, [r7, #24]
    7bb4:	0a5b      	lsrs	r3, r3, #9
    7bb6:	18d2      	adds	r2, r2, r3
    7bb8:	231f      	movs	r3, #31
    7bba:	18fc      	adds	r4, r7, r3
    7bbc:	68fb      	ldr	r3, [r7, #12]
    7bbe:	0011      	movs	r1, r2
    7bc0:	0018      	movs	r0, r3
    7bc2:	4b76      	ldr	r3, [pc, #472]	; (7d9c <put_fat+0x238>)
    7bc4:	4798      	blx	r3
    7bc6:	0003      	movs	r3, r0
    7bc8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7bca:	231f      	movs	r3, #31
    7bcc:	18fb      	adds	r3, r7, r3
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	2b00      	cmp	r3, #0
    7bd2:	d000      	beq.n	7bd6 <put_fat+0x72>
    7bd4:	e0d0      	b.n	7d78 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    7bd6:	69bb      	ldr	r3, [r7, #24]
    7bd8:	05db      	lsls	r3, r3, #23
    7bda:	0ddb      	lsrs	r3, r3, #23
    7bdc:	3330      	adds	r3, #48	; 0x30
    7bde:	68fa      	ldr	r2, [r7, #12]
    7be0:	18d3      	adds	r3, r2, r3
    7be2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7be4:	68bb      	ldr	r3, [r7, #8]
    7be6:	2201      	movs	r2, #1
    7be8:	4013      	ands	r3, r2
    7bea:	d00d      	beq.n	7c08 <put_fat+0xa4>
    7bec:	697b      	ldr	r3, [r7, #20]
    7bee:	781b      	ldrb	r3, [r3, #0]
    7bf0:	b25b      	sxtb	r3, r3
    7bf2:	220f      	movs	r2, #15
    7bf4:	4013      	ands	r3, r2
    7bf6:	b25a      	sxtb	r2, r3
    7bf8:	687b      	ldr	r3, [r7, #4]
    7bfa:	b2db      	uxtb	r3, r3
    7bfc:	011b      	lsls	r3, r3, #4
    7bfe:	b25b      	sxtb	r3, r3
    7c00:	4313      	orrs	r3, r2
    7c02:	b25b      	sxtb	r3, r3
    7c04:	b2db      	uxtb	r3, r3
    7c06:	e001      	b.n	7c0c <put_fat+0xa8>
    7c08:	687b      	ldr	r3, [r7, #4]
    7c0a:	b2db      	uxtb	r3, r3
    7c0c:	697a      	ldr	r2, [r7, #20]
    7c0e:	7013      	strb	r3, [r2, #0]
			bc++;
    7c10:	69bb      	ldr	r3, [r7, #24]
    7c12:	3301      	adds	r3, #1
    7c14:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    7c16:	68fb      	ldr	r3, [r7, #12]
    7c18:	2201      	movs	r2, #1
    7c1a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7c1c:	68fb      	ldr	r3, [r7, #12]
    7c1e:	6a1a      	ldr	r2, [r3, #32]
    7c20:	69bb      	ldr	r3, [r7, #24]
    7c22:	0a5b      	lsrs	r3, r3, #9
    7c24:	18d2      	adds	r2, r2, r3
    7c26:	231f      	movs	r3, #31
    7c28:	18fc      	adds	r4, r7, r3
    7c2a:	68fb      	ldr	r3, [r7, #12]
    7c2c:	0011      	movs	r1, r2
    7c2e:	0018      	movs	r0, r3
    7c30:	4b5a      	ldr	r3, [pc, #360]	; (7d9c <put_fat+0x238>)
    7c32:	4798      	blx	r3
    7c34:	0003      	movs	r3, r0
    7c36:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7c38:	231f      	movs	r3, #31
    7c3a:	18fb      	adds	r3, r7, r3
    7c3c:	781b      	ldrb	r3, [r3, #0]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	d000      	beq.n	7c44 <put_fat+0xe0>
    7c42:	e09b      	b.n	7d7c <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    7c44:	69bb      	ldr	r3, [r7, #24]
    7c46:	05db      	lsls	r3, r3, #23
    7c48:	0ddb      	lsrs	r3, r3, #23
    7c4a:	3330      	adds	r3, #48	; 0x30
    7c4c:	68fa      	ldr	r2, [r7, #12]
    7c4e:	18d3      	adds	r3, r2, r3
    7c50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7c52:	68bb      	ldr	r3, [r7, #8]
    7c54:	2201      	movs	r2, #1
    7c56:	4013      	ands	r3, r2
    7c58:	d003      	beq.n	7c62 <put_fat+0xfe>
    7c5a:	687b      	ldr	r3, [r7, #4]
    7c5c:	091b      	lsrs	r3, r3, #4
    7c5e:	b2db      	uxtb	r3, r3
    7c60:	e00e      	b.n	7c80 <put_fat+0x11c>
    7c62:	697b      	ldr	r3, [r7, #20]
    7c64:	781b      	ldrb	r3, [r3, #0]
    7c66:	b25b      	sxtb	r3, r3
    7c68:	220f      	movs	r2, #15
    7c6a:	4393      	bics	r3, r2
    7c6c:	b25a      	sxtb	r2, r3
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	0a1b      	lsrs	r3, r3, #8
    7c72:	b25b      	sxtb	r3, r3
    7c74:	210f      	movs	r1, #15
    7c76:	400b      	ands	r3, r1
    7c78:	b25b      	sxtb	r3, r3
    7c7a:	4313      	orrs	r3, r2
    7c7c:	b25b      	sxtb	r3, r3
    7c7e:	b2db      	uxtb	r3, r3
    7c80:	697a      	ldr	r2, [r7, #20]
    7c82:	7013      	strb	r3, [r2, #0]
			break;
    7c84:	e07f      	b.n	7d86 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7c86:	68fb      	ldr	r3, [r7, #12]
    7c88:	6a1a      	ldr	r2, [r3, #32]
    7c8a:	68bb      	ldr	r3, [r7, #8]
    7c8c:	0a1b      	lsrs	r3, r3, #8
    7c8e:	18d2      	adds	r2, r2, r3
    7c90:	231f      	movs	r3, #31
    7c92:	18fc      	adds	r4, r7, r3
    7c94:	68fb      	ldr	r3, [r7, #12]
    7c96:	0011      	movs	r1, r2
    7c98:	0018      	movs	r0, r3
    7c9a:	4b40      	ldr	r3, [pc, #256]	; (7d9c <put_fat+0x238>)
    7c9c:	4798      	blx	r3
    7c9e:	0003      	movs	r3, r0
    7ca0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7ca2:	231f      	movs	r3, #31
    7ca4:	18fb      	adds	r3, r7, r3
    7ca6:	781b      	ldrb	r3, [r3, #0]
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d169      	bne.n	7d80 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7cac:	68bb      	ldr	r3, [r7, #8]
    7cae:	005a      	lsls	r2, r3, #1
    7cb0:	23ff      	movs	r3, #255	; 0xff
    7cb2:	005b      	lsls	r3, r3, #1
    7cb4:	4013      	ands	r3, r2
    7cb6:	3330      	adds	r3, #48	; 0x30
    7cb8:	68fa      	ldr	r2, [r7, #12]
    7cba:	18d3      	adds	r3, r2, r3
    7cbc:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7cbe:	687b      	ldr	r3, [r7, #4]
    7cc0:	b2da      	uxtb	r2, r3
    7cc2:	697b      	ldr	r3, [r7, #20]
    7cc4:	701a      	strb	r2, [r3, #0]
    7cc6:	697b      	ldr	r3, [r7, #20]
    7cc8:	3301      	adds	r3, #1
    7cca:	687a      	ldr	r2, [r7, #4]
    7ccc:	b292      	uxth	r2, r2
    7cce:	0a12      	lsrs	r2, r2, #8
    7cd0:	b292      	uxth	r2, r2
    7cd2:	b2d2      	uxtb	r2, r2
    7cd4:	701a      	strb	r2, [r3, #0]
			break;
    7cd6:	e056      	b.n	7d86 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7cd8:	68fb      	ldr	r3, [r7, #12]
    7cda:	6a1a      	ldr	r2, [r3, #32]
    7cdc:	68bb      	ldr	r3, [r7, #8]
    7cde:	09db      	lsrs	r3, r3, #7
    7ce0:	18d2      	adds	r2, r2, r3
    7ce2:	231f      	movs	r3, #31
    7ce4:	18fc      	adds	r4, r7, r3
    7ce6:	68fb      	ldr	r3, [r7, #12]
    7ce8:	0011      	movs	r1, r2
    7cea:	0018      	movs	r0, r3
    7cec:	4b2b      	ldr	r3, [pc, #172]	; (7d9c <put_fat+0x238>)
    7cee:	4798      	blx	r3
    7cf0:	0003      	movs	r3, r0
    7cf2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7cf4:	231f      	movs	r3, #31
    7cf6:	18fb      	adds	r3, r7, r3
    7cf8:	781b      	ldrb	r3, [r3, #0]
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d142      	bne.n	7d84 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7cfe:	68bb      	ldr	r3, [r7, #8]
    7d00:	009a      	lsls	r2, r3, #2
    7d02:	23fe      	movs	r3, #254	; 0xfe
    7d04:	005b      	lsls	r3, r3, #1
    7d06:	4013      	ands	r3, r2
    7d08:	3330      	adds	r3, #48	; 0x30
    7d0a:	68fa      	ldr	r2, [r7, #12]
    7d0c:	18d3      	adds	r3, r2, r3
    7d0e:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7d10:	697b      	ldr	r3, [r7, #20]
    7d12:	3303      	adds	r3, #3
    7d14:	781b      	ldrb	r3, [r3, #0]
    7d16:	061a      	lsls	r2, r3, #24
    7d18:	697b      	ldr	r3, [r7, #20]
    7d1a:	3302      	adds	r3, #2
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	041b      	lsls	r3, r3, #16
    7d20:	4313      	orrs	r3, r2
    7d22:	697a      	ldr	r2, [r7, #20]
    7d24:	3201      	adds	r2, #1
    7d26:	7812      	ldrb	r2, [r2, #0]
    7d28:	0212      	lsls	r2, r2, #8
    7d2a:	4313      	orrs	r3, r2
    7d2c:	697a      	ldr	r2, [r7, #20]
    7d2e:	7812      	ldrb	r2, [r2, #0]
    7d30:	4313      	orrs	r3, r2
    7d32:	0f1b      	lsrs	r3, r3, #28
    7d34:	071b      	lsls	r3, r3, #28
    7d36:	687a      	ldr	r2, [r7, #4]
    7d38:	4313      	orrs	r3, r2
    7d3a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	b2da      	uxtb	r2, r3
    7d40:	697b      	ldr	r3, [r7, #20]
    7d42:	701a      	strb	r2, [r3, #0]
    7d44:	697b      	ldr	r3, [r7, #20]
    7d46:	3301      	adds	r3, #1
    7d48:	687a      	ldr	r2, [r7, #4]
    7d4a:	b292      	uxth	r2, r2
    7d4c:	0a12      	lsrs	r2, r2, #8
    7d4e:	b292      	uxth	r2, r2
    7d50:	b2d2      	uxtb	r2, r2
    7d52:	701a      	strb	r2, [r3, #0]
    7d54:	697b      	ldr	r3, [r7, #20]
    7d56:	3302      	adds	r3, #2
    7d58:	687a      	ldr	r2, [r7, #4]
    7d5a:	0c12      	lsrs	r2, r2, #16
    7d5c:	b2d2      	uxtb	r2, r2
    7d5e:	701a      	strb	r2, [r3, #0]
    7d60:	697b      	ldr	r3, [r7, #20]
    7d62:	3303      	adds	r3, #3
    7d64:	687a      	ldr	r2, [r7, #4]
    7d66:	0e12      	lsrs	r2, r2, #24
    7d68:	b2d2      	uxtb	r2, r2
    7d6a:	701a      	strb	r2, [r3, #0]
			break;
    7d6c:	e00b      	b.n	7d86 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    7d6e:	231f      	movs	r3, #31
    7d70:	18fb      	adds	r3, r7, r3
    7d72:	2202      	movs	r2, #2
    7d74:	701a      	strb	r2, [r3, #0]
    7d76:	e006      	b.n	7d86 <put_fat+0x222>
			if (res != FR_OK) break;
    7d78:	46c0      	nop			; (mov r8, r8)
    7d7a:	e004      	b.n	7d86 <put_fat+0x222>
			if (res != FR_OK) break;
    7d7c:	46c0      	nop			; (mov r8, r8)
    7d7e:	e002      	b.n	7d86 <put_fat+0x222>
			if (res != FR_OK) break;
    7d80:	46c0      	nop			; (mov r8, r8)
    7d82:	e000      	b.n	7d86 <put_fat+0x222>
			if (res != FR_OK) break;
    7d84:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    7d86:	68fb      	ldr	r3, [r7, #12]
    7d88:	2201      	movs	r2, #1
    7d8a:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7d8c:	231f      	movs	r3, #31
    7d8e:	18fb      	adds	r3, r7, r3
    7d90:	781b      	ldrb	r3, [r3, #0]
}
    7d92:	0018      	movs	r0, r3
    7d94:	46bd      	mov	sp, r7
    7d96:	b009      	add	sp, #36	; 0x24
    7d98:	bd90      	pop	{r4, r7, pc}
    7d9a:	46c0      	nop			; (mov r8, r8)
    7d9c:	00007761 	.word	0x00007761

00007da0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7da0:	b590      	push	{r4, r7, lr}
    7da2:	b085      	sub	sp, #20
    7da4:	af00      	add	r7, sp, #0
    7da6:	6078      	str	r0, [r7, #4]
    7da8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7daa:	683b      	ldr	r3, [r7, #0]
    7dac:	2b01      	cmp	r3, #1
    7dae:	d904      	bls.n	7dba <remove_chain+0x1a>
    7db0:	687b      	ldr	r3, [r7, #4]
    7db2:	699a      	ldr	r2, [r3, #24]
    7db4:	683b      	ldr	r3, [r7, #0]
    7db6:	429a      	cmp	r2, r3
    7db8:	d804      	bhi.n	7dc4 <remove_chain+0x24>
		res = FR_INT_ERR;
    7dba:	230f      	movs	r3, #15
    7dbc:	18fb      	adds	r3, r7, r3
    7dbe:	2202      	movs	r2, #2
    7dc0:	701a      	strb	r2, [r3, #0]
    7dc2:	e045      	b.n	7e50 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7dc4:	230f      	movs	r3, #15
    7dc6:	18fb      	adds	r3, r7, r3
    7dc8:	2200      	movs	r2, #0
    7dca:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7dcc:	e037      	b.n	7e3e <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7dce:	683a      	ldr	r2, [r7, #0]
    7dd0:	687b      	ldr	r3, [r7, #4]
    7dd2:	0011      	movs	r1, r2
    7dd4:	0018      	movs	r0, r3
    7dd6:	4b22      	ldr	r3, [pc, #136]	; (7e60 <remove_chain+0xc0>)
    7dd8:	4798      	blx	r3
    7dda:	0003      	movs	r3, r0
    7ddc:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7dde:	68bb      	ldr	r3, [r7, #8]
    7de0:	2b00      	cmp	r3, #0
    7de2:	d032      	beq.n	7e4a <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7de4:	68bb      	ldr	r3, [r7, #8]
    7de6:	2b01      	cmp	r3, #1
    7de8:	d104      	bne.n	7df4 <remove_chain+0x54>
    7dea:	230f      	movs	r3, #15
    7dec:	18fb      	adds	r3, r7, r3
    7dee:	2202      	movs	r2, #2
    7df0:	701a      	strb	r2, [r3, #0]
    7df2:	e02d      	b.n	7e50 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7df4:	68bb      	ldr	r3, [r7, #8]
    7df6:	3301      	adds	r3, #1
    7df8:	d104      	bne.n	7e04 <remove_chain+0x64>
    7dfa:	230f      	movs	r3, #15
    7dfc:	18fb      	adds	r3, r7, r3
    7dfe:	2201      	movs	r2, #1
    7e00:	701a      	strb	r2, [r3, #0]
    7e02:	e025      	b.n	7e50 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7e04:	230f      	movs	r3, #15
    7e06:	18fc      	adds	r4, r7, r3
    7e08:	6839      	ldr	r1, [r7, #0]
    7e0a:	687b      	ldr	r3, [r7, #4]
    7e0c:	2200      	movs	r2, #0
    7e0e:	0018      	movs	r0, r3
    7e10:	4b14      	ldr	r3, [pc, #80]	; (7e64 <remove_chain+0xc4>)
    7e12:	4798      	blx	r3
    7e14:	0003      	movs	r3, r0
    7e16:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7e18:	230f      	movs	r3, #15
    7e1a:	18fb      	adds	r3, r7, r3
    7e1c:	781b      	ldrb	r3, [r3, #0]
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d115      	bne.n	7e4e <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7e22:	687b      	ldr	r3, [r7, #4]
    7e24:	691b      	ldr	r3, [r3, #16]
    7e26:	3301      	adds	r3, #1
    7e28:	d007      	beq.n	7e3a <remove_chain+0x9a>
				fs->free_clust++;
    7e2a:	687b      	ldr	r3, [r7, #4]
    7e2c:	691b      	ldr	r3, [r3, #16]
    7e2e:	1c5a      	adds	r2, r3, #1
    7e30:	687b      	ldr	r3, [r7, #4]
    7e32:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	2201      	movs	r2, #1
    7e38:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7e3a:	68bb      	ldr	r3, [r7, #8]
    7e3c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	699a      	ldr	r2, [r3, #24]
    7e42:	683b      	ldr	r3, [r7, #0]
    7e44:	429a      	cmp	r2, r3
    7e46:	d8c2      	bhi.n	7dce <remove_chain+0x2e>
    7e48:	e002      	b.n	7e50 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7e4a:	46c0      	nop			; (mov r8, r8)
    7e4c:	e000      	b.n	7e50 <remove_chain+0xb0>
			if (res != FR_OK) break;
    7e4e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    7e50:	230f      	movs	r3, #15
    7e52:	18fb      	adds	r3, r7, r3
    7e54:	781b      	ldrb	r3, [r3, #0]
}
    7e56:	0018      	movs	r0, r3
    7e58:	46bd      	mov	sp, r7
    7e5a:	b005      	add	sp, #20
    7e5c:	bd90      	pop	{r4, r7, pc}
    7e5e:	46c0      	nop			; (mov r8, r8)
    7e60:	000079f9 	.word	0x000079f9
    7e64:	00007b65 	.word	0x00007b65

00007e68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7e68:	b590      	push	{r4, r7, lr}
    7e6a:	b087      	sub	sp, #28
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
    7e70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    7e72:	683b      	ldr	r3, [r7, #0]
    7e74:	2b00      	cmp	r3, #0
    7e76:	d10d      	bne.n	7e94 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	68db      	ldr	r3, [r3, #12]
    7e7c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7e7e:	693b      	ldr	r3, [r7, #16]
    7e80:	2b00      	cmp	r3, #0
    7e82:	d004      	beq.n	7e8e <create_chain+0x26>
    7e84:	687b      	ldr	r3, [r7, #4]
    7e86:	699a      	ldr	r2, [r3, #24]
    7e88:	693b      	ldr	r3, [r7, #16]
    7e8a:	429a      	cmp	r2, r3
    7e8c:	d818      	bhi.n	7ec0 <create_chain+0x58>
    7e8e:	2301      	movs	r3, #1
    7e90:	613b      	str	r3, [r7, #16]
    7e92:	e015      	b.n	7ec0 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7e94:	683a      	ldr	r2, [r7, #0]
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	0011      	movs	r1, r2
    7e9a:	0018      	movs	r0, r3
    7e9c:	4b3e      	ldr	r3, [pc, #248]	; (7f98 <create_chain+0x130>)
    7e9e:	4798      	blx	r3
    7ea0:	0003      	movs	r3, r0
    7ea2:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7ea4:	68bb      	ldr	r3, [r7, #8]
    7ea6:	2b01      	cmp	r3, #1
    7ea8:	d801      	bhi.n	7eae <create_chain+0x46>
    7eaa:	2301      	movs	r3, #1
    7eac:	e070      	b.n	7f90 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7eae:	687b      	ldr	r3, [r7, #4]
    7eb0:	699a      	ldr	r2, [r3, #24]
    7eb2:	68bb      	ldr	r3, [r7, #8]
    7eb4:	429a      	cmp	r2, r3
    7eb6:	d901      	bls.n	7ebc <create_chain+0x54>
    7eb8:	68bb      	ldr	r3, [r7, #8]
    7eba:	e069      	b.n	7f90 <create_chain+0x128>
		scl = clst;
    7ebc:	683b      	ldr	r3, [r7, #0]
    7ebe:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7ec0:	693b      	ldr	r3, [r7, #16]
    7ec2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7ec4:	697b      	ldr	r3, [r7, #20]
    7ec6:	3301      	adds	r3, #1
    7ec8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7eca:	687b      	ldr	r3, [r7, #4]
    7ecc:	699a      	ldr	r2, [r3, #24]
    7ece:	697b      	ldr	r3, [r7, #20]
    7ed0:	429a      	cmp	r2, r3
    7ed2:	d807      	bhi.n	7ee4 <create_chain+0x7c>
			ncl = 2;
    7ed4:	2302      	movs	r3, #2
    7ed6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7ed8:	697a      	ldr	r2, [r7, #20]
    7eda:	693b      	ldr	r3, [r7, #16]
    7edc:	429a      	cmp	r2, r3
    7ede:	d901      	bls.n	7ee4 <create_chain+0x7c>
    7ee0:	2300      	movs	r3, #0
    7ee2:	e055      	b.n	7f90 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7ee4:	697a      	ldr	r2, [r7, #20]
    7ee6:	687b      	ldr	r3, [r7, #4]
    7ee8:	0011      	movs	r1, r2
    7eea:	0018      	movs	r0, r3
    7eec:	4b2a      	ldr	r3, [pc, #168]	; (7f98 <create_chain+0x130>)
    7eee:	4798      	blx	r3
    7ef0:	0003      	movs	r3, r0
    7ef2:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7ef4:	68bb      	ldr	r3, [r7, #8]
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	d00d      	beq.n	7f16 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7efa:	68bb      	ldr	r3, [r7, #8]
    7efc:	3301      	adds	r3, #1
    7efe:	d002      	beq.n	7f06 <create_chain+0x9e>
    7f00:	68bb      	ldr	r3, [r7, #8]
    7f02:	2b01      	cmp	r3, #1
    7f04:	d101      	bne.n	7f0a <create_chain+0xa2>
			return cs;
    7f06:	68bb      	ldr	r3, [r7, #8]
    7f08:	e042      	b.n	7f90 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7f0a:	697a      	ldr	r2, [r7, #20]
    7f0c:	693b      	ldr	r3, [r7, #16]
    7f0e:	429a      	cmp	r2, r3
    7f10:	d1d8      	bne.n	7ec4 <create_chain+0x5c>
    7f12:	2300      	movs	r3, #0
    7f14:	e03c      	b.n	7f90 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7f16:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7f18:	230f      	movs	r3, #15
    7f1a:	18fc      	adds	r4, r7, r3
    7f1c:	4a1f      	ldr	r2, [pc, #124]	; (7f9c <create_chain+0x134>)
    7f1e:	6979      	ldr	r1, [r7, #20]
    7f20:	687b      	ldr	r3, [r7, #4]
    7f22:	0018      	movs	r0, r3
    7f24:	4b1e      	ldr	r3, [pc, #120]	; (7fa0 <create_chain+0x138>)
    7f26:	4798      	blx	r3
    7f28:	0003      	movs	r3, r0
    7f2a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7f2c:	230f      	movs	r3, #15
    7f2e:	18fb      	adds	r3, r7, r3
    7f30:	781b      	ldrb	r3, [r3, #0]
    7f32:	2b00      	cmp	r3, #0
    7f34:	d10c      	bne.n	7f50 <create_chain+0xe8>
    7f36:	683b      	ldr	r3, [r7, #0]
    7f38:	2b00      	cmp	r3, #0
    7f3a:	d009      	beq.n	7f50 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7f3c:	230f      	movs	r3, #15
    7f3e:	18fc      	adds	r4, r7, r3
    7f40:	697a      	ldr	r2, [r7, #20]
    7f42:	6839      	ldr	r1, [r7, #0]
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	0018      	movs	r0, r3
    7f48:	4b15      	ldr	r3, [pc, #84]	; (7fa0 <create_chain+0x138>)
    7f4a:	4798      	blx	r3
    7f4c:	0003      	movs	r3, r0
    7f4e:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    7f50:	230f      	movs	r3, #15
    7f52:	18fb      	adds	r3, r7, r3
    7f54:	781b      	ldrb	r3, [r3, #0]
    7f56:	2b00      	cmp	r3, #0
    7f58:	d10f      	bne.n	7f7a <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7f5a:	687b      	ldr	r3, [r7, #4]
    7f5c:	697a      	ldr	r2, [r7, #20]
    7f5e:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	691b      	ldr	r3, [r3, #16]
    7f64:	3301      	adds	r3, #1
    7f66:	d012      	beq.n	7f8e <create_chain+0x126>
			fs->free_clust--;
    7f68:	687b      	ldr	r3, [r7, #4]
    7f6a:	691b      	ldr	r3, [r3, #16]
    7f6c:	1e5a      	subs	r2, r3, #1
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	2201      	movs	r2, #1
    7f76:	715a      	strb	r2, [r3, #5]
    7f78:	e009      	b.n	7f8e <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7f7a:	230f      	movs	r3, #15
    7f7c:	18fb      	adds	r3, r7, r3
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	2b01      	cmp	r3, #1
    7f82:	d102      	bne.n	7f8a <create_chain+0x122>
    7f84:	2301      	movs	r3, #1
    7f86:	425b      	negs	r3, r3
    7f88:	e000      	b.n	7f8c <create_chain+0x124>
    7f8a:	2301      	movs	r3, #1
    7f8c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7f8e:	697b      	ldr	r3, [r7, #20]
}
    7f90:	0018      	movs	r0, r3
    7f92:	46bd      	mov	sp, r7
    7f94:	b007      	add	sp, #28
    7f96:	bd90      	pop	{r4, r7, pc}
    7f98:	000079f9 	.word	0x000079f9
    7f9c:	0fffffff 	.word	0x0fffffff
    7fa0:	00007b65 	.word	0x00007b65

00007fa4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7fa4:	b580      	push	{r7, lr}
    7fa6:	b084      	sub	sp, #16
    7fa8:	af00      	add	r7, sp, #0
    7faa:	6078      	str	r0, [r7, #4]
    7fac:	000a      	movs	r2, r1
    7fae:	1cbb      	adds	r3, r7, #2
    7fb0:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7fb2:	687b      	ldr	r3, [r7, #4]
    7fb4:	1cba      	adds	r2, r7, #2
    7fb6:	8812      	ldrh	r2, [r2, #0]
    7fb8:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7fba:	687b      	ldr	r3, [r7, #4]
    7fbc:	689b      	ldr	r3, [r3, #8]
    7fbe:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7fc0:	68fb      	ldr	r3, [r7, #12]
    7fc2:	2b01      	cmp	r3, #1
    7fc4:	d005      	beq.n	7fd2 <dir_sdi+0x2e>
    7fc6:	687b      	ldr	r3, [r7, #4]
    7fc8:	681b      	ldr	r3, [r3, #0]
    7fca:	699a      	ldr	r2, [r3, #24]
    7fcc:	68fb      	ldr	r3, [r7, #12]
    7fce:	429a      	cmp	r2, r3
    7fd0:	d801      	bhi.n	7fd6 <dir_sdi+0x32>
		return FR_INT_ERR;
    7fd2:	2302      	movs	r3, #2
    7fd4:	e075      	b.n	80c2 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7fd6:	68fb      	ldr	r3, [r7, #12]
    7fd8:	2b00      	cmp	r3, #0
    7fda:	d108      	bne.n	7fee <dir_sdi+0x4a>
    7fdc:	687b      	ldr	r3, [r7, #4]
    7fde:	681b      	ldr	r3, [r3, #0]
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	2b03      	cmp	r3, #3
    7fe4:	d103      	bne.n	7fee <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7fe6:	687b      	ldr	r3, [r7, #4]
    7fe8:	681b      	ldr	r3, [r3, #0]
    7fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7fec:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7fee:	68fb      	ldr	r3, [r7, #12]
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d116      	bne.n	8022 <dir_sdi+0x7e>
		dj->clust = clst;
    7ff4:	687b      	ldr	r3, [r7, #4]
    7ff6:	68fa      	ldr	r2, [r7, #12]
    7ff8:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7ffa:	687b      	ldr	r3, [r7, #4]
    7ffc:	681b      	ldr	r3, [r3, #0]
    7ffe:	891b      	ldrh	r3, [r3, #8]
    8000:	1cba      	adds	r2, r7, #2
    8002:	8812      	ldrh	r2, [r2, #0]
    8004:	429a      	cmp	r2, r3
    8006:	d301      	bcc.n	800c <dir_sdi+0x68>
			return FR_INT_ERR;
    8008:	2302      	movs	r3, #2
    800a:	e05a      	b.n	80c2 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    800c:	687b      	ldr	r3, [r7, #4]
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8012:	1cba      	adds	r2, r7, #2
    8014:	8812      	ldrh	r2, [r2, #0]
    8016:	0912      	lsrs	r2, r2, #4
    8018:	b292      	uxth	r2, r2
    801a:	189a      	adds	r2, r3, r2
    801c:	687b      	ldr	r3, [r7, #4]
    801e:	611a      	str	r2, [r3, #16]
    8020:	e042      	b.n	80a8 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    8022:	687b      	ldr	r3, [r7, #4]
    8024:	681b      	ldr	r3, [r3, #0]
    8026:	789b      	ldrb	r3, [r3, #2]
    8028:	b29a      	uxth	r2, r3
    802a:	230a      	movs	r3, #10
    802c:	18fb      	adds	r3, r7, r3
    802e:	0112      	lsls	r2, r2, #4
    8030:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    8032:	e020      	b.n	8076 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	681b      	ldr	r3, [r3, #0]
    8038:	68fa      	ldr	r2, [r7, #12]
    803a:	0011      	movs	r1, r2
    803c:	0018      	movs	r0, r3
    803e:	4b23      	ldr	r3, [pc, #140]	; (80cc <dir_sdi+0x128>)
    8040:	4798      	blx	r3
    8042:	0003      	movs	r3, r0
    8044:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    8046:	68fb      	ldr	r3, [r7, #12]
    8048:	3301      	adds	r3, #1
    804a:	d101      	bne.n	8050 <dir_sdi+0xac>
    804c:	2301      	movs	r3, #1
    804e:	e038      	b.n	80c2 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    8050:	68fb      	ldr	r3, [r7, #12]
    8052:	2b01      	cmp	r3, #1
    8054:	d905      	bls.n	8062 <dir_sdi+0xbe>
    8056:	687b      	ldr	r3, [r7, #4]
    8058:	681b      	ldr	r3, [r3, #0]
    805a:	699a      	ldr	r2, [r3, #24]
    805c:	68fb      	ldr	r3, [r7, #12]
    805e:	429a      	cmp	r2, r3
    8060:	d801      	bhi.n	8066 <dir_sdi+0xc2>
				return FR_INT_ERR;
    8062:	2302      	movs	r3, #2
    8064:	e02d      	b.n	80c2 <dir_sdi+0x11e>
			idx -= ic;
    8066:	1cbb      	adds	r3, r7, #2
    8068:	1cb9      	adds	r1, r7, #2
    806a:	220a      	movs	r2, #10
    806c:	18ba      	adds	r2, r7, r2
    806e:	8809      	ldrh	r1, [r1, #0]
    8070:	8812      	ldrh	r2, [r2, #0]
    8072:	1a8a      	subs	r2, r1, r2
    8074:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    8076:	1cba      	adds	r2, r7, #2
    8078:	230a      	movs	r3, #10
    807a:	18fb      	adds	r3, r7, r3
    807c:	8812      	ldrh	r2, [r2, #0]
    807e:	881b      	ldrh	r3, [r3, #0]
    8080:	429a      	cmp	r2, r3
    8082:	d2d7      	bcs.n	8034 <dir_sdi+0x90>
		}
		dj->clust = clst;
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	68fa      	ldr	r2, [r7, #12]
    8088:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    808a:	687b      	ldr	r3, [r7, #4]
    808c:	681b      	ldr	r3, [r3, #0]
    808e:	68fa      	ldr	r2, [r7, #12]
    8090:	0011      	movs	r1, r2
    8092:	0018      	movs	r0, r3
    8094:	4b0e      	ldr	r3, [pc, #56]	; (80d0 <dir_sdi+0x12c>)
    8096:	4798      	blx	r3
    8098:	0002      	movs	r2, r0
    809a:	1cbb      	adds	r3, r7, #2
    809c:	881b      	ldrh	r3, [r3, #0]
    809e:	091b      	lsrs	r3, r3, #4
    80a0:	b29b      	uxth	r3, r3
    80a2:	18d2      	adds	r2, r2, r3
    80a4:	687b      	ldr	r3, [r7, #4]
    80a6:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    80a8:	687b      	ldr	r3, [r7, #4]
    80aa:	681b      	ldr	r3, [r3, #0]
    80ac:	3330      	adds	r3, #48	; 0x30
    80ae:	001a      	movs	r2, r3
    80b0:	1cbb      	adds	r3, r7, #2
    80b2:	881b      	ldrh	r3, [r3, #0]
    80b4:	210f      	movs	r1, #15
    80b6:	400b      	ands	r3, r1
    80b8:	015b      	lsls	r3, r3, #5
    80ba:	18d2      	adds	r2, r2, r3
    80bc:	687b      	ldr	r3, [r7, #4]
    80be:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    80c0:	2300      	movs	r3, #0
}
    80c2:	0018      	movs	r0, r3
    80c4:	46bd      	mov	sp, r7
    80c6:	b004      	add	sp, #16
    80c8:	bd80      	pop	{r7, pc}
    80ca:	46c0      	nop			; (mov r8, r8)
    80cc:	000079f9 	.word	0x000079f9
    80d0:	000079c1 	.word	0x000079c1

000080d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    80d4:	b590      	push	{r4, r7, lr}
    80d6:	b085      	sub	sp, #20
    80d8:	af00      	add	r7, sp, #0
    80da:	6078      	str	r0, [r7, #4]
    80dc:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    80de:	687b      	ldr	r3, [r7, #4]
    80e0:	88da      	ldrh	r2, [r3, #6]
    80e2:	2308      	movs	r3, #8
    80e4:	18fb      	adds	r3, r7, r3
    80e6:	3201      	adds	r2, #1
    80e8:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    80ea:	2308      	movs	r3, #8
    80ec:	18fb      	adds	r3, r7, r3
    80ee:	881b      	ldrh	r3, [r3, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d003      	beq.n	80fc <dir_next+0x28>
    80f4:	687b      	ldr	r3, [r7, #4]
    80f6:	691b      	ldr	r3, [r3, #16]
    80f8:	2b00      	cmp	r3, #0
    80fa:	d101      	bne.n	8100 <dir_next+0x2c>
		return FR_NO_FILE;
    80fc:	2304      	movs	r3, #4
    80fe:	e0d2      	b.n	82a6 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    8100:	2308      	movs	r3, #8
    8102:	18fb      	adds	r3, r7, r3
    8104:	881b      	ldrh	r3, [r3, #0]
    8106:	220f      	movs	r2, #15
    8108:	4013      	ands	r3, r2
    810a:	b29b      	uxth	r3, r3
    810c:	2b00      	cmp	r3, #0
    810e:	d000      	beq.n	8112 <dir_next+0x3e>
    8110:	e0b6      	b.n	8280 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    8112:	687b      	ldr	r3, [r7, #4]
    8114:	691b      	ldr	r3, [r3, #16]
    8116:	1c5a      	adds	r2, r3, #1
    8118:	687b      	ldr	r3, [r7, #4]
    811a:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    811c:	687b      	ldr	r3, [r7, #4]
    811e:	68db      	ldr	r3, [r3, #12]
    8120:	2b00      	cmp	r3, #0
    8122:	d10a      	bne.n	813a <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	681b      	ldr	r3, [r3, #0]
    8128:	891b      	ldrh	r3, [r3, #8]
    812a:	2208      	movs	r2, #8
    812c:	18ba      	adds	r2, r7, r2
    812e:	8812      	ldrh	r2, [r2, #0]
    8130:	429a      	cmp	r2, r3
    8132:	d200      	bcs.n	8136 <dir_next+0x62>
    8134:	e0a4      	b.n	8280 <dir_next+0x1ac>
				return FR_NO_FILE;
    8136:	2304      	movs	r3, #4
    8138:	e0b5      	b.n	82a6 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    813a:	2308      	movs	r3, #8
    813c:	18fb      	adds	r3, r7, r3
    813e:	881b      	ldrh	r3, [r3, #0]
    8140:	091b      	lsrs	r3, r3, #4
    8142:	b29b      	uxth	r3, r3
    8144:	001a      	movs	r2, r3
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	681b      	ldr	r3, [r3, #0]
    814a:	789b      	ldrb	r3, [r3, #2]
    814c:	3b01      	subs	r3, #1
    814e:	4013      	ands	r3, r2
    8150:	d000      	beq.n	8154 <dir_next+0x80>
    8152:	e095      	b.n	8280 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    8154:	687b      	ldr	r3, [r7, #4]
    8156:	681a      	ldr	r2, [r3, #0]
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	68db      	ldr	r3, [r3, #12]
    815c:	0019      	movs	r1, r3
    815e:	0010      	movs	r0, r2
    8160:	4b53      	ldr	r3, [pc, #332]	; (82b0 <dir_next+0x1dc>)
    8162:	4798      	blx	r3
    8164:	0003      	movs	r3, r0
    8166:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    8168:	68fb      	ldr	r3, [r7, #12]
    816a:	2b01      	cmp	r3, #1
    816c:	d801      	bhi.n	8172 <dir_next+0x9e>
    816e:	2302      	movs	r3, #2
    8170:	e099      	b.n	82a6 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8172:	68fb      	ldr	r3, [r7, #12]
    8174:	3301      	adds	r3, #1
    8176:	d101      	bne.n	817c <dir_next+0xa8>
    8178:	2301      	movs	r3, #1
    817a:	e094      	b.n	82a6 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    817c:	687b      	ldr	r3, [r7, #4]
    817e:	681b      	ldr	r3, [r3, #0]
    8180:	699a      	ldr	r2, [r3, #24]
    8182:	68fb      	ldr	r3, [r7, #12]
    8184:	429a      	cmp	r2, r3
    8186:	d900      	bls.n	818a <dir_next+0xb6>
    8188:	e06d      	b.n	8266 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    818a:	683b      	ldr	r3, [r7, #0]
    818c:	2b00      	cmp	r3, #0
    818e:	d101      	bne.n	8194 <dir_next+0xc0>
    8190:	2304      	movs	r3, #4
    8192:	e088      	b.n	82a6 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	681a      	ldr	r2, [r3, #0]
    8198:	687b      	ldr	r3, [r7, #4]
    819a:	68db      	ldr	r3, [r3, #12]
    819c:	0019      	movs	r1, r3
    819e:	0010      	movs	r0, r2
    81a0:	4b44      	ldr	r3, [pc, #272]	; (82b4 <dir_next+0x1e0>)
    81a2:	4798      	blx	r3
    81a4:	0003      	movs	r3, r0
    81a6:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    81a8:	68fb      	ldr	r3, [r7, #12]
    81aa:	2b00      	cmp	r3, #0
    81ac:	d101      	bne.n	81b2 <dir_next+0xde>
    81ae:	2307      	movs	r3, #7
    81b0:	e079      	b.n	82a6 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    81b2:	68fb      	ldr	r3, [r7, #12]
    81b4:	2b01      	cmp	r3, #1
    81b6:	d101      	bne.n	81bc <dir_next+0xe8>
    81b8:	2302      	movs	r3, #2
    81ba:	e074      	b.n	82a6 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    81bc:	68fb      	ldr	r3, [r7, #12]
    81be:	3301      	adds	r3, #1
    81c0:	d101      	bne.n	81c6 <dir_next+0xf2>
    81c2:	2301      	movs	r3, #1
    81c4:	e06f      	b.n	82a6 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    81c6:	687b      	ldr	r3, [r7, #4]
    81c8:	681b      	ldr	r3, [r3, #0]
    81ca:	2100      	movs	r1, #0
    81cc:	0018      	movs	r0, r3
    81ce:	4b3a      	ldr	r3, [pc, #232]	; (82b8 <dir_next+0x1e4>)
    81d0:	4798      	blx	r3
    81d2:	1e03      	subs	r3, r0, #0
    81d4:	d001      	beq.n	81da <dir_next+0x106>
    81d6:	2301      	movs	r3, #1
    81d8:	e065      	b.n	82a6 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    81da:	687b      	ldr	r3, [r7, #4]
    81dc:	681b      	ldr	r3, [r3, #0]
    81de:	3330      	adds	r3, #48	; 0x30
    81e0:	0018      	movs	r0, r3
    81e2:	2380      	movs	r3, #128	; 0x80
    81e4:	009b      	lsls	r3, r3, #2
    81e6:	001a      	movs	r2, r3
    81e8:	2100      	movs	r1, #0
    81ea:	4b34      	ldr	r3, [pc, #208]	; (82bc <dir_next+0x1e8>)
    81ec:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    81ee:	687b      	ldr	r3, [r7, #4]
    81f0:	681c      	ldr	r4, [r3, #0]
    81f2:	687b      	ldr	r3, [r7, #4]
    81f4:	681b      	ldr	r3, [r3, #0]
    81f6:	68fa      	ldr	r2, [r7, #12]
    81f8:	0011      	movs	r1, r2
    81fa:	0018      	movs	r0, r3
    81fc:	4b30      	ldr	r3, [pc, #192]	; (82c0 <dir_next+0x1ec>)
    81fe:	4798      	blx	r3
    8200:	0003      	movs	r3, r0
    8202:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8204:	230b      	movs	r3, #11
    8206:	18fb      	adds	r3, r7, r3
    8208:	2200      	movs	r2, #0
    820a:	701a      	strb	r2, [r3, #0]
    820c:	e019      	b.n	8242 <dir_next+0x16e>
						dj->fs->wflag = 1;
    820e:	687b      	ldr	r3, [r7, #4]
    8210:	681b      	ldr	r3, [r3, #0]
    8212:	2201      	movs	r2, #1
    8214:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	681b      	ldr	r3, [r3, #0]
    821a:	2100      	movs	r1, #0
    821c:	0018      	movs	r0, r3
    821e:	4b26      	ldr	r3, [pc, #152]	; (82b8 <dir_next+0x1e4>)
    8220:	4798      	blx	r3
    8222:	1e03      	subs	r3, r0, #0
    8224:	d001      	beq.n	822a <dir_next+0x156>
    8226:	2301      	movs	r3, #1
    8228:	e03d      	b.n	82a6 <dir_next+0x1d2>
						dj->fs->winsect++;
    822a:	687b      	ldr	r3, [r7, #4]
    822c:	681b      	ldr	r3, [r3, #0]
    822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8230:	3201      	adds	r2, #1
    8232:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8234:	230b      	movs	r3, #11
    8236:	18fb      	adds	r3, r7, r3
    8238:	781a      	ldrb	r2, [r3, #0]
    823a:	230b      	movs	r3, #11
    823c:	18fb      	adds	r3, r7, r3
    823e:	3201      	adds	r2, #1
    8240:	701a      	strb	r2, [r3, #0]
    8242:	687b      	ldr	r3, [r7, #4]
    8244:	681b      	ldr	r3, [r3, #0]
    8246:	789b      	ldrb	r3, [r3, #2]
    8248:	220b      	movs	r2, #11
    824a:	18ba      	adds	r2, r7, r2
    824c:	7812      	ldrb	r2, [r2, #0]
    824e:	429a      	cmp	r2, r3
    8250:	d3dd      	bcc.n	820e <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    8252:	687b      	ldr	r3, [r7, #4]
    8254:	681b      	ldr	r3, [r3, #0]
    8256:	687a      	ldr	r2, [r7, #4]
    8258:	6812      	ldr	r2, [r2, #0]
    825a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    825c:	220b      	movs	r2, #11
    825e:	18ba      	adds	r2, r7, r2
    8260:	7812      	ldrb	r2, [r2, #0]
    8262:	1a8a      	subs	r2, r1, r2
    8264:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    8266:	687b      	ldr	r3, [r7, #4]
    8268:	68fa      	ldr	r2, [r7, #12]
    826a:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    826c:	687b      	ldr	r3, [r7, #4]
    826e:	681b      	ldr	r3, [r3, #0]
    8270:	68fa      	ldr	r2, [r7, #12]
    8272:	0011      	movs	r1, r2
    8274:	0018      	movs	r0, r3
    8276:	4b12      	ldr	r3, [pc, #72]	; (82c0 <dir_next+0x1ec>)
    8278:	4798      	blx	r3
    827a:	0002      	movs	r2, r0
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	2208      	movs	r2, #8
    8284:	18ba      	adds	r2, r7, r2
    8286:	8812      	ldrh	r2, [r2, #0]
    8288:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    828a:	687b      	ldr	r3, [r7, #4]
    828c:	681b      	ldr	r3, [r3, #0]
    828e:	3330      	adds	r3, #48	; 0x30
    8290:	001a      	movs	r2, r3
    8292:	2308      	movs	r3, #8
    8294:	18fb      	adds	r3, r7, r3
    8296:	881b      	ldrh	r3, [r3, #0]
    8298:	210f      	movs	r1, #15
    829a:	400b      	ands	r3, r1
    829c:	015b      	lsls	r3, r3, #5
    829e:	18d2      	adds	r2, r2, r3
    82a0:	687b      	ldr	r3, [r7, #4]
    82a2:	615a      	str	r2, [r3, #20]

	return FR_OK;
    82a4:	2300      	movs	r3, #0
}
    82a6:	0018      	movs	r0, r3
    82a8:	46bd      	mov	sp, r7
    82aa:	b005      	add	sp, #20
    82ac:	bd90      	pop	{r4, r7, pc}
    82ae:	46c0      	nop			; (mov r8, r8)
    82b0:	000079f9 	.word	0x000079f9
    82b4:	00007e69 	.word	0x00007e69
    82b8:	00007761 	.word	0x00007761
    82bc:	000076b5 	.word	0x000076b5
    82c0:	000079c1 	.word	0x000079c1

000082c4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    82c4:	b590      	push	{r4, r7, lr}
    82c6:	b087      	sub	sp, #28
    82c8:	af00      	add	r7, sp, #0
    82ca:	6078      	str	r0, [r7, #4]
    82cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    82ce:	683b      	ldr	r3, [r7, #0]
    82d0:	781b      	ldrb	r3, [r3, #0]
    82d2:	001a      	movs	r2, r3
    82d4:	2340      	movs	r3, #64	; 0x40
    82d6:	439a      	bics	r2, r3
    82d8:	0013      	movs	r3, r2
    82da:	1e5a      	subs	r2, r3, #1
    82dc:	0013      	movs	r3, r2
    82de:	005b      	lsls	r3, r3, #1
    82e0:	189b      	adds	r3, r3, r2
    82e2:	009b      	lsls	r3, r3, #2
    82e4:	189b      	adds	r3, r3, r2
    82e6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    82e8:	2300      	movs	r3, #0
    82ea:	613b      	str	r3, [r7, #16]
    82ec:	230e      	movs	r3, #14
    82ee:	18fb      	adds	r3, r7, r3
    82f0:	2201      	movs	r2, #1
    82f2:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    82f4:	4a31      	ldr	r2, [pc, #196]	; (83bc <cmp_lfn+0xf8>)
    82f6:	693b      	ldr	r3, [r7, #16]
    82f8:	18d3      	adds	r3, r2, r3
    82fa:	781b      	ldrb	r3, [r3, #0]
    82fc:	3301      	adds	r3, #1
    82fe:	683a      	ldr	r2, [r7, #0]
    8300:	18d3      	adds	r3, r2, r3
    8302:	781b      	ldrb	r3, [r3, #0]
    8304:	021b      	lsls	r3, r3, #8
    8306:	b21a      	sxth	r2, r3
    8308:	492c      	ldr	r1, [pc, #176]	; (83bc <cmp_lfn+0xf8>)
    830a:	693b      	ldr	r3, [r7, #16]
    830c:	18cb      	adds	r3, r1, r3
    830e:	781b      	ldrb	r3, [r3, #0]
    8310:	0019      	movs	r1, r3
    8312:	683b      	ldr	r3, [r7, #0]
    8314:	185b      	adds	r3, r3, r1
    8316:	781b      	ldrb	r3, [r3, #0]
    8318:	b21b      	sxth	r3, r3
    831a:	4313      	orrs	r3, r2
    831c:	b21a      	sxth	r2, r3
    831e:	230c      	movs	r3, #12
    8320:	18fb      	adds	r3, r7, r3
    8322:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    8324:	230e      	movs	r3, #14
    8326:	18fb      	adds	r3, r7, r3
    8328:	881b      	ldrh	r3, [r3, #0]
    832a:	2b00      	cmp	r3, #0
    832c:	d01f      	beq.n	836e <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    832e:	230e      	movs	r3, #14
    8330:	18fc      	adds	r4, r7, r3
    8332:	230c      	movs	r3, #12
    8334:	18fb      	adds	r3, r7, r3
    8336:	881b      	ldrh	r3, [r3, #0]
    8338:	0018      	movs	r0, r3
    833a:	4b21      	ldr	r3, [pc, #132]	; (83c0 <cmp_lfn+0xfc>)
    833c:	4798      	blx	r3
    833e:	0003      	movs	r3, r0
    8340:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    8342:	697b      	ldr	r3, [r7, #20]
    8344:	2bfe      	cmp	r3, #254	; 0xfe
    8346:	d810      	bhi.n	836a <cmp_lfn+0xa6>
    8348:	697b      	ldr	r3, [r7, #20]
    834a:	1c5a      	adds	r2, r3, #1
    834c:	617a      	str	r2, [r7, #20]
    834e:	005b      	lsls	r3, r3, #1
    8350:	687a      	ldr	r2, [r7, #4]
    8352:	18d3      	adds	r3, r2, r3
    8354:	881b      	ldrh	r3, [r3, #0]
    8356:	0018      	movs	r0, r3
    8358:	4b19      	ldr	r3, [pc, #100]	; (83c0 <cmp_lfn+0xfc>)
    835a:	4798      	blx	r3
    835c:	0003      	movs	r3, r0
    835e:	001a      	movs	r2, r3
    8360:	230e      	movs	r3, #14
    8362:	18fb      	adds	r3, r7, r3
    8364:	881b      	ldrh	r3, [r3, #0]
    8366:	4293      	cmp	r3, r2
    8368:	d009      	beq.n	837e <cmp_lfn+0xba>
				return 0;				/* Not matched */
    836a:	2300      	movs	r3, #0
    836c:	e022      	b.n	83b4 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    836e:	230c      	movs	r3, #12
    8370:	18fb      	adds	r3, r7, r3
    8372:	881b      	ldrh	r3, [r3, #0]
    8374:	4a13      	ldr	r2, [pc, #76]	; (83c4 <cmp_lfn+0x100>)
    8376:	4293      	cmp	r3, r2
    8378:	d001      	beq.n	837e <cmp_lfn+0xba>
    837a:	2300      	movs	r3, #0
    837c:	e01a      	b.n	83b4 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    837e:	693b      	ldr	r3, [r7, #16]
    8380:	3301      	adds	r3, #1
    8382:	613b      	str	r3, [r7, #16]
    8384:	693b      	ldr	r3, [r7, #16]
    8386:	2b0c      	cmp	r3, #12
    8388:	d9b4      	bls.n	82f4 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    838a:	683b      	ldr	r3, [r7, #0]
    838c:	781b      	ldrb	r3, [r3, #0]
    838e:	001a      	movs	r2, r3
    8390:	2340      	movs	r3, #64	; 0x40
    8392:	4013      	ands	r3, r2
    8394:	d00d      	beq.n	83b2 <cmp_lfn+0xee>
    8396:	230e      	movs	r3, #14
    8398:	18fb      	adds	r3, r7, r3
    839a:	881b      	ldrh	r3, [r3, #0]
    839c:	2b00      	cmp	r3, #0
    839e:	d008      	beq.n	83b2 <cmp_lfn+0xee>
    83a0:	697b      	ldr	r3, [r7, #20]
    83a2:	005b      	lsls	r3, r3, #1
    83a4:	687a      	ldr	r2, [r7, #4]
    83a6:	18d3      	adds	r3, r2, r3
    83a8:	881b      	ldrh	r3, [r3, #0]
    83aa:	2b00      	cmp	r3, #0
    83ac:	d001      	beq.n	83b2 <cmp_lfn+0xee>
		return 0;
    83ae:	2300      	movs	r3, #0
    83b0:	e000      	b.n	83b4 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    83b2:	2301      	movs	r3, #1
}
    83b4:	0018      	movs	r0, r3
    83b6:	46bd      	mov	sp, r7
    83b8:	b007      	add	sp, #28
    83ba:	bd90      	pop	{r4, r7, pc}
    83bc:	0000c3c0 	.word	0x0000c3c0
    83c0:	0000a6a1 	.word	0x0000a6a1
    83c4:	0000ffff 	.word	0x0000ffff

000083c8 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    83c8:	b580      	push	{r7, lr}
    83ca:	b088      	sub	sp, #32
    83cc:	af00      	add	r7, sp, #0
    83ce:	60f8      	str	r0, [r7, #12]
    83d0:	60b9      	str	r1, [r7, #8]
    83d2:	0019      	movs	r1, r3
    83d4:	1dfb      	adds	r3, r7, #7
    83d6:	701a      	strb	r2, [r3, #0]
    83d8:	1dbb      	adds	r3, r7, #6
    83da:	1c0a      	adds	r2, r1, #0
    83dc:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    83de:	68bb      	ldr	r3, [r7, #8]
    83e0:	330d      	adds	r3, #13
    83e2:	1dba      	adds	r2, r7, #6
    83e4:	7812      	ldrb	r2, [r2, #0]
    83e6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    83e8:	68bb      	ldr	r3, [r7, #8]
    83ea:	330b      	adds	r3, #11
    83ec:	220f      	movs	r2, #15
    83ee:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    83f0:	68bb      	ldr	r3, [r7, #8]
    83f2:	330c      	adds	r3, #12
    83f4:	2200      	movs	r2, #0
    83f6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    83f8:	68bb      	ldr	r3, [r7, #8]
    83fa:	331a      	adds	r3, #26
    83fc:	2200      	movs	r2, #0
    83fe:	701a      	strb	r2, [r3, #0]
    8400:	68bb      	ldr	r3, [r7, #8]
    8402:	331b      	adds	r3, #27
    8404:	2200      	movs	r2, #0
    8406:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    8408:	1dfb      	adds	r3, r7, #7
    840a:	781b      	ldrb	r3, [r3, #0]
    840c:	1e5a      	subs	r2, r3, #1
    840e:	0013      	movs	r3, r2
    8410:	005b      	lsls	r3, r3, #1
    8412:	189b      	adds	r3, r3, r2
    8414:	009b      	lsls	r3, r3, #2
    8416:	189b      	adds	r3, r3, r2
    8418:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    841a:	2316      	movs	r3, #22
    841c:	18fb      	adds	r3, r7, r3
    841e:	2200      	movs	r2, #0
    8420:	801a      	strh	r2, [r3, #0]
    8422:	2300      	movs	r3, #0
    8424:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    8426:	2316      	movs	r3, #22
    8428:	18fb      	adds	r3, r7, r3
    842a:	881b      	ldrh	r3, [r3, #0]
    842c:	4a28      	ldr	r2, [pc, #160]	; (84d0 <fit_lfn+0x108>)
    842e:	4293      	cmp	r3, r2
    8430:	d009      	beq.n	8446 <fit_lfn+0x7e>
    8432:	69fb      	ldr	r3, [r7, #28]
    8434:	1c5a      	adds	r2, r3, #1
    8436:	61fa      	str	r2, [r7, #28]
    8438:	005b      	lsls	r3, r3, #1
    843a:	68fa      	ldr	r2, [r7, #12]
    843c:	18d2      	adds	r2, r2, r3
    843e:	2316      	movs	r3, #22
    8440:	18fb      	adds	r3, r7, r3
    8442:	8812      	ldrh	r2, [r2, #0]
    8444:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    8446:	4a23      	ldr	r2, [pc, #140]	; (84d4 <fit_lfn+0x10c>)
    8448:	69bb      	ldr	r3, [r7, #24]
    844a:	18d3      	adds	r3, r2, r3
    844c:	781b      	ldrb	r3, [r3, #0]
    844e:	001a      	movs	r2, r3
    8450:	68bb      	ldr	r3, [r7, #8]
    8452:	189b      	adds	r3, r3, r2
    8454:	2216      	movs	r2, #22
    8456:	18ba      	adds	r2, r7, r2
    8458:	8812      	ldrh	r2, [r2, #0]
    845a:	b2d2      	uxtb	r2, r2
    845c:	701a      	strb	r2, [r3, #0]
    845e:	4a1d      	ldr	r2, [pc, #116]	; (84d4 <fit_lfn+0x10c>)
    8460:	69bb      	ldr	r3, [r7, #24]
    8462:	18d3      	adds	r3, r2, r3
    8464:	781b      	ldrb	r3, [r3, #0]
    8466:	3301      	adds	r3, #1
    8468:	68ba      	ldr	r2, [r7, #8]
    846a:	18d3      	adds	r3, r2, r3
    846c:	2216      	movs	r2, #22
    846e:	18ba      	adds	r2, r7, r2
    8470:	8812      	ldrh	r2, [r2, #0]
    8472:	0a12      	lsrs	r2, r2, #8
    8474:	b292      	uxth	r2, r2
    8476:	b2d2      	uxtb	r2, r2
    8478:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    847a:	2316      	movs	r3, #22
    847c:	18fb      	adds	r3, r7, r3
    847e:	881b      	ldrh	r3, [r3, #0]
    8480:	2b00      	cmp	r3, #0
    8482:	d104      	bne.n	848e <fit_lfn+0xc6>
    8484:	2316      	movs	r3, #22
    8486:	18fb      	adds	r3, r7, r3
    8488:	2201      	movs	r2, #1
    848a:	4252      	negs	r2, r2
    848c:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    848e:	69bb      	ldr	r3, [r7, #24]
    8490:	3301      	adds	r3, #1
    8492:	61bb      	str	r3, [r7, #24]
    8494:	69bb      	ldr	r3, [r7, #24]
    8496:	2b0c      	cmp	r3, #12
    8498:	d9c5      	bls.n	8426 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    849a:	2316      	movs	r3, #22
    849c:	18fb      	adds	r3, r7, r3
    849e:	881b      	ldrh	r3, [r3, #0]
    84a0:	4a0b      	ldr	r2, [pc, #44]	; (84d0 <fit_lfn+0x108>)
    84a2:	4293      	cmp	r3, r2
    84a4:	d006      	beq.n	84b4 <fit_lfn+0xec>
    84a6:	69fb      	ldr	r3, [r7, #28]
    84a8:	005b      	lsls	r3, r3, #1
    84aa:	68fa      	ldr	r2, [r7, #12]
    84ac:	18d3      	adds	r3, r2, r3
    84ae:	881b      	ldrh	r3, [r3, #0]
    84b0:	2b00      	cmp	r3, #0
    84b2:	d105      	bne.n	84c0 <fit_lfn+0xf8>
    84b4:	1dfb      	adds	r3, r7, #7
    84b6:	1dfa      	adds	r2, r7, #7
    84b8:	7812      	ldrb	r2, [r2, #0]
    84ba:	2140      	movs	r1, #64	; 0x40
    84bc:	430a      	orrs	r2, r1
    84be:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    84c0:	68bb      	ldr	r3, [r7, #8]
    84c2:	1dfa      	adds	r2, r7, #7
    84c4:	7812      	ldrb	r2, [r2, #0]
    84c6:	701a      	strb	r2, [r3, #0]
}
    84c8:	46c0      	nop			; (mov r8, r8)
    84ca:	46bd      	mov	sp, r7
    84cc:	b008      	add	sp, #32
    84ce:	bd80      	pop	{r7, pc}
    84d0:	0000ffff 	.word	0x0000ffff
    84d4:	0000c3c0 	.word	0x0000c3c0

000084d8 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    84d8:	b580      	push	{r7, lr}
    84da:	b08a      	sub	sp, #40	; 0x28
    84dc:	af00      	add	r7, sp, #0
    84de:	60f8      	str	r0, [r7, #12]
    84e0:	60b9      	str	r1, [r7, #8]
    84e2:	607a      	str	r2, [r7, #4]
    84e4:	001a      	movs	r2, r3
    84e6:	1cbb      	adds	r3, r7, #2
    84e8:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    84ea:	68b9      	ldr	r1, [r7, #8]
    84ec:	68fb      	ldr	r3, [r7, #12]
    84ee:	220b      	movs	r2, #11
    84f0:	0018      	movs	r0, r3
    84f2:	4b38      	ldr	r3, [pc, #224]	; (85d4 <gen_numname+0xfc>)
    84f4:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    84f6:	1cbb      	adds	r3, r7, #2
    84f8:	881b      	ldrh	r3, [r3, #0]
    84fa:	2b05      	cmp	r3, #5
    84fc:	d911      	bls.n	8522 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    84fe:	1cbb      	adds	r3, r7, #2
    8500:	881b      	ldrh	r3, [r3, #0]
    8502:	b29a      	uxth	r2, r3
    8504:	0852      	lsrs	r2, r2, #1
    8506:	03db      	lsls	r3, r3, #15
    8508:	4313      	orrs	r3, r2
    850a:	b299      	uxth	r1, r3
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	1c9a      	adds	r2, r3, #2
    8510:	607a      	str	r2, [r7, #4]
    8512:	881a      	ldrh	r2, [r3, #0]
    8514:	1cbb      	adds	r3, r7, #2
    8516:	188a      	adds	r2, r1, r2
    8518:	801a      	strh	r2, [r3, #0]
    851a:	687b      	ldr	r3, [r7, #4]
    851c:	881b      	ldrh	r3, [r3, #0]
    851e:	2b00      	cmp	r3, #0
    8520:	d1ed      	bne.n	84fe <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    8522:	2307      	movs	r3, #7
    8524:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    8526:	1cbb      	adds	r3, r7, #2
    8528:	881b      	ldrh	r3, [r3, #0]
    852a:	b2db      	uxtb	r3, r3
    852c:	220f      	movs	r2, #15
    852e:	4013      	ands	r3, r2
    8530:	b2da      	uxtb	r2, r3
    8532:	2327      	movs	r3, #39	; 0x27
    8534:	18fb      	adds	r3, r7, r3
    8536:	3230      	adds	r2, #48	; 0x30
    8538:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    853a:	2327      	movs	r3, #39	; 0x27
    853c:	18fb      	adds	r3, r7, r3
    853e:	781b      	ldrb	r3, [r3, #0]
    8540:	2b39      	cmp	r3, #57	; 0x39
    8542:	d906      	bls.n	8552 <gen_numname+0x7a>
    8544:	2327      	movs	r3, #39	; 0x27
    8546:	18fb      	adds	r3, r7, r3
    8548:	2227      	movs	r2, #39	; 0x27
    854a:	18ba      	adds	r2, r7, r2
    854c:	7812      	ldrb	r2, [r2, #0]
    854e:	3207      	adds	r2, #7
    8550:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    8552:	6a3b      	ldr	r3, [r7, #32]
    8554:	1e5a      	subs	r2, r3, #1
    8556:	623a      	str	r2, [r7, #32]
    8558:	2214      	movs	r2, #20
    855a:	18ba      	adds	r2, r7, r2
    855c:	2127      	movs	r1, #39	; 0x27
    855e:	1879      	adds	r1, r7, r1
    8560:	7809      	ldrb	r1, [r1, #0]
    8562:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    8564:	1cbb      	adds	r3, r7, #2
    8566:	1cba      	adds	r2, r7, #2
    8568:	8812      	ldrh	r2, [r2, #0]
    856a:	0912      	lsrs	r2, r2, #4
    856c:	801a      	strh	r2, [r3, #0]
	} while (seq);
    856e:	1cbb      	adds	r3, r7, #2
    8570:	881b      	ldrh	r3, [r3, #0]
    8572:	2b00      	cmp	r3, #0
    8574:	d1d7      	bne.n	8526 <gen_numname+0x4e>
	ns[i] = '~';
    8576:	2314      	movs	r3, #20
    8578:	18fa      	adds	r2, r7, r3
    857a:	6a3b      	ldr	r3, [r7, #32]
    857c:	18d3      	adds	r3, r2, r3
    857e:	227e      	movs	r2, #126	; 0x7e
    8580:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    8582:	2300      	movs	r3, #0
    8584:	61fb      	str	r3, [r7, #28]
    8586:	e002      	b.n	858e <gen_numname+0xb6>
    8588:	69fb      	ldr	r3, [r7, #28]
    858a:	3301      	adds	r3, #1
    858c:	61fb      	str	r3, [r7, #28]
    858e:	69fa      	ldr	r2, [r7, #28]
    8590:	6a3b      	ldr	r3, [r7, #32]
    8592:	429a      	cmp	r2, r3
    8594:	d205      	bcs.n	85a2 <gen_numname+0xca>
    8596:	68fa      	ldr	r2, [r7, #12]
    8598:	69fb      	ldr	r3, [r7, #28]
    859a:	18d3      	adds	r3, r2, r3
    859c:	781b      	ldrb	r3, [r3, #0]
    859e:	2b20      	cmp	r3, #32
    85a0:	d1f2      	bne.n	8588 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    85a2:	69fb      	ldr	r3, [r7, #28]
    85a4:	1c5a      	adds	r2, r3, #1
    85a6:	61fa      	str	r2, [r7, #28]
    85a8:	68fa      	ldr	r2, [r7, #12]
    85aa:	18d2      	adds	r2, r2, r3
    85ac:	6a3b      	ldr	r3, [r7, #32]
    85ae:	2b07      	cmp	r3, #7
    85b0:	d806      	bhi.n	85c0 <gen_numname+0xe8>
    85b2:	6a3b      	ldr	r3, [r7, #32]
    85b4:	1c59      	adds	r1, r3, #1
    85b6:	6239      	str	r1, [r7, #32]
    85b8:	2114      	movs	r1, #20
    85ba:	1879      	adds	r1, r7, r1
    85bc:	5ccb      	ldrb	r3, [r1, r3]
    85be:	e000      	b.n	85c2 <gen_numname+0xea>
    85c0:	2320      	movs	r3, #32
    85c2:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    85c4:	69fb      	ldr	r3, [r7, #28]
    85c6:	2b07      	cmp	r3, #7
    85c8:	d9eb      	bls.n	85a2 <gen_numname+0xca>
}
    85ca:	46c0      	nop			; (mov r8, r8)
    85cc:	46bd      	mov	sp, r7
    85ce:	b00a      	add	sp, #40	; 0x28
    85d0:	bd80      	pop	{r7, pc}
    85d2:	46c0      	nop			; (mov r8, r8)
    85d4:	0000767d 	.word	0x0000767d

000085d8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    85d8:	b580      	push	{r7, lr}
    85da:	b084      	sub	sp, #16
    85dc:	af00      	add	r7, sp, #0
    85de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    85e0:	230f      	movs	r3, #15
    85e2:	18fb      	adds	r3, r7, r3
    85e4:	2200      	movs	r2, #0
    85e6:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    85e8:	230b      	movs	r3, #11
    85ea:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    85ec:	230f      	movs	r3, #15
    85ee:	18fb      	adds	r3, r7, r3
    85f0:	781b      	ldrb	r3, [r3, #0]
    85f2:	b2da      	uxtb	r2, r3
    85f4:	0852      	lsrs	r2, r2, #1
    85f6:	01db      	lsls	r3, r3, #7
    85f8:	4313      	orrs	r3, r2
    85fa:	b2d9      	uxtb	r1, r3
    85fc:	687b      	ldr	r3, [r7, #4]
    85fe:	1c5a      	adds	r2, r3, #1
    8600:	607a      	str	r2, [r7, #4]
    8602:	781a      	ldrb	r2, [r3, #0]
    8604:	230f      	movs	r3, #15
    8606:	18fb      	adds	r3, r7, r3
    8608:	188a      	adds	r2, r1, r2
    860a:	701a      	strb	r2, [r3, #0]
    860c:	68bb      	ldr	r3, [r7, #8]
    860e:	3b01      	subs	r3, #1
    8610:	60bb      	str	r3, [r7, #8]
    8612:	68bb      	ldr	r3, [r7, #8]
    8614:	2b00      	cmp	r3, #0
    8616:	d1e9      	bne.n	85ec <sum_sfn+0x14>
	return sum;
    8618:	230f      	movs	r3, #15
    861a:	18fb      	adds	r3, r7, r3
    861c:	781b      	ldrb	r3, [r3, #0]
}
    861e:	0018      	movs	r0, r3
    8620:	46bd      	mov	sp, r7
    8622:	b004      	add	sp, #16
    8624:	bd80      	pop	{r7, pc}
	...

00008628 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    8628:	b590      	push	{r4, r7, lr}
    862a:	b087      	sub	sp, #28
    862c:	af00      	add	r7, sp, #0
    862e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    8630:	2317      	movs	r3, #23
    8632:	18fc      	adds	r4, r7, r3
    8634:	687b      	ldr	r3, [r7, #4]
    8636:	2100      	movs	r1, #0
    8638:	0018      	movs	r0, r3
    863a:	4b74      	ldr	r3, [pc, #464]	; (880c <dir_find+0x1e4>)
    863c:	4798      	blx	r3
    863e:	0003      	movs	r3, r0
    8640:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8642:	2317      	movs	r3, #23
    8644:	18fb      	adds	r3, r7, r3
    8646:	781b      	ldrb	r3, [r3, #0]
    8648:	2b00      	cmp	r3, #0
    864a:	d003      	beq.n	8654 <dir_find+0x2c>
    864c:	2317      	movs	r3, #23
    864e:	18fb      	adds	r3, r7, r3
    8650:	781b      	ldrb	r3, [r3, #0]
    8652:	e0d6      	b.n	8802 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    8654:	2314      	movs	r3, #20
    8656:	18fb      	adds	r3, r7, r3
    8658:	22ff      	movs	r2, #255	; 0xff
    865a:	701a      	strb	r2, [r3, #0]
    865c:	2315      	movs	r3, #21
    865e:	18fb      	adds	r3, r7, r3
    8660:	2214      	movs	r2, #20
    8662:	18ba      	adds	r2, r7, r2
    8664:	7812      	ldrb	r2, [r2, #0]
    8666:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8668:	687b      	ldr	r3, [r7, #4]
    866a:	681a      	ldr	r2, [r3, #0]
    866c:	687b      	ldr	r3, [r7, #4]
    866e:	691b      	ldr	r3, [r3, #16]
    8670:	2117      	movs	r1, #23
    8672:	187c      	adds	r4, r7, r1
    8674:	0019      	movs	r1, r3
    8676:	0010      	movs	r0, r2
    8678:	4b65      	ldr	r3, [pc, #404]	; (8810 <dir_find+0x1e8>)
    867a:	4798      	blx	r3
    867c:	0003      	movs	r3, r0
    867e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8680:	2317      	movs	r3, #23
    8682:	18fb      	adds	r3, r7, r3
    8684:	781b      	ldrb	r3, [r3, #0]
    8686:	2b00      	cmp	r3, #0
    8688:	d000      	beq.n	868c <dir_find+0x64>
    868a:	e0b2      	b.n	87f2 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	695b      	ldr	r3, [r3, #20]
    8690:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    8692:	2316      	movs	r3, #22
    8694:	18fb      	adds	r3, r7, r3
    8696:	693a      	ldr	r2, [r7, #16]
    8698:	7812      	ldrb	r2, [r2, #0]
    869a:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    869c:	2316      	movs	r3, #22
    869e:	18fb      	adds	r3, r7, r3
    86a0:	781b      	ldrb	r3, [r3, #0]
    86a2:	2b00      	cmp	r3, #0
    86a4:	d104      	bne.n	86b0 <dir_find+0x88>
    86a6:	2317      	movs	r3, #23
    86a8:	18fb      	adds	r3, r7, r3
    86aa:	2204      	movs	r2, #4
    86ac:	701a      	strb	r2, [r3, #0]
    86ae:	e0a5      	b.n	87fc <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    86b0:	693b      	ldr	r3, [r7, #16]
    86b2:	330b      	adds	r3, #11
    86b4:	781a      	ldrb	r2, [r3, #0]
    86b6:	230f      	movs	r3, #15
    86b8:	18fb      	adds	r3, r7, r3
    86ba:	213f      	movs	r1, #63	; 0x3f
    86bc:	400a      	ands	r2, r1
    86be:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    86c0:	2316      	movs	r3, #22
    86c2:	18fb      	adds	r3, r7, r3
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	2be5      	cmp	r3, #229	; 0xe5
    86c8:	d00a      	beq.n	86e0 <dir_find+0xb8>
    86ca:	230f      	movs	r3, #15
    86cc:	18fb      	adds	r3, r7, r3
    86ce:	781b      	ldrb	r3, [r3, #0]
    86d0:	2208      	movs	r2, #8
    86d2:	4013      	ands	r3, r2
    86d4:	d009      	beq.n	86ea <dir_find+0xc2>
    86d6:	230f      	movs	r3, #15
    86d8:	18fb      	adds	r3, r7, r3
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	2b0f      	cmp	r3, #15
    86de:	d004      	beq.n	86ea <dir_find+0xc2>
			ord = 0xFF;
    86e0:	2315      	movs	r3, #21
    86e2:	18fb      	adds	r3, r7, r3
    86e4:	22ff      	movs	r2, #255	; 0xff
    86e6:	701a      	strb	r2, [r3, #0]
    86e8:	e073      	b.n	87d2 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    86ea:	230f      	movs	r3, #15
    86ec:	18fb      	adds	r3, r7, r3
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	2b0f      	cmp	r3, #15
    86f2:	d145      	bne.n	8780 <dir_find+0x158>
				if (dj->lfn) {
    86f4:	687b      	ldr	r3, [r7, #4]
    86f6:	69db      	ldr	r3, [r3, #28]
    86f8:	2b00      	cmp	r3, #0
    86fa:	d100      	bne.n	86fe <dir_find+0xd6>
    86fc:	e069      	b.n	87d2 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    86fe:	2316      	movs	r3, #22
    8700:	18fb      	adds	r3, r7, r3
    8702:	781b      	ldrb	r3, [r3, #0]
    8704:	2240      	movs	r2, #64	; 0x40
    8706:	4013      	ands	r3, r2
    8708:	d016      	beq.n	8738 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    870a:	2314      	movs	r3, #20
    870c:	18fb      	adds	r3, r7, r3
    870e:	693a      	ldr	r2, [r7, #16]
    8710:	7b52      	ldrb	r2, [r2, #13]
    8712:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    8714:	2316      	movs	r3, #22
    8716:	18fb      	adds	r3, r7, r3
    8718:	2216      	movs	r2, #22
    871a:	18ba      	adds	r2, r7, r2
    871c:	7812      	ldrb	r2, [r2, #0]
    871e:	2140      	movs	r1, #64	; 0x40
    8720:	438a      	bics	r2, r1
    8722:	701a      	strb	r2, [r3, #0]
    8724:	2315      	movs	r3, #21
    8726:	18fb      	adds	r3, r7, r3
    8728:	2216      	movs	r2, #22
    872a:	18ba      	adds	r2, r7, r2
    872c:	7812      	ldrb	r2, [r2, #0]
    872e:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	88da      	ldrh	r2, [r3, #6]
    8734:	687b      	ldr	r3, [r7, #4]
    8736:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8738:	2316      	movs	r3, #22
    873a:	18fa      	adds	r2, r7, r3
    873c:	2315      	movs	r3, #21
    873e:	18fb      	adds	r3, r7, r3
    8740:	7812      	ldrb	r2, [r2, #0]
    8742:	781b      	ldrb	r3, [r3, #0]
    8744:	429a      	cmp	r2, r3
    8746:	d116      	bne.n	8776 <dir_find+0x14e>
    8748:	693b      	ldr	r3, [r7, #16]
    874a:	330d      	adds	r3, #13
    874c:	781b      	ldrb	r3, [r3, #0]
    874e:	2214      	movs	r2, #20
    8750:	18ba      	adds	r2, r7, r2
    8752:	7812      	ldrb	r2, [r2, #0]
    8754:	429a      	cmp	r2, r3
    8756:	d10e      	bne.n	8776 <dir_find+0x14e>
    8758:	687b      	ldr	r3, [r7, #4]
    875a:	69db      	ldr	r3, [r3, #28]
    875c:	693a      	ldr	r2, [r7, #16]
    875e:	0011      	movs	r1, r2
    8760:	0018      	movs	r0, r3
    8762:	4b2c      	ldr	r3, [pc, #176]	; (8814 <dir_find+0x1ec>)
    8764:	4798      	blx	r3
    8766:	1e03      	subs	r3, r0, #0
    8768:	d005      	beq.n	8776 <dir_find+0x14e>
    876a:	2315      	movs	r3, #21
    876c:	18fb      	adds	r3, r7, r3
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	3b01      	subs	r3, #1
    8772:	b2da      	uxtb	r2, r3
    8774:	e000      	b.n	8778 <dir_find+0x150>
    8776:	22ff      	movs	r2, #255	; 0xff
    8778:	2315      	movs	r3, #21
    877a:	18fb      	adds	r3, r7, r3
    877c:	701a      	strb	r2, [r3, #0]
    877e:	e028      	b.n	87d2 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    8780:	2315      	movs	r3, #21
    8782:	18fb      	adds	r3, r7, r3
    8784:	781b      	ldrb	r3, [r3, #0]
    8786:	2b00      	cmp	r3, #0
    8788:	d10a      	bne.n	87a0 <dir_find+0x178>
    878a:	693b      	ldr	r3, [r7, #16]
    878c:	0018      	movs	r0, r3
    878e:	4b22      	ldr	r3, [pc, #136]	; (8818 <dir_find+0x1f0>)
    8790:	4798      	blx	r3
    8792:	0003      	movs	r3, r0
    8794:	001a      	movs	r2, r3
    8796:	2314      	movs	r3, #20
    8798:	18fb      	adds	r3, r7, r3
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	4293      	cmp	r3, r2
    879e:	d02a      	beq.n	87f6 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    87a0:	2315      	movs	r3, #21
    87a2:	18fb      	adds	r3, r7, r3
    87a4:	22ff      	movs	r2, #255	; 0xff
    87a6:	701a      	strb	r2, [r3, #0]
    87a8:	687b      	ldr	r3, [r7, #4]
    87aa:	2201      	movs	r2, #1
    87ac:	4252      	negs	r2, r2
    87ae:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    87b0:	687b      	ldr	r3, [r7, #4]
    87b2:	699b      	ldr	r3, [r3, #24]
    87b4:	330b      	adds	r3, #11
    87b6:	781b      	ldrb	r3, [r3, #0]
    87b8:	001a      	movs	r2, r3
    87ba:	2301      	movs	r3, #1
    87bc:	4013      	ands	r3, r2
    87be:	d108      	bne.n	87d2 <dir_find+0x1aa>
    87c0:	687b      	ldr	r3, [r7, #4]
    87c2:	6999      	ldr	r1, [r3, #24]
    87c4:	693b      	ldr	r3, [r7, #16]
    87c6:	220b      	movs	r2, #11
    87c8:	0018      	movs	r0, r3
    87ca:	4b14      	ldr	r3, [pc, #80]	; (881c <dir_find+0x1f4>)
    87cc:	4798      	blx	r3
    87ce:	1e03      	subs	r3, r0, #0
    87d0:	d013      	beq.n	87fa <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    87d2:	2317      	movs	r3, #23
    87d4:	18fc      	adds	r4, r7, r3
    87d6:	687b      	ldr	r3, [r7, #4]
    87d8:	2100      	movs	r1, #0
    87da:	0018      	movs	r0, r3
    87dc:	4b10      	ldr	r3, [pc, #64]	; (8820 <dir_find+0x1f8>)
    87de:	4798      	blx	r3
    87e0:	0003      	movs	r3, r0
    87e2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    87e4:	2317      	movs	r3, #23
    87e6:	18fb      	adds	r3, r7, r3
    87e8:	781b      	ldrb	r3, [r3, #0]
    87ea:	2b00      	cmp	r3, #0
    87ec:	d100      	bne.n	87f0 <dir_find+0x1c8>
    87ee:	e73b      	b.n	8668 <dir_find+0x40>
    87f0:	e004      	b.n	87fc <dir_find+0x1d4>
		if (res != FR_OK) break;
    87f2:	46c0      	nop			; (mov r8, r8)
    87f4:	e002      	b.n	87fc <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    87f6:	46c0      	nop			; (mov r8, r8)
    87f8:	e000      	b.n	87fc <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    87fa:	46c0      	nop			; (mov r8, r8)

	return res;
    87fc:	2317      	movs	r3, #23
    87fe:	18fb      	adds	r3, r7, r3
    8800:	781b      	ldrb	r3, [r3, #0]
}
    8802:	0018      	movs	r0, r3
    8804:	46bd      	mov	sp, r7
    8806:	b007      	add	sp, #28
    8808:	bd90      	pop	{r4, r7, pc}
    880a:	46c0      	nop			; (mov r8, r8)
    880c:	00007fa5 	.word	0x00007fa5
    8810:	00007761 	.word	0x00007761
    8814:	000082c5 	.word	0x000082c5
    8818:	000085d9 	.word	0x000085d9
    881c:	000076e5 	.word	0x000076e5
    8820:	000080d5 	.word	0x000080d5

00008824 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8824:	b590      	push	{r4, r7, lr}
    8826:	b08d      	sub	sp, #52	; 0x34
    8828:	af00      	add	r7, sp, #0
    882a:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    882c:	687b      	ldr	r3, [r7, #4]
    882e:	699b      	ldr	r3, [r3, #24]
    8830:	627b      	str	r3, [r7, #36]	; 0x24
    8832:	687b      	ldr	r3, [r7, #4]
    8834:	69db      	ldr	r3, [r3, #28]
    8836:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    8838:	6a79      	ldr	r1, [r7, #36]	; 0x24
    883a:	230c      	movs	r3, #12
    883c:	18fb      	adds	r3, r7, r3
    883e:	220c      	movs	r2, #12
    8840:	0018      	movs	r0, r3
    8842:	4bc8      	ldr	r3, [pc, #800]	; (8b64 <dir_register+0x340>)
    8844:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    8846:	230c      	movs	r3, #12
    8848:	18fb      	adds	r3, r7, r3
    884a:	7adb      	ldrb	r3, [r3, #11]
    884c:	001a      	movs	r2, r3
    884e:	2301      	movs	r3, #1
    8850:	4013      	ands	r3, r2
    8852:	d048      	beq.n	88e6 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    8854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8856:	330b      	adds	r3, #11
    8858:	2200      	movs	r2, #0
    885a:	701a      	strb	r2, [r3, #0]
    885c:	687b      	ldr	r3, [r7, #4]
    885e:	2200      	movs	r2, #0
    8860:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    8862:	232c      	movs	r3, #44	; 0x2c
    8864:	18fb      	adds	r3, r7, r3
    8866:	2201      	movs	r2, #1
    8868:	801a      	strh	r2, [r3, #0]
    886a:	e01c      	b.n	88a6 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    886c:	232c      	movs	r3, #44	; 0x2c
    886e:	18fb      	adds	r3, r7, r3
    8870:	881b      	ldrh	r3, [r3, #0]
    8872:	6a3a      	ldr	r2, [r7, #32]
    8874:	210c      	movs	r1, #12
    8876:	1879      	adds	r1, r7, r1
    8878:	6a78      	ldr	r0, [r7, #36]	; 0x24
    887a:	4cbb      	ldr	r4, [pc, #748]	; (8b68 <dir_register+0x344>)
    887c:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    887e:	232f      	movs	r3, #47	; 0x2f
    8880:	18fc      	adds	r4, r7, r3
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	0018      	movs	r0, r3
    8886:	4bb9      	ldr	r3, [pc, #740]	; (8b6c <dir_register+0x348>)
    8888:	4798      	blx	r3
    888a:	0003      	movs	r3, r0
    888c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    888e:	232f      	movs	r3, #47	; 0x2f
    8890:	18fb      	adds	r3, r7, r3
    8892:	781b      	ldrb	r3, [r3, #0]
    8894:	2b00      	cmp	r3, #0
    8896:	d10c      	bne.n	88b2 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    8898:	232c      	movs	r3, #44	; 0x2c
    889a:	18fb      	adds	r3, r7, r3
    889c:	881a      	ldrh	r2, [r3, #0]
    889e:	232c      	movs	r3, #44	; 0x2c
    88a0:	18fb      	adds	r3, r7, r3
    88a2:	3201      	adds	r2, #1
    88a4:	801a      	strh	r2, [r3, #0]
    88a6:	232c      	movs	r3, #44	; 0x2c
    88a8:	18fb      	adds	r3, r7, r3
    88aa:	881b      	ldrh	r3, [r3, #0]
    88ac:	2b63      	cmp	r3, #99	; 0x63
    88ae:	d9dd      	bls.n	886c <dir_register+0x48>
    88b0:	e000      	b.n	88b4 <dir_register+0x90>
			if (res != FR_OK) break;
    88b2:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    88b4:	232c      	movs	r3, #44	; 0x2c
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	881b      	ldrh	r3, [r3, #0]
    88ba:	2b64      	cmp	r3, #100	; 0x64
    88bc:	d101      	bne.n	88c2 <dir_register+0x9e>
    88be:	2307      	movs	r3, #7
    88c0:	e14c      	b.n	8b5c <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    88c2:	232f      	movs	r3, #47	; 0x2f
    88c4:	18fb      	adds	r3, r7, r3
    88c6:	781b      	ldrb	r3, [r3, #0]
    88c8:	2b04      	cmp	r3, #4
    88ca:	d003      	beq.n	88d4 <dir_register+0xb0>
    88cc:	232f      	movs	r3, #47	; 0x2f
    88ce:	18fb      	adds	r3, r7, r3
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	e143      	b.n	8b5c <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    88d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88d6:	330b      	adds	r3, #11
    88d8:	220c      	movs	r2, #12
    88da:	18ba      	adds	r2, r7, r2
    88dc:	7ad2      	ldrb	r2, [r2, #11]
    88de:	701a      	strb	r2, [r3, #0]
    88e0:	687b      	ldr	r3, [r7, #4]
    88e2:	6a3a      	ldr	r2, [r7, #32]
    88e4:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    88e6:	230c      	movs	r3, #12
    88e8:	18fb      	adds	r3, r7, r3
    88ea:	7adb      	ldrb	r3, [r3, #11]
    88ec:	001a      	movs	r2, r3
    88ee:	2302      	movs	r3, #2
    88f0:	4013      	ands	r3, r2
    88f2:	d023      	beq.n	893c <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    88f4:	232a      	movs	r3, #42	; 0x2a
    88f6:	18fb      	adds	r3, r7, r3
    88f8:	2200      	movs	r2, #0
    88fa:	801a      	strh	r2, [r3, #0]
    88fc:	e006      	b.n	890c <dir_register+0xe8>
    88fe:	232a      	movs	r3, #42	; 0x2a
    8900:	18fb      	adds	r3, r7, r3
    8902:	881a      	ldrh	r2, [r3, #0]
    8904:	232a      	movs	r3, #42	; 0x2a
    8906:	18fb      	adds	r3, r7, r3
    8908:	3201      	adds	r2, #1
    890a:	801a      	strh	r2, [r3, #0]
    890c:	232a      	movs	r3, #42	; 0x2a
    890e:	18fb      	adds	r3, r7, r3
    8910:	881b      	ldrh	r3, [r3, #0]
    8912:	005b      	lsls	r3, r3, #1
    8914:	6a3a      	ldr	r2, [r7, #32]
    8916:	18d3      	adds	r3, r2, r3
    8918:	881b      	ldrh	r3, [r3, #0]
    891a:	2b00      	cmp	r3, #0
    891c:	d1ef      	bne.n	88fe <dir_register+0xda>
		ne = (ne + 25) / 13;
    891e:	232a      	movs	r3, #42	; 0x2a
    8920:	18fb      	adds	r3, r7, r3
    8922:	881b      	ldrh	r3, [r3, #0]
    8924:	3319      	adds	r3, #25
    8926:	001a      	movs	r2, r3
    8928:	4b91      	ldr	r3, [pc, #580]	; (8b70 <dir_register+0x34c>)
    892a:	210d      	movs	r1, #13
    892c:	0010      	movs	r0, r2
    892e:	4798      	blx	r3
    8930:	0003      	movs	r3, r0
    8932:	001a      	movs	r2, r3
    8934:	232a      	movs	r3, #42	; 0x2a
    8936:	18fb      	adds	r3, r7, r3
    8938:	801a      	strh	r2, [r3, #0]
    893a:	e003      	b.n	8944 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    893c:	232a      	movs	r3, #42	; 0x2a
    893e:	18fb      	adds	r3, r7, r3
    8940:	2201      	movs	r2, #1
    8942:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8944:	232f      	movs	r3, #47	; 0x2f
    8946:	18fc      	adds	r4, r7, r3
    8948:	687b      	ldr	r3, [r7, #4]
    894a:	2100      	movs	r1, #0
    894c:	0018      	movs	r0, r3
    894e:	4b89      	ldr	r3, [pc, #548]	; (8b74 <dir_register+0x350>)
    8950:	4798      	blx	r3
    8952:	0003      	movs	r3, r0
    8954:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8956:	232f      	movs	r3, #47	; 0x2f
    8958:	18fb      	adds	r3, r7, r3
    895a:	781b      	ldrb	r3, [r3, #0]
    895c:	2b00      	cmp	r3, #0
    895e:	d003      	beq.n	8968 <dir_register+0x144>
    8960:	232f      	movs	r3, #47	; 0x2f
    8962:	18fb      	adds	r3, r7, r3
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	e0f9      	b.n	8b5c <dir_register+0x338>
	n = is = 0;
    8968:	2328      	movs	r3, #40	; 0x28
    896a:	18fb      	adds	r3, r7, r3
    896c:	2200      	movs	r2, #0
    896e:	801a      	strh	r2, [r3, #0]
    8970:	232c      	movs	r3, #44	; 0x2c
    8972:	18fb      	adds	r3, r7, r3
    8974:	2228      	movs	r2, #40	; 0x28
    8976:	18ba      	adds	r2, r7, r2
    8978:	8812      	ldrh	r2, [r2, #0]
    897a:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    897c:	687b      	ldr	r3, [r7, #4]
    897e:	681a      	ldr	r2, [r3, #0]
    8980:	687b      	ldr	r3, [r7, #4]
    8982:	691b      	ldr	r3, [r3, #16]
    8984:	212f      	movs	r1, #47	; 0x2f
    8986:	187c      	adds	r4, r7, r1
    8988:	0019      	movs	r1, r3
    898a:	0010      	movs	r0, r2
    898c:	4b7a      	ldr	r3, [pc, #488]	; (8b78 <dir_register+0x354>)
    898e:	4798      	blx	r3
    8990:	0003      	movs	r3, r0
    8992:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8994:	232f      	movs	r3, #47	; 0x2f
    8996:	18fb      	adds	r3, r7, r3
    8998:	781b      	ldrb	r3, [r3, #0]
    899a:	2b00      	cmp	r3, #0
    899c:	d13c      	bne.n	8a18 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    899e:	687b      	ldr	r3, [r7, #4]
    89a0:	695a      	ldr	r2, [r3, #20]
    89a2:	231f      	movs	r3, #31
    89a4:	18fb      	adds	r3, r7, r3
    89a6:	7812      	ldrb	r2, [r2, #0]
    89a8:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    89aa:	231f      	movs	r3, #31
    89ac:	18fb      	adds	r3, r7, r3
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	2be5      	cmp	r3, #229	; 0xe5
    89b2:	d004      	beq.n	89be <dir_register+0x19a>
    89b4:	231f      	movs	r3, #31
    89b6:	18fb      	adds	r3, r7, r3
    89b8:	781b      	ldrb	r3, [r3, #0]
    89ba:	2b00      	cmp	r3, #0
    89bc:	d119      	bne.n	89f2 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    89be:	232c      	movs	r3, #44	; 0x2c
    89c0:	18fb      	adds	r3, r7, r3
    89c2:	881b      	ldrh	r3, [r3, #0]
    89c4:	2b00      	cmp	r3, #0
    89c6:	d104      	bne.n	89d2 <dir_register+0x1ae>
    89c8:	2328      	movs	r3, #40	; 0x28
    89ca:	18fb      	adds	r3, r7, r3
    89cc:	687a      	ldr	r2, [r7, #4]
    89ce:	88d2      	ldrh	r2, [r2, #6]
    89d0:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    89d2:	232c      	movs	r3, #44	; 0x2c
    89d4:	18fb      	adds	r3, r7, r3
    89d6:	222c      	movs	r2, #44	; 0x2c
    89d8:	18ba      	adds	r2, r7, r2
    89da:	8812      	ldrh	r2, [r2, #0]
    89dc:	3201      	adds	r2, #1
    89de:	801a      	strh	r2, [r3, #0]
    89e0:	232c      	movs	r3, #44	; 0x2c
    89e2:	18fa      	adds	r2, r7, r3
    89e4:	232a      	movs	r3, #42	; 0x2a
    89e6:	18fb      	adds	r3, r7, r3
    89e8:	8812      	ldrh	r2, [r2, #0]
    89ea:	881b      	ldrh	r3, [r3, #0]
    89ec:	429a      	cmp	r2, r3
    89ee:	d104      	bne.n	89fa <dir_register+0x1d6>
    89f0:	e013      	b.n	8a1a <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    89f2:	232c      	movs	r3, #44	; 0x2c
    89f4:	18fb      	adds	r3, r7, r3
    89f6:	2200      	movs	r2, #0
    89f8:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    89fa:	232f      	movs	r3, #47	; 0x2f
    89fc:	18fc      	adds	r4, r7, r3
    89fe:	687b      	ldr	r3, [r7, #4]
    8a00:	2101      	movs	r1, #1
    8a02:	0018      	movs	r0, r3
    8a04:	4b5d      	ldr	r3, [pc, #372]	; (8b7c <dir_register+0x358>)
    8a06:	4798      	blx	r3
    8a08:	0003      	movs	r3, r0
    8a0a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8a0c:	232f      	movs	r3, #47	; 0x2f
    8a0e:	18fb      	adds	r3, r7, r3
    8a10:	781b      	ldrb	r3, [r3, #0]
    8a12:	2b00      	cmp	r3, #0
    8a14:	d0b2      	beq.n	897c <dir_register+0x158>
    8a16:	e000      	b.n	8a1a <dir_register+0x1f6>
		if (res != FR_OK) break;
    8a18:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8a1a:	232f      	movs	r3, #47	; 0x2f
    8a1c:	18fb      	adds	r3, r7, r3
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	2b00      	cmp	r3, #0
    8a22:	d163      	bne.n	8aec <dir_register+0x2c8>
    8a24:	232a      	movs	r3, #42	; 0x2a
    8a26:	18fb      	adds	r3, r7, r3
    8a28:	881b      	ldrh	r3, [r3, #0]
    8a2a:	2b01      	cmp	r3, #1
    8a2c:	d95e      	bls.n	8aec <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    8a2e:	232f      	movs	r3, #47	; 0x2f
    8a30:	18fc      	adds	r4, r7, r3
    8a32:	2328      	movs	r3, #40	; 0x28
    8a34:	18fb      	adds	r3, r7, r3
    8a36:	881a      	ldrh	r2, [r3, #0]
    8a38:	687b      	ldr	r3, [r7, #4]
    8a3a:	0011      	movs	r1, r2
    8a3c:	0018      	movs	r0, r3
    8a3e:	4b4d      	ldr	r3, [pc, #308]	; (8b74 <dir_register+0x350>)
    8a40:	4798      	blx	r3
    8a42:	0003      	movs	r3, r0
    8a44:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8a46:	232f      	movs	r3, #47	; 0x2f
    8a48:	18fb      	adds	r3, r7, r3
    8a4a:	781b      	ldrb	r3, [r3, #0]
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d14d      	bne.n	8aec <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8a50:	687b      	ldr	r3, [r7, #4]
    8a52:	699b      	ldr	r3, [r3, #24]
    8a54:	221e      	movs	r2, #30
    8a56:	18bc      	adds	r4, r7, r2
    8a58:	0018      	movs	r0, r3
    8a5a:	4b49      	ldr	r3, [pc, #292]	; (8b80 <dir_register+0x35c>)
    8a5c:	4798      	blx	r3
    8a5e:	0003      	movs	r3, r0
    8a60:	7023      	strb	r3, [r4, #0]
			ne--;
    8a62:	232a      	movs	r3, #42	; 0x2a
    8a64:	18fb      	adds	r3, r7, r3
    8a66:	881a      	ldrh	r2, [r3, #0]
    8a68:	232a      	movs	r3, #42	; 0x2a
    8a6a:	18fb      	adds	r3, r7, r3
    8a6c:	3a01      	subs	r2, #1
    8a6e:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8a70:	687b      	ldr	r3, [r7, #4]
    8a72:	681a      	ldr	r2, [r3, #0]
    8a74:	687b      	ldr	r3, [r7, #4]
    8a76:	691b      	ldr	r3, [r3, #16]
    8a78:	212f      	movs	r1, #47	; 0x2f
    8a7a:	187c      	adds	r4, r7, r1
    8a7c:	0019      	movs	r1, r3
    8a7e:	0010      	movs	r0, r2
    8a80:	4b3d      	ldr	r3, [pc, #244]	; (8b78 <dir_register+0x354>)
    8a82:	4798      	blx	r3
    8a84:	0003      	movs	r3, r0
    8a86:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    8a88:	232f      	movs	r3, #47	; 0x2f
    8a8a:	18fb      	adds	r3, r7, r3
    8a8c:	781b      	ldrb	r3, [r3, #0]
    8a8e:	2b00      	cmp	r3, #0
    8a90:	d12b      	bne.n	8aea <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    8a92:	687b      	ldr	r3, [r7, #4]
    8a94:	69d8      	ldr	r0, [r3, #28]
    8a96:	687b      	ldr	r3, [r7, #4]
    8a98:	6959      	ldr	r1, [r3, #20]
    8a9a:	232a      	movs	r3, #42	; 0x2a
    8a9c:	18fb      	adds	r3, r7, r3
    8a9e:	881b      	ldrh	r3, [r3, #0]
    8aa0:	b2da      	uxtb	r2, r3
    8aa2:	231e      	movs	r3, #30
    8aa4:	18fb      	adds	r3, r7, r3
    8aa6:	781b      	ldrb	r3, [r3, #0]
    8aa8:	4c36      	ldr	r4, [pc, #216]	; (8b84 <dir_register+0x360>)
    8aaa:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8aac:	687b      	ldr	r3, [r7, #4]
    8aae:	681b      	ldr	r3, [r3, #0]
    8ab0:	2201      	movs	r2, #1
    8ab2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8ab4:	232f      	movs	r3, #47	; 0x2f
    8ab6:	18fc      	adds	r4, r7, r3
    8ab8:	687b      	ldr	r3, [r7, #4]
    8aba:	2100      	movs	r1, #0
    8abc:	0018      	movs	r0, r3
    8abe:	4b2f      	ldr	r3, [pc, #188]	; (8b7c <dir_register+0x358>)
    8ac0:	4798      	blx	r3
    8ac2:	0003      	movs	r3, r0
    8ac4:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8ac6:	232f      	movs	r3, #47	; 0x2f
    8ac8:	18fb      	adds	r3, r7, r3
    8aca:	781b      	ldrb	r3, [r3, #0]
    8acc:	2b00      	cmp	r3, #0
    8ace:	d10d      	bne.n	8aec <dir_register+0x2c8>
    8ad0:	232a      	movs	r3, #42	; 0x2a
    8ad2:	18fb      	adds	r3, r7, r3
    8ad4:	222a      	movs	r2, #42	; 0x2a
    8ad6:	18ba      	adds	r2, r7, r2
    8ad8:	8812      	ldrh	r2, [r2, #0]
    8ada:	3a01      	subs	r2, #1
    8adc:	801a      	strh	r2, [r3, #0]
    8ade:	232a      	movs	r3, #42	; 0x2a
    8ae0:	18fb      	adds	r3, r7, r3
    8ae2:	881b      	ldrh	r3, [r3, #0]
    8ae4:	2b00      	cmp	r3, #0
    8ae6:	d1c3      	bne.n	8a70 <dir_register+0x24c>
    8ae8:	e000      	b.n	8aec <dir_register+0x2c8>
				if (res != FR_OK) break;
    8aea:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8aec:	232f      	movs	r3, #47	; 0x2f
    8aee:	18fb      	adds	r3, r7, r3
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	2b00      	cmp	r3, #0
    8af4:	d12f      	bne.n	8b56 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8af6:	687b      	ldr	r3, [r7, #4]
    8af8:	681a      	ldr	r2, [r3, #0]
    8afa:	687b      	ldr	r3, [r7, #4]
    8afc:	691b      	ldr	r3, [r3, #16]
    8afe:	212f      	movs	r1, #47	; 0x2f
    8b00:	187c      	adds	r4, r7, r1
    8b02:	0019      	movs	r1, r3
    8b04:	0010      	movs	r0, r2
    8b06:	4b1c      	ldr	r3, [pc, #112]	; (8b78 <dir_register+0x354>)
    8b08:	4798      	blx	r3
    8b0a:	0003      	movs	r3, r0
    8b0c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8b0e:	232f      	movs	r3, #47	; 0x2f
    8b10:	18fb      	adds	r3, r7, r3
    8b12:	781b      	ldrb	r3, [r3, #0]
    8b14:	2b00      	cmp	r3, #0
    8b16:	d11e      	bne.n	8b56 <dir_register+0x332>
			dir = dj->dir;
    8b18:	687b      	ldr	r3, [r7, #4]
    8b1a:	695b      	ldr	r3, [r3, #20]
    8b1c:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    8b1e:	69bb      	ldr	r3, [r7, #24]
    8b20:	2220      	movs	r2, #32
    8b22:	2100      	movs	r1, #0
    8b24:	0018      	movs	r0, r3
    8b26:	4b18      	ldr	r3, [pc, #96]	; (8b88 <dir_register+0x364>)
    8b28:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	6999      	ldr	r1, [r3, #24]
    8b2e:	69bb      	ldr	r3, [r7, #24]
    8b30:	220b      	movs	r2, #11
    8b32:	0018      	movs	r0, r3
    8b34:	4b0b      	ldr	r3, [pc, #44]	; (8b64 <dir_register+0x340>)
    8b36:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8b38:	69bb      	ldr	r3, [r7, #24]
    8b3a:	330c      	adds	r3, #12
    8b3c:	001a      	movs	r2, r3
    8b3e:	687b      	ldr	r3, [r7, #4]
    8b40:	699b      	ldr	r3, [r3, #24]
    8b42:	330b      	adds	r3, #11
    8b44:	781b      	ldrb	r3, [r3, #0]
    8b46:	2118      	movs	r1, #24
    8b48:	400b      	ands	r3, r1
    8b4a:	b2db      	uxtb	r3, r3
    8b4c:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    8b4e:	687b      	ldr	r3, [r7, #4]
    8b50:	681b      	ldr	r3, [r3, #0]
    8b52:	2201      	movs	r2, #1
    8b54:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8b56:	232f      	movs	r3, #47	; 0x2f
    8b58:	18fb      	adds	r3, r7, r3
    8b5a:	781b      	ldrb	r3, [r3, #0]
}
    8b5c:	0018      	movs	r0, r3
    8b5e:	46bd      	mov	sp, r7
    8b60:	b00d      	add	sp, #52	; 0x34
    8b62:	bd90      	pop	{r4, r7, pc}
    8b64:	0000767d 	.word	0x0000767d
    8b68:	000084d9 	.word	0x000084d9
    8b6c:	00008629 	.word	0x00008629
    8b70:	0000b00d 	.word	0x0000b00d
    8b74:	00007fa5 	.word	0x00007fa5
    8b78:	00007761 	.word	0x00007761
    8b7c:	000080d5 	.word	0x000080d5
    8b80:	000085d9 	.word	0x000085d9
    8b84:	000083c9 	.word	0x000083c9
    8b88:	000076b5 	.word	0x000076b5

00008b8c <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8b8c:	b590      	push	{r4, r7, lr}
    8b8e:	b08b      	sub	sp, #44	; 0x2c
    8b90:	af00      	add	r7, sp, #0
    8b92:	6078      	str	r0, [r7, #4]
    8b94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8b96:	683b      	ldr	r3, [r7, #0]
    8b98:	681b      	ldr	r3, [r3, #0]
    8b9a:	613b      	str	r3, [r7, #16]
    8b9c:	e002      	b.n	8ba4 <create_name+0x18>
    8b9e:	693b      	ldr	r3, [r7, #16]
    8ba0:	3301      	adds	r3, #1
    8ba2:	613b      	str	r3, [r7, #16]
    8ba4:	693b      	ldr	r3, [r7, #16]
    8ba6:	781b      	ldrb	r3, [r3, #0]
    8ba8:	2b2f      	cmp	r3, #47	; 0x2f
    8baa:	d0f8      	beq.n	8b9e <create_name+0x12>
    8bac:	693b      	ldr	r3, [r7, #16]
    8bae:	781b      	ldrb	r3, [r3, #0]
    8bb0:	2b5c      	cmp	r3, #92	; 0x5c
    8bb2:	d0f4      	beq.n	8b9e <create_name+0x12>
	lfn = dj->lfn;
    8bb4:	687b      	ldr	r3, [r7, #4]
    8bb6:	69db      	ldr	r3, [r3, #28]
    8bb8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8bba:	2300      	movs	r3, #0
    8bbc:	617b      	str	r3, [r7, #20]
    8bbe:	697b      	ldr	r3, [r7, #20]
    8bc0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    8bc2:	69bb      	ldr	r3, [r7, #24]
    8bc4:	1c5a      	adds	r2, r3, #1
    8bc6:	61ba      	str	r2, [r7, #24]
    8bc8:	693a      	ldr	r2, [r7, #16]
    8bca:	18d3      	adds	r3, r2, r3
    8bcc:	781a      	ldrb	r2, [r3, #0]
    8bce:	2324      	movs	r3, #36	; 0x24
    8bd0:	18fb      	adds	r3, r7, r3
    8bd2:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8bd4:	2324      	movs	r3, #36	; 0x24
    8bd6:	18fb      	adds	r3, r7, r3
    8bd8:	881b      	ldrh	r3, [r3, #0]
    8bda:	2b1f      	cmp	r3, #31
    8bdc:	d944      	bls.n	8c68 <create_name+0xdc>
    8bde:	2324      	movs	r3, #36	; 0x24
    8be0:	18fb      	adds	r3, r7, r3
    8be2:	881b      	ldrh	r3, [r3, #0]
    8be4:	2b2f      	cmp	r3, #47	; 0x2f
    8be6:	d03f      	beq.n	8c68 <create_name+0xdc>
    8be8:	2324      	movs	r3, #36	; 0x24
    8bea:	18fb      	adds	r3, r7, r3
    8bec:	881b      	ldrh	r3, [r3, #0]
    8bee:	2b5c      	cmp	r3, #92	; 0x5c
    8bf0:	d03a      	beq.n	8c68 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    8bf2:	697b      	ldr	r3, [r7, #20]
    8bf4:	2bfe      	cmp	r3, #254	; 0xfe
    8bf6:	d901      	bls.n	8bfc <create_name+0x70>
			return FR_INVALID_NAME;
    8bf8:	2306      	movs	r3, #6
    8bfa:	e1e7      	b.n	8fcc <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8bfc:	2324      	movs	r3, #36	; 0x24
    8bfe:	18fb      	adds	r3, r7, r3
    8c00:	2224      	movs	r2, #36	; 0x24
    8c02:	18ba      	adds	r2, r7, r2
    8c04:	8812      	ldrh	r2, [r2, #0]
    8c06:	21ff      	movs	r1, #255	; 0xff
    8c08:	400a      	ands	r2, r1
    8c0a:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8c0c:	2324      	movs	r3, #36	; 0x24
    8c0e:	18fc      	adds	r4, r7, r3
    8c10:	2324      	movs	r3, #36	; 0x24
    8c12:	18fb      	adds	r3, r7, r3
    8c14:	881b      	ldrh	r3, [r3, #0]
    8c16:	2101      	movs	r1, #1
    8c18:	0018      	movs	r0, r3
    8c1a:	4bba      	ldr	r3, [pc, #744]	; (8f04 <create_name+0x378>)
    8c1c:	4798      	blx	r3
    8c1e:	0003      	movs	r3, r0
    8c20:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8c22:	2324      	movs	r3, #36	; 0x24
    8c24:	18fb      	adds	r3, r7, r3
    8c26:	881b      	ldrh	r3, [r3, #0]
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d101      	bne.n	8c30 <create_name+0xa4>
    8c2c:	2306      	movs	r3, #6
    8c2e:	e1cd      	b.n	8fcc <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8c30:	2324      	movs	r3, #36	; 0x24
    8c32:	18fb      	adds	r3, r7, r3
    8c34:	881b      	ldrh	r3, [r3, #0]
    8c36:	2b7f      	cmp	r3, #127	; 0x7f
    8c38:	d80b      	bhi.n	8c52 <create_name+0xc6>
    8c3a:	2324      	movs	r3, #36	; 0x24
    8c3c:	18fb      	adds	r3, r7, r3
    8c3e:	881a      	ldrh	r2, [r3, #0]
    8c40:	4bb1      	ldr	r3, [pc, #708]	; (8f08 <create_name+0x37c>)
    8c42:	0011      	movs	r1, r2
    8c44:	0018      	movs	r0, r3
    8c46:	4bb1      	ldr	r3, [pc, #708]	; (8f0c <create_name+0x380>)
    8c48:	4798      	blx	r3
    8c4a:	1e03      	subs	r3, r0, #0
    8c4c:	d001      	beq.n	8c52 <create_name+0xc6>
			return FR_INVALID_NAME;
    8c4e:	2306      	movs	r3, #6
    8c50:	e1bc      	b.n	8fcc <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8c52:	697b      	ldr	r3, [r7, #20]
    8c54:	1c5a      	adds	r2, r3, #1
    8c56:	617a      	str	r2, [r7, #20]
    8c58:	005b      	lsls	r3, r3, #1
    8c5a:	68fa      	ldr	r2, [r7, #12]
    8c5c:	18d3      	adds	r3, r2, r3
    8c5e:	2224      	movs	r2, #36	; 0x24
    8c60:	18ba      	adds	r2, r7, r2
    8c62:	8812      	ldrh	r2, [r2, #0]
    8c64:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8c66:	e7ac      	b.n	8bc2 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8c68:	693a      	ldr	r2, [r7, #16]
    8c6a:	69bb      	ldr	r3, [r7, #24]
    8c6c:	18d2      	adds	r2, r2, r3
    8c6e:	683b      	ldr	r3, [r7, #0]
    8c70:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8c72:	2324      	movs	r3, #36	; 0x24
    8c74:	18fb      	adds	r3, r7, r3
    8c76:	881b      	ldrh	r3, [r3, #0]
    8c78:	2b1f      	cmp	r3, #31
    8c7a:	d801      	bhi.n	8c80 <create_name+0xf4>
    8c7c:	2204      	movs	r2, #4
    8c7e:	e000      	b.n	8c82 <create_name+0xf6>
    8c80:	2200      	movs	r2, #0
    8c82:	2326      	movs	r3, #38	; 0x26
    8c84:	18fb      	adds	r3, r7, r3
    8c86:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8c88:	e017      	b.n	8cba <create_name+0x12e>
		w = lfn[di-1];
    8c8a:	697b      	ldr	r3, [r7, #20]
    8c8c:	4aa0      	ldr	r2, [pc, #640]	; (8f10 <create_name+0x384>)
    8c8e:	4694      	mov	ip, r2
    8c90:	4463      	add	r3, ip
    8c92:	005b      	lsls	r3, r3, #1
    8c94:	68fa      	ldr	r2, [r7, #12]
    8c96:	18d2      	adds	r2, r2, r3
    8c98:	2324      	movs	r3, #36	; 0x24
    8c9a:	18fb      	adds	r3, r7, r3
    8c9c:	8812      	ldrh	r2, [r2, #0]
    8c9e:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8ca0:	2324      	movs	r3, #36	; 0x24
    8ca2:	18fb      	adds	r3, r7, r3
    8ca4:	881b      	ldrh	r3, [r3, #0]
    8ca6:	2b20      	cmp	r3, #32
    8ca8:	d004      	beq.n	8cb4 <create_name+0x128>
    8caa:	2324      	movs	r3, #36	; 0x24
    8cac:	18fb      	adds	r3, r7, r3
    8cae:	881b      	ldrh	r3, [r3, #0]
    8cb0:	2b2e      	cmp	r3, #46	; 0x2e
    8cb2:	d106      	bne.n	8cc2 <create_name+0x136>
		di--;
    8cb4:	697b      	ldr	r3, [r7, #20]
    8cb6:	3b01      	subs	r3, #1
    8cb8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8cba:	697b      	ldr	r3, [r7, #20]
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	d1e4      	bne.n	8c8a <create_name+0xfe>
    8cc0:	e000      	b.n	8cc4 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8cc2:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8cc4:	697b      	ldr	r3, [r7, #20]
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	d101      	bne.n	8cce <create_name+0x142>
    8cca:	2306      	movs	r3, #6
    8ccc:	e17e      	b.n	8fcc <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8cce:	697b      	ldr	r3, [r7, #20]
    8cd0:	005b      	lsls	r3, r3, #1
    8cd2:	68fa      	ldr	r2, [r7, #12]
    8cd4:	18d3      	adds	r3, r2, r3
    8cd6:	2200      	movs	r2, #0
    8cd8:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8cda:	687b      	ldr	r3, [r7, #4]
    8cdc:	699b      	ldr	r3, [r3, #24]
    8cde:	220b      	movs	r2, #11
    8ce0:	2120      	movs	r1, #32
    8ce2:	0018      	movs	r0, r3
    8ce4:	4b8b      	ldr	r3, [pc, #556]	; (8f14 <create_name+0x388>)
    8ce6:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8ce8:	2300      	movs	r3, #0
    8cea:	61bb      	str	r3, [r7, #24]
    8cec:	e002      	b.n	8cf4 <create_name+0x168>
    8cee:	69bb      	ldr	r3, [r7, #24]
    8cf0:	3301      	adds	r3, #1
    8cf2:	61bb      	str	r3, [r7, #24]
    8cf4:	69bb      	ldr	r3, [r7, #24]
    8cf6:	005b      	lsls	r3, r3, #1
    8cf8:	68fa      	ldr	r2, [r7, #12]
    8cfa:	18d3      	adds	r3, r2, r3
    8cfc:	881b      	ldrh	r3, [r3, #0]
    8cfe:	2b20      	cmp	r3, #32
    8d00:	d0f5      	beq.n	8cee <create_name+0x162>
    8d02:	69bb      	ldr	r3, [r7, #24]
    8d04:	005b      	lsls	r3, r3, #1
    8d06:	68fa      	ldr	r2, [r7, #12]
    8d08:	18d3      	adds	r3, r2, r3
    8d0a:	881b      	ldrh	r3, [r3, #0]
    8d0c:	2b2e      	cmp	r3, #46	; 0x2e
    8d0e:	d0ee      	beq.n	8cee <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    8d10:	69bb      	ldr	r3, [r7, #24]
    8d12:	2b00      	cmp	r3, #0
    8d14:	d00b      	beq.n	8d2e <create_name+0x1a2>
    8d16:	2326      	movs	r3, #38	; 0x26
    8d18:	18fb      	adds	r3, r7, r3
    8d1a:	2226      	movs	r2, #38	; 0x26
    8d1c:	18ba      	adds	r2, r7, r2
    8d1e:	7812      	ldrb	r2, [r2, #0]
    8d20:	2103      	movs	r1, #3
    8d22:	430a      	orrs	r2, r1
    8d24:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8d26:	e002      	b.n	8d2e <create_name+0x1a2>
    8d28:	697b      	ldr	r3, [r7, #20]
    8d2a:	3b01      	subs	r3, #1
    8d2c:	617b      	str	r3, [r7, #20]
    8d2e:	697b      	ldr	r3, [r7, #20]
    8d30:	2b00      	cmp	r3, #0
    8d32:	d009      	beq.n	8d48 <create_name+0x1bc>
    8d34:	697b      	ldr	r3, [r7, #20]
    8d36:	4a76      	ldr	r2, [pc, #472]	; (8f10 <create_name+0x384>)
    8d38:	4694      	mov	ip, r2
    8d3a:	4463      	add	r3, ip
    8d3c:	005b      	lsls	r3, r3, #1
    8d3e:	68fa      	ldr	r2, [r7, #12]
    8d40:	18d3      	adds	r3, r2, r3
    8d42:	881b      	ldrh	r3, [r3, #0]
    8d44:	2b2e      	cmp	r3, #46	; 0x2e
    8d46:	d1ef      	bne.n	8d28 <create_name+0x19c>

	b = i = 0; ni = 8;
    8d48:	2300      	movs	r3, #0
    8d4a:	623b      	str	r3, [r7, #32]
    8d4c:	2327      	movs	r3, #39	; 0x27
    8d4e:	18fb      	adds	r3, r7, r3
    8d50:	2200      	movs	r2, #0
    8d52:	701a      	strb	r2, [r3, #0]
    8d54:	2308      	movs	r3, #8
    8d56:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    8d58:	69bb      	ldr	r3, [r7, #24]
    8d5a:	1c5a      	adds	r2, r3, #1
    8d5c:	61ba      	str	r2, [r7, #24]
    8d5e:	005b      	lsls	r3, r3, #1
    8d60:	68fa      	ldr	r2, [r7, #12]
    8d62:	18d2      	adds	r2, r2, r3
    8d64:	2324      	movs	r3, #36	; 0x24
    8d66:	18fb      	adds	r3, r7, r3
    8d68:	8812      	ldrh	r2, [r2, #0]
    8d6a:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    8d6c:	2324      	movs	r3, #36	; 0x24
    8d6e:	18fb      	adds	r3, r7, r3
    8d70:	881b      	ldrh	r3, [r3, #0]
    8d72:	2b00      	cmp	r3, #0
    8d74:	d100      	bne.n	8d78 <create_name+0x1ec>
    8d76:	e0c3      	b.n	8f00 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    8d78:	2324      	movs	r3, #36	; 0x24
    8d7a:	18fb      	adds	r3, r7, r3
    8d7c:	881b      	ldrh	r3, [r3, #0]
    8d7e:	2b20      	cmp	r3, #32
    8d80:	d008      	beq.n	8d94 <create_name+0x208>
    8d82:	2324      	movs	r3, #36	; 0x24
    8d84:	18fb      	adds	r3, r7, r3
    8d86:	881b      	ldrh	r3, [r3, #0]
    8d88:	2b2e      	cmp	r3, #46	; 0x2e
    8d8a:	d10c      	bne.n	8da6 <create_name+0x21a>
    8d8c:	69ba      	ldr	r2, [r7, #24]
    8d8e:	697b      	ldr	r3, [r7, #20]
    8d90:	429a      	cmp	r2, r3
    8d92:	d008      	beq.n	8da6 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    8d94:	2326      	movs	r3, #38	; 0x26
    8d96:	18fb      	adds	r3, r7, r3
    8d98:	2226      	movs	r2, #38	; 0x26
    8d9a:	18ba      	adds	r2, r7, r2
    8d9c:	7812      	ldrb	r2, [r2, #0]
    8d9e:	2103      	movs	r1, #3
    8da0:	430a      	orrs	r2, r1
    8da2:	701a      	strb	r2, [r3, #0]
    8da4:	e0ab      	b.n	8efe <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    8da6:	6a3a      	ldr	r2, [r7, #32]
    8da8:	69fb      	ldr	r3, [r7, #28]
    8daa:	429a      	cmp	r2, r3
    8dac:	d203      	bcs.n	8db6 <create_name+0x22a>
    8dae:	69ba      	ldr	r2, [r7, #24]
    8db0:	697b      	ldr	r3, [r7, #20]
    8db2:	429a      	cmp	r2, r3
    8db4:	d12a      	bne.n	8e0c <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    8db6:	69fb      	ldr	r3, [r7, #28]
    8db8:	2b0b      	cmp	r3, #11
    8dba:	d108      	bne.n	8dce <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    8dbc:	2326      	movs	r3, #38	; 0x26
    8dbe:	18fb      	adds	r3, r7, r3
    8dc0:	2226      	movs	r2, #38	; 0x26
    8dc2:	18ba      	adds	r2, r7, r2
    8dc4:	7812      	ldrb	r2, [r2, #0]
    8dc6:	2103      	movs	r1, #3
    8dc8:	430a      	orrs	r2, r1
    8dca:	701a      	strb	r2, [r3, #0]
    8dcc:	e0a9      	b.n	8f22 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    8dce:	69ba      	ldr	r2, [r7, #24]
    8dd0:	697b      	ldr	r3, [r7, #20]
    8dd2:	429a      	cmp	r2, r3
    8dd4:	d007      	beq.n	8de6 <create_name+0x25a>
    8dd6:	2326      	movs	r3, #38	; 0x26
    8dd8:	18fb      	adds	r3, r7, r3
    8dda:	2226      	movs	r2, #38	; 0x26
    8ddc:	18ba      	adds	r2, r7, r2
    8dde:	7812      	ldrb	r2, [r2, #0]
    8de0:	2103      	movs	r1, #3
    8de2:	430a      	orrs	r2, r1
    8de4:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    8de6:	69ba      	ldr	r2, [r7, #24]
    8de8:	697b      	ldr	r3, [r7, #20]
    8dea:	429a      	cmp	r2, r3
    8dec:	d900      	bls.n	8df0 <create_name+0x264>
    8dee:	e097      	b.n	8f20 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    8df0:	697b      	ldr	r3, [r7, #20]
    8df2:	61bb      	str	r3, [r7, #24]
    8df4:	2308      	movs	r3, #8
    8df6:	623b      	str	r3, [r7, #32]
    8df8:	230b      	movs	r3, #11
    8dfa:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    8dfc:	2327      	movs	r3, #39	; 0x27
    8dfe:	18fb      	adds	r3, r7, r3
    8e00:	2227      	movs	r2, #39	; 0x27
    8e02:	18ba      	adds	r2, r7, r2
    8e04:	7812      	ldrb	r2, [r2, #0]
    8e06:	0092      	lsls	r2, r2, #2
    8e08:	701a      	strb	r2, [r3, #0]
    8e0a:	e078      	b.n	8efe <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    8e0c:	2324      	movs	r3, #36	; 0x24
    8e0e:	18fb      	adds	r3, r7, r3
    8e10:	881b      	ldrh	r3, [r3, #0]
    8e12:	2b7f      	cmp	r3, #127	; 0x7f
    8e14:	d920      	bls.n	8e58 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    8e16:	2324      	movs	r3, #36	; 0x24
    8e18:	18fc      	adds	r4, r7, r3
    8e1a:	2324      	movs	r3, #36	; 0x24
    8e1c:	18fb      	adds	r3, r7, r3
    8e1e:	881b      	ldrh	r3, [r3, #0]
    8e20:	2100      	movs	r1, #0
    8e22:	0018      	movs	r0, r3
    8e24:	4b37      	ldr	r3, [pc, #220]	; (8f04 <create_name+0x378>)
    8e26:	4798      	blx	r3
    8e28:	0003      	movs	r3, r0
    8e2a:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    8e2c:	2324      	movs	r3, #36	; 0x24
    8e2e:	18fb      	adds	r3, r7, r3
    8e30:	881b      	ldrh	r3, [r3, #0]
    8e32:	2b00      	cmp	r3, #0
    8e34:	d008      	beq.n	8e48 <create_name+0x2bc>
    8e36:	2324      	movs	r3, #36	; 0x24
    8e38:	18fb      	adds	r3, r7, r3
    8e3a:	881b      	ldrh	r3, [r3, #0]
    8e3c:	3b80      	subs	r3, #128	; 0x80
    8e3e:	4a36      	ldr	r2, [pc, #216]	; (8f18 <create_name+0x38c>)
    8e40:	5cd2      	ldrb	r2, [r2, r3]
    8e42:	2324      	movs	r3, #36	; 0x24
    8e44:	18fb      	adds	r3, r7, r3
    8e46:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    8e48:	2326      	movs	r3, #38	; 0x26
    8e4a:	18fb      	adds	r3, r7, r3
    8e4c:	2226      	movs	r2, #38	; 0x26
    8e4e:	18ba      	adds	r2, r7, r2
    8e50:	7812      	ldrb	r2, [r2, #0]
    8e52:	2102      	movs	r1, #2
    8e54:	430a      	orrs	r2, r1
    8e56:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    8e58:	2324      	movs	r3, #36	; 0x24
    8e5a:	18fb      	adds	r3, r7, r3
    8e5c:	881b      	ldrh	r3, [r3, #0]
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d009      	beq.n	8e76 <create_name+0x2ea>
    8e62:	2324      	movs	r3, #36	; 0x24
    8e64:	18fb      	adds	r3, r7, r3
    8e66:	881a      	ldrh	r2, [r3, #0]
    8e68:	4b2c      	ldr	r3, [pc, #176]	; (8f1c <create_name+0x390>)
    8e6a:	0011      	movs	r1, r2
    8e6c:	0018      	movs	r0, r3
    8e6e:	4b27      	ldr	r3, [pc, #156]	; (8f0c <create_name+0x380>)
    8e70:	4798      	blx	r3
    8e72:	1e03      	subs	r3, r0, #0
    8e74:	d00c      	beq.n	8e90 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    8e76:	2324      	movs	r3, #36	; 0x24
    8e78:	18fb      	adds	r3, r7, r3
    8e7a:	225f      	movs	r2, #95	; 0x5f
    8e7c:	801a      	strh	r2, [r3, #0]
    8e7e:	2326      	movs	r3, #38	; 0x26
    8e80:	18fb      	adds	r3, r7, r3
    8e82:	2226      	movs	r2, #38	; 0x26
    8e84:	18ba      	adds	r2, r7, r2
    8e86:	7812      	ldrb	r2, [r2, #0]
    8e88:	2103      	movs	r1, #3
    8e8a:	430a      	orrs	r2, r1
    8e8c:	701a      	strb	r2, [r3, #0]
    8e8e:	e02b      	b.n	8ee8 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    8e90:	2324      	movs	r3, #36	; 0x24
    8e92:	18fb      	adds	r3, r7, r3
    8e94:	881b      	ldrh	r3, [r3, #0]
    8e96:	2b40      	cmp	r3, #64	; 0x40
    8e98:	d90d      	bls.n	8eb6 <create_name+0x32a>
    8e9a:	2324      	movs	r3, #36	; 0x24
    8e9c:	18fb      	adds	r3, r7, r3
    8e9e:	881b      	ldrh	r3, [r3, #0]
    8ea0:	2b5a      	cmp	r3, #90	; 0x5a
    8ea2:	d808      	bhi.n	8eb6 <create_name+0x32a>
					b |= 2;
    8ea4:	2327      	movs	r3, #39	; 0x27
    8ea6:	18fb      	adds	r3, r7, r3
    8ea8:	2227      	movs	r2, #39	; 0x27
    8eaa:	18ba      	adds	r2, r7, r2
    8eac:	7812      	ldrb	r2, [r2, #0]
    8eae:	2102      	movs	r1, #2
    8eb0:	430a      	orrs	r2, r1
    8eb2:	701a      	strb	r2, [r3, #0]
    8eb4:	e018      	b.n	8ee8 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    8eb6:	2324      	movs	r3, #36	; 0x24
    8eb8:	18fb      	adds	r3, r7, r3
    8eba:	881b      	ldrh	r3, [r3, #0]
    8ebc:	2b60      	cmp	r3, #96	; 0x60
    8ebe:	d913      	bls.n	8ee8 <create_name+0x35c>
    8ec0:	2324      	movs	r3, #36	; 0x24
    8ec2:	18fb      	adds	r3, r7, r3
    8ec4:	881b      	ldrh	r3, [r3, #0]
    8ec6:	2b7a      	cmp	r3, #122	; 0x7a
    8ec8:	d80e      	bhi.n	8ee8 <create_name+0x35c>
						b |= 1; w -= 0x20;
    8eca:	2327      	movs	r3, #39	; 0x27
    8ecc:	18fb      	adds	r3, r7, r3
    8ece:	2227      	movs	r2, #39	; 0x27
    8ed0:	18ba      	adds	r2, r7, r2
    8ed2:	7812      	ldrb	r2, [r2, #0]
    8ed4:	2101      	movs	r1, #1
    8ed6:	430a      	orrs	r2, r1
    8ed8:	701a      	strb	r2, [r3, #0]
    8eda:	2324      	movs	r3, #36	; 0x24
    8edc:	18fb      	adds	r3, r7, r3
    8ede:	2224      	movs	r2, #36	; 0x24
    8ee0:	18ba      	adds	r2, r7, r2
    8ee2:	8812      	ldrh	r2, [r2, #0]
    8ee4:	3a20      	subs	r2, #32
    8ee6:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    8ee8:	687b      	ldr	r3, [r7, #4]
    8eea:	699a      	ldr	r2, [r3, #24]
    8eec:	6a3b      	ldr	r3, [r7, #32]
    8eee:	1c59      	adds	r1, r3, #1
    8ef0:	6239      	str	r1, [r7, #32]
    8ef2:	18d3      	adds	r3, r2, r3
    8ef4:	2224      	movs	r2, #36	; 0x24
    8ef6:	18ba      	adds	r2, r7, r2
    8ef8:	8812      	ldrh	r2, [r2, #0]
    8efa:	b2d2      	uxtb	r2, r2
    8efc:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    8efe:	e72b      	b.n	8d58 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    8f00:	46c0      	nop			; (mov r8, r8)
    8f02:	e00e      	b.n	8f22 <create_name+0x396>
    8f04:	0000a5f5 	.word	0x0000a5f5
    8f08:	0000c3d0 	.word	0x0000c3d0
    8f0c:	0000772f 	.word	0x0000772f
    8f10:	7fffffff 	.word	0x7fffffff
    8f14:	000076b5 	.word	0x000076b5
    8f18:	0000c418 	.word	0x0000c418
    8f1c:	0000c3dc 	.word	0x0000c3dc
			if (si > di) break;			/* No extension */
    8f20:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    8f22:	687b      	ldr	r3, [r7, #4]
    8f24:	699b      	ldr	r3, [r3, #24]
    8f26:	781b      	ldrb	r3, [r3, #0]
    8f28:	2be5      	cmp	r3, #229	; 0xe5
    8f2a:	d103      	bne.n	8f34 <create_name+0x3a8>
    8f2c:	687b      	ldr	r3, [r7, #4]
    8f2e:	699b      	ldr	r3, [r3, #24]
    8f30:	2205      	movs	r2, #5
    8f32:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    8f34:	69fb      	ldr	r3, [r7, #28]
    8f36:	2b08      	cmp	r3, #8
    8f38:	d106      	bne.n	8f48 <create_name+0x3bc>
    8f3a:	2327      	movs	r3, #39	; 0x27
    8f3c:	18fb      	adds	r3, r7, r3
    8f3e:	2227      	movs	r2, #39	; 0x27
    8f40:	18ba      	adds	r2, r7, r2
    8f42:	7812      	ldrb	r2, [r2, #0]
    8f44:	0092      	lsls	r2, r2, #2
    8f46:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    8f48:	2327      	movs	r3, #39	; 0x27
    8f4a:	18fb      	adds	r3, r7, r3
    8f4c:	781b      	ldrb	r3, [r3, #0]
    8f4e:	220c      	movs	r2, #12
    8f50:	4013      	ands	r3, r2
    8f52:	2b0c      	cmp	r3, #12
    8f54:	d006      	beq.n	8f64 <create_name+0x3d8>
    8f56:	2327      	movs	r3, #39	; 0x27
    8f58:	18fb      	adds	r3, r7, r3
    8f5a:	781b      	ldrb	r3, [r3, #0]
    8f5c:	2203      	movs	r2, #3
    8f5e:	4013      	ands	r3, r2
    8f60:	2b03      	cmp	r3, #3
    8f62:	d107      	bne.n	8f74 <create_name+0x3e8>
		cf |= NS_LFN;
    8f64:	2326      	movs	r3, #38	; 0x26
    8f66:	18fb      	adds	r3, r7, r3
    8f68:	2226      	movs	r2, #38	; 0x26
    8f6a:	18ba      	adds	r2, r7, r2
    8f6c:	7812      	ldrb	r2, [r2, #0]
    8f6e:	2102      	movs	r1, #2
    8f70:	430a      	orrs	r2, r1
    8f72:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    8f74:	2326      	movs	r3, #38	; 0x26
    8f76:	18fb      	adds	r3, r7, r3
    8f78:	781b      	ldrb	r3, [r3, #0]
    8f7a:	2202      	movs	r2, #2
    8f7c:	4013      	ands	r3, r2
    8f7e:	d11d      	bne.n	8fbc <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    8f80:	2327      	movs	r3, #39	; 0x27
    8f82:	18fb      	adds	r3, r7, r3
    8f84:	781b      	ldrb	r3, [r3, #0]
    8f86:	2203      	movs	r2, #3
    8f88:	4013      	ands	r3, r2
    8f8a:	2b01      	cmp	r3, #1
    8f8c:	d107      	bne.n	8f9e <create_name+0x412>
    8f8e:	2326      	movs	r3, #38	; 0x26
    8f90:	18fb      	adds	r3, r7, r3
    8f92:	2226      	movs	r2, #38	; 0x26
    8f94:	18ba      	adds	r2, r7, r2
    8f96:	7812      	ldrb	r2, [r2, #0]
    8f98:	2110      	movs	r1, #16
    8f9a:	430a      	orrs	r2, r1
    8f9c:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    8f9e:	2327      	movs	r3, #39	; 0x27
    8fa0:	18fb      	adds	r3, r7, r3
    8fa2:	781b      	ldrb	r3, [r3, #0]
    8fa4:	220c      	movs	r2, #12
    8fa6:	4013      	ands	r3, r2
    8fa8:	2b04      	cmp	r3, #4
    8faa:	d107      	bne.n	8fbc <create_name+0x430>
    8fac:	2326      	movs	r3, #38	; 0x26
    8fae:	18fb      	adds	r3, r7, r3
    8fb0:	2226      	movs	r2, #38	; 0x26
    8fb2:	18ba      	adds	r2, r7, r2
    8fb4:	7812      	ldrb	r2, [r2, #0]
    8fb6:	2108      	movs	r1, #8
    8fb8:	430a      	orrs	r2, r1
    8fba:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	699b      	ldr	r3, [r3, #24]
    8fc0:	330b      	adds	r3, #11
    8fc2:	2226      	movs	r2, #38	; 0x26
    8fc4:	18ba      	adds	r2, r7, r2
    8fc6:	7812      	ldrb	r2, [r2, #0]
    8fc8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    8fca:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    8fcc:	0018      	movs	r0, r3
    8fce:	46bd      	mov	sp, r7
    8fd0:	b00b      	add	sp, #44	; 0x2c
    8fd2:	bd90      	pop	{r4, r7, pc}

00008fd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    8fd4:	b590      	push	{r4, r7, lr}
    8fd6:	b085      	sub	sp, #20
    8fd8:	af00      	add	r7, sp, #0
    8fda:	6078      	str	r0, [r7, #4]
    8fdc:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    8fde:	683b      	ldr	r3, [r7, #0]
    8fe0:	781b      	ldrb	r3, [r3, #0]
    8fe2:	2b2f      	cmp	r3, #47	; 0x2f
    8fe4:	d003      	beq.n	8fee <follow_path+0x1a>
    8fe6:	683b      	ldr	r3, [r7, #0]
    8fe8:	781b      	ldrb	r3, [r3, #0]
    8fea:	2b5c      	cmp	r3, #92	; 0x5c
    8fec:	d102      	bne.n	8ff4 <follow_path+0x20>
		path++;
    8fee:	683b      	ldr	r3, [r7, #0]
    8ff0:	3301      	adds	r3, #1
    8ff2:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    8ff4:	687b      	ldr	r3, [r7, #4]
    8ff6:	2200      	movs	r2, #0
    8ff8:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    8ffa:	683b      	ldr	r3, [r7, #0]
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	2b1f      	cmp	r3, #31
    9000:	d80c      	bhi.n	901c <follow_path+0x48>
		res = dir_sdi(dj, 0);
    9002:	230f      	movs	r3, #15
    9004:	18fc      	adds	r4, r7, r3
    9006:	687b      	ldr	r3, [r7, #4]
    9008:	2100      	movs	r1, #0
    900a:	0018      	movs	r0, r3
    900c:	4b3c      	ldr	r3, [pc, #240]	; (9100 <follow_path+0x12c>)
    900e:	4798      	blx	r3
    9010:	0003      	movs	r3, r0
    9012:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	2200      	movs	r2, #0
    9018:	615a      	str	r2, [r3, #20]
    901a:	e06a      	b.n	90f2 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    901c:	230f      	movs	r3, #15
    901e:	18fc      	adds	r4, r7, r3
    9020:	003a      	movs	r2, r7
    9022:	687b      	ldr	r3, [r7, #4]
    9024:	0011      	movs	r1, r2
    9026:	0018      	movs	r0, r3
    9028:	4b36      	ldr	r3, [pc, #216]	; (9104 <follow_path+0x130>)
    902a:	4798      	blx	r3
    902c:	0003      	movs	r3, r0
    902e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    9030:	230f      	movs	r3, #15
    9032:	18fb      	adds	r3, r7, r3
    9034:	781b      	ldrb	r3, [r3, #0]
    9036:	2b00      	cmp	r3, #0
    9038:	d154      	bne.n	90e4 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    903a:	230f      	movs	r3, #15
    903c:	18fc      	adds	r4, r7, r3
    903e:	687b      	ldr	r3, [r7, #4]
    9040:	0018      	movs	r0, r3
    9042:	4b31      	ldr	r3, [pc, #196]	; (9108 <follow_path+0x134>)
    9044:	4798      	blx	r3
    9046:	0003      	movs	r3, r0
    9048:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    904a:	687b      	ldr	r3, [r7, #4]
    904c:	699a      	ldr	r2, [r3, #24]
    904e:	230e      	movs	r3, #14
    9050:	18fb      	adds	r3, r7, r3
    9052:	7ad2      	ldrb	r2, [r2, #11]
    9054:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    9056:	230f      	movs	r3, #15
    9058:	18fb      	adds	r3, r7, r3
    905a:	781b      	ldrb	r3, [r3, #0]
    905c:	2b00      	cmp	r3, #0
    905e:	d00f      	beq.n	9080 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    9060:	230f      	movs	r3, #15
    9062:	18fb      	adds	r3, r7, r3
    9064:	781b      	ldrb	r3, [r3, #0]
    9066:	2b04      	cmp	r3, #4
    9068:	d13e      	bne.n	90e8 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    906a:	230e      	movs	r3, #14
    906c:	18fb      	adds	r3, r7, r3
    906e:	781b      	ldrb	r3, [r3, #0]
    9070:	2204      	movs	r2, #4
    9072:	4013      	ands	r3, r2
    9074:	d13a      	bne.n	90ec <follow_path+0x118>
    9076:	230f      	movs	r3, #15
    9078:	18fb      	adds	r3, r7, r3
    907a:	2205      	movs	r2, #5
    907c:	701a      	strb	r2, [r3, #0]
				}
				break;
    907e:	e035      	b.n	90ec <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    9080:	230e      	movs	r3, #14
    9082:	18fb      	adds	r3, r7, r3
    9084:	781b      	ldrb	r3, [r3, #0]
    9086:	2204      	movs	r2, #4
    9088:	4013      	ands	r3, r2
    908a:	d131      	bne.n	90f0 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	695b      	ldr	r3, [r3, #20]
    9090:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    9092:	68bb      	ldr	r3, [r7, #8]
    9094:	330b      	adds	r3, #11
    9096:	781b      	ldrb	r3, [r3, #0]
    9098:	001a      	movs	r2, r3
    909a:	2310      	movs	r3, #16
    909c:	4013      	ands	r3, r2
    909e:	d104      	bne.n	90aa <follow_path+0xd6>
				res = FR_NO_PATH; break;
    90a0:	230f      	movs	r3, #15
    90a2:	18fb      	adds	r3, r7, r3
    90a4:	2205      	movs	r2, #5
    90a6:	701a      	strb	r2, [r3, #0]
    90a8:	e023      	b.n	90f2 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    90aa:	68bb      	ldr	r3, [r7, #8]
    90ac:	3315      	adds	r3, #21
    90ae:	781b      	ldrb	r3, [r3, #0]
    90b0:	021b      	lsls	r3, r3, #8
    90b2:	b21a      	sxth	r2, r3
    90b4:	68bb      	ldr	r3, [r7, #8]
    90b6:	3314      	adds	r3, #20
    90b8:	781b      	ldrb	r3, [r3, #0]
    90ba:	b21b      	sxth	r3, r3
    90bc:	4313      	orrs	r3, r2
    90be:	b21b      	sxth	r3, r3
    90c0:	b29b      	uxth	r3, r3
    90c2:	041b      	lsls	r3, r3, #16
    90c4:	68ba      	ldr	r2, [r7, #8]
    90c6:	321b      	adds	r2, #27
    90c8:	7812      	ldrb	r2, [r2, #0]
    90ca:	0212      	lsls	r2, r2, #8
    90cc:	b211      	sxth	r1, r2
    90ce:	68ba      	ldr	r2, [r7, #8]
    90d0:	321a      	adds	r2, #26
    90d2:	7812      	ldrb	r2, [r2, #0]
    90d4:	b212      	sxth	r2, r2
    90d6:	430a      	orrs	r2, r1
    90d8:	b212      	sxth	r2, r2
    90da:	b292      	uxth	r2, r2
    90dc:	431a      	orrs	r2, r3
    90de:	687b      	ldr	r3, [r7, #4]
    90e0:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    90e2:	e79b      	b.n	901c <follow_path+0x48>
			if (res != FR_OK) break;
    90e4:	46c0      	nop			; (mov r8, r8)
    90e6:	e004      	b.n	90f2 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    90e8:	46c0      	nop			; (mov r8, r8)
    90ea:	e002      	b.n	90f2 <follow_path+0x11e>
				break;
    90ec:	46c0      	nop			; (mov r8, r8)
    90ee:	e000      	b.n	90f2 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    90f0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    90f2:	230f      	movs	r3, #15
    90f4:	18fb      	adds	r3, r7, r3
    90f6:	781b      	ldrb	r3, [r3, #0]
}
    90f8:	0018      	movs	r0, r3
    90fa:	46bd      	mov	sp, r7
    90fc:	b005      	add	sp, #20
    90fe:	bd90      	pop	{r4, r7, pc}
    9100:	00007fa5 	.word	0x00007fa5
    9104:	00008b8d 	.word	0x00008b8d
    9108:	00008629 	.word	0x00008629

0000910c <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    910c:	b590      	push	{r4, r7, lr}
    910e:	b083      	sub	sp, #12
    9110:	af00      	add	r7, sp, #0
    9112:	6078      	str	r0, [r7, #4]
    9114:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    9116:	687b      	ldr	r3, [r7, #4]
    9118:	7858      	ldrb	r0, [r3, #1]
    911a:	687b      	ldr	r3, [r7, #4]
    911c:	3330      	adds	r3, #48	; 0x30
    911e:	0019      	movs	r1, r3
    9120:	683a      	ldr	r2, [r7, #0]
    9122:	2301      	movs	r3, #1
    9124:	4c2a      	ldr	r4, [pc, #168]	; (91d0 <check_fs+0xc4>)
    9126:	47a0      	blx	r4
    9128:	1e03      	subs	r3, r0, #0
    912a:	d001      	beq.n	9130 <check_fs+0x24>
		return 3;
    912c:	2303      	movs	r3, #3
    912e:	e04b      	b.n	91c8 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    9130:	687b      	ldr	r3, [r7, #4]
    9132:	4a28      	ldr	r2, [pc, #160]	; (91d4 <check_fs+0xc8>)
    9134:	4694      	mov	ip, r2
    9136:	4463      	add	r3, ip
    9138:	3301      	adds	r3, #1
    913a:	781b      	ldrb	r3, [r3, #0]
    913c:	021b      	lsls	r3, r3, #8
    913e:	b21a      	sxth	r2, r3
    9140:	687b      	ldr	r3, [r7, #4]
    9142:	4924      	ldr	r1, [pc, #144]	; (91d4 <check_fs+0xc8>)
    9144:	5c5b      	ldrb	r3, [r3, r1]
    9146:	b21b      	sxth	r3, r3
    9148:	4313      	orrs	r3, r2
    914a:	b21b      	sxth	r3, r3
    914c:	4a22      	ldr	r2, [pc, #136]	; (91d8 <check_fs+0xcc>)
    914e:	4293      	cmp	r3, r2
    9150:	d001      	beq.n	9156 <check_fs+0x4a>
		return 2;
    9152:	2302      	movs	r3, #2
    9154:	e038      	b.n	91c8 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    9156:	687b      	ldr	r3, [r7, #4]
    9158:	3366      	adds	r3, #102	; 0x66
    915a:	3303      	adds	r3, #3
    915c:	781b      	ldrb	r3, [r3, #0]
    915e:	061a      	lsls	r2, r3, #24
    9160:	687b      	ldr	r3, [r7, #4]
    9162:	3366      	adds	r3, #102	; 0x66
    9164:	3302      	adds	r3, #2
    9166:	781b      	ldrb	r3, [r3, #0]
    9168:	041b      	lsls	r3, r3, #16
    916a:	4313      	orrs	r3, r2
    916c:	687a      	ldr	r2, [r7, #4]
    916e:	3266      	adds	r2, #102	; 0x66
    9170:	3201      	adds	r2, #1
    9172:	7812      	ldrb	r2, [r2, #0]
    9174:	0212      	lsls	r2, r2, #8
    9176:	4313      	orrs	r3, r2
    9178:	687a      	ldr	r2, [r7, #4]
    917a:	2166      	movs	r1, #102	; 0x66
    917c:	5c52      	ldrb	r2, [r2, r1]
    917e:	4313      	orrs	r3, r2
    9180:	021b      	lsls	r3, r3, #8
    9182:	0a1b      	lsrs	r3, r3, #8
    9184:	4a15      	ldr	r2, [pc, #84]	; (91dc <check_fs+0xd0>)
    9186:	4293      	cmp	r3, r2
    9188:	d101      	bne.n	918e <check_fs+0x82>
		return 0;
    918a:	2300      	movs	r3, #0
    918c:	e01c      	b.n	91c8 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    918e:	687b      	ldr	r3, [r7, #4]
    9190:	3382      	adds	r3, #130	; 0x82
    9192:	3303      	adds	r3, #3
    9194:	781b      	ldrb	r3, [r3, #0]
    9196:	061a      	lsls	r2, r3, #24
    9198:	687b      	ldr	r3, [r7, #4]
    919a:	3382      	adds	r3, #130	; 0x82
    919c:	3302      	adds	r3, #2
    919e:	781b      	ldrb	r3, [r3, #0]
    91a0:	041b      	lsls	r3, r3, #16
    91a2:	4313      	orrs	r3, r2
    91a4:	687a      	ldr	r2, [r7, #4]
    91a6:	3282      	adds	r2, #130	; 0x82
    91a8:	3201      	adds	r2, #1
    91aa:	7812      	ldrb	r2, [r2, #0]
    91ac:	0212      	lsls	r2, r2, #8
    91ae:	4313      	orrs	r3, r2
    91b0:	687a      	ldr	r2, [r7, #4]
    91b2:	2182      	movs	r1, #130	; 0x82
    91b4:	5c52      	ldrb	r2, [r2, r1]
    91b6:	4313      	orrs	r3, r2
    91b8:	021b      	lsls	r3, r3, #8
    91ba:	0a1b      	lsrs	r3, r3, #8
    91bc:	4a07      	ldr	r2, [pc, #28]	; (91dc <check_fs+0xd0>)
    91be:	4293      	cmp	r3, r2
    91c0:	d101      	bne.n	91c6 <check_fs+0xba>
		return 0;
    91c2:	2300      	movs	r3, #0
    91c4:	e000      	b.n	91c8 <check_fs+0xbc>

	return 1;
    91c6:	2301      	movs	r3, #1
}
    91c8:	0018      	movs	r0, r3
    91ca:	46bd      	mov	sp, r7
    91cc:	b003      	add	sp, #12
    91ce:	bd90      	pop	{r4, r7, pc}
    91d0:	00007375 	.word	0x00007375
    91d4:	0000022e 	.word	0x0000022e
    91d8:	ffffaa55 	.word	0xffffaa55
    91dc:	00544146 	.word	0x00544146

000091e0 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    91e0:	b590      	push	{r4, r7, lr}
    91e2:	b093      	sub	sp, #76	; 0x4c
    91e4:	af00      	add	r7, sp, #0
    91e6:	60f8      	str	r0, [r7, #12]
    91e8:	60b9      	str	r1, [r7, #8]
    91ea:	1dfb      	adds	r3, r7, #7
    91ec:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    91ee:	68fb      	ldr	r3, [r7, #12]
    91f0:	681b      	ldr	r3, [r3, #0]
    91f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    91f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91f6:	781b      	ldrb	r3, [r3, #0]
    91f8:	3b30      	subs	r3, #48	; 0x30
    91fa:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    91fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    91fe:	2b09      	cmp	r3, #9
    9200:	d80b      	bhi.n	921a <chk_mounted+0x3a>
    9202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9204:	3301      	adds	r3, #1
    9206:	781b      	ldrb	r3, [r3, #0]
    9208:	2b3a      	cmp	r3, #58	; 0x3a
    920a:	d106      	bne.n	921a <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    920e:	3302      	adds	r3, #2
    9210:	62fb      	str	r3, [r7, #44]	; 0x2c
    9212:	68fb      	ldr	r3, [r7, #12]
    9214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9216:	601a      	str	r2, [r3, #0]
    9218:	e001      	b.n	921e <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    921a:	2300      	movs	r3, #0
    921c:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    921e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9220:	2b00      	cmp	r3, #0
    9222:	d001      	beq.n	9228 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    9224:	230b      	movs	r3, #11
    9226:	e2af      	b.n	9788 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    9228:	4bc5      	ldr	r3, [pc, #788]	; (9540 <chk_mounted+0x360>)
    922a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    922c:	0092      	lsls	r2, r2, #2
    922e:	58d3      	ldr	r3, [r2, r3]
    9230:	62bb      	str	r3, [r7, #40]	; 0x28
    9232:	68bb      	ldr	r3, [r7, #8]
    9234:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9236:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    9238:	6abb      	ldr	r3, [r7, #40]	; 0x28
    923a:	2b00      	cmp	r3, #0
    923c:	d101      	bne.n	9242 <chk_mounted+0x62>
    923e:	230c      	movs	r3, #12
    9240:	e2a2      	b.n	9788 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    9242:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9244:	781b      	ldrb	r3, [r3, #0]
    9246:	2b00      	cmp	r3, #0
    9248:	d01c      	beq.n	9284 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    924c:	785b      	ldrb	r3, [r3, #1]
    924e:	2227      	movs	r2, #39	; 0x27
    9250:	18bc      	adds	r4, r7, r2
    9252:	0018      	movs	r0, r3
    9254:	4bbb      	ldr	r3, [pc, #748]	; (9544 <chk_mounted+0x364>)
    9256:	4798      	blx	r3
    9258:	0003      	movs	r3, r0
    925a:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    925c:	2327      	movs	r3, #39	; 0x27
    925e:	18fb      	adds	r3, r7, r3
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	2201      	movs	r2, #1
    9264:	4013      	ands	r3, r2
    9266:	d10d      	bne.n	9284 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    9268:	1dfb      	adds	r3, r7, #7
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	2b00      	cmp	r3, #0
    926e:	d007      	beq.n	9280 <chk_mounted+0xa0>
    9270:	2327      	movs	r3, #39	; 0x27
    9272:	18fb      	adds	r3, r7, r3
    9274:	781b      	ldrb	r3, [r3, #0]
    9276:	2204      	movs	r2, #4
    9278:	4013      	ands	r3, r2
    927a:	d001      	beq.n	9280 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    927c:	230a      	movs	r3, #10
    927e:	e283      	b.n	9788 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    9280:	2300      	movs	r3, #0
    9282:	e281      	b.n	9788 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    9284:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9286:	2200      	movs	r2, #0
    9288:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    928a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    928c:	b2da      	uxtb	r2, r3
    928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9290:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    9292:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9294:	785b      	ldrb	r3, [r3, #1]
    9296:	2227      	movs	r2, #39	; 0x27
    9298:	18bc      	adds	r4, r7, r2
    929a:	0018      	movs	r0, r3
    929c:	4baa      	ldr	r3, [pc, #680]	; (9548 <chk_mounted+0x368>)
    929e:	4798      	blx	r3
    92a0:	0003      	movs	r3, r0
    92a2:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    92a4:	2327      	movs	r3, #39	; 0x27
    92a6:	18fb      	adds	r3, r7, r3
    92a8:	781b      	ldrb	r3, [r3, #0]
    92aa:	2201      	movs	r2, #1
    92ac:	4013      	ands	r3, r2
    92ae:	d001      	beq.n	92b4 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    92b0:	2303      	movs	r3, #3
    92b2:	e269      	b.n	9788 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    92b4:	1dfb      	adds	r3, r7, #7
    92b6:	781b      	ldrb	r3, [r3, #0]
    92b8:	2b00      	cmp	r3, #0
    92ba:	d007      	beq.n	92cc <chk_mounted+0xec>
    92bc:	2327      	movs	r3, #39	; 0x27
    92be:	18fb      	adds	r3, r7, r3
    92c0:	781b      	ldrb	r3, [r3, #0]
    92c2:	2204      	movs	r2, #4
    92c4:	4013      	ands	r3, r2
    92c6:	d001      	beq.n	92cc <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    92c8:	230a      	movs	r3, #10
    92ca:	e25d      	b.n	9788 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    92cc:	2300      	movs	r3, #0
    92ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    92d0:	2347      	movs	r3, #71	; 0x47
    92d2:	18fc      	adds	r4, r7, r3
    92d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    92d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92d8:	0011      	movs	r1, r2
    92da:	0018      	movs	r0, r3
    92dc:	4b9b      	ldr	r3, [pc, #620]	; (954c <chk_mounted+0x36c>)
    92de:	4798      	blx	r3
    92e0:	0003      	movs	r3, r0
    92e2:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    92e4:	2347      	movs	r3, #71	; 0x47
    92e6:	18fb      	adds	r3, r7, r3
    92e8:	781b      	ldrb	r3, [r3, #0]
    92ea:	2b01      	cmp	r3, #1
    92ec:	d13b      	bne.n	9366 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    92ee:	2346      	movs	r3, #70	; 0x46
    92f0:	18fb      	adds	r3, r7, r3
    92f2:	2200      	movs	r2, #0
    92f4:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    92f6:	2346      	movs	r3, #70	; 0x46
    92f8:	18fb      	adds	r3, r7, r3
    92fa:	781b      	ldrb	r3, [r3, #0]
    92fc:	2b00      	cmp	r3, #0
    92fe:	d006      	beq.n	930e <chk_mounted+0x12e>
    9300:	2346      	movs	r3, #70	; 0x46
    9302:	18fb      	adds	r3, r7, r3
    9304:	781a      	ldrb	r2, [r3, #0]
    9306:	2346      	movs	r3, #70	; 0x46
    9308:	18fb      	adds	r3, r7, r3
    930a:	3a01      	subs	r2, #1
    930c:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    930e:	2346      	movs	r3, #70	; 0x46
    9310:	18fb      	adds	r3, r7, r3
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	011b      	lsls	r3, r3, #4
    9316:	33bf      	adds	r3, #191	; 0xbf
    9318:	33ff      	adds	r3, #255	; 0xff
    931a:	3330      	adds	r3, #48	; 0x30
    931c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    931e:	18d3      	adds	r3, r2, r3
    9320:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    9322:	6a3b      	ldr	r3, [r7, #32]
    9324:	3304      	adds	r3, #4
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	2b00      	cmp	r3, #0
    932a:	d01c      	beq.n	9366 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    932c:	6a3b      	ldr	r3, [r7, #32]
    932e:	330b      	adds	r3, #11
    9330:	781b      	ldrb	r3, [r3, #0]
    9332:	061a      	lsls	r2, r3, #24
    9334:	6a3b      	ldr	r3, [r7, #32]
    9336:	330a      	adds	r3, #10
    9338:	781b      	ldrb	r3, [r3, #0]
    933a:	041b      	lsls	r3, r3, #16
    933c:	4313      	orrs	r3, r2
    933e:	6a3a      	ldr	r2, [r7, #32]
    9340:	3209      	adds	r2, #9
    9342:	7812      	ldrb	r2, [r2, #0]
    9344:	0212      	lsls	r2, r2, #8
    9346:	4313      	orrs	r3, r2
    9348:	6a3a      	ldr	r2, [r7, #32]
    934a:	3208      	adds	r2, #8
    934c:	7812      	ldrb	r2, [r2, #0]
    934e:	4313      	orrs	r3, r2
    9350:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    9352:	2347      	movs	r3, #71	; 0x47
    9354:	18fc      	adds	r4, r7, r3
    9356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9358:	6abb      	ldr	r3, [r7, #40]	; 0x28
    935a:	0011      	movs	r1, r2
    935c:	0018      	movs	r0, r3
    935e:	4b7b      	ldr	r3, [pc, #492]	; (954c <chk_mounted+0x36c>)
    9360:	4798      	blx	r3
    9362:	0003      	movs	r3, r0
    9364:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    9366:	2347      	movs	r3, #71	; 0x47
    9368:	18fb      	adds	r3, r7, r3
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	2b03      	cmp	r3, #3
    936e:	d101      	bne.n	9374 <chk_mounted+0x194>
    9370:	2301      	movs	r3, #1
    9372:	e209      	b.n	9788 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    9374:	2347      	movs	r3, #71	; 0x47
    9376:	18fb      	adds	r3, r7, r3
    9378:	781b      	ldrb	r3, [r3, #0]
    937a:	2b00      	cmp	r3, #0
    937c:	d001      	beq.n	9382 <chk_mounted+0x1a2>
    937e:	230d      	movs	r3, #13
    9380:	e202      	b.n	9788 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    9382:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9384:	223c      	movs	r2, #60	; 0x3c
    9386:	5c9b      	ldrb	r3, [r3, r2]
    9388:	021b      	lsls	r3, r3, #8
    938a:	b21a      	sxth	r2, r3
    938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    938e:	213b      	movs	r1, #59	; 0x3b
    9390:	5c5b      	ldrb	r3, [r3, r1]
    9392:	b21b      	sxth	r3, r3
    9394:	4313      	orrs	r3, r2
    9396:	b21a      	sxth	r2, r3
    9398:	2380      	movs	r3, #128	; 0x80
    939a:	009b      	lsls	r3, r3, #2
    939c:	429a      	cmp	r2, r3
    939e:	d001      	beq.n	93a4 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    93a0:	230d      	movs	r3, #13
    93a2:	e1f1      	b.n	9788 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    93a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93a6:	2247      	movs	r2, #71	; 0x47
    93a8:	5c9b      	ldrb	r3, [r3, r2]
    93aa:	021b      	lsls	r3, r3, #8
    93ac:	b21a      	sxth	r2, r3
    93ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93b0:	2146      	movs	r1, #70	; 0x46
    93b2:	5c5b      	ldrb	r3, [r3, r1]
    93b4:	b21b      	sxth	r3, r3
    93b6:	4313      	orrs	r3, r2
    93b8:	b21b      	sxth	r3, r3
    93ba:	b29b      	uxth	r3, r3
    93bc:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    93be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    93c0:	2b00      	cmp	r3, #0
    93c2:	d112      	bne.n	93ea <chk_mounted+0x20a>
    93c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93c6:	2257      	movs	r2, #87	; 0x57
    93c8:	5c9b      	ldrb	r3, [r3, r2]
    93ca:	061a      	lsls	r2, r3, #24
    93cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93ce:	2156      	movs	r1, #86	; 0x56
    93d0:	5c5b      	ldrb	r3, [r3, r1]
    93d2:	041b      	lsls	r3, r3, #16
    93d4:	4313      	orrs	r3, r2
    93d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    93d8:	2155      	movs	r1, #85	; 0x55
    93da:	5c52      	ldrb	r2, [r2, r1]
    93dc:	0212      	lsls	r2, r2, #8
    93de:	4313      	orrs	r3, r2
    93e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    93e2:	2154      	movs	r1, #84	; 0x54
    93e4:	5c52      	ldrb	r2, [r2, r1]
    93e6:	4313      	orrs	r3, r2
    93e8:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    93ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
    93ee:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    93f0:	231f      	movs	r3, #31
    93f2:	18fb      	adds	r3, r7, r3
    93f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    93f6:	2140      	movs	r1, #64	; 0x40
    93f8:	5c52      	ldrb	r2, [r2, r1]
    93fa:	701a      	strb	r2, [r3, #0]
    93fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93fe:	221f      	movs	r2, #31
    9400:	18ba      	adds	r2, r7, r2
    9402:	7812      	ldrb	r2, [r2, #0]
    9404:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    9406:	231f      	movs	r3, #31
    9408:	18fb      	adds	r3, r7, r3
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	2b01      	cmp	r3, #1
    940e:	d006      	beq.n	941e <chk_mounted+0x23e>
    9410:	231f      	movs	r3, #31
    9412:	18fb      	adds	r3, r7, r3
    9414:	781b      	ldrb	r3, [r3, #0]
    9416:	2b02      	cmp	r3, #2
    9418:	d001      	beq.n	941e <chk_mounted+0x23e>
    941a:	230d      	movs	r3, #13
    941c:	e1b4      	b.n	9788 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    941e:	231f      	movs	r3, #31
    9420:	18fb      	adds	r3, r7, r3
    9422:	781a      	ldrb	r2, [r3, #0]
    9424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9426:	4353      	muls	r3, r2
    9428:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    942a:	231f      	movs	r3, #31
    942c:	18fb      	adds	r3, r7, r3
    942e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9430:	213d      	movs	r1, #61	; 0x3d
    9432:	5c52      	ldrb	r2, [r2, r1]
    9434:	701a      	strb	r2, [r3, #0]
    9436:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9438:	221f      	movs	r2, #31
    943a:	18ba      	adds	r2, r7, r2
    943c:	7812      	ldrb	r2, [r2, #0]
    943e:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    9440:	231f      	movs	r3, #31
    9442:	18fb      	adds	r3, r7, r3
    9444:	781b      	ldrb	r3, [r3, #0]
    9446:	2b00      	cmp	r3, #0
    9448:	d008      	beq.n	945c <chk_mounted+0x27c>
    944a:	231f      	movs	r3, #31
    944c:	18fb      	adds	r3, r7, r3
    944e:	781b      	ldrb	r3, [r3, #0]
    9450:	221f      	movs	r2, #31
    9452:	18ba      	adds	r2, r7, r2
    9454:	7812      	ldrb	r2, [r2, #0]
    9456:	3a01      	subs	r2, #1
    9458:	4013      	ands	r3, r2
    945a:	d001      	beq.n	9460 <chk_mounted+0x280>
    945c:	230d      	movs	r3, #13
    945e:	e193      	b.n	9788 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    9460:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9462:	2242      	movs	r2, #66	; 0x42
    9464:	5c9b      	ldrb	r3, [r3, r2]
    9466:	021b      	lsls	r3, r3, #8
    9468:	b21a      	sxth	r2, r3
    946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    946c:	2141      	movs	r1, #65	; 0x41
    946e:	5c5b      	ldrb	r3, [r3, r1]
    9470:	b21b      	sxth	r3, r3
    9472:	4313      	orrs	r3, r2
    9474:	b21b      	sxth	r3, r3
    9476:	b29a      	uxth	r2, r3
    9478:	6abb      	ldr	r3, [r7, #40]	; 0x28
    947a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    947e:	891b      	ldrh	r3, [r3, #8]
    9480:	220f      	movs	r2, #15
    9482:	4013      	ands	r3, r2
    9484:	b29b      	uxth	r3, r3
    9486:	2b00      	cmp	r3, #0
    9488:	d001      	beq.n	948e <chk_mounted+0x2ae>
    948a:	230d      	movs	r3, #13
    948c:	e17c      	b.n	9788 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9490:	2244      	movs	r2, #68	; 0x44
    9492:	5c9b      	ldrb	r3, [r3, r2]
    9494:	021b      	lsls	r3, r3, #8
    9496:	b21a      	sxth	r2, r3
    9498:	6abb      	ldr	r3, [r7, #40]	; 0x28
    949a:	2143      	movs	r1, #67	; 0x43
    949c:	5c5b      	ldrb	r3, [r3, r1]
    949e:	b21b      	sxth	r3, r3
    94a0:	4313      	orrs	r3, r2
    94a2:	b21b      	sxth	r3, r3
    94a4:	b29b      	uxth	r3, r3
    94a6:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    94a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94aa:	2b00      	cmp	r3, #0
    94ac:	d112      	bne.n	94d4 <chk_mounted+0x2f4>
    94ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b0:	2253      	movs	r2, #83	; 0x53
    94b2:	5c9b      	ldrb	r3, [r3, r2]
    94b4:	061a      	lsls	r2, r3, #24
    94b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b8:	2152      	movs	r1, #82	; 0x52
    94ba:	5c5b      	ldrb	r3, [r3, r1]
    94bc:	041b      	lsls	r3, r3, #16
    94be:	4313      	orrs	r3, r2
    94c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94c2:	2151      	movs	r1, #81	; 0x51
    94c4:	5c52      	ldrb	r2, [r2, r1]
    94c6:	0212      	lsls	r2, r2, #8
    94c8:	4313      	orrs	r3, r2
    94ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94cc:	2150      	movs	r1, #80	; 0x50
    94ce:	5c52      	ldrb	r2, [r2, r1]
    94d0:	4313      	orrs	r3, r2
    94d2:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    94d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94d6:	223f      	movs	r2, #63	; 0x3f
    94d8:	5c9b      	ldrb	r3, [r3, r2]
    94da:	021b      	lsls	r3, r3, #8
    94dc:	b21a      	sxth	r2, r3
    94de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94e0:	213e      	movs	r1, #62	; 0x3e
    94e2:	5c5b      	ldrb	r3, [r3, r1]
    94e4:	b21b      	sxth	r3, r3
    94e6:	4313      	orrs	r3, r2
    94e8:	b21a      	sxth	r2, r3
    94ea:	231c      	movs	r3, #28
    94ec:	18fb      	adds	r3, r7, r3
    94ee:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    94f0:	231c      	movs	r3, #28
    94f2:	18fb      	adds	r3, r7, r3
    94f4:	881b      	ldrh	r3, [r3, #0]
    94f6:	2b00      	cmp	r3, #0
    94f8:	d101      	bne.n	94fe <chk_mounted+0x31e>
    94fa:	230d      	movs	r3, #13
    94fc:	e144      	b.n	9788 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    94fe:	231c      	movs	r3, #28
    9500:	18fb      	adds	r3, r7, r3
    9502:	881a      	ldrh	r2, [r3, #0]
    9504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9506:	18d3      	adds	r3, r2, r3
    9508:	6aba      	ldr	r2, [r7, #40]	; 0x28
    950a:	8912      	ldrh	r2, [r2, #8]
    950c:	0912      	lsrs	r2, r2, #4
    950e:	b292      	uxth	r2, r2
    9510:	189b      	adds	r3, r3, r2
    9512:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9516:	69bb      	ldr	r3, [r7, #24]
    9518:	429a      	cmp	r2, r3
    951a:	d201      	bcs.n	9520 <chk_mounted+0x340>
    951c:	230d      	movs	r3, #13
    951e:	e133      	b.n	9788 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    9520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9522:	69bb      	ldr	r3, [r7, #24]
    9524:	1ad2      	subs	r2, r2, r3
    9526:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9528:	789b      	ldrb	r3, [r3, #2]
    952a:	0019      	movs	r1, r3
    952c:	4b08      	ldr	r3, [pc, #32]	; (9550 <chk_mounted+0x370>)
    952e:	0010      	movs	r0, r2
    9530:	4798      	blx	r3
    9532:	0003      	movs	r3, r0
    9534:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    9536:	697b      	ldr	r3, [r7, #20]
    9538:	2b00      	cmp	r3, #0
    953a:	d10b      	bne.n	9554 <chk_mounted+0x374>
    953c:	230d      	movs	r3, #13
    953e:	e123      	b.n	9788 <chk_mounted+0x5a8>
    9540:	2000017c 	.word	0x2000017c
    9544:	0000733d 	.word	0x0000733d
    9548:	000072b9 	.word	0x000072b9
    954c:	0000910d 	.word	0x0000910d
    9550:	0000aef9 	.word	0x0000aef9
	fmt = FS_FAT12;
    9554:	2347      	movs	r3, #71	; 0x47
    9556:	18fb      	adds	r3, r7, r3
    9558:	2201      	movs	r2, #1
    955a:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    955c:	697b      	ldr	r3, [r7, #20]
    955e:	4a8c      	ldr	r2, [pc, #560]	; (9790 <chk_mounted+0x5b0>)
    9560:	4293      	cmp	r3, r2
    9562:	d903      	bls.n	956c <chk_mounted+0x38c>
    9564:	2347      	movs	r3, #71	; 0x47
    9566:	18fb      	adds	r3, r7, r3
    9568:	2202      	movs	r2, #2
    956a:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    956c:	697b      	ldr	r3, [r7, #20]
    956e:	4a89      	ldr	r2, [pc, #548]	; (9794 <chk_mounted+0x5b4>)
    9570:	4293      	cmp	r3, r2
    9572:	d903      	bls.n	957c <chk_mounted+0x39c>
    9574:	2347      	movs	r3, #71	; 0x47
    9576:	18fb      	adds	r3, r7, r3
    9578:	2203      	movs	r2, #3
    957a:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    957c:	697b      	ldr	r3, [r7, #20]
    957e:	1c9a      	adds	r2, r3, #2
    9580:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9582:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    9584:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9586:	69bb      	ldr	r3, [r7, #24]
    9588:	18d2      	adds	r2, r2, r3
    958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    958c:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    958e:	231c      	movs	r3, #28
    9590:	18fb      	adds	r3, r7, r3
    9592:	881a      	ldrh	r2, [r3, #0]
    9594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9596:	18d2      	adds	r2, r2, r3
    9598:	6abb      	ldr	r3, [r7, #40]	; 0x28
    959a:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    959c:	2347      	movs	r3, #71	; 0x47
    959e:	18fb      	adds	r3, r7, r3
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	2b03      	cmp	r3, #3
    95a4:	d11e      	bne.n	95e4 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    95a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95a8:	891b      	ldrh	r3, [r3, #8]
    95aa:	2b00      	cmp	r3, #0
    95ac:	d001      	beq.n	95b2 <chk_mounted+0x3d2>
    95ae:	230d      	movs	r3, #13
    95b0:	e0ea      	b.n	9788 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    95b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95b4:	225f      	movs	r2, #95	; 0x5f
    95b6:	5c9b      	ldrb	r3, [r3, r2]
    95b8:	061a      	lsls	r2, r3, #24
    95ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95bc:	215e      	movs	r1, #94	; 0x5e
    95be:	5c5b      	ldrb	r3, [r3, r1]
    95c0:	041b      	lsls	r3, r3, #16
    95c2:	4313      	orrs	r3, r2
    95c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    95c6:	215d      	movs	r1, #93	; 0x5d
    95c8:	5c52      	ldrb	r2, [r2, r1]
    95ca:	0212      	lsls	r2, r2, #8
    95cc:	4313      	orrs	r3, r2
    95ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    95d0:	215c      	movs	r1, #92	; 0x5c
    95d2:	5c52      	ldrb	r2, [r2, r1]
    95d4:	431a      	orrs	r2, r3
    95d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95d8:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    95da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95dc:	699b      	ldr	r3, [r3, #24]
    95de:	009b      	lsls	r3, r3, #2
    95e0:	633b      	str	r3, [r7, #48]	; 0x30
    95e2:	e020      	b.n	9626 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    95e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95e6:	891b      	ldrh	r3, [r3, #8]
    95e8:	2b00      	cmp	r3, #0
    95ea:	d101      	bne.n	95f0 <chk_mounted+0x410>
    95ec:	230d      	movs	r3, #13
    95ee:	e0cb      	b.n	9788 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    95f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95f2:	6a1a      	ldr	r2, [r3, #32]
    95f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    95f6:	18d2      	adds	r2, r2, r3
    95f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95fa:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    95fc:	2347      	movs	r3, #71	; 0x47
    95fe:	18fb      	adds	r3, r7, r3
    9600:	781b      	ldrb	r3, [r3, #0]
    9602:	2b02      	cmp	r3, #2
    9604:	d103      	bne.n	960e <chk_mounted+0x42e>
    9606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9608:	699b      	ldr	r3, [r3, #24]
    960a:	005b      	lsls	r3, r3, #1
    960c:	e00a      	b.n	9624 <chk_mounted+0x444>
    960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9610:	699a      	ldr	r2, [r3, #24]
    9612:	0013      	movs	r3, r2
    9614:	005b      	lsls	r3, r3, #1
    9616:	189b      	adds	r3, r3, r2
    9618:	085a      	lsrs	r2, r3, #1
    961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    961c:	699b      	ldr	r3, [r3, #24]
    961e:	2101      	movs	r1, #1
    9620:	400b      	ands	r3, r1
    9622:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    9624:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    9626:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9628:	69da      	ldr	r2, [r3, #28]
    962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    962c:	495a      	ldr	r1, [pc, #360]	; (9798 <chk_mounted+0x5b8>)
    962e:	468c      	mov	ip, r1
    9630:	4463      	add	r3, ip
    9632:	0a5b      	lsrs	r3, r3, #9
    9634:	429a      	cmp	r2, r3
    9636:	d201      	bcs.n	963c <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    9638:	230d      	movs	r3, #13
    963a:	e0a5      	b.n	9788 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    963e:	2201      	movs	r2, #1
    9640:	4252      	negs	r2, r2
    9642:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    9644:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9646:	2200      	movs	r2, #0
    9648:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    964a:	2347      	movs	r3, #71	; 0x47
    964c:	18fb      	adds	r3, r7, r3
    964e:	781b      	ldrb	r3, [r3, #0]
    9650:	2b03      	cmp	r3, #3
    9652:	d000      	beq.n	9656 <chk_mounted+0x476>
    9654:	e082      	b.n	975c <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    9656:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9658:	2200      	movs	r2, #0
    965a:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    965e:	2261      	movs	r2, #97	; 0x61
    9660:	5c9b      	ldrb	r3, [r3, r2]
    9662:	021b      	lsls	r3, r3, #8
    9664:	b21a      	sxth	r2, r3
    9666:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9668:	2160      	movs	r1, #96	; 0x60
    966a:	5c5b      	ldrb	r3, [r3, r1]
    966c:	b21b      	sxth	r3, r3
    966e:	4313      	orrs	r3, r2
    9670:	b21b      	sxth	r3, r3
    9672:	b29b      	uxth	r3, r3
    9674:	001a      	movs	r2, r3
    9676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9678:	18d2      	adds	r2, r2, r3
    967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    967c:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9680:	7858      	ldrb	r0, [r3, #1]
    9682:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9684:	3330      	adds	r3, #48	; 0x30
    9686:	0019      	movs	r1, r3
    9688:	6abb      	ldr	r3, [r7, #40]	; 0x28
    968a:	695a      	ldr	r2, [r3, #20]
    968c:	2301      	movs	r3, #1
    968e:	4c43      	ldr	r4, [pc, #268]	; (979c <chk_mounted+0x5bc>)
    9690:	47a0      	blx	r4
    9692:	1e03      	subs	r3, r0, #0
    9694:	d162      	bne.n	975c <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9696:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9698:	4a41      	ldr	r2, [pc, #260]	; (97a0 <chk_mounted+0x5c0>)
    969a:	5c9b      	ldrb	r3, [r3, r2]
    969c:	021b      	lsls	r3, r3, #8
    969e:	b21a      	sxth	r2, r3
    96a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96a2:	4940      	ldr	r1, [pc, #256]	; (97a4 <chk_mounted+0x5c4>)
    96a4:	5c5b      	ldrb	r3, [r3, r1]
    96a6:	b21b      	sxth	r3, r3
    96a8:	4313      	orrs	r3, r2
    96aa:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    96ac:	4a3e      	ldr	r2, [pc, #248]	; (97a8 <chk_mounted+0x5c8>)
    96ae:	4293      	cmp	r3, r2
    96b0:	d154      	bne.n	975c <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    96b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96b4:	2233      	movs	r2, #51	; 0x33
    96b6:	5c9b      	ldrb	r3, [r3, r2]
    96b8:	061a      	lsls	r2, r3, #24
    96ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96bc:	2132      	movs	r1, #50	; 0x32
    96be:	5c5b      	ldrb	r3, [r3, r1]
    96c0:	041b      	lsls	r3, r3, #16
    96c2:	4313      	orrs	r3, r2
    96c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96c6:	2131      	movs	r1, #49	; 0x31
    96c8:	5c52      	ldrb	r2, [r2, r1]
    96ca:	0212      	lsls	r2, r2, #8
    96cc:	4313      	orrs	r3, r2
    96ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96d0:	2130      	movs	r1, #48	; 0x30
    96d2:	5c52      	ldrb	r2, [r2, r1]
    96d4:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    96d6:	4a35      	ldr	r2, [pc, #212]	; (97ac <chk_mounted+0x5cc>)
    96d8:	4293      	cmp	r3, r2
    96da:	d13f      	bne.n	975c <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    96dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96de:	4a34      	ldr	r2, [pc, #208]	; (97b0 <chk_mounted+0x5d0>)
    96e0:	5c9b      	ldrb	r3, [r3, r2]
    96e2:	061a      	lsls	r2, r3, #24
    96e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96e6:	4933      	ldr	r1, [pc, #204]	; (97b4 <chk_mounted+0x5d4>)
    96e8:	5c5b      	ldrb	r3, [r3, r1]
    96ea:	041b      	lsls	r3, r3, #16
    96ec:	4313      	orrs	r3, r2
    96ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96f0:	4931      	ldr	r1, [pc, #196]	; (97b8 <chk_mounted+0x5d8>)
    96f2:	5c52      	ldrb	r2, [r2, r1]
    96f4:	0212      	lsls	r2, r2, #8
    96f6:	4313      	orrs	r3, r2
    96f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    96fa:	2285      	movs	r2, #133	; 0x85
    96fc:	0092      	lsls	r2, r2, #2
    96fe:	5c8a      	ldrb	r2, [r1, r2]
    9700:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9702:	4a2e      	ldr	r2, [pc, #184]	; (97bc <chk_mounted+0x5dc>)
    9704:	4293      	cmp	r3, r2
    9706:	d129      	bne.n	975c <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    9708:	6abb      	ldr	r3, [r7, #40]	; 0x28
    970a:	4a2d      	ldr	r2, [pc, #180]	; (97c0 <chk_mounted+0x5e0>)
    970c:	5c9b      	ldrb	r3, [r3, r2]
    970e:	061a      	lsls	r2, r3, #24
    9710:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9712:	492c      	ldr	r1, [pc, #176]	; (97c4 <chk_mounted+0x5e4>)
    9714:	5c5b      	ldrb	r3, [r3, r1]
    9716:	041b      	lsls	r3, r3, #16
    9718:	4313      	orrs	r3, r2
    971a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    971c:	492a      	ldr	r1, [pc, #168]	; (97c8 <chk_mounted+0x5e8>)
    971e:	5c52      	ldrb	r2, [r2, r1]
    9720:	0212      	lsls	r2, r2, #8
    9722:	4313      	orrs	r3, r2
    9724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9726:	2287      	movs	r2, #135	; 0x87
    9728:	0092      	lsls	r2, r2, #2
    972a:	5c8a      	ldrb	r2, [r1, r2]
    972c:	431a      	orrs	r2, r3
    972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9730:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    9732:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9734:	4a25      	ldr	r2, [pc, #148]	; (97cc <chk_mounted+0x5ec>)
    9736:	5c9b      	ldrb	r3, [r3, r2]
    9738:	061a      	lsls	r2, r3, #24
    973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    973c:	4924      	ldr	r1, [pc, #144]	; (97d0 <chk_mounted+0x5f0>)
    973e:	5c5b      	ldrb	r3, [r3, r1]
    9740:	041b      	lsls	r3, r3, #16
    9742:	4313      	orrs	r3, r2
    9744:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9746:	4923      	ldr	r1, [pc, #140]	; (97d4 <chk_mounted+0x5f4>)
    9748:	5c52      	ldrb	r2, [r2, r1]
    974a:	0212      	lsls	r2, r2, #8
    974c:	4313      	orrs	r3, r2
    974e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9750:	2286      	movs	r2, #134	; 0x86
    9752:	0092      	lsls	r2, r2, #2
    9754:	5c8a      	ldrb	r2, [r1, r2]
    9756:	431a      	orrs	r2, r3
    9758:	6abb      	ldr	r3, [r7, #40]	; 0x28
    975a:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    975e:	2247      	movs	r2, #71	; 0x47
    9760:	18ba      	adds	r2, r7, r2
    9762:	7812      	ldrb	r2, [r2, #0]
    9764:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    9766:	4b1c      	ldr	r3, [pc, #112]	; (97d8 <chk_mounted+0x5f8>)
    9768:	881b      	ldrh	r3, [r3, #0]
    976a:	3301      	adds	r3, #1
    976c:	b29a      	uxth	r2, r3
    976e:	4b1a      	ldr	r3, [pc, #104]	; (97d8 <chk_mounted+0x5f8>)
    9770:	801a      	strh	r2, [r3, #0]
    9772:	4b19      	ldr	r3, [pc, #100]	; (97d8 <chk_mounted+0x5f8>)
    9774:	881a      	ldrh	r2, [r3, #0]
    9776:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9778:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    977a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    977c:	2200      	movs	r2, #0
    977e:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    9780:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9782:	2200      	movs	r2, #0
    9784:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    9786:	2300      	movs	r3, #0
}
    9788:	0018      	movs	r0, r3
    978a:	46bd      	mov	sp, r7
    978c:	b013      	add	sp, #76	; 0x4c
    978e:	bd90      	pop	{r4, r7, pc}
    9790:	00000ff5 	.word	0x00000ff5
    9794:	0000fff5 	.word	0x0000fff5
    9798:	000001ff 	.word	0x000001ff
    979c:	00007375 	.word	0x00007375
    97a0:	0000022f 	.word	0x0000022f
    97a4:	0000022e 	.word	0x0000022e
    97a8:	ffffaa55 	.word	0xffffaa55
    97ac:	41615252 	.word	0x41615252
    97b0:	00000217 	.word	0x00000217
    97b4:	00000216 	.word	0x00000216
    97b8:	00000215 	.word	0x00000215
    97bc:	61417272 	.word	0x61417272
    97c0:	0000021f 	.word	0x0000021f
    97c4:	0000021e 	.word	0x0000021e
    97c8:	0000021d 	.word	0x0000021d
    97cc:	0000021b 	.word	0x0000021b
    97d0:	0000021a 	.word	0x0000021a
    97d4:	00000219 	.word	0x00000219
    97d8:	20000180 	.word	0x20000180

000097dc <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    97dc:	b580      	push	{r7, lr}
    97de:	b082      	sub	sp, #8
    97e0:	af00      	add	r7, sp, #0
    97e2:	6078      	str	r0, [r7, #4]
    97e4:	000a      	movs	r2, r1
    97e6:	1cbb      	adds	r3, r7, #2
    97e8:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    97ea:	687b      	ldr	r3, [r7, #4]
    97ec:	2b00      	cmp	r3, #0
    97ee:	d009      	beq.n	9804 <validate+0x28>
    97f0:	687b      	ldr	r3, [r7, #4]
    97f2:	781b      	ldrb	r3, [r3, #0]
    97f4:	2b00      	cmp	r3, #0
    97f6:	d005      	beq.n	9804 <validate+0x28>
    97f8:	687b      	ldr	r3, [r7, #4]
    97fa:	88db      	ldrh	r3, [r3, #6]
    97fc:	1cba      	adds	r2, r7, #2
    97fe:	8812      	ldrh	r2, [r2, #0]
    9800:	429a      	cmp	r2, r3
    9802:	d001      	beq.n	9808 <validate+0x2c>
		return FR_INVALID_OBJECT;
    9804:	2309      	movs	r3, #9
    9806:	e00c      	b.n	9822 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    9808:	687b      	ldr	r3, [r7, #4]
    980a:	785b      	ldrb	r3, [r3, #1]
    980c:	0018      	movs	r0, r3
    980e:	4b07      	ldr	r3, [pc, #28]	; (982c <validate+0x50>)
    9810:	4798      	blx	r3
    9812:	0003      	movs	r3, r0
    9814:	001a      	movs	r2, r3
    9816:	2301      	movs	r3, #1
    9818:	4013      	ands	r3, r2
    981a:	d001      	beq.n	9820 <validate+0x44>
		return FR_NOT_READY;
    981c:	2303      	movs	r3, #3
    981e:	e000      	b.n	9822 <validate+0x46>

	return FR_OK;
    9820:	2300      	movs	r3, #0
}
    9822:	0018      	movs	r0, r3
    9824:	46bd      	mov	sp, r7
    9826:	b002      	add	sp, #8
    9828:	bd80      	pop	{r7, pc}
    982a:	46c0      	nop			; (mov r8, r8)
    982c:	0000733d 	.word	0x0000733d

00009830 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    9830:	b580      	push	{r7, lr}
    9832:	b084      	sub	sp, #16
    9834:	af00      	add	r7, sp, #0
    9836:	0002      	movs	r2, r0
    9838:	6039      	str	r1, [r7, #0]
    983a:	1dfb      	adds	r3, r7, #7
    983c:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    983e:	1dfb      	adds	r3, r7, #7
    9840:	781b      	ldrb	r3, [r3, #0]
    9842:	2b00      	cmp	r3, #0
    9844:	d001      	beq.n	984a <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    9846:	230b      	movs	r3, #11
    9848:	e018      	b.n	987c <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    984a:	1dfb      	adds	r3, r7, #7
    984c:	781a      	ldrb	r2, [r3, #0]
    984e:	4b0d      	ldr	r3, [pc, #52]	; (9884 <f_mount+0x54>)
    9850:	0092      	lsls	r2, r2, #2
    9852:	58d3      	ldr	r3, [r2, r3]
    9854:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    9856:	68fb      	ldr	r3, [r7, #12]
    9858:	2b00      	cmp	r3, #0
    985a:	d002      	beq.n	9862 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    985c:	68fb      	ldr	r3, [r7, #12]
    985e:	2200      	movs	r2, #0
    9860:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    9862:	683b      	ldr	r3, [r7, #0]
    9864:	2b00      	cmp	r3, #0
    9866:	d002      	beq.n	986e <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    9868:	683b      	ldr	r3, [r7, #0]
    986a:	2200      	movs	r2, #0
    986c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    986e:	1dfb      	adds	r3, r7, #7
    9870:	781a      	ldrb	r2, [r3, #0]
    9872:	4b04      	ldr	r3, [pc, #16]	; (9884 <f_mount+0x54>)
    9874:	0092      	lsls	r2, r2, #2
    9876:	6839      	ldr	r1, [r7, #0]
    9878:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    987a:	2300      	movs	r3, #0
}
    987c:	0018      	movs	r0, r3
    987e:	46bd      	mov	sp, r7
    9880:	b004      	add	sp, #16
    9882:	bd80      	pop	{r7, pc}
    9884:	2000017c 	.word	0x2000017c

00009888 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9888:	b590      	push	{r4, r7, lr}
    988a:	4ce5      	ldr	r4, [pc, #916]	; (9c20 <f_open+0x398>)
    988c:	44a5      	add	sp, r4
    988e:	af00      	add	r7, sp, #0
    9890:	60f8      	str	r0, [r7, #12]
    9892:	60b9      	str	r1, [r7, #8]
    9894:	4be3      	ldr	r3, [pc, #908]	; (9c24 <f_open+0x39c>)
    9896:	2194      	movs	r1, #148	; 0x94
    9898:	0089      	lsls	r1, r1, #2
    989a:	468c      	mov	ip, r1
    989c:	44bc      	add	ip, r7
    989e:	4463      	add	r3, ip
    98a0:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    98a2:	68fb      	ldr	r3, [r7, #12]
    98a4:	2200      	movs	r2, #0
    98a6:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    98a8:	4bde      	ldr	r3, [pc, #888]	; (9c24 <f_open+0x39c>)
    98aa:	2294      	movs	r2, #148	; 0x94
    98ac:	0092      	lsls	r2, r2, #2
    98ae:	4694      	mov	ip, r2
    98b0:	44bc      	add	ip, r7
    98b2:	4463      	add	r3, ip
    98b4:	4adb      	ldr	r2, [pc, #876]	; (9c24 <f_open+0x39c>)
    98b6:	2194      	movs	r1, #148	; 0x94
    98b8:	0089      	lsls	r1, r1, #2
    98ba:	468c      	mov	ip, r1
    98bc:	44bc      	add	ip, r7
    98be:	4462      	add	r2, ip
    98c0:	7812      	ldrb	r2, [r2, #0]
    98c2:	211f      	movs	r1, #31
    98c4:	400a      	ands	r2, r1
    98c6:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    98c8:	4bd6      	ldr	r3, [pc, #856]	; (9c24 <f_open+0x39c>)
    98ca:	2294      	movs	r2, #148	; 0x94
    98cc:	0092      	lsls	r2, r2, #2
    98ce:	4694      	mov	ip, r2
    98d0:	44bc      	add	ip, r7
    98d2:	4463      	add	r3, ip
    98d4:	781b      	ldrb	r3, [r3, #0]
    98d6:	2201      	movs	r2, #1
    98d8:	4393      	bics	r3, r2
    98da:	b2da      	uxtb	r2, r3
    98dc:	4bd2      	ldr	r3, [pc, #840]	; (9c28 <f_open+0x3a0>)
    98de:	18fc      	adds	r4, r7, r3
    98e0:	2387      	movs	r3, #135	; 0x87
    98e2:	009b      	lsls	r3, r3, #2
    98e4:	18f9      	adds	r1, r7, r3
    98e6:	2308      	movs	r3, #8
    98e8:	18fb      	adds	r3, r7, r3
    98ea:	0018      	movs	r0, r3
    98ec:	4bcf      	ldr	r3, [pc, #828]	; (9c2c <f_open+0x3a4>)
    98ee:	4798      	blx	r3
    98f0:	0003      	movs	r3, r0
    98f2:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    98f4:	2387      	movs	r3, #135	; 0x87
    98f6:	009b      	lsls	r3, r3, #2
    98f8:	18fb      	adds	r3, r7, r3
    98fa:	2284      	movs	r2, #132	; 0x84
    98fc:	0092      	lsls	r2, r2, #2
    98fe:	18ba      	adds	r2, r7, r2
    9900:	619a      	str	r2, [r3, #24]
    9902:	2387      	movs	r3, #135	; 0x87
    9904:	009b      	lsls	r3, r3, #2
    9906:	18fb      	adds	r3, r7, r3
    9908:	2210      	movs	r2, #16
    990a:	18ba      	adds	r2, r7, r2
    990c:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    990e:	4bc6      	ldr	r3, [pc, #792]	; (9c28 <f_open+0x3a0>)
    9910:	18fb      	adds	r3, r7, r3
    9912:	781b      	ldrb	r3, [r3, #0]
    9914:	2b00      	cmp	r3, #0
    9916:	d10b      	bne.n	9930 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9918:	68ba      	ldr	r2, [r7, #8]
    991a:	4bc3      	ldr	r3, [pc, #780]	; (9c28 <f_open+0x3a0>)
    991c:	18fc      	adds	r4, r7, r3
    991e:	2387      	movs	r3, #135	; 0x87
    9920:	009b      	lsls	r3, r3, #2
    9922:	18fb      	adds	r3, r7, r3
    9924:	0011      	movs	r1, r2
    9926:	0018      	movs	r0, r3
    9928:	4bc1      	ldr	r3, [pc, #772]	; (9c30 <f_open+0x3a8>)
    992a:	4798      	blx	r3
    992c:	0003      	movs	r3, r0
    992e:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    9930:	2387      	movs	r3, #135	; 0x87
    9932:	009b      	lsls	r3, r3, #2
    9934:	18fb      	adds	r3, r7, r3
    9936:	695b      	ldr	r3, [r3, #20]
    9938:	2292      	movs	r2, #146	; 0x92
    993a:	0092      	lsls	r2, r2, #2
    993c:	18ba      	adds	r2, r7, r2
    993e:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9940:	4bb9      	ldr	r3, [pc, #740]	; (9c28 <f_open+0x3a0>)
    9942:	18fb      	adds	r3, r7, r3
    9944:	781b      	ldrb	r3, [r3, #0]
    9946:	2b00      	cmp	r3, #0
    9948:	d109      	bne.n	995e <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    994a:	2392      	movs	r3, #146	; 0x92
    994c:	009b      	lsls	r3, r3, #2
    994e:	18fb      	adds	r3, r7, r3
    9950:	681b      	ldr	r3, [r3, #0]
    9952:	2b00      	cmp	r3, #0
    9954:	d103      	bne.n	995e <f_open+0xd6>
			res = FR_INVALID_NAME;
    9956:	4bb4      	ldr	r3, [pc, #720]	; (9c28 <f_open+0x3a0>)
    9958:	18fb      	adds	r3, r7, r3
    995a:	2206      	movs	r2, #6
    995c:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    995e:	4bb1      	ldr	r3, [pc, #708]	; (9c24 <f_open+0x39c>)
    9960:	2294      	movs	r2, #148	; 0x94
    9962:	0092      	lsls	r2, r2, #2
    9964:	4694      	mov	ip, r2
    9966:	44bc      	add	ip, r7
    9968:	4463      	add	r3, ip
    996a:	781b      	ldrb	r3, [r3, #0]
    996c:	221c      	movs	r2, #28
    996e:	4013      	ands	r3, r2
    9970:	d100      	bne.n	9974 <f_open+0xec>
    9972:	e141      	b.n	9bf8 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9974:	4bac      	ldr	r3, [pc, #688]	; (9c28 <f_open+0x3a0>)
    9976:	18fb      	adds	r3, r7, r3
    9978:	781b      	ldrb	r3, [r3, #0]
    997a:	2b00      	cmp	r3, #0
    997c:	d027      	beq.n	99ce <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    997e:	4baa      	ldr	r3, [pc, #680]	; (9c28 <f_open+0x3a0>)
    9980:	18fb      	adds	r3, r7, r3
    9982:	781b      	ldrb	r3, [r3, #0]
    9984:	2b04      	cmp	r3, #4
    9986:	d109      	bne.n	999c <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9988:	4ba7      	ldr	r3, [pc, #668]	; (9c28 <f_open+0x3a0>)
    998a:	18fc      	adds	r4, r7, r3
    998c:	2387      	movs	r3, #135	; 0x87
    998e:	009b      	lsls	r3, r3, #2
    9990:	18fb      	adds	r3, r7, r3
    9992:	0018      	movs	r0, r3
    9994:	4ba7      	ldr	r3, [pc, #668]	; (9c34 <f_open+0x3ac>)
    9996:	4798      	blx	r3
    9998:	0003      	movs	r3, r0
    999a:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    999c:	4ba1      	ldr	r3, [pc, #644]	; (9c24 <f_open+0x39c>)
    999e:	2294      	movs	r2, #148	; 0x94
    99a0:	0092      	lsls	r2, r2, #2
    99a2:	4694      	mov	ip, r2
    99a4:	44bc      	add	ip, r7
    99a6:	4463      	add	r3, ip
    99a8:	4a9e      	ldr	r2, [pc, #632]	; (9c24 <f_open+0x39c>)
    99aa:	2194      	movs	r1, #148	; 0x94
    99ac:	0089      	lsls	r1, r1, #2
    99ae:	468c      	mov	ip, r1
    99b0:	44bc      	add	ip, r7
    99b2:	4462      	add	r2, ip
    99b4:	7812      	ldrb	r2, [r2, #0]
    99b6:	2108      	movs	r1, #8
    99b8:	430a      	orrs	r2, r1
    99ba:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    99bc:	2387      	movs	r3, #135	; 0x87
    99be:	009b      	lsls	r3, r3, #2
    99c0:	18fb      	adds	r3, r7, r3
    99c2:	695b      	ldr	r3, [r3, #20]
    99c4:	2292      	movs	r2, #146	; 0x92
    99c6:	0092      	lsls	r2, r2, #2
    99c8:	18ba      	adds	r2, r7, r2
    99ca:	6013      	str	r3, [r2, #0]
    99cc:	e01c      	b.n	9a08 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    99ce:	2392      	movs	r3, #146	; 0x92
    99d0:	009b      	lsls	r3, r3, #2
    99d2:	18fb      	adds	r3, r7, r3
    99d4:	681b      	ldr	r3, [r3, #0]
    99d6:	330b      	adds	r3, #11
    99d8:	781b      	ldrb	r3, [r3, #0]
    99da:	001a      	movs	r2, r3
    99dc:	2311      	movs	r3, #17
    99de:	4013      	ands	r3, r2
    99e0:	d004      	beq.n	99ec <f_open+0x164>
				res = FR_DENIED;
    99e2:	4b91      	ldr	r3, [pc, #580]	; (9c28 <f_open+0x3a0>)
    99e4:	18fb      	adds	r3, r7, r3
    99e6:	2207      	movs	r2, #7
    99e8:	701a      	strb	r2, [r3, #0]
    99ea:	e00d      	b.n	9a08 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    99ec:	4b8d      	ldr	r3, [pc, #564]	; (9c24 <f_open+0x39c>)
    99ee:	2294      	movs	r2, #148	; 0x94
    99f0:	0092      	lsls	r2, r2, #2
    99f2:	4694      	mov	ip, r2
    99f4:	44bc      	add	ip, r7
    99f6:	4463      	add	r3, ip
    99f8:	781b      	ldrb	r3, [r3, #0]
    99fa:	2204      	movs	r2, #4
    99fc:	4013      	ands	r3, r2
    99fe:	d003      	beq.n	9a08 <f_open+0x180>
					res = FR_EXIST;
    9a00:	4b89      	ldr	r3, [pc, #548]	; (9c28 <f_open+0x3a0>)
    9a02:	18fb      	adds	r3, r7, r3
    9a04:	2208      	movs	r2, #8
    9a06:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9a08:	4b87      	ldr	r3, [pc, #540]	; (9c28 <f_open+0x3a0>)
    9a0a:	18fb      	adds	r3, r7, r3
    9a0c:	781b      	ldrb	r3, [r3, #0]
    9a0e:	2b00      	cmp	r3, #0
    9a10:	d000      	beq.n	9a14 <f_open+0x18c>
    9a12:	e12f      	b.n	9c74 <f_open+0x3ec>
    9a14:	4b83      	ldr	r3, [pc, #524]	; (9c24 <f_open+0x39c>)
    9a16:	2294      	movs	r2, #148	; 0x94
    9a18:	0092      	lsls	r2, r2, #2
    9a1a:	4694      	mov	ip, r2
    9a1c:	44bc      	add	ip, r7
    9a1e:	4463      	add	r3, ip
    9a20:	781b      	ldrb	r3, [r3, #0]
    9a22:	2208      	movs	r2, #8
    9a24:	4013      	ands	r3, r2
    9a26:	d100      	bne.n	9a2a <f_open+0x1a2>
    9a28:	e124      	b.n	9c74 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9a2a:	4b83      	ldr	r3, [pc, #524]	; (9c38 <f_open+0x3b0>)
    9a2c:	4798      	blx	r3
    9a2e:	0003      	movs	r3, r0
    9a30:	2291      	movs	r2, #145	; 0x91
    9a32:	0092      	lsls	r2, r2, #2
    9a34:	18ba      	adds	r2, r7, r2
    9a36:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9a38:	2392      	movs	r3, #146	; 0x92
    9a3a:	009b      	lsls	r3, r3, #2
    9a3c:	18fb      	adds	r3, r7, r3
    9a3e:	681b      	ldr	r3, [r3, #0]
    9a40:	330e      	adds	r3, #14
    9a42:	2291      	movs	r2, #145	; 0x91
    9a44:	0092      	lsls	r2, r2, #2
    9a46:	18ba      	adds	r2, r7, r2
    9a48:	6812      	ldr	r2, [r2, #0]
    9a4a:	b2d2      	uxtb	r2, r2
    9a4c:	701a      	strb	r2, [r3, #0]
    9a4e:	2392      	movs	r3, #146	; 0x92
    9a50:	009b      	lsls	r3, r3, #2
    9a52:	18fb      	adds	r3, r7, r3
    9a54:	681b      	ldr	r3, [r3, #0]
    9a56:	330f      	adds	r3, #15
    9a58:	2291      	movs	r2, #145	; 0x91
    9a5a:	0092      	lsls	r2, r2, #2
    9a5c:	18ba      	adds	r2, r7, r2
    9a5e:	6812      	ldr	r2, [r2, #0]
    9a60:	b292      	uxth	r2, r2
    9a62:	0a12      	lsrs	r2, r2, #8
    9a64:	b292      	uxth	r2, r2
    9a66:	b2d2      	uxtb	r2, r2
    9a68:	701a      	strb	r2, [r3, #0]
    9a6a:	2392      	movs	r3, #146	; 0x92
    9a6c:	009b      	lsls	r3, r3, #2
    9a6e:	18fb      	adds	r3, r7, r3
    9a70:	681b      	ldr	r3, [r3, #0]
    9a72:	3310      	adds	r3, #16
    9a74:	2291      	movs	r2, #145	; 0x91
    9a76:	0092      	lsls	r2, r2, #2
    9a78:	18ba      	adds	r2, r7, r2
    9a7a:	6812      	ldr	r2, [r2, #0]
    9a7c:	0c12      	lsrs	r2, r2, #16
    9a7e:	b2d2      	uxtb	r2, r2
    9a80:	701a      	strb	r2, [r3, #0]
    9a82:	2392      	movs	r3, #146	; 0x92
    9a84:	009b      	lsls	r3, r3, #2
    9a86:	18fb      	adds	r3, r7, r3
    9a88:	681b      	ldr	r3, [r3, #0]
    9a8a:	3311      	adds	r3, #17
    9a8c:	2291      	movs	r2, #145	; 0x91
    9a8e:	0092      	lsls	r2, r2, #2
    9a90:	18ba      	adds	r2, r7, r2
    9a92:	6812      	ldr	r2, [r2, #0]
    9a94:	0e12      	lsrs	r2, r2, #24
    9a96:	b2d2      	uxtb	r2, r2
    9a98:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9a9a:	2392      	movs	r3, #146	; 0x92
    9a9c:	009b      	lsls	r3, r3, #2
    9a9e:	18fb      	adds	r3, r7, r3
    9aa0:	681b      	ldr	r3, [r3, #0]
    9aa2:	330b      	adds	r3, #11
    9aa4:	2200      	movs	r2, #0
    9aa6:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9aa8:	2392      	movs	r3, #146	; 0x92
    9aaa:	009b      	lsls	r3, r3, #2
    9aac:	18fb      	adds	r3, r7, r3
    9aae:	681b      	ldr	r3, [r3, #0]
    9ab0:	331c      	adds	r3, #28
    9ab2:	2200      	movs	r2, #0
    9ab4:	701a      	strb	r2, [r3, #0]
    9ab6:	2392      	movs	r3, #146	; 0x92
    9ab8:	009b      	lsls	r3, r3, #2
    9aba:	18fb      	adds	r3, r7, r3
    9abc:	681b      	ldr	r3, [r3, #0]
    9abe:	331d      	adds	r3, #29
    9ac0:	2200      	movs	r2, #0
    9ac2:	701a      	strb	r2, [r3, #0]
    9ac4:	2392      	movs	r3, #146	; 0x92
    9ac6:	009b      	lsls	r3, r3, #2
    9ac8:	18fb      	adds	r3, r7, r3
    9aca:	681b      	ldr	r3, [r3, #0]
    9acc:	331e      	adds	r3, #30
    9ace:	2200      	movs	r2, #0
    9ad0:	701a      	strb	r2, [r3, #0]
    9ad2:	2392      	movs	r3, #146	; 0x92
    9ad4:	009b      	lsls	r3, r3, #2
    9ad6:	18fb      	adds	r3, r7, r3
    9ad8:	681b      	ldr	r3, [r3, #0]
    9ada:	331f      	adds	r3, #31
    9adc:	2200      	movs	r2, #0
    9ade:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9ae0:	2392      	movs	r3, #146	; 0x92
    9ae2:	009b      	lsls	r3, r3, #2
    9ae4:	18fb      	adds	r3, r7, r3
    9ae6:	681b      	ldr	r3, [r3, #0]
    9ae8:	3315      	adds	r3, #21
    9aea:	781b      	ldrb	r3, [r3, #0]
    9aec:	021b      	lsls	r3, r3, #8
    9aee:	b21a      	sxth	r2, r3
    9af0:	2392      	movs	r3, #146	; 0x92
    9af2:	009b      	lsls	r3, r3, #2
    9af4:	18fb      	adds	r3, r7, r3
    9af6:	681b      	ldr	r3, [r3, #0]
    9af8:	3314      	adds	r3, #20
    9afa:	781b      	ldrb	r3, [r3, #0]
    9afc:	b21b      	sxth	r3, r3
    9afe:	4313      	orrs	r3, r2
    9b00:	b21b      	sxth	r3, r3
    9b02:	b29b      	uxth	r3, r3
    9b04:	041b      	lsls	r3, r3, #16
    9b06:	2292      	movs	r2, #146	; 0x92
    9b08:	0092      	lsls	r2, r2, #2
    9b0a:	18ba      	adds	r2, r7, r2
    9b0c:	6812      	ldr	r2, [r2, #0]
    9b0e:	321b      	adds	r2, #27
    9b10:	7812      	ldrb	r2, [r2, #0]
    9b12:	0212      	lsls	r2, r2, #8
    9b14:	b211      	sxth	r1, r2
    9b16:	2292      	movs	r2, #146	; 0x92
    9b18:	0092      	lsls	r2, r2, #2
    9b1a:	18ba      	adds	r2, r7, r2
    9b1c:	6812      	ldr	r2, [r2, #0]
    9b1e:	321a      	adds	r2, #26
    9b20:	7812      	ldrb	r2, [r2, #0]
    9b22:	b212      	sxth	r2, r2
    9b24:	430a      	orrs	r2, r1
    9b26:	b212      	sxth	r2, r2
    9b28:	b292      	uxth	r2, r2
    9b2a:	4313      	orrs	r3, r2
    9b2c:	2290      	movs	r2, #144	; 0x90
    9b2e:	0092      	lsls	r2, r2, #2
    9b30:	18ba      	adds	r2, r7, r2
    9b32:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9b34:	2392      	movs	r3, #146	; 0x92
    9b36:	009b      	lsls	r3, r3, #2
    9b38:	18fb      	adds	r3, r7, r3
    9b3a:	681b      	ldr	r3, [r3, #0]
    9b3c:	331a      	adds	r3, #26
    9b3e:	2200      	movs	r2, #0
    9b40:	701a      	strb	r2, [r3, #0]
    9b42:	2392      	movs	r3, #146	; 0x92
    9b44:	009b      	lsls	r3, r3, #2
    9b46:	18fb      	adds	r3, r7, r3
    9b48:	681b      	ldr	r3, [r3, #0]
    9b4a:	331b      	adds	r3, #27
    9b4c:	2200      	movs	r2, #0
    9b4e:	701a      	strb	r2, [r3, #0]
    9b50:	2392      	movs	r3, #146	; 0x92
    9b52:	009b      	lsls	r3, r3, #2
    9b54:	18fb      	adds	r3, r7, r3
    9b56:	681b      	ldr	r3, [r3, #0]
    9b58:	3314      	adds	r3, #20
    9b5a:	2200      	movs	r2, #0
    9b5c:	701a      	strb	r2, [r3, #0]
    9b5e:	2392      	movs	r3, #146	; 0x92
    9b60:	009b      	lsls	r3, r3, #2
    9b62:	18fb      	adds	r3, r7, r3
    9b64:	681b      	ldr	r3, [r3, #0]
    9b66:	3315      	adds	r3, #21
    9b68:	2200      	movs	r2, #0
    9b6a:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9b6c:	2387      	movs	r3, #135	; 0x87
    9b6e:	009b      	lsls	r3, r3, #2
    9b70:	18fb      	adds	r3, r7, r3
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	2201      	movs	r2, #1
    9b76:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9b78:	2390      	movs	r3, #144	; 0x90
    9b7a:	009b      	lsls	r3, r3, #2
    9b7c:	18fb      	adds	r3, r7, r3
    9b7e:	681b      	ldr	r3, [r3, #0]
    9b80:	2b00      	cmp	r3, #0
    9b82:	d100      	bne.n	9b86 <f_open+0x2fe>
    9b84:	e076      	b.n	9c74 <f_open+0x3ec>
				dw = dj.fs->winsect;
    9b86:	2387      	movs	r3, #135	; 0x87
    9b88:	009b      	lsls	r3, r3, #2
    9b8a:	18fb      	adds	r3, r7, r3
    9b8c:	681b      	ldr	r3, [r3, #0]
    9b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9b90:	2291      	movs	r2, #145	; 0x91
    9b92:	0092      	lsls	r2, r2, #2
    9b94:	18ba      	adds	r2, r7, r2
    9b96:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9b98:	2387      	movs	r3, #135	; 0x87
    9b9a:	009b      	lsls	r3, r3, #2
    9b9c:	18fb      	adds	r3, r7, r3
    9b9e:	681b      	ldr	r3, [r3, #0]
    9ba0:	4a21      	ldr	r2, [pc, #132]	; (9c28 <f_open+0x3a0>)
    9ba2:	18bc      	adds	r4, r7, r2
    9ba4:	2290      	movs	r2, #144	; 0x90
    9ba6:	0092      	lsls	r2, r2, #2
    9ba8:	18ba      	adds	r2, r7, r2
    9baa:	6812      	ldr	r2, [r2, #0]
    9bac:	0011      	movs	r1, r2
    9bae:	0018      	movs	r0, r3
    9bb0:	4b22      	ldr	r3, [pc, #136]	; (9c3c <f_open+0x3b4>)
    9bb2:	4798      	blx	r3
    9bb4:	0003      	movs	r3, r0
    9bb6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9bb8:	4b1b      	ldr	r3, [pc, #108]	; (9c28 <f_open+0x3a0>)
    9bba:	18fb      	adds	r3, r7, r3
    9bbc:	781b      	ldrb	r3, [r3, #0]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	d158      	bne.n	9c74 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9bc2:	2387      	movs	r3, #135	; 0x87
    9bc4:	009b      	lsls	r3, r3, #2
    9bc6:	18fb      	adds	r3, r7, r3
    9bc8:	681b      	ldr	r3, [r3, #0]
    9bca:	2290      	movs	r2, #144	; 0x90
    9bcc:	0092      	lsls	r2, r2, #2
    9bce:	18ba      	adds	r2, r7, r2
    9bd0:	6812      	ldr	r2, [r2, #0]
    9bd2:	3a01      	subs	r2, #1
    9bd4:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9bd6:	2387      	movs	r3, #135	; 0x87
    9bd8:	009b      	lsls	r3, r3, #2
    9bda:	18fb      	adds	r3, r7, r3
    9bdc:	681b      	ldr	r3, [r3, #0]
    9bde:	4a12      	ldr	r2, [pc, #72]	; (9c28 <f_open+0x3a0>)
    9be0:	18bc      	adds	r4, r7, r2
    9be2:	2291      	movs	r2, #145	; 0x91
    9be4:	0092      	lsls	r2, r2, #2
    9be6:	18ba      	adds	r2, r7, r2
    9be8:	6812      	ldr	r2, [r2, #0]
    9bea:	0011      	movs	r1, r2
    9bec:	0018      	movs	r0, r3
    9bee:	4b14      	ldr	r3, [pc, #80]	; (9c40 <f_open+0x3b8>)
    9bf0:	4798      	blx	r3
    9bf2:	0003      	movs	r3, r0
    9bf4:	7023      	strb	r3, [r4, #0]
    9bf6:	e03d      	b.n	9c74 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9bf8:	4b0b      	ldr	r3, [pc, #44]	; (9c28 <f_open+0x3a0>)
    9bfa:	18fb      	adds	r3, r7, r3
    9bfc:	781b      	ldrb	r3, [r3, #0]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d138      	bne.n	9c74 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9c02:	2392      	movs	r3, #146	; 0x92
    9c04:	009b      	lsls	r3, r3, #2
    9c06:	18fb      	adds	r3, r7, r3
    9c08:	681b      	ldr	r3, [r3, #0]
    9c0a:	330b      	adds	r3, #11
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	001a      	movs	r2, r3
    9c10:	2310      	movs	r3, #16
    9c12:	4013      	ands	r3, r2
    9c14:	d016      	beq.n	9c44 <f_open+0x3bc>
				res = FR_NO_FILE;
    9c16:	4b04      	ldr	r3, [pc, #16]	; (9c28 <f_open+0x3a0>)
    9c18:	18fb      	adds	r3, r7, r3
    9c1a:	2204      	movs	r2, #4
    9c1c:	701a      	strb	r2, [r3, #0]
    9c1e:	e029      	b.n	9c74 <f_open+0x3ec>
    9c20:	fffffdac 	.word	0xfffffdac
    9c24:	fffffdb7 	.word	0xfffffdb7
    9c28:	0000024f 	.word	0x0000024f
    9c2c:	000091e1 	.word	0x000091e1
    9c30:	00008fd5 	.word	0x00008fd5
    9c34:	00008825 	.word	0x00008825
    9c38:	0000761d 	.word	0x0000761d
    9c3c:	00007da1 	.word	0x00007da1
    9c40:	00007761 	.word	0x00007761
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9c44:	4b5a      	ldr	r3, [pc, #360]	; (9db0 <f_open+0x528>)
    9c46:	2294      	movs	r2, #148	; 0x94
    9c48:	0092      	lsls	r2, r2, #2
    9c4a:	4694      	mov	ip, r2
    9c4c:	44bc      	add	ip, r7
    9c4e:	4463      	add	r3, ip
    9c50:	781b      	ldrb	r3, [r3, #0]
    9c52:	2202      	movs	r2, #2
    9c54:	4013      	ands	r3, r2
    9c56:	d00d      	beq.n	9c74 <f_open+0x3ec>
    9c58:	2392      	movs	r3, #146	; 0x92
    9c5a:	009b      	lsls	r3, r3, #2
    9c5c:	18fb      	adds	r3, r7, r3
    9c5e:	681b      	ldr	r3, [r3, #0]
    9c60:	330b      	adds	r3, #11
    9c62:	781b      	ldrb	r3, [r3, #0]
    9c64:	001a      	movs	r2, r3
    9c66:	2301      	movs	r3, #1
    9c68:	4013      	ands	r3, r2
    9c6a:	d003      	beq.n	9c74 <f_open+0x3ec>
					res = FR_DENIED;
    9c6c:	4b51      	ldr	r3, [pc, #324]	; (9db4 <f_open+0x52c>)
    9c6e:	18fb      	adds	r3, r7, r3
    9c70:	2207      	movs	r2, #7
    9c72:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9c74:	4b4f      	ldr	r3, [pc, #316]	; (9db4 <f_open+0x52c>)
    9c76:	18fb      	adds	r3, r7, r3
    9c78:	781b      	ldrb	r3, [r3, #0]
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	d126      	bne.n	9ccc <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    9c7e:	4b4c      	ldr	r3, [pc, #304]	; (9db0 <f_open+0x528>)
    9c80:	2294      	movs	r2, #148	; 0x94
    9c82:	0092      	lsls	r2, r2, #2
    9c84:	4694      	mov	ip, r2
    9c86:	44bc      	add	ip, r7
    9c88:	4463      	add	r3, ip
    9c8a:	781b      	ldrb	r3, [r3, #0]
    9c8c:	2208      	movs	r2, #8
    9c8e:	4013      	ands	r3, r2
    9c90:	d00f      	beq.n	9cb2 <f_open+0x42a>
			mode |= FA__WRITTEN;
    9c92:	4b47      	ldr	r3, [pc, #284]	; (9db0 <f_open+0x528>)
    9c94:	2294      	movs	r2, #148	; 0x94
    9c96:	0092      	lsls	r2, r2, #2
    9c98:	4694      	mov	ip, r2
    9c9a:	44bc      	add	ip, r7
    9c9c:	4463      	add	r3, ip
    9c9e:	4a44      	ldr	r2, [pc, #272]	; (9db0 <f_open+0x528>)
    9ca0:	2194      	movs	r1, #148	; 0x94
    9ca2:	0089      	lsls	r1, r1, #2
    9ca4:	468c      	mov	ip, r1
    9ca6:	44bc      	add	ip, r7
    9ca8:	4462      	add	r2, ip
    9caa:	7812      	ldrb	r2, [r2, #0]
    9cac:	2120      	movs	r1, #32
    9cae:	430a      	orrs	r2, r1
    9cb0:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9cb2:	2387      	movs	r3, #135	; 0x87
    9cb4:	009b      	lsls	r3, r3, #2
    9cb6:	18fb      	adds	r3, r7, r3
    9cb8:	681b      	ldr	r3, [r3, #0]
    9cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9cbc:	68fb      	ldr	r3, [r7, #12]
    9cbe:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    9cc0:	68fb      	ldr	r3, [r7, #12]
    9cc2:	2292      	movs	r2, #146	; 0x92
    9cc4:	0092      	lsls	r2, r2, #2
    9cc6:	18ba      	adds	r2, r7, r2
    9cc8:	6812      	ldr	r2, [r2, #0]
    9cca:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9ccc:	4b39      	ldr	r3, [pc, #228]	; (9db4 <f_open+0x52c>)
    9cce:	18fb      	adds	r3, r7, r3
    9cd0:	781b      	ldrb	r3, [r3, #0]
    9cd2:	2b00      	cmp	r3, #0
    9cd4:	d163      	bne.n	9d9e <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9cd6:	68fb      	ldr	r3, [r7, #12]
    9cd8:	4a35      	ldr	r2, [pc, #212]	; (9db0 <f_open+0x528>)
    9cda:	2194      	movs	r1, #148	; 0x94
    9cdc:	0089      	lsls	r1, r1, #2
    9cde:	468c      	mov	ip, r1
    9ce0:	44bc      	add	ip, r7
    9ce2:	4462      	add	r2, ip
    9ce4:	7812      	ldrb	r2, [r2, #0]
    9ce6:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    9ce8:	2392      	movs	r3, #146	; 0x92
    9cea:	009b      	lsls	r3, r3, #2
    9cec:	18fb      	adds	r3, r7, r3
    9cee:	681b      	ldr	r3, [r3, #0]
    9cf0:	3315      	adds	r3, #21
    9cf2:	781b      	ldrb	r3, [r3, #0]
    9cf4:	021b      	lsls	r3, r3, #8
    9cf6:	b21a      	sxth	r2, r3
    9cf8:	2392      	movs	r3, #146	; 0x92
    9cfa:	009b      	lsls	r3, r3, #2
    9cfc:	18fb      	adds	r3, r7, r3
    9cfe:	681b      	ldr	r3, [r3, #0]
    9d00:	3314      	adds	r3, #20
    9d02:	781b      	ldrb	r3, [r3, #0]
    9d04:	b21b      	sxth	r3, r3
    9d06:	4313      	orrs	r3, r2
    9d08:	b21b      	sxth	r3, r3
    9d0a:	b29b      	uxth	r3, r3
    9d0c:	041b      	lsls	r3, r3, #16
    9d0e:	2292      	movs	r2, #146	; 0x92
    9d10:	0092      	lsls	r2, r2, #2
    9d12:	18ba      	adds	r2, r7, r2
    9d14:	6812      	ldr	r2, [r2, #0]
    9d16:	321b      	adds	r2, #27
    9d18:	7812      	ldrb	r2, [r2, #0]
    9d1a:	0212      	lsls	r2, r2, #8
    9d1c:	b211      	sxth	r1, r2
    9d1e:	2292      	movs	r2, #146	; 0x92
    9d20:	0092      	lsls	r2, r2, #2
    9d22:	18ba      	adds	r2, r7, r2
    9d24:	6812      	ldr	r2, [r2, #0]
    9d26:	321a      	adds	r2, #26
    9d28:	7812      	ldrb	r2, [r2, #0]
    9d2a:	b212      	sxth	r2, r2
    9d2c:	430a      	orrs	r2, r1
    9d2e:	b212      	sxth	r2, r2
    9d30:	b292      	uxth	r2, r2
    9d32:	431a      	orrs	r2, r3
    9d34:	68fb      	ldr	r3, [r7, #12]
    9d36:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9d38:	2392      	movs	r3, #146	; 0x92
    9d3a:	009b      	lsls	r3, r3, #2
    9d3c:	18fb      	adds	r3, r7, r3
    9d3e:	681b      	ldr	r3, [r3, #0]
    9d40:	331f      	adds	r3, #31
    9d42:	781b      	ldrb	r3, [r3, #0]
    9d44:	061a      	lsls	r2, r3, #24
    9d46:	2392      	movs	r3, #146	; 0x92
    9d48:	009b      	lsls	r3, r3, #2
    9d4a:	18fb      	adds	r3, r7, r3
    9d4c:	681b      	ldr	r3, [r3, #0]
    9d4e:	331e      	adds	r3, #30
    9d50:	781b      	ldrb	r3, [r3, #0]
    9d52:	041b      	lsls	r3, r3, #16
    9d54:	4313      	orrs	r3, r2
    9d56:	2292      	movs	r2, #146	; 0x92
    9d58:	0092      	lsls	r2, r2, #2
    9d5a:	18ba      	adds	r2, r7, r2
    9d5c:	6812      	ldr	r2, [r2, #0]
    9d5e:	321d      	adds	r2, #29
    9d60:	7812      	ldrb	r2, [r2, #0]
    9d62:	0212      	lsls	r2, r2, #8
    9d64:	4313      	orrs	r3, r2
    9d66:	2292      	movs	r2, #146	; 0x92
    9d68:	0092      	lsls	r2, r2, #2
    9d6a:	18ba      	adds	r2, r7, r2
    9d6c:	6812      	ldr	r2, [r2, #0]
    9d6e:	321c      	adds	r2, #28
    9d70:	7812      	ldrb	r2, [r2, #0]
    9d72:	431a      	orrs	r2, r3
    9d74:	68fb      	ldr	r3, [r7, #12]
    9d76:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    9d78:	68fb      	ldr	r3, [r7, #12]
    9d7a:	2200      	movs	r2, #0
    9d7c:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    9d7e:	68fb      	ldr	r3, [r7, #12]
    9d80:	2200      	movs	r2, #0
    9d82:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9d84:	2387      	movs	r3, #135	; 0x87
    9d86:	009b      	lsls	r3, r3, #2
    9d88:	18fb      	adds	r3, r7, r3
    9d8a:	681a      	ldr	r2, [r3, #0]
    9d8c:	68fb      	ldr	r3, [r7, #12]
    9d8e:	601a      	str	r2, [r3, #0]
    9d90:	2387      	movs	r3, #135	; 0x87
    9d92:	009b      	lsls	r3, r3, #2
    9d94:	18fb      	adds	r3, r7, r3
    9d96:	681b      	ldr	r3, [r3, #0]
    9d98:	88da      	ldrh	r2, [r3, #6]
    9d9a:	68fb      	ldr	r3, [r7, #12]
    9d9c:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    9d9e:	4b05      	ldr	r3, [pc, #20]	; (9db4 <f_open+0x52c>)
    9da0:	18fb      	adds	r3, r7, r3
    9da2:	781b      	ldrb	r3, [r3, #0]
}
    9da4:	0018      	movs	r0, r3
    9da6:	46bd      	mov	sp, r7
    9da8:	2395      	movs	r3, #149	; 0x95
    9daa:	009b      	lsls	r3, r3, #2
    9dac:	449d      	add	sp, r3
    9dae:	bd90      	pop	{r4, r7, pc}
    9db0:	fffffdb7 	.word	0xfffffdb7
    9db4:	0000024f 	.word	0x0000024f

00009db8 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    9db8:	b590      	push	{r4, r7, lr}
    9dba:	b08d      	sub	sp, #52	; 0x34
    9dbc:	af00      	add	r7, sp, #0
    9dbe:	60f8      	str	r0, [r7, #12]
    9dc0:	60b9      	str	r1, [r7, #8]
    9dc2:	607a      	str	r2, [r7, #4]
    9dc4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    9dc6:	68bb      	ldr	r3, [r7, #8]
    9dc8:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    9dca:	683b      	ldr	r3, [r7, #0]
    9dcc:	2200      	movs	r2, #0
    9dce:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    9dd0:	68fb      	ldr	r3, [r7, #12]
    9dd2:	681a      	ldr	r2, [r3, #0]
    9dd4:	68fb      	ldr	r3, [r7, #12]
    9dd6:	889b      	ldrh	r3, [r3, #4]
    9dd8:	211f      	movs	r1, #31
    9dda:	187c      	adds	r4, r7, r1
    9ddc:	0019      	movs	r1, r3
    9dde:	0010      	movs	r0, r2
    9de0:	4b96      	ldr	r3, [pc, #600]	; (a03c <f_read+0x284>)
    9de2:	4798      	blx	r3
    9de4:	0003      	movs	r3, r0
    9de6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9de8:	231f      	movs	r3, #31
    9dea:	18fb      	adds	r3, r7, r3
    9dec:	781b      	ldrb	r3, [r3, #0]
    9dee:	2b00      	cmp	r3, #0
    9df0:	d003      	beq.n	9dfa <f_read+0x42>
    9df2:	231f      	movs	r3, #31
    9df4:	18fb      	adds	r3, r7, r3
    9df6:	781b      	ldrb	r3, [r3, #0]
    9df8:	e11b      	b.n	a032 <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    9dfa:	68fb      	ldr	r3, [r7, #12]
    9dfc:	799b      	ldrb	r3, [r3, #6]
    9dfe:	b25b      	sxtb	r3, r3
    9e00:	2b00      	cmp	r3, #0
    9e02:	da01      	bge.n	9e08 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    9e04:	2302      	movs	r3, #2
    9e06:	e114      	b.n	a032 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    9e08:	68fb      	ldr	r3, [r7, #12]
    9e0a:	799b      	ldrb	r3, [r3, #6]
    9e0c:	001a      	movs	r2, r3
    9e0e:	2301      	movs	r3, #1
    9e10:	4013      	ands	r3, r2
    9e12:	d101      	bne.n	9e18 <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    9e14:	2307      	movs	r3, #7
    9e16:	e10c      	b.n	a032 <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
    9e18:	68fb      	ldr	r3, [r7, #12]
    9e1a:	68da      	ldr	r2, [r3, #12]
    9e1c:	68fb      	ldr	r3, [r7, #12]
    9e1e:	689b      	ldr	r3, [r3, #8]
    9e20:	1ad3      	subs	r3, r2, r3
    9e22:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    9e24:	687a      	ldr	r2, [r7, #4]
    9e26:	69bb      	ldr	r3, [r7, #24]
    9e28:	429a      	cmp	r2, r3
    9e2a:	d800      	bhi.n	9e2e <f_read+0x76>
    9e2c:	e0fc      	b.n	a028 <f_read+0x270>
    9e2e:	69bb      	ldr	r3, [r7, #24]
    9e30:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    9e32:	e0f9      	b.n	a028 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    9e34:	68fb      	ldr	r3, [r7, #12]
    9e36:	689b      	ldr	r3, [r3, #8]
    9e38:	05db      	lsls	r3, r3, #23
    9e3a:	0ddb      	lsrs	r3, r3, #23
    9e3c:	d000      	beq.n	9e40 <f_read+0x88>
    9e3e:	e0b0      	b.n	9fa2 <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    9e40:	68fb      	ldr	r3, [r7, #12]
    9e42:	689b      	ldr	r3, [r3, #8]
    9e44:	0a5b      	lsrs	r3, r3, #9
    9e46:	b2da      	uxtb	r2, r3
    9e48:	68fb      	ldr	r3, [r7, #12]
    9e4a:	681b      	ldr	r3, [r3, #0]
    9e4c:	789b      	ldrb	r3, [r3, #2]
    9e4e:	3b01      	subs	r3, #1
    9e50:	b2d9      	uxtb	r1, r3
    9e52:	2317      	movs	r3, #23
    9e54:	18fb      	adds	r3, r7, r3
    9e56:	400a      	ands	r2, r1
    9e58:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    9e5a:	2317      	movs	r3, #23
    9e5c:	18fb      	adds	r3, r7, r3
    9e5e:	781b      	ldrb	r3, [r3, #0]
    9e60:	2b00      	cmp	r3, #0
    9e62:	d12e      	bne.n	9ec2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    9e64:	68fb      	ldr	r3, [r7, #12]
    9e66:	689b      	ldr	r3, [r3, #8]
    9e68:	2b00      	cmp	r3, #0
    9e6a:	d103      	bne.n	9e74 <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
    9e6c:	68fb      	ldr	r3, [r7, #12]
    9e6e:	691b      	ldr	r3, [r3, #16]
    9e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    9e72:	e009      	b.n	9e88 <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    9e74:	68fb      	ldr	r3, [r7, #12]
    9e76:	681a      	ldr	r2, [r3, #0]
    9e78:	68fb      	ldr	r3, [r7, #12]
    9e7a:	695b      	ldr	r3, [r3, #20]
    9e7c:	0019      	movs	r1, r3
    9e7e:	0010      	movs	r0, r2
    9e80:	4b6f      	ldr	r3, [pc, #444]	; (a040 <f_read+0x288>)
    9e82:	4798      	blx	r3
    9e84:	0003      	movs	r3, r0
    9e86:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    9e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9e8a:	2b01      	cmp	r3, #1
    9e8c:	d809      	bhi.n	9ea2 <f_read+0xea>
    9e8e:	68fb      	ldr	r3, [r7, #12]
    9e90:	799b      	ldrb	r3, [r3, #6]
    9e92:	2280      	movs	r2, #128	; 0x80
    9e94:	4252      	negs	r2, r2
    9e96:	4313      	orrs	r3, r2
    9e98:	b2da      	uxtb	r2, r3
    9e9a:	68fb      	ldr	r3, [r7, #12]
    9e9c:	719a      	strb	r2, [r3, #6]
    9e9e:	2302      	movs	r3, #2
    9ea0:	e0c7      	b.n	a032 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ea4:	3301      	adds	r3, #1
    9ea6:	d109      	bne.n	9ebc <f_read+0x104>
    9ea8:	68fb      	ldr	r3, [r7, #12]
    9eaa:	799b      	ldrb	r3, [r3, #6]
    9eac:	2280      	movs	r2, #128	; 0x80
    9eae:	4252      	negs	r2, r2
    9eb0:	4313      	orrs	r3, r2
    9eb2:	b2da      	uxtb	r2, r3
    9eb4:	68fb      	ldr	r3, [r7, #12]
    9eb6:	719a      	strb	r2, [r3, #6]
    9eb8:	2301      	movs	r3, #1
    9eba:	e0ba      	b.n	a032 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
    9ebc:	68fb      	ldr	r3, [r7, #12]
    9ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9ec0:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    9ec2:	68fb      	ldr	r3, [r7, #12]
    9ec4:	681a      	ldr	r2, [r3, #0]
    9ec6:	68fb      	ldr	r3, [r7, #12]
    9ec8:	695b      	ldr	r3, [r3, #20]
    9eca:	0019      	movs	r1, r3
    9ecc:	0010      	movs	r0, r2
    9ece:	4b5d      	ldr	r3, [pc, #372]	; (a044 <f_read+0x28c>)
    9ed0:	4798      	blx	r3
    9ed2:	0003      	movs	r3, r0
    9ed4:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9ed6:	693b      	ldr	r3, [r7, #16]
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d109      	bne.n	9ef0 <f_read+0x138>
    9edc:	68fb      	ldr	r3, [r7, #12]
    9ede:	799b      	ldrb	r3, [r3, #6]
    9ee0:	2280      	movs	r2, #128	; 0x80
    9ee2:	4252      	negs	r2, r2
    9ee4:	4313      	orrs	r3, r2
    9ee6:	b2da      	uxtb	r2, r3
    9ee8:	68fb      	ldr	r3, [r7, #12]
    9eea:	719a      	strb	r2, [r3, #6]
    9eec:	2302      	movs	r3, #2
    9eee:	e0a0      	b.n	a032 <f_read+0x27a>
			sect += csect;
    9ef0:	2317      	movs	r3, #23
    9ef2:	18fb      	adds	r3, r7, r3
    9ef4:	781b      	ldrb	r3, [r3, #0]
    9ef6:	693a      	ldr	r2, [r7, #16]
    9ef8:	18d3      	adds	r3, r2, r3
    9efa:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    9efc:	687b      	ldr	r3, [r7, #4]
    9efe:	0a5b      	lsrs	r3, r3, #9
    9f00:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    9f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f04:	2b00      	cmp	r3, #0
    9f06:	d049      	beq.n	9f9c <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9f08:	2317      	movs	r3, #23
    9f0a:	18fb      	adds	r3, r7, r3
    9f0c:	781a      	ldrb	r2, [r3, #0]
    9f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f10:	18d2      	adds	r2, r2, r3
    9f12:	68fb      	ldr	r3, [r7, #12]
    9f14:	681b      	ldr	r3, [r3, #0]
    9f16:	789b      	ldrb	r3, [r3, #2]
    9f18:	429a      	cmp	r2, r3
    9f1a:	d908      	bls.n	9f2e <f_read+0x176>
					cc = fp->fs->csize - csect;
    9f1c:	68fb      	ldr	r3, [r7, #12]
    9f1e:	681b      	ldr	r3, [r3, #0]
    9f20:	789b      	ldrb	r3, [r3, #2]
    9f22:	001a      	movs	r2, r3
    9f24:	2317      	movs	r3, #23
    9f26:	18fb      	adds	r3, r7, r3
    9f28:	781b      	ldrb	r3, [r3, #0]
    9f2a:	1ad3      	subs	r3, r2, r3
    9f2c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    9f2e:	68fb      	ldr	r3, [r7, #12]
    9f30:	681b      	ldr	r3, [r3, #0]
    9f32:	7858      	ldrb	r0, [r3, #1]
    9f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f36:	b2db      	uxtb	r3, r3
    9f38:	693a      	ldr	r2, [r7, #16]
    9f3a:	6a39      	ldr	r1, [r7, #32]
    9f3c:	4c42      	ldr	r4, [pc, #264]	; (a048 <f_read+0x290>)
    9f3e:	47a0      	blx	r4
    9f40:	1e03      	subs	r3, r0, #0
    9f42:	d009      	beq.n	9f58 <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
    9f44:	68fb      	ldr	r3, [r7, #12]
    9f46:	799b      	ldrb	r3, [r3, #6]
    9f48:	2280      	movs	r2, #128	; 0x80
    9f4a:	4252      	negs	r2, r2
    9f4c:	4313      	orrs	r3, r2
    9f4e:	b2da      	uxtb	r2, r3
    9f50:	68fb      	ldr	r3, [r7, #12]
    9f52:	719a      	strb	r2, [r3, #6]
    9f54:	2301      	movs	r3, #1
    9f56:	e06c      	b.n	a032 <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    9f58:	68fb      	ldr	r3, [r7, #12]
    9f5a:	681b      	ldr	r3, [r3, #0]
    9f5c:	791b      	ldrb	r3, [r3, #4]
    9f5e:	2b00      	cmp	r3, #0
    9f60:	d018      	beq.n	9f94 <f_read+0x1dc>
    9f62:	68fb      	ldr	r3, [r7, #12]
    9f64:	681b      	ldr	r3, [r3, #0]
    9f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f68:	693b      	ldr	r3, [r7, #16]
    9f6a:	1ad2      	subs	r2, r2, r3
    9f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f6e:	429a      	cmp	r2, r3
    9f70:	d210      	bcs.n	9f94 <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    9f72:	68fb      	ldr	r3, [r7, #12]
    9f74:	681b      	ldr	r3, [r3, #0]
    9f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f78:	693b      	ldr	r3, [r7, #16]
    9f7a:	1ad3      	subs	r3, r2, r3
    9f7c:	025b      	lsls	r3, r3, #9
    9f7e:	6a3a      	ldr	r2, [r7, #32]
    9f80:	18d0      	adds	r0, r2, r3
    9f82:	68fb      	ldr	r3, [r7, #12]
    9f84:	681b      	ldr	r3, [r3, #0]
    9f86:	3330      	adds	r3, #48	; 0x30
    9f88:	0019      	movs	r1, r3
    9f8a:	2380      	movs	r3, #128	; 0x80
    9f8c:	009b      	lsls	r3, r3, #2
    9f8e:	001a      	movs	r2, r3
    9f90:	4b2e      	ldr	r3, [pc, #184]	; (a04c <f_read+0x294>)
    9f92:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    9f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f96:	025b      	lsls	r3, r3, #9
    9f98:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    9f9a:	e031      	b.n	a000 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9f9c:	68fb      	ldr	r3, [r7, #12]
    9f9e:	693a      	ldr	r2, [r7, #16]
    9fa0:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9fa2:	68fb      	ldr	r3, [r7, #12]
    9fa4:	689b      	ldr	r3, [r3, #8]
    9fa6:	05db      	lsls	r3, r3, #23
    9fa8:	0ddb      	lsrs	r3, r3, #23
    9faa:	2280      	movs	r2, #128	; 0x80
    9fac:	0092      	lsls	r2, r2, #2
    9fae:	1ad3      	subs	r3, r2, r3
    9fb0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    9fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9fb4:	687b      	ldr	r3, [r7, #4]
    9fb6:	429a      	cmp	r2, r3
    9fb8:	d901      	bls.n	9fbe <f_read+0x206>
    9fba:	687b      	ldr	r3, [r7, #4]
    9fbc:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    9fbe:	68fb      	ldr	r3, [r7, #12]
    9fc0:	681a      	ldr	r2, [r3, #0]
    9fc2:	68fb      	ldr	r3, [r7, #12]
    9fc4:	699b      	ldr	r3, [r3, #24]
    9fc6:	0019      	movs	r1, r3
    9fc8:	0010      	movs	r0, r2
    9fca:	4b21      	ldr	r3, [pc, #132]	; (a050 <f_read+0x298>)
    9fcc:	4798      	blx	r3
    9fce:	1e03      	subs	r3, r0, #0
    9fd0:	d009      	beq.n	9fe6 <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
    9fd2:	68fb      	ldr	r3, [r7, #12]
    9fd4:	799b      	ldrb	r3, [r3, #6]
    9fd6:	2280      	movs	r2, #128	; 0x80
    9fd8:	4252      	negs	r2, r2
    9fda:	4313      	orrs	r3, r2
    9fdc:	b2da      	uxtb	r2, r3
    9fde:	68fb      	ldr	r3, [r7, #12]
    9fe0:	719a      	strb	r2, [r3, #6]
    9fe2:	2301      	movs	r3, #1
    9fe4:	e025      	b.n	a032 <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    9fe6:	68fb      	ldr	r3, [r7, #12]
    9fe8:	681a      	ldr	r2, [r3, #0]
    9fea:	68fb      	ldr	r3, [r7, #12]
    9fec:	689b      	ldr	r3, [r3, #8]
    9fee:	05db      	lsls	r3, r3, #23
    9ff0:	0ddb      	lsrs	r3, r3, #23
    9ff2:	3330      	adds	r3, #48	; 0x30
    9ff4:	18d1      	adds	r1, r2, r3
    9ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9ff8:	6a3b      	ldr	r3, [r7, #32]
    9ffa:	0018      	movs	r0, r3
    9ffc:	4b13      	ldr	r3, [pc, #76]	; (a04c <f_read+0x294>)
    9ffe:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a000:	6a3a      	ldr	r2, [r7, #32]
    a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a004:	18d3      	adds	r3, r2, r3
    a006:	623b      	str	r3, [r7, #32]
    a008:	68fb      	ldr	r3, [r7, #12]
    a00a:	689a      	ldr	r2, [r3, #8]
    a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a00e:	18d2      	adds	r2, r2, r3
    a010:	68fb      	ldr	r3, [r7, #12]
    a012:	609a      	str	r2, [r3, #8]
    a014:	683b      	ldr	r3, [r7, #0]
    a016:	681a      	ldr	r2, [r3, #0]
    a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a01a:	18d2      	adds	r2, r2, r3
    a01c:	683b      	ldr	r3, [r7, #0]
    a01e:	601a      	str	r2, [r3, #0]
    a020:	687a      	ldr	r2, [r7, #4]
    a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a024:	1ad3      	subs	r3, r2, r3
    a026:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	2b00      	cmp	r3, #0
    a02c:	d000      	beq.n	a030 <f_read+0x278>
    a02e:	e701      	b.n	9e34 <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    a030:	2300      	movs	r3, #0
}
    a032:	0018      	movs	r0, r3
    a034:	46bd      	mov	sp, r7
    a036:	b00d      	add	sp, #52	; 0x34
    a038:	bd90      	pop	{r4, r7, pc}
    a03a:	46c0      	nop			; (mov r8, r8)
    a03c:	000097dd 	.word	0x000097dd
    a040:	000079f9 	.word	0x000079f9
    a044:	000079c1 	.word	0x000079c1
    a048:	00007375 	.word	0x00007375
    a04c:	0000767d 	.word	0x0000767d
    a050:	00007761 	.word	0x00007761

0000a054 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    a054:	b590      	push	{r4, r7, lr}
    a056:	b08b      	sub	sp, #44	; 0x2c
    a058:	af00      	add	r7, sp, #0
    a05a:	60f8      	str	r0, [r7, #12]
    a05c:	60b9      	str	r1, [r7, #8]
    a05e:	607a      	str	r2, [r7, #4]
    a060:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    a062:	68bb      	ldr	r3, [r7, #8]
    a064:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    a066:	683b      	ldr	r3, [r7, #0]
    a068:	2200      	movs	r2, #0
    a06a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    a06c:	68fb      	ldr	r3, [r7, #12]
    a06e:	681a      	ldr	r2, [r3, #0]
    a070:	68fb      	ldr	r3, [r7, #12]
    a072:	889b      	ldrh	r3, [r3, #4]
    a074:	2117      	movs	r1, #23
    a076:	187c      	adds	r4, r7, r1
    a078:	0019      	movs	r1, r3
    a07a:	0010      	movs	r0, r2
    a07c:	4bc3      	ldr	r3, [pc, #780]	; (a38c <f_write+0x338>)
    a07e:	4798      	blx	r3
    a080:	0003      	movs	r3, r0
    a082:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a084:	2317      	movs	r3, #23
    a086:	18fb      	adds	r3, r7, r3
    a088:	781b      	ldrb	r3, [r3, #0]
    a08a:	2b00      	cmp	r3, #0
    a08c:	d003      	beq.n	a096 <f_write+0x42>
    a08e:	2317      	movs	r3, #23
    a090:	18fb      	adds	r3, r7, r3
    a092:	781b      	ldrb	r3, [r3, #0]
    a094:	e176      	b.n	a384 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    a096:	68fb      	ldr	r3, [r7, #12]
    a098:	799b      	ldrb	r3, [r3, #6]
    a09a:	b25b      	sxtb	r3, r3
    a09c:	2b00      	cmp	r3, #0
    a09e:	da01      	bge.n	a0a4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a0a0:	2302      	movs	r3, #2
    a0a2:	e16f      	b.n	a384 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    a0a4:	68fb      	ldr	r3, [r7, #12]
    a0a6:	799b      	ldrb	r3, [r3, #6]
    a0a8:	001a      	movs	r2, r3
    a0aa:	2302      	movs	r3, #2
    a0ac:	4013      	ands	r3, r2
    a0ae:	d101      	bne.n	a0b4 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a0b0:	2307      	movs	r3, #7
    a0b2:	e167      	b.n	a384 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    a0b4:	68fb      	ldr	r3, [r7, #12]
    a0b6:	68da      	ldr	r2, [r3, #12]
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	18d2      	adds	r2, r2, r3
    a0bc:	68fb      	ldr	r3, [r7, #12]
    a0be:	68db      	ldr	r3, [r3, #12]
    a0c0:	429a      	cmp	r2, r3
    a0c2:	d300      	bcc.n	a0c6 <f_write+0x72>
    a0c4:	e146      	b.n	a354 <f_write+0x300>
    a0c6:	2300      	movs	r3, #0
    a0c8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    a0ca:	e143      	b.n	a354 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    a0cc:	68fb      	ldr	r3, [r7, #12]
    a0ce:	689b      	ldr	r3, [r3, #8]
    a0d0:	05db      	lsls	r3, r3, #23
    a0d2:	0ddb      	lsrs	r3, r3, #23
    a0d4:	d000      	beq.n	a0d8 <f_write+0x84>
    a0d6:	e0f6      	b.n	a2c6 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a0d8:	68fb      	ldr	r3, [r7, #12]
    a0da:	689b      	ldr	r3, [r3, #8]
    a0dc:	0a5b      	lsrs	r3, r3, #9
    a0de:	b2da      	uxtb	r2, r3
    a0e0:	68fb      	ldr	r3, [r7, #12]
    a0e2:	681b      	ldr	r3, [r3, #0]
    a0e4:	789b      	ldrb	r3, [r3, #2]
    a0e6:	3b01      	subs	r3, #1
    a0e8:	b2d9      	uxtb	r1, r3
    a0ea:	2316      	movs	r3, #22
    a0ec:	18fb      	adds	r3, r7, r3
    a0ee:	400a      	ands	r2, r1
    a0f0:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    a0f2:	2316      	movs	r3, #22
    a0f4:	18fb      	adds	r3, r7, r3
    a0f6:	781b      	ldrb	r3, [r3, #0]
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d140      	bne.n	a17e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    a0fc:	68fb      	ldr	r3, [r7, #12]
    a0fe:	689b      	ldr	r3, [r3, #8]
    a100:	2b00      	cmp	r3, #0
    a102:	d111      	bne.n	a128 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    a104:	68fb      	ldr	r3, [r7, #12]
    a106:	691b      	ldr	r3, [r3, #16]
    a108:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a10c:	2b00      	cmp	r3, #0
    a10e:	d115      	bne.n	a13c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    a110:	68fb      	ldr	r3, [r7, #12]
    a112:	681b      	ldr	r3, [r3, #0]
    a114:	2100      	movs	r1, #0
    a116:	0018      	movs	r0, r3
    a118:	4b9d      	ldr	r3, [pc, #628]	; (a390 <f_write+0x33c>)
    a11a:	4798      	blx	r3
    a11c:	0003      	movs	r3, r0
    a11e:	627b      	str	r3, [r7, #36]	; 0x24
    a120:	68fb      	ldr	r3, [r7, #12]
    a122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a124:	611a      	str	r2, [r3, #16]
    a126:	e009      	b.n	a13c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    a128:	68fb      	ldr	r3, [r7, #12]
    a12a:	681a      	ldr	r2, [r3, #0]
    a12c:	68fb      	ldr	r3, [r7, #12]
    a12e:	695b      	ldr	r3, [r3, #20]
    a130:	0019      	movs	r1, r3
    a132:	0010      	movs	r0, r2
    a134:	4b96      	ldr	r3, [pc, #600]	; (a390 <f_write+0x33c>)
    a136:	4798      	blx	r3
    a138:	0003      	movs	r3, r0
    a13a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a13e:	2b00      	cmp	r3, #0
    a140:	d100      	bne.n	a144 <f_write+0xf0>
    a142:	e10c      	b.n	a35e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a146:	2b01      	cmp	r3, #1
    a148:	d109      	bne.n	a15e <f_write+0x10a>
    a14a:	68fb      	ldr	r3, [r7, #12]
    a14c:	799b      	ldrb	r3, [r3, #6]
    a14e:	2280      	movs	r2, #128	; 0x80
    a150:	4252      	negs	r2, r2
    a152:	4313      	orrs	r3, r2
    a154:	b2da      	uxtb	r2, r3
    a156:	68fb      	ldr	r3, [r7, #12]
    a158:	719a      	strb	r2, [r3, #6]
    a15a:	2302      	movs	r3, #2
    a15c:	e112      	b.n	a384 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a160:	3301      	adds	r3, #1
    a162:	d109      	bne.n	a178 <f_write+0x124>
    a164:	68fb      	ldr	r3, [r7, #12]
    a166:	799b      	ldrb	r3, [r3, #6]
    a168:	2280      	movs	r2, #128	; 0x80
    a16a:	4252      	negs	r2, r2
    a16c:	4313      	orrs	r3, r2
    a16e:	b2da      	uxtb	r2, r3
    a170:	68fb      	ldr	r3, [r7, #12]
    a172:	719a      	strb	r2, [r3, #6]
    a174:	2301      	movs	r3, #1
    a176:	e105      	b.n	a384 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    a178:	68fb      	ldr	r3, [r7, #12]
    a17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a17c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    a17e:	68fb      	ldr	r3, [r7, #12]
    a180:	681b      	ldr	r3, [r3, #0]
    a182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a184:	68fb      	ldr	r3, [r7, #12]
    a186:	699b      	ldr	r3, [r3, #24]
    a188:	429a      	cmp	r2, r3
    a18a:	d111      	bne.n	a1b0 <f_write+0x15c>
    a18c:	68fb      	ldr	r3, [r7, #12]
    a18e:	681b      	ldr	r3, [r3, #0]
    a190:	2100      	movs	r1, #0
    a192:	0018      	movs	r0, r3
    a194:	4b7f      	ldr	r3, [pc, #508]	; (a394 <f_write+0x340>)
    a196:	4798      	blx	r3
    a198:	1e03      	subs	r3, r0, #0
    a19a:	d009      	beq.n	a1b0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    a19c:	68fb      	ldr	r3, [r7, #12]
    a19e:	799b      	ldrb	r3, [r3, #6]
    a1a0:	2280      	movs	r2, #128	; 0x80
    a1a2:	4252      	negs	r2, r2
    a1a4:	4313      	orrs	r3, r2
    a1a6:	b2da      	uxtb	r2, r3
    a1a8:	68fb      	ldr	r3, [r7, #12]
    a1aa:	719a      	strb	r2, [r3, #6]
    a1ac:	2301      	movs	r3, #1
    a1ae:	e0e9      	b.n	a384 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a1b0:	68fb      	ldr	r3, [r7, #12]
    a1b2:	681a      	ldr	r2, [r3, #0]
    a1b4:	68fb      	ldr	r3, [r7, #12]
    a1b6:	695b      	ldr	r3, [r3, #20]
    a1b8:	0019      	movs	r1, r3
    a1ba:	0010      	movs	r0, r2
    a1bc:	4b76      	ldr	r3, [pc, #472]	; (a398 <f_write+0x344>)
    a1be:	4798      	blx	r3
    a1c0:	0003      	movs	r3, r0
    a1c2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a1c4:	693b      	ldr	r3, [r7, #16]
    a1c6:	2b00      	cmp	r3, #0
    a1c8:	d109      	bne.n	a1de <f_write+0x18a>
    a1ca:	68fb      	ldr	r3, [r7, #12]
    a1cc:	799b      	ldrb	r3, [r3, #6]
    a1ce:	2280      	movs	r2, #128	; 0x80
    a1d0:	4252      	negs	r2, r2
    a1d2:	4313      	orrs	r3, r2
    a1d4:	b2da      	uxtb	r2, r3
    a1d6:	68fb      	ldr	r3, [r7, #12]
    a1d8:	719a      	strb	r2, [r3, #6]
    a1da:	2302      	movs	r3, #2
    a1dc:	e0d2      	b.n	a384 <f_write+0x330>
			sect += csect;
    a1de:	2316      	movs	r3, #22
    a1e0:	18fb      	adds	r3, r7, r3
    a1e2:	781b      	ldrb	r3, [r3, #0]
    a1e4:	693a      	ldr	r2, [r7, #16]
    a1e6:	18d3      	adds	r3, r2, r3
    a1e8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    a1ea:	687b      	ldr	r3, [r7, #4]
    a1ec:	0a5b      	lsrs	r3, r3, #9
    a1ee:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    a1f0:	69fb      	ldr	r3, [r7, #28]
    a1f2:	2b00      	cmp	r3, #0
    a1f4:	d048      	beq.n	a288 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a1f6:	2316      	movs	r3, #22
    a1f8:	18fb      	adds	r3, r7, r3
    a1fa:	781a      	ldrb	r2, [r3, #0]
    a1fc:	69fb      	ldr	r3, [r7, #28]
    a1fe:	18d2      	adds	r2, r2, r3
    a200:	68fb      	ldr	r3, [r7, #12]
    a202:	681b      	ldr	r3, [r3, #0]
    a204:	789b      	ldrb	r3, [r3, #2]
    a206:	429a      	cmp	r2, r3
    a208:	d908      	bls.n	a21c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    a20a:	68fb      	ldr	r3, [r7, #12]
    a20c:	681b      	ldr	r3, [r3, #0]
    a20e:	789b      	ldrb	r3, [r3, #2]
    a210:	001a      	movs	r2, r3
    a212:	2316      	movs	r3, #22
    a214:	18fb      	adds	r3, r7, r3
    a216:	781b      	ldrb	r3, [r3, #0]
    a218:	1ad3      	subs	r3, r2, r3
    a21a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    a21c:	68fb      	ldr	r3, [r7, #12]
    a21e:	681b      	ldr	r3, [r3, #0]
    a220:	7858      	ldrb	r0, [r3, #1]
    a222:	69fb      	ldr	r3, [r7, #28]
    a224:	b2db      	uxtb	r3, r3
    a226:	693a      	ldr	r2, [r7, #16]
    a228:	69b9      	ldr	r1, [r7, #24]
    a22a:	4c5c      	ldr	r4, [pc, #368]	; (a39c <f_write+0x348>)
    a22c:	47a0      	blx	r4
    a22e:	1e03      	subs	r3, r0, #0
    a230:	d009      	beq.n	a246 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    a232:	68fb      	ldr	r3, [r7, #12]
    a234:	799b      	ldrb	r3, [r3, #6]
    a236:	2280      	movs	r2, #128	; 0x80
    a238:	4252      	negs	r2, r2
    a23a:	4313      	orrs	r3, r2
    a23c:	b2da      	uxtb	r2, r3
    a23e:	68fb      	ldr	r3, [r7, #12]
    a240:	719a      	strb	r2, [r3, #6]
    a242:	2301      	movs	r3, #1
    a244:	e09e      	b.n	a384 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    a246:	68fb      	ldr	r3, [r7, #12]
    a248:	681b      	ldr	r3, [r3, #0]
    a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a24c:	693b      	ldr	r3, [r7, #16]
    a24e:	1ad2      	subs	r2, r2, r3
    a250:	69fb      	ldr	r3, [r7, #28]
    a252:	429a      	cmp	r2, r3
    a254:	d214      	bcs.n	a280 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    a256:	68fb      	ldr	r3, [r7, #12]
    a258:	681b      	ldr	r3, [r3, #0]
    a25a:	3330      	adds	r3, #48	; 0x30
    a25c:	0018      	movs	r0, r3
    a25e:	68fb      	ldr	r3, [r7, #12]
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a264:	693b      	ldr	r3, [r7, #16]
    a266:	1ad3      	subs	r3, r2, r3
    a268:	025b      	lsls	r3, r3, #9
    a26a:	69ba      	ldr	r2, [r7, #24]
    a26c:	18d1      	adds	r1, r2, r3
    a26e:	2380      	movs	r3, #128	; 0x80
    a270:	009b      	lsls	r3, r3, #2
    a272:	001a      	movs	r2, r3
    a274:	4b4a      	ldr	r3, [pc, #296]	; (a3a0 <f_write+0x34c>)
    a276:	4798      	blx	r3
					fp->fs->wflag = 0;
    a278:	68fb      	ldr	r3, [r7, #12]
    a27a:	681b      	ldr	r3, [r3, #0]
    a27c:	2200      	movs	r2, #0
    a27e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a280:	69fb      	ldr	r3, [r7, #28]
    a282:	025b      	lsls	r3, r3, #9
    a284:	623b      	str	r3, [r7, #32]
				continue;
    a286:	e051      	b.n	a32c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a288:	68fb      	ldr	r3, [r7, #12]
    a28a:	689a      	ldr	r2, [r3, #8]
    a28c:	68fb      	ldr	r3, [r7, #12]
    a28e:	68db      	ldr	r3, [r3, #12]
    a290:	429a      	cmp	r2, r3
    a292:	d315      	bcc.n	a2c0 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a294:	68fb      	ldr	r3, [r7, #12]
    a296:	681b      	ldr	r3, [r3, #0]
    a298:	2100      	movs	r1, #0
    a29a:	0018      	movs	r0, r3
    a29c:	4b3d      	ldr	r3, [pc, #244]	; (a394 <f_write+0x340>)
    a29e:	4798      	blx	r3
    a2a0:	1e03      	subs	r3, r0, #0
    a2a2:	d009      	beq.n	a2b8 <f_write+0x264>
    a2a4:	68fb      	ldr	r3, [r7, #12]
    a2a6:	799b      	ldrb	r3, [r3, #6]
    a2a8:	2280      	movs	r2, #128	; 0x80
    a2aa:	4252      	negs	r2, r2
    a2ac:	4313      	orrs	r3, r2
    a2ae:	b2da      	uxtb	r2, r3
    a2b0:	68fb      	ldr	r3, [r7, #12]
    a2b2:	719a      	strb	r2, [r3, #6]
    a2b4:	2301      	movs	r3, #1
    a2b6:	e065      	b.n	a384 <f_write+0x330>
				fp->fs->winsect = sect;
    a2b8:	68fb      	ldr	r3, [r7, #12]
    a2ba:	681b      	ldr	r3, [r3, #0]
    a2bc:	693a      	ldr	r2, [r7, #16]
    a2be:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a2c0:	68fb      	ldr	r3, [r7, #12]
    a2c2:	693a      	ldr	r2, [r7, #16]
    a2c4:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a2c6:	68fb      	ldr	r3, [r7, #12]
    a2c8:	689b      	ldr	r3, [r3, #8]
    a2ca:	05db      	lsls	r3, r3, #23
    a2cc:	0ddb      	lsrs	r3, r3, #23
    a2ce:	2280      	movs	r2, #128	; 0x80
    a2d0:	0092      	lsls	r2, r2, #2
    a2d2:	1ad3      	subs	r3, r2, r3
    a2d4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a2d6:	6a3a      	ldr	r2, [r7, #32]
    a2d8:	687b      	ldr	r3, [r7, #4]
    a2da:	429a      	cmp	r2, r3
    a2dc:	d901      	bls.n	a2e2 <f_write+0x28e>
    a2de:	687b      	ldr	r3, [r7, #4]
    a2e0:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a2e2:	68fb      	ldr	r3, [r7, #12]
    a2e4:	681a      	ldr	r2, [r3, #0]
    a2e6:	68fb      	ldr	r3, [r7, #12]
    a2e8:	699b      	ldr	r3, [r3, #24]
    a2ea:	0019      	movs	r1, r3
    a2ec:	0010      	movs	r0, r2
    a2ee:	4b29      	ldr	r3, [pc, #164]	; (a394 <f_write+0x340>)
    a2f0:	4798      	blx	r3
    a2f2:	1e03      	subs	r3, r0, #0
    a2f4:	d009      	beq.n	a30a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a2f6:	68fb      	ldr	r3, [r7, #12]
    a2f8:	799b      	ldrb	r3, [r3, #6]
    a2fa:	2280      	movs	r2, #128	; 0x80
    a2fc:	4252      	negs	r2, r2
    a2fe:	4313      	orrs	r3, r2
    a300:	b2da      	uxtb	r2, r3
    a302:	68fb      	ldr	r3, [r7, #12]
    a304:	719a      	strb	r2, [r3, #6]
    a306:	2301      	movs	r3, #1
    a308:	e03c      	b.n	a384 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a30a:	68fb      	ldr	r3, [r7, #12]
    a30c:	681a      	ldr	r2, [r3, #0]
    a30e:	68fb      	ldr	r3, [r7, #12]
    a310:	689b      	ldr	r3, [r3, #8]
    a312:	05db      	lsls	r3, r3, #23
    a314:	0ddb      	lsrs	r3, r3, #23
    a316:	3330      	adds	r3, #48	; 0x30
    a318:	18d3      	adds	r3, r2, r3
    a31a:	6a3a      	ldr	r2, [r7, #32]
    a31c:	69b9      	ldr	r1, [r7, #24]
    a31e:	0018      	movs	r0, r3
    a320:	4b1f      	ldr	r3, [pc, #124]	; (a3a0 <f_write+0x34c>)
    a322:	4798      	blx	r3
		fp->fs->wflag = 1;
    a324:	68fb      	ldr	r3, [r7, #12]
    a326:	681b      	ldr	r3, [r3, #0]
    a328:	2201      	movs	r2, #1
    a32a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a32c:	69ba      	ldr	r2, [r7, #24]
    a32e:	6a3b      	ldr	r3, [r7, #32]
    a330:	18d3      	adds	r3, r2, r3
    a332:	61bb      	str	r3, [r7, #24]
    a334:	68fb      	ldr	r3, [r7, #12]
    a336:	689a      	ldr	r2, [r3, #8]
    a338:	6a3b      	ldr	r3, [r7, #32]
    a33a:	18d2      	adds	r2, r2, r3
    a33c:	68fb      	ldr	r3, [r7, #12]
    a33e:	609a      	str	r2, [r3, #8]
    a340:	683b      	ldr	r3, [r7, #0]
    a342:	681a      	ldr	r2, [r3, #0]
    a344:	6a3b      	ldr	r3, [r7, #32]
    a346:	18d2      	adds	r2, r2, r3
    a348:	683b      	ldr	r3, [r7, #0]
    a34a:	601a      	str	r2, [r3, #0]
    a34c:	687a      	ldr	r2, [r7, #4]
    a34e:	6a3b      	ldr	r3, [r7, #32]
    a350:	1ad3      	subs	r3, r2, r3
    a352:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a354:	687b      	ldr	r3, [r7, #4]
    a356:	2b00      	cmp	r3, #0
    a358:	d000      	beq.n	a35c <f_write+0x308>
    a35a:	e6b7      	b.n	a0cc <f_write+0x78>
    a35c:	e000      	b.n	a360 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a35e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a360:	68fb      	ldr	r3, [r7, #12]
    a362:	689a      	ldr	r2, [r3, #8]
    a364:	68fb      	ldr	r3, [r7, #12]
    a366:	68db      	ldr	r3, [r3, #12]
    a368:	429a      	cmp	r2, r3
    a36a:	d903      	bls.n	a374 <f_write+0x320>
    a36c:	68fb      	ldr	r3, [r7, #12]
    a36e:	689a      	ldr	r2, [r3, #8]
    a370:	68fb      	ldr	r3, [r7, #12]
    a372:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a374:	68fb      	ldr	r3, [r7, #12]
    a376:	799b      	ldrb	r3, [r3, #6]
    a378:	2220      	movs	r2, #32
    a37a:	4313      	orrs	r3, r2
    a37c:	b2da      	uxtb	r2, r3
    a37e:	68fb      	ldr	r3, [r7, #12]
    a380:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a382:	2300      	movs	r3, #0
}
    a384:	0018      	movs	r0, r3
    a386:	46bd      	mov	sp, r7
    a388:	b00b      	add	sp, #44	; 0x2c
    a38a:	bd90      	pop	{r4, r7, pc}
    a38c:	000097dd 	.word	0x000097dd
    a390:	00007e69 	.word	0x00007e69
    a394:	00007761 	.word	0x00007761
    a398:	000079c1 	.word	0x000079c1
    a39c:	0000744d 	.word	0x0000744d
    a3a0:	0000767d 	.word	0x0000767d

0000a3a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a3a4:	b590      	push	{r4, r7, lr}
    a3a6:	b087      	sub	sp, #28
    a3a8:	af00      	add	r7, sp, #0
    a3aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	681a      	ldr	r2, [r3, #0]
    a3b0:	687b      	ldr	r3, [r7, #4]
    a3b2:	889b      	ldrh	r3, [r3, #4]
    a3b4:	2117      	movs	r1, #23
    a3b6:	187c      	adds	r4, r7, r1
    a3b8:	0019      	movs	r1, r3
    a3ba:	0010      	movs	r0, r2
    a3bc:	4b55      	ldr	r3, [pc, #340]	; (a514 <f_sync+0x170>)
    a3be:	4798      	blx	r3
    a3c0:	0003      	movs	r3, r0
    a3c2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a3c4:	2317      	movs	r3, #23
    a3c6:	18fb      	adds	r3, r7, r3
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	2b00      	cmp	r3, #0
    a3cc:	d000      	beq.n	a3d0 <f_sync+0x2c>
    a3ce:	e09a      	b.n	a506 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a3d0:	687b      	ldr	r3, [r7, #4]
    a3d2:	799b      	ldrb	r3, [r3, #6]
    a3d4:	001a      	movs	r2, r3
    a3d6:	2320      	movs	r3, #32
    a3d8:	4013      	ands	r3, r2
    a3da:	d100      	bne.n	a3de <f_sync+0x3a>
    a3dc:	e093      	b.n	a506 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a3de:	687b      	ldr	r3, [r7, #4]
    a3e0:	681a      	ldr	r2, [r3, #0]
    a3e2:	687b      	ldr	r3, [r7, #4]
    a3e4:	69db      	ldr	r3, [r3, #28]
    a3e6:	2117      	movs	r1, #23
    a3e8:	187c      	adds	r4, r7, r1
    a3ea:	0019      	movs	r1, r3
    a3ec:	0010      	movs	r0, r2
    a3ee:	4b4a      	ldr	r3, [pc, #296]	; (a518 <f_sync+0x174>)
    a3f0:	4798      	blx	r3
    a3f2:	0003      	movs	r3, r0
    a3f4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a3f6:	2317      	movs	r3, #23
    a3f8:	18fb      	adds	r3, r7, r3
    a3fa:	781b      	ldrb	r3, [r3, #0]
    a3fc:	2b00      	cmp	r3, #0
    a3fe:	d000      	beq.n	a402 <f_sync+0x5e>
    a400:	e081      	b.n	a506 <f_sync+0x162>
				dir = fp->dir_ptr;
    a402:	687b      	ldr	r3, [r7, #4]
    a404:	6a1b      	ldr	r3, [r3, #32]
    a406:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a408:	693b      	ldr	r3, [r7, #16]
    a40a:	330b      	adds	r3, #11
    a40c:	693a      	ldr	r2, [r7, #16]
    a40e:	320b      	adds	r2, #11
    a410:	7812      	ldrb	r2, [r2, #0]
    a412:	2120      	movs	r1, #32
    a414:	430a      	orrs	r2, r1
    a416:	b2d2      	uxtb	r2, r2
    a418:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a41a:	693b      	ldr	r3, [r7, #16]
    a41c:	331c      	adds	r3, #28
    a41e:	001a      	movs	r2, r3
    a420:	687b      	ldr	r3, [r7, #4]
    a422:	68db      	ldr	r3, [r3, #12]
    a424:	b2db      	uxtb	r3, r3
    a426:	7013      	strb	r3, [r2, #0]
    a428:	693b      	ldr	r3, [r7, #16]
    a42a:	331d      	adds	r3, #29
    a42c:	001a      	movs	r2, r3
    a42e:	687b      	ldr	r3, [r7, #4]
    a430:	68db      	ldr	r3, [r3, #12]
    a432:	b29b      	uxth	r3, r3
    a434:	0a1b      	lsrs	r3, r3, #8
    a436:	b29b      	uxth	r3, r3
    a438:	b2db      	uxtb	r3, r3
    a43a:	7013      	strb	r3, [r2, #0]
    a43c:	693b      	ldr	r3, [r7, #16]
    a43e:	331e      	adds	r3, #30
    a440:	001a      	movs	r2, r3
    a442:	687b      	ldr	r3, [r7, #4]
    a444:	68db      	ldr	r3, [r3, #12]
    a446:	0c1b      	lsrs	r3, r3, #16
    a448:	b2db      	uxtb	r3, r3
    a44a:	7013      	strb	r3, [r2, #0]
    a44c:	693b      	ldr	r3, [r7, #16]
    a44e:	331f      	adds	r3, #31
    a450:	001a      	movs	r2, r3
    a452:	687b      	ldr	r3, [r7, #4]
    a454:	68db      	ldr	r3, [r3, #12]
    a456:	0e1b      	lsrs	r3, r3, #24
    a458:	b2db      	uxtb	r3, r3
    a45a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a45c:	693b      	ldr	r3, [r7, #16]
    a45e:	331a      	adds	r3, #26
    a460:	001a      	movs	r2, r3
    a462:	687b      	ldr	r3, [r7, #4]
    a464:	691b      	ldr	r3, [r3, #16]
    a466:	b2db      	uxtb	r3, r3
    a468:	7013      	strb	r3, [r2, #0]
    a46a:	693b      	ldr	r3, [r7, #16]
    a46c:	331b      	adds	r3, #27
    a46e:	001a      	movs	r2, r3
    a470:	687b      	ldr	r3, [r7, #4]
    a472:	691b      	ldr	r3, [r3, #16]
    a474:	b29b      	uxth	r3, r3
    a476:	0a1b      	lsrs	r3, r3, #8
    a478:	b29b      	uxth	r3, r3
    a47a:	b2db      	uxtb	r3, r3
    a47c:	7013      	strb	r3, [r2, #0]
    a47e:	693b      	ldr	r3, [r7, #16]
    a480:	3314      	adds	r3, #20
    a482:	001a      	movs	r2, r3
    a484:	687b      	ldr	r3, [r7, #4]
    a486:	691b      	ldr	r3, [r3, #16]
    a488:	0c1b      	lsrs	r3, r3, #16
    a48a:	b2db      	uxtb	r3, r3
    a48c:	7013      	strb	r3, [r2, #0]
    a48e:	693b      	ldr	r3, [r7, #16]
    a490:	3315      	adds	r3, #21
    a492:	001a      	movs	r2, r3
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	691b      	ldr	r3, [r3, #16]
    a498:	0c1b      	lsrs	r3, r3, #16
    a49a:	b29b      	uxth	r3, r3
    a49c:	0a1b      	lsrs	r3, r3, #8
    a49e:	b29b      	uxth	r3, r3
    a4a0:	b2db      	uxtb	r3, r3
    a4a2:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a4a4:	4b1d      	ldr	r3, [pc, #116]	; (a51c <f_sync+0x178>)
    a4a6:	4798      	blx	r3
    a4a8:	0003      	movs	r3, r0
    a4aa:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a4ac:	693b      	ldr	r3, [r7, #16]
    a4ae:	3316      	adds	r3, #22
    a4b0:	68fa      	ldr	r2, [r7, #12]
    a4b2:	b2d2      	uxtb	r2, r2
    a4b4:	701a      	strb	r2, [r3, #0]
    a4b6:	693b      	ldr	r3, [r7, #16]
    a4b8:	3317      	adds	r3, #23
    a4ba:	68fa      	ldr	r2, [r7, #12]
    a4bc:	b292      	uxth	r2, r2
    a4be:	0a12      	lsrs	r2, r2, #8
    a4c0:	b292      	uxth	r2, r2
    a4c2:	b2d2      	uxtb	r2, r2
    a4c4:	701a      	strb	r2, [r3, #0]
    a4c6:	693b      	ldr	r3, [r7, #16]
    a4c8:	3318      	adds	r3, #24
    a4ca:	68fa      	ldr	r2, [r7, #12]
    a4cc:	0c12      	lsrs	r2, r2, #16
    a4ce:	b2d2      	uxtb	r2, r2
    a4d0:	701a      	strb	r2, [r3, #0]
    a4d2:	693b      	ldr	r3, [r7, #16]
    a4d4:	3319      	adds	r3, #25
    a4d6:	68fa      	ldr	r2, [r7, #12]
    a4d8:	0e12      	lsrs	r2, r2, #24
    a4da:	b2d2      	uxtb	r2, r2
    a4dc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a4de:	687b      	ldr	r3, [r7, #4]
    a4e0:	799b      	ldrb	r3, [r3, #6]
    a4e2:	2220      	movs	r2, #32
    a4e4:	4393      	bics	r3, r2
    a4e6:	b2da      	uxtb	r2, r3
    a4e8:	687b      	ldr	r3, [r7, #4]
    a4ea:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a4ec:	687b      	ldr	r3, [r7, #4]
    a4ee:	681b      	ldr	r3, [r3, #0]
    a4f0:	2201      	movs	r2, #1
    a4f2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a4f4:	687b      	ldr	r3, [r7, #4]
    a4f6:	681b      	ldr	r3, [r3, #0]
    a4f8:	2217      	movs	r2, #23
    a4fa:	18bc      	adds	r4, r7, r2
    a4fc:	0018      	movs	r0, r3
    a4fe:	4b08      	ldr	r3, [pc, #32]	; (a520 <f_sync+0x17c>)
    a500:	4798      	blx	r3
    a502:	0003      	movs	r3, r0
    a504:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    a506:	2317      	movs	r3, #23
    a508:	18fb      	adds	r3, r7, r3
    a50a:	781b      	ldrb	r3, [r3, #0]
}
    a50c:	0018      	movs	r0, r3
    a50e:	46bd      	mov	sp, r7
    a510:	b007      	add	sp, #28
    a512:	bd90      	pop	{r4, r7, pc}
    a514:	000097dd 	.word	0x000097dd
    a518:	00007761 	.word	0x00007761
    a51c:	0000761d 	.word	0x0000761d
    a520:	00007829 	.word	0x00007829

0000a524 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    a524:	b590      	push	{r4, r7, lr}
    a526:	b085      	sub	sp, #20
    a528:	af00      	add	r7, sp, #0
    a52a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    a52c:	230f      	movs	r3, #15
    a52e:	18fc      	adds	r4, r7, r3
    a530:	687b      	ldr	r3, [r7, #4]
    a532:	0018      	movs	r0, r3
    a534:	4b09      	ldr	r3, [pc, #36]	; (a55c <f_close+0x38>)
    a536:	4798      	blx	r3
    a538:	0003      	movs	r3, r0
    a53a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    a53c:	230f      	movs	r3, #15
    a53e:	18fb      	adds	r3, r7, r3
    a540:	781b      	ldrb	r3, [r3, #0]
    a542:	2b00      	cmp	r3, #0
    a544:	d102      	bne.n	a54c <f_close+0x28>
    a546:	687b      	ldr	r3, [r7, #4]
    a548:	2200      	movs	r2, #0
    a54a:	601a      	str	r2, [r3, #0]
	return res;
    a54c:	230f      	movs	r3, #15
    a54e:	18fb      	adds	r3, r7, r3
    a550:	781b      	ldrb	r3, [r3, #0]
#endif
}
    a552:	0018      	movs	r0, r3
    a554:	46bd      	mov	sp, r7
    a556:	b005      	add	sp, #20
    a558:	bd90      	pop	{r4, r7, pc}
    a55a:	46c0      	nop			; (mov r8, r8)
    a55c:	0000a3a5 	.word	0x0000a3a5

0000a560 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    a560:	b590      	push	{r4, r7, lr}
    a562:	b087      	sub	sp, #28
    a564:	af00      	add	r7, sp, #0
    a566:	0002      	movs	r2, r0
    a568:	6039      	str	r1, [r7, #0]
    a56a:	1dfb      	adds	r3, r7, #7
    a56c:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    a56e:	230c      	movs	r3, #12
    a570:	18fb      	adds	r3, r7, r3
    a572:	1dfa      	adds	r2, r7, #7
    a574:	7812      	ldrb	r2, [r2, #0]
    a576:	701a      	strb	r2, [r3, #0]
	btw = 1;
    a578:	2301      	movs	r3, #1
    a57a:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    a57c:	2310      	movs	r3, #16
    a57e:	18fb      	adds	r3, r7, r3
    a580:	697a      	ldr	r2, [r7, #20]
    a582:	210c      	movs	r1, #12
    a584:	1879      	adds	r1, r7, r1
    a586:	6838      	ldr	r0, [r7, #0]
    a588:	4c06      	ldr	r4, [pc, #24]	; (a5a4 <f_putc+0x44>)
    a58a:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    a58c:	693a      	ldr	r2, [r7, #16]
    a58e:	697b      	ldr	r3, [r7, #20]
    a590:	429a      	cmp	r2, r3
    a592:	d101      	bne.n	a598 <f_putc+0x38>
    a594:	2301      	movs	r3, #1
    a596:	e001      	b.n	a59c <f_putc+0x3c>
    a598:	2301      	movs	r3, #1
    a59a:	425b      	negs	r3, r3
}
    a59c:	0018      	movs	r0, r3
    a59e:	46bd      	mov	sp, r7
    a5a0:	b007      	add	sp, #28
    a5a2:	bd90      	pop	{r4, r7, pc}
    a5a4:	0000a055 	.word	0x0000a055

0000a5a8 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    a5a8:	b580      	push	{r7, lr}
    a5aa:	b084      	sub	sp, #16
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	6078      	str	r0, [r7, #4]
    a5b0:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    a5b2:	2300      	movs	r3, #0
    a5b4:	60fb      	str	r3, [r7, #12]
    a5b6:	e012      	b.n	a5de <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	781b      	ldrb	r3, [r3, #0]
    a5bc:	683a      	ldr	r2, [r7, #0]
    a5be:	0011      	movs	r1, r2
    a5c0:	0018      	movs	r0, r3
    a5c2:	4b0b      	ldr	r3, [pc, #44]	; (a5f0 <f_puts+0x48>)
    a5c4:	4798      	blx	r3
    a5c6:	0003      	movs	r3, r0
    a5c8:	3301      	adds	r3, #1
    a5ca:	d102      	bne.n	a5d2 <f_puts+0x2a>
    a5cc:	2301      	movs	r3, #1
    a5ce:	425b      	negs	r3, r3
    a5d0:	e00a      	b.n	a5e8 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    a5d2:	687b      	ldr	r3, [r7, #4]
    a5d4:	3301      	adds	r3, #1
    a5d6:	607b      	str	r3, [r7, #4]
    a5d8:	68fb      	ldr	r3, [r7, #12]
    a5da:	3301      	adds	r3, #1
    a5dc:	60fb      	str	r3, [r7, #12]
    a5de:	687b      	ldr	r3, [r7, #4]
    a5e0:	781b      	ldrb	r3, [r3, #0]
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d1e8      	bne.n	a5b8 <f_puts+0x10>
	}
	return n;
    a5e6:	68fb      	ldr	r3, [r7, #12]
}
    a5e8:	0018      	movs	r0, r3
    a5ea:	46bd      	mov	sp, r7
    a5ec:	b004      	add	sp, #16
    a5ee:	bd80      	pop	{r7, pc}
    a5f0:	0000a561 	.word	0x0000a561

0000a5f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	b084      	sub	sp, #16
    a5f8:	af00      	add	r7, sp, #0
    a5fa:	0002      	movs	r2, r0
    a5fc:	6039      	str	r1, [r7, #0]
    a5fe:	1dbb      	adds	r3, r7, #6
    a600:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    a602:	1dbb      	adds	r3, r7, #6
    a604:	881b      	ldrh	r3, [r3, #0]
    a606:	2b7f      	cmp	r3, #127	; 0x7f
    a608:	d805      	bhi.n	a616 <ff_convert+0x22>
		c = src;
    a60a:	230e      	movs	r3, #14
    a60c:	18fb      	adds	r3, r7, r3
    a60e:	1dba      	adds	r2, r7, #6
    a610:	8812      	ldrh	r2, [r2, #0]
    a612:	801a      	strh	r2, [r3, #0]
    a614:	e03a      	b.n	a68c <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    a616:	683b      	ldr	r3, [r7, #0]
    a618:	2b00      	cmp	r3, #0
    a61a:	d010      	beq.n	a63e <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    a61c:	1dbb      	adds	r3, r7, #6
    a61e:	881b      	ldrh	r3, [r3, #0]
    a620:	2bff      	cmp	r3, #255	; 0xff
    a622:	d807      	bhi.n	a634 <ff_convert+0x40>
    a624:	1dbb      	adds	r3, r7, #6
    a626:	881b      	ldrh	r3, [r3, #0]
    a628:	3b80      	subs	r3, #128	; 0x80
    a62a:	001a      	movs	r2, r3
    a62c:	4b1b      	ldr	r3, [pc, #108]	; (a69c <ff_convert+0xa8>)
    a62e:	0052      	lsls	r2, r2, #1
    a630:	5ad2      	ldrh	r2, [r2, r3]
    a632:	e000      	b.n	a636 <ff_convert+0x42>
    a634:	2200      	movs	r2, #0
    a636:	230e      	movs	r3, #14
    a638:	18fb      	adds	r3, r7, r3
    a63a:	801a      	strh	r2, [r3, #0]
    a63c:	e026      	b.n	a68c <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    a63e:	230e      	movs	r3, #14
    a640:	18fb      	adds	r3, r7, r3
    a642:	2200      	movs	r2, #0
    a644:	801a      	strh	r2, [r3, #0]
    a646:	e010      	b.n	a66a <ff_convert+0x76>
				if (src == Tbl[c]) break;
    a648:	230e      	movs	r3, #14
    a64a:	18fb      	adds	r3, r7, r3
    a64c:	881a      	ldrh	r2, [r3, #0]
    a64e:	4b13      	ldr	r3, [pc, #76]	; (a69c <ff_convert+0xa8>)
    a650:	0052      	lsls	r2, r2, #1
    a652:	5ad3      	ldrh	r3, [r2, r3]
    a654:	1dba      	adds	r2, r7, #6
    a656:	8812      	ldrh	r2, [r2, #0]
    a658:	429a      	cmp	r2, r3
    a65a:	d00c      	beq.n	a676 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    a65c:	230e      	movs	r3, #14
    a65e:	18fb      	adds	r3, r7, r3
    a660:	881a      	ldrh	r2, [r3, #0]
    a662:	230e      	movs	r3, #14
    a664:	18fb      	adds	r3, r7, r3
    a666:	3201      	adds	r2, #1
    a668:	801a      	strh	r2, [r3, #0]
    a66a:	230e      	movs	r3, #14
    a66c:	18fb      	adds	r3, r7, r3
    a66e:	881b      	ldrh	r3, [r3, #0]
    a670:	2b7f      	cmp	r3, #127	; 0x7f
    a672:	d9e9      	bls.n	a648 <ff_convert+0x54>
    a674:	e000      	b.n	a678 <ff_convert+0x84>
				if (src == Tbl[c]) break;
    a676:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    a678:	230e      	movs	r3, #14
    a67a:	18fb      	adds	r3, r7, r3
    a67c:	881b      	ldrh	r3, [r3, #0]
    a67e:	3380      	adds	r3, #128	; 0x80
    a680:	b29a      	uxth	r2, r3
    a682:	230e      	movs	r3, #14
    a684:	18fb      	adds	r3, r7, r3
    a686:	21ff      	movs	r1, #255	; 0xff
    a688:	400a      	ands	r2, r1
    a68a:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    a68c:	230e      	movs	r3, #14
    a68e:	18fb      	adds	r3, r7, r3
    a690:	881b      	ldrh	r3, [r3, #0]
}
    a692:	0018      	movs	r0, r3
    a694:	46bd      	mov	sp, r7
    a696:	b004      	add	sp, #16
    a698:	bd80      	pop	{r7, pc}
    a69a:	46c0      	nop			; (mov r8, r8)
    a69c:	0000c498 	.word	0x0000c498

0000a6a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    a6a0:	b580      	push	{r7, lr}
    a6a2:	b084      	sub	sp, #16
    a6a4:	af00      	add	r7, sp, #0
    a6a6:	0002      	movs	r2, r0
    a6a8:	1dbb      	adds	r3, r7, #6
    a6aa:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    a6ac:	2300      	movs	r3, #0
    a6ae:	60fb      	str	r3, [r7, #12]
    a6b0:	e002      	b.n	a6b8 <ff_wtoupper+0x18>
    a6b2:	68fb      	ldr	r3, [r7, #12]
    a6b4:	3301      	adds	r3, #1
    a6b6:	60fb      	str	r3, [r7, #12]
    a6b8:	4b0f      	ldr	r3, [pc, #60]	; (a6f8 <ff_wtoupper+0x58>)
    a6ba:	68fa      	ldr	r2, [r7, #12]
    a6bc:	0052      	lsls	r2, r2, #1
    a6be:	5ad3      	ldrh	r3, [r2, r3]
    a6c0:	2b00      	cmp	r3, #0
    a6c2:	d007      	beq.n	a6d4 <ff_wtoupper+0x34>
    a6c4:	4b0c      	ldr	r3, [pc, #48]	; (a6f8 <ff_wtoupper+0x58>)
    a6c6:	68fa      	ldr	r2, [r7, #12]
    a6c8:	0052      	lsls	r2, r2, #1
    a6ca:	5ad3      	ldrh	r3, [r2, r3]
    a6cc:	1dba      	adds	r2, r7, #6
    a6ce:	8812      	ldrh	r2, [r2, #0]
    a6d0:	429a      	cmp	r2, r3
    a6d2:	d1ee      	bne.n	a6b2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    a6d4:	4b08      	ldr	r3, [pc, #32]	; (a6f8 <ff_wtoupper+0x58>)
    a6d6:	68fa      	ldr	r2, [r7, #12]
    a6d8:	0052      	lsls	r2, r2, #1
    a6da:	5ad3      	ldrh	r3, [r2, r3]
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d004      	beq.n	a6ea <ff_wtoupper+0x4a>
    a6e0:	4b06      	ldr	r3, [pc, #24]	; (a6fc <ff_wtoupper+0x5c>)
    a6e2:	68fa      	ldr	r2, [r7, #12]
    a6e4:	0052      	lsls	r2, r2, #1
    a6e6:	5ad3      	ldrh	r3, [r2, r3]
    a6e8:	e001      	b.n	a6ee <ff_wtoupper+0x4e>
    a6ea:	1dbb      	adds	r3, r7, #6
    a6ec:	881b      	ldrh	r3, [r3, #0]
}
    a6ee:	0018      	movs	r0, r3
    a6f0:	46bd      	mov	sp, r7
    a6f2:	b004      	add	sp, #16
    a6f4:	bd80      	pop	{r7, pc}
    a6f6:	46c0      	nop			; (mov r8, r8)
    a6f8:	0000c598 	.word	0x0000c598
    a6fc:	0000c778 	.word	0x0000c778

0000a700 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    a700:	b580      	push	{r7, lr}
    a702:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    a704:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    a708:	4b02      	ldr	r3, [pc, #8]	; (a714 <NVIC_SystemReset+0x14>)
    a70a:	4a03      	ldr	r2, [pc, #12]	; (a718 <NVIC_SystemReset+0x18>)
    a70c:	60da      	str	r2, [r3, #12]
    a70e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    a712:	e7fe      	b.n	a712 <NVIC_SystemReset+0x12>
    a714:	e000ed00 	.word	0xe000ed00
    a718:	05fa0004 	.word	0x05fa0004

0000a71c <system_apb_clock_set_mask>:
{
    a71c:	b580      	push	{r7, lr}
    a71e:	b082      	sub	sp, #8
    a720:	af00      	add	r7, sp, #0
    a722:	0002      	movs	r2, r0
    a724:	6039      	str	r1, [r7, #0]
    a726:	1dfb      	adds	r3, r7, #7
    a728:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a72a:	1dfb      	adds	r3, r7, #7
    a72c:	781b      	ldrb	r3, [r3, #0]
    a72e:	2b01      	cmp	r3, #1
    a730:	d00a      	beq.n	a748 <system_apb_clock_set_mask+0x2c>
    a732:	2b02      	cmp	r3, #2
    a734:	d00f      	beq.n	a756 <system_apb_clock_set_mask+0x3a>
    a736:	2b00      	cmp	r3, #0
    a738:	d114      	bne.n	a764 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    a73a:	4b0e      	ldr	r3, [pc, #56]	; (a774 <system_apb_clock_set_mask+0x58>)
    a73c:	4a0d      	ldr	r2, [pc, #52]	; (a774 <system_apb_clock_set_mask+0x58>)
    a73e:	6991      	ldr	r1, [r2, #24]
    a740:	683a      	ldr	r2, [r7, #0]
    a742:	430a      	orrs	r2, r1
    a744:	619a      	str	r2, [r3, #24]
			break;
    a746:	e00f      	b.n	a768 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    a748:	4b0a      	ldr	r3, [pc, #40]	; (a774 <system_apb_clock_set_mask+0x58>)
    a74a:	4a0a      	ldr	r2, [pc, #40]	; (a774 <system_apb_clock_set_mask+0x58>)
    a74c:	69d1      	ldr	r1, [r2, #28]
    a74e:	683a      	ldr	r2, [r7, #0]
    a750:	430a      	orrs	r2, r1
    a752:	61da      	str	r2, [r3, #28]
			break;
    a754:	e008      	b.n	a768 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    a756:	4b07      	ldr	r3, [pc, #28]	; (a774 <system_apb_clock_set_mask+0x58>)
    a758:	4a06      	ldr	r2, [pc, #24]	; (a774 <system_apb_clock_set_mask+0x58>)
    a75a:	6a11      	ldr	r1, [r2, #32]
    a75c:	683a      	ldr	r2, [r7, #0]
    a75e:	430a      	orrs	r2, r1
    a760:	621a      	str	r2, [r3, #32]
			break;
    a762:	e001      	b.n	a768 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    a764:	2317      	movs	r3, #23
    a766:	e000      	b.n	a76a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    a768:	2300      	movs	r3, #0
}
    a76a:	0018      	movs	r0, r3
    a76c:	46bd      	mov	sp, r7
    a76e:	b002      	add	sp, #8
    a770:	bd80      	pop	{r7, pc}
    a772:	46c0      	nop			; (mov r8, r8)
    a774:	40000400 	.word	0x40000400

0000a778 <nvm_get_config_defaults>:
{
    a778:	b580      	push	{r7, lr}
    a77a:	b082      	sub	sp, #8
    a77c:	af00      	add	r7, sp, #0
    a77e:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	2200      	movs	r2, #0
    a784:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	2201      	movs	r2, #1
    a78a:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    a78c:	4b08      	ldr	r3, [pc, #32]	; (a7b0 <nvm_get_config_defaults+0x38>)
    a78e:	685b      	ldr	r3, [r3, #4]
    a790:	06db      	lsls	r3, r3, #27
    a792:	0f1b      	lsrs	r3, r3, #28
    a794:	b2db      	uxtb	r3, r3
    a796:	001a      	movs	r2, r3
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    a79c:	687b      	ldr	r3, [r7, #4]
    a79e:	2200      	movs	r2, #0
    a7a0:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    a7a2:	687b      	ldr	r3, [r7, #4]
    a7a4:	2200      	movs	r2, #0
    a7a6:	711a      	strb	r2, [r3, #4]
}
    a7a8:	46c0      	nop			; (mov r8, r8)
    a7aa:	46bd      	mov	sp, r7
    a7ac:	b002      	add	sp, #8
    a7ae:	bd80      	pop	{r7, pc}
    a7b0:	41004000 	.word	0x41004000

0000a7b4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    a7b8:	4b02      	ldr	r3, [pc, #8]	; (a7c4 <system_reset+0x10>)
    a7ba:	4798      	blx	r3
}
    a7bc:	46c0      	nop			; (mov r8, r8)
    a7be:	46bd      	mov	sp, r7
    a7c0:	bd80      	pop	{r7, pc}
    a7c2:	46c0      	nop			; (mov r8, r8)
    a7c4:	0000a701 	.word	0x0000a701

0000a7c8 <system_interrupt_enable_global>:
{
    a7c8:	b580      	push	{r7, lr}
    a7ca:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    a7cc:	4b04      	ldr	r3, [pc, #16]	; (a7e0 <system_interrupt_enable_global+0x18>)
    a7ce:	2201      	movs	r2, #1
    a7d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    a7d2:	f3bf 8f5f 	dmb	sy
    a7d6:	b662      	cpsie	i
}
    a7d8:	46c0      	nop			; (mov r8, r8)
    a7da:	46bd      	mov	sp, r7
    a7dc:	bd80      	pop	{r7, pc}
    a7de:	46c0      	nop			; (mov r8, r8)
    a7e0:	20000009 	.word	0x20000009

0000a7e4 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    a7e4:	b580      	push	{r7, lr}
    a7e6:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    a7e8:	2102      	movs	r1, #2
    a7ea:	2001      	movs	r0, #1
    a7ec:	4b02      	ldr	r3, [pc, #8]	; (a7f8 <dsu_crc32_init+0x14>)
    a7ee:	4798      	blx	r3
#endif

}
    a7f0:	46c0      	nop			; (mov r8, r8)
    a7f2:	46bd      	mov	sp, r7
    a7f4:	bd80      	pop	{r7, pc}
    a7f6:	46c0      	nop			; (mov r8, r8)
    a7f8:	0000a71d 	.word	0x0000a71d

0000a7fc <main>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void)
{
    a7fc:	b590      	push	{r4, r7, lr}
    a7fe:	b097      	sub	sp, #92	; 0x5c
    a800:	af02      	add	r7, sp, #8

	/*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
	system_init();
    a802:	4b38      	ldr	r3, [pc, #224]	; (a8e4 <main+0xe8>)
    a804:	4798      	blx	r3
	delay_init();
    a806:	4b38      	ldr	r3, [pc, #224]	; (a8e8 <main+0xec>)
    a808:	4798      	blx	r3
	InitializeSerialConsole();
    a80a:	4b38      	ldr	r3, [pc, #224]	; (a8ec <main+0xf0>)
    a80c:	4798      	blx	r3
	system_interrupt_enable_global();
    a80e:	4b38      	ldr	r3, [pc, #224]	; (a8f0 <main+0xf4>)
    a810:	4798      	blx	r3
	/* Initialize SD MMC stack */
	sd_mmc_init();
    a812:	4b38      	ldr	r3, [pc, #224]	; (a8f4 <main+0xf8>)
    a814:	4798      	blx	r3

	//Initialize the NVM driver
	configure_nvm();
    a816:	4b38      	ldr	r3, [pc, #224]	; (a8f8 <main+0xfc>)
    a818:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    a81a:	4b38      	ldr	r3, [pc, #224]	; (a8fc <main+0x100>)
    a81c:	2201      	movs	r2, #1
    a81e:	701a      	strb	r2, [r3, #0]
    a820:	f3bf 8f5f 	dmb	sy
    a824:	b662      	cpsie	i

	//Configure CRC32
	dsu_crc32_init();
    a826:	4b36      	ldr	r3, [pc, #216]	; (a900 <main+0x104>)
    a828:	4798      	blx	r3

	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    a82a:	4b36      	ldr	r3, [pc, #216]	; (a904 <main+0x108>)
    a82c:	0018      	movs	r0, r3
    a82e:	4b36      	ldr	r3, [pc, #216]	; (a908 <main+0x10c>)
    a830:	4798      	blx	r3

	/*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

	//EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
	//See function inside to see how to open a file
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    a832:	4b36      	ldr	r3, [pc, #216]	; (a90c <main+0x110>)
    a834:	0018      	movs	r0, r3
    a836:	4b34      	ldr	r3, [pc, #208]	; (a908 <main+0x10c>)
    a838:	4798      	blx	r3

	if(StartFilesystemAndTest() == false)
    a83a:	4b35      	ldr	r3, [pc, #212]	; (a910 <main+0x114>)
    a83c:	4798      	blx	r3
    a83e:	0003      	movs	r3, r0
    a840:	001a      	movs	r2, r3
    a842:	2301      	movs	r3, #1
    a844:	4053      	eors	r3, r2
    a846:	b2db      	uxtb	r3, r3
    a848:	2b00      	cmp	r3, #0
    a84a:	d00a      	beq.n	a862 <main+0x66>
	{
		SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    a84c:	4b31      	ldr	r3, [pc, #196]	; (a914 <main+0x118>)
    a84e:	0018      	movs	r0, r3
    a850:	4b2d      	ldr	r3, [pc, #180]	; (a908 <main+0x10c>)
    a852:	4798      	blx	r3
		delay_cycles_ms(5000);
    a854:	4b30      	ldr	r3, [pc, #192]	; (a918 <main+0x11c>)
    a856:	0018      	movs	r0, r3
    a858:	4b30      	ldr	r3, [pc, #192]	; (a91c <main+0x120>)
    a85a:	4798      	blx	r3
		system_reset();
    a85c:	4b30      	ldr	r3, [pc, #192]	; (a920 <main+0x124>)
    a85e:	4798      	blx	r3
    a860:	e003      	b.n	a86a <main+0x6e>
	}
	else
	{
		SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    a862:	4b30      	ldr	r3, [pc, #192]	; (a924 <main+0x128>)
    a864:	0018      	movs	r0, r3
    a866:	4b28      	ldr	r3, [pc, #160]	; (a908 <main+0x10c>)
    a868:	4798      	blx	r3
	/*********************************************************** BOOTLOADER START ******************************************************************/
	
	// Get NVM information
	struct nvm_parameters parameters;
	char helpStr[64]; //Used to help print values
	nvm_get_parameters (&parameters); //Get NVM parameters
    a86a:	2340      	movs	r3, #64	; 0x40
    a86c:	18fb      	adds	r3, r7, r3
    a86e:	0018      	movs	r0, r3
    a870:	4b2d      	ldr	r3, [pc, #180]	; (a928 <main+0x12c>)
    a872:	4798      	blx	r3
	snprintf(helpStr, 63,"NVM Info: Number of Pages %d. Size of a page: %d bytes. \r\n", parameters.nvm_number_of_pages, parameters.page_size);
    a874:	2340      	movs	r3, #64	; 0x40
    a876:	18fb      	adds	r3, r7, r3
    a878:	885b      	ldrh	r3, [r3, #2]
    a87a:	0019      	movs	r1, r3
    a87c:	2340      	movs	r3, #64	; 0x40
    a87e:	18fb      	adds	r3, r7, r3
    a880:	781b      	ldrb	r3, [r3, #0]
    a882:	4a2a      	ldr	r2, [pc, #168]	; (a92c <main+0x130>)
    a884:	0038      	movs	r0, r7
    a886:	9300      	str	r3, [sp, #0]
    a888:	000b      	movs	r3, r1
    a88a:	213f      	movs	r1, #63	; 0x3f
    a88c:	4c28      	ldr	r4, [pc, #160]	; (a930 <main+0x134>)
    a88e:	47a0      	blx	r4
	SerialConsoleWriteString(helpStr);
    a890:	003b      	movs	r3, r7
    a892:	0018      	movs	r0, r3
    a894:	4b1c      	ldr	r3, [pc, #112]	; (a908 <main+0x10c>)
    a896:	4798      	blx	r3
	

	//SerialConsoleWriteString("no flag A \r\n");	//Order to add string to TX Buffer
	
	// Choose bin and load
	int flag = choose_bin();
    a898:	4b26      	ldr	r3, [pc, #152]	; (a934 <main+0x138>)
    a89a:	4798      	blx	r3
    a89c:	0003      	movs	r3, r0
    a89e:	64fb      	str	r3, [r7, #76]	; 0x4c
	
	if (flag == 0)//file doesn't exist
    a8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d00c      	beq.n	a8c0 <main+0xc4>
	{
	}
	else if (flag == 1) // A flag exists
    a8a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a8a8:	2b01      	cmp	r3, #1
    a8aa:	d109      	bne.n	a8c0 <main+0xc4>
	{
		//res = f_open(&fno, (char const *)test_fw_A, FA_READ);
		// Free the FW memory before writing
		free_fw_mem(); // Calculate the number of rows to erase. Erase them and check each time erasing a row.
    a8ac:	4b22      	ldr	r3, [pc, #136]	; (a938 <main+0x13c>)
    a8ae:	4798      	blx	r3
		strcpy(test_bin_file, "0:FlagA.bin");
    a8b0:	4b22      	ldr	r3, [pc, #136]	; (a93c <main+0x140>)
    a8b2:	4a23      	ldr	r2, [pc, #140]	; (a940 <main+0x144>)
    a8b4:	ca13      	ldmia	r2!, {r0, r1, r4}
    a8b6:	c313      	stmia	r3!, {r0, r1, r4}
		load_bin(helpStr); //update TestA.bin to NVM
    a8b8:	003b      	movs	r3, r7
    a8ba:	0018      	movs	r0, r3
    a8bc:	4b21      	ldr	r3, [pc, #132]	; (a944 <main+0x148>)
    a8be:	4798      	blx	r3
	/*********************************************************** BOOTLOADER END ********************************************************************/
	


	//4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    a8c0:	4b21      	ldr	r3, [pc, #132]	; (a948 <main+0x14c>)
    a8c2:	0018      	movs	r0, r3
    a8c4:	4b10      	ldr	r3, [pc, #64]	; (a908 <main+0x10c>)
    a8c6:	4798      	blx	r3
	delay_cycles_ms(100); //Delay to allow print
    a8c8:	2064      	movs	r0, #100	; 0x64
    a8ca:	4b14      	ldr	r3, [pc, #80]	; (a91c <main+0x120>)
    a8cc:	4798      	blx	r3
		
		//Deinitialize HW - deinitialize started HW here!
		DeinitializeSerialConsole(); //Deinitializes UART
    a8ce:	4b1f      	ldr	r3, [pc, #124]	; (a94c <main+0x150>)
    a8d0:	4798      	blx	r3
		sd_mmc_deinit(); //Deinitialize SD CARD
    a8d2:	4b1f      	ldr	r3, [pc, #124]	; (a950 <main+0x154>)
    a8d4:	4798      	blx	r3


		//Jump to application
		jumpToApplication();
    a8d6:	4b1f      	ldr	r3, [pc, #124]	; (a954 <main+0x158>)
    a8d8:	4798      	blx	r3
    a8da:	2300      	movs	r3, #0

		//Should not reach here! The device should have jumped to the main FW.
	
}
    a8dc:	0018      	movs	r0, r3
    a8de:	46bd      	mov	sp, r7
    a8e0:	b015      	add	sp, #84	; 0x54
    a8e2:	bd90      	pop	{r4, r7, pc}
    a8e4:	00006ecd 	.word	0x00006ecd
    a8e8:	00000149 	.word	0x00000149
    a8ec:	00001009 	.word	0x00001009
    a8f0:	0000a7c9 	.word	0x0000a7c9
    a8f4:	00001f15 	.word	0x00001f15
    a8f8:	0000ac39 	.word	0x0000ac39
    a8fc:	20000009 	.word	0x20000009
    a900:	0000a7e5 	.word	0x0000a7e5
    a904:	0000c958 	.word	0x0000c958
    a908:	00001095 	.word	0x00001095
    a90c:	0000c974 	.word	0x0000c974
    a910:	0000a959 	.word	0x0000a959
    a914:	0000c99c 	.word	0x0000c99c
    a918:	00001388 	.word	0x00001388
    a91c:	000001a1 	.word	0x000001a1
    a920:	0000a7b5 	.word	0x0000a7b5
    a924:	0000c9e8 	.word	0x0000c9e8
    a928:	000008a1 	.word	0x000008a1
    a92c:	0000ca1c 	.word	0x0000ca1c
    a930:	0000b599 	.word	0x0000b599
    a934:	0000ad11 	.word	0x0000ad11
    a938:	0000ac65 	.word	0x0000ac65
    a93c:	20000020 	.word	0x20000020
    a940:	0000ca58 	.word	0x0000ca58
    a944:	0000ad75 	.word	0x0000ad75
    a948:	0000ca64 	.word	0x0000ca64
    a94c:	00001079 	.word	0x00001079
    a950:	00002cbd 	.word	0x00002cbd
    a954:	0000ac01 	.word	0x0000ac01

0000a958 <StartFilesystemAndTest>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       Returns true is SD card and file system test passed. False otherwise.
******************************************************************************/
static bool StartFilesystemAndTest(void)
{
    a958:	b590      	push	{r4, r7, lr}
    a95a:	b0c5      	sub	sp, #276	; 0x114
    a95c:	af00      	add	r7, sp, #0
	bool sdCardPass = true;
    a95e:	2310      	movs	r3, #16
    a960:	33ff      	adds	r3, #255	; 0xff
    a962:	18fb      	adds	r3, r7, r3
    a964:	2201      	movs	r2, #1
    a966:	701a      	strb	r2, [r3, #0]
	uint8_t binbuff[256];

	//Before we begin - fill buffer for binary write test
	//Fill binbuff with values 0x00 - 0xFF
	for(int i = 0; i < 256; i++)
    a968:	2300      	movs	r3, #0
    a96a:	2284      	movs	r2, #132	; 0x84
    a96c:	0052      	lsls	r2, r2, #1
    a96e:	18ba      	adds	r2, r7, r2
    a970:	6013      	str	r3, [r2, #0]
    a972:	e019      	b.n	a9a8 <StartFilesystemAndTest+0x50>
	{
		binbuff[i] = i;
    a974:	2384      	movs	r3, #132	; 0x84
    a976:	005b      	lsls	r3, r3, #1
    a978:	18fb      	adds	r3, r7, r3
    a97a:	681b      	ldr	r3, [r3, #0]
    a97c:	b2d9      	uxtb	r1, r3
    a97e:	4b84      	ldr	r3, [pc, #528]	; (ab90 <StartFilesystemAndTest+0x238>)
    a980:	2288      	movs	r2, #136	; 0x88
    a982:	0052      	lsls	r2, r2, #1
    a984:	18ba      	adds	r2, r7, r2
    a986:	18d2      	adds	r2, r2, r3
    a988:	2384      	movs	r3, #132	; 0x84
    a98a:	005b      	lsls	r3, r3, #1
    a98c:	18fb      	adds	r3, r7, r3
    a98e:	681b      	ldr	r3, [r3, #0]
    a990:	18d3      	adds	r3, r2, r3
    a992:	1c0a      	adds	r2, r1, #0
    a994:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
    a996:	2384      	movs	r3, #132	; 0x84
    a998:	005b      	lsls	r3, r3, #1
    a99a:	18fb      	adds	r3, r7, r3
    a99c:	681b      	ldr	r3, [r3, #0]
    a99e:	3301      	adds	r3, #1
    a9a0:	2284      	movs	r2, #132	; 0x84
    a9a2:	0052      	lsls	r2, r2, #1
    a9a4:	18ba      	adds	r2, r7, r2
    a9a6:	6013      	str	r3, [r2, #0]
    a9a8:	2384      	movs	r3, #132	; 0x84
    a9aa:	005b      	lsls	r3, r3, #1
    a9ac:	18fb      	adds	r3, r7, r3
    a9ae:	681b      	ldr	r3, [r3, #0]
    a9b0:	2bff      	cmp	r3, #255	; 0xff
    a9b2:	dddf      	ble.n	a974 <StartFilesystemAndTest+0x1c>
	}

	//MOUNT SD CARD
	Ctrl_status sdStatus= SdCard_Initiate();
    a9b4:	2308      	movs	r3, #8
    a9b6:	33ff      	adds	r3, #255	; 0xff
    a9b8:	18fc      	adds	r4, r7, r3
    a9ba:	4b76      	ldr	r3, [pc, #472]	; (ab94 <StartFilesystemAndTest+0x23c>)
    a9bc:	4798      	blx	r3
    a9be:	0003      	movs	r3, r0
    a9c0:	7023      	strb	r3, [r4, #0]
	if(sdStatus == CTRL_GOOD) //If the SD card is good we continue mounting the system!
    a9c2:	2308      	movs	r3, #8
    a9c4:	33ff      	adds	r3, #255	; 0xff
    a9c6:	18fb      	adds	r3, r7, r3
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d000      	beq.n	a9d0 <StartFilesystemAndTest+0x78>
    a9ce:	e0ce      	b.n	ab6e <StartFilesystemAndTest+0x216>
	{
		SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    a9d0:	4b71      	ldr	r3, [pc, #452]	; (ab98 <StartFilesystemAndTest+0x240>)
    a9d2:	0018      	movs	r0, r3
    a9d4:	4b71      	ldr	r3, [pc, #452]	; (ab9c <StartFilesystemAndTest+0x244>)
    a9d6:	4798      	blx	r3

		//Attempt to mount a FAT file system on the SD Card using FATFS
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    a9d8:	4b71      	ldr	r3, [pc, #452]	; (aba0 <StartFilesystemAndTest+0x248>)
    a9da:	0018      	movs	r0, r3
    a9dc:	4b6f      	ldr	r3, [pc, #444]	; (ab9c <StartFilesystemAndTest+0x244>)
    a9de:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    a9e0:	238c      	movs	r3, #140	; 0x8c
    a9e2:	009a      	lsls	r2, r3, #2
    a9e4:	4b6f      	ldr	r3, [pc, #444]	; (aba4 <StartFilesystemAndTest+0x24c>)
    a9e6:	2100      	movs	r1, #0
    a9e8:	0018      	movs	r0, r3
    a9ea:	4b6f      	ldr	r3, [pc, #444]	; (aba8 <StartFilesystemAndTest+0x250>)
    a9ec:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs); //Order FATFS Mount
    a9ee:	4b6d      	ldr	r3, [pc, #436]	; (aba4 <StartFilesystemAndTest+0x24c>)
    a9f0:	0019      	movs	r1, r3
    a9f2:	2000      	movs	r0, #0
    a9f4:	4b6d      	ldr	r3, [pc, #436]	; (abac <StartFilesystemAndTest+0x254>)
    a9f6:	4798      	blx	r3
    a9f8:	0003      	movs	r3, r0
    a9fa:	001a      	movs	r2, r3
    a9fc:	4b6c      	ldr	r3, [pc, #432]	; (abb0 <StartFilesystemAndTest+0x258>)
    a9fe:	701a      	strb	r2, [r3, #0]
		if (FR_INVALID_DRIVE == res)
    aa00:	4b6b      	ldr	r3, [pc, #428]	; (abb0 <StartFilesystemAndTest+0x258>)
    aa02:	781b      	ldrb	r3, [r3, #0]
    aa04:	2b0b      	cmp	r3, #11
    aa06:	d10d      	bne.n	aa24 <StartFilesystemAndTest+0xcc>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    aa08:	4b69      	ldr	r3, [pc, #420]	; (abb0 <StartFilesystemAndTest+0x258>)
    aa0a:	781b      	ldrb	r3, [r3, #0]
    aa0c:	001a      	movs	r2, r3
    aa0e:	4b69      	ldr	r3, [pc, #420]	; (abb4 <StartFilesystemAndTest+0x25c>)
    aa10:	0019      	movs	r1, r3
    aa12:	2000      	movs	r0, #0
    aa14:	4b68      	ldr	r3, [pc, #416]	; (abb8 <StartFilesystemAndTest+0x260>)
    aa16:	4798      	blx	r3
			sdCardPass = false;
    aa18:	2310      	movs	r3, #16
    aa1a:	33ff      	adds	r3, #255	; 0xff
    aa1c:	18fb      	adds	r3, r7, r3
    aa1e:	2200      	movs	r2, #0
    aa20:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    aa22:	e09f      	b.n	ab64 <StartFilesystemAndTest+0x20c>
		}
		SerialConsoleWriteString("[OK]\r\n");
    aa24:	4b65      	ldr	r3, [pc, #404]	; (abbc <StartFilesystemAndTest+0x264>)
    aa26:	0018      	movs	r0, r3
    aa28:	4b5c      	ldr	r3, [pc, #368]	; (ab9c <StartFilesystemAndTest+0x244>)
    aa2a:	4798      	blx	r3

		//Create and open a file
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    aa2c:	4b64      	ldr	r3, [pc, #400]	; (abc0 <StartFilesystemAndTest+0x268>)
    aa2e:	0018      	movs	r0, r3
    aa30:	4b5a      	ldr	r3, [pc, #360]	; (ab9c <StartFilesystemAndTest+0x244>)
    aa32:	4798      	blx	r3

		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    aa34:	4b63      	ldr	r3, [pc, #396]	; (abc4 <StartFilesystemAndTest+0x26c>)
    aa36:	2230      	movs	r2, #48	; 0x30
    aa38:	701a      	strb	r2, [r3, #0]
		res = f_open(&file_object,
    aa3a:	4962      	ldr	r1, [pc, #392]	; (abc4 <StartFilesystemAndTest+0x26c>)
    aa3c:	4b62      	ldr	r3, [pc, #392]	; (abc8 <StartFilesystemAndTest+0x270>)
    aa3e:	220a      	movs	r2, #10
    aa40:	0018      	movs	r0, r3
    aa42:	4b62      	ldr	r3, [pc, #392]	; (abcc <StartFilesystemAndTest+0x274>)
    aa44:	4798      	blx	r3
    aa46:	0003      	movs	r3, r0
    aa48:	001a      	movs	r2, r3
    aa4a:	4b59      	ldr	r3, [pc, #356]	; (abb0 <StartFilesystemAndTest+0x258>)
    aa4c:	701a      	strb	r2, [r3, #0]
		(char const *)test_file_name,
		FA_CREATE_ALWAYS | FA_WRITE);
		
		if (res != FR_OK)
    aa4e:	4b58      	ldr	r3, [pc, #352]	; (abb0 <StartFilesystemAndTest+0x258>)
    aa50:	781b      	ldrb	r3, [r3, #0]
    aa52:	2b00      	cmp	r3, #0
    aa54:	d00d      	beq.n	aa72 <StartFilesystemAndTest+0x11a>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    aa56:	4b56      	ldr	r3, [pc, #344]	; (abb0 <StartFilesystemAndTest+0x258>)
    aa58:	781b      	ldrb	r3, [r3, #0]
    aa5a:	001a      	movs	r2, r3
    aa5c:	4b55      	ldr	r3, [pc, #340]	; (abb4 <StartFilesystemAndTest+0x25c>)
    aa5e:	0019      	movs	r1, r3
    aa60:	2000      	movs	r0, #0
    aa62:	4b55      	ldr	r3, [pc, #340]	; (abb8 <StartFilesystemAndTest+0x260>)
    aa64:	4798      	blx	r3
			sdCardPass = false;
    aa66:	2310      	movs	r3, #16
    aa68:	33ff      	adds	r3, #255	; 0xff
    aa6a:	18fb      	adds	r3, r7, r3
    aa6c:	2200      	movs	r2, #0
    aa6e:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    aa70:	e078      	b.n	ab64 <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    aa72:	4b52      	ldr	r3, [pc, #328]	; (abbc <StartFilesystemAndTest+0x264>)
    aa74:	0018      	movs	r0, r3
    aa76:	4b49      	ldr	r3, [pc, #292]	; (ab9c <StartFilesystemAndTest+0x244>)
    aa78:	4798      	blx	r3

		//Write to a file
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    aa7a:	4b55      	ldr	r3, [pc, #340]	; (abd0 <StartFilesystemAndTest+0x278>)
    aa7c:	0018      	movs	r0, r3
    aa7e:	4b47      	ldr	r3, [pc, #284]	; (ab9c <StartFilesystemAndTest+0x244>)
    aa80:	4798      	blx	r3

		if (0 == f_puts("Test SD/MMC stack\n", &file_object))
    aa82:	4a51      	ldr	r2, [pc, #324]	; (abc8 <StartFilesystemAndTest+0x270>)
    aa84:	4b53      	ldr	r3, [pc, #332]	; (abd4 <StartFilesystemAndTest+0x27c>)
    aa86:	0011      	movs	r1, r2
    aa88:	0018      	movs	r0, r3
    aa8a:	4b53      	ldr	r3, [pc, #332]	; (abd8 <StartFilesystemAndTest+0x280>)
    aa8c:	4798      	blx	r3
    aa8e:	1e03      	subs	r3, r0, #0
    aa90:	d10e      	bne.n	aab0 <StartFilesystemAndTest+0x158>
		{
			f_close(&file_object);
    aa92:	4b4d      	ldr	r3, [pc, #308]	; (abc8 <StartFilesystemAndTest+0x270>)
    aa94:	0018      	movs	r0, r3
    aa96:	4b51      	ldr	r3, [pc, #324]	; (abdc <StartFilesystemAndTest+0x284>)
    aa98:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    aa9a:	4b51      	ldr	r3, [pc, #324]	; (abe0 <StartFilesystemAndTest+0x288>)
    aa9c:	0019      	movs	r1, r3
    aa9e:	2000      	movs	r0, #0
    aaa0:	4b45      	ldr	r3, [pc, #276]	; (abb8 <StartFilesystemAndTest+0x260>)
    aaa2:	4798      	blx	r3
			sdCardPass = false;
    aaa4:	2310      	movs	r3, #16
    aaa6:	33ff      	adds	r3, #255	; 0xff
    aaa8:	18fb      	adds	r3, r7, r3
    aaaa:	2200      	movs	r2, #0
    aaac:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    aaae:	e059      	b.n	ab64 <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    aab0:	4b42      	ldr	r3, [pc, #264]	; (abbc <StartFilesystemAndTest+0x264>)
    aab2:	0018      	movs	r0, r3
    aab4:	4b39      	ldr	r3, [pc, #228]	; (ab9c <StartFilesystemAndTest+0x244>)
    aab6:	4798      	blx	r3
		f_close(&file_object); //Close file
    aab8:	4b43      	ldr	r3, [pc, #268]	; (abc8 <StartFilesystemAndTest+0x270>)
    aaba:	0018      	movs	r0, r3
    aabc:	4b47      	ldr	r3, [pc, #284]	; (abdc <StartFilesystemAndTest+0x284>)
    aabe:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    aac0:	4b48      	ldr	r3, [pc, #288]	; (abe4 <StartFilesystemAndTest+0x28c>)
    aac2:	0018      	movs	r0, r3
    aac4:	4b35      	ldr	r3, [pc, #212]	; (ab9c <StartFilesystemAndTest+0x244>)
    aac6:	4798      	blx	r3


		//Write binary file
		//Read SD Card File
		test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    aac8:	4b47      	ldr	r3, [pc, #284]	; (abe8 <StartFilesystemAndTest+0x290>)
    aaca:	2230      	movs	r2, #48	; 0x30
    aacc:	701a      	strb	r2, [r3, #0]
		res = f_open(&file_object, (char const *)test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    aace:	4946      	ldr	r1, [pc, #280]	; (abe8 <StartFilesystemAndTest+0x290>)
    aad0:	4b3d      	ldr	r3, [pc, #244]	; (abc8 <StartFilesystemAndTest+0x270>)
    aad2:	220a      	movs	r2, #10
    aad4:	0018      	movs	r0, r3
    aad6:	4b3d      	ldr	r3, [pc, #244]	; (abcc <StartFilesystemAndTest+0x274>)
    aad8:	4798      	blx	r3
    aada:	0003      	movs	r3, r0
    aadc:	001a      	movs	r2, r3
    aade:	4b34      	ldr	r3, [pc, #208]	; (abb0 <StartFilesystemAndTest+0x258>)
    aae0:	701a      	strb	r2, [r3, #0]
		
		if (res != FR_OK)
    aae2:	4b33      	ldr	r3, [pc, #204]	; (abb0 <StartFilesystemAndTest+0x258>)
    aae4:	781b      	ldrb	r3, [r3, #0]
    aae6:	2b00      	cmp	r3, #0
    aae8:	d011      	beq.n	ab0e <StartFilesystemAndTest+0x1b6>
		{
			SerialConsoleWriteString("Could not open binary file!\r\n");
    aaea:	4b40      	ldr	r3, [pc, #256]	; (abec <StartFilesystemAndTest+0x294>)
    aaec:	0018      	movs	r0, r3
    aaee:	4b2b      	ldr	r3, [pc, #172]	; (ab9c <StartFilesystemAndTest+0x244>)
    aaf0:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    aaf2:	4b2f      	ldr	r3, [pc, #188]	; (abb0 <StartFilesystemAndTest+0x258>)
    aaf4:	781b      	ldrb	r3, [r3, #0]
    aaf6:	001a      	movs	r2, r3
    aaf8:	4b2e      	ldr	r3, [pc, #184]	; (abb4 <StartFilesystemAndTest+0x25c>)
    aafa:	0019      	movs	r1, r3
    aafc:	2000      	movs	r0, #0
    aafe:	4b2e      	ldr	r3, [pc, #184]	; (abb8 <StartFilesystemAndTest+0x260>)
    ab00:	4798      	blx	r3
			sdCardPass = false;
    ab02:	2310      	movs	r3, #16
    ab04:	33ff      	adds	r3, #255	; 0xff
    ab06:	18fb      	adds	r3, r7, r3
    ab08:	2200      	movs	r2, #0
    ab0a:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    ab0c:	e02a      	b.n	ab64 <StartFilesystemAndTest+0x20c>
		}

		//Write to a binaryfile
		SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    ab0e:	4b38      	ldr	r3, [pc, #224]	; (abf0 <StartFilesystemAndTest+0x298>)
    ab10:	0018      	movs	r0, r3
    ab12:	4b22      	ldr	r3, [pc, #136]	; (ab9c <StartFilesystemAndTest+0x244>)
    ab14:	4798      	blx	r3
		uint32_t varWrite = 0;
    ab16:	2300      	movs	r3, #0
    ab18:	603b      	str	r3, [r7, #0]
		if (0 != f_write(&file_object, binbuff,256, &varWrite))
    ab1a:	003c      	movs	r4, r7
    ab1c:	2380      	movs	r3, #128	; 0x80
    ab1e:	005a      	lsls	r2, r3, #1
    ab20:	1d39      	adds	r1, r7, #4
    ab22:	4829      	ldr	r0, [pc, #164]	; (abc8 <StartFilesystemAndTest+0x270>)
    ab24:	0023      	movs	r3, r4
    ab26:	4c33      	ldr	r4, [pc, #204]	; (abf4 <StartFilesystemAndTest+0x29c>)
    ab28:	47a0      	blx	r4
    ab2a:	1e03      	subs	r3, r0, #0
    ab2c:	d00e      	beq.n	ab4c <StartFilesystemAndTest+0x1f4>
		{
			f_close(&file_object);
    ab2e:	4b26      	ldr	r3, [pc, #152]	; (abc8 <StartFilesystemAndTest+0x270>)
    ab30:	0018      	movs	r0, r3
    ab32:	4b2a      	ldr	r3, [pc, #168]	; (abdc <StartFilesystemAndTest+0x284>)
    ab34:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    ab36:	4b2a      	ldr	r3, [pc, #168]	; (abe0 <StartFilesystemAndTest+0x288>)
    ab38:	0019      	movs	r1, r3
    ab3a:	2000      	movs	r0, #0
    ab3c:	4b1e      	ldr	r3, [pc, #120]	; (abb8 <StartFilesystemAndTest+0x260>)
    ab3e:	4798      	blx	r3
			sdCardPass = false;
    ab40:	2310      	movs	r3, #16
    ab42:	33ff      	adds	r3, #255	; 0xff
    ab44:	18fb      	adds	r3, r7, r3
    ab46:	2200      	movs	r2, #0
    ab48:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    ab4a:	e00b      	b.n	ab64 <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    ab4c:	4b1b      	ldr	r3, [pc, #108]	; (abbc <StartFilesystemAndTest+0x264>)
    ab4e:	0018      	movs	r0, r3
    ab50:	4b12      	ldr	r3, [pc, #72]	; (ab9c <StartFilesystemAndTest+0x244>)
    ab52:	4798      	blx	r3
		f_close(&file_object); //Close file
    ab54:	4b1c      	ldr	r3, [pc, #112]	; (abc8 <StartFilesystemAndTest+0x270>)
    ab56:	0018      	movs	r0, r3
    ab58:	4b20      	ldr	r3, [pc, #128]	; (abdc <StartFilesystemAndTest+0x284>)
    ab5a:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    ab5c:	4b21      	ldr	r3, [pc, #132]	; (abe4 <StartFilesystemAndTest+0x28c>)
    ab5e:	0018      	movs	r0, r3
    ab60:	4b0e      	ldr	r3, [pc, #56]	; (ab9c <StartFilesystemAndTest+0x244>)
    ab62:	4798      	blx	r3
		
		main_end_of_test:
		SerialConsoleWriteString("End of Test.\n\r");
    ab64:	4b24      	ldr	r3, [pc, #144]	; (abf8 <StartFilesystemAndTest+0x2a0>)
    ab66:	0018      	movs	r0, r3
    ab68:	4b0c      	ldr	r3, [pc, #48]	; (ab9c <StartFilesystemAndTest+0x244>)
    ab6a:	4798      	blx	r3
    ab6c:	e008      	b.n	ab80 <StartFilesystemAndTest+0x228>

	}
	else
	{
		SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    ab6e:	4b23      	ldr	r3, [pc, #140]	; (abfc <StartFilesystemAndTest+0x2a4>)
    ab70:	0018      	movs	r0, r3
    ab72:	4b0a      	ldr	r3, [pc, #40]	; (ab9c <StartFilesystemAndTest+0x244>)
    ab74:	4798      	blx	r3
		sdCardPass = false;
    ab76:	2310      	movs	r3, #16
    ab78:	33ff      	adds	r3, #255	; 0xff
    ab7a:	18fb      	adds	r3, r7, r3
    ab7c:	2200      	movs	r2, #0
    ab7e:	701a      	strb	r2, [r3, #0]
	}

	return sdCardPass;
    ab80:	2310      	movs	r3, #16
    ab82:	33ff      	adds	r3, #255	; 0xff
    ab84:	18fb      	adds	r3, r7, r3
    ab86:	781b      	ldrb	r3, [r3, #0]
}
    ab88:	0018      	movs	r0, r3
    ab8a:	46bd      	mov	sp, r7
    ab8c:	b045      	add	sp, #276	; 0x114
    ab8e:	bd90      	pop	{r4, r7, pc}
    ab90:	fffffef4 	.word	0xfffffef4
    ab94:	00000ae9 	.word	0x00000ae9
    ab98:	0000ca80 	.word	0x0000ca80
    ab9c:	00001095 	.word	0x00001095
    aba0:	0000caa0 	.word	0x0000caa0
    aba4:	20000a04 	.word	0x20000a04
    aba8:	0000b2a7 	.word	0x0000b2a7
    abac:	00009831 	.word	0x00009831
    abb0:	20000c8c 	.word	0x20000c8c
    abb4:	0000cabc 	.word	0x0000cabc
    abb8:	00001121 	.word	0x00001121
    abbc:	0000cacc 	.word	0x0000cacc
    abc0:	0000cad4 	.word	0x0000cad4
    abc4:	2000000c 	.word	0x2000000c
    abc8:	20000c34 	.word	0x20000c34
    abcc:	00009889 	.word	0x00009889
    abd0:	0000caf0 	.word	0x0000caf0
    abd4:	0000cb14 	.word	0x0000cb14
    abd8:	0000a5a9 	.word	0x0000a5a9
    abdc:	0000a525 	.word	0x0000a525
    abe0:	0000cb28 	.word	0x0000cb28
    abe4:	0000cb34 	.word	0x0000cb34
    abe8:	20000020 	.word	0x20000020
    abec:	0000cb4c 	.word	0x0000cb4c
    abf0:	0000cb6c 	.word	0x0000cb6c
    abf4:	0000a055 	.word	0x0000a055
    abf8:	0000cb90 	.word	0x0000cb90
    abfc:	0000cba0 	.word	0x0000cba0

0000ac00 <jumpToApplication>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       
******************************************************************************/
static void jumpToApplication(void)
{
    ac00:	b580      	push	{r7, lr}
    ac02:	b082      	sub	sp, #8
    ac04:	af00      	add	r7, sp, #0
// Function pointer to application section
void (*applicationCodeEntry)(void);

// Rebase stack pointer
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    ac06:	2390      	movs	r3, #144	; 0x90
    ac08:	025b      	lsls	r3, r3, #9
    ac0a:	681b      	ldr	r3, [r3, #0]
    ac0c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    ac0e:	683b      	ldr	r3, [r7, #0]
    ac10:	f383 8808 	msr	MSP, r3

// Rebase vector table
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    ac14:	4b06      	ldr	r3, [pc, #24]	; (ac30 <jumpToApplication+0x30>)
    ac16:	2290      	movs	r2, #144	; 0x90
    ac18:	0252      	lsls	r2, r2, #9
    ac1a:	609a      	str	r2, [r3, #8]

// Set pointer to application section
applicationCodeEntry =
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    ac1c:	4b05      	ldr	r3, [pc, #20]	; (ac34 <jumpToApplication+0x34>)
    ac1e:	681b      	ldr	r3, [r3, #0]
applicationCodeEntry =
    ac20:	607b      	str	r3, [r7, #4]

// Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry, 
//which should be the start of the main FW.
applicationCodeEntry();
    ac22:	687b      	ldr	r3, [r7, #4]
    ac24:	4798      	blx	r3
}
    ac26:	46c0      	nop			; (mov r8, r8)
    ac28:	46bd      	mov	sp, r7
    ac2a:	b002      	add	sp, #8
    ac2c:	bd80      	pop	{r7, pc}
    ac2e:	46c0      	nop			; (mov r8, r8)
    ac30:	e000ed00 	.word	0xe000ed00
    ac34:	00012004 	.word	0x00012004

0000ac38 <configure_nvm>:
* @brief        Configures the NVM driver
* @details      
* @return       
******************************************************************************/
static void configure_nvm(void)
{
    ac38:	b580      	push	{r7, lr}
    ac3a:	b082      	sub	sp, #8
    ac3c:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    ac3e:	003b      	movs	r3, r7
    ac40:	0018      	movs	r0, r3
    ac42:	4b06      	ldr	r3, [pc, #24]	; (ac5c <configure_nvm+0x24>)
    ac44:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    ac46:	003b      	movs	r3, r7
    ac48:	2200      	movs	r2, #0
    ac4a:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    ac4c:	003b      	movs	r3, r7
    ac4e:	0018      	movs	r0, r3
    ac50:	4b03      	ldr	r3, [pc, #12]	; (ac60 <configure_nvm+0x28>)
    ac52:	4798      	blx	r3
}
    ac54:	46c0      	nop			; (mov r8, r8)
    ac56:	46bd      	mov	sp, r7
    ac58:	b002      	add	sp, #8
    ac5a:	bd80      	pop	{r7, pc}
    ac5c:	0000a779 	.word	0x0000a779
    ac60:	000004bd 	.word	0x000004bd

0000ac64 <free_fw_mem>:
* @details		Calculate the number of rows which is available to erase and erase them. 
				Each a row is erased, check whether it is successful. If there is error, 
				return and tell the user.
* @return
******************************************************************************/
static void free_fw_mem(void){
    ac64:	b590      	push	{r4, r7, lr}
    ac66:	b089      	sub	sp, #36	; 0x24
    ac68:	af00      	add	r7, sp, #0
	uint32_t current_address = APP_START_ADDRESS;
    ac6a:	2390      	movs	r3, #144	; 0x90
    ac6c:	025b      	lsls	r3, r3, #9
    ac6e:	61fb      	str	r3, [r7, #28]
	enum status_code nvmError =  STATUS_OK;
    ac70:	2313      	movs	r3, #19
    ac72:	18fb      	adds	r3, r7, r3
    ac74:	2200      	movs	r2, #0
    ac76:	701a      	strb	r2, [r3, #0]
	
	//Calculate the rows to erase
	int row = (0x40000 - 0x12000) / 256;
    ac78:	23b8      	movs	r3, #184	; 0xb8
    ac7a:	009b      	lsls	r3, r3, #2
    ac7c:	60fb      	str	r3, [r7, #12]
	
	//Erase the memory
	for (int i = 0; i < row; i++){
    ac7e:	2300      	movs	r3, #0
    ac80:	61bb      	str	r3, [r7, #24]
    ac82:	e02f      	b.n	ace4 <free_fw_mem+0x80>
		enum status_code nvmError = nvm_erase_row(current_address); // Erase the row starts from current address
    ac84:	230b      	movs	r3, #11
    ac86:	18fc      	adds	r4, r7, r3
    ac88:	69fb      	ldr	r3, [r7, #28]
    ac8a:	0018      	movs	r0, r3
    ac8c:	4b1b      	ldr	r3, [pc, #108]	; (acfc <free_fw_mem+0x98>)
    ac8e:	4798      	blx	r3
    ac90:	0003      	movs	r3, r0
    ac92:	7023      	strb	r3, [r4, #0]
		if (nvmError != STATUS_OK){ SerialConsoleWriteString("Erase error!\r\n");}
    ac94:	230b      	movs	r3, #11
    ac96:	18fb      	adds	r3, r7, r3
    ac98:	781b      	ldrb	r3, [r3, #0]
    ac9a:	2b00      	cmp	r3, #0
    ac9c:	d003      	beq.n	aca6 <free_fw_mem+0x42>
    ac9e:	4b18      	ldr	r3, [pc, #96]	; (ad00 <free_fw_mem+0x9c>)
    aca0:	0018      	movs	r0, r3
    aca2:	4b18      	ldr	r3, [pc, #96]	; (ad04 <free_fw_mem+0xa0>)
    aca4:	4798      	blx	r3
		
		// Make sure it got erased
    	for(int iter = 0; iter < 256; iter++){
    aca6:	2300      	movs	r3, #0
    aca8:	617b      	str	r3, [r7, #20]
    acaa:	e011      	b.n	acd0 <free_fw_mem+0x6c>
	    	char *a = (char *)(APP_START_ADDRESS + iter); //Pointer pointing to address APP_START_ADDRESS
    acac:	697b      	ldr	r3, [r7, #20]
    acae:	2290      	movs	r2, #144	; 0x90
    acb0:	0252      	lsls	r2, r2, #9
    acb2:	4694      	mov	ip, r2
    acb4:	4463      	add	r3, ip
    acb6:	607b      	str	r3, [r7, #4]
	    	if(*a != 0xFF){	SerialConsoleWriteString("Error - test page is not erased!");	return;}
    acb8:	687b      	ldr	r3, [r7, #4]
    acba:	781b      	ldrb	r3, [r3, #0]
    acbc:	2bff      	cmp	r3, #255	; 0xff
    acbe:	d004      	beq.n	acca <free_fw_mem+0x66>
    acc0:	4b11      	ldr	r3, [pc, #68]	; (ad08 <free_fw_mem+0xa4>)
    acc2:	0018      	movs	r0, r3
    acc4:	4b0f      	ldr	r3, [pc, #60]	; (ad04 <free_fw_mem+0xa0>)
    acc6:	4798      	blx	r3
    acc8:	e014      	b.n	acf4 <free_fw_mem+0x90>
    	for(int iter = 0; iter < 256; iter++){
    acca:	697b      	ldr	r3, [r7, #20]
    accc:	3301      	adds	r3, #1
    acce:	617b      	str	r3, [r7, #20]
    acd0:	697b      	ldr	r3, [r7, #20]
    acd2:	2bff      	cmp	r3, #255	; 0xff
    acd4:	ddea      	ble.n	acac <free_fw_mem+0x48>
		}
		current_address += 256;
    acd6:	69fb      	ldr	r3, [r7, #28]
    acd8:	3301      	adds	r3, #1
    acda:	33ff      	adds	r3, #255	; 0xff
    acdc:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < row; i++){
    acde:	69bb      	ldr	r3, [r7, #24]
    ace0:	3301      	adds	r3, #1
    ace2:	61bb      	str	r3, [r7, #24]
    ace4:	69ba      	ldr	r2, [r7, #24]
    ace6:	68fb      	ldr	r3, [r7, #12]
    ace8:	429a      	cmp	r2, r3
    acea:	dbcb      	blt.n	ac84 <free_fw_mem+0x20>
	}
	
	// Report the result
	SerialConsoleWriteString("Data erased successfully! \r\n");
    acec:	4b07      	ldr	r3, [pc, #28]	; (ad0c <free_fw_mem+0xa8>)
    acee:	0018      	movs	r0, r3
    acf0:	4b04      	ldr	r3, [pc, #16]	; (ad04 <free_fw_mem+0xa0>)
    acf2:	4798      	blx	r3
}
    acf4:	46bd      	mov	sp, r7
    acf6:	b009      	add	sp, #36	; 0x24
    acf8:	bd90      	pop	{r4, r7, pc}
    acfa:	46c0      	nop			; (mov r8, r8)
    acfc:	000007f9 	.word	0x000007f9
    ad00:	0000cbd0 	.word	0x0000cbd0
    ad04:	00001095 	.word	0x00001095
    ad08:	0000cbe0 	.word	0x0000cbe0
    ad0c:	0000cc04 	.word	0x0000cc04

0000ad10 <choose_bin>:
* @details		If FlagA exists, we will load TestA this time, the we delete FlagA and create FlagB for the next time of loading.
				Creating FlagB is not in this function.
* @return
******************************************************************************/
static int choose_bin()
{
    ad10:	b590      	push	{r4, r7, lr}
    ad12:	b085      	sub	sp, #20
    ad14:	af00      	add	r7, sp, #0
	int flag = 0;
    ad16:	2300      	movs	r3, #0
    ad18:	60fb      	str	r3, [r7, #12]
	char test_file_name[] = "0:FlagA.bin";
    ad1a:	003b      	movs	r3, r7
    ad1c:	4a0f      	ldr	r2, [pc, #60]	; (ad5c <choose_bin+0x4c>)
    ad1e:	ca13      	ldmia	r2!, {r0, r1, r4}
    ad20:	c313      	stmia	r3!, {r0, r1, r4}
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad22:	003b      	movs	r3, r7
    ad24:	2230      	movs	r2, #48	; 0x30
    ad26:	701a      	strb	r2, [r3, #0]
	res = f_open(&file_object,  (char const *)test_file_name, FA_READ);
    ad28:	0039      	movs	r1, r7
    ad2a:	4b0d      	ldr	r3, [pc, #52]	; (ad60 <choose_bin+0x50>)
    ad2c:	2201      	movs	r2, #1
    ad2e:	0018      	movs	r0, r3
    ad30:	4b0c      	ldr	r3, [pc, #48]	; (ad64 <choose_bin+0x54>)
    ad32:	4798      	blx	r3
    ad34:	0003      	movs	r3, r0
    ad36:	001a      	movs	r2, r3
    ad38:	4b0b      	ldr	r3, [pc, #44]	; (ad68 <choose_bin+0x58>)
    ad3a:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK)
    ad3c:	4b0a      	ldr	r3, [pc, #40]	; (ad68 <choose_bin+0x58>)
    ad3e:	781b      	ldrb	r3, [r3, #0]
    ad40:	2b00      	cmp	r3, #0
    ad42:	d105      	bne.n	ad50 <choose_bin+0x40>
	{
		SerialConsoleWriteString("detect flag A!\r\n");
    ad44:	4b09      	ldr	r3, [pc, #36]	; (ad6c <choose_bin+0x5c>)
    ad46:	0018      	movs	r0, r3
    ad48:	4b09      	ldr	r3, [pc, #36]	; (ad70 <choose_bin+0x60>)
    ad4a:	4798      	blx	r3
		flag = 1;
    ad4c:	2301      	movs	r3, #1
    ad4e:	60fb      	str	r3, [r7, #12]
	}
	return flag;
    ad50:	68fb      	ldr	r3, [r7, #12]

}
    ad52:	0018      	movs	r0, r3
    ad54:	46bd      	mov	sp, r7
    ad56:	b005      	add	sp, #20
    ad58:	bd90      	pop	{r4, r7, pc}
    ad5a:	46c0      	nop			; (mov r8, r8)
    ad5c:	0000ca58 	.word	0x0000ca58
    ad60:	20000c34 	.word	0x20000c34
    ad64:	00009889 	.word	0x00009889
    ad68:	20000c8c 	.word	0x20000c8c
    ad6c:	0000cc24 	.word	0x0000cc24
    ad70:	00001095 	.word	0x00001095

0000ad74 <load_bin>:
* @brief        Load the binary file.
* @details		Write data in chunks to load the opened file into MCU firmware region. Keep reading if there are bytes left.
				Check CRC for each chunk read. If CRC is different, break. Tell the user CRC status when finshed.
* @return
******************************************************************************/
static void load_bin(char *helpStr){
    ad74:	b590      	push	{r4, r7, lr}
    ad76:	b09d      	sub	sp, #116	; 0x74
    ad78:	af00      	add	r7, sp, #0
    ad7a:	6078      	str	r0, [r7, #4]
	test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad7c:	4b50      	ldr	r3, [pc, #320]	; (aec0 <load_bin+0x14c>)
    ad7e:	2230      	movs	r2, #48	; 0x30
    ad80:	701a      	strb	r2, [r3, #0]
	res = f_open(&file_object, (char const *)test_bin_file, FA_READ);
    ad82:	494f      	ldr	r1, [pc, #316]	; (aec0 <load_bin+0x14c>)
    ad84:	4b4f      	ldr	r3, [pc, #316]	; (aec4 <load_bin+0x150>)
    ad86:	2201      	movs	r2, #1
    ad88:	0018      	movs	r0, r3
    ad8a:	4b4f      	ldr	r3, [pc, #316]	; (aec8 <load_bin+0x154>)
    ad8c:	4798      	blx	r3
    ad8e:	0003      	movs	r3, r0
    ad90:	001a      	movs	r2, r3
    ad92:	4b4e      	ldr	r3, [pc, #312]	; (aecc <load_bin+0x158>)
    ad94:	701a      	strb	r2, [r3, #0]
		
	if (res != FR_OK)
    ad96:	4b4d      	ldr	r3, [pc, #308]	; (aecc <load_bin+0x158>)
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	d003      	beq.n	ada6 <load_bin+0x32>
	{
		SerialConsoleWriteString("Could not open file!\r\n");
    ad9e:	4b4c      	ldr	r3, [pc, #304]	; (aed0 <load_bin+0x15c>)
    ada0:	0018      	movs	r0, r3
    ada2:	4b4c      	ldr	r3, [pc, #304]	; (aed4 <load_bin+0x160>)
    ada4:	4798      	blx	r3
	}
	
	#define BUFFER_SIZE 64
	int fileSize  = f_size(&file_object);
    ada6:	4b47      	ldr	r3, [pc, #284]	; (aec4 <load_bin+0x150>)
    ada8:	68db      	ldr	r3, [r3, #12]
    adaa:	663b      	str	r3, [r7, #96]	; 0x60
	int numBytesLeft = fileSize;
    adac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    adae:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t readBuffer[BUFFER_SIZE];
	
	
	uint32_t numBytesRead = 0;
    adb0:	2300      	movs	r3, #0
    adb2:	617b      	str	r3, [r7, #20]
	int numberBytesTotal = 0;
    adb4:	2300      	movs	r3, #0
    adb6:	66bb      	str	r3, [r7, #104]	; 0x68
	int pos = 0;
    adb8:	2300      	movs	r3, #0
    adba:	667b      	str	r3, [r7, #100]	; 0x64
	while(numBytesLeft  > 0) 
    adbc:	e068      	b.n	ae90 <load_bin+0x11c>
	{	
		int chunkSize = (numBytesLeft > BUFFER_SIZE) ? BUFFER_SIZE : numBytesLeft;
    adbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    adc0:	2b40      	cmp	r3, #64	; 0x40
    adc2:	dd00      	ble.n	adc6 <load_bin+0x52>
    adc4:	2340      	movs	r3, #64	; 0x40
    adc6:	65fb      	str	r3, [r7, #92]	; 0x5c
		
		res = f_read(&file_object, &readBuffer, chunkSize, &numBytesRead); //Question to students: What is numBytesRead? What are we doing here?
    adc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    adca:	2314      	movs	r3, #20
    adcc:	18fb      	adds	r3, r7, r3
    adce:	2118      	movs	r1, #24
    add0:	1879      	adds	r1, r7, r1
    add2:	483c      	ldr	r0, [pc, #240]	; (aec4 <load_bin+0x150>)
    add4:	4c40      	ldr	r4, [pc, #256]	; (aed8 <load_bin+0x164>)
    add6:	47a0      	blx	r4
    add8:	0003      	movs	r3, r0
    adda:	001a      	movs	r2, r3
    addc:	4b3b      	ldr	r3, [pc, #236]	; (aecc <load_bin+0x158>)
    adde:	701a      	strb	r2, [r3, #0]
		//numBytesRead stores the actual number of bytes that were read from the file. 
		//This value can be used to determine the next readBuffer's start address and determine whether all the data are read.
		
		res = nvm_write_buffer (APP_START_ADDRESS + pos, &readBuffer[0], chunkSize);
    ade0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ade2:	2290      	movs	r2, #144	; 0x90
    ade4:	0252      	lsls	r2, r2, #9
    ade6:	4694      	mov	ip, r2
    ade8:	4463      	add	r3, ip
    adea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    adec:	b292      	uxth	r2, r2
    adee:	2118      	movs	r1, #24
    adf0:	1879      	adds	r1, r7, r1
    adf2:	0018      	movs	r0, r3
    adf4:	4b39      	ldr	r3, [pc, #228]	; (aedc <load_bin+0x168>)
    adf6:	4798      	blx	r3
    adf8:	0003      	movs	r3, r0
    adfa:	001a      	movs	r2, r3
    adfc:	4b33      	ldr	r3, [pc, #204]	; (aecc <load_bin+0x158>)
    adfe:	701a      	strb	r2, [r3, #0]
		pos+=chunkSize;
    ae00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    ae02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ae04:	18d3      	adds	r3, r2, r3
    ae06:	667b      	str	r3, [r7, #100]	; 0x64
		if (res != FR_OK)
    ae08:	4b30      	ldr	r3, [pc, #192]	; (aecc <load_bin+0x158>)
    ae0a:	781b      	ldrb	r3, [r3, #0]
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	d004      	beq.n	ae1a <load_bin+0xa6>
		{
			SerialConsoleWriteString("Test write to NVM failed!\r\n");
    ae10:	4b33      	ldr	r3, [pc, #204]	; (aee0 <load_bin+0x16c>)
    ae12:	0018      	movs	r0, r3
    ae14:	4b2f      	ldr	r3, [pc, #188]	; (aed4 <load_bin+0x160>)
    ae16:	4798      	blx	r3
    ae18:	e03d      	b.n	ae96 <load_bin+0x122>
			break;
		}
		
		numBytesLeft -= numBytesRead;
    ae1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    ae1c:	697b      	ldr	r3, [r7, #20]
    ae1e:	1ad3      	subs	r3, r2, r3
    ae20:	66fb      	str	r3, [r7, #108]	; 0x6c
		numberBytesTotal += numBytesRead;
    ae22:	6eba      	ldr	r2, [r7, #104]	; 0x68
    ae24:	697b      	ldr	r3, [r7, #20]
    ae26:	18d3      	adds	r3, r2, r3
    ae28:	66bb      	str	r3, [r7, #104]	; 0x68
		
		
		
		uint32_t resultCrcSd = 0;
    ae2a:	2300      	movs	r3, #0
    ae2c:	613b      	str	r3, [r7, #16]
		*((volatile unsigned int*) 0x41007058) &= ~0x30000UL;
    ae2e:	4b2d      	ldr	r3, [pc, #180]	; (aee4 <load_bin+0x170>)
    ae30:	4a2c      	ldr	r2, [pc, #176]	; (aee4 <load_bin+0x170>)
    ae32:	6812      	ldr	r2, [r2, #0]
    ae34:	492c      	ldr	r1, [pc, #176]	; (aee8 <load_bin+0x174>)
    ae36:	400a      	ands	r2, r1
    ae38:	601a      	str	r2, [r3, #0]

		//CRC of SD Card
		enum status_code crcres = dsu_crc32_cal	(readBuffer,numBytesRead, &resultCrcSd); //Instructor note: Was it the third parameter used for? Please check how you can use the third parameter to do the CRC of a long data stream in chunks - you will need it!
    ae3a:	2318      	movs	r3, #24
    ae3c:	18fb      	adds	r3, r7, r3
    ae3e:	6979      	ldr	r1, [r7, #20]
    ae40:	225b      	movs	r2, #91	; 0x5b
    ae42:	18bc      	adds	r4, r7, r2
    ae44:	2210      	movs	r2, #16
    ae46:	18ba      	adds	r2, r7, r2
    ae48:	0018      	movs	r0, r3
    ae4a:	4b28      	ldr	r3, [pc, #160]	; (aeec <load_bin+0x178>)
    ae4c:	4798      	blx	r3
    ae4e:	0003      	movs	r3, r0
    ae50:	7023      	strb	r3, [r4, #0]
		// It is a pointer to a uint32_t variable that will store the calculated CRC-32 value. The function will update the value of this variable.
		//In this function, we check every time the function reads data.
	
		//Errata Part 2 - To be done after RAM CRC
		*((volatile unsigned int*) 0x41007058) |= 0x20000UL;
    ae52:	4b24      	ldr	r3, [pc, #144]	; (aee4 <load_bin+0x170>)
    ae54:	4a23      	ldr	r2, [pc, #140]	; (aee4 <load_bin+0x170>)
    ae56:	6812      	ldr	r2, [r2, #0]
    ae58:	2180      	movs	r1, #128	; 0x80
    ae5a:	0289      	lsls	r1, r1, #10
    ae5c:	430a      	orrs	r2, r1
    ae5e:	601a      	str	r2, [r3, #0]
	 
	 
		//CRC of memory (NVM)
		uint32_t resultCrcNvm = 0;
    ae60:	2300      	movs	r3, #0
    ae62:	60fb      	str	r3, [r7, #12]
		crcres |= dsu_crc32_cal	(APP_START_ADDRESS +pos - chunkSize	,numBytesRead, &resultCrcNvm);
    ae64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    ae66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ae68:	1ad3      	subs	r3, r2, r3
    ae6a:	2290      	movs	r2, #144	; 0x90
    ae6c:	0252      	lsls	r2, r2, #9
    ae6e:	4694      	mov	ip, r2
    ae70:	4463      	add	r3, ip
    ae72:	6979      	ldr	r1, [r7, #20]
    ae74:	220c      	movs	r2, #12
    ae76:	18ba      	adds	r2, r7, r2
    ae78:	0018      	movs	r0, r3
    ae7a:	4b1c      	ldr	r3, [pc, #112]	; (aeec <load_bin+0x178>)
    ae7c:	4798      	blx	r3
    ae7e:	0003      	movs	r3, r0
    ae80:	0019      	movs	r1, r3
    ae82:	235b      	movs	r3, #91	; 0x5b
    ae84:	18fb      	adds	r3, r7, r3
    ae86:	225b      	movs	r2, #91	; 0x5b
    ae88:	18ba      	adds	r2, r7, r2
    ae8a:	7812      	ldrb	r2, [r2, #0]
    ae8c:	430a      	orrs	r2, r1
    ae8e:	701a      	strb	r2, [r3, #0]
	while(numBytesLeft  > 0) 
    ae90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ae92:	2b00      	cmp	r3, #0
    ae94:	dc93      	bgt.n	adbe <load_bin+0x4a>
			break;
		}
	}
	

		if (res != FR_OK)
    ae96:	4b0d      	ldr	r3, [pc, #52]	; (aecc <load_bin+0x158>)
    ae98:	781b      	ldrb	r3, [r3, #0]
    ae9a:	2b00      	cmp	r3, #0
    ae9c:	d004      	beq.n	aea8 <load_bin+0x134>
		{
			SerialConsoleWriteString("Test write to NVM failed!\r\n");
    ae9e:	4b10      	ldr	r3, [pc, #64]	; (aee0 <load_bin+0x16c>)
    aea0:	0018      	movs	r0, r3
    aea2:	4b0c      	ldr	r3, [pc, #48]	; (aed4 <load_bin+0x160>)
    aea4:	4798      	blx	r3
		{
			SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
			SerialConsoleWriteString("CRC check succeeded!\r\n\n\n\n\n\n\n\n");
		}

}
    aea6:	e007      	b.n	aeb8 <load_bin+0x144>
			SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
    aea8:	4b11      	ldr	r3, [pc, #68]	; (aef0 <load_bin+0x17c>)
    aeaa:	0018      	movs	r0, r3
    aeac:	4b09      	ldr	r3, [pc, #36]	; (aed4 <load_bin+0x160>)
    aeae:	4798      	blx	r3
			SerialConsoleWriteString("CRC check succeeded!\r\n\n\n\n\n\n\n\n");
    aeb0:	4b10      	ldr	r3, [pc, #64]	; (aef4 <load_bin+0x180>)
    aeb2:	0018      	movs	r0, r3
    aeb4:	4b07      	ldr	r3, [pc, #28]	; (aed4 <load_bin+0x160>)
    aeb6:	4798      	blx	r3
}
    aeb8:	46c0      	nop			; (mov r8, r8)
    aeba:	46bd      	mov	sp, r7
    aebc:	b01d      	add	sp, #116	; 0x74
    aebe:	bd90      	pop	{r4, r7, pc}
    aec0:	20000020 	.word	0x20000020
    aec4:	20000c34 	.word	0x20000c34
    aec8:	00009889 	.word	0x00009889
    aecc:	20000c8c 	.word	0x20000c8c
    aed0:	0000cc38 	.word	0x0000cc38
    aed4:	00001095 	.word	0x00001095
    aed8:	00009db9 	.word	0x00009db9
    aedc:	000006ad 	.word	0x000006ad
    aee0:	0000cc50 	.word	0x0000cc50
    aee4:	41007058 	.word	0x41007058
    aee8:	fffcffff 	.word	0xfffcffff
    aeec:	00000381 	.word	0x00000381
    aef0:	0000cc6c 	.word	0x0000cc6c
    aef4:	0000cc8c 	.word	0x0000cc8c

0000aef8 <__udivsi3>:
    aef8:	2200      	movs	r2, #0
    aefa:	0843      	lsrs	r3, r0, #1
    aefc:	428b      	cmp	r3, r1
    aefe:	d374      	bcc.n	afea <__udivsi3+0xf2>
    af00:	0903      	lsrs	r3, r0, #4
    af02:	428b      	cmp	r3, r1
    af04:	d35f      	bcc.n	afc6 <__udivsi3+0xce>
    af06:	0a03      	lsrs	r3, r0, #8
    af08:	428b      	cmp	r3, r1
    af0a:	d344      	bcc.n	af96 <__udivsi3+0x9e>
    af0c:	0b03      	lsrs	r3, r0, #12
    af0e:	428b      	cmp	r3, r1
    af10:	d328      	bcc.n	af64 <__udivsi3+0x6c>
    af12:	0c03      	lsrs	r3, r0, #16
    af14:	428b      	cmp	r3, r1
    af16:	d30d      	bcc.n	af34 <__udivsi3+0x3c>
    af18:	22ff      	movs	r2, #255	; 0xff
    af1a:	0209      	lsls	r1, r1, #8
    af1c:	ba12      	rev	r2, r2
    af1e:	0c03      	lsrs	r3, r0, #16
    af20:	428b      	cmp	r3, r1
    af22:	d302      	bcc.n	af2a <__udivsi3+0x32>
    af24:	1212      	asrs	r2, r2, #8
    af26:	0209      	lsls	r1, r1, #8
    af28:	d065      	beq.n	aff6 <__udivsi3+0xfe>
    af2a:	0b03      	lsrs	r3, r0, #12
    af2c:	428b      	cmp	r3, r1
    af2e:	d319      	bcc.n	af64 <__udivsi3+0x6c>
    af30:	e000      	b.n	af34 <__udivsi3+0x3c>
    af32:	0a09      	lsrs	r1, r1, #8
    af34:	0bc3      	lsrs	r3, r0, #15
    af36:	428b      	cmp	r3, r1
    af38:	d301      	bcc.n	af3e <__udivsi3+0x46>
    af3a:	03cb      	lsls	r3, r1, #15
    af3c:	1ac0      	subs	r0, r0, r3
    af3e:	4152      	adcs	r2, r2
    af40:	0b83      	lsrs	r3, r0, #14
    af42:	428b      	cmp	r3, r1
    af44:	d301      	bcc.n	af4a <__udivsi3+0x52>
    af46:	038b      	lsls	r3, r1, #14
    af48:	1ac0      	subs	r0, r0, r3
    af4a:	4152      	adcs	r2, r2
    af4c:	0b43      	lsrs	r3, r0, #13
    af4e:	428b      	cmp	r3, r1
    af50:	d301      	bcc.n	af56 <__udivsi3+0x5e>
    af52:	034b      	lsls	r3, r1, #13
    af54:	1ac0      	subs	r0, r0, r3
    af56:	4152      	adcs	r2, r2
    af58:	0b03      	lsrs	r3, r0, #12
    af5a:	428b      	cmp	r3, r1
    af5c:	d301      	bcc.n	af62 <__udivsi3+0x6a>
    af5e:	030b      	lsls	r3, r1, #12
    af60:	1ac0      	subs	r0, r0, r3
    af62:	4152      	adcs	r2, r2
    af64:	0ac3      	lsrs	r3, r0, #11
    af66:	428b      	cmp	r3, r1
    af68:	d301      	bcc.n	af6e <__udivsi3+0x76>
    af6a:	02cb      	lsls	r3, r1, #11
    af6c:	1ac0      	subs	r0, r0, r3
    af6e:	4152      	adcs	r2, r2
    af70:	0a83      	lsrs	r3, r0, #10
    af72:	428b      	cmp	r3, r1
    af74:	d301      	bcc.n	af7a <__udivsi3+0x82>
    af76:	028b      	lsls	r3, r1, #10
    af78:	1ac0      	subs	r0, r0, r3
    af7a:	4152      	adcs	r2, r2
    af7c:	0a43      	lsrs	r3, r0, #9
    af7e:	428b      	cmp	r3, r1
    af80:	d301      	bcc.n	af86 <__udivsi3+0x8e>
    af82:	024b      	lsls	r3, r1, #9
    af84:	1ac0      	subs	r0, r0, r3
    af86:	4152      	adcs	r2, r2
    af88:	0a03      	lsrs	r3, r0, #8
    af8a:	428b      	cmp	r3, r1
    af8c:	d301      	bcc.n	af92 <__udivsi3+0x9a>
    af8e:	020b      	lsls	r3, r1, #8
    af90:	1ac0      	subs	r0, r0, r3
    af92:	4152      	adcs	r2, r2
    af94:	d2cd      	bcs.n	af32 <__udivsi3+0x3a>
    af96:	09c3      	lsrs	r3, r0, #7
    af98:	428b      	cmp	r3, r1
    af9a:	d301      	bcc.n	afa0 <__udivsi3+0xa8>
    af9c:	01cb      	lsls	r3, r1, #7
    af9e:	1ac0      	subs	r0, r0, r3
    afa0:	4152      	adcs	r2, r2
    afa2:	0983      	lsrs	r3, r0, #6
    afa4:	428b      	cmp	r3, r1
    afa6:	d301      	bcc.n	afac <__udivsi3+0xb4>
    afa8:	018b      	lsls	r3, r1, #6
    afaa:	1ac0      	subs	r0, r0, r3
    afac:	4152      	adcs	r2, r2
    afae:	0943      	lsrs	r3, r0, #5
    afb0:	428b      	cmp	r3, r1
    afb2:	d301      	bcc.n	afb8 <__udivsi3+0xc0>
    afb4:	014b      	lsls	r3, r1, #5
    afb6:	1ac0      	subs	r0, r0, r3
    afb8:	4152      	adcs	r2, r2
    afba:	0903      	lsrs	r3, r0, #4
    afbc:	428b      	cmp	r3, r1
    afbe:	d301      	bcc.n	afc4 <__udivsi3+0xcc>
    afc0:	010b      	lsls	r3, r1, #4
    afc2:	1ac0      	subs	r0, r0, r3
    afc4:	4152      	adcs	r2, r2
    afc6:	08c3      	lsrs	r3, r0, #3
    afc8:	428b      	cmp	r3, r1
    afca:	d301      	bcc.n	afd0 <__udivsi3+0xd8>
    afcc:	00cb      	lsls	r3, r1, #3
    afce:	1ac0      	subs	r0, r0, r3
    afd0:	4152      	adcs	r2, r2
    afd2:	0883      	lsrs	r3, r0, #2
    afd4:	428b      	cmp	r3, r1
    afd6:	d301      	bcc.n	afdc <__udivsi3+0xe4>
    afd8:	008b      	lsls	r3, r1, #2
    afda:	1ac0      	subs	r0, r0, r3
    afdc:	4152      	adcs	r2, r2
    afde:	0843      	lsrs	r3, r0, #1
    afe0:	428b      	cmp	r3, r1
    afe2:	d301      	bcc.n	afe8 <__udivsi3+0xf0>
    afe4:	004b      	lsls	r3, r1, #1
    afe6:	1ac0      	subs	r0, r0, r3
    afe8:	4152      	adcs	r2, r2
    afea:	1a41      	subs	r1, r0, r1
    afec:	d200      	bcs.n	aff0 <__udivsi3+0xf8>
    afee:	4601      	mov	r1, r0
    aff0:	4152      	adcs	r2, r2
    aff2:	4610      	mov	r0, r2
    aff4:	4770      	bx	lr
    aff6:	e7ff      	b.n	aff8 <__udivsi3+0x100>
    aff8:	b501      	push	{r0, lr}
    affa:	2000      	movs	r0, #0
    affc:	f000 f8f0 	bl	b1e0 <__aeabi_idiv0>
    b000:	bd02      	pop	{r1, pc}
    b002:	46c0      	nop			; (mov r8, r8)

0000b004 <__aeabi_uidivmod>:
    b004:	2900      	cmp	r1, #0
    b006:	d0f7      	beq.n	aff8 <__udivsi3+0x100>
    b008:	e776      	b.n	aef8 <__udivsi3>
    b00a:	4770      	bx	lr

0000b00c <__divsi3>:
    b00c:	4603      	mov	r3, r0
    b00e:	430b      	orrs	r3, r1
    b010:	d47f      	bmi.n	b112 <__divsi3+0x106>
    b012:	2200      	movs	r2, #0
    b014:	0843      	lsrs	r3, r0, #1
    b016:	428b      	cmp	r3, r1
    b018:	d374      	bcc.n	b104 <__divsi3+0xf8>
    b01a:	0903      	lsrs	r3, r0, #4
    b01c:	428b      	cmp	r3, r1
    b01e:	d35f      	bcc.n	b0e0 <__divsi3+0xd4>
    b020:	0a03      	lsrs	r3, r0, #8
    b022:	428b      	cmp	r3, r1
    b024:	d344      	bcc.n	b0b0 <__divsi3+0xa4>
    b026:	0b03      	lsrs	r3, r0, #12
    b028:	428b      	cmp	r3, r1
    b02a:	d328      	bcc.n	b07e <__divsi3+0x72>
    b02c:	0c03      	lsrs	r3, r0, #16
    b02e:	428b      	cmp	r3, r1
    b030:	d30d      	bcc.n	b04e <__divsi3+0x42>
    b032:	22ff      	movs	r2, #255	; 0xff
    b034:	0209      	lsls	r1, r1, #8
    b036:	ba12      	rev	r2, r2
    b038:	0c03      	lsrs	r3, r0, #16
    b03a:	428b      	cmp	r3, r1
    b03c:	d302      	bcc.n	b044 <__divsi3+0x38>
    b03e:	1212      	asrs	r2, r2, #8
    b040:	0209      	lsls	r1, r1, #8
    b042:	d065      	beq.n	b110 <__divsi3+0x104>
    b044:	0b03      	lsrs	r3, r0, #12
    b046:	428b      	cmp	r3, r1
    b048:	d319      	bcc.n	b07e <__divsi3+0x72>
    b04a:	e000      	b.n	b04e <__divsi3+0x42>
    b04c:	0a09      	lsrs	r1, r1, #8
    b04e:	0bc3      	lsrs	r3, r0, #15
    b050:	428b      	cmp	r3, r1
    b052:	d301      	bcc.n	b058 <__divsi3+0x4c>
    b054:	03cb      	lsls	r3, r1, #15
    b056:	1ac0      	subs	r0, r0, r3
    b058:	4152      	adcs	r2, r2
    b05a:	0b83      	lsrs	r3, r0, #14
    b05c:	428b      	cmp	r3, r1
    b05e:	d301      	bcc.n	b064 <__divsi3+0x58>
    b060:	038b      	lsls	r3, r1, #14
    b062:	1ac0      	subs	r0, r0, r3
    b064:	4152      	adcs	r2, r2
    b066:	0b43      	lsrs	r3, r0, #13
    b068:	428b      	cmp	r3, r1
    b06a:	d301      	bcc.n	b070 <__divsi3+0x64>
    b06c:	034b      	lsls	r3, r1, #13
    b06e:	1ac0      	subs	r0, r0, r3
    b070:	4152      	adcs	r2, r2
    b072:	0b03      	lsrs	r3, r0, #12
    b074:	428b      	cmp	r3, r1
    b076:	d301      	bcc.n	b07c <__divsi3+0x70>
    b078:	030b      	lsls	r3, r1, #12
    b07a:	1ac0      	subs	r0, r0, r3
    b07c:	4152      	adcs	r2, r2
    b07e:	0ac3      	lsrs	r3, r0, #11
    b080:	428b      	cmp	r3, r1
    b082:	d301      	bcc.n	b088 <__divsi3+0x7c>
    b084:	02cb      	lsls	r3, r1, #11
    b086:	1ac0      	subs	r0, r0, r3
    b088:	4152      	adcs	r2, r2
    b08a:	0a83      	lsrs	r3, r0, #10
    b08c:	428b      	cmp	r3, r1
    b08e:	d301      	bcc.n	b094 <__divsi3+0x88>
    b090:	028b      	lsls	r3, r1, #10
    b092:	1ac0      	subs	r0, r0, r3
    b094:	4152      	adcs	r2, r2
    b096:	0a43      	lsrs	r3, r0, #9
    b098:	428b      	cmp	r3, r1
    b09a:	d301      	bcc.n	b0a0 <__divsi3+0x94>
    b09c:	024b      	lsls	r3, r1, #9
    b09e:	1ac0      	subs	r0, r0, r3
    b0a0:	4152      	adcs	r2, r2
    b0a2:	0a03      	lsrs	r3, r0, #8
    b0a4:	428b      	cmp	r3, r1
    b0a6:	d301      	bcc.n	b0ac <__divsi3+0xa0>
    b0a8:	020b      	lsls	r3, r1, #8
    b0aa:	1ac0      	subs	r0, r0, r3
    b0ac:	4152      	adcs	r2, r2
    b0ae:	d2cd      	bcs.n	b04c <__divsi3+0x40>
    b0b0:	09c3      	lsrs	r3, r0, #7
    b0b2:	428b      	cmp	r3, r1
    b0b4:	d301      	bcc.n	b0ba <__divsi3+0xae>
    b0b6:	01cb      	lsls	r3, r1, #7
    b0b8:	1ac0      	subs	r0, r0, r3
    b0ba:	4152      	adcs	r2, r2
    b0bc:	0983      	lsrs	r3, r0, #6
    b0be:	428b      	cmp	r3, r1
    b0c0:	d301      	bcc.n	b0c6 <__divsi3+0xba>
    b0c2:	018b      	lsls	r3, r1, #6
    b0c4:	1ac0      	subs	r0, r0, r3
    b0c6:	4152      	adcs	r2, r2
    b0c8:	0943      	lsrs	r3, r0, #5
    b0ca:	428b      	cmp	r3, r1
    b0cc:	d301      	bcc.n	b0d2 <__divsi3+0xc6>
    b0ce:	014b      	lsls	r3, r1, #5
    b0d0:	1ac0      	subs	r0, r0, r3
    b0d2:	4152      	adcs	r2, r2
    b0d4:	0903      	lsrs	r3, r0, #4
    b0d6:	428b      	cmp	r3, r1
    b0d8:	d301      	bcc.n	b0de <__divsi3+0xd2>
    b0da:	010b      	lsls	r3, r1, #4
    b0dc:	1ac0      	subs	r0, r0, r3
    b0de:	4152      	adcs	r2, r2
    b0e0:	08c3      	lsrs	r3, r0, #3
    b0e2:	428b      	cmp	r3, r1
    b0e4:	d301      	bcc.n	b0ea <__divsi3+0xde>
    b0e6:	00cb      	lsls	r3, r1, #3
    b0e8:	1ac0      	subs	r0, r0, r3
    b0ea:	4152      	adcs	r2, r2
    b0ec:	0883      	lsrs	r3, r0, #2
    b0ee:	428b      	cmp	r3, r1
    b0f0:	d301      	bcc.n	b0f6 <__divsi3+0xea>
    b0f2:	008b      	lsls	r3, r1, #2
    b0f4:	1ac0      	subs	r0, r0, r3
    b0f6:	4152      	adcs	r2, r2
    b0f8:	0843      	lsrs	r3, r0, #1
    b0fa:	428b      	cmp	r3, r1
    b0fc:	d301      	bcc.n	b102 <__divsi3+0xf6>
    b0fe:	004b      	lsls	r3, r1, #1
    b100:	1ac0      	subs	r0, r0, r3
    b102:	4152      	adcs	r2, r2
    b104:	1a41      	subs	r1, r0, r1
    b106:	d200      	bcs.n	b10a <__divsi3+0xfe>
    b108:	4601      	mov	r1, r0
    b10a:	4152      	adcs	r2, r2
    b10c:	4610      	mov	r0, r2
    b10e:	4770      	bx	lr
    b110:	e05d      	b.n	b1ce <__divsi3+0x1c2>
    b112:	0fca      	lsrs	r2, r1, #31
    b114:	d000      	beq.n	b118 <__divsi3+0x10c>
    b116:	4249      	negs	r1, r1
    b118:	1003      	asrs	r3, r0, #32
    b11a:	d300      	bcc.n	b11e <__divsi3+0x112>
    b11c:	4240      	negs	r0, r0
    b11e:	4053      	eors	r3, r2
    b120:	2200      	movs	r2, #0
    b122:	469c      	mov	ip, r3
    b124:	0903      	lsrs	r3, r0, #4
    b126:	428b      	cmp	r3, r1
    b128:	d32d      	bcc.n	b186 <__divsi3+0x17a>
    b12a:	0a03      	lsrs	r3, r0, #8
    b12c:	428b      	cmp	r3, r1
    b12e:	d312      	bcc.n	b156 <__divsi3+0x14a>
    b130:	22fc      	movs	r2, #252	; 0xfc
    b132:	0189      	lsls	r1, r1, #6
    b134:	ba12      	rev	r2, r2
    b136:	0a03      	lsrs	r3, r0, #8
    b138:	428b      	cmp	r3, r1
    b13a:	d30c      	bcc.n	b156 <__divsi3+0x14a>
    b13c:	0189      	lsls	r1, r1, #6
    b13e:	1192      	asrs	r2, r2, #6
    b140:	428b      	cmp	r3, r1
    b142:	d308      	bcc.n	b156 <__divsi3+0x14a>
    b144:	0189      	lsls	r1, r1, #6
    b146:	1192      	asrs	r2, r2, #6
    b148:	428b      	cmp	r3, r1
    b14a:	d304      	bcc.n	b156 <__divsi3+0x14a>
    b14c:	0189      	lsls	r1, r1, #6
    b14e:	d03a      	beq.n	b1c6 <__divsi3+0x1ba>
    b150:	1192      	asrs	r2, r2, #6
    b152:	e000      	b.n	b156 <__divsi3+0x14a>
    b154:	0989      	lsrs	r1, r1, #6
    b156:	09c3      	lsrs	r3, r0, #7
    b158:	428b      	cmp	r3, r1
    b15a:	d301      	bcc.n	b160 <__divsi3+0x154>
    b15c:	01cb      	lsls	r3, r1, #7
    b15e:	1ac0      	subs	r0, r0, r3
    b160:	4152      	adcs	r2, r2
    b162:	0983      	lsrs	r3, r0, #6
    b164:	428b      	cmp	r3, r1
    b166:	d301      	bcc.n	b16c <__divsi3+0x160>
    b168:	018b      	lsls	r3, r1, #6
    b16a:	1ac0      	subs	r0, r0, r3
    b16c:	4152      	adcs	r2, r2
    b16e:	0943      	lsrs	r3, r0, #5
    b170:	428b      	cmp	r3, r1
    b172:	d301      	bcc.n	b178 <__divsi3+0x16c>
    b174:	014b      	lsls	r3, r1, #5
    b176:	1ac0      	subs	r0, r0, r3
    b178:	4152      	adcs	r2, r2
    b17a:	0903      	lsrs	r3, r0, #4
    b17c:	428b      	cmp	r3, r1
    b17e:	d301      	bcc.n	b184 <__divsi3+0x178>
    b180:	010b      	lsls	r3, r1, #4
    b182:	1ac0      	subs	r0, r0, r3
    b184:	4152      	adcs	r2, r2
    b186:	08c3      	lsrs	r3, r0, #3
    b188:	428b      	cmp	r3, r1
    b18a:	d301      	bcc.n	b190 <__divsi3+0x184>
    b18c:	00cb      	lsls	r3, r1, #3
    b18e:	1ac0      	subs	r0, r0, r3
    b190:	4152      	adcs	r2, r2
    b192:	0883      	lsrs	r3, r0, #2
    b194:	428b      	cmp	r3, r1
    b196:	d301      	bcc.n	b19c <__divsi3+0x190>
    b198:	008b      	lsls	r3, r1, #2
    b19a:	1ac0      	subs	r0, r0, r3
    b19c:	4152      	adcs	r2, r2
    b19e:	d2d9      	bcs.n	b154 <__divsi3+0x148>
    b1a0:	0843      	lsrs	r3, r0, #1
    b1a2:	428b      	cmp	r3, r1
    b1a4:	d301      	bcc.n	b1aa <__divsi3+0x19e>
    b1a6:	004b      	lsls	r3, r1, #1
    b1a8:	1ac0      	subs	r0, r0, r3
    b1aa:	4152      	adcs	r2, r2
    b1ac:	1a41      	subs	r1, r0, r1
    b1ae:	d200      	bcs.n	b1b2 <__divsi3+0x1a6>
    b1b0:	4601      	mov	r1, r0
    b1b2:	4663      	mov	r3, ip
    b1b4:	4152      	adcs	r2, r2
    b1b6:	105b      	asrs	r3, r3, #1
    b1b8:	4610      	mov	r0, r2
    b1ba:	d301      	bcc.n	b1c0 <__divsi3+0x1b4>
    b1bc:	4240      	negs	r0, r0
    b1be:	2b00      	cmp	r3, #0
    b1c0:	d500      	bpl.n	b1c4 <__divsi3+0x1b8>
    b1c2:	4249      	negs	r1, r1
    b1c4:	4770      	bx	lr
    b1c6:	4663      	mov	r3, ip
    b1c8:	105b      	asrs	r3, r3, #1
    b1ca:	d300      	bcc.n	b1ce <__divsi3+0x1c2>
    b1cc:	4240      	negs	r0, r0
    b1ce:	b501      	push	{r0, lr}
    b1d0:	2000      	movs	r0, #0
    b1d2:	f000 f805 	bl	b1e0 <__aeabi_idiv0>
    b1d6:	bd02      	pop	{r1, pc}

0000b1d8 <__aeabi_idivmod>:
    b1d8:	2900      	cmp	r1, #0
    b1da:	d0f8      	beq.n	b1ce <__divsi3+0x1c2>
    b1dc:	e716      	b.n	b00c <__divsi3>
    b1de:	4770      	bx	lr

0000b1e0 <__aeabi_idiv0>:
    b1e0:	4770      	bx	lr
    b1e2:	46c0      	nop			; (mov r8, r8)

0000b1e4 <__aeabi_lmul>:
    b1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1e6:	46ce      	mov	lr, r9
    b1e8:	4647      	mov	r7, r8
    b1ea:	0415      	lsls	r5, r2, #16
    b1ec:	0c2d      	lsrs	r5, r5, #16
    b1ee:	002e      	movs	r6, r5
    b1f0:	b580      	push	{r7, lr}
    b1f2:	0407      	lsls	r7, r0, #16
    b1f4:	0c14      	lsrs	r4, r2, #16
    b1f6:	0c3f      	lsrs	r7, r7, #16
    b1f8:	4699      	mov	r9, r3
    b1fa:	0c03      	lsrs	r3, r0, #16
    b1fc:	437e      	muls	r6, r7
    b1fe:	435d      	muls	r5, r3
    b200:	4367      	muls	r7, r4
    b202:	4363      	muls	r3, r4
    b204:	197f      	adds	r7, r7, r5
    b206:	0c34      	lsrs	r4, r6, #16
    b208:	19e4      	adds	r4, r4, r7
    b20a:	469c      	mov	ip, r3
    b20c:	42a5      	cmp	r5, r4
    b20e:	d903      	bls.n	b218 <__aeabi_lmul+0x34>
    b210:	2380      	movs	r3, #128	; 0x80
    b212:	025b      	lsls	r3, r3, #9
    b214:	4698      	mov	r8, r3
    b216:	44c4      	add	ip, r8
    b218:	464b      	mov	r3, r9
    b21a:	4351      	muls	r1, r2
    b21c:	4343      	muls	r3, r0
    b21e:	0436      	lsls	r6, r6, #16
    b220:	0c36      	lsrs	r6, r6, #16
    b222:	0c25      	lsrs	r5, r4, #16
    b224:	0424      	lsls	r4, r4, #16
    b226:	4465      	add	r5, ip
    b228:	19a4      	adds	r4, r4, r6
    b22a:	1859      	adds	r1, r3, r1
    b22c:	1949      	adds	r1, r1, r5
    b22e:	0020      	movs	r0, r4
    b230:	bc0c      	pop	{r2, r3}
    b232:	4690      	mov	r8, r2
    b234:	4699      	mov	r9, r3
    b236:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b238 <__libc_init_array>:
    b238:	b570      	push	{r4, r5, r6, lr}
    b23a:	2600      	movs	r6, #0
    b23c:	4d0c      	ldr	r5, [pc, #48]	; (b270 <__libc_init_array+0x38>)
    b23e:	4c0d      	ldr	r4, [pc, #52]	; (b274 <__libc_init_array+0x3c>)
    b240:	1b64      	subs	r4, r4, r5
    b242:	10a4      	asrs	r4, r4, #2
    b244:	42a6      	cmp	r6, r4
    b246:	d109      	bne.n	b25c <__libc_init_array+0x24>
    b248:	2600      	movs	r6, #0
    b24a:	f001 fd7b 	bl	cd44 <_init>
    b24e:	4d0a      	ldr	r5, [pc, #40]	; (b278 <__libc_init_array+0x40>)
    b250:	4c0a      	ldr	r4, [pc, #40]	; (b27c <__libc_init_array+0x44>)
    b252:	1b64      	subs	r4, r4, r5
    b254:	10a4      	asrs	r4, r4, #2
    b256:	42a6      	cmp	r6, r4
    b258:	d105      	bne.n	b266 <__libc_init_array+0x2e>
    b25a:	bd70      	pop	{r4, r5, r6, pc}
    b25c:	00b3      	lsls	r3, r6, #2
    b25e:	58eb      	ldr	r3, [r5, r3]
    b260:	4798      	blx	r3
    b262:	3601      	adds	r6, #1
    b264:	e7ee      	b.n	b244 <__libc_init_array+0xc>
    b266:	00b3      	lsls	r3, r6, #2
    b268:	58eb      	ldr	r3, [r5, r3]
    b26a:	4798      	blx	r3
    b26c:	3601      	adds	r6, #1
    b26e:	e7f2      	b.n	b256 <__libc_init_array+0x1e>
    b270:	0000cd50 	.word	0x0000cd50
    b274:	0000cd50 	.word	0x0000cd50
    b278:	0000cd50 	.word	0x0000cd50
    b27c:	0000cd54 	.word	0x0000cd54

0000b280 <malloc>:
    b280:	b510      	push	{r4, lr}
    b282:	4b03      	ldr	r3, [pc, #12]	; (b290 <malloc+0x10>)
    b284:	0001      	movs	r1, r0
    b286:	6818      	ldr	r0, [r3, #0]
    b288:	f000 f860 	bl	b34c <_malloc_r>
    b28c:	bd10      	pop	{r4, pc}
    b28e:	46c0      	nop			; (mov r8, r8)
    b290:	20000030 	.word	0x20000030

0000b294 <memcpy>:
    b294:	2300      	movs	r3, #0
    b296:	b510      	push	{r4, lr}
    b298:	429a      	cmp	r2, r3
    b29a:	d100      	bne.n	b29e <memcpy+0xa>
    b29c:	bd10      	pop	{r4, pc}
    b29e:	5ccc      	ldrb	r4, [r1, r3]
    b2a0:	54c4      	strb	r4, [r0, r3]
    b2a2:	3301      	adds	r3, #1
    b2a4:	e7f8      	b.n	b298 <memcpy+0x4>

0000b2a6 <memset>:
    b2a6:	0003      	movs	r3, r0
    b2a8:	1882      	adds	r2, r0, r2
    b2aa:	4293      	cmp	r3, r2
    b2ac:	d100      	bne.n	b2b0 <memset+0xa>
    b2ae:	4770      	bx	lr
    b2b0:	7019      	strb	r1, [r3, #0]
    b2b2:	3301      	adds	r3, #1
    b2b4:	e7f9      	b.n	b2aa <memset+0x4>
	...

0000b2b8 <_free_r>:
    b2b8:	b570      	push	{r4, r5, r6, lr}
    b2ba:	0005      	movs	r5, r0
    b2bc:	2900      	cmp	r1, #0
    b2be:	d010      	beq.n	b2e2 <_free_r+0x2a>
    b2c0:	1f0c      	subs	r4, r1, #4
    b2c2:	6823      	ldr	r3, [r4, #0]
    b2c4:	2b00      	cmp	r3, #0
    b2c6:	da00      	bge.n	b2ca <_free_r+0x12>
    b2c8:	18e4      	adds	r4, r4, r3
    b2ca:	0028      	movs	r0, r5
    b2cc:	f000 fb54 	bl	b978 <__malloc_lock>
    b2d0:	4a1d      	ldr	r2, [pc, #116]	; (b348 <_free_r+0x90>)
    b2d2:	6813      	ldr	r3, [r2, #0]
    b2d4:	2b00      	cmp	r3, #0
    b2d6:	d105      	bne.n	b2e4 <_free_r+0x2c>
    b2d8:	6063      	str	r3, [r4, #4]
    b2da:	6014      	str	r4, [r2, #0]
    b2dc:	0028      	movs	r0, r5
    b2de:	f000 fb4c 	bl	b97a <__malloc_unlock>
    b2e2:	bd70      	pop	{r4, r5, r6, pc}
    b2e4:	42a3      	cmp	r3, r4
    b2e6:	d909      	bls.n	b2fc <_free_r+0x44>
    b2e8:	6821      	ldr	r1, [r4, #0]
    b2ea:	1860      	adds	r0, r4, r1
    b2ec:	4283      	cmp	r3, r0
    b2ee:	d1f3      	bne.n	b2d8 <_free_r+0x20>
    b2f0:	6818      	ldr	r0, [r3, #0]
    b2f2:	685b      	ldr	r3, [r3, #4]
    b2f4:	1841      	adds	r1, r0, r1
    b2f6:	6021      	str	r1, [r4, #0]
    b2f8:	e7ee      	b.n	b2d8 <_free_r+0x20>
    b2fa:	0013      	movs	r3, r2
    b2fc:	685a      	ldr	r2, [r3, #4]
    b2fe:	2a00      	cmp	r2, #0
    b300:	d001      	beq.n	b306 <_free_r+0x4e>
    b302:	42a2      	cmp	r2, r4
    b304:	d9f9      	bls.n	b2fa <_free_r+0x42>
    b306:	6819      	ldr	r1, [r3, #0]
    b308:	1858      	adds	r0, r3, r1
    b30a:	42a0      	cmp	r0, r4
    b30c:	d10b      	bne.n	b326 <_free_r+0x6e>
    b30e:	6820      	ldr	r0, [r4, #0]
    b310:	1809      	adds	r1, r1, r0
    b312:	1858      	adds	r0, r3, r1
    b314:	6019      	str	r1, [r3, #0]
    b316:	4282      	cmp	r2, r0
    b318:	d1e0      	bne.n	b2dc <_free_r+0x24>
    b31a:	6810      	ldr	r0, [r2, #0]
    b31c:	6852      	ldr	r2, [r2, #4]
    b31e:	1841      	adds	r1, r0, r1
    b320:	6019      	str	r1, [r3, #0]
    b322:	605a      	str	r2, [r3, #4]
    b324:	e7da      	b.n	b2dc <_free_r+0x24>
    b326:	42a0      	cmp	r0, r4
    b328:	d902      	bls.n	b330 <_free_r+0x78>
    b32a:	230c      	movs	r3, #12
    b32c:	602b      	str	r3, [r5, #0]
    b32e:	e7d5      	b.n	b2dc <_free_r+0x24>
    b330:	6821      	ldr	r1, [r4, #0]
    b332:	1860      	adds	r0, r4, r1
    b334:	4282      	cmp	r2, r0
    b336:	d103      	bne.n	b340 <_free_r+0x88>
    b338:	6810      	ldr	r0, [r2, #0]
    b33a:	6852      	ldr	r2, [r2, #4]
    b33c:	1841      	adds	r1, r0, r1
    b33e:	6021      	str	r1, [r4, #0]
    b340:	6062      	str	r2, [r4, #4]
    b342:	605c      	str	r4, [r3, #4]
    b344:	e7ca      	b.n	b2dc <_free_r+0x24>
    b346:	46c0      	nop			; (mov r8, r8)
    b348:	20000184 	.word	0x20000184

0000b34c <_malloc_r>:
    b34c:	2303      	movs	r3, #3
    b34e:	b570      	push	{r4, r5, r6, lr}
    b350:	1ccd      	adds	r5, r1, #3
    b352:	439d      	bics	r5, r3
    b354:	3508      	adds	r5, #8
    b356:	0006      	movs	r6, r0
    b358:	2d0c      	cmp	r5, #12
    b35a:	d21e      	bcs.n	b39a <_malloc_r+0x4e>
    b35c:	250c      	movs	r5, #12
    b35e:	42a9      	cmp	r1, r5
    b360:	d81d      	bhi.n	b39e <_malloc_r+0x52>
    b362:	0030      	movs	r0, r6
    b364:	f000 fb08 	bl	b978 <__malloc_lock>
    b368:	4a25      	ldr	r2, [pc, #148]	; (b400 <_malloc_r+0xb4>)
    b36a:	6814      	ldr	r4, [r2, #0]
    b36c:	0021      	movs	r1, r4
    b36e:	2900      	cmp	r1, #0
    b370:	d119      	bne.n	b3a6 <_malloc_r+0x5a>
    b372:	4c24      	ldr	r4, [pc, #144]	; (b404 <_malloc_r+0xb8>)
    b374:	6823      	ldr	r3, [r4, #0]
    b376:	2b00      	cmp	r3, #0
    b378:	d103      	bne.n	b382 <_malloc_r+0x36>
    b37a:	0030      	movs	r0, r6
    b37c:	f000 f844 	bl	b408 <_sbrk_r>
    b380:	6020      	str	r0, [r4, #0]
    b382:	0029      	movs	r1, r5
    b384:	0030      	movs	r0, r6
    b386:	f000 f83f 	bl	b408 <_sbrk_r>
    b38a:	1c43      	adds	r3, r0, #1
    b38c:	d12c      	bne.n	b3e8 <_malloc_r+0x9c>
    b38e:	230c      	movs	r3, #12
    b390:	0030      	movs	r0, r6
    b392:	6033      	str	r3, [r6, #0]
    b394:	f000 faf1 	bl	b97a <__malloc_unlock>
    b398:	e003      	b.n	b3a2 <_malloc_r+0x56>
    b39a:	2d00      	cmp	r5, #0
    b39c:	dadf      	bge.n	b35e <_malloc_r+0x12>
    b39e:	230c      	movs	r3, #12
    b3a0:	6033      	str	r3, [r6, #0]
    b3a2:	2000      	movs	r0, #0
    b3a4:	bd70      	pop	{r4, r5, r6, pc}
    b3a6:	680b      	ldr	r3, [r1, #0]
    b3a8:	1b5b      	subs	r3, r3, r5
    b3aa:	d41a      	bmi.n	b3e2 <_malloc_r+0x96>
    b3ac:	2b0b      	cmp	r3, #11
    b3ae:	d903      	bls.n	b3b8 <_malloc_r+0x6c>
    b3b0:	600b      	str	r3, [r1, #0]
    b3b2:	18cc      	adds	r4, r1, r3
    b3b4:	6025      	str	r5, [r4, #0]
    b3b6:	e003      	b.n	b3c0 <_malloc_r+0x74>
    b3b8:	428c      	cmp	r4, r1
    b3ba:	d10e      	bne.n	b3da <_malloc_r+0x8e>
    b3bc:	6863      	ldr	r3, [r4, #4]
    b3be:	6013      	str	r3, [r2, #0]
    b3c0:	0030      	movs	r0, r6
    b3c2:	f000 fada 	bl	b97a <__malloc_unlock>
    b3c6:	0020      	movs	r0, r4
    b3c8:	2207      	movs	r2, #7
    b3ca:	300b      	adds	r0, #11
    b3cc:	1d23      	adds	r3, r4, #4
    b3ce:	4390      	bics	r0, r2
    b3d0:	1ac3      	subs	r3, r0, r3
    b3d2:	d0e7      	beq.n	b3a4 <_malloc_r+0x58>
    b3d4:	425a      	negs	r2, r3
    b3d6:	50e2      	str	r2, [r4, r3]
    b3d8:	e7e4      	b.n	b3a4 <_malloc_r+0x58>
    b3da:	684b      	ldr	r3, [r1, #4]
    b3dc:	6063      	str	r3, [r4, #4]
    b3de:	000c      	movs	r4, r1
    b3e0:	e7ee      	b.n	b3c0 <_malloc_r+0x74>
    b3e2:	000c      	movs	r4, r1
    b3e4:	6849      	ldr	r1, [r1, #4]
    b3e6:	e7c2      	b.n	b36e <_malloc_r+0x22>
    b3e8:	2303      	movs	r3, #3
    b3ea:	1cc4      	adds	r4, r0, #3
    b3ec:	439c      	bics	r4, r3
    b3ee:	42a0      	cmp	r0, r4
    b3f0:	d0e0      	beq.n	b3b4 <_malloc_r+0x68>
    b3f2:	1a21      	subs	r1, r4, r0
    b3f4:	0030      	movs	r0, r6
    b3f6:	f000 f807 	bl	b408 <_sbrk_r>
    b3fa:	1c43      	adds	r3, r0, #1
    b3fc:	d1da      	bne.n	b3b4 <_malloc_r+0x68>
    b3fe:	e7c6      	b.n	b38e <_malloc_r+0x42>
    b400:	20000184 	.word	0x20000184
    b404:	20000188 	.word	0x20000188

0000b408 <_sbrk_r>:
    b408:	2300      	movs	r3, #0
    b40a:	b570      	push	{r4, r5, r6, lr}
    b40c:	4c06      	ldr	r4, [pc, #24]	; (b428 <_sbrk_r+0x20>)
    b40e:	0005      	movs	r5, r0
    b410:	0008      	movs	r0, r1
    b412:	6023      	str	r3, [r4, #0]
    b414:	f7fb fe54 	bl	70c0 <_sbrk>
    b418:	1c43      	adds	r3, r0, #1
    b41a:	d103      	bne.n	b424 <_sbrk_r+0x1c>
    b41c:	6823      	ldr	r3, [r4, #0]
    b41e:	2b00      	cmp	r3, #0
    b420:	d000      	beq.n	b424 <_sbrk_r+0x1c>
    b422:	602b      	str	r3, [r5, #0]
    b424:	bd70      	pop	{r4, r5, r6, pc}
    b426:	46c0      	nop			; (mov r8, r8)
    b428:	20000c90 	.word	0x20000c90

0000b42c <setbuf>:
    b42c:	424a      	negs	r2, r1
    b42e:	414a      	adcs	r2, r1
    b430:	2380      	movs	r3, #128	; 0x80
    b432:	b510      	push	{r4, lr}
    b434:	0052      	lsls	r2, r2, #1
    b436:	00db      	lsls	r3, r3, #3
    b438:	f000 f802 	bl	b440 <setvbuf>
    b43c:	bd10      	pop	{r4, pc}
	...

0000b440 <setvbuf>:
    b440:	b5f0      	push	{r4, r5, r6, r7, lr}
    b442:	001d      	movs	r5, r3
    b444:	4b4f      	ldr	r3, [pc, #316]	; (b584 <setvbuf+0x144>)
    b446:	b085      	sub	sp, #20
    b448:	681e      	ldr	r6, [r3, #0]
    b44a:	0004      	movs	r4, r0
    b44c:	000f      	movs	r7, r1
    b44e:	9200      	str	r2, [sp, #0]
    b450:	2e00      	cmp	r6, #0
    b452:	d005      	beq.n	b460 <setvbuf+0x20>
    b454:	69b3      	ldr	r3, [r6, #24]
    b456:	2b00      	cmp	r3, #0
    b458:	d102      	bne.n	b460 <setvbuf+0x20>
    b45a:	0030      	movs	r0, r6
    b45c:	f000 f9ce 	bl	b7fc <__sinit>
    b460:	4b49      	ldr	r3, [pc, #292]	; (b588 <setvbuf+0x148>)
    b462:	429c      	cmp	r4, r3
    b464:	d150      	bne.n	b508 <setvbuf+0xc8>
    b466:	6874      	ldr	r4, [r6, #4]
    b468:	9b00      	ldr	r3, [sp, #0]
    b46a:	2b02      	cmp	r3, #2
    b46c:	d005      	beq.n	b47a <setvbuf+0x3a>
    b46e:	2b01      	cmp	r3, #1
    b470:	d900      	bls.n	b474 <setvbuf+0x34>
    b472:	e084      	b.n	b57e <setvbuf+0x13e>
    b474:	2d00      	cmp	r5, #0
    b476:	da00      	bge.n	b47a <setvbuf+0x3a>
    b478:	e081      	b.n	b57e <setvbuf+0x13e>
    b47a:	0021      	movs	r1, r4
    b47c:	0030      	movs	r0, r6
    b47e:	f000 f94f 	bl	b720 <_fflush_r>
    b482:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b484:	2900      	cmp	r1, #0
    b486:	d008      	beq.n	b49a <setvbuf+0x5a>
    b488:	0023      	movs	r3, r4
    b48a:	3344      	adds	r3, #68	; 0x44
    b48c:	4299      	cmp	r1, r3
    b48e:	d002      	beq.n	b496 <setvbuf+0x56>
    b490:	0030      	movs	r0, r6
    b492:	f7ff ff11 	bl	b2b8 <_free_r>
    b496:	2300      	movs	r3, #0
    b498:	6363      	str	r3, [r4, #52]	; 0x34
    b49a:	2300      	movs	r3, #0
    b49c:	61a3      	str	r3, [r4, #24]
    b49e:	6063      	str	r3, [r4, #4]
    b4a0:	89a3      	ldrh	r3, [r4, #12]
    b4a2:	061b      	lsls	r3, r3, #24
    b4a4:	d503      	bpl.n	b4ae <setvbuf+0x6e>
    b4a6:	6921      	ldr	r1, [r4, #16]
    b4a8:	0030      	movs	r0, r6
    b4aa:	f7ff ff05 	bl	b2b8 <_free_r>
    b4ae:	89a3      	ldrh	r3, [r4, #12]
    b4b0:	4a36      	ldr	r2, [pc, #216]	; (b58c <setvbuf+0x14c>)
    b4b2:	4013      	ands	r3, r2
    b4b4:	81a3      	strh	r3, [r4, #12]
    b4b6:	9b00      	ldr	r3, [sp, #0]
    b4b8:	2b02      	cmp	r3, #2
    b4ba:	d05a      	beq.n	b572 <setvbuf+0x132>
    b4bc:	ab03      	add	r3, sp, #12
    b4be:	aa02      	add	r2, sp, #8
    b4c0:	0021      	movs	r1, r4
    b4c2:	0030      	movs	r0, r6
    b4c4:	f000 fa30 	bl	b928 <__swhatbuf_r>
    b4c8:	89a3      	ldrh	r3, [r4, #12]
    b4ca:	4318      	orrs	r0, r3
    b4cc:	81a0      	strh	r0, [r4, #12]
    b4ce:	2d00      	cmp	r5, #0
    b4d0:	d124      	bne.n	b51c <setvbuf+0xdc>
    b4d2:	9d02      	ldr	r5, [sp, #8]
    b4d4:	0028      	movs	r0, r5
    b4d6:	f7ff fed3 	bl	b280 <malloc>
    b4da:	9501      	str	r5, [sp, #4]
    b4dc:	1e07      	subs	r7, r0, #0
    b4de:	d142      	bne.n	b566 <setvbuf+0x126>
    b4e0:	9b02      	ldr	r3, [sp, #8]
    b4e2:	9301      	str	r3, [sp, #4]
    b4e4:	42ab      	cmp	r3, r5
    b4e6:	d139      	bne.n	b55c <setvbuf+0x11c>
    b4e8:	2001      	movs	r0, #1
    b4ea:	4240      	negs	r0, r0
    b4ec:	2302      	movs	r3, #2
    b4ee:	89a2      	ldrh	r2, [r4, #12]
    b4f0:	4313      	orrs	r3, r2
    b4f2:	81a3      	strh	r3, [r4, #12]
    b4f4:	2300      	movs	r3, #0
    b4f6:	60a3      	str	r3, [r4, #8]
    b4f8:	0023      	movs	r3, r4
    b4fa:	3347      	adds	r3, #71	; 0x47
    b4fc:	6023      	str	r3, [r4, #0]
    b4fe:	6123      	str	r3, [r4, #16]
    b500:	2301      	movs	r3, #1
    b502:	6163      	str	r3, [r4, #20]
    b504:	b005      	add	sp, #20
    b506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b508:	4b21      	ldr	r3, [pc, #132]	; (b590 <setvbuf+0x150>)
    b50a:	429c      	cmp	r4, r3
    b50c:	d101      	bne.n	b512 <setvbuf+0xd2>
    b50e:	68b4      	ldr	r4, [r6, #8]
    b510:	e7aa      	b.n	b468 <setvbuf+0x28>
    b512:	4b20      	ldr	r3, [pc, #128]	; (b594 <setvbuf+0x154>)
    b514:	429c      	cmp	r4, r3
    b516:	d1a7      	bne.n	b468 <setvbuf+0x28>
    b518:	68f4      	ldr	r4, [r6, #12]
    b51a:	e7a5      	b.n	b468 <setvbuf+0x28>
    b51c:	2f00      	cmp	r7, #0
    b51e:	d0d9      	beq.n	b4d4 <setvbuf+0x94>
    b520:	69b3      	ldr	r3, [r6, #24]
    b522:	2b00      	cmp	r3, #0
    b524:	d102      	bne.n	b52c <setvbuf+0xec>
    b526:	0030      	movs	r0, r6
    b528:	f000 f968 	bl	b7fc <__sinit>
    b52c:	9b00      	ldr	r3, [sp, #0]
    b52e:	2b01      	cmp	r3, #1
    b530:	d103      	bne.n	b53a <setvbuf+0xfa>
    b532:	89a3      	ldrh	r3, [r4, #12]
    b534:	9a00      	ldr	r2, [sp, #0]
    b536:	431a      	orrs	r2, r3
    b538:	81a2      	strh	r2, [r4, #12]
    b53a:	2008      	movs	r0, #8
    b53c:	89a3      	ldrh	r3, [r4, #12]
    b53e:	6027      	str	r7, [r4, #0]
    b540:	6127      	str	r7, [r4, #16]
    b542:	6165      	str	r5, [r4, #20]
    b544:	4018      	ands	r0, r3
    b546:	d018      	beq.n	b57a <setvbuf+0x13a>
    b548:	2001      	movs	r0, #1
    b54a:	4018      	ands	r0, r3
    b54c:	2300      	movs	r3, #0
    b54e:	4298      	cmp	r0, r3
    b550:	d011      	beq.n	b576 <setvbuf+0x136>
    b552:	426d      	negs	r5, r5
    b554:	60a3      	str	r3, [r4, #8]
    b556:	61a5      	str	r5, [r4, #24]
    b558:	0018      	movs	r0, r3
    b55a:	e7d3      	b.n	b504 <setvbuf+0xc4>
    b55c:	9801      	ldr	r0, [sp, #4]
    b55e:	f7ff fe8f 	bl	b280 <malloc>
    b562:	1e07      	subs	r7, r0, #0
    b564:	d0c0      	beq.n	b4e8 <setvbuf+0xa8>
    b566:	2380      	movs	r3, #128	; 0x80
    b568:	89a2      	ldrh	r2, [r4, #12]
    b56a:	9d01      	ldr	r5, [sp, #4]
    b56c:	4313      	orrs	r3, r2
    b56e:	81a3      	strh	r3, [r4, #12]
    b570:	e7d6      	b.n	b520 <setvbuf+0xe0>
    b572:	2000      	movs	r0, #0
    b574:	e7ba      	b.n	b4ec <setvbuf+0xac>
    b576:	60a5      	str	r5, [r4, #8]
    b578:	e7c4      	b.n	b504 <setvbuf+0xc4>
    b57a:	60a0      	str	r0, [r4, #8]
    b57c:	e7c2      	b.n	b504 <setvbuf+0xc4>
    b57e:	2001      	movs	r0, #1
    b580:	4240      	negs	r0, r0
    b582:	e7bf      	b.n	b504 <setvbuf+0xc4>
    b584:	20000030 	.word	0x20000030
    b588:	0000ccd0 	.word	0x0000ccd0
    b58c:	fffff35c 	.word	0xfffff35c
    b590:	0000ccf0 	.word	0x0000ccf0
    b594:	0000ccb0 	.word	0x0000ccb0

0000b598 <sniprintf>:
    b598:	b40c      	push	{r2, r3}
    b59a:	b530      	push	{r4, r5, lr}
    b59c:	4b16      	ldr	r3, [pc, #88]	; (b5f8 <sniprintf+0x60>)
    b59e:	b09d      	sub	sp, #116	; 0x74
    b5a0:	1e0c      	subs	r4, r1, #0
    b5a2:	681d      	ldr	r5, [r3, #0]
    b5a4:	da08      	bge.n	b5b8 <sniprintf+0x20>
    b5a6:	238b      	movs	r3, #139	; 0x8b
    b5a8:	2001      	movs	r0, #1
    b5aa:	602b      	str	r3, [r5, #0]
    b5ac:	4240      	negs	r0, r0
    b5ae:	b01d      	add	sp, #116	; 0x74
    b5b0:	bc30      	pop	{r4, r5}
    b5b2:	bc08      	pop	{r3}
    b5b4:	b002      	add	sp, #8
    b5b6:	4718      	bx	r3
    b5b8:	2382      	movs	r3, #130	; 0x82
    b5ba:	a902      	add	r1, sp, #8
    b5bc:	009b      	lsls	r3, r3, #2
    b5be:	818b      	strh	r3, [r1, #12]
    b5c0:	2300      	movs	r3, #0
    b5c2:	9002      	str	r0, [sp, #8]
    b5c4:	6108      	str	r0, [r1, #16]
    b5c6:	429c      	cmp	r4, r3
    b5c8:	d000      	beq.n	b5cc <sniprintf+0x34>
    b5ca:	1e63      	subs	r3, r4, #1
    b5cc:	608b      	str	r3, [r1, #8]
    b5ce:	614b      	str	r3, [r1, #20]
    b5d0:	2301      	movs	r3, #1
    b5d2:	425b      	negs	r3, r3
    b5d4:	81cb      	strh	r3, [r1, #14]
    b5d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b5d8:	ab21      	add	r3, sp, #132	; 0x84
    b5da:	0028      	movs	r0, r5
    b5dc:	9301      	str	r3, [sp, #4]
    b5de:	f000 fa2f 	bl	ba40 <_svfiprintf_r>
    b5e2:	1c43      	adds	r3, r0, #1
    b5e4:	da01      	bge.n	b5ea <sniprintf+0x52>
    b5e6:	238b      	movs	r3, #139	; 0x8b
    b5e8:	602b      	str	r3, [r5, #0]
    b5ea:	2c00      	cmp	r4, #0
    b5ec:	d0df      	beq.n	b5ae <sniprintf+0x16>
    b5ee:	2300      	movs	r3, #0
    b5f0:	9a02      	ldr	r2, [sp, #8]
    b5f2:	7013      	strb	r3, [r2, #0]
    b5f4:	e7db      	b.n	b5ae <sniprintf+0x16>
    b5f6:	46c0      	nop			; (mov r8, r8)
    b5f8:	20000030 	.word	0x20000030

0000b5fc <strlen>:
    b5fc:	2300      	movs	r3, #0
    b5fe:	5cc2      	ldrb	r2, [r0, r3]
    b600:	3301      	adds	r3, #1
    b602:	2a00      	cmp	r2, #0
    b604:	d1fb      	bne.n	b5fe <strlen+0x2>
    b606:	1e58      	subs	r0, r3, #1
    b608:	4770      	bx	lr
	...

0000b60c <__sflush_r>:
    b60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b60e:	898a      	ldrh	r2, [r1, #12]
    b610:	0005      	movs	r5, r0
    b612:	000c      	movs	r4, r1
    b614:	0713      	lsls	r3, r2, #28
    b616:	d460      	bmi.n	b6da <__sflush_r+0xce>
    b618:	684b      	ldr	r3, [r1, #4]
    b61a:	2b00      	cmp	r3, #0
    b61c:	dc04      	bgt.n	b628 <__sflush_r+0x1c>
    b61e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    b620:	2b00      	cmp	r3, #0
    b622:	dc01      	bgt.n	b628 <__sflush_r+0x1c>
    b624:	2000      	movs	r0, #0
    b626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b628:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b62a:	2f00      	cmp	r7, #0
    b62c:	d0fa      	beq.n	b624 <__sflush_r+0x18>
    b62e:	2300      	movs	r3, #0
    b630:	682e      	ldr	r6, [r5, #0]
    b632:	602b      	str	r3, [r5, #0]
    b634:	2380      	movs	r3, #128	; 0x80
    b636:	015b      	lsls	r3, r3, #5
    b638:	401a      	ands	r2, r3
    b63a:	d034      	beq.n	b6a6 <__sflush_r+0x9a>
    b63c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    b63e:	89a3      	ldrh	r3, [r4, #12]
    b640:	075b      	lsls	r3, r3, #29
    b642:	d506      	bpl.n	b652 <__sflush_r+0x46>
    b644:	6863      	ldr	r3, [r4, #4]
    b646:	1ac0      	subs	r0, r0, r3
    b648:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b64a:	2b00      	cmp	r3, #0
    b64c:	d001      	beq.n	b652 <__sflush_r+0x46>
    b64e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b650:	1ac0      	subs	r0, r0, r3
    b652:	0002      	movs	r2, r0
    b654:	6a21      	ldr	r1, [r4, #32]
    b656:	2300      	movs	r3, #0
    b658:	0028      	movs	r0, r5
    b65a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b65c:	47b8      	blx	r7
    b65e:	89a1      	ldrh	r1, [r4, #12]
    b660:	1c43      	adds	r3, r0, #1
    b662:	d106      	bne.n	b672 <__sflush_r+0x66>
    b664:	682b      	ldr	r3, [r5, #0]
    b666:	2b1d      	cmp	r3, #29
    b668:	d831      	bhi.n	b6ce <__sflush_r+0xc2>
    b66a:	4a2c      	ldr	r2, [pc, #176]	; (b71c <__sflush_r+0x110>)
    b66c:	40da      	lsrs	r2, r3
    b66e:	07d3      	lsls	r3, r2, #31
    b670:	d52d      	bpl.n	b6ce <__sflush_r+0xc2>
    b672:	2300      	movs	r3, #0
    b674:	6063      	str	r3, [r4, #4]
    b676:	6923      	ldr	r3, [r4, #16]
    b678:	6023      	str	r3, [r4, #0]
    b67a:	04cb      	lsls	r3, r1, #19
    b67c:	d505      	bpl.n	b68a <__sflush_r+0x7e>
    b67e:	1c43      	adds	r3, r0, #1
    b680:	d102      	bne.n	b688 <__sflush_r+0x7c>
    b682:	682b      	ldr	r3, [r5, #0]
    b684:	2b00      	cmp	r3, #0
    b686:	d100      	bne.n	b68a <__sflush_r+0x7e>
    b688:	6560      	str	r0, [r4, #84]	; 0x54
    b68a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b68c:	602e      	str	r6, [r5, #0]
    b68e:	2900      	cmp	r1, #0
    b690:	d0c8      	beq.n	b624 <__sflush_r+0x18>
    b692:	0023      	movs	r3, r4
    b694:	3344      	adds	r3, #68	; 0x44
    b696:	4299      	cmp	r1, r3
    b698:	d002      	beq.n	b6a0 <__sflush_r+0x94>
    b69a:	0028      	movs	r0, r5
    b69c:	f7ff fe0c 	bl	b2b8 <_free_r>
    b6a0:	2000      	movs	r0, #0
    b6a2:	6360      	str	r0, [r4, #52]	; 0x34
    b6a4:	e7bf      	b.n	b626 <__sflush_r+0x1a>
    b6a6:	2301      	movs	r3, #1
    b6a8:	6a21      	ldr	r1, [r4, #32]
    b6aa:	0028      	movs	r0, r5
    b6ac:	47b8      	blx	r7
    b6ae:	1c43      	adds	r3, r0, #1
    b6b0:	d1c5      	bne.n	b63e <__sflush_r+0x32>
    b6b2:	682b      	ldr	r3, [r5, #0]
    b6b4:	2b00      	cmp	r3, #0
    b6b6:	d0c2      	beq.n	b63e <__sflush_r+0x32>
    b6b8:	2b1d      	cmp	r3, #29
    b6ba:	d001      	beq.n	b6c0 <__sflush_r+0xb4>
    b6bc:	2b16      	cmp	r3, #22
    b6be:	d101      	bne.n	b6c4 <__sflush_r+0xb8>
    b6c0:	602e      	str	r6, [r5, #0]
    b6c2:	e7af      	b.n	b624 <__sflush_r+0x18>
    b6c4:	2340      	movs	r3, #64	; 0x40
    b6c6:	89a2      	ldrh	r2, [r4, #12]
    b6c8:	4313      	orrs	r3, r2
    b6ca:	81a3      	strh	r3, [r4, #12]
    b6cc:	e7ab      	b.n	b626 <__sflush_r+0x1a>
    b6ce:	2340      	movs	r3, #64	; 0x40
    b6d0:	430b      	orrs	r3, r1
    b6d2:	2001      	movs	r0, #1
    b6d4:	81a3      	strh	r3, [r4, #12]
    b6d6:	4240      	negs	r0, r0
    b6d8:	e7a5      	b.n	b626 <__sflush_r+0x1a>
    b6da:	690f      	ldr	r7, [r1, #16]
    b6dc:	2f00      	cmp	r7, #0
    b6de:	d0a1      	beq.n	b624 <__sflush_r+0x18>
    b6e0:	680b      	ldr	r3, [r1, #0]
    b6e2:	600f      	str	r7, [r1, #0]
    b6e4:	1bdb      	subs	r3, r3, r7
    b6e6:	9301      	str	r3, [sp, #4]
    b6e8:	2300      	movs	r3, #0
    b6ea:	0792      	lsls	r2, r2, #30
    b6ec:	d100      	bne.n	b6f0 <__sflush_r+0xe4>
    b6ee:	694b      	ldr	r3, [r1, #20]
    b6f0:	60a3      	str	r3, [r4, #8]
    b6f2:	9b01      	ldr	r3, [sp, #4]
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	dc00      	bgt.n	b6fa <__sflush_r+0xee>
    b6f8:	e794      	b.n	b624 <__sflush_r+0x18>
    b6fa:	9b01      	ldr	r3, [sp, #4]
    b6fc:	003a      	movs	r2, r7
    b6fe:	6a21      	ldr	r1, [r4, #32]
    b700:	0028      	movs	r0, r5
    b702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b704:	47b0      	blx	r6
    b706:	2800      	cmp	r0, #0
    b708:	dc03      	bgt.n	b712 <__sflush_r+0x106>
    b70a:	2340      	movs	r3, #64	; 0x40
    b70c:	89a2      	ldrh	r2, [r4, #12]
    b70e:	4313      	orrs	r3, r2
    b710:	e7df      	b.n	b6d2 <__sflush_r+0xc6>
    b712:	9b01      	ldr	r3, [sp, #4]
    b714:	183f      	adds	r7, r7, r0
    b716:	1a1b      	subs	r3, r3, r0
    b718:	9301      	str	r3, [sp, #4]
    b71a:	e7ea      	b.n	b6f2 <__sflush_r+0xe6>
    b71c:	20400001 	.word	0x20400001

0000b720 <_fflush_r>:
    b720:	690b      	ldr	r3, [r1, #16]
    b722:	b570      	push	{r4, r5, r6, lr}
    b724:	0005      	movs	r5, r0
    b726:	000c      	movs	r4, r1
    b728:	2b00      	cmp	r3, #0
    b72a:	d101      	bne.n	b730 <_fflush_r+0x10>
    b72c:	2000      	movs	r0, #0
    b72e:	bd70      	pop	{r4, r5, r6, pc}
    b730:	2800      	cmp	r0, #0
    b732:	d004      	beq.n	b73e <_fflush_r+0x1e>
    b734:	6983      	ldr	r3, [r0, #24]
    b736:	2b00      	cmp	r3, #0
    b738:	d101      	bne.n	b73e <_fflush_r+0x1e>
    b73a:	f000 f85f 	bl	b7fc <__sinit>
    b73e:	4b0b      	ldr	r3, [pc, #44]	; (b76c <_fflush_r+0x4c>)
    b740:	429c      	cmp	r4, r3
    b742:	d109      	bne.n	b758 <_fflush_r+0x38>
    b744:	686c      	ldr	r4, [r5, #4]
    b746:	220c      	movs	r2, #12
    b748:	5ea3      	ldrsh	r3, [r4, r2]
    b74a:	2b00      	cmp	r3, #0
    b74c:	d0ee      	beq.n	b72c <_fflush_r+0xc>
    b74e:	0021      	movs	r1, r4
    b750:	0028      	movs	r0, r5
    b752:	f7ff ff5b 	bl	b60c <__sflush_r>
    b756:	e7ea      	b.n	b72e <_fflush_r+0xe>
    b758:	4b05      	ldr	r3, [pc, #20]	; (b770 <_fflush_r+0x50>)
    b75a:	429c      	cmp	r4, r3
    b75c:	d101      	bne.n	b762 <_fflush_r+0x42>
    b75e:	68ac      	ldr	r4, [r5, #8]
    b760:	e7f1      	b.n	b746 <_fflush_r+0x26>
    b762:	4b04      	ldr	r3, [pc, #16]	; (b774 <_fflush_r+0x54>)
    b764:	429c      	cmp	r4, r3
    b766:	d1ee      	bne.n	b746 <_fflush_r+0x26>
    b768:	68ec      	ldr	r4, [r5, #12]
    b76a:	e7ec      	b.n	b746 <_fflush_r+0x26>
    b76c:	0000ccd0 	.word	0x0000ccd0
    b770:	0000ccf0 	.word	0x0000ccf0
    b774:	0000ccb0 	.word	0x0000ccb0

0000b778 <_cleanup_r>:
    b778:	b510      	push	{r4, lr}
    b77a:	4902      	ldr	r1, [pc, #8]	; (b784 <_cleanup_r+0xc>)
    b77c:	f000 f8b2 	bl	b8e4 <_fwalk_reent>
    b780:	bd10      	pop	{r4, pc}
    b782:	46c0      	nop			; (mov r8, r8)
    b784:	0000b721 	.word	0x0000b721

0000b788 <std.isra.0>:
    b788:	2300      	movs	r3, #0
    b78a:	b510      	push	{r4, lr}
    b78c:	0004      	movs	r4, r0
    b78e:	6003      	str	r3, [r0, #0]
    b790:	6043      	str	r3, [r0, #4]
    b792:	6083      	str	r3, [r0, #8]
    b794:	8181      	strh	r1, [r0, #12]
    b796:	6643      	str	r3, [r0, #100]	; 0x64
    b798:	81c2      	strh	r2, [r0, #14]
    b79a:	6103      	str	r3, [r0, #16]
    b79c:	6143      	str	r3, [r0, #20]
    b79e:	6183      	str	r3, [r0, #24]
    b7a0:	0019      	movs	r1, r3
    b7a2:	2208      	movs	r2, #8
    b7a4:	305c      	adds	r0, #92	; 0x5c
    b7a6:	f7ff fd7e 	bl	b2a6 <memset>
    b7aa:	4b05      	ldr	r3, [pc, #20]	; (b7c0 <std.isra.0+0x38>)
    b7ac:	6224      	str	r4, [r4, #32]
    b7ae:	6263      	str	r3, [r4, #36]	; 0x24
    b7b0:	4b04      	ldr	r3, [pc, #16]	; (b7c4 <std.isra.0+0x3c>)
    b7b2:	62a3      	str	r3, [r4, #40]	; 0x28
    b7b4:	4b04      	ldr	r3, [pc, #16]	; (b7c8 <std.isra.0+0x40>)
    b7b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    b7b8:	4b04      	ldr	r3, [pc, #16]	; (b7cc <std.isra.0+0x44>)
    b7ba:	6323      	str	r3, [r4, #48]	; 0x30
    b7bc:	bd10      	pop	{r4, pc}
    b7be:	46c0      	nop			; (mov r8, r8)
    b7c0:	0000bf59 	.word	0x0000bf59
    b7c4:	0000bf81 	.word	0x0000bf81
    b7c8:	0000bfb9 	.word	0x0000bfb9
    b7cc:	0000bfe5 	.word	0x0000bfe5

0000b7d0 <__sfmoreglue>:
    b7d0:	b570      	push	{r4, r5, r6, lr}
    b7d2:	2568      	movs	r5, #104	; 0x68
    b7d4:	1e4a      	subs	r2, r1, #1
    b7d6:	4355      	muls	r5, r2
    b7d8:	000e      	movs	r6, r1
    b7da:	0029      	movs	r1, r5
    b7dc:	3174      	adds	r1, #116	; 0x74
    b7de:	f7ff fdb5 	bl	b34c <_malloc_r>
    b7e2:	1e04      	subs	r4, r0, #0
    b7e4:	d008      	beq.n	b7f8 <__sfmoreglue+0x28>
    b7e6:	2100      	movs	r1, #0
    b7e8:	002a      	movs	r2, r5
    b7ea:	6001      	str	r1, [r0, #0]
    b7ec:	6046      	str	r6, [r0, #4]
    b7ee:	300c      	adds	r0, #12
    b7f0:	60a0      	str	r0, [r4, #8]
    b7f2:	3268      	adds	r2, #104	; 0x68
    b7f4:	f7ff fd57 	bl	b2a6 <memset>
    b7f8:	0020      	movs	r0, r4
    b7fa:	bd70      	pop	{r4, r5, r6, pc}

0000b7fc <__sinit>:
    b7fc:	6983      	ldr	r3, [r0, #24]
    b7fe:	b513      	push	{r0, r1, r4, lr}
    b800:	0004      	movs	r4, r0
    b802:	2b00      	cmp	r3, #0
    b804:	d128      	bne.n	b858 <__sinit+0x5c>
    b806:	6483      	str	r3, [r0, #72]	; 0x48
    b808:	64c3      	str	r3, [r0, #76]	; 0x4c
    b80a:	6503      	str	r3, [r0, #80]	; 0x50
    b80c:	4b13      	ldr	r3, [pc, #76]	; (b85c <__sinit+0x60>)
    b80e:	4a14      	ldr	r2, [pc, #80]	; (b860 <__sinit+0x64>)
    b810:	681b      	ldr	r3, [r3, #0]
    b812:	6282      	str	r2, [r0, #40]	; 0x28
    b814:	9301      	str	r3, [sp, #4]
    b816:	4298      	cmp	r0, r3
    b818:	d101      	bne.n	b81e <__sinit+0x22>
    b81a:	2301      	movs	r3, #1
    b81c:	6183      	str	r3, [r0, #24]
    b81e:	0020      	movs	r0, r4
    b820:	f000 f820 	bl	b864 <__sfp>
    b824:	6060      	str	r0, [r4, #4]
    b826:	0020      	movs	r0, r4
    b828:	f000 f81c 	bl	b864 <__sfp>
    b82c:	60a0      	str	r0, [r4, #8]
    b82e:	0020      	movs	r0, r4
    b830:	f000 f818 	bl	b864 <__sfp>
    b834:	2200      	movs	r2, #0
    b836:	60e0      	str	r0, [r4, #12]
    b838:	2104      	movs	r1, #4
    b83a:	6860      	ldr	r0, [r4, #4]
    b83c:	f7ff ffa4 	bl	b788 <std.isra.0>
    b840:	2201      	movs	r2, #1
    b842:	2109      	movs	r1, #9
    b844:	68a0      	ldr	r0, [r4, #8]
    b846:	f7ff ff9f 	bl	b788 <std.isra.0>
    b84a:	2202      	movs	r2, #2
    b84c:	2112      	movs	r1, #18
    b84e:	68e0      	ldr	r0, [r4, #12]
    b850:	f7ff ff9a 	bl	b788 <std.isra.0>
    b854:	2301      	movs	r3, #1
    b856:	61a3      	str	r3, [r4, #24]
    b858:	bd13      	pop	{r0, r1, r4, pc}
    b85a:	46c0      	nop			; (mov r8, r8)
    b85c:	0000ccac 	.word	0x0000ccac
    b860:	0000b779 	.word	0x0000b779

0000b864 <__sfp>:
    b864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b866:	4b1e      	ldr	r3, [pc, #120]	; (b8e0 <__sfp+0x7c>)
    b868:	0007      	movs	r7, r0
    b86a:	681e      	ldr	r6, [r3, #0]
    b86c:	69b3      	ldr	r3, [r6, #24]
    b86e:	2b00      	cmp	r3, #0
    b870:	d102      	bne.n	b878 <__sfp+0x14>
    b872:	0030      	movs	r0, r6
    b874:	f7ff ffc2 	bl	b7fc <__sinit>
    b878:	3648      	adds	r6, #72	; 0x48
    b87a:	68b4      	ldr	r4, [r6, #8]
    b87c:	6873      	ldr	r3, [r6, #4]
    b87e:	3b01      	subs	r3, #1
    b880:	d504      	bpl.n	b88c <__sfp+0x28>
    b882:	6833      	ldr	r3, [r6, #0]
    b884:	2b00      	cmp	r3, #0
    b886:	d007      	beq.n	b898 <__sfp+0x34>
    b888:	6836      	ldr	r6, [r6, #0]
    b88a:	e7f6      	b.n	b87a <__sfp+0x16>
    b88c:	220c      	movs	r2, #12
    b88e:	5ea5      	ldrsh	r5, [r4, r2]
    b890:	2d00      	cmp	r5, #0
    b892:	d00d      	beq.n	b8b0 <__sfp+0x4c>
    b894:	3468      	adds	r4, #104	; 0x68
    b896:	e7f2      	b.n	b87e <__sfp+0x1a>
    b898:	2104      	movs	r1, #4
    b89a:	0038      	movs	r0, r7
    b89c:	f7ff ff98 	bl	b7d0 <__sfmoreglue>
    b8a0:	6030      	str	r0, [r6, #0]
    b8a2:	2800      	cmp	r0, #0
    b8a4:	d1f0      	bne.n	b888 <__sfp+0x24>
    b8a6:	230c      	movs	r3, #12
    b8a8:	0004      	movs	r4, r0
    b8aa:	603b      	str	r3, [r7, #0]
    b8ac:	0020      	movs	r0, r4
    b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8b0:	2301      	movs	r3, #1
    b8b2:	0020      	movs	r0, r4
    b8b4:	425b      	negs	r3, r3
    b8b6:	81e3      	strh	r3, [r4, #14]
    b8b8:	3302      	adds	r3, #2
    b8ba:	81a3      	strh	r3, [r4, #12]
    b8bc:	6665      	str	r5, [r4, #100]	; 0x64
    b8be:	6025      	str	r5, [r4, #0]
    b8c0:	60a5      	str	r5, [r4, #8]
    b8c2:	6065      	str	r5, [r4, #4]
    b8c4:	6125      	str	r5, [r4, #16]
    b8c6:	6165      	str	r5, [r4, #20]
    b8c8:	61a5      	str	r5, [r4, #24]
    b8ca:	2208      	movs	r2, #8
    b8cc:	0029      	movs	r1, r5
    b8ce:	305c      	adds	r0, #92	; 0x5c
    b8d0:	f7ff fce9 	bl	b2a6 <memset>
    b8d4:	6365      	str	r5, [r4, #52]	; 0x34
    b8d6:	63a5      	str	r5, [r4, #56]	; 0x38
    b8d8:	64a5      	str	r5, [r4, #72]	; 0x48
    b8da:	64e5      	str	r5, [r4, #76]	; 0x4c
    b8dc:	e7e6      	b.n	b8ac <__sfp+0x48>
    b8de:	46c0      	nop			; (mov r8, r8)
    b8e0:	0000ccac 	.word	0x0000ccac

0000b8e4 <_fwalk_reent>:
    b8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b8e6:	0004      	movs	r4, r0
    b8e8:	0007      	movs	r7, r0
    b8ea:	2600      	movs	r6, #0
    b8ec:	9101      	str	r1, [sp, #4]
    b8ee:	3448      	adds	r4, #72	; 0x48
    b8f0:	2c00      	cmp	r4, #0
    b8f2:	d101      	bne.n	b8f8 <_fwalk_reent+0x14>
    b8f4:	0030      	movs	r0, r6
    b8f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b8f8:	6863      	ldr	r3, [r4, #4]
    b8fa:	68a5      	ldr	r5, [r4, #8]
    b8fc:	9300      	str	r3, [sp, #0]
    b8fe:	9b00      	ldr	r3, [sp, #0]
    b900:	3b01      	subs	r3, #1
    b902:	9300      	str	r3, [sp, #0]
    b904:	d501      	bpl.n	b90a <_fwalk_reent+0x26>
    b906:	6824      	ldr	r4, [r4, #0]
    b908:	e7f2      	b.n	b8f0 <_fwalk_reent+0xc>
    b90a:	89ab      	ldrh	r3, [r5, #12]
    b90c:	2b01      	cmp	r3, #1
    b90e:	d908      	bls.n	b922 <_fwalk_reent+0x3e>
    b910:	220e      	movs	r2, #14
    b912:	5eab      	ldrsh	r3, [r5, r2]
    b914:	3301      	adds	r3, #1
    b916:	d004      	beq.n	b922 <_fwalk_reent+0x3e>
    b918:	0029      	movs	r1, r5
    b91a:	0038      	movs	r0, r7
    b91c:	9b01      	ldr	r3, [sp, #4]
    b91e:	4798      	blx	r3
    b920:	4306      	orrs	r6, r0
    b922:	3568      	adds	r5, #104	; 0x68
    b924:	e7eb      	b.n	b8fe <_fwalk_reent+0x1a>
	...

0000b928 <__swhatbuf_r>:
    b928:	b570      	push	{r4, r5, r6, lr}
    b92a:	000e      	movs	r6, r1
    b92c:	001d      	movs	r5, r3
    b92e:	230e      	movs	r3, #14
    b930:	5ec9      	ldrsh	r1, [r1, r3]
    b932:	b090      	sub	sp, #64	; 0x40
    b934:	0014      	movs	r4, r2
    b936:	2900      	cmp	r1, #0
    b938:	da07      	bge.n	b94a <__swhatbuf_r+0x22>
    b93a:	2300      	movs	r3, #0
    b93c:	602b      	str	r3, [r5, #0]
    b93e:	89b3      	ldrh	r3, [r6, #12]
    b940:	061b      	lsls	r3, r3, #24
    b942:	d411      	bmi.n	b968 <__swhatbuf_r+0x40>
    b944:	2380      	movs	r3, #128	; 0x80
    b946:	00db      	lsls	r3, r3, #3
    b948:	e00f      	b.n	b96a <__swhatbuf_r+0x42>
    b94a:	aa01      	add	r2, sp, #4
    b94c:	f000 fb76 	bl	c03c <_fstat_r>
    b950:	2800      	cmp	r0, #0
    b952:	dbf2      	blt.n	b93a <__swhatbuf_r+0x12>
    b954:	22f0      	movs	r2, #240	; 0xf0
    b956:	9b02      	ldr	r3, [sp, #8]
    b958:	0212      	lsls	r2, r2, #8
    b95a:	4013      	ands	r3, r2
    b95c:	4a05      	ldr	r2, [pc, #20]	; (b974 <__swhatbuf_r+0x4c>)
    b95e:	189b      	adds	r3, r3, r2
    b960:	425a      	negs	r2, r3
    b962:	4153      	adcs	r3, r2
    b964:	602b      	str	r3, [r5, #0]
    b966:	e7ed      	b.n	b944 <__swhatbuf_r+0x1c>
    b968:	2340      	movs	r3, #64	; 0x40
    b96a:	2000      	movs	r0, #0
    b96c:	6023      	str	r3, [r4, #0]
    b96e:	b010      	add	sp, #64	; 0x40
    b970:	bd70      	pop	{r4, r5, r6, pc}
    b972:	46c0      	nop			; (mov r8, r8)
    b974:	ffffe000 	.word	0xffffe000

0000b978 <__malloc_lock>:
    b978:	4770      	bx	lr

0000b97a <__malloc_unlock>:
    b97a:	4770      	bx	lr

0000b97c <__ssputs_r>:
    b97c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b97e:	688e      	ldr	r6, [r1, #8]
    b980:	b085      	sub	sp, #20
    b982:	0007      	movs	r7, r0
    b984:	000c      	movs	r4, r1
    b986:	9203      	str	r2, [sp, #12]
    b988:	9301      	str	r3, [sp, #4]
    b98a:	429e      	cmp	r6, r3
    b98c:	d839      	bhi.n	ba02 <__ssputs_r+0x86>
    b98e:	2390      	movs	r3, #144	; 0x90
    b990:	898a      	ldrh	r2, [r1, #12]
    b992:	00db      	lsls	r3, r3, #3
    b994:	421a      	tst	r2, r3
    b996:	d034      	beq.n	ba02 <__ssputs_r+0x86>
    b998:	2503      	movs	r5, #3
    b99a:	6909      	ldr	r1, [r1, #16]
    b99c:	6823      	ldr	r3, [r4, #0]
    b99e:	1a5b      	subs	r3, r3, r1
    b9a0:	9302      	str	r3, [sp, #8]
    b9a2:	6963      	ldr	r3, [r4, #20]
    b9a4:	9802      	ldr	r0, [sp, #8]
    b9a6:	435d      	muls	r5, r3
    b9a8:	0feb      	lsrs	r3, r5, #31
    b9aa:	195d      	adds	r5, r3, r5
    b9ac:	9b01      	ldr	r3, [sp, #4]
    b9ae:	106d      	asrs	r5, r5, #1
    b9b0:	3301      	adds	r3, #1
    b9b2:	181b      	adds	r3, r3, r0
    b9b4:	42ab      	cmp	r3, r5
    b9b6:	d900      	bls.n	b9ba <__ssputs_r+0x3e>
    b9b8:	001d      	movs	r5, r3
    b9ba:	0553      	lsls	r3, r2, #21
    b9bc:	d532      	bpl.n	ba24 <__ssputs_r+0xa8>
    b9be:	0029      	movs	r1, r5
    b9c0:	0038      	movs	r0, r7
    b9c2:	f7ff fcc3 	bl	b34c <_malloc_r>
    b9c6:	1e06      	subs	r6, r0, #0
    b9c8:	d109      	bne.n	b9de <__ssputs_r+0x62>
    b9ca:	230c      	movs	r3, #12
    b9cc:	603b      	str	r3, [r7, #0]
    b9ce:	2340      	movs	r3, #64	; 0x40
    b9d0:	2001      	movs	r0, #1
    b9d2:	89a2      	ldrh	r2, [r4, #12]
    b9d4:	4240      	negs	r0, r0
    b9d6:	4313      	orrs	r3, r2
    b9d8:	81a3      	strh	r3, [r4, #12]
    b9da:	b005      	add	sp, #20
    b9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9de:	9a02      	ldr	r2, [sp, #8]
    b9e0:	6921      	ldr	r1, [r4, #16]
    b9e2:	f7ff fc57 	bl	b294 <memcpy>
    b9e6:	89a3      	ldrh	r3, [r4, #12]
    b9e8:	4a14      	ldr	r2, [pc, #80]	; (ba3c <__ssputs_r+0xc0>)
    b9ea:	401a      	ands	r2, r3
    b9ec:	2380      	movs	r3, #128	; 0x80
    b9ee:	4313      	orrs	r3, r2
    b9f0:	81a3      	strh	r3, [r4, #12]
    b9f2:	9b02      	ldr	r3, [sp, #8]
    b9f4:	6126      	str	r6, [r4, #16]
    b9f6:	18f6      	adds	r6, r6, r3
    b9f8:	6026      	str	r6, [r4, #0]
    b9fa:	6165      	str	r5, [r4, #20]
    b9fc:	9e01      	ldr	r6, [sp, #4]
    b9fe:	1aed      	subs	r5, r5, r3
    ba00:	60a5      	str	r5, [r4, #8]
    ba02:	9b01      	ldr	r3, [sp, #4]
    ba04:	42b3      	cmp	r3, r6
    ba06:	d200      	bcs.n	ba0a <__ssputs_r+0x8e>
    ba08:	001e      	movs	r6, r3
    ba0a:	0032      	movs	r2, r6
    ba0c:	9903      	ldr	r1, [sp, #12]
    ba0e:	6820      	ldr	r0, [r4, #0]
    ba10:	f000 fb45 	bl	c09e <memmove>
    ba14:	68a3      	ldr	r3, [r4, #8]
    ba16:	2000      	movs	r0, #0
    ba18:	1b9b      	subs	r3, r3, r6
    ba1a:	60a3      	str	r3, [r4, #8]
    ba1c:	6823      	ldr	r3, [r4, #0]
    ba1e:	199e      	adds	r6, r3, r6
    ba20:	6026      	str	r6, [r4, #0]
    ba22:	e7da      	b.n	b9da <__ssputs_r+0x5e>
    ba24:	002a      	movs	r2, r5
    ba26:	0038      	movs	r0, r7
    ba28:	f000 fb4b 	bl	c0c2 <_realloc_r>
    ba2c:	1e06      	subs	r6, r0, #0
    ba2e:	d1e0      	bne.n	b9f2 <__ssputs_r+0x76>
    ba30:	6921      	ldr	r1, [r4, #16]
    ba32:	0038      	movs	r0, r7
    ba34:	f7ff fc40 	bl	b2b8 <_free_r>
    ba38:	e7c7      	b.n	b9ca <__ssputs_r+0x4e>
    ba3a:	46c0      	nop			; (mov r8, r8)
    ba3c:	fffffb7f 	.word	0xfffffb7f

0000ba40 <_svfiprintf_r>:
    ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba42:	b09f      	sub	sp, #124	; 0x7c
    ba44:	9002      	str	r0, [sp, #8]
    ba46:	9305      	str	r3, [sp, #20]
    ba48:	898b      	ldrh	r3, [r1, #12]
    ba4a:	000f      	movs	r7, r1
    ba4c:	0016      	movs	r6, r2
    ba4e:	061b      	lsls	r3, r3, #24
    ba50:	d511      	bpl.n	ba76 <_svfiprintf_r+0x36>
    ba52:	690b      	ldr	r3, [r1, #16]
    ba54:	2b00      	cmp	r3, #0
    ba56:	d10e      	bne.n	ba76 <_svfiprintf_r+0x36>
    ba58:	2140      	movs	r1, #64	; 0x40
    ba5a:	f7ff fc77 	bl	b34c <_malloc_r>
    ba5e:	6038      	str	r0, [r7, #0]
    ba60:	6138      	str	r0, [r7, #16]
    ba62:	2800      	cmp	r0, #0
    ba64:	d105      	bne.n	ba72 <_svfiprintf_r+0x32>
    ba66:	230c      	movs	r3, #12
    ba68:	9a02      	ldr	r2, [sp, #8]
    ba6a:	3801      	subs	r0, #1
    ba6c:	6013      	str	r3, [r2, #0]
    ba6e:	b01f      	add	sp, #124	; 0x7c
    ba70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba72:	2340      	movs	r3, #64	; 0x40
    ba74:	617b      	str	r3, [r7, #20]
    ba76:	2300      	movs	r3, #0
    ba78:	ad06      	add	r5, sp, #24
    ba7a:	616b      	str	r3, [r5, #20]
    ba7c:	3320      	adds	r3, #32
    ba7e:	766b      	strb	r3, [r5, #25]
    ba80:	3310      	adds	r3, #16
    ba82:	76ab      	strb	r3, [r5, #26]
    ba84:	0034      	movs	r4, r6
    ba86:	7823      	ldrb	r3, [r4, #0]
    ba88:	2b00      	cmp	r3, #0
    ba8a:	d147      	bne.n	bb1c <_svfiprintf_r+0xdc>
    ba8c:	1ba3      	subs	r3, r4, r6
    ba8e:	9304      	str	r3, [sp, #16]
    ba90:	d00d      	beq.n	baae <_svfiprintf_r+0x6e>
    ba92:	1ba3      	subs	r3, r4, r6
    ba94:	0032      	movs	r2, r6
    ba96:	0039      	movs	r1, r7
    ba98:	9802      	ldr	r0, [sp, #8]
    ba9a:	f7ff ff6f 	bl	b97c <__ssputs_r>
    ba9e:	1c43      	adds	r3, r0, #1
    baa0:	d100      	bne.n	baa4 <_svfiprintf_r+0x64>
    baa2:	e0b5      	b.n	bc10 <_svfiprintf_r+0x1d0>
    baa4:	696a      	ldr	r2, [r5, #20]
    baa6:	9b04      	ldr	r3, [sp, #16]
    baa8:	4694      	mov	ip, r2
    baaa:	4463      	add	r3, ip
    baac:	616b      	str	r3, [r5, #20]
    baae:	7823      	ldrb	r3, [r4, #0]
    bab0:	2b00      	cmp	r3, #0
    bab2:	d100      	bne.n	bab6 <_svfiprintf_r+0x76>
    bab4:	e0ac      	b.n	bc10 <_svfiprintf_r+0x1d0>
    bab6:	2201      	movs	r2, #1
    bab8:	2300      	movs	r3, #0
    baba:	4252      	negs	r2, r2
    babc:	606a      	str	r2, [r5, #4]
    babe:	a902      	add	r1, sp, #8
    bac0:	3254      	adds	r2, #84	; 0x54
    bac2:	1852      	adds	r2, r2, r1
    bac4:	3401      	adds	r4, #1
    bac6:	602b      	str	r3, [r5, #0]
    bac8:	60eb      	str	r3, [r5, #12]
    baca:	60ab      	str	r3, [r5, #8]
    bacc:	7013      	strb	r3, [r2, #0]
    bace:	65ab      	str	r3, [r5, #88]	; 0x58
    bad0:	4e58      	ldr	r6, [pc, #352]	; (bc34 <_svfiprintf_r+0x1f4>)
    bad2:	2205      	movs	r2, #5
    bad4:	7821      	ldrb	r1, [r4, #0]
    bad6:	0030      	movs	r0, r6
    bad8:	f000 fad6 	bl	c088 <memchr>
    badc:	1c62      	adds	r2, r4, #1
    bade:	2800      	cmp	r0, #0
    bae0:	d120      	bne.n	bb24 <_svfiprintf_r+0xe4>
    bae2:	6829      	ldr	r1, [r5, #0]
    bae4:	06cb      	lsls	r3, r1, #27
    bae6:	d504      	bpl.n	baf2 <_svfiprintf_r+0xb2>
    bae8:	2353      	movs	r3, #83	; 0x53
    baea:	ae02      	add	r6, sp, #8
    baec:	3020      	adds	r0, #32
    baee:	199b      	adds	r3, r3, r6
    baf0:	7018      	strb	r0, [r3, #0]
    baf2:	070b      	lsls	r3, r1, #28
    baf4:	d504      	bpl.n	bb00 <_svfiprintf_r+0xc0>
    baf6:	2353      	movs	r3, #83	; 0x53
    baf8:	202b      	movs	r0, #43	; 0x2b
    bafa:	ae02      	add	r6, sp, #8
    bafc:	199b      	adds	r3, r3, r6
    bafe:	7018      	strb	r0, [r3, #0]
    bb00:	7823      	ldrb	r3, [r4, #0]
    bb02:	2b2a      	cmp	r3, #42	; 0x2a
    bb04:	d016      	beq.n	bb34 <_svfiprintf_r+0xf4>
    bb06:	2000      	movs	r0, #0
    bb08:	210a      	movs	r1, #10
    bb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb0c:	7822      	ldrb	r2, [r4, #0]
    bb0e:	3a30      	subs	r2, #48	; 0x30
    bb10:	2a09      	cmp	r2, #9
    bb12:	d955      	bls.n	bbc0 <_svfiprintf_r+0x180>
    bb14:	2800      	cmp	r0, #0
    bb16:	d015      	beq.n	bb44 <_svfiprintf_r+0x104>
    bb18:	9309      	str	r3, [sp, #36]	; 0x24
    bb1a:	e013      	b.n	bb44 <_svfiprintf_r+0x104>
    bb1c:	2b25      	cmp	r3, #37	; 0x25
    bb1e:	d0b5      	beq.n	ba8c <_svfiprintf_r+0x4c>
    bb20:	3401      	adds	r4, #1
    bb22:	e7b0      	b.n	ba86 <_svfiprintf_r+0x46>
    bb24:	2301      	movs	r3, #1
    bb26:	1b80      	subs	r0, r0, r6
    bb28:	4083      	lsls	r3, r0
    bb2a:	6829      	ldr	r1, [r5, #0]
    bb2c:	0014      	movs	r4, r2
    bb2e:	430b      	orrs	r3, r1
    bb30:	602b      	str	r3, [r5, #0]
    bb32:	e7cd      	b.n	bad0 <_svfiprintf_r+0x90>
    bb34:	9b05      	ldr	r3, [sp, #20]
    bb36:	1d18      	adds	r0, r3, #4
    bb38:	681b      	ldr	r3, [r3, #0]
    bb3a:	9005      	str	r0, [sp, #20]
    bb3c:	2b00      	cmp	r3, #0
    bb3e:	db39      	blt.n	bbb4 <_svfiprintf_r+0x174>
    bb40:	9309      	str	r3, [sp, #36]	; 0x24
    bb42:	0014      	movs	r4, r2
    bb44:	7823      	ldrb	r3, [r4, #0]
    bb46:	2b2e      	cmp	r3, #46	; 0x2e
    bb48:	d10b      	bne.n	bb62 <_svfiprintf_r+0x122>
    bb4a:	7863      	ldrb	r3, [r4, #1]
    bb4c:	1c62      	adds	r2, r4, #1
    bb4e:	2b2a      	cmp	r3, #42	; 0x2a
    bb50:	d13e      	bne.n	bbd0 <_svfiprintf_r+0x190>
    bb52:	9b05      	ldr	r3, [sp, #20]
    bb54:	3402      	adds	r4, #2
    bb56:	1d1a      	adds	r2, r3, #4
    bb58:	681b      	ldr	r3, [r3, #0]
    bb5a:	9205      	str	r2, [sp, #20]
    bb5c:	2b00      	cmp	r3, #0
    bb5e:	db34      	blt.n	bbca <_svfiprintf_r+0x18a>
    bb60:	9307      	str	r3, [sp, #28]
    bb62:	4e35      	ldr	r6, [pc, #212]	; (bc38 <_svfiprintf_r+0x1f8>)
    bb64:	7821      	ldrb	r1, [r4, #0]
    bb66:	2203      	movs	r2, #3
    bb68:	0030      	movs	r0, r6
    bb6a:	f000 fa8d 	bl	c088 <memchr>
    bb6e:	2800      	cmp	r0, #0
    bb70:	d006      	beq.n	bb80 <_svfiprintf_r+0x140>
    bb72:	2340      	movs	r3, #64	; 0x40
    bb74:	1b80      	subs	r0, r0, r6
    bb76:	4083      	lsls	r3, r0
    bb78:	682a      	ldr	r2, [r5, #0]
    bb7a:	3401      	adds	r4, #1
    bb7c:	4313      	orrs	r3, r2
    bb7e:	602b      	str	r3, [r5, #0]
    bb80:	7821      	ldrb	r1, [r4, #0]
    bb82:	2206      	movs	r2, #6
    bb84:	482d      	ldr	r0, [pc, #180]	; (bc3c <_svfiprintf_r+0x1fc>)
    bb86:	1c66      	adds	r6, r4, #1
    bb88:	7629      	strb	r1, [r5, #24]
    bb8a:	f000 fa7d 	bl	c088 <memchr>
    bb8e:	2800      	cmp	r0, #0
    bb90:	d046      	beq.n	bc20 <_svfiprintf_r+0x1e0>
    bb92:	4b2b      	ldr	r3, [pc, #172]	; (bc40 <_svfiprintf_r+0x200>)
    bb94:	2b00      	cmp	r3, #0
    bb96:	d12f      	bne.n	bbf8 <_svfiprintf_r+0x1b8>
    bb98:	6829      	ldr	r1, [r5, #0]
    bb9a:	9b05      	ldr	r3, [sp, #20]
    bb9c:	2207      	movs	r2, #7
    bb9e:	05c9      	lsls	r1, r1, #23
    bba0:	d528      	bpl.n	bbf4 <_svfiprintf_r+0x1b4>
    bba2:	189b      	adds	r3, r3, r2
    bba4:	4393      	bics	r3, r2
    bba6:	3308      	adds	r3, #8
    bba8:	9305      	str	r3, [sp, #20]
    bbaa:	696b      	ldr	r3, [r5, #20]
    bbac:	9a03      	ldr	r2, [sp, #12]
    bbae:	189b      	adds	r3, r3, r2
    bbb0:	616b      	str	r3, [r5, #20]
    bbb2:	e767      	b.n	ba84 <_svfiprintf_r+0x44>
    bbb4:	425b      	negs	r3, r3
    bbb6:	60eb      	str	r3, [r5, #12]
    bbb8:	2302      	movs	r3, #2
    bbba:	430b      	orrs	r3, r1
    bbbc:	602b      	str	r3, [r5, #0]
    bbbe:	e7c0      	b.n	bb42 <_svfiprintf_r+0x102>
    bbc0:	434b      	muls	r3, r1
    bbc2:	3401      	adds	r4, #1
    bbc4:	189b      	adds	r3, r3, r2
    bbc6:	2001      	movs	r0, #1
    bbc8:	e7a0      	b.n	bb0c <_svfiprintf_r+0xcc>
    bbca:	2301      	movs	r3, #1
    bbcc:	425b      	negs	r3, r3
    bbce:	e7c7      	b.n	bb60 <_svfiprintf_r+0x120>
    bbd0:	2300      	movs	r3, #0
    bbd2:	0014      	movs	r4, r2
    bbd4:	200a      	movs	r0, #10
    bbd6:	001a      	movs	r2, r3
    bbd8:	606b      	str	r3, [r5, #4]
    bbda:	7821      	ldrb	r1, [r4, #0]
    bbdc:	3930      	subs	r1, #48	; 0x30
    bbde:	2909      	cmp	r1, #9
    bbe0:	d903      	bls.n	bbea <_svfiprintf_r+0x1aa>
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	d0bd      	beq.n	bb62 <_svfiprintf_r+0x122>
    bbe6:	9207      	str	r2, [sp, #28]
    bbe8:	e7bb      	b.n	bb62 <_svfiprintf_r+0x122>
    bbea:	4342      	muls	r2, r0
    bbec:	3401      	adds	r4, #1
    bbee:	1852      	adds	r2, r2, r1
    bbf0:	2301      	movs	r3, #1
    bbf2:	e7f2      	b.n	bbda <_svfiprintf_r+0x19a>
    bbf4:	3307      	adds	r3, #7
    bbf6:	e7d5      	b.n	bba4 <_svfiprintf_r+0x164>
    bbf8:	ab05      	add	r3, sp, #20
    bbfa:	9300      	str	r3, [sp, #0]
    bbfc:	003a      	movs	r2, r7
    bbfe:	4b11      	ldr	r3, [pc, #68]	; (bc44 <_svfiprintf_r+0x204>)
    bc00:	0029      	movs	r1, r5
    bc02:	9802      	ldr	r0, [sp, #8]
    bc04:	e000      	b.n	bc08 <_svfiprintf_r+0x1c8>
    bc06:	bf00      	nop
    bc08:	9003      	str	r0, [sp, #12]
    bc0a:	9b03      	ldr	r3, [sp, #12]
    bc0c:	3301      	adds	r3, #1
    bc0e:	d1cc      	bne.n	bbaa <_svfiprintf_r+0x16a>
    bc10:	89bb      	ldrh	r3, [r7, #12]
    bc12:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bc14:	065b      	lsls	r3, r3, #25
    bc16:	d400      	bmi.n	bc1a <_svfiprintf_r+0x1da>
    bc18:	e729      	b.n	ba6e <_svfiprintf_r+0x2e>
    bc1a:	2001      	movs	r0, #1
    bc1c:	4240      	negs	r0, r0
    bc1e:	e726      	b.n	ba6e <_svfiprintf_r+0x2e>
    bc20:	ab05      	add	r3, sp, #20
    bc22:	9300      	str	r3, [sp, #0]
    bc24:	003a      	movs	r2, r7
    bc26:	4b07      	ldr	r3, [pc, #28]	; (bc44 <_svfiprintf_r+0x204>)
    bc28:	0029      	movs	r1, r5
    bc2a:	9802      	ldr	r0, [sp, #8]
    bc2c:	f000 f87a 	bl	bd24 <_printf_i>
    bc30:	e7ea      	b.n	bc08 <_svfiprintf_r+0x1c8>
    bc32:	46c0      	nop			; (mov r8, r8)
    bc34:	0000cd10 	.word	0x0000cd10
    bc38:	0000cd16 	.word	0x0000cd16
    bc3c:	0000cd1a 	.word	0x0000cd1a
    bc40:	00000000 	.word	0x00000000
    bc44:	0000b97d 	.word	0x0000b97d

0000bc48 <_printf_common>:
    bc48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bc4a:	0015      	movs	r5, r2
    bc4c:	9301      	str	r3, [sp, #4]
    bc4e:	688a      	ldr	r2, [r1, #8]
    bc50:	690b      	ldr	r3, [r1, #16]
    bc52:	9000      	str	r0, [sp, #0]
    bc54:	000c      	movs	r4, r1
    bc56:	4293      	cmp	r3, r2
    bc58:	da00      	bge.n	bc5c <_printf_common+0x14>
    bc5a:	0013      	movs	r3, r2
    bc5c:	0022      	movs	r2, r4
    bc5e:	602b      	str	r3, [r5, #0]
    bc60:	3243      	adds	r2, #67	; 0x43
    bc62:	7812      	ldrb	r2, [r2, #0]
    bc64:	2a00      	cmp	r2, #0
    bc66:	d001      	beq.n	bc6c <_printf_common+0x24>
    bc68:	3301      	adds	r3, #1
    bc6a:	602b      	str	r3, [r5, #0]
    bc6c:	6823      	ldr	r3, [r4, #0]
    bc6e:	069b      	lsls	r3, r3, #26
    bc70:	d502      	bpl.n	bc78 <_printf_common+0x30>
    bc72:	682b      	ldr	r3, [r5, #0]
    bc74:	3302      	adds	r3, #2
    bc76:	602b      	str	r3, [r5, #0]
    bc78:	2706      	movs	r7, #6
    bc7a:	6823      	ldr	r3, [r4, #0]
    bc7c:	401f      	ands	r7, r3
    bc7e:	d027      	beq.n	bcd0 <_printf_common+0x88>
    bc80:	0023      	movs	r3, r4
    bc82:	3343      	adds	r3, #67	; 0x43
    bc84:	781b      	ldrb	r3, [r3, #0]
    bc86:	1e5a      	subs	r2, r3, #1
    bc88:	4193      	sbcs	r3, r2
    bc8a:	6822      	ldr	r2, [r4, #0]
    bc8c:	0692      	lsls	r2, r2, #26
    bc8e:	d430      	bmi.n	bcf2 <_printf_common+0xaa>
    bc90:	0022      	movs	r2, r4
    bc92:	9901      	ldr	r1, [sp, #4]
    bc94:	3243      	adds	r2, #67	; 0x43
    bc96:	9800      	ldr	r0, [sp, #0]
    bc98:	9e08      	ldr	r6, [sp, #32]
    bc9a:	47b0      	blx	r6
    bc9c:	1c43      	adds	r3, r0, #1
    bc9e:	d025      	beq.n	bcec <_printf_common+0xa4>
    bca0:	2306      	movs	r3, #6
    bca2:	6820      	ldr	r0, [r4, #0]
    bca4:	682a      	ldr	r2, [r5, #0]
    bca6:	68e1      	ldr	r1, [r4, #12]
    bca8:	4003      	ands	r3, r0
    bcaa:	2500      	movs	r5, #0
    bcac:	2b04      	cmp	r3, #4
    bcae:	d103      	bne.n	bcb8 <_printf_common+0x70>
    bcb0:	1a8d      	subs	r5, r1, r2
    bcb2:	43eb      	mvns	r3, r5
    bcb4:	17db      	asrs	r3, r3, #31
    bcb6:	401d      	ands	r5, r3
    bcb8:	68a3      	ldr	r3, [r4, #8]
    bcba:	6922      	ldr	r2, [r4, #16]
    bcbc:	4293      	cmp	r3, r2
    bcbe:	dd01      	ble.n	bcc4 <_printf_common+0x7c>
    bcc0:	1a9b      	subs	r3, r3, r2
    bcc2:	18ed      	adds	r5, r5, r3
    bcc4:	2700      	movs	r7, #0
    bcc6:	42bd      	cmp	r5, r7
    bcc8:	d120      	bne.n	bd0c <_printf_common+0xc4>
    bcca:	2000      	movs	r0, #0
    bccc:	e010      	b.n	bcf0 <_printf_common+0xa8>
    bcce:	3701      	adds	r7, #1
    bcd0:	68e3      	ldr	r3, [r4, #12]
    bcd2:	682a      	ldr	r2, [r5, #0]
    bcd4:	1a9b      	subs	r3, r3, r2
    bcd6:	429f      	cmp	r7, r3
    bcd8:	dad2      	bge.n	bc80 <_printf_common+0x38>
    bcda:	0022      	movs	r2, r4
    bcdc:	2301      	movs	r3, #1
    bcde:	3219      	adds	r2, #25
    bce0:	9901      	ldr	r1, [sp, #4]
    bce2:	9800      	ldr	r0, [sp, #0]
    bce4:	9e08      	ldr	r6, [sp, #32]
    bce6:	47b0      	blx	r6
    bce8:	1c43      	adds	r3, r0, #1
    bcea:	d1f0      	bne.n	bcce <_printf_common+0x86>
    bcec:	2001      	movs	r0, #1
    bcee:	4240      	negs	r0, r0
    bcf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bcf2:	2030      	movs	r0, #48	; 0x30
    bcf4:	18e1      	adds	r1, r4, r3
    bcf6:	3143      	adds	r1, #67	; 0x43
    bcf8:	7008      	strb	r0, [r1, #0]
    bcfa:	0021      	movs	r1, r4
    bcfc:	1c5a      	adds	r2, r3, #1
    bcfe:	3145      	adds	r1, #69	; 0x45
    bd00:	7809      	ldrb	r1, [r1, #0]
    bd02:	18a2      	adds	r2, r4, r2
    bd04:	3243      	adds	r2, #67	; 0x43
    bd06:	3302      	adds	r3, #2
    bd08:	7011      	strb	r1, [r2, #0]
    bd0a:	e7c1      	b.n	bc90 <_printf_common+0x48>
    bd0c:	0022      	movs	r2, r4
    bd0e:	2301      	movs	r3, #1
    bd10:	321a      	adds	r2, #26
    bd12:	9901      	ldr	r1, [sp, #4]
    bd14:	9800      	ldr	r0, [sp, #0]
    bd16:	9e08      	ldr	r6, [sp, #32]
    bd18:	47b0      	blx	r6
    bd1a:	1c43      	adds	r3, r0, #1
    bd1c:	d0e6      	beq.n	bcec <_printf_common+0xa4>
    bd1e:	3701      	adds	r7, #1
    bd20:	e7d1      	b.n	bcc6 <_printf_common+0x7e>
	...

0000bd24 <_printf_i>:
    bd24:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd26:	b08b      	sub	sp, #44	; 0x2c
    bd28:	9206      	str	r2, [sp, #24]
    bd2a:	000a      	movs	r2, r1
    bd2c:	3243      	adds	r2, #67	; 0x43
    bd2e:	9307      	str	r3, [sp, #28]
    bd30:	9005      	str	r0, [sp, #20]
    bd32:	9204      	str	r2, [sp, #16]
    bd34:	7e0a      	ldrb	r2, [r1, #24]
    bd36:	000c      	movs	r4, r1
    bd38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bd3a:	2a6e      	cmp	r2, #110	; 0x6e
    bd3c:	d100      	bne.n	bd40 <_printf_i+0x1c>
    bd3e:	e08f      	b.n	be60 <_printf_i+0x13c>
    bd40:	d817      	bhi.n	bd72 <_printf_i+0x4e>
    bd42:	2a63      	cmp	r2, #99	; 0x63
    bd44:	d02c      	beq.n	bda0 <_printf_i+0x7c>
    bd46:	d808      	bhi.n	bd5a <_printf_i+0x36>
    bd48:	2a00      	cmp	r2, #0
    bd4a:	d100      	bne.n	bd4e <_printf_i+0x2a>
    bd4c:	e099      	b.n	be82 <_printf_i+0x15e>
    bd4e:	2a58      	cmp	r2, #88	; 0x58
    bd50:	d054      	beq.n	bdfc <_printf_i+0xd8>
    bd52:	0026      	movs	r6, r4
    bd54:	3642      	adds	r6, #66	; 0x42
    bd56:	7032      	strb	r2, [r6, #0]
    bd58:	e029      	b.n	bdae <_printf_i+0x8a>
    bd5a:	2a64      	cmp	r2, #100	; 0x64
    bd5c:	d001      	beq.n	bd62 <_printf_i+0x3e>
    bd5e:	2a69      	cmp	r2, #105	; 0x69
    bd60:	d1f7      	bne.n	bd52 <_printf_i+0x2e>
    bd62:	6821      	ldr	r1, [r4, #0]
    bd64:	681a      	ldr	r2, [r3, #0]
    bd66:	0608      	lsls	r0, r1, #24
    bd68:	d523      	bpl.n	bdb2 <_printf_i+0x8e>
    bd6a:	1d11      	adds	r1, r2, #4
    bd6c:	6019      	str	r1, [r3, #0]
    bd6e:	6815      	ldr	r5, [r2, #0]
    bd70:	e025      	b.n	bdbe <_printf_i+0x9a>
    bd72:	2a73      	cmp	r2, #115	; 0x73
    bd74:	d100      	bne.n	bd78 <_printf_i+0x54>
    bd76:	e088      	b.n	be8a <_printf_i+0x166>
    bd78:	d808      	bhi.n	bd8c <_printf_i+0x68>
    bd7a:	2a6f      	cmp	r2, #111	; 0x6f
    bd7c:	d029      	beq.n	bdd2 <_printf_i+0xae>
    bd7e:	2a70      	cmp	r2, #112	; 0x70
    bd80:	d1e7      	bne.n	bd52 <_printf_i+0x2e>
    bd82:	2220      	movs	r2, #32
    bd84:	6809      	ldr	r1, [r1, #0]
    bd86:	430a      	orrs	r2, r1
    bd88:	6022      	str	r2, [r4, #0]
    bd8a:	e003      	b.n	bd94 <_printf_i+0x70>
    bd8c:	2a75      	cmp	r2, #117	; 0x75
    bd8e:	d020      	beq.n	bdd2 <_printf_i+0xae>
    bd90:	2a78      	cmp	r2, #120	; 0x78
    bd92:	d1de      	bne.n	bd52 <_printf_i+0x2e>
    bd94:	0022      	movs	r2, r4
    bd96:	2178      	movs	r1, #120	; 0x78
    bd98:	3245      	adds	r2, #69	; 0x45
    bd9a:	7011      	strb	r1, [r2, #0]
    bd9c:	4a6c      	ldr	r2, [pc, #432]	; (bf50 <_printf_i+0x22c>)
    bd9e:	e030      	b.n	be02 <_printf_i+0xde>
    bda0:	000e      	movs	r6, r1
    bda2:	681a      	ldr	r2, [r3, #0]
    bda4:	3642      	adds	r6, #66	; 0x42
    bda6:	1d11      	adds	r1, r2, #4
    bda8:	6019      	str	r1, [r3, #0]
    bdaa:	6813      	ldr	r3, [r2, #0]
    bdac:	7033      	strb	r3, [r6, #0]
    bdae:	2301      	movs	r3, #1
    bdb0:	e079      	b.n	bea6 <_printf_i+0x182>
    bdb2:	0649      	lsls	r1, r1, #25
    bdb4:	d5d9      	bpl.n	bd6a <_printf_i+0x46>
    bdb6:	1d11      	adds	r1, r2, #4
    bdb8:	6019      	str	r1, [r3, #0]
    bdba:	2300      	movs	r3, #0
    bdbc:	5ed5      	ldrsh	r5, [r2, r3]
    bdbe:	2d00      	cmp	r5, #0
    bdc0:	da03      	bge.n	bdca <_printf_i+0xa6>
    bdc2:	232d      	movs	r3, #45	; 0x2d
    bdc4:	9a04      	ldr	r2, [sp, #16]
    bdc6:	426d      	negs	r5, r5
    bdc8:	7013      	strb	r3, [r2, #0]
    bdca:	4b62      	ldr	r3, [pc, #392]	; (bf54 <_printf_i+0x230>)
    bdcc:	270a      	movs	r7, #10
    bdce:	9303      	str	r3, [sp, #12]
    bdd0:	e02f      	b.n	be32 <_printf_i+0x10e>
    bdd2:	6820      	ldr	r0, [r4, #0]
    bdd4:	6819      	ldr	r1, [r3, #0]
    bdd6:	0605      	lsls	r5, r0, #24
    bdd8:	d503      	bpl.n	bde2 <_printf_i+0xbe>
    bdda:	1d08      	adds	r0, r1, #4
    bddc:	6018      	str	r0, [r3, #0]
    bdde:	680d      	ldr	r5, [r1, #0]
    bde0:	e005      	b.n	bdee <_printf_i+0xca>
    bde2:	0640      	lsls	r0, r0, #25
    bde4:	d5f9      	bpl.n	bdda <_printf_i+0xb6>
    bde6:	680d      	ldr	r5, [r1, #0]
    bde8:	1d08      	adds	r0, r1, #4
    bdea:	6018      	str	r0, [r3, #0]
    bdec:	b2ad      	uxth	r5, r5
    bdee:	4b59      	ldr	r3, [pc, #356]	; (bf54 <_printf_i+0x230>)
    bdf0:	2708      	movs	r7, #8
    bdf2:	9303      	str	r3, [sp, #12]
    bdf4:	2a6f      	cmp	r2, #111	; 0x6f
    bdf6:	d018      	beq.n	be2a <_printf_i+0x106>
    bdf8:	270a      	movs	r7, #10
    bdfa:	e016      	b.n	be2a <_printf_i+0x106>
    bdfc:	3145      	adds	r1, #69	; 0x45
    bdfe:	700a      	strb	r2, [r1, #0]
    be00:	4a54      	ldr	r2, [pc, #336]	; (bf54 <_printf_i+0x230>)
    be02:	9203      	str	r2, [sp, #12]
    be04:	681a      	ldr	r2, [r3, #0]
    be06:	6821      	ldr	r1, [r4, #0]
    be08:	1d10      	adds	r0, r2, #4
    be0a:	6018      	str	r0, [r3, #0]
    be0c:	6815      	ldr	r5, [r2, #0]
    be0e:	0608      	lsls	r0, r1, #24
    be10:	d522      	bpl.n	be58 <_printf_i+0x134>
    be12:	07cb      	lsls	r3, r1, #31
    be14:	d502      	bpl.n	be1c <_printf_i+0xf8>
    be16:	2320      	movs	r3, #32
    be18:	4319      	orrs	r1, r3
    be1a:	6021      	str	r1, [r4, #0]
    be1c:	2710      	movs	r7, #16
    be1e:	2d00      	cmp	r5, #0
    be20:	d103      	bne.n	be2a <_printf_i+0x106>
    be22:	2320      	movs	r3, #32
    be24:	6822      	ldr	r2, [r4, #0]
    be26:	439a      	bics	r2, r3
    be28:	6022      	str	r2, [r4, #0]
    be2a:	0023      	movs	r3, r4
    be2c:	2200      	movs	r2, #0
    be2e:	3343      	adds	r3, #67	; 0x43
    be30:	701a      	strb	r2, [r3, #0]
    be32:	6863      	ldr	r3, [r4, #4]
    be34:	60a3      	str	r3, [r4, #8]
    be36:	2b00      	cmp	r3, #0
    be38:	db5c      	blt.n	bef4 <_printf_i+0x1d0>
    be3a:	2204      	movs	r2, #4
    be3c:	6821      	ldr	r1, [r4, #0]
    be3e:	4391      	bics	r1, r2
    be40:	6021      	str	r1, [r4, #0]
    be42:	2d00      	cmp	r5, #0
    be44:	d158      	bne.n	bef8 <_printf_i+0x1d4>
    be46:	9e04      	ldr	r6, [sp, #16]
    be48:	2b00      	cmp	r3, #0
    be4a:	d064      	beq.n	bf16 <_printf_i+0x1f2>
    be4c:	0026      	movs	r6, r4
    be4e:	9b03      	ldr	r3, [sp, #12]
    be50:	3642      	adds	r6, #66	; 0x42
    be52:	781b      	ldrb	r3, [r3, #0]
    be54:	7033      	strb	r3, [r6, #0]
    be56:	e05e      	b.n	bf16 <_printf_i+0x1f2>
    be58:	0648      	lsls	r0, r1, #25
    be5a:	d5da      	bpl.n	be12 <_printf_i+0xee>
    be5c:	b2ad      	uxth	r5, r5
    be5e:	e7d8      	b.n	be12 <_printf_i+0xee>
    be60:	6809      	ldr	r1, [r1, #0]
    be62:	681a      	ldr	r2, [r3, #0]
    be64:	0608      	lsls	r0, r1, #24
    be66:	d505      	bpl.n	be74 <_printf_i+0x150>
    be68:	1d11      	adds	r1, r2, #4
    be6a:	6019      	str	r1, [r3, #0]
    be6c:	6813      	ldr	r3, [r2, #0]
    be6e:	6962      	ldr	r2, [r4, #20]
    be70:	601a      	str	r2, [r3, #0]
    be72:	e006      	b.n	be82 <_printf_i+0x15e>
    be74:	0649      	lsls	r1, r1, #25
    be76:	d5f7      	bpl.n	be68 <_printf_i+0x144>
    be78:	1d11      	adds	r1, r2, #4
    be7a:	6019      	str	r1, [r3, #0]
    be7c:	6813      	ldr	r3, [r2, #0]
    be7e:	8aa2      	ldrh	r2, [r4, #20]
    be80:	801a      	strh	r2, [r3, #0]
    be82:	2300      	movs	r3, #0
    be84:	9e04      	ldr	r6, [sp, #16]
    be86:	6123      	str	r3, [r4, #16]
    be88:	e054      	b.n	bf34 <_printf_i+0x210>
    be8a:	681a      	ldr	r2, [r3, #0]
    be8c:	1d11      	adds	r1, r2, #4
    be8e:	6019      	str	r1, [r3, #0]
    be90:	6816      	ldr	r6, [r2, #0]
    be92:	2100      	movs	r1, #0
    be94:	6862      	ldr	r2, [r4, #4]
    be96:	0030      	movs	r0, r6
    be98:	f000 f8f6 	bl	c088 <memchr>
    be9c:	2800      	cmp	r0, #0
    be9e:	d001      	beq.n	bea4 <_printf_i+0x180>
    bea0:	1b80      	subs	r0, r0, r6
    bea2:	6060      	str	r0, [r4, #4]
    bea4:	6863      	ldr	r3, [r4, #4]
    bea6:	6123      	str	r3, [r4, #16]
    bea8:	2300      	movs	r3, #0
    beaa:	9a04      	ldr	r2, [sp, #16]
    beac:	7013      	strb	r3, [r2, #0]
    beae:	e041      	b.n	bf34 <_printf_i+0x210>
    beb0:	6923      	ldr	r3, [r4, #16]
    beb2:	0032      	movs	r2, r6
    beb4:	9906      	ldr	r1, [sp, #24]
    beb6:	9805      	ldr	r0, [sp, #20]
    beb8:	9d07      	ldr	r5, [sp, #28]
    beba:	47a8      	blx	r5
    bebc:	1c43      	adds	r3, r0, #1
    bebe:	d043      	beq.n	bf48 <_printf_i+0x224>
    bec0:	6823      	ldr	r3, [r4, #0]
    bec2:	2500      	movs	r5, #0
    bec4:	079b      	lsls	r3, r3, #30
    bec6:	d40f      	bmi.n	bee8 <_printf_i+0x1c4>
    bec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    beca:	68e0      	ldr	r0, [r4, #12]
    becc:	4298      	cmp	r0, r3
    bece:	da3d      	bge.n	bf4c <_printf_i+0x228>
    bed0:	0018      	movs	r0, r3
    bed2:	e03b      	b.n	bf4c <_printf_i+0x228>
    bed4:	0022      	movs	r2, r4
    bed6:	2301      	movs	r3, #1
    bed8:	3219      	adds	r2, #25
    beda:	9906      	ldr	r1, [sp, #24]
    bedc:	9805      	ldr	r0, [sp, #20]
    bede:	9e07      	ldr	r6, [sp, #28]
    bee0:	47b0      	blx	r6
    bee2:	1c43      	adds	r3, r0, #1
    bee4:	d030      	beq.n	bf48 <_printf_i+0x224>
    bee6:	3501      	adds	r5, #1
    bee8:	68e3      	ldr	r3, [r4, #12]
    beea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    beec:	1a9b      	subs	r3, r3, r2
    beee:	429d      	cmp	r5, r3
    bef0:	dbf0      	blt.n	bed4 <_printf_i+0x1b0>
    bef2:	e7e9      	b.n	bec8 <_printf_i+0x1a4>
    bef4:	2d00      	cmp	r5, #0
    bef6:	d0a9      	beq.n	be4c <_printf_i+0x128>
    bef8:	9e04      	ldr	r6, [sp, #16]
    befa:	0028      	movs	r0, r5
    befc:	0039      	movs	r1, r7
    befe:	f7ff f881 	bl	b004 <__aeabi_uidivmod>
    bf02:	9b03      	ldr	r3, [sp, #12]
    bf04:	3e01      	subs	r6, #1
    bf06:	5c5b      	ldrb	r3, [r3, r1]
    bf08:	0028      	movs	r0, r5
    bf0a:	7033      	strb	r3, [r6, #0]
    bf0c:	0039      	movs	r1, r7
    bf0e:	f7fe fff3 	bl	aef8 <__udivsi3>
    bf12:	1e05      	subs	r5, r0, #0
    bf14:	d1f1      	bne.n	befa <_printf_i+0x1d6>
    bf16:	2f08      	cmp	r7, #8
    bf18:	d109      	bne.n	bf2e <_printf_i+0x20a>
    bf1a:	6823      	ldr	r3, [r4, #0]
    bf1c:	07db      	lsls	r3, r3, #31
    bf1e:	d506      	bpl.n	bf2e <_printf_i+0x20a>
    bf20:	6863      	ldr	r3, [r4, #4]
    bf22:	6922      	ldr	r2, [r4, #16]
    bf24:	4293      	cmp	r3, r2
    bf26:	dc02      	bgt.n	bf2e <_printf_i+0x20a>
    bf28:	2330      	movs	r3, #48	; 0x30
    bf2a:	3e01      	subs	r6, #1
    bf2c:	7033      	strb	r3, [r6, #0]
    bf2e:	9b04      	ldr	r3, [sp, #16]
    bf30:	1b9b      	subs	r3, r3, r6
    bf32:	6123      	str	r3, [r4, #16]
    bf34:	9b07      	ldr	r3, [sp, #28]
    bf36:	aa09      	add	r2, sp, #36	; 0x24
    bf38:	9300      	str	r3, [sp, #0]
    bf3a:	0021      	movs	r1, r4
    bf3c:	9b06      	ldr	r3, [sp, #24]
    bf3e:	9805      	ldr	r0, [sp, #20]
    bf40:	f7ff fe82 	bl	bc48 <_printf_common>
    bf44:	1c43      	adds	r3, r0, #1
    bf46:	d1b3      	bne.n	beb0 <_printf_i+0x18c>
    bf48:	2001      	movs	r0, #1
    bf4a:	4240      	negs	r0, r0
    bf4c:	b00b      	add	sp, #44	; 0x2c
    bf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf50:	0000cd32 	.word	0x0000cd32
    bf54:	0000cd21 	.word	0x0000cd21

0000bf58 <__sread>:
    bf58:	b570      	push	{r4, r5, r6, lr}
    bf5a:	000c      	movs	r4, r1
    bf5c:	250e      	movs	r5, #14
    bf5e:	5f49      	ldrsh	r1, [r1, r5]
    bf60:	f000 f8d6 	bl	c110 <_read_r>
    bf64:	2800      	cmp	r0, #0
    bf66:	db03      	blt.n	bf70 <__sread+0x18>
    bf68:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bf6a:	181b      	adds	r3, r3, r0
    bf6c:	6563      	str	r3, [r4, #84]	; 0x54
    bf6e:	bd70      	pop	{r4, r5, r6, pc}
    bf70:	89a3      	ldrh	r3, [r4, #12]
    bf72:	4a02      	ldr	r2, [pc, #8]	; (bf7c <__sread+0x24>)
    bf74:	4013      	ands	r3, r2
    bf76:	81a3      	strh	r3, [r4, #12]
    bf78:	e7f9      	b.n	bf6e <__sread+0x16>
    bf7a:	46c0      	nop			; (mov r8, r8)
    bf7c:	ffffefff 	.word	0xffffefff

0000bf80 <__swrite>:
    bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf82:	001f      	movs	r7, r3
    bf84:	898b      	ldrh	r3, [r1, #12]
    bf86:	0005      	movs	r5, r0
    bf88:	000c      	movs	r4, r1
    bf8a:	0016      	movs	r6, r2
    bf8c:	05db      	lsls	r3, r3, #23
    bf8e:	d505      	bpl.n	bf9c <__swrite+0x1c>
    bf90:	230e      	movs	r3, #14
    bf92:	5ec9      	ldrsh	r1, [r1, r3]
    bf94:	2200      	movs	r2, #0
    bf96:	2302      	movs	r3, #2
    bf98:	f000 f862 	bl	c060 <_lseek_r>
    bf9c:	89a3      	ldrh	r3, [r4, #12]
    bf9e:	4a05      	ldr	r2, [pc, #20]	; (bfb4 <__swrite+0x34>)
    bfa0:	0028      	movs	r0, r5
    bfa2:	4013      	ands	r3, r2
    bfa4:	81a3      	strh	r3, [r4, #12]
    bfa6:	0032      	movs	r2, r6
    bfa8:	230e      	movs	r3, #14
    bfaa:	5ee1      	ldrsh	r1, [r4, r3]
    bfac:	003b      	movs	r3, r7
    bfae:	f000 f81f 	bl	bff0 <_write_r>
    bfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfb4:	ffffefff 	.word	0xffffefff

0000bfb8 <__sseek>:
    bfb8:	b570      	push	{r4, r5, r6, lr}
    bfba:	000c      	movs	r4, r1
    bfbc:	250e      	movs	r5, #14
    bfbe:	5f49      	ldrsh	r1, [r1, r5]
    bfc0:	f000 f84e 	bl	c060 <_lseek_r>
    bfc4:	89a3      	ldrh	r3, [r4, #12]
    bfc6:	1c42      	adds	r2, r0, #1
    bfc8:	d103      	bne.n	bfd2 <__sseek+0x1a>
    bfca:	4a05      	ldr	r2, [pc, #20]	; (bfe0 <__sseek+0x28>)
    bfcc:	4013      	ands	r3, r2
    bfce:	81a3      	strh	r3, [r4, #12]
    bfd0:	bd70      	pop	{r4, r5, r6, pc}
    bfd2:	2280      	movs	r2, #128	; 0x80
    bfd4:	0152      	lsls	r2, r2, #5
    bfd6:	4313      	orrs	r3, r2
    bfd8:	81a3      	strh	r3, [r4, #12]
    bfda:	6560      	str	r0, [r4, #84]	; 0x54
    bfdc:	e7f8      	b.n	bfd0 <__sseek+0x18>
    bfde:	46c0      	nop			; (mov r8, r8)
    bfe0:	ffffefff 	.word	0xffffefff

0000bfe4 <__sclose>:
    bfe4:	b510      	push	{r4, lr}
    bfe6:	230e      	movs	r3, #14
    bfe8:	5ec9      	ldrsh	r1, [r1, r3]
    bfea:	f000 f815 	bl	c018 <_close_r>
    bfee:	bd10      	pop	{r4, pc}

0000bff0 <_write_r>:
    bff0:	b570      	push	{r4, r5, r6, lr}
    bff2:	0005      	movs	r5, r0
    bff4:	0008      	movs	r0, r1
    bff6:	0011      	movs	r1, r2
    bff8:	2200      	movs	r2, #0
    bffa:	4c06      	ldr	r4, [pc, #24]	; (c014 <_write_r+0x24>)
    bffc:	6022      	str	r2, [r4, #0]
    bffe:	001a      	movs	r2, r3
    c000:	f7fb f828 	bl	7054 <_write>
    c004:	1c43      	adds	r3, r0, #1
    c006:	d103      	bne.n	c010 <_write_r+0x20>
    c008:	6823      	ldr	r3, [r4, #0]
    c00a:	2b00      	cmp	r3, #0
    c00c:	d000      	beq.n	c010 <_write_r+0x20>
    c00e:	602b      	str	r3, [r5, #0]
    c010:	bd70      	pop	{r4, r5, r6, pc}
    c012:	46c0      	nop			; (mov r8, r8)
    c014:	20000c90 	.word	0x20000c90

0000c018 <_close_r>:
    c018:	2300      	movs	r3, #0
    c01a:	b570      	push	{r4, r5, r6, lr}
    c01c:	4c06      	ldr	r4, [pc, #24]	; (c038 <_close_r+0x20>)
    c01e:	0005      	movs	r5, r0
    c020:	0008      	movs	r0, r1
    c022:	6023      	str	r3, [r4, #0]
    c024:	f7fb f86a 	bl	70fc <_close>
    c028:	1c43      	adds	r3, r0, #1
    c02a:	d103      	bne.n	c034 <_close_r+0x1c>
    c02c:	6823      	ldr	r3, [r4, #0]
    c02e:	2b00      	cmp	r3, #0
    c030:	d000      	beq.n	c034 <_close_r+0x1c>
    c032:	602b      	str	r3, [r5, #0]
    c034:	bd70      	pop	{r4, r5, r6, pc}
    c036:	46c0      	nop			; (mov r8, r8)
    c038:	20000c90 	.word	0x20000c90

0000c03c <_fstat_r>:
    c03c:	2300      	movs	r3, #0
    c03e:	b570      	push	{r4, r5, r6, lr}
    c040:	4c06      	ldr	r4, [pc, #24]	; (c05c <_fstat_r+0x20>)
    c042:	0005      	movs	r5, r0
    c044:	0008      	movs	r0, r1
    c046:	0011      	movs	r1, r2
    c048:	6023      	str	r3, [r4, #0]
    c04a:	f7fb f861 	bl	7110 <_fstat>
    c04e:	1c43      	adds	r3, r0, #1
    c050:	d103      	bne.n	c05a <_fstat_r+0x1e>
    c052:	6823      	ldr	r3, [r4, #0]
    c054:	2b00      	cmp	r3, #0
    c056:	d000      	beq.n	c05a <_fstat_r+0x1e>
    c058:	602b      	str	r3, [r5, #0]
    c05a:	bd70      	pop	{r4, r5, r6, pc}
    c05c:	20000c90 	.word	0x20000c90

0000c060 <_lseek_r>:
    c060:	b570      	push	{r4, r5, r6, lr}
    c062:	0005      	movs	r5, r0
    c064:	0008      	movs	r0, r1
    c066:	0011      	movs	r1, r2
    c068:	2200      	movs	r2, #0
    c06a:	4c06      	ldr	r4, [pc, #24]	; (c084 <_lseek_r+0x24>)
    c06c:	6022      	str	r2, [r4, #0]
    c06e:	001a      	movs	r2, r3
    c070:	f7fb f85c 	bl	712c <_lseek>
    c074:	1c43      	adds	r3, r0, #1
    c076:	d103      	bne.n	c080 <_lseek_r+0x20>
    c078:	6823      	ldr	r3, [r4, #0]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d000      	beq.n	c080 <_lseek_r+0x20>
    c07e:	602b      	str	r3, [r5, #0]
    c080:	bd70      	pop	{r4, r5, r6, pc}
    c082:	46c0      	nop			; (mov r8, r8)
    c084:	20000c90 	.word	0x20000c90

0000c088 <memchr>:
    c088:	b2c9      	uxtb	r1, r1
    c08a:	1882      	adds	r2, r0, r2
    c08c:	4290      	cmp	r0, r2
    c08e:	d101      	bne.n	c094 <memchr+0xc>
    c090:	2000      	movs	r0, #0
    c092:	4770      	bx	lr
    c094:	7803      	ldrb	r3, [r0, #0]
    c096:	428b      	cmp	r3, r1
    c098:	d0fb      	beq.n	c092 <memchr+0xa>
    c09a:	3001      	adds	r0, #1
    c09c:	e7f6      	b.n	c08c <memchr+0x4>

0000c09e <memmove>:
    c09e:	b510      	push	{r4, lr}
    c0a0:	4288      	cmp	r0, r1
    c0a2:	d902      	bls.n	c0aa <memmove+0xc>
    c0a4:	188b      	adds	r3, r1, r2
    c0a6:	4298      	cmp	r0, r3
    c0a8:	d308      	bcc.n	c0bc <memmove+0x1e>
    c0aa:	2300      	movs	r3, #0
    c0ac:	429a      	cmp	r2, r3
    c0ae:	d007      	beq.n	c0c0 <memmove+0x22>
    c0b0:	5ccc      	ldrb	r4, [r1, r3]
    c0b2:	54c4      	strb	r4, [r0, r3]
    c0b4:	3301      	adds	r3, #1
    c0b6:	e7f9      	b.n	c0ac <memmove+0xe>
    c0b8:	5c8b      	ldrb	r3, [r1, r2]
    c0ba:	5483      	strb	r3, [r0, r2]
    c0bc:	3a01      	subs	r2, #1
    c0be:	d2fb      	bcs.n	c0b8 <memmove+0x1a>
    c0c0:	bd10      	pop	{r4, pc}

0000c0c2 <_realloc_r>:
    c0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0c4:	0007      	movs	r7, r0
    c0c6:	000d      	movs	r5, r1
    c0c8:	0016      	movs	r6, r2
    c0ca:	2900      	cmp	r1, #0
    c0cc:	d105      	bne.n	c0da <_realloc_r+0x18>
    c0ce:	0011      	movs	r1, r2
    c0d0:	f7ff f93c 	bl	b34c <_malloc_r>
    c0d4:	0004      	movs	r4, r0
    c0d6:	0020      	movs	r0, r4
    c0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0da:	2a00      	cmp	r2, #0
    c0dc:	d103      	bne.n	c0e6 <_realloc_r+0x24>
    c0de:	f7ff f8eb 	bl	b2b8 <_free_r>
    c0e2:	0034      	movs	r4, r6
    c0e4:	e7f7      	b.n	c0d6 <_realloc_r+0x14>
    c0e6:	f000 f827 	bl	c138 <_malloc_usable_size_r>
    c0ea:	002c      	movs	r4, r5
    c0ec:	4286      	cmp	r6, r0
    c0ee:	d9f2      	bls.n	c0d6 <_realloc_r+0x14>
    c0f0:	0031      	movs	r1, r6
    c0f2:	0038      	movs	r0, r7
    c0f4:	f7ff f92a 	bl	b34c <_malloc_r>
    c0f8:	1e04      	subs	r4, r0, #0
    c0fa:	d0ec      	beq.n	c0d6 <_realloc_r+0x14>
    c0fc:	0029      	movs	r1, r5
    c0fe:	0032      	movs	r2, r6
    c100:	f7ff f8c8 	bl	b294 <memcpy>
    c104:	0029      	movs	r1, r5
    c106:	0038      	movs	r0, r7
    c108:	f7ff f8d6 	bl	b2b8 <_free_r>
    c10c:	e7e3      	b.n	c0d6 <_realloc_r+0x14>
	...

0000c110 <_read_r>:
    c110:	b570      	push	{r4, r5, r6, lr}
    c112:	0005      	movs	r5, r0
    c114:	0008      	movs	r0, r1
    c116:	0011      	movs	r1, r2
    c118:	2200      	movs	r2, #0
    c11a:	4c06      	ldr	r4, [pc, #24]	; (c134 <_read_r+0x24>)
    c11c:	6022      	str	r2, [r4, #0]
    c11e:	001a      	movs	r2, r3
    c120:	f7fa ff6e 	bl	7000 <_read>
    c124:	1c43      	adds	r3, r0, #1
    c126:	d103      	bne.n	c130 <_read_r+0x20>
    c128:	6823      	ldr	r3, [r4, #0]
    c12a:	2b00      	cmp	r3, #0
    c12c:	d000      	beq.n	c130 <_read_r+0x20>
    c12e:	602b      	str	r3, [r5, #0]
    c130:	bd70      	pop	{r4, r5, r6, pc}
    c132:	46c0      	nop			; (mov r8, r8)
    c134:	20000c90 	.word	0x20000c90

0000c138 <_malloc_usable_size_r>:
    c138:	1f0b      	subs	r3, r1, #4
    c13a:	681b      	ldr	r3, [r3, #0]
    c13c:	1f18      	subs	r0, r3, #4
    c13e:	2b00      	cmp	r3, #0
    c140:	da01      	bge.n	c146 <_malloc_usable_size_r+0xe>
    c142:	580b      	ldr	r3, [r1, r0]
    c144:	18c0      	adds	r0, r0, r3
    c146:	4770      	bx	lr
    c148:	0000064c 	.word	0x0000064c
    c14c:	0000064c 	.word	0x0000064c
    c150:	00000640 	.word	0x00000640
    c154:	0000064c 	.word	0x0000064c
    c158:	00000640 	.word	0x00000640
    c15c:	0000061a 	.word	0x0000061a
    c160:	0000061a 	.word	0x0000061a
    c164:	0000064c 	.word	0x0000064c
    c168:	0000064c 	.word	0x0000064c
    c16c:	0000064c 	.word	0x0000064c
    c170:	0000064c 	.word	0x0000064c
    c174:	0000064c 	.word	0x0000064c
    c178:	0000064c 	.word	0x0000064c
    c17c:	0000064c 	.word	0x0000064c
    c180:	0000064c 	.word	0x0000064c
    c184:	0000064c 	.word	0x0000064c
    c188:	0000064c 	.word	0x0000064c
    c18c:	0000064c 	.word	0x0000064c
    c190:	0000064c 	.word	0x0000064c
    c194:	0000064c 	.word	0x0000064c
    c198:	0000064c 	.word	0x0000064c
    c19c:	0000064c 	.word	0x0000064c
    c1a0:	0000064c 	.word	0x0000064c
    c1a4:	0000064c 	.word	0x0000064c
    c1a8:	0000064c 	.word	0x0000064c
    c1ac:	0000064c 	.word	0x0000064c
    c1b0:	0000064c 	.word	0x0000064c
    c1b4:	0000064c 	.word	0x0000064c
    c1b8:	0000064c 	.word	0x0000064c
    c1bc:	0000064c 	.word	0x0000064c
    c1c0:	0000064c 	.word	0x0000064c
    c1c4:	0000064c 	.word	0x0000064c
    c1c8:	0000064c 	.word	0x0000064c
    c1cc:	0000064c 	.word	0x0000064c
    c1d0:	0000064c 	.word	0x0000064c
    c1d4:	0000064c 	.word	0x0000064c
    c1d8:	0000064c 	.word	0x0000064c
    c1dc:	0000064c 	.word	0x0000064c
    c1e0:	0000064c 	.word	0x0000064c
    c1e4:	0000064c 	.word	0x0000064c
    c1e8:	0000064c 	.word	0x0000064c
    c1ec:	0000064c 	.word	0x0000064c
    c1f0:	0000064c 	.word	0x0000064c
    c1f4:	0000064c 	.word	0x0000064c
    c1f8:	0000064c 	.word	0x0000064c
    c1fc:	0000064c 	.word	0x0000064c
    c200:	0000064c 	.word	0x0000064c
    c204:	0000064c 	.word	0x0000064c
    c208:	0000064c 	.word	0x0000064c
    c20c:	0000064c 	.word	0x0000064c
    c210:	0000064c 	.word	0x0000064c
    c214:	0000064c 	.word	0x0000064c
    c218:	0000064c 	.word	0x0000064c
    c21c:	0000064c 	.word	0x0000064c
    c220:	0000064c 	.word	0x0000064c
    c224:	0000064c 	.word	0x0000064c
    c228:	0000064c 	.word	0x0000064c
    c22c:	0000064c 	.word	0x0000064c
    c230:	0000064c 	.word	0x0000064c
    c234:	0000064c 	.word	0x0000064c
    c238:	0000064c 	.word	0x0000064c
    c23c:	0000064c 	.word	0x0000064c
    c240:	0000064c 	.word	0x0000064c
    c244:	0000064c 	.word	0x0000064c
    c248:	00000640 	.word	0x00000640
    c24c:	00000640 	.word	0x00000640
    c250:	00000656 	.word	0x00000656
    c254:	00000656 	.word	0x00000656
    c258:	00000656 	.word	0x00000656
    c25c:	00000656 	.word	0x00000656

0000c260 <sd_mmc_trans_units>:
    c260:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000c27c <sd_trans_multipliers>:
    c27c:	00000000 0000000a 0000000c 0000000d     ................
    c28c:	0000000f 00000014 00000019 0000001e     ................
    c29c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    c2ac:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000c2bc <mmc_trans_multipliers>:
    c2bc:	00000000 0000000a 0000000c 0000000d     ................
    c2cc:	0000000f 00000014 0000001a 0000001e     ................
    c2dc:	00000023 00000028 0000002d 00000034     #...(...-...4...
    c2ec:	00000037 0000003c 00000046 00000050     7...<...F...P...
    c2fc:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    c30c:	22302074 00000000                       t 0"....

0000c314 <lun_desc>:
    c314:	00002469 000024c1 0000250d 00002559     i$...$...%..Y%..
    c324:	00002589 0000260d 0000269d 0000c2fc     .%...&...&......
    c334:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    c344:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    c354:	0000617e 000061f8 000061f8 0000619c     ~a...a...a...a..
    c364:	00006196 000061a2 00006184 000061a8     .a...a...a...a..
    c374:	000061de 000064c4 00006514 00006514     .a...d...e...e..
    c384:	00006510 000064b6 000064d6 000064a6     .e...d...d...d..
    c394:	000064e8 000064fa 00006562 00006590     .d...d..be...e..
    c3a4:	00006590 0000658c 0000655c 00006568     .e...e..\e..he..
    c3b4:	00006556 0000656e 00006574              Ve..ne..te..

0000c3c0 <LfnOfs>:
    c3c0:	07050301 12100e09 1c181614 0000001e     ................
    c3d0:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    c3e0:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    c3f0:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    c400:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    c410:	20205441 00202020                       AT     .

0000c418 <excvt.4558>:
    c418:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    c428:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    c438:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    c448:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    c458:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    c468:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    c478:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    c488:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000c498 <Tbl>:
    c498:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    c4a8:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    c4b8:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    c4c8:	00d600ff 00f800dc 00d800a3 019200d7     ................
    c4d8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    c4e8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    c4f8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    c508:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    c518:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    c528:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    c538:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    c548:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    c558:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    c568:	00da00de 00d900db 00dd00fd 00b400af     ................
    c578:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    c588:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000c598 <tbl_lower.4308>:
    c598:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    c5a8:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    c5b8:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    c5c8:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    c5d8:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    c5e8:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    c5f8:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    c608:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    c618:	01050103 01090107 010d010b 0111010f     ................
    c628:	01150113 01190117 011d011b 0121011f     ..............!.
    c638:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    c648:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    c658:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    c668:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    c678:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    c688:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    c698:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    c6a8:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    c6b8:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    c6c8:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    c6d8:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    c6e8:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    c6f8:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    c708:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    c718:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    c728:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    c738:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    c748:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    c758:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    c768:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000c778 <tbl_upper.4309>:
    c778:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    c788:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    c798:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    c7a8:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    c7b8:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    c7c8:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    c7d8:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    c7e8:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    c7f8:	01040102 01080106 010c010a 0110010e     ................
    c808:	01140112 01180116 011c011a 0120011e     .............. .
    c818:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    c828:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    c838:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    c848:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    c858:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    c868:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    c878:	03940393 03960395 03980397 039a0399     ................
    c888:	039c039b 039e039d 03a0039f 03a303a1     ................
    c898:	03a503a4 03a703a6 03a903a8 041003aa     ................
    c8a8:	04120411 04140413 04160415 04180417     ................
    c8b8:	041a0419 041c041b 041e041d 0420041f     .............. .
    c8c8:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    c8d8:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    c8e8:	04030402 04050404 04070406 04090408     ................
    c8f8:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    c908:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    c918:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    c928:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    c938:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    c948:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    c958:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    c968:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    c978:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    c988:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    c998:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    c9a8:	20216465 63656843 6f79206b 63207275     ed! Check your c
    c9b8:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    c9c8:	77206d65 206c6c69 74736572 20747261     em will restart 
    c9d8:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    c9e8:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    c9f8:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    ca08:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    ca18:	00000a0d 204d564e 6f666e49 754e203a     ....NVM Info: Nu
    ca28:	7265626d 20666f20 65676150 64252073     mber of Pages %d
    ca38:	6953202e 6f20657a 20612066 65676170     . Size of a page
    ca48:	6425203a 74796220 202e7365 00000a0d     : %d bytes. ....
    ca58:	6c463a30 2e416761 006e6962 35455345     0:FlagA.bin.ESE5
    ca68:	2d203631 49584520 4f422054 4f4c544f     16 - EXIT BOOTLO
    ca78:	52454441 00000000 43204453 20647261     ADER....SD Card 
    ca88:	74696e69 65746169 6f632064 63657272     initiated correc
    ca98:	21796c74 00000d0a 6e756f4d 69642074     tly!....Mount di
    caa8:	28206b73 6f6d5f66 29746e75 0d2e2e2e     sk (f_mount)....
    cab8:	0000000a 4941465b 72205d4c 25207365     ....[FAIL] res %
    cac8:	000a0d64 5d4b4f5b 00000a0d 61657243     d...[OK]....Crea
    cad8:	61206574 6c696620 66282065 65706f5f     te a file (f_ope
    cae8:	2e2e296e 000a0d2e 74697257 6f742065     n)......Write to
    caf8:	73657420 69662074 2820656c 75705f66      test file (f_pu
    cb08:	2e297374 0a0d2e2e 00000000 74736554     ts).........Test
    cb18:	2f445320 20434d4d 63617473 00000a6b      SD/MMC stack...
    cb28:	4941465b 0a0d5d4c 00000000 74736554     [FAIL]......Test
    cb38:	20736920 63637573 66737365 0a2e6c75      is successful..
    cb48:	0000000d 6c756f43 6f6e2064 706f2074     ....Could not op
    cb58:	62206e65 72616e69 69662079 0d21656c     en binary file!.
    cb68:	0000000a 74697257 6f742065 73657420     ....Write to tes
    cb78:	69662074 2820656c 72775f66 29657469     t file (f_write)
    cb88:	0d2e2e2e 0000000a 20646e45 5420666f     ........End of T
    cb98:	2e747365 00000d0a 43204453 20647261     est.....SD Card 
    cba8:	6c696166 69206465 6974696e 6f697461     failed initiatio
    cbb8:	4320216e 6b636568 6e6f6320 7463656e     n! Check connect
    cbc8:	736e6f69 000d0a21 73617245 72652065     ions!...Erase er
    cbd8:	21726f72 00000a0d 6f727245 202d2072     ror!....Error - 
    cbe8:	74736574 67617020 73692065 746f6e20     test page is not
    cbf8:	61726520 21646573 00000000 61746144      erased!....Data
    cc08:	61726520 20646573 63637573 66737365      erased successf
    cc18:	796c6c75 0a0d2021 00000000 65746564     ully! ......dete
    cc28:	66207463 2067616c 0a0d2141 00000000     ct flag A!......
    cc38:	6c756f43 6f6e2064 706f2074 66206e65     Could not open f
    cc48:	21656c69 00000a0d 74736554 69727720     ile!....Test wri
    cc58:	74206574 564e206f 6166204d 64656c69     te to NVM failed
    cc68:	000a0d21 74736554 69727720 74206574     !...Test write t
    cc78:	564e206f 7573204d 65656363 21646564     o NVM succeeded!
    cc88:	00000a0d 20435243 63656863 7573206b     ....CRC check su
    cc98:	65656363 21646564 0a0a0a0d 0a0a0a0a     cceeded!........
    cca8:	0000000a                                ....

0000ccac <_global_impure_ptr>:
    ccac:	20000034                                4.. 

0000ccb0 <__sf_fake_stderr>:
	...

0000ccd0 <__sf_fake_stdin>:
	...

0000ccf0 <__sf_fake_stdout>:
	...
    cd10:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    cd20:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    cd30:	31300046 35343332 39383736 64636261     F.0123456789abcd
    cd40:	00006665                                ef..

0000cd44 <_init>:
    cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd46:	46c0      	nop			; (mov r8, r8)
    cd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cd4a:	bc08      	pop	{r3}
    cd4c:	469e      	mov	lr, r3
    cd4e:	4770      	bx	lr

0000cd50 <__init_array_start>:
    cd50:	000000dd 	.word	0x000000dd

0000cd54 <_fini>:
    cd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd56:	46c0      	nop			; (mov r8, r8)
    cd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cd5a:	bc08      	pop	{r3}
    cd5c:	469e      	mov	lr, r3
    cd5e:	4770      	bx	lr

0000cd60 <__fini_array_start>:
    cd60:	000000b5 	.word	0x000000b5
